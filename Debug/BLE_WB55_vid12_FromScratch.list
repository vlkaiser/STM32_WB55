
BLE_WB55_vid12_FromScratch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009068  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  080091a8  080091a8  000191a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009508  08009508  00019508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009510  08009510  00019510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009514  08009514  00019514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000004  08009518  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000084  08009598  00020084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003e  20000120  08009631  00020120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000160  0800966f  00020160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 00000084  20000174  08009680  00020174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000034c  200001f8  08009704  000201f8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000544  08009704  00020544  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 17 .debug_info   0002b5f5  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 000055be  00000000  00000000  0004b81d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 000025f8  00000000  00000000  00050de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002390  00000000  00000000  000533d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002ba55  00000000  00000000  00055768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   000287cb  00000000  00000000  000811bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000f629b  00000000  00000000  000a9988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  0019fc23  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000a318  00000000  00000000  0019fc74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f8 	.word	0x200001f8
 800015c:	00000000 	.word	0x00000000
 8000160:	08009190 	.word	0x08009190

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001fc 	.word	0x200001fc
 800017c:	08009190 	.word	0x08009190

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <APPD_EnableCPU2+0x34>)
 800053c:	1d3c      	adds	r4, r7, #4
 800053e:	461d      	mov	r5, r3
 8000540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000544:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000548:	c403      	stmia	r4!, {r0, r1}
 800054a:	8022      	strh	r2, [r4, #0]
 800054c:	3402      	adds	r4, #2
 800054e:	0c13      	lsrs	r3, r2, #16
 8000550:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000552:	f006 fed5 	bl	8007300 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	4618      	mov	r0, r3
 800055a:	f006 f970 	bl	800683e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800055e:	bf00      	nop
}
 8000560:	3720      	adds	r7, #32
 8000562:	46bd      	mov	sp, r7
 8000564:	bdb0      	pop	{r4, r5, r7, pc}
 8000566:	bf00      	nop
 8000568:	080091a8 	.word	0x080091a8

0800056c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000574:	4b07      	ldr	r3, [pc, #28]	; (8000594 <LL_C2_PWR_SetPowerMode+0x28>)
 8000576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800057a:	f023 0207 	bic.w	r2, r3, #7
 800057e:	4905      	ldr	r1, [pc, #20]	; (8000594 <LL_C2_PWR_SetPowerMode+0x28>)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4313      	orrs	r3, r2
 8000584:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	58000400 	.word	0x58000400

08000598 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <LL_EXTI_EnableIT_32_63+0x24>)
 80005a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80005a6:	4905      	ldr	r1, [pc, #20]	; (80005bc <LL_EXTI_EnableIT_32_63+0x24>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4313      	orrs	r3, r2
 80005ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	58000800 	.word	0x58000800

080005c0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80005c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005cc:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80005ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80005d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80005da:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	021b      	lsls	r3, r3, #8
 80005e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005e6:	4313      	orrs	r3, r2
 80005e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	cafecafe 	.word	0xcafecafe

080005fc <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800060e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4313      	orrs	r3, r2
 8000616:	608b      	str	r3, [r1, #8]
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800062c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000630:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800064a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800064e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000652:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800065a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 800066c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000674:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000678:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800067c:	d101      	bne.n	8000682 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800067e:	2301      	movs	r3, #1
 8000680:	e000      	b.n	8000684 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000682:	2300      	movs	r3, #0
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800069a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80006a2:	d101      	bne.n	80006a8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80006a4:	2301      	movs	r3, #1
 80006a6:	e000      	b.n	80006aa <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80006bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80006cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4013      	ands	r3, r2
 80006d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006d8:	68fb      	ldr	r3, [r7, #12]
}
 80006da:	bf00      	nop
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
	...

080006e8 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <LL_DBGMCU_GetRevisionID+0x18>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	0c1b      	lsrs	r3, r3, #16
 80006f2:	b29b      	uxth	r3, r3
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e0042000 	.word	0xe0042000

08000704 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	685a      	ldr	r2, [r3, #4]
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	041b      	lsls	r3, r3, #16
 8000716:	431a      	orrs	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	605a      	str	r2, [r3, #4]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	685a      	ldr	r2, [r3, #4]
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	431a      	orrs	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	605a      	str	r2, [r3, #4]
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr

0800074a <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800074a:	b480      	push	{r7}
 800074c:	b083      	sub	sp, #12
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
 8000752:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	695a      	ldr	r2, [r3, #20]
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	041b      	lsls	r3, r3, #16
 800075c:	431a      	orrs	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	615a      	str	r2, [r3, #20]
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800076e:	b480      	push	{r7}
 8000770:	b083      	sub	sp, #12
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	695a      	ldr	r2, [r3, #20]
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	431a      	orrs	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	615a      	str	r2, [r3, #20]
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	683a      	ldr	r2, [r7, #0]
 800079e:	609a      	str	r2, [r3, #8]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	683a      	ldr	r2, [r7, #0]
 80007ba:	619a      	str	r2, [r3, #24]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	22ff      	movs	r2, #255	; 0xff
 80007d4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80007e2:	b480      	push	{r7}
 80007e4:	b083      	sub	sp, #12
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	22ca      	movs	r2, #202	; 0xca
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2253      	movs	r2, #83	; 0x53
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000802:	b480      	push	{r7}
 8000804:	b083      	sub	sp, #12
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
 800080a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	f023 0207 	bic.w	r2, r3, #7
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	431a      	orrs	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	609a      	str	r2, [r3, #8]
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <MX_APPE_Config+0x18>)
 800082e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000832:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 8000834:	f000 f824 	bl	8000880 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000838:	f000 f864 	bl	8000904 <Config_HSE>

  return;
 800083c:	bf00      	nop
}
 800083e:	bd80      	pop	{r7, pc}
 8000840:	58004000 	.word	0x58004000

08000844 <MX_APPE_Init>:

void MX_APPE_Init( void )
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  System_Init( );       /**< System initialization */
 8000848:	f000 f870 	bl	800092c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 800084c:	f000 f888 	bl	8000960 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000850:	4903      	ldr	r1, [pc, #12]	; (8000860 <MX_APPE_Init+0x1c>)
 8000852:	2000      	movs	r0, #0
 8000854:	f000 fdc0 	bl	80013d8 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000858:	f000 f890 	bl	800097c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 800085c:	bf00      	nop
}
 800085e:	bd80      	pop	{r7, pc}
 8000860:	2000025c 	.word	0x2000025c

08000864 <Init_Smps>:

void Init_Smps( void )
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  return;
 8000868:	bf00      	nop
}
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <Init_Exti>:

void Init_Exti( void )
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63( LL_EXTI_LINE_36 & LL_EXTI_LINE_38 );
 8000876:	2000      	movs	r0, #0
 8000878:	f7ff fe8e 	bl	8000598 <LL_EXTI_EnableIT_32_63>

  return;
 800087c:	bf00      	nop
}
 800087e:	bd80      	pop	{r7, pc}

08000880 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8000884:	f000 f804 	bl	8000890 <Reset_BackupDomain>

  Reset_IPCC();
 8000888:	f000 f81a 	bl	80008c0 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW */

  return;
 800088c:	bf00      	nop
}
 800088e:	bd80      	pop	{r7, pc}

08000890 <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000894:	f7ff fee8 	bl	8000668 <LL_RCC_IsActiveFlag_PINRST>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d00d      	beq.n	80008ba <Reset_BackupDomain+0x2a>
 800089e:	f7ff fef6 	bl	800068e <LL_RCC_IsActiveFlag_SFTRST>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d108      	bne.n	80008ba <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80008a8:	f002 f82a 	bl	8002900 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80008ac:	f002 f828 	bl	8002900 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80008b0:	f7ff feb8 	bl	8000624 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80008b4:	f7ff fec7 	bl	8000646 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop
}
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80008c4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c8:	f7ff fef4 	bl	80006b4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80008cc:	213f      	movs	r1, #63	; 0x3f
 80008ce:	480c      	ldr	r0, [pc, #48]	; (8000900 <Reset_IPCC+0x40>)
 80008d0:	f7ff ff5e 	bl	8000790 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80008d4:	213f      	movs	r1, #63	; 0x3f
 80008d6:	480a      	ldr	r0, [pc, #40]	; (8000900 <Reset_IPCC+0x40>)
 80008d8:	f7ff ff68 	bl	80007ac <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80008dc:	213f      	movs	r1, #63	; 0x3f
 80008de:	4808      	ldr	r0, [pc, #32]	; (8000900 <Reset_IPCC+0x40>)
 80008e0:	f7ff ff10 	bl	8000704 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80008e4:	213f      	movs	r1, #63	; 0x3f
 80008e6:	4806      	ldr	r0, [pc, #24]	; (8000900 <Reset_IPCC+0x40>)
 80008e8:	f7ff ff2f 	bl	800074a <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80008ec:	213f      	movs	r1, #63	; 0x3f
 80008ee:	4804      	ldr	r0, [pc, #16]	; (8000900 <Reset_IPCC+0x40>)
 80008f0:	f7ff ff1a 	bl	8000728 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80008f4:	213f      	movs	r1, #63	; 0x3f
 80008f6:	4802      	ldr	r0, [pc, #8]	; (8000900 <Reset_IPCC+0x40>)
 80008f8:	f7ff ff39 	bl	800076e <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80008fc:	bf00      	nop
}
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	58000c00 	.word	0x58000c00

08000904 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800090a:	2000      	movs	r0, #0
 800090c:	f006 fd84 	bl	8007418 <OTP_Read>
 8000910:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d005      	beq.n	8000924 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	799b      	ldrb	r3, [r3, #6]
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fe4f 	bl	80005c0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000922:	bf00      	nop
 8000924:	bf00      	nop
}
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <System_Init>:

static void System_Init( void )
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  Init_Smps( );
 8000930:	f7ff ff98 	bl	8000864 <Init_Smps>

  Init_Exti( );
 8000934:	f7ff ff9d 	bl	8000872 <Init_Exti>

  Init_Rtc( );
 8000938:	f000 f802 	bl	8000940 <Init_Rtc>

  return;
 800093c:	bf00      	nop
}
 800093e:	bd80      	pop	{r7, pc}

08000940 <Init_Rtc>:

static void Init_Rtc( void )
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000944:	4805      	ldr	r0, [pc, #20]	; (800095c <Init_Rtc+0x1c>)
 8000946:	f7ff ff4c 	bl	80007e2 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800094a:	2100      	movs	r1, #0
 800094c:	4803      	ldr	r0, [pc, #12]	; (800095c <Init_Rtc+0x1c>)
 800094e:	f7ff ff58 	bl	8000802 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000952:	4802      	ldr	r0, [pc, #8]	; (800095c <Init_Rtc+0x1c>)
 8000954:	f7ff ff38 	bl	80007c8 <LL_RTC_EnableWriteProtection>

  return;
 8000958:	bf00      	nop
}
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40002800 	.word	0x40002800

08000960 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000964:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000968:	f7ff fe48 	bl	80005fc <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800096c:	f007 fd00 	bl	8008370 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000970:	2004      	movs	r0, #4
 8000972:	f7ff fdfb 	bl	800056c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000976:	bf00      	nop
}
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000982:	f006 fb07 	bl	8006f94 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000986:	4a11      	ldr	r2, [pc, #68]	; (80009cc <appe_Tl_Init+0x50>)
 8000988:	2100      	movs	r1, #0
 800098a:	2008      	movs	r0, #8
 800098c:	f007 fe1c 	bl	80085c8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <appe_Tl_Init+0x54>)
 8000992:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <appe_Tl_Init+0x58>)
 8000996:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000998:	463b      	mov	r3, r7
 800099a:	4619      	mov	r1, r3
 800099c:	480e      	ldr	r0, [pc, #56]	; (80009d8 <appe_Tl_Init+0x5c>)
 800099e:	f006 f9bf 	bl	8006d20 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <appe_Tl_Init+0x60>)
 80009a4:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <appe_Tl_Init+0x64>)
 80009a8:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <appe_Tl_Init+0x68>)
 80009ac:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80009ae:	f240 533c 	movw	r3, #1340	; 0x53c
 80009b2:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80009b4:	f107 0308 	add.w	r3, r7, #8
 80009b8:	4618      	mov	r0, r3
 80009ba:	f006 fc2d 	bl	8007218 <TL_MM_Init>

  TL_Enable();
 80009be:	f006 fae3 	bl	8006f88 <TL_Enable>

  return;
 80009c2:	bf00      	nop
}
 80009c4:	3720      	adds	r7, #32
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	08006d59 	.word	0x08006d59
 80009d0:	20030724 	.word	0x20030724
 80009d4:	080009e9 	.word	0x080009e9
 80009d8:	08000a01 	.word	0x08000a01
 80009dc:	2003093c 	.word	0x2003093c
 80009e0:	20030830 	.word	0x20030830
 80009e4:	200301e8 	.word	0x200301e8

080009e8 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80009f2:	bf00      	nop
}
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
	...

08000a00 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	330b      	adds	r3, #11
 8000a0e:	61fb      	str	r3, [r7, #28]

  /* Read the firmware version of both the wireless firmware and the FUS */
  SHCI_GetWirelessFwInfo( &WirelessInfo );
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	4618      	mov	r0, r3
 8000a16:	f005 ff3f 	bl	8006898 <SHCI_GetWirelessFwInfo>
  APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
  APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
  APP_DBG_MSG("FUS version %d.%d.%d\n\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

  switch(p_sys_event->subevtcode)
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000a24:	2b07      	cmp	r3, #7
 8000a26:	d81b      	bhi.n	8000a60 <APPE_SysUserEvtRx+0x60>
 8000a28:	a201      	add	r2, pc, #4	; (adr r2, 8000a30 <APPE_SysUserEvtRx+0x30>)
 8000a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2e:	bf00      	nop
 8000a30:	08000a51 	.word	0x08000a51
 8000a34:	08000a59 	.word	0x08000a59
 8000a38:	08000a61 	.word	0x08000a61
 8000a3c:	08000a61 	.word	0x08000a61
 8000a40:	08000a61 	.word	0x08000a61
 8000a44:	08000a61 	.word	0x08000a61
 8000a48:	08000a61 	.word	0x08000a61
 8000a4c:	08000a61 	.word	0x08000a61
  {
  case SHCI_SUB_EVT_CODE_READY:
    APPE_SysEvtReadyProcessing(pPayload);
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f000 f81c 	bl	8000a8e <APPE_SysEvtReadyProcessing>
    break;
 8000a56:	e004      	b.n	8000a62 <APPE_SysUserEvtRx+0x62>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APPE_SysEvtError(pPayload);
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f000 f807 	bl	8000a6c <APPE_SysEvtError>
    break;
 8000a5e:	e000      	b.n	8000a62 <APPE_SysUserEvtRx+0x62>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_ERASE\n");
    break;

  default:
    break;
 8000a60:	bf00      	nop
  }

  return;
 8000a62:	bf00      	nop
}
 8000a64:	3720      	adds	r7, #32
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop

08000a6c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( void * pPayload)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	330b      	adds	r3, #11
 8000a7a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	3302      	adds	r3, #2
 8000a80:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000a82:	bf00      	nop
}
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void * pPayload )
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b08a      	sub	sp, #40	; 0x28
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	330b      	adds	r3, #11
 8000aae:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000ab0:	6a3b      	ldr	r3, [r7, #32]
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	61fb      	str	r3, [r7, #28]

  if(p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d117      	bne.n	8000aee <APPE_SysEvtReadyProcessing+0x60>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2( );
 8000abe:	f7ff fd39 	bl	8000534 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000ac2:	230d      	movs	r3, #13
 8000ac4:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000ac6:	237f      	movs	r3, #127	; 0x7f
 8000ac8:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000aca:	f7ff fe0d 	bl	80006e8 <LL_DBGMCU_GetRevisionID>
 8000ace:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG("DBGMCU_GetRevisionID= %lx \n\n", RevisionID);

    config_param.RevisionID = RevisionID;
 8000ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	4618      	mov	r0, r3
 8000adc:	f005 fec6 	bl	800686c <SHCI_C2_Config>

    APP_BLE_Init( );
 8000ae0:	f006 fda4 	bl	800762c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f007 fc54 	bl	8008394 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n");
  }

  return;
 8000aec:	e007      	b.n	8000afe <APPE_SysEvtReadyProcessing+0x70>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d103      	bne.n	8000afe <APPE_SysEvtReadyProcessing+0x70>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
  return;
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
}
 8000b00:	3728      	adds	r7, #40	; 0x28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <MX_APPE_Process>:
    __WFI( );
  }
}

void MX_APPE_Process(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0e:	f007 fc71 	bl	80083f4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8000b1a:	bf00      	nop
}
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b32:	f007 fc5f 	bl	80083f4 <UTIL_SEQ_Run>

  return;
 8000b36:	bf00      	nop
}
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000b46:	2100      	movs	r1, #0
 8000b48:	2008      	movs	r0, #8
 8000b4a:	f007 fd5f 	bl	800860c <UTIL_SEQ_SetTask>
  return;
 8000b4e:	bf00      	nop
}
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000b5e:	2002      	movs	r0, #2
 8000b60:	f007 fdc0 	bl	80086e4 <UTIL_SEQ_SetEvt>
  return;
 8000b64:	bf00      	nop
}
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000b74:	2002      	movs	r0, #2
 8000b76:	f007 fdd5 	bl	8008724 <UTIL_SEQ_WaitEvt>
  return;
 8000b7a:	bf00      	nop
}
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <LL_EXTI_EnableIT_0_31>:
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <LL_EXTI_EnableIT_0_31+0x24>)
 8000b8e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000b92:	4905      	ldr	r1, [pc, #20]	; (8000ba8 <LL_EXTI_EnableIT_0_31+0x24>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	58000800 	.word	0x58000800

08000bac <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4904      	ldr	r1, [pc, #16]	; (8000bcc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	600b      	str	r3, [r1, #0]

}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	58000800 	.word	0x58000800

08000bd0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <ReadRtcSsrValue+0x3c>)
 8000bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <ReadRtcSsrValue+0x3c>)
 8000be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000be6:	e005      	b.n	8000bf4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000bec:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <ReadRtcSsrValue+0x3c>)
 8000bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d1f5      	bne.n	8000be8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000bfc:	683b      	ldr	r3, [r7, #0]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	40002800 	.word	0x40002800

08000c10 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	460a      	mov	r2, r1
 8000c1a:	71fb      	strb	r3, [r7, #7]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000c20:	79ba      	ldrb	r2, [r7, #6]
 8000c22:	491d      	ldr	r1, [pc, #116]	; (8000c98 <LinkTimerAfter+0x88>)
 8000c24:	4613      	mov	r3, r2
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	4413      	add	r3, r2
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	440b      	add	r3, r1
 8000c2e:	3315      	adds	r3, #21
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
 8000c36:	2b06      	cmp	r3, #6
 8000c38:	d009      	beq.n	8000c4e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000c3a:	7bfa      	ldrb	r2, [r7, #15]
 8000c3c:	4916      	ldr	r1, [pc, #88]	; (8000c98 <LinkTimerAfter+0x88>)
 8000c3e:	4613      	mov	r3, r2
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	4413      	add	r3, r2
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	440b      	add	r3, r1
 8000c48:	3314      	adds	r3, #20
 8000c4a:	79fa      	ldrb	r2, [r7, #7]
 8000c4c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000c4e:	79fa      	ldrb	r2, [r7, #7]
 8000c50:	4911      	ldr	r1, [pc, #68]	; (8000c98 <LinkTimerAfter+0x88>)
 8000c52:	4613      	mov	r3, r2
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	4413      	add	r3, r2
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	440b      	add	r3, r1
 8000c5c:	3315      	adds	r3, #21
 8000c5e:	7bfa      	ldrb	r2, [r7, #15]
 8000c60:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000c62:	79fa      	ldrb	r2, [r7, #7]
 8000c64:	490c      	ldr	r1, [pc, #48]	; (8000c98 <LinkTimerAfter+0x88>)
 8000c66:	4613      	mov	r3, r2
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	4413      	add	r3, r2
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	440b      	add	r3, r1
 8000c70:	3314      	adds	r3, #20
 8000c72:	79ba      	ldrb	r2, [r7, #6]
 8000c74:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000c76:	79ba      	ldrb	r2, [r7, #6]
 8000c78:	4907      	ldr	r1, [pc, #28]	; (8000c98 <LinkTimerAfter+0x88>)
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	4413      	add	r3, r2
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	440b      	add	r3, r1
 8000c84:	3315      	adds	r3, #21
 8000c86:	79fa      	ldrb	r2, [r7, #7]
 8000c88:	701a      	strb	r2, [r3, #0]

  return;
 8000c8a:	bf00      	nop
}
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000084 	.word	0x20000084

08000c9c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	460a      	mov	r2, r1
 8000ca6:	71fb      	strb	r3, [r7, #7]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000cac:	4b29      	ldr	r3, [pc, #164]	; (8000d54 <LinkTimerBefore+0xb8>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	79ba      	ldrb	r2, [r7, #6]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d032      	beq.n	8000d1e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000cb8:	79ba      	ldrb	r2, [r7, #6]
 8000cba:	4927      	ldr	r1, [pc, #156]	; (8000d58 <LinkTimerBefore+0xbc>)
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	4413      	add	r3, r2
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	440b      	add	r3, r1
 8000cc6:	3314      	adds	r3, #20
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000ccc:	7bfa      	ldrb	r2, [r7, #15]
 8000cce:	4922      	ldr	r1, [pc, #136]	; (8000d58 <LinkTimerBefore+0xbc>)
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	440b      	add	r3, r1
 8000cda:	3315      	adds	r3, #21
 8000cdc:	79fa      	ldrb	r2, [r7, #7]
 8000cde:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000ce0:	79fa      	ldrb	r2, [r7, #7]
 8000ce2:	491d      	ldr	r1, [pc, #116]	; (8000d58 <LinkTimerBefore+0xbc>)
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	4413      	add	r3, r2
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	440b      	add	r3, r1
 8000cee:	3315      	adds	r3, #21
 8000cf0:	79ba      	ldrb	r2, [r7, #6]
 8000cf2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000cf4:	79fa      	ldrb	r2, [r7, #7]
 8000cf6:	4918      	ldr	r1, [pc, #96]	; (8000d58 <LinkTimerBefore+0xbc>)
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	4413      	add	r3, r2
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	440b      	add	r3, r1
 8000d02:	3314      	adds	r3, #20
 8000d04:	7bfa      	ldrb	r2, [r7, #15]
 8000d06:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000d08:	79ba      	ldrb	r2, [r7, #6]
 8000d0a:	4913      	ldr	r1, [pc, #76]	; (8000d58 <LinkTimerBefore+0xbc>)
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	4413      	add	r3, r2
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	440b      	add	r3, r1
 8000d16:	3314      	adds	r3, #20
 8000d18:	79fa      	ldrb	r2, [r7, #7]
 8000d1a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000d1c:	e014      	b.n	8000d48 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000d1e:	79fa      	ldrb	r2, [r7, #7]
 8000d20:	490d      	ldr	r1, [pc, #52]	; (8000d58 <LinkTimerBefore+0xbc>)
 8000d22:	4613      	mov	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	440b      	add	r3, r1
 8000d2c:	3315      	adds	r3, #21
 8000d2e:	79ba      	ldrb	r2, [r7, #6]
 8000d30:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000d32:	79ba      	ldrb	r2, [r7, #6]
 8000d34:	4908      	ldr	r1, [pc, #32]	; (8000d58 <LinkTimerBefore+0xbc>)
 8000d36:	4613      	mov	r3, r2
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	4413      	add	r3, r2
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	440b      	add	r3, r1
 8000d40:	3314      	adds	r3, #20
 8000d42:	79fa      	ldrb	r2, [r7, #7]
 8000d44:	701a      	strb	r2, [r3, #0]
  return;
 8000d46:	bf00      	nop
}
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000114 	.word	0x20000114
 8000d58:	20000084 	.word	0x20000084

08000d5c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d66:	4b4e      	ldr	r3, [pc, #312]	; (8000ea0 <linkTimer+0x144>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2b06      	cmp	r3, #6
 8000d6e:	d118      	bne.n	8000da2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000d70:	4b4b      	ldr	r3, [pc, #300]	; (8000ea0 <linkTimer+0x144>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4b4b      	ldr	r3, [pc, #300]	; (8000ea4 <linkTimer+0x148>)
 8000d78:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000d7a:	4a49      	ldr	r2, [pc, #292]	; (8000ea0 <linkTimer+0x144>)
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000d80:	79fa      	ldrb	r2, [r7, #7]
 8000d82:	4949      	ldr	r1, [pc, #292]	; (8000ea8 <linkTimer+0x14c>)
 8000d84:	4613      	mov	r3, r2
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	4413      	add	r3, r2
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	440b      	add	r3, r1
 8000d8e:	3315      	adds	r3, #21
 8000d90:	2206      	movs	r2, #6
 8000d92:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000d94:	4b45      	ldr	r3, [pc, #276]	; (8000eac <linkTimer+0x150>)
 8000d96:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	81fb      	strh	r3, [r7, #14]
 8000da0:	e078      	b.n	8000e94 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000da2:	f000 f909 	bl	8000fb8 <ReturnTimeElapsed>
 8000da6:	4603      	mov	r3, r0
 8000da8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000daa:	79fa      	ldrb	r2, [r7, #7]
 8000dac:	493e      	ldr	r1, [pc, #248]	; (8000ea8 <linkTimer+0x14c>)
 8000dae:	4613      	mov	r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	4413      	add	r3, r2
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	440b      	add	r3, r1
 8000db8:	3308      	adds	r3, #8
 8000dba:	6819      	ldr	r1, [r3, #0]
 8000dbc:	89fb      	ldrh	r3, [r7, #14]
 8000dbe:	79fa      	ldrb	r2, [r7, #7]
 8000dc0:	4419      	add	r1, r3
 8000dc2:	4839      	ldr	r0, [pc, #228]	; (8000ea8 <linkTimer+0x14c>)
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	4413      	add	r3, r2
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	4403      	add	r3, r0
 8000dce:	3308      	adds	r3, #8
 8000dd0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000dd2:	79fa      	ldrb	r2, [r7, #7]
 8000dd4:	4934      	ldr	r1, [pc, #208]	; (8000ea8 <linkTimer+0x14c>)
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	4413      	add	r3, r2
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	440b      	add	r3, r1
 8000de0:	3308      	adds	r3, #8
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000de6:	4b2e      	ldr	r3, [pc, #184]	; (8000ea0 <linkTimer+0x144>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	4619      	mov	r1, r3
 8000dee:	4a2e      	ldr	r2, [pc, #184]	; (8000ea8 <linkTimer+0x14c>)
 8000df0:	460b      	mov	r3, r1
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	440b      	add	r3, r1
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	4413      	add	r3, r2
 8000dfa:	3308      	adds	r3, #8
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d337      	bcc.n	8000e74 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000e04:	4b26      	ldr	r3, [pc, #152]	; (8000ea0 <linkTimer+0x144>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000e0a:	7b7a      	ldrb	r2, [r7, #13]
 8000e0c:	4926      	ldr	r1, [pc, #152]	; (8000ea8 <linkTimer+0x14c>)
 8000e0e:	4613      	mov	r3, r2
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	4413      	add	r3, r2
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	440b      	add	r3, r1
 8000e18:	3315      	adds	r3, #21
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000e1e:	e013      	b.n	8000e48 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000e20:	7b7a      	ldrb	r2, [r7, #13]
 8000e22:	4921      	ldr	r1, [pc, #132]	; (8000ea8 <linkTimer+0x14c>)
 8000e24:	4613      	mov	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4413      	add	r3, r2
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	440b      	add	r3, r1
 8000e2e:	3315      	adds	r3, #21
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000e34:	7b7a      	ldrb	r2, [r7, #13]
 8000e36:	491c      	ldr	r1, [pc, #112]	; (8000ea8 <linkTimer+0x14c>)
 8000e38:	4613      	mov	r3, r2
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	4413      	add	r3, r2
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	440b      	add	r3, r1
 8000e42:	3315      	adds	r3, #21
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000e48:	7b3b      	ldrb	r3, [r7, #12]
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d00b      	beq.n	8000e66 <linkTimer+0x10a>
 8000e4e:	7b3a      	ldrb	r2, [r7, #12]
 8000e50:	4915      	ldr	r1, [pc, #84]	; (8000ea8 <linkTimer+0x14c>)
 8000e52:	4613      	mov	r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	4413      	add	r3, r2
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	440b      	add	r3, r1
 8000e5c:	3308      	adds	r3, #8
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	68ba      	ldr	r2, [r7, #8]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d2dc      	bcs.n	8000e20 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000e66:	7b7a      	ldrb	r2, [r7, #13]
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fecf 	bl	8000c10 <LinkTimerAfter>
 8000e72:	e00f      	b.n	8000e94 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <linkTimer+0x144>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ff0c 	bl	8000c9c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <linkTimer+0x144>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <linkTimer+0x148>)
 8000e8c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <linkTimer+0x144>)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000e94:	89fb      	ldrh	r3, [r7, #14]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000114 	.word	0x20000114
 8000ea4:	20000115 	.word	0x20000115
 8000ea8:	20000084 	.word	0x20000084
 8000eac:	20000118 	.word	0x20000118

08000eb0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	460a      	mov	r2, r1
 8000eba:	71fb      	strb	r3, [r7, #7]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000ec0:	4b39      	ldr	r3, [pc, #228]	; (8000fa8 <UnlinkTimer+0xf8>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	79fa      	ldrb	r2, [r7, #7]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d111      	bne.n	8000ef0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000ecc:	4b36      	ldr	r3, [pc, #216]	; (8000fa8 <UnlinkTimer+0xf8>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4b36      	ldr	r3, [pc, #216]	; (8000fac <UnlinkTimer+0xfc>)
 8000ed4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000ed6:	79fa      	ldrb	r2, [r7, #7]
 8000ed8:	4935      	ldr	r1, [pc, #212]	; (8000fb0 <UnlinkTimer+0x100>)
 8000eda:	4613      	mov	r3, r2
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	4413      	add	r3, r2
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	440b      	add	r3, r1
 8000ee4:	3315      	adds	r3, #21
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4b2f      	ldr	r3, [pc, #188]	; (8000fa8 <UnlinkTimer+0xf8>)
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	e03e      	b.n	8000f6e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000ef0:	79fa      	ldrb	r2, [r7, #7]
 8000ef2:	492f      	ldr	r1, [pc, #188]	; (8000fb0 <UnlinkTimer+0x100>)
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	4413      	add	r3, r2
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	440b      	add	r3, r1
 8000efe:	3314      	adds	r3, #20
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000f04:	79fa      	ldrb	r2, [r7, #7]
 8000f06:	492a      	ldr	r1, [pc, #168]	; (8000fb0 <UnlinkTimer+0x100>)
 8000f08:	4613      	mov	r3, r2
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	4413      	add	r3, r2
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	440b      	add	r3, r1
 8000f12:	3315      	adds	r3, #21
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000f18:	79f9      	ldrb	r1, [r7, #7]
 8000f1a:	7bfa      	ldrb	r2, [r7, #15]
 8000f1c:	4824      	ldr	r0, [pc, #144]	; (8000fb0 <UnlinkTimer+0x100>)
 8000f1e:	460b      	mov	r3, r1
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	440b      	add	r3, r1
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	4403      	add	r3, r0
 8000f28:	3315      	adds	r3, #21
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b2d8      	uxtb	r0, r3
 8000f2e:	4920      	ldr	r1, [pc, #128]	; (8000fb0 <UnlinkTimer+0x100>)
 8000f30:	4613      	mov	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	4413      	add	r3, r2
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	440b      	add	r3, r1
 8000f3a:	3315      	adds	r3, #21
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f40:	7bbb      	ldrb	r3, [r7, #14]
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d013      	beq.n	8000f6e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000f46:	79f9      	ldrb	r1, [r7, #7]
 8000f48:	7bba      	ldrb	r2, [r7, #14]
 8000f4a:	4819      	ldr	r0, [pc, #100]	; (8000fb0 <UnlinkTimer+0x100>)
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	440b      	add	r3, r1
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	4403      	add	r3, r0
 8000f56:	3314      	adds	r3, #20
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	b2d8      	uxtb	r0, r3
 8000f5c:	4914      	ldr	r1, [pc, #80]	; (8000fb0 <UnlinkTimer+0x100>)
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	440b      	add	r3, r1
 8000f68:	3314      	adds	r3, #20
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000f6e:	79fa      	ldrb	r2, [r7, #7]
 8000f70:	490f      	ldr	r1, [pc, #60]	; (8000fb0 <UnlinkTimer+0x100>)
 8000f72:	4613      	mov	r3, r2
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	4413      	add	r3, r2
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	440b      	add	r3, r1
 8000f7c:	330c      	adds	r3, #12
 8000f7e:	2201      	movs	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <UnlinkTimer+0xf8>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b06      	cmp	r3, #6
 8000f8a:	d107      	bne.n	8000f9c <UnlinkTimer+0xec>
 8000f8c:	79bb      	ldrb	r3, [r7, #6]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d104      	bne.n	8000f9c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <UnlinkTimer+0x104>)
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	601a      	str	r2, [r3, #0]
  }

  return;
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
}
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	20000114 	.word	0x20000114
 8000fac:	20000115 	.word	0x20000115
 8000fb0:	20000084 	.word	0x20000084
 8000fb4:	20000118 	.word	0x20000118

08000fb8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000fbe:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <ReturnTimeElapsed+0x70>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc6:	d026      	beq.n	8001016 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000fc8:	f7ff fe02 	bl	8000bd0 <ReadRtcSsrValue>
 8000fcc:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000fce:	4b16      	ldr	r3, [pc, #88]	; (8001028 <ReturnTimeElapsed+0x70>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d805      	bhi.n	8000fe4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <ReturnTimeElapsed+0x70>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	e00a      	b.n	8000ffa <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <ReturnTimeElapsed+0x74>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <ReturnTimeElapsed+0x70>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	683a      	ldr	r2, [r7, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <ReturnTimeElapsed+0x78>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	fb02 f303 	mul.w	r3, r2, r3
 8001006:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001008:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <ReturnTimeElapsed+0x7c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	40d3      	lsrs	r3, r2
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	e001      	b.n	800101a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	b29b      	uxth	r3, r3
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000118 	.word	0x20000118
 800102c:	2000021a 	.word	0x2000021a
 8001030:	20000219 	.word	0x20000219
 8001034:	20000218 	.word	0x20000218

08001038 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d108      	bne.n	800105a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001048:	f7ff fdc2 	bl	8000bd0 <ReadRtcSsrValue>
 800104c:	4603      	mov	r3, r0
 800104e:	4a24      	ldr	r2, [pc, #144]	; (80010e0 <RestartWakeupCounter+0xa8>)
 8001050:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001052:	2003      	movs	r0, #3
 8001054:	f001 f9d3 	bl	80023fe <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001058:	e03e      	b.n	80010d8 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d803      	bhi.n	8001068 <RestartWakeupCounter+0x30>
 8001060:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <RestartWakeupCounter+0xac>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d002      	beq.n	800106e <RestartWakeupCounter+0x36>
      Value -= 1;
 8001068:	88fb      	ldrh	r3, [r7, #6]
 800106a:	3b01      	subs	r3, #1
 800106c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800106e:	bf00      	nop
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <RestartWakeupCounter+0xb0>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	f003 0304 	and.w	r3, r3, #4
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0f7      	beq.n	8001070 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001080:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <RestartWakeupCounter+0xb0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <RestartWakeupCounter+0xb0>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001094:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <RestartWakeupCounter+0xb4>)
 8001098:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800109c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800109e:	2003      	movs	r0, #3
 80010a0:	f001 f9bb 	bl	800241a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <RestartWakeupCounter+0xb8>)
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	0c1b      	lsrs	r3, r3, #16
 80010aa:	041b      	lsls	r3, r3, #16
 80010ac:	88fa      	ldrh	r2, [r7, #6]
 80010ae:	4910      	ldr	r1, [pc, #64]	; (80010f0 <RestartWakeupCounter+0xb8>)
 80010b0:	4313      	orrs	r3, r2
 80010b2:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80010b4:	f7ff fd8c 	bl	8000bd0 <ReadRtcSsrValue>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4a09      	ldr	r2, [pc, #36]	; (80010e0 <RestartWakeupCounter+0xa8>)
 80010bc:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <RestartWakeupCounter+0xb0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <RestartWakeupCounter+0xb0>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80010d0:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80010d2:	f3af 8000 	nop.w
  return ;
 80010d6:	bf00      	nop
}
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000118 	.word	0x20000118
 80010e4:	20000218 	.word	0x20000218
 80010e8:	20000214 	.word	0x20000214
 80010ec:	58000800 	.word	0x58000800
 80010f0:	40002800 	.word	0x40002800

080010f4 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80010fa:	4b47      	ldr	r3, [pc, #284]	; (8001218 <RescheduleTimerList+0x124>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001106:	d108      	bne.n	800111a <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001108:	bf00      	nop
 800110a:	4b44      	ldr	r3, [pc, #272]	; (800121c <RescheduleTimerList+0x128>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f7      	bne.n	800110a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800111a:	4b40      	ldr	r3, [pc, #256]	; (800121c <RescheduleTimerList+0x128>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	4b3e      	ldr	r3, [pc, #248]	; (800121c <RescheduleTimerList+0x128>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800112c:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800112e:	4b3c      	ldr	r3, [pc, #240]	; (8001220 <RescheduleTimerList+0x12c>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001134:	7bfa      	ldrb	r2, [r7, #15]
 8001136:	493b      	ldr	r1, [pc, #236]	; (8001224 <RescheduleTimerList+0x130>)
 8001138:	4613      	mov	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	4413      	add	r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	440b      	add	r3, r1
 8001142:	3308      	adds	r3, #8
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001148:	f7ff ff36 	bl	8000fb8 <ReturnTimeElapsed>
 800114c:	4603      	mov	r3, r0
 800114e:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001150:	88fb      	ldrh	r3, [r7, #6]
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	429a      	cmp	r2, r3
 8001156:	d205      	bcs.n	8001164 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800115c:	4b32      	ldr	r3, [pc, #200]	; (8001228 <RescheduleTimerList+0x134>)
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
 8001162:	e04d      	b.n	8001200 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	4a31      	ldr	r2, [pc, #196]	; (800122c <RescheduleTimerList+0x138>)
 8001168:	8812      	ldrh	r2, [r2, #0]
 800116a:	b292      	uxth	r2, r2
 800116c:	4413      	add	r3, r2
 800116e:	461a      	mov	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	4293      	cmp	r3, r2
 8001174:	d906      	bls.n	8001184 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001176:	4b2d      	ldr	r3, [pc, #180]	; (800122c <RescheduleTimerList+0x138>)
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800117c:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <RescheduleTimerList+0x134>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
 8001182:	e03d      	b.n	8001200 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	b29a      	uxth	r2, r3
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800118e:	4b26      	ldr	r3, [pc, #152]	; (8001228 <RescheduleTimerList+0x134>)
 8001190:	2201      	movs	r2, #1
 8001192:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001194:	e034      	b.n	8001200 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001196:	7bfa      	ldrb	r2, [r7, #15]
 8001198:	4922      	ldr	r1, [pc, #136]	; (8001224 <RescheduleTimerList+0x130>)
 800119a:	4613      	mov	r3, r2
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	4413      	add	r3, r2
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	440b      	add	r3, r1
 80011a4:	3308      	adds	r3, #8
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d20a      	bcs.n	80011c4 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80011ae:	7bfa      	ldrb	r2, [r7, #15]
 80011b0:	491c      	ldr	r1, [pc, #112]	; (8001224 <RescheduleTimerList+0x130>)
 80011b2:	4613      	mov	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4413      	add	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	440b      	add	r3, r1
 80011bc:	3308      	adds	r3, #8
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	e013      	b.n	80011ec <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80011c4:	7bfa      	ldrb	r2, [r7, #15]
 80011c6:	4917      	ldr	r1, [pc, #92]	; (8001224 <RescheduleTimerList+0x130>)
 80011c8:	4613      	mov	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	4413      	add	r3, r2
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	440b      	add	r3, r1
 80011d2:	3308      	adds	r3, #8
 80011d4:	6819      	ldr	r1, [r3, #0]
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	7bfa      	ldrb	r2, [r7, #15]
 80011da:	1ac9      	subs	r1, r1, r3
 80011dc:	4811      	ldr	r0, [pc, #68]	; (8001224 <RescheduleTimerList+0x130>)
 80011de:	4613      	mov	r3, r2
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	4413      	add	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	4403      	add	r3, r0
 80011e8:	3308      	adds	r3, #8
 80011ea:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80011ec:	7bfa      	ldrb	r2, [r7, #15]
 80011ee:	490d      	ldr	r1, [pc, #52]	; (8001224 <RescheduleTimerList+0x130>)
 80011f0:	4613      	mov	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4413      	add	r3, r2
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	440b      	add	r3, r1
 80011fa:	3315      	adds	r3, #21
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	2b06      	cmp	r3, #6
 8001204:	d1c7      	bne.n	8001196 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001206:	89bb      	ldrh	r3, [r7, #12]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff15 	bl	8001038 <RestartWakeupCounter>

  return ;
 800120e:	bf00      	nop
}
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40002800 	.word	0x40002800
 800121c:	20000214 	.word	0x20000214
 8001220:	20000114 	.word	0x20000114
 8001224:	20000084 	.word	0x20000084
 8001228:	2000011c 	.word	0x2000011c
 800122c:	2000021c 	.word	0x2000021c

08001230 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001236:	f3ef 8310 	mrs	r3, PRIMASK
 800123a:	617b      	str	r3, [r7, #20]
  return(result);
 800123c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001240:	b672      	cpsid	i
}
 8001242:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001244:	4b5f      	ldr	r3, [pc, #380]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	22ca      	movs	r2, #202	; 0xca
 800124c:	625a      	str	r2, [r3, #36]	; 0x24
 800124e:	4b5d      	ldr	r3, [pc, #372]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2253      	movs	r2, #83	; 0x53
 8001256:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001258:	4b5a      	ldr	r3, [pc, #360]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	4b58      	ldr	r3, [pc, #352]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800126a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800126c:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <HW_TS_RTC_Wakeup_Handler+0x198>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001274:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001278:	4954      	ldr	r1, [pc, #336]	; (80013cc <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800127a:	4613      	mov	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4413      	add	r3, r2
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	440b      	add	r3, r1
 8001284:	330c      	adds	r3, #12
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d172      	bne.n	8001374 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800128e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001292:	494e      	ldr	r1, [pc, #312]	; (80013cc <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001294:	4613      	mov	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	440b      	add	r3, r1
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80012a2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80012a6:	4949      	ldr	r1, [pc, #292]	; (80013cc <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80012a8:	4613      	mov	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	4413      	add	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	440b      	add	r3, r1
 80012b2:	3310      	adds	r3, #16
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80012b8:	4b45      	ldr	r3, [pc, #276]	; (80013d0 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d050      	beq.n	8001364 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80012c2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80012c6:	4941      	ldr	r1, [pc, #260]	; (80013cc <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	440b      	add	r3, r1
 80012d2:	330d      	adds	r3, #13
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d126      	bne.n	800132a <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80012dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80012e0:	2101      	movs	r1, #1
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fde4 	bl	8000eb0 <UnlinkTimer>
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	f383 8810 	msr	PRIMASK, r3
}
 80012f2:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80012f4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80012f8:	4934      	ldr	r1, [pc, #208]	; (80013cc <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80012fa:	4613      	mov	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	4413      	add	r3, r2
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	440b      	add	r3, r1
 8001304:	3304      	adds	r3, #4
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800130c:	4611      	mov	r1, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f9d4 	bl	80016bc <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001314:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	22ca      	movs	r2, #202	; 0xca
 800131c:	625a      	str	r2, [r3, #36]	; 0x24
 800131e:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2253      	movs	r2, #83	; 0x53
 8001326:	625a      	str	r2, [r3, #36]	; 0x24
 8001328:	e014      	b.n	8001354 <HW_TS_RTC_Wakeup_Handler+0x124>
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f383 8810 	msr	PRIMASK, r3
}
 8001334:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001336:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f932 	bl	80015a4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001340:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	22ca      	movs	r2, #202	; 0xca
 8001348:	625a      	str	r2, [r3, #36]	; 0x24
 800134a:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2253      	movs	r2, #83	; 0x53
 8001352:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001354:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	4619      	mov	r1, r3
 800135c:	69b8      	ldr	r0, [r7, #24]
 800135e:	f000 fa35 	bl	80017cc <HW_TS_RTC_Int_AppNot>
 8001362:	e025      	b.n	80013b0 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8001364:	f7ff fec6 	bl	80010f4 <RescheduleTimerList>
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	f383 8810 	msr	PRIMASK, r3
}
 8001372:	e01d      	b.n	80013b0 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001374:	bf00      	nop
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f7      	beq.n	8001376 <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800139a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800139c:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 800139e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013a2:	60da      	str	r2, [r3, #12]
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f383 8810 	msr	PRIMASK, r3
}
 80013ae:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	22ff      	movs	r2, #255	; 0xff
 80013b8:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80013ba:	bf00      	nop
}
 80013bc:	3728      	adds	r7, #40	; 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000214 	.word	0x20000214
 80013c8:	20000114 	.word	0x20000114
 80013cc:	20000084 	.word	0x20000084
 80013d0:	2000011c 	.word	0x2000011c
 80013d4:	58000800 	.word	0x58000800

080013d8 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 80013e4:	4a64      	ldr	r2, [pc, #400]	; (8001578 <HW_TS_Init+0x1a0>)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80013ea:	4b63      	ldr	r3, [pc, #396]	; (8001578 <HW_TS_Init+0x1a0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	22ca      	movs	r2, #202	; 0xca
 80013f2:	625a      	str	r2, [r3, #36]	; 0x24
 80013f4:	4b60      	ldr	r3, [pc, #384]	; (8001578 <HW_TS_Init+0x1a0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2253      	movs	r2, #83	; 0x53
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80013fe:	4b5f      	ldr	r3, [pc, #380]	; (800157c <HW_TS_Init+0x1a4>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	4a5e      	ldr	r2, [pc, #376]	; (800157c <HW_TS_Init+0x1a4>)
 8001404:	f043 0320 	orr.w	r3, r3, #32
 8001408:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800140a:	4b5c      	ldr	r3, [pc, #368]	; (800157c <HW_TS_Init+0x1a4>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	b2db      	uxtb	r3, r3
 8001416:	f1c3 0304 	rsb	r3, r3, #4
 800141a:	b2da      	uxtb	r2, r3
 800141c:	4b58      	ldr	r3, [pc, #352]	; (8001580 <HW_TS_Init+0x1a8>)
 800141e:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001420:	4b56      	ldr	r3, [pc, #344]	; (800157c <HW_TS_Init+0x1a4>)
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001428:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800142c:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	fa92 f2a2 	rbit	r2, r2
 8001434:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	2a00      	cmp	r2, #0
 800143e:	d101      	bne.n	8001444 <HW_TS_Init+0x6c>
  {
    return 32U;
 8001440:	2220      	movs	r2, #32
 8001442:	e003      	b.n	800144c <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	fab2 f282 	clz	r2, r2
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	40d3      	lsrs	r3, r2
 800144e:	b2db      	uxtb	r3, r3
 8001450:	3301      	adds	r3, #1
 8001452:	b2da      	uxtb	r2, r3
 8001454:	4b4b      	ldr	r3, [pc, #300]	; (8001584 <HW_TS_Init+0x1ac>)
 8001456:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001458:	4b48      	ldr	r3, [pc, #288]	; (800157c <HW_TS_Init+0x1a4>)
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	b29b      	uxth	r3, r3
 800145e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001462:	b29b      	uxth	r3, r3
 8001464:	3301      	adds	r3, #1
 8001466:	b29a      	uxth	r2, r3
 8001468:	4b47      	ldr	r3, [pc, #284]	; (8001588 <HW_TS_Init+0x1b0>)
 800146a:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800146c:	4b46      	ldr	r3, [pc, #280]	; (8001588 <HW_TS_Init+0x1b0>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	3b01      	subs	r3, #1
 8001472:	4a44      	ldr	r2, [pc, #272]	; (8001584 <HW_TS_Init+0x1ac>)
 8001474:	7812      	ldrb	r2, [r2, #0]
 8001476:	fb02 f303 	mul.w	r3, r2, r3
 800147a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800147e:	4a40      	ldr	r2, [pc, #256]	; (8001580 <HW_TS_Init+0x1a8>)
 8001480:	7812      	ldrb	r2, [r2, #0]
 8001482:	40d3      	lsrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800148c:	4293      	cmp	r3, r2
 800148e:	d904      	bls.n	800149a <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001490:	4b3e      	ldr	r3, [pc, #248]	; (800158c <HW_TS_Init+0x1b4>)
 8001492:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001496:	801a      	strh	r2, [r3, #0]
 8001498:	e003      	b.n	80014a2 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	b29a      	uxth	r2, r3
 800149e:	4b3b      	ldr	r3, [pc, #236]	; (800158c <HW_TS_Init+0x1b4>)
 80014a0:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80014a2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80014a6:	f7ff fb81 	bl	8000bac <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80014aa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80014ae:	f7ff fb69 	bl	8000b84 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d143      	bne.n	8001540 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80014b8:	4b35      	ldr	r3, [pc, #212]	; (8001590 <HW_TS_Init+0x1b8>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80014be:	4b35      	ldr	r3, [pc, #212]	; (8001594 <HW_TS_Init+0x1bc>)
 80014c0:	f04f 32ff 	mov.w	r2, #4294967295
 80014c4:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	77fb      	strb	r3, [r7, #31]
 80014ca:	e00c      	b.n	80014e6 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80014cc:	7ffa      	ldrb	r2, [r7, #31]
 80014ce:	4932      	ldr	r1, [pc, #200]	; (8001598 <HW_TS_Init+0x1c0>)
 80014d0:	4613      	mov	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4413      	add	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	440b      	add	r3, r1
 80014da:	330c      	adds	r3, #12
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80014e0:	7ffb      	ldrb	r3, [r7, #31]
 80014e2:	3301      	adds	r3, #1
 80014e4:	77fb      	strb	r3, [r7, #31]
 80014e6:	7ffb      	ldrb	r3, [r7, #31]
 80014e8:	2b05      	cmp	r3, #5
 80014ea:	d9ef      	bls.n	80014cc <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80014ec:	4b2b      	ldr	r3, [pc, #172]	; (800159c <HW_TS_Init+0x1c4>)
 80014ee:	2206      	movs	r2, #6
 80014f0:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <HW_TS_Init+0x1a0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <HW_TS_Init+0x1a0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001504:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001506:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <HW_TS_Init+0x1a0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	b2da      	uxtb	r2, r3
 8001510:	4b19      	ldr	r3, [pc, #100]	; (8001578 <HW_TS_Init+0x1a0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800151a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800151c:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <HW_TS_Init+0x1c8>)
 800151e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001522:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001524:	2003      	movs	r0, #3
 8001526:	f000 ff78 	bl	800241a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800152a:	4b13      	ldr	r3, [pc, #76]	; (8001578 <HW_TS_Init+0x1a0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <HW_TS_Init+0x1a0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	e00a      	b.n	8001556 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001540:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <HW_TS_Init+0x1a0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154c:	2b00      	cmp	r3, #0
 800154e:	d002      	beq.n	8001556 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001550:	2003      	movs	r0, #3
 8001552:	f000 ff54 	bl	80023fe <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <HW_TS_Init+0x1a0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	22ff      	movs	r2, #255	; 0xff
 800155e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001560:	2200      	movs	r2, #0
 8001562:	2103      	movs	r1, #3
 8001564:	2003      	movs	r0, #3
 8001566:	f000 ff08 	bl	800237a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800156a:	2003      	movs	r0, #3
 800156c:	f000 ff1f 	bl	80023ae <HAL_NVIC_EnableIRQ>

  return;
 8001570:	bf00      	nop
}
 8001572:	3720      	adds	r7, #32
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000214 	.word	0x20000214
 800157c:	40002800 	.word	0x40002800
 8001580:	20000218 	.word	0x20000218
 8001584:	20000219 	.word	0x20000219
 8001588:	2000021a 	.word	0x2000021a
 800158c:	2000021c 	.word	0x2000021c
 8001590:	2000011c 	.word	0x2000011c
 8001594:	20000118 	.word	0x20000118
 8001598:	20000084 	.word	0x20000084
 800159c:	20000114 	.word	0x20000114
 80015a0:	58000800 	.word	0x58000800

080015a4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015ae:	f3ef 8310 	mrs	r3, PRIMASK
 80015b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80015b4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80015b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80015b8:	b672      	cpsid	i
}
 80015ba:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80015bc:	2003      	movs	r0, #3
 80015be:	f000 ff04 	bl	80023ca <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80015c2:	4b38      	ldr	r3, [pc, #224]	; (80016a4 <HW_TS_Stop+0x100>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	22ca      	movs	r2, #202	; 0xca
 80015ca:	625a      	str	r2, [r3, #36]	; 0x24
 80015cc:	4b35      	ldr	r3, [pc, #212]	; (80016a4 <HW_TS_Stop+0x100>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2253      	movs	r2, #83	; 0x53
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80015d6:	79fa      	ldrb	r2, [r7, #7]
 80015d8:	4933      	ldr	r1, [pc, #204]	; (80016a8 <HW_TS_Stop+0x104>)
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	440b      	add	r3, r1
 80015e4:	330c      	adds	r3, #12
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d148      	bne.n	8001680 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fc5c 	bl	8000eb0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80015f8:	4b2c      	ldr	r3, [pc, #176]	; (80016ac <HW_TS_Stop+0x108>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80015fe:	7cfb      	ldrb	r3, [r7, #19]
 8001600:	2b06      	cmp	r3, #6
 8001602:	d135      	bne.n	8001670 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001604:	4b2a      	ldr	r3, [pc, #168]	; (80016b0 <HW_TS_Stop+0x10c>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800160c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001610:	d108      	bne.n	8001624 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001612:	bf00      	nop
 8001614:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <HW_TS_Stop+0x100>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1f7      	bne.n	8001614 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001624:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <HW_TS_Stop+0x100>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <HW_TS_Stop+0x100>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001636:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001638:	bf00      	nop
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <HW_TS_Stop+0x100>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f7      	beq.n	800163a <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800164a:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <HW_TS_Stop+0x100>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <HW_TS_Stop+0x100>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800165e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001660:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <HW_TS_Stop+0x110>)
 8001662:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001666:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001668:	2003      	movs	r0, #3
 800166a:	f000 fed6 	bl	800241a <HAL_NVIC_ClearPendingIRQ>
 800166e:	e007      	b.n	8001680 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <HW_TS_Stop+0x114>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	7cfa      	ldrb	r2, [r7, #19]
 8001678:	429a      	cmp	r2, r3
 800167a:	d001      	beq.n	8001680 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 800167c:	f7ff fd3a 	bl	80010f4 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HW_TS_Stop+0x100>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	22ff      	movs	r2, #255	; 0xff
 8001688:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800168a:	2003      	movs	r0, #3
 800168c:	f000 fe8f 	bl	80023ae <HAL_NVIC_EnableIRQ>
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	f383 8810 	msr	PRIMASK, r3
}
 800169a:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800169c:	bf00      	nop
}
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000214 	.word	0x20000214
 80016a8:	20000084 	.word	0x20000084
 80016ac:	20000114 	.word	0x20000114
 80016b0:	40002800 	.word	0x40002800
 80016b4:	58000800 	.word	0x58000800
 80016b8:	20000115 	.word	0x20000115

080016bc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	6039      	str	r1, [r7, #0]
 80016c6:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80016c8:	79fa      	ldrb	r2, [r7, #7]
 80016ca:	493c      	ldr	r1, [pc, #240]	; (80017bc <HW_TS_Start+0x100>)
 80016cc:	4613      	mov	r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4413      	add	r3, r2
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	440b      	add	r3, r1
 80016d6:	330c      	adds	r3, #12
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d103      	bne.n	80016e8 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff ff5e 	bl	80015a4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016e8:	f3ef 8310 	mrs	r3, PRIMASK
 80016ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80016ee:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80016f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80016f2:	b672      	cpsid	i
}
 80016f4:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80016f6:	2003      	movs	r0, #3
 80016f8:	f000 fe67 	bl	80023ca <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80016fc:	4b30      	ldr	r3, [pc, #192]	; (80017c0 <HW_TS_Start+0x104>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	22ca      	movs	r2, #202	; 0xca
 8001704:	625a      	str	r2, [r3, #36]	; 0x24
 8001706:	4b2e      	ldr	r3, [pc, #184]	; (80017c0 <HW_TS_Start+0x104>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2253      	movs	r2, #83	; 0x53
 800170e:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001710:	79fa      	ldrb	r2, [r7, #7]
 8001712:	492a      	ldr	r1, [pc, #168]	; (80017bc <HW_TS_Start+0x100>)
 8001714:	4613      	mov	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4413      	add	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	440b      	add	r3, r1
 800171e:	330c      	adds	r3, #12
 8001720:	2202      	movs	r2, #2
 8001722:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001724:	79fa      	ldrb	r2, [r7, #7]
 8001726:	4925      	ldr	r1, [pc, #148]	; (80017bc <HW_TS_Start+0x100>)
 8001728:	4613      	mov	r3, r2
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4413      	add	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	440b      	add	r3, r1
 8001732:	3308      	adds	r3, #8
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001738:	79fa      	ldrb	r2, [r7, #7]
 800173a:	4920      	ldr	r1, [pc, #128]	; (80017bc <HW_TS_Start+0x100>)
 800173c:	4613      	mov	r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4413      	add	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	440b      	add	r3, r1
 8001746:	3304      	adds	r3, #4
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fb04 	bl	8000d5c <linkTimer>
 8001754:	4603      	mov	r3, r0
 8001756:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001758:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <HW_TS_Start+0x108>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <HW_TS_Start+0x10c>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	7c7a      	ldrb	r2, [r7, #17]
 8001766:	429a      	cmp	r2, r3
 8001768:	d002      	beq.n	8001770 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 800176a:	f7ff fcc3 	bl	80010f4 <RescheduleTimerList>
 800176e:	e013      	b.n	8001798 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001770:	79fa      	ldrb	r2, [r7, #7]
 8001772:	4912      	ldr	r1, [pc, #72]	; (80017bc <HW_TS_Start+0x100>)
 8001774:	4613      	mov	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4413      	add	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	440b      	add	r3, r1
 800177e:	3308      	adds	r3, #8
 8001780:	6819      	ldr	r1, [r3, #0]
 8001782:	8a7b      	ldrh	r3, [r7, #18]
 8001784:	79fa      	ldrb	r2, [r7, #7]
 8001786:	1ac9      	subs	r1, r1, r3
 8001788:	480c      	ldr	r0, [pc, #48]	; (80017bc <HW_TS_Start+0x100>)
 800178a:	4613      	mov	r3, r2
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4413      	add	r3, r2
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	4403      	add	r3, r0
 8001794:	3308      	adds	r3, #8
 8001796:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001798:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <HW_TS_Start+0x104>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	22ff      	movs	r2, #255	; 0xff
 80017a0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80017a2:	2003      	movs	r0, #3
 80017a4:	f000 fe03 	bl	80023ae <HAL_NVIC_EnableIRQ>
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	f383 8810 	msr	PRIMASK, r3
}
 80017b2:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80017b4:	bf00      	nop
}
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000084 	.word	0x20000084
 80017c0:	20000214 	.word	0x20000214
 80017c4:	20000114 	.word	0x20000114
 80017c8:	20000115 	.word	0x20000115

080017cc <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	460b      	mov	r3, r1
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4798      	blx	r3

  return;
 80017de:	bf00      	nop
}
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <LL_RCC_LSE_SetDriveCapability>:
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80017ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f6:	f023 0218 	bic.w	r2, r3, #24
 80017fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4313      	orrs	r3, r2
 8001802:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <LL_AHB2_GRP1_EnableClock>:
{
 8001812:	b480      	push	{r7}
 8001814:	b085      	sub	sp, #20
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800181a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001820:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4313      	orrs	r3, r2
 8001828:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800182a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800182e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4013      	ands	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001836:	68fb      	ldr	r3, [r7, #12]
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//UART Message Buffer:
	char MSG[35] = {'\0'};
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	f107 0308 	add.w	r3, r7, #8
 8001852:	221f      	movs	r2, #31
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f007 f832 	bl	80088c0 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800185c:	f000 fbcc 	bl	8001ff8 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001860:	f7fe ffe2 	bl	8000828 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001864:	f000 f826 	bl	80018b4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001868:	f000 f886 	bl	8001978 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 800186c:	f000 f8a4 	bl	80019b8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001870:	f000 f93e 	bl	8001af0 <MX_GPIO_Init>
  MX_RF_Init();
 8001874:	f000 f8b4 	bl	80019e0 <MX_RF_Init>
  MX_RTC_Init();
 8001878:	f000 f8ba 	bl	80019f0 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800187c:	f000 f8ec 	bl	8001a58 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001880:	f7fe ffe0 	bl	8000844 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  sprintf(MSG, "Initializing... \r\n");
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	4909      	ldr	r1, [pc, #36]	; (80018ac <main+0x68>)
 8001888:	4618      	mov	r0, r3
 800188a:	f007 f821 	bl	80088d0 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fc75 	bl	8000180 <strlen>
 8001896:	4603      	mov	r3, r0
 8001898:	b29a      	uxth	r2, r3
 800189a:	1d39      	adds	r1, r7, #4
 800189c:	f04f 33ff 	mov.w	r3, #4294967295
 80018a0:	4803      	ldr	r0, [pc, #12]	; (80018b0 <main+0x6c>)
 80018a2:	f003 f82d 	bl	8004900 <HAL_UART_Transmit>
  while (1)
  {


	  /* USER CODE END WHILE */
    MX_APPE_Process();
 80018a6:	f7ff f92e 	bl	8000b06 <MX_APPE_Process>
 80018aa:	e7fc      	b.n	80018a6 <main+0x62>
 80018ac:	080091c4 	.word	0x080091c4
 80018b0:	20000280 	.word	0x20000280

080018b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b09a      	sub	sp, #104	; 0x68
 80018b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ba:	f107 0320 	add.w	r3, r7, #32
 80018be:	2248      	movs	r2, #72	; 0x48
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f006 fffc 	bl	80088c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	611a      	str	r2, [r3, #16]
 80018d6:	615a      	str	r2, [r3, #20]
 80018d8:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80018da:	f001 f811 	bl	8002900 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80018de:	2000      	movs	r0, #0
 80018e0:	f7ff ff81 	bl	80017e6 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e4:	4b23      	ldr	r3, [pc, #140]	; (8001974 <SystemClock_Config+0xc0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018ec:	4a21      	ldr	r2, [pc, #132]	; (8001974 <SystemClock_Config+0xc0>)
 80018ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <SystemClock_Config+0xc0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018fc:	603b      	str	r3, [r7, #0]
 80018fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001900:	2327      	movs	r3, #39	; 0x27
 8001902:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001904:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800190a:	2301      	movs	r3, #1
 800190c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800190e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001912:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001914:	2301      	movs	r3, #1
 8001916:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001918:	2340      	movs	r3, #64	; 0x40
 800191a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800191c:	2300      	movs	r3, #0
 800191e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001920:	23a0      	movs	r3, #160	; 0xa0
 8001922:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001924:	2300      	movs	r3, #0
 8001926:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001928:	f107 0320 	add.w	r3, r7, #32
 800192c:	4618      	mov	r0, r3
 800192e:	f001 fb7b 	bl	8003028 <HAL_RCC_OscConfig>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001938:	f000 f934 	bl	8001ba4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800193c:	236f      	movs	r3, #111	; 0x6f
 800193e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001940:	2300      	movs	r3, #0
 8001942:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001948:	2300      	movs	r3, #0
 800194a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001950:	2300      	movs	r3, #0
 8001952:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001954:	2300      	movs	r3, #0
 8001956:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	2101      	movs	r1, #1
 800195c:	4618      	mov	r0, r3
 800195e:	f001 fef1 	bl	8003744 <HAL_RCC_ClockConfig>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001968:	f000 f91c 	bl	8001ba4 <Error_Handler>
  }
}
 800196c:	bf00      	nop
 800196e:	3768      	adds	r7, #104	; 0x68
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	58000400 	.word	0x58000400

08001978 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b094      	sub	sp, #80	; 0x50
 800197c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800197e:	463b      	mov	r3, r7
 8001980:	2250      	movs	r2, #80	; 0x50
 8001982:	2100      	movs	r1, #0
 8001984:	4618      	mov	r0, r3
 8001986:	f006 ff9b 	bl	80088c0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800198a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800198e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001990:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001994:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001996:	2300      	movs	r3, #0
 8001998:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800199a:	2300      	movs	r3, #0
 800199c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800199e:	463b      	mov	r3, r7
 80019a0:	4618      	mov	r0, r3
 80019a2:	f002 fb0c 	bl	8003fbe <HAL_RCCEx_PeriphCLKConfig>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80019ac:	f000 f8fa 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80019b0:	bf00      	nop
 80019b2:	3750      	adds	r7, #80	; 0x50
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <MX_IPCC_Init+0x20>)
 80019be:	4a07      	ldr	r2, [pc, #28]	; (80019dc <MX_IPCC_Init+0x24>)
 80019c0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80019c2:	4805      	ldr	r0, [pc, #20]	; (80019d8 <MX_IPCC_Init+0x20>)
 80019c4:	f000 ff16 	bl	80027f4 <HAL_IPCC_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80019ce:	f000 f8e9 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000220 	.word	0x20000220
 80019dc:	58000c00 	.word	0x58000c00

080019e0 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019f4:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <MX_RTC_Init+0x60>)
 80019f6:	4a17      	ldr	r2, [pc, #92]	; (8001a54 <MX_RTC_Init+0x64>)
 80019f8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <MX_RTC_Init+0x60>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <MX_RTC_Init+0x60>)
 8001a02:	220f      	movs	r2, #15
 8001a04:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001a06:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <MX_RTC_Init+0x60>)
 8001a08:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001a0c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <MX_RTC_Init+0x60>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a14:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <MX_RTC_Init+0x60>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <MX_RTC_Init+0x60>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <MX_RTC_Init+0x60>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a26:	480a      	ldr	r0, [pc, #40]	; (8001a50 <MX_RTC_Init+0x60>)
 8001a28:	f002 fd50 	bl	80044cc <HAL_RTC_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001a32:	f000 f8b7 	bl	8001ba4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001a36:	2200      	movs	r2, #0
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4805      	ldr	r0, [pc, #20]	; (8001a50 <MX_RTC_Init+0x60>)
 8001a3c:	f002 fe34 	bl	80046a8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001a46:	f000 f8ad 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	2000025c 	.word	0x2000025c
 8001a54:	40002800 	.word	0x40002800

08001a58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a5c:	4b22      	ldr	r3, [pc, #136]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001a5e:	4a23      	ldr	r2, [pc, #140]	; (8001aec <MX_USART1_UART_Init+0x94>)
 8001a60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a62:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a70:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a76:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001a7e:	220c      	movs	r2, #12
 8001a80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a82:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a88:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a8e:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a94:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a9a:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aa0:	4811      	ldr	r0, [pc, #68]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001aa2:	f002 fedd 	bl	8004860 <HAL_UART_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001aac:	f000 f87a 	bl	8001ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	480d      	ldr	r0, [pc, #52]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001ab4:	f003 fbd0 	bl	8005258 <HAL_UARTEx_SetTxFifoThreshold>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001abe:	f000 f871 	bl	8001ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4808      	ldr	r0, [pc, #32]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001ac6:	f003 fc05 	bl	80052d4 <HAL_UARTEx_SetRxFifoThreshold>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001ad0:	f000 f868 	bl	8001ba4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ad4:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001ad6:	f003 fb86 	bl	80051e6 <HAL_UARTEx_DisableFifoMode>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ae0:	f000 f860 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000280 	.word	0x20000280
 8001aec:	40013800 	.word	0x40013800

08001af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b04:	2004      	movs	r0, #4
 8001b06:	f7ff fe84 	bl	8001812 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0a:	2002      	movs	r0, #2
 8001b0c:	f7ff fe81 	bl	8001812 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b10:	2001      	movs	r0, #1
 8001b12:	f7ff fe7e 	bl	8001812 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b16:	2008      	movs	r0, #8
 8001b18:	f7ff fe7b 	bl	8001812 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2123      	movs	r1, #35	; 0x23
 8001b20:	481d      	ldr	r0, [pc, #116]	; (8001b98 <MX_GPIO_Init+0xa8>)
 8001b22:	f000 fe11 	bl	8002748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b26:	2310      	movs	r3, #16
 8001b28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	4619      	mov	r1, r3
 8001b36:	4819      	ldr	r0, [pc, #100]	; (8001b9c <MX_GPIO_Init+0xac>)
 8001b38:	f000 fc7e 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001b3c:	2323      	movs	r3, #35	; 0x23
 8001b3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b40:	2301      	movs	r3, #1
 8001b42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4811      	ldr	r0, [pc, #68]	; (8001b98 <MX_GPIO_Init+0xa8>)
 8001b52:	f000 fc71 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	2300      	movs	r3, #0
 8001b66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001b68:	230a      	movs	r3, #10
 8001b6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b74:	f000 fc60 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	4619      	mov	r1, r3
 8001b88:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <MX_GPIO_Init+0xb0>)
 8001b8a:	f000 fc55 	bl	8002438 <HAL_GPIO_Init>

}
 8001b8e:	bf00      	nop
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	48000400 	.word	0x48000400
 8001b9c:	48000800 	.word	0x48000800
 8001ba0:	48000c00 	.word	0x48000c00

08001ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba8:	b672      	cpsid	i
}
 8001baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bac:	e7fe      	b.n	8001bac <Error_Handler+0x8>

08001bae <LL_RCC_EnableRTC>:
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_AHB2_GRP1_EnableClock>:
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
}
 8001bf6:	bf00      	nop
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <LL_AHB3_GRP1_EnableClock>:
{
 8001c02:	b480      	push	{r7}
 8001c04:	b085      	sub	sp, #20
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4013      	ands	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c26:	68fb      	ldr	r3, [r7, #12]
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4013      	ands	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c58:	68fb      	ldr	r3, [r7, #12]
}
 8001c5a:	bf00      	nop
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b085      	sub	sp, #20
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c72:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4013      	ands	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
}
 8001c8c:	bf00      	nop
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001c9c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001ca0:	f7ff ffaf 	bl	8001c02 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	202e      	movs	r0, #46	; 0x2e
 8001caa:	f000 fb66 	bl	800237a <HAL_NVIC_SetPriority>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001cae:	202e      	movs	r0, #46	; 0x2e
 8001cb0:	f000 fb7d 	bl	80023ae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a0d      	ldr	r2, [pc, #52]	; (8001cfc <HAL_IPCC_MspInit+0x44>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d113      	bne.n	8001cf2 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001cca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001cce:	f7ff ff98 	bl	8001c02 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	202c      	movs	r0, #44	; 0x2c
 8001cd8:	f000 fb4f 	bl	800237a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001cdc:	202c      	movs	r0, #44	; 0x2c
 8001cde:	f000 fb66 	bl	80023ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	202d      	movs	r0, #45	; 0x2d
 8001ce8:	f000 fb47 	bl	800237a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001cec:	202d      	movs	r0, #45	; 0x2d
 8001cee:	f000 fb5e 	bl	80023ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	58000c00 	.word	0x58000c00

08001d00 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b096      	sub	sp, #88	; 0x58
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d08:	f107 0308 	add.w	r3, r7, #8
 8001d0c:	2250      	movs	r2, #80	; 0x50
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4618      	mov	r0, r3
 8001d12:	f006 fdd5 	bl	80088c0 <memset>
  if(hrtc->Instance==RTC)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <HAL_RTC_MspInit+0x64>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d11d      	bne.n	8001d5c <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d24:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d2a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d2c:	f107 0308 	add.w	r3, r7, #8
 8001d30:	4618      	mov	r0, r3
 8001d32:	f002 f944 	bl	8003fbe <HAL_RCCEx_PeriphCLKConfig>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001d3c:	f7ff ff32 	bl	8001ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d40:	f7ff ff35 	bl	8001bae <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001d44:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001d48:	f7ff ff74 	bl	8001c34 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2100      	movs	r1, #0
 8001d50:	2003      	movs	r0, #3
 8001d52:	f000 fb12 	bl	800237a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001d56:	2003      	movs	r0, #3
 8001d58:	f000 fb29 	bl	80023ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001d5c:	bf00      	nop
 8001d5e:	3758      	adds	r7, #88	; 0x58
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40002800 	.word	0x40002800

08001d68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b09c      	sub	sp, #112	; 0x70
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d80:	f107 030c 	add.w	r3, r7, #12
 8001d84:	2250      	movs	r2, #80	; 0x50
 8001d86:	2100      	movs	r1, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f006 fd99 	bl	80088c0 <memset>
  if(huart->Instance==USART1)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a16      	ldr	r2, [pc, #88]	; (8001dec <HAL_UART_MspInit+0x84>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d124      	bne.n	8001de2 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001da0:	f107 030c 	add.w	r3, r7, #12
 8001da4:	4618      	mov	r0, r3
 8001da6:	f002 f90a 	bl	8003fbe <HAL_RCCEx_PeriphCLKConfig>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001db0:	f7ff fef8 	bl	8001ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001db4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001db8:	f7ff ff55 	bl	8001c66 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	f7ff ff07 	bl	8001bd0 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001dc2:	23c0      	movs	r3, #192	; 0xc0
 8001dc4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dd2:	2307      	movs	r3, #7
 8001dd4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4804      	ldr	r0, [pc, #16]	; (8001df0 <HAL_UART_MspInit+0x88>)
 8001dde:	f000 fb2b 	bl	8002438 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001de2:	bf00      	nop
 8001de4:	3770      	adds	r7, #112	; 0x70
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40013800 	.word	0x40013800
 8001df0:	48000400 	.word	0x48000400

08001df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001df8:	e7fe      	b.n	8001df8 <NMI_Handler+0x4>

08001dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dfe:	e7fe      	b.n	8001dfe <HardFault_Handler+0x4>

08001e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <MemManage_Handler+0x4>

08001e06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e0a:	e7fe      	b.n	8001e0a <BusFault_Handler+0x4>

08001e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e10:	e7fe      	b.n	8001e10 <UsageFault_Handler+0x4>

08001e12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e40:	f000 f934 	bl	80020ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001e4c:	f7ff f9f0 	bl	8001230 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001e58:	f006 f946 	bl	80080e8 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001e64:	f006 f978 	bl	8008158 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001e70:	f000 fc9c 	bl	80027ac <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e80:	4a14      	ldr	r2, [pc, #80]	; (8001ed4 <_sbrk+0x5c>)
 8001e82:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <_sbrk+0x60>)
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e8c:	4b13      	ldr	r3, [pc, #76]	; (8001edc <_sbrk+0x64>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d102      	bne.n	8001e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e94:	4b11      	ldr	r3, [pc, #68]	; (8001edc <_sbrk+0x64>)
 8001e96:	4a12      	ldr	r2, [pc, #72]	; (8001ee0 <_sbrk+0x68>)
 8001e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <_sbrk+0x64>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d207      	bcs.n	8001eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ea8:	f006 fcd2 	bl	8008850 <__errno>
 8001eac:	4603      	mov	r3, r0
 8001eae:	220c      	movs	r2, #12
 8001eb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb6:	e009      	b.n	8001ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <_sbrk+0x64>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ebe:	4b07      	ldr	r3, [pc, #28]	; (8001edc <_sbrk+0x64>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	4a05      	ldr	r2, [pc, #20]	; (8001edc <_sbrk+0x64>)
 8001ec8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eca:	68fb      	ldr	r3, [r7, #12]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20030000 	.word	0x20030000
 8001ed8:	00000400 	.word	0x00000400
 8001edc:	20000310 	.word	0x20000310
 8001ee0:	20000548 	.word	0x20000548

08001ee4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001ee8:	4b24      	ldr	r3, [pc, #144]	; (8001f7c <SystemInit+0x98>)
 8001eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eee:	4a23      	ldr	r2, [pc, #140]	; (8001f7c <SystemInit+0x98>)
 8001ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ef4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001f10:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f1c:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <SystemInit+0x9c>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f2e:	f023 0305 	bic.w	r3, r3, #5
 8001f32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f42:	f023 0301 	bic.w	r3, r3, #1
 8001f46:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4e:	4a0d      	ldr	r2, [pc, #52]	; (8001f84 <SystemInit+0xa0>)
 8001f50:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f56:	4a0b      	ldr	r2, [pc, #44]	; (8001f84 <SystemInit+0xa0>)
 8001f58:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f6e:	2200      	movs	r2, #0
 8001f70:	619a      	str	r2, [r3, #24]
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	e000ed00 	.word	0xe000ed00
 8001f80:	faf6fefb 	.word	0xfaf6fefb
 8001f84:	22041000 	.word	0x22041000

08001f88 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001f88:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f8a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f8c:	3304      	adds	r3, #4

08001f8e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f8e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f90:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001f92:	d3f9      	bcc.n	8001f88 <CopyDataInit>
  bx lr
 8001f94:	4770      	bx	lr

08001f96 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001f96:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001f98:	3004      	adds	r0, #4

08001f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001f9a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001f9c:	d3fb      	bcc.n	8001f96 <FillZerobss>
  bx lr
 8001f9e:	4770      	bx	lr

08001fa0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fa0:	480c      	ldr	r0, [pc, #48]	; (8001fd4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001fa2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fa4:	f7ff ff9e 	bl	8001ee4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001fa8:	480b      	ldr	r0, [pc, #44]	; (8001fd8 <LoopForever+0x8>)
 8001faa:	490c      	ldr	r1, [pc, #48]	; (8001fdc <LoopForever+0xc>)
 8001fac:	4a0c      	ldr	r2, [pc, #48]	; (8001fe0 <LoopForever+0x10>)
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f7ff ffed 	bl	8001f8e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001fb4:	480b      	ldr	r0, [pc, #44]	; (8001fe4 <LoopForever+0x14>)
 8001fb6:	490c      	ldr	r1, [pc, #48]	; (8001fe8 <LoopForever+0x18>)
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f7ff ffee 	bl	8001f9a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001fbe:	480b      	ldr	r0, [pc, #44]	; (8001fec <LoopForever+0x1c>)
 8001fc0:	490b      	ldr	r1, [pc, #44]	; (8001ff0 <LoopForever+0x20>)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f7ff ffe9 	bl	8001f9a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fc8:	f006 fc48 	bl	800885c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001fcc:	f7ff fc3a 	bl	8001844 <main>

08001fd0 <LoopForever>:

LoopForever:
  b LoopForever
 8001fd0:	e7fe      	b.n	8001fd0 <LoopForever>
 8001fd2:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001fd4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001fd8:	20000004 	.word	0x20000004
 8001fdc:	20000084 	.word	0x20000084
 8001fe0:	08009518 	.word	0x08009518
  INIT_BSS _sbss, _ebss
 8001fe4:	200001f8 	.word	0x200001f8
 8001fe8:	20000544 	.word	0x20000544
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001fec:	200301e0 	.word	0x200301e0
 8001ff0:	20030a57 	.word	0x20030a57

08001ff4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ff4:	e7fe      	b.n	8001ff4 <ADC1_IRQHandler>
	...

08001ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ffe:	2300      	movs	r3, #0
 8002000:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002002:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <HAL_Init+0x3c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a0b      	ldr	r2, [pc, #44]	; (8002034 <HAL_Init+0x3c>)
 8002008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800200e:	2003      	movs	r0, #3
 8002010:	f000 f9a8 	bl	8002364 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002014:	2000      	movs	r0, #0
 8002016:	f000 f80f 	bl	8002038 <HAL_InitTick>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d002      	beq.n	8002026 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	71fb      	strb	r3, [r7, #7]
 8002024:	e001      	b.n	800202a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002026:	f7ff fe37 	bl	8001c98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800202a:	79fb      	ldrb	r3, [r7, #7]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	58004000 	.word	0x58004000

08002038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002044:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <HAL_InitTick+0x6c>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d024      	beq.n	8002096 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 800204c:	f001 fd26 	bl	8003a9c <HAL_RCC_GetHCLKFreq>
 8002050:	4602      	mov	r2, r0
 8002052:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <HAL_InitTick+0x6c>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	4619      	mov	r1, r3
 8002058:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800205c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002060:	fbb2 f3f3 	udiv	r3, r2, r3
 8002064:	4618      	mov	r0, r3
 8002066:	f000 f9be 	bl	80023e6 <HAL_SYSTICK_Config>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10f      	bne.n	8002090 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b0f      	cmp	r3, #15
 8002074:	d809      	bhi.n	800208a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002076:	2200      	movs	r2, #0
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	f04f 30ff 	mov.w	r0, #4294967295
 800207e:	f000 f97c 	bl	800237a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002082:	4a09      	ldr	r2, [pc, #36]	; (80020a8 <HAL_InitTick+0x70>)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	e007      	b.n	800209a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	73fb      	strb	r3, [r7, #15]
 800208e:	e004      	b.n	800209a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
 8002094:	e001      	b.n	800209a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800209a:	7bfb      	ldrb	r3, [r7, #15]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	2000000c 	.word	0x2000000c
 80020a8:	20000008 	.word	0x20000008

080020ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_IncTick+0x20>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_IncTick+0x24>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4413      	add	r3, r2
 80020bc:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <HAL_IncTick+0x24>)
 80020be:	6013      	str	r3, [r2, #0]
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	2000000c 	.word	0x2000000c
 80020d0:	20000314 	.word	0x20000314

080020d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return uwTick;
 80020d8:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <HAL_GetTick+0x14>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000314 	.word	0x20000314

080020ec <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80020f0:	4b03      	ldr	r3, [pc, #12]	; (8002100 <HAL_GetTickPrio+0x14>)
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000008 	.word	0x20000008

08002104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002114:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <__NVIC_SetPriorityGrouping+0x44>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002120:	4013      	ands	r3, r2
 8002122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800212c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002136:	4a04      	ldr	r2, [pc, #16]	; (8002148 <__NVIC_SetPriorityGrouping+0x44>)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	60d3      	str	r3, [r2, #12]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002150:	4b04      	ldr	r3, [pc, #16]	; (8002164 <__NVIC_GetPriorityGrouping+0x18>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	0a1b      	lsrs	r3, r3, #8
 8002156:	f003 0307 	and.w	r3, r3, #7
}
 800215a:	4618      	mov	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	e000ed00 	.word	0xe000ed00

08002168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	2b00      	cmp	r3, #0
 8002178:	db0b      	blt.n	8002192 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	f003 021f 	and.w	r2, r3, #31
 8002180:	4907      	ldr	r1, [pc, #28]	; (80021a0 <__NVIC_EnableIRQ+0x38>)
 8002182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002186:	095b      	lsrs	r3, r3, #5
 8002188:	2001      	movs	r0, #1
 800218a:	fa00 f202 	lsl.w	r2, r0, r2
 800218e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	e000e100 	.word	0xe000e100

080021a4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	db12      	blt.n	80021dc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	f003 021f 	and.w	r2, r3, #31
 80021bc:	490a      	ldr	r1, [pc, #40]	; (80021e8 <__NVIC_DisableIRQ+0x44>)
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	2001      	movs	r0, #1
 80021c6:	fa00 f202 	lsl.w	r2, r0, r2
 80021ca:	3320      	adds	r3, #32
 80021cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80021d0:	f3bf 8f4f 	dsb	sy
}
 80021d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80021d6:	f3bf 8f6f 	isb	sy
}
 80021da:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	e000e100 	.word	0xe000e100

080021ec <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	db0c      	blt.n	8002218 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	f003 021f 	and.w	r2, r3, #31
 8002204:	4907      	ldr	r1, [pc, #28]	; (8002224 <__NVIC_SetPendingIRQ+0x38>)
 8002206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	2001      	movs	r0, #1
 800220e:	fa00 f202 	lsl.w	r2, r0, r2
 8002212:	3340      	adds	r3, #64	; 0x40
 8002214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	e000e100 	.word	0xe000e100

08002228 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	2b00      	cmp	r3, #0
 8002238:	db0c      	blt.n	8002254 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	f003 021f 	and.w	r2, r3, #31
 8002240:	4907      	ldr	r1, [pc, #28]	; (8002260 <__NVIC_ClearPendingIRQ+0x38>)
 8002242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002246:	095b      	lsrs	r3, r3, #5
 8002248:	2001      	movs	r0, #1
 800224a:	fa00 f202 	lsl.w	r2, r0, r2
 800224e:	3360      	adds	r3, #96	; 0x60
 8002250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000e100 	.word	0xe000e100

08002264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	6039      	str	r1, [r7, #0]
 800226e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002274:	2b00      	cmp	r3, #0
 8002276:	db0a      	blt.n	800228e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	b2da      	uxtb	r2, r3
 800227c:	490c      	ldr	r1, [pc, #48]	; (80022b0 <__NVIC_SetPriority+0x4c>)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	0112      	lsls	r2, r2, #4
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	440b      	add	r3, r1
 8002288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800228c:	e00a      	b.n	80022a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4908      	ldr	r1, [pc, #32]	; (80022b4 <__NVIC_SetPriority+0x50>)
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	3b04      	subs	r3, #4
 800229c:	0112      	lsls	r2, r2, #4
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	440b      	add	r3, r1
 80022a2:	761a      	strb	r2, [r3, #24]
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000e100 	.word	0xe000e100
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b089      	sub	sp, #36	; 0x24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f1c3 0307 	rsb	r3, r3, #7
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	bf28      	it	cs
 80022d6:	2304      	movcs	r3, #4
 80022d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	3304      	adds	r3, #4
 80022de:	2b06      	cmp	r3, #6
 80022e0:	d902      	bls.n	80022e8 <NVIC_EncodePriority+0x30>
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3b03      	subs	r3, #3
 80022e6:	e000      	b.n	80022ea <NVIC_EncodePriority+0x32>
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	f04f 32ff 	mov.w	r2, #4294967295
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43da      	mvns	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	401a      	ands	r2, r3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002300:	f04f 31ff 	mov.w	r1, #4294967295
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	fa01 f303 	lsl.w	r3, r1, r3
 800230a:	43d9      	mvns	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002310:	4313      	orrs	r3, r2
         );
}
 8002312:	4618      	mov	r0, r3
 8002314:	3724      	adds	r7, #36	; 0x24
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3b01      	subs	r3, #1
 800232c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002330:	d301      	bcc.n	8002336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002332:	2301      	movs	r3, #1
 8002334:	e00f      	b.n	8002356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002336:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <SysTick_Config+0x40>)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3b01      	subs	r3, #1
 800233c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800233e:	210f      	movs	r1, #15
 8002340:	f04f 30ff 	mov.w	r0, #4294967295
 8002344:	f7ff ff8e 	bl	8002264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <SysTick_Config+0x40>)
 800234a:	2200      	movs	r2, #0
 800234c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800234e:	4b04      	ldr	r3, [pc, #16]	; (8002360 <SysTick_Config+0x40>)
 8002350:	2207      	movs	r2, #7
 8002352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	e000e010 	.word	0xe000e010

08002364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff fec9 	bl	8002104 <__NVIC_SetPriorityGrouping>
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b086      	sub	sp, #24
 800237e:	af00      	add	r7, sp, #0
 8002380:	4603      	mov	r3, r0
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	607a      	str	r2, [r7, #4]
 8002386:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002388:	f7ff fee0 	bl	800214c <__NVIC_GetPriorityGrouping>
 800238c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	6978      	ldr	r0, [r7, #20]
 8002394:	f7ff ff90 	bl	80022b8 <NVIC_EncodePriority>
 8002398:	4602      	mov	r2, r0
 800239a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800239e:	4611      	mov	r1, r2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff ff5f 	bl	8002264 <__NVIC_SetPriority>
}
 80023a6:	bf00      	nop
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fed3 	bl	8002168 <__NVIC_EnableIRQ>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	4603      	mov	r3, r0
 80023d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80023d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fee3 	bl	80021a4 <__NVIC_DisableIRQ>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff ff96 	bl	8002320 <SysTick_Config>
 80023f4:	4603      	mov	r3, r0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff feed 	bl	80021ec <__NVIC_SetPendingIRQ>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	4603      	mov	r3, r0
 8002422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff fefd 	bl	8002228 <__NVIC_ClearPendingIRQ>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002438:	b480      	push	{r7}
 800243a:	b087      	sub	sp, #28
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002446:	e14c      	b.n	80026e2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	2101      	movs	r1, #1
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	fa01 f303 	lsl.w	r3, r1, r3
 8002454:	4013      	ands	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 813e 	beq.w	80026dc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	2b01      	cmp	r3, #1
 800246a:	d005      	beq.n	8002478 <HAL_GPIO_Init+0x40>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d130      	bne.n	80024da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	2203      	movs	r2, #3
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4313      	orrs	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024ae:	2201      	movs	r2, #1
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	091b      	lsrs	r3, r3, #4
 80024c4:	f003 0201 	and.w	r2, r3, #1
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d017      	beq.n	8002516 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	2203      	movs	r2, #3
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4013      	ands	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d123      	bne.n	800256a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	08da      	lsrs	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3208      	adds	r2, #8
 800252a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800252e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	220f      	movs	r2, #15
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4013      	ands	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	691a      	ldr	r2, [r3, #16]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	08da      	lsrs	r2, r3, #3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3208      	adds	r2, #8
 8002564:	6939      	ldr	r1, [r7, #16]
 8002566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	2203      	movs	r2, #3
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	4013      	ands	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f003 0203 	and.w	r2, r3, #3
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4313      	orrs	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 8098 	beq.w	80026dc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80025ac:	4a54      	ldr	r2, [pc, #336]	; (8002700 <HAL_GPIO_Init+0x2c8>)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	089b      	lsrs	r3, r3, #2
 80025b2:	3302      	adds	r3, #2
 80025b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	220f      	movs	r2, #15
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4013      	ands	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025d6:	d019      	beq.n	800260c <HAL_GPIO_Init+0x1d4>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a4a      	ldr	r2, [pc, #296]	; (8002704 <HAL_GPIO_Init+0x2cc>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d013      	beq.n	8002608 <HAL_GPIO_Init+0x1d0>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a49      	ldr	r2, [pc, #292]	; (8002708 <HAL_GPIO_Init+0x2d0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d00d      	beq.n	8002604 <HAL_GPIO_Init+0x1cc>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a48      	ldr	r2, [pc, #288]	; (800270c <HAL_GPIO_Init+0x2d4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d007      	beq.n	8002600 <HAL_GPIO_Init+0x1c8>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a47      	ldr	r2, [pc, #284]	; (8002710 <HAL_GPIO_Init+0x2d8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d101      	bne.n	80025fc <HAL_GPIO_Init+0x1c4>
 80025f8:	2304      	movs	r3, #4
 80025fa:	e008      	b.n	800260e <HAL_GPIO_Init+0x1d6>
 80025fc:	2307      	movs	r3, #7
 80025fe:	e006      	b.n	800260e <HAL_GPIO_Init+0x1d6>
 8002600:	2303      	movs	r3, #3
 8002602:	e004      	b.n	800260e <HAL_GPIO_Init+0x1d6>
 8002604:	2302      	movs	r3, #2
 8002606:	e002      	b.n	800260e <HAL_GPIO_Init+0x1d6>
 8002608:	2301      	movs	r3, #1
 800260a:	e000      	b.n	800260e <HAL_GPIO_Init+0x1d6>
 800260c:	2300      	movs	r3, #0
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	f002 0203 	and.w	r2, r2, #3
 8002614:	0092      	lsls	r2, r2, #2
 8002616:	4093      	lsls	r3, r2
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800261e:	4938      	ldr	r1, [pc, #224]	; (8002700 <HAL_GPIO_Init+0x2c8>)
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	089b      	lsrs	r3, r3, #2
 8002624:	3302      	adds	r3, #2
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800262c:	4b39      	ldr	r3, [pc, #228]	; (8002714 <HAL_GPIO_Init+0x2dc>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	43db      	mvns	r3, r3
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4013      	ands	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4313      	orrs	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002650:	4a30      	ldr	r2, [pc, #192]	; (8002714 <HAL_GPIO_Init+0x2dc>)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002656:	4b2f      	ldr	r3, [pc, #188]	; (8002714 <HAL_GPIO_Init+0x2dc>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	43db      	mvns	r3, r3
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4013      	ands	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4313      	orrs	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800267a:	4a26      	ldr	r2, [pc, #152]	; (8002714 <HAL_GPIO_Init+0x2dc>)
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002680:	4b24      	ldr	r3, [pc, #144]	; (8002714 <HAL_GPIO_Init+0x2dc>)
 8002682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002686:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	43db      	mvns	r3, r3
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4013      	ands	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026a6:	4a1b      	ldr	r2, [pc, #108]	; (8002714 <HAL_GPIO_Init+0x2dc>)
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80026ae:	4b19      	ldr	r3, [pc, #100]	; (8002714 <HAL_GPIO_Init+0x2dc>)
 80026b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4013      	ands	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026d4:	4a0f      	ldr	r2, [pc, #60]	; (8002714 <HAL_GPIO_Init+0x2dc>)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	3301      	adds	r3, #1
 80026e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f47f aeab 	bne.w	8002448 <HAL_GPIO_Init+0x10>
  }
}
 80026f2:	bf00      	nop
 80026f4:	bf00      	nop
 80026f6:	371c      	adds	r7, #28
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	40010000 	.word	0x40010000
 8002704:	48000400 	.word	0x48000400
 8002708:	48000800 	.word	0x48000800
 800270c:	48000c00 	.word	0x48000c00
 8002710:	48001000 	.word	0x48001000
 8002714:	58000800 	.word	0x58000800

08002718 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691a      	ldr	r2, [r3, #16]
 8002728:	887b      	ldrh	r3, [r7, #2]
 800272a:	4013      	ands	r3, r2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002730:	2301      	movs	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
 8002734:	e001      	b.n	800273a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002736:	2300      	movs	r3, #0
 8002738:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800273a:	7bfb      	ldrb	r3, [r7, #15]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	807b      	strh	r3, [r7, #2]
 8002754:	4613      	mov	r3, r2
 8002756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002758:	787b      	ldrb	r3, [r7, #1]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800275e:	887a      	ldrh	r2, [r7, #2]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002764:	e002      	b.n	800276c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002766:	887a      	ldrh	r2, [r7, #2]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800278a:	887a      	ldrh	r2, [r7, #2]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4013      	ands	r3, r2
 8002790:	041a      	lsls	r2, r3, #16
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	43d9      	mvns	r1, r3
 8002796:	887b      	ldrh	r3, [r7, #2]
 8002798:	400b      	ands	r3, r1
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	619a      	str	r2, [r3, #24]
}
 80027a0:	bf00      	nop
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <HAL_HSEM_IRQHandler+0x30>)
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80027b8:	4b08      	ldr	r3, [pc, #32]	; (80027dc <HAL_HSEM_IRQHandler+0x30>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	43db      	mvns	r3, r3
 80027c0:	4906      	ldr	r1, [pc, #24]	; (80027dc <HAL_HSEM_IRQHandler+0x30>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80027c6:	4a05      	ldr	r2, [pc, #20]	; (80027dc <HAL_HSEM_IRQHandler+0x30>)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f807 	bl	80027e0 <HAL_HSEM_FreeCallback>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	58001500 	.word	0x58001500

080027e0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d01e      	beq.n	8002844 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002806:	4b13      	ldr	r3, [pc, #76]	; (8002854 <HAL_IPCC_Init+0x60>)
 8002808:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d102      	bne.n	800281c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7ff fa4e 	bl	8001cb8 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800281c:	68b8      	ldr	r0, [r7, #8]
 800281e:	f000 f85b 	bl	80028d8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f82c 	bl	800288c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002842:	e001      	b.n	8002848 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002848:	7bfb      	ldrb	r3, [r7, #15]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	58000c00 	.word	0x58000c00

08002858 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	4613      	mov	r3, r2
 8002864:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002866:	bf00      	nop
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002872:	b480      	push	{r7}
 8002874:	b085      	sub	sp, #20
 8002876:	af00      	add	r7, sp, #0
 8002878:	60f8      	str	r0, [r7, #12]
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	4613      	mov	r3, r2
 800287e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002894:	2300      	movs	r3, #0
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	e00f      	b.n	80028ba <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	4a0b      	ldr	r2, [pc, #44]	; (80028d0 <IPCC_SetDefaultCallbacks+0x44>)
 80028a4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	3306      	adds	r3, #6
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	4a08      	ldr	r2, [pc, #32]	; (80028d4 <IPCC_SetDefaultCallbacks+0x48>)
 80028b2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	3301      	adds	r3, #1
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2b05      	cmp	r3, #5
 80028be:	d9ec      	bls.n	800289a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80028c0:	bf00      	nop
 80028c2:	bf00      	nop
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	08002859 	.word	0x08002859
 80028d4:	08002873 	.word	0x08002873

080028d8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80028ec:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	223f      	movs	r2, #63	; 0x3f
 80028f2:	609a      	str	r2, [r3, #8]
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002904:	4b05      	ldr	r3, [pc, #20]	; (800291c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a04      	ldr	r2, [pc, #16]	; (800291c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800290a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800290e:	6013      	str	r3, [r2, #0]
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	58000400 	.word	0x58000400

08002920 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002924:	4b04      	ldr	r3, [pc, #16]	; (8002938 <HAL_PWREx_GetVoltageRange+0x18>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800292c:	4618      	mov	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	58000400 	.word	0x58000400

0800293c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800294a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800294e:	d101      	bne.n	8002954 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002950:	2301      	movs	r3, #1
 8002952:	e000      	b.n	8002956 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <LL_RCC_HSE_Enable>:
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800296e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002972:	6013      	str	r3, [r2, #0]
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <LL_RCC_HSE_Disable>:
{
 800297e:	b480      	push	{r7}
 8002980:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800298c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002990:	6013      	str	r3, [r2, #0]
}
 8002992:	bf00      	nop
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <LL_RCC_HSE_IsReady>:
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80029a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029ae:	d101      	bne.n	80029b4 <LL_RCC_HSE_IsReady+0x18>
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <LL_RCC_HSE_IsReady+0x1a>
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <LL_RCC_HSI_Enable>:
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80029c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d2:	6013      	str	r3, [r2, #0]
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <LL_RCC_HSI_Disable>:
{
 80029de:	b480      	push	{r7}
 80029e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80029e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029f0:	6013      	str	r3, [r2, #0]
}
 80029f2:	bf00      	nop
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <LL_RCC_HSI_IsReady>:
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a0e:	d101      	bne.n	8002a14 <LL_RCC_HSI_IsReady+0x18>
 8002a10:	2301      	movs	r3, #1
 8002a12:	e000      	b.n	8002a16 <LL_RCC_HSI_IsReady+0x1a>
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	061b      	lsls	r3, r3, #24
 8002a36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	604b      	str	r3, [r1, #4]
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <LL_RCC_HSI48_Enable>:
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002a62:	bf00      	nop
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <LL_RCC_HSI48_Disable>:
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a7c:	f023 0301 	bic.w	r3, r3, #1
 8002a80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002a84:	bf00      	nop
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <LL_RCC_HSI48_IsReady>:
{
 8002a8e:	b480      	push	{r7}
 8002a90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d101      	bne.n	8002aa6 <LL_RCC_HSI48_IsReady+0x18>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <LL_RCC_HSI48_IsReady+0x1a>
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <LL_RCC_LSE_Enable>:
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002aca:	bf00      	nop
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <LL_RCC_LSE_Disable>:
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ae4:	f023 0301 	bic.w	r3, r3, #1
 8002ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <LL_RCC_LSE_EnableBypass>:
{
 8002af6:	b480      	push	{r7}
 8002af8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b06:	f043 0304 	orr.w	r3, r3, #4
 8002b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b0e:	bf00      	nop
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <LL_RCC_LSE_DisableBypass>:
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b28:	f023 0304 	bic.w	r3, r3, #4
 8002b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b30:	bf00      	nop
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <LL_RCC_LSE_IsReady>:
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d101      	bne.n	8002b52 <LL_RCC_LSE_IsReady+0x18>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <LL_RCC_LSE_IsReady+0x1a>
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <LL_RCC_LSI1_Enable>:
{
 8002b5e:	b480      	push	{r7}
 8002b60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002b76:	bf00      	nop
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <LL_RCC_LSI1_Disable>:
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b90:	f023 0301 	bic.w	r3, r3, #1
 8002b94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <LL_RCC_LSI1_IsReady>:
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d101      	bne.n	8002bba <LL_RCC_LSI1_IsReady+0x18>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <LL_RCC_LSI1_IsReady+0x1a>
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <LL_RCC_LSI2_Enable>:
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bd6:	f043 0304 	orr.w	r3, r3, #4
 8002bda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002bde:	bf00      	nop
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <LL_RCC_LSI2_Disable>:
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bf8:	f023 0304 	bic.w	r3, r3, #4
 8002bfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c00:	bf00      	nop
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <LL_RCC_LSI2_IsReady>:
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d101      	bne.n	8002c22 <LL_RCC_LSI2_IsReady+0x18>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <LL_RCC_LSI2_IsReady+0x1a>
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <LL_RCC_LSI2_SetTrimming>:
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c3e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	021b      	lsls	r3, r3, #8
 8002c46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <LL_RCC_MSI_Enable>:
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6013      	str	r3, [r2, #0]
}
 8002c70:	bf00      	nop
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <LL_RCC_MSI_Disable>:
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	6013      	str	r3, [r2, #0]
}
 8002c8e:	bf00      	nop
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <LL_RCC_MSI_IsReady>:
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d101      	bne.n	8002cae <LL_RCC_MSI_IsReady+0x16>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <LL_RCC_MSI_IsReady+0x18>
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <LL_RCC_MSI_SetRange>:
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ccc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	600b      	str	r3, [r1, #0]
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <LL_RCC_MSI_GetRange>:
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cf2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2bb0      	cmp	r3, #176	; 0xb0
 8002cf8:	d901      	bls.n	8002cfe <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002cfa:	23b0      	movs	r3, #176	; 0xb0
 8002cfc:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002cfe:	687b      	ldr	r3, [r7, #4]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <LL_RCC_MSI_SetCalibTrimming>:
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d26:	4313      	orrs	r3, r2
 8002d28:	604b      	str	r3, [r1, #4]
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <LL_RCC_SetSysClkSource>:
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f023 0203 	bic.w	r2, r3, #3
 8002d48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	608b      	str	r3, [r1, #8]
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <LL_RCC_GetSysClkSource>:
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 030c 	and.w	r3, r3, #12
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <LL_RCC_SetAHBPrescaler>:
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	608b      	str	r3, [r1, #8]
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <LL_C2_RCC_SetAHBPrescaler>:
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002daa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002dae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002db2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <LL_RCC_SetAHB4Prescaler>:
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002dda:	f023 020f 	bic.w	r2, r3, #15
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	091b      	lsrs	r3, r3, #4
 8002de2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <LL_RCC_SetAPB1Prescaler>:
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	608b      	str	r3, [r1, #8]
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <LL_RCC_SetAPB2Prescaler>:
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	608b      	str	r3, [r1, #8]
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <LL_RCC_GetAHBPrescaler>:
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <LL_RCC_GetAHB4Prescaler>:
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e68:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <LL_RCC_GetAPB1Prescaler>:
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <LL_RCC_GetAPB2Prescaler>:
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <LL_RCC_PLL_Enable>:
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ebe:	6013      	str	r3, [r2, #0]
}
 8002ec0:	bf00      	nop
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <LL_RCC_PLL_Disable>:
{
 8002eca:	b480      	push	{r7}
 8002ecc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ed8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002edc:	6013      	str	r3, [r2, #0]
}
 8002ede:	bf00      	nop
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <LL_RCC_PLL_IsReady>:
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002efa:	d101      	bne.n	8002f00 <LL_RCC_PLL_IsReady+0x18>
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <LL_RCC_PLL_IsReady+0x1a>
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <LL_RCC_PLL_GetN>:
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	0a1b      	lsrs	r3, r3, #8
 8002f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <LL_RCC_PLL_GetR>:
{
 8002f26:	b480      	push	{r7}
 8002f28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <LL_RCC_PLL_GetDivider>:
{
 8002f3e:	b480      	push	{r7}
 8002f40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <LL_RCC_PLL_GetMainSource>:
{
 8002f56:	b480      	push	{r7}
 8002f58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f003 0303 	and.w	r3, r3, #3
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <LL_RCC_IsActiveFlag_HPRE>:
{
 8002f6e:	b480      	push	{r7}
 8002f70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f80:	d101      	bne.n	8002f86 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8002f92:	b480      	push	{r7}
 8002f94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fa6:	d101      	bne.n	8002fac <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e000      	b.n	8002fae <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fcc:	d101      	bne.n	8002fd2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <LL_RCC_IsActiveFlag_PPRE1>:
{
 8002fde:	b480      	push	{r7}
 8002fe0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ff0:	d101      	bne.n	8002ff6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8003002:	b480      	push	{r7}
 8003004:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003010:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003014:	d101      	bne.n	800301a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
	...

08003028 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003028:	b590      	push	{r4, r7, lr}
 800302a:	b08d      	sub	sp, #52	; 0x34
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e37f      	b.n	800373a <HAL_RCC_OscConfig+0x712>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 8092 	beq.w	800316c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003048:	f7ff fe89 	bl	8002d5e <LL_RCC_GetSysClkSource>
 800304c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800304e:	f7ff ff82 	bl	8002f56 <LL_RCC_PLL_GetMainSource>
 8003052:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003056:	2b00      	cmp	r3, #0
 8003058:	d005      	beq.n	8003066 <HAL_RCC_OscConfig+0x3e>
 800305a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305c:	2b0c      	cmp	r3, #12
 800305e:	d14c      	bne.n	80030fa <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003062:	2b01      	cmp	r3, #1
 8003064:	d149      	bne.n	80030fa <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003066:	f7ff fe17 	bl	8002c98 <LL_RCC_MSI_IsReady>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <HAL_RCC_OscConfig+0x54>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e35e      	b.n	800373a <HAL_RCC_OscConfig+0x712>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003080:	f7ff fe2f 	bl	8002ce2 <LL_RCC_MSI_GetRange>
 8003084:	4603      	mov	r3, r0
 8003086:	429c      	cmp	r4, r3
 8003088:	d914      	bls.n	80030b4 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fd44 	bl	8003b1c <RCC_SetFlashLatencyFromMSIRange>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e34d      	b.n	800373a <HAL_RCC_OscConfig+0x712>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff fe09 	bl	8002cba <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff fe2d 	bl	8002d0c <LL_RCC_MSI_SetCalibTrimming>
 80030b2:	e013      	b.n	80030dc <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff fdfe 	bl	8002cba <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff fe22 	bl	8002d0c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fd25 	bl	8003b1c <RCC_SetFlashLatencyFromMSIRange>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e32e      	b.n	800373a <HAL_RCC_OscConfig+0x712>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80030dc:	f000 fcde 	bl	8003a9c <HAL_RCC_GetHCLKFreq>
 80030e0:	4603      	mov	r3, r0
 80030e2:	4aa5      	ldr	r2, [pc, #660]	; (8003378 <HAL_RCC_OscConfig+0x350>)
 80030e4:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80030e6:	4ba5      	ldr	r3, [pc, #660]	; (800337c <HAL_RCC_OscConfig+0x354>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe ffa4 	bl	8002038 <HAL_InitTick>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d039      	beq.n	800316a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e31f      	b.n	800373a <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d01e      	beq.n	8003140 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003102:	f7ff fdab 	bl	8002c5c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003106:	f7fe ffe5 	bl	80020d4 <HAL_GetTick>
 800310a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800310e:	f7fe ffe1 	bl	80020d4 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e30c      	b.n	800373a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003120:	f7ff fdba 	bl	8002c98 <LL_RCC_MSI_IsReady>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f1      	beq.n	800310e <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff fdc3 	bl	8002cba <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff fde7 	bl	8002d0c <LL_RCC_MSI_SetCalibTrimming>
 800313e:	e015      	b.n	800316c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003140:	f7ff fd9b 	bl	8002c7a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003144:	f7fe ffc6 	bl	80020d4 <HAL_GetTick>
 8003148:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800314c:	f7fe ffc2 	bl	80020d4 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e2ed      	b.n	800373a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() != 0U)
 800315e:	f7ff fd9b 	bl	8002c98 <LL_RCC_MSI_IsReady>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1f1      	bne.n	800314c <HAL_RCC_OscConfig+0x124>
 8003168:	e000      	b.n	800316c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800316a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b00      	cmp	r3, #0
 8003176:	d04e      	beq.n	8003216 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003178:	f7ff fdf1 	bl	8002d5e <LL_RCC_GetSysClkSource>
 800317c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800317e:	f7ff feea 	bl	8002f56 <LL_RCC_PLL_GetMainSource>
 8003182:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	2b08      	cmp	r3, #8
 8003188:	d005      	beq.n	8003196 <HAL_RCC_OscConfig+0x16e>
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	2b0c      	cmp	r3, #12
 800318e:	d10d      	bne.n	80031ac <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	2b03      	cmp	r3, #3
 8003194:	d10a      	bne.n	80031ac <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003196:	f7ff fc01 	bl	800299c <LL_RCC_HSE_IsReady>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d039      	beq.n	8003214 <HAL_RCC_OscConfig+0x1ec>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d135      	bne.n	8003214 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e2c6      	b.n	800373a <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b4:	d102      	bne.n	80031bc <HAL_RCC_OscConfig+0x194>
 80031b6:	f7ff fbd3 	bl	8002960 <LL_RCC_HSE_Enable>
 80031ba:	e001      	b.n	80031c0 <HAL_RCC_OscConfig+0x198>
 80031bc:	f7ff fbdf 	bl	800297e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d012      	beq.n	80031ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c8:	f7fe ff84 	bl	80020d4 <HAL_GetTick>
 80031cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d0:	f7fe ff80 	bl	80020d4 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b64      	cmp	r3, #100	; 0x64
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e2ab      	b.n	800373a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() == 0U)
 80031e2:	f7ff fbdb 	bl	800299c <LL_RCC_HSE_IsReady>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f1      	beq.n	80031d0 <HAL_RCC_OscConfig+0x1a8>
 80031ec:	e013      	b.n	8003216 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ee:	f7fe ff71 	bl	80020d4 <HAL_GetTick>
 80031f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f6:	f7fe ff6d 	bl	80020d4 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b64      	cmp	r3, #100	; 0x64
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e298      	b.n	800373a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003208:	f7ff fbc8 	bl	800299c <LL_RCC_HSE_IsReady>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f1      	bne.n	80031f6 <HAL_RCC_OscConfig+0x1ce>
 8003212:	e000      	b.n	8003216 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003214:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d051      	beq.n	80032c6 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003222:	f7ff fd9c 	bl	8002d5e <LL_RCC_GetSysClkSource>
 8003226:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003228:	f7ff fe95 	bl	8002f56 <LL_RCC_PLL_GetMainSource>
 800322c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	2b04      	cmp	r3, #4
 8003232:	d005      	beq.n	8003240 <HAL_RCC_OscConfig+0x218>
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	2b0c      	cmp	r3, #12
 8003238:	d113      	bne.n	8003262 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2b02      	cmp	r3, #2
 800323e:	d110      	bne.n	8003262 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003240:	f7ff fbdc 	bl	80029fc <LL_RCC_HSI_IsReady>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <HAL_RCC_OscConfig+0x22e>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e271      	b.n	800373a <HAL_RCC_OscConfig+0x712>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff fbe0 	bl	8002a20 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003260:	e031      	b.n	80032c6 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d019      	beq.n	800329e <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800326a:	f7ff fba9 	bl	80029c0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326e:	f7fe ff31 	bl	80020d4 <HAL_GetTick>
 8003272:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003276:	f7fe ff2d 	bl	80020d4 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e258      	b.n	800373a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003288:	f7ff fbb8 	bl	80029fc <LL_RCC_HSI_IsReady>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f1      	beq.n	8003276 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff fbc2 	bl	8002a20 <LL_RCC_HSI_SetCalibTrimming>
 800329c:	e013      	b.n	80032c6 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800329e:	f7ff fb9e 	bl	80029de <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a2:	f7fe ff17 	bl	80020d4 <HAL_GetTick>
 80032a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032aa:	f7fe ff13 	bl	80020d4 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e23e      	b.n	800373a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() != 0U)
 80032bc:	f7ff fb9e 	bl	80029fc <LL_RCC_HSI_IsReady>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f1      	bne.n	80032aa <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 80a4 	beq.w	8003428 <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d077      	beq.n	80033d8 <HAL_RCC_OscConfig+0x3b0>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d04b      	beq.n	800338c <HAL_RCC_OscConfig+0x364>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80032f4:	f7ff fc55 	bl	8002ba2 <LL_RCC_LSI1_IsReady>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d113      	bne.n	8003326 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80032fe:	f7ff fc2e 	bl	8002b5e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003302:	f7fe fee7 	bl	80020d4 <HAL_GetTick>
 8003306:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800330a:	f7fe fee3 	bl	80020d4 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e20e      	b.n	800373a <HAL_RCC_OscConfig+0x712>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800331c:	f7ff fc41 	bl	8002ba2 <LL_RCC_LSI1_IsReady>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0f1      	beq.n	800330a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003326:	f7ff fc4e 	bl	8002bc6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332a:	f7fe fed3 	bl	80020d4 <HAL_GetTick>
 800332e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003332:	f7fe fecf 	bl	80020d4 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b03      	cmp	r3, #3
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e1fa      	b.n	800373a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003344:	f7ff fc61 	bl	8002c0a <LL_RCC_LSI2_IsReady>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f1      	beq.n	8003332 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff fc6b 	bl	8002c2e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003358:	f7ff fc12 	bl	8002b80 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335c:	f7fe feba 	bl	80020d4 <HAL_GetTick>
 8003360:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003362:	e00d      	b.n	8003380 <HAL_RCC_OscConfig+0x358>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003364:	f7fe feb6 	bl	80020d4 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d906      	bls.n	8003380 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e1e1      	b.n	800373a <HAL_RCC_OscConfig+0x712>
 8003376:	bf00      	nop
 8003378:	20000004 	.word	0x20000004
 800337c:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003380:	f7ff fc0f 	bl	8002ba2 <LL_RCC_LSI1_IsReady>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1ec      	bne.n	8003364 <HAL_RCC_OscConfig+0x33c>
 800338a:	e04d      	b.n	8003428 <HAL_RCC_OscConfig+0x400>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800338c:	f7ff fbe7 	bl	8002b5e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003390:	f7fe fea0 	bl	80020d4 <HAL_GetTick>
 8003394:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x382>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003398:	f7fe fe9c 	bl	80020d4 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e1c7      	b.n	800373a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80033aa:	f7ff fbfa 	bl	8002ba2 <LL_RCC_LSI1_IsReady>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0f1      	beq.n	8003398 <HAL_RCC_OscConfig+0x370>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80033b4:	f7ff fc18 	bl	8002be8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x3a4>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80033ba:	f7fe fe8b 	bl	80020d4 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e1b6      	b.n	800373a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80033cc:	f7ff fc1d 	bl	8002c0a <LL_RCC_LSI2_IsReady>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f1      	bne.n	80033ba <HAL_RCC_OscConfig+0x392>
 80033d6:	e027      	b.n	8003428 <HAL_RCC_OscConfig+0x400>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80033d8:	f7ff fc06 	bl	8002be8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033dc:	f7fe fe7a 	bl	80020d4 <HAL_GetTick>
 80033e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x3ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80033e4:	f7fe fe76 	bl	80020d4 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e1a1      	b.n	800373a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80033f6:	f7ff fc08 	bl	8002c0a <LL_RCC_LSI2_IsReady>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f1      	bne.n	80033e4 <HAL_RCC_OscConfig+0x3bc>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003400:	f7ff fbbe 	bl	8002b80 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003404:	f7fe fe66 	bl	80020d4 <HAL_GetTick>
 8003408:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x3f6>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800340c:	f7fe fe62 	bl	80020d4 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e18d      	b.n	800373a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800341e:	f7ff fbc0 	bl	8002ba2 <LL_RCC_LSI1_IsReady>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1f1      	bne.n	800340c <HAL_RCC_OscConfig+0x3e4>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d05b      	beq.n	80034ec <HAL_RCC_OscConfig+0x4c4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003434:	4ba7      	ldr	r3, [pc, #668]	; (80036d4 <HAL_RCC_OscConfig+0x6ac>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343c:	2b00      	cmp	r3, #0
 800343e:	d114      	bne.n	800346a <HAL_RCC_OscConfig+0x442>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003440:	f7ff fa5e 	bl	8002900 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003444:	f7fe fe46 	bl	80020d4 <HAL_GetTick>
 8003448:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x436>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800344c:	f7fe fe42 	bl	80020d4 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e16d      	b.n	800373a <HAL_RCC_OscConfig+0x712>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800345e:	4b9d      	ldr	r3, [pc, #628]	; (80036d4 <HAL_RCC_OscConfig+0x6ac>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <HAL_RCC_OscConfig+0x424>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d102      	bne.n	8003478 <HAL_RCC_OscConfig+0x450>
 8003472:	f7ff fb1e 	bl	8002ab2 <LL_RCC_LSE_Enable>
 8003476:	e00c      	b.n	8003492 <HAL_RCC_OscConfig+0x46a>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	2b05      	cmp	r3, #5
 800347e:	d104      	bne.n	800348a <HAL_RCC_OscConfig+0x462>
 8003480:	f7ff fb39 	bl	8002af6 <LL_RCC_LSE_EnableBypass>
 8003484:	f7ff fb15 	bl	8002ab2 <LL_RCC_LSE_Enable>
 8003488:	e003      	b.n	8003492 <HAL_RCC_OscConfig+0x46a>
 800348a:	f7ff fb23 	bl	8002ad4 <LL_RCC_LSE_Disable>
 800348e:	f7ff fb43 	bl	8002b18 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d014      	beq.n	80034c4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349a:	f7fe fe1b 	bl	80020d4 <HAL_GetTick>
 800349e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80034a0:	e00a      	b.n	80034b8 <HAL_RCC_OscConfig+0x490>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a2:	f7fe fe17 	bl	80020d4 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e140      	b.n	800373a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() == 0U)
 80034b8:	f7ff fb3f 	bl	8002b3a <LL_RCC_LSE_IsReady>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0ef      	beq.n	80034a2 <HAL_RCC_OscConfig+0x47a>
 80034c2:	e013      	b.n	80034ec <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c4:	f7fe fe06 	bl	80020d4 <HAL_GetTick>
 80034c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80034ca:	e00a      	b.n	80034e2 <HAL_RCC_OscConfig+0x4ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034cc:	f7fe fe02 	bl	80020d4 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034da:	4293      	cmp	r3, r2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e12b      	b.n	800373a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() != 0U)
 80034e2:	f7ff fb2a 	bl	8002b3a <LL_RCC_LSE_IsReady>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1ef      	bne.n	80034cc <HAL_RCC_OscConfig+0x4a4>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d02c      	beq.n	8003552 <HAL_RCC_OscConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d014      	beq.n	800352a <HAL_RCC_OscConfig+0x502>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003500:	f7ff faa3 	bl	8002a4a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003504:	f7fe fde6 	bl	80020d4 <HAL_GetTick>
 8003508:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x4f6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800350c:	f7fe fde2 	bl	80020d4 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e10d      	b.n	800373a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800351e:	f7ff fab6 	bl	8002a8e <LL_RCC_HSI48_IsReady>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0f1      	beq.n	800350c <HAL_RCC_OscConfig+0x4e4>
 8003528:	e013      	b.n	8003552 <HAL_RCC_OscConfig+0x52a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800352a:	f7ff fa9f 	bl	8002a6c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352e:	f7fe fdd1 	bl	80020d4 <HAL_GetTick>
 8003532:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x520>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003536:	f7fe fdcd 	bl	80020d4 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e0f8      	b.n	800373a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003548:	f7ff faa1 	bl	8002a8e <LL_RCC_HSI48_IsReady>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f1      	bne.n	8003536 <HAL_RCC_OscConfig+0x50e>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 80ee 	beq.w	8003738 <HAL_RCC_OscConfig+0x710>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800355c:	f7ff fbff 	bl	8002d5e <LL_RCC_GetSysClkSource>
 8003560:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356e:	2b02      	cmp	r3, #2
 8003570:	f040 80b4 	bne.w	80036dc <HAL_RCC_OscConfig+0x6b4>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 0203 	and.w	r2, r3, #3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	429a      	cmp	r2, r3
 8003580:	d123      	bne.n	80035ca <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800358c:	429a      	cmp	r2, r3
 800358e:	d11c      	bne.n	80035ca <HAL_RCC_OscConfig+0x5a2>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	0a1b      	lsrs	r3, r3, #8
 8003594:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800359c:	429a      	cmp	r2, r3
 800359e:	d114      	bne.n	80035ca <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d10d      	bne.n	80035ca <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d106      	bne.n	80035ca <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d05d      	beq.n	8003686 <HAL_RCC_OscConfig+0x65e>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	2b0c      	cmp	r3, #12
 80035ce:	d058      	beq.n	8003682 <HAL_RCC_OscConfig+0x65a>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_RCC_OscConfig+0x5ba>

          {
            return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e0ab      	b.n	800373a <HAL_RCC_OscConfig+0x712>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035e2:	f7ff fc72 	bl	8002eca <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035e6:	f7fe fd75 	bl	80020d4 <HAL_GetTick>
 80035ea:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x5d8>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ee:	f7fe fd71 	bl	80020d4 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x5d8>
              {
                return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e09c      	b.n	800373a <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1ef      	bne.n	80035ee <HAL_RCC_OscConfig+0x5c6>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800360e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	4b30      	ldr	r3, [pc, #192]	; (80036d8 <HAL_RCC_OscConfig+0x6b0>)
 8003616:	4013      	ands	r3, r2
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003620:	4311      	orrs	r1, r2
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003626:	0212      	lsls	r2, r2, #8
 8003628:	4311      	orrs	r1, r2
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800362e:	4311      	orrs	r1, r2
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003634:	4311      	orrs	r1, r2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800363a:	430a      	orrs	r2, r1
 800363c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003640:	4313      	orrs	r3, r2
 8003642:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003644:	f7ff fc32 	bl	8002eac <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003656:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003658:	f7fe fd3c 	bl	80020d4 <HAL_GetTick>
 800365c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x64a>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003660:	f7fe fd38 	bl	80020d4 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x64a>
              {
                return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e063      	b.n	800373a <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0ef      	beq.n	8003660 <HAL_RCC_OscConfig+0x638>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003680:	e05a      	b.n	8003738 <HAL_RCC_OscConfig+0x710>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e059      	b.n	800373a <HAL_RCC_OscConfig+0x712>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d151      	bne.n	8003738 <HAL_RCC_OscConfig+0x710>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003694:	f7ff fc0a 	bl	8002eac <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036a8:	f7fe fd14 	bl	80020d4 <HAL_GetTick>
 80036ac:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x69a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b0:	f7fe fd10 	bl	80020d4 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x69a>
            {
              return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e03b      	b.n	800373a <HAL_RCC_OscConfig+0x712>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0ef      	beq.n	80036b0 <HAL_RCC_OscConfig+0x688>
 80036d0:	e032      	b.n	8003738 <HAL_RCC_OscConfig+0x710>
 80036d2:	bf00      	nop
 80036d4:	58000400 	.word	0x58000400
 80036d8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	2b0c      	cmp	r3, #12
 80036e0:	d028      	beq.n	8003734 <HAL_RCC_OscConfig+0x70c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e2:	f7ff fbf2 	bl	8002eca <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80036e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036f0:	f023 0303 	bic.w	r3, r3, #3
 80036f4:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80036f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003700:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003704:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003708:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370a:	f7fe fce3 	bl	80020d4 <HAL_GetTick>
 800370e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x6fc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003712:	f7fe fcdf 	bl	80020d4 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x6fc>
          {
            return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e00a      	b.n	800373a <HAL_RCC_OscConfig+0x712>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1ef      	bne.n	8003712 <HAL_RCC_OscConfig+0x6ea>
 8003732:	e001      	b.n	8003738 <HAL_RCC_OscConfig+0x710>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e000      	b.n	800373a <HAL_RCC_OscConfig+0x712>
      }
    }
  }
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3734      	adds	r7, #52	; 0x34
 800373e:	46bd      	mov	sp, r7
 8003740:	bd90      	pop	{r4, r7, pc}
 8003742:	bf00      	nop

08003744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e12d      	b.n	80039b4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003758:	4b98      	ldr	r3, [pc, #608]	; (80039bc <HAL_RCC_ClockConfig+0x278>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d91b      	bls.n	800379e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003766:	4b95      	ldr	r3, [pc, #596]	; (80039bc <HAL_RCC_ClockConfig+0x278>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f023 0207 	bic.w	r2, r3, #7
 800376e:	4993      	ldr	r1, [pc, #588]	; (80039bc <HAL_RCC_ClockConfig+0x278>)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	4313      	orrs	r3, r2
 8003774:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003776:	f7fe fcad 	bl	80020d4 <HAL_GetTick>
 800377a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800377c:	e008      	b.n	8003790 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800377e:	f7fe fca9 	bl	80020d4 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e111      	b.n	80039b4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003790:	4b8a      	ldr	r3, [pc, #552]	; (80039bc <HAL_RCC_ClockConfig+0x278>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d1ef      	bne.n	800377e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d016      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7ff fae1 	bl	8002d76 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037b4:	f7fe fc8e 	bl	80020d4 <HAL_GetTick>
 80037b8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037bc:	f7fe fc8a 	bl	80020d4 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e0f2      	b.n	80039b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80037ce:	f7ff fbce 	bl	8002f6e <LL_RCC_IsActiveFlag_HPRE>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0f1      	beq.n	80037bc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0320 	and.w	r3, r3, #32
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d016      	beq.n	8003812 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff fad8 	bl	8002d9e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037ee:	f7fe fc71 	bl	80020d4 <HAL_GetTick>
 80037f2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037f6:	f7fe fc6d 	bl	80020d4 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e0d5      	b.n	80039b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003808:	f7ff fbc3 	bl	8002f92 <LL_RCC_IsActiveFlag_C2HPRE>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0f1      	beq.n	80037f6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	d016      	beq.n	800384c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff fad1 	bl	8002dca <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003828:	f7fe fc54 	bl	80020d4 <HAL_GetTick>
 800382c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800382e:	e008      	b.n	8003842 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003830:	f7fe fc50 	bl	80020d4 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e0b8      	b.n	80039b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003842:	f7ff fbb9 	bl	8002fb8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0f1      	beq.n	8003830 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d016      	beq.n	8003886 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff facb 	bl	8002df8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003862:	f7fe fc37 	bl	80020d4 <HAL_GetTick>
 8003866:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003868:	e008      	b.n	800387c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800386a:	f7fe fc33 	bl	80020d4 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d901      	bls.n	800387c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e09b      	b.n	80039b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800387c:	f7ff fbaf 	bl	8002fde <LL_RCC_IsActiveFlag_PPRE1>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f1      	beq.n	800386a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d017      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff fac1 	bl	8002e20 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800389e:	f7fe fc19 	bl	80020d4 <HAL_GetTick>
 80038a2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80038a6:	f7fe fc15 	bl	80020d4 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e07d      	b.n	80039b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80038b8:	f7ff fba3 	bl	8003002 <LL_RCC_IsActiveFlag_PPRE2>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f1      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d043      	beq.n	8003956 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d106      	bne.n	80038e4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80038d6:	f7ff f861 	bl	800299c <LL_RCC_HSE_IsReady>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d11e      	bne.n	800391e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e067      	b.n	80039b4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	d106      	bne.n	80038fa <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80038ec:	f7ff fafc 	bl	8002ee8 <LL_RCC_PLL_IsReady>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d113      	bne.n	800391e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e05c      	b.n	80039b4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d106      	bne.n	8003910 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003902:	f7ff f9c9 	bl	8002c98 <LL_RCC_MSI_IsReady>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d108      	bne.n	800391e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e051      	b.n	80039b4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003910:	f7ff f874 	bl	80029fc <LL_RCC_HSI_IsReady>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e04a      	b.n	80039b4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff fa07 	bl	8002d36 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003928:	f7fe fbd4 	bl	80020d4 <HAL_GetTick>
 800392c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392e:	e00a      	b.n	8003946 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003930:	f7fe fbd0 	bl	80020d4 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	; 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e036      	b.n	80039b4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	f7ff fa0a 	bl	8002d5e <LL_RCC_GetSysClkSource>
 800394a:	4602      	mov	r2, r0
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	429a      	cmp	r2, r3
 8003954:	d1ec      	bne.n	8003930 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003956:	4b19      	ldr	r3, [pc, #100]	; (80039bc <HAL_RCC_ClockConfig+0x278>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	429a      	cmp	r2, r3
 8003962:	d21b      	bcs.n	800399c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003964:	4b15      	ldr	r3, [pc, #84]	; (80039bc <HAL_RCC_ClockConfig+0x278>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f023 0207 	bic.w	r2, r3, #7
 800396c:	4913      	ldr	r1, [pc, #76]	; (80039bc <HAL_RCC_ClockConfig+0x278>)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	4313      	orrs	r3, r2
 8003972:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003974:	f7fe fbae 	bl	80020d4 <HAL_GetTick>
 8003978:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800397a:	e008      	b.n	800398e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800397c:	f7fe fbaa 	bl	80020d4 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e012      	b.n	80039b4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800398e:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <HAL_RCC_ClockConfig+0x278>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d1ef      	bne.n	800397c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800399c:	f000 f87e 	bl	8003a9c <HAL_RCC_GetHCLKFreq>
 80039a0:	4603      	mov	r3, r0
 80039a2:	4a07      	ldr	r2, [pc, #28]	; (80039c0 <HAL_RCC_ClockConfig+0x27c>)
 80039a4:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80039a6:	f7fe fba1 	bl	80020ec <HAL_GetTickPrio>
 80039aa:	4603      	mov	r3, r0
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fe fb43 	bl	8002038 <HAL_InitTick>
 80039b2:	4603      	mov	r3, r0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	58004000 	.word	0x58004000
 80039c0:	20000004 	.word	0x20000004

080039c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c4:	b590      	push	{r4, r7, lr}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039ca:	f7ff f9c8 	bl	8002d5e <LL_RCC_GetSysClkSource>
 80039ce:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10a      	bne.n	80039ec <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80039d6:	f7ff f984 	bl	8002ce2 <LL_RCC_MSI_GetRange>
 80039da:	4603      	mov	r3, r0
 80039dc:	091b      	lsrs	r3, r3, #4
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	4a2b      	ldr	r2, [pc, #172]	; (8003a90 <HAL_RCC_GetSysClockFreq+0xcc>)
 80039e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	e04b      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d102      	bne.n	80039f8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039f2:	4b28      	ldr	r3, [pc, #160]	; (8003a94 <HAL_RCC_GetSysClockFreq+0xd0>)
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	e045      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d10a      	bne.n	8003a14 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80039fe:	f7fe ff9d 	bl	800293c <LL_RCC_HSE_IsEnabledDiv2>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d102      	bne.n	8003a0e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003a08:	4b22      	ldr	r3, [pc, #136]	; (8003a94 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	e03a      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003a0e:	4b22      	ldr	r3, [pc, #136]	; (8003a98 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	e037      	b.n	8003a84 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003a14:	f7ff fa9f 	bl	8002f56 <LL_RCC_PLL_GetMainSource>
 8003a18:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d003      	beq.n	8003a28 <HAL_RCC_GetSysClockFreq+0x64>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d003      	beq.n	8003a2e <HAL_RCC_GetSysClockFreq+0x6a>
 8003a26:	e00d      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003a28:	4b1a      	ldr	r3, [pc, #104]	; (8003a94 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a2a:	60bb      	str	r3, [r7, #8]
        break;
 8003a2c:	e015      	b.n	8003a5a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a2e:	f7fe ff85 	bl	800293c <LL_RCC_HSE_IsEnabledDiv2>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d102      	bne.n	8003a3e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003a38:	4b16      	ldr	r3, [pc, #88]	; (8003a94 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a3a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003a3c:	e00d      	b.n	8003a5a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003a3e:	4b16      	ldr	r3, [pc, #88]	; (8003a98 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a40:	60bb      	str	r3, [r7, #8]
        break;
 8003a42:	e00a      	b.n	8003a5a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003a44:	f7ff f94d 	bl	8002ce2 <LL_RCC_MSI_GetRange>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	091b      	lsrs	r3, r3, #4
 8003a4c:	f003 030f 	and.w	r3, r3, #15
 8003a50:	4a0f      	ldr	r2, [pc, #60]	; (8003a90 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a56:	60bb      	str	r3, [r7, #8]
        break;
 8003a58:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8003a5a:	f7ff fa57 	bl	8002f0c <LL_RCC_PLL_GetN>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	fb03 f402 	mul.w	r4, r3, r2
 8003a66:	f7ff fa6a 	bl	8002f3e <LL_RCC_PLL_GetDivider>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	091b      	lsrs	r3, r3, #4
 8003a6e:	3301      	adds	r3, #1
 8003a70:	fbb4 f4f3 	udiv	r4, r4, r3
 8003a74:	f7ff fa57 	bl	8002f26 <LL_RCC_PLL_GetR>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	0f5b      	lsrs	r3, r3, #29
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003a82:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8003a84:	68fb      	ldr	r3, [r7, #12]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd90      	pop	{r4, r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	080093d4 	.word	0x080093d4
 8003a94:	00f42400 	.word	0x00f42400
 8003a98:	01e84800 	.word	0x01e84800

08003a9c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a9c:	b598      	push	{r3, r4, r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003aa0:	f7ff ff90 	bl	80039c4 <HAL_RCC_GetSysClockFreq>
 8003aa4:	4604      	mov	r4, r0
 8003aa6:	f7ff f9cf 	bl	8002e48 <LL_RCC_GetAHBPrescaler>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	091b      	lsrs	r3, r3, #4
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	4a03      	ldr	r2, [pc, #12]	; (8003ac0 <HAL_RCC_GetHCLKFreq+0x24>)
 8003ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	bd98      	pop	{r3, r4, r7, pc}
 8003ac0:	08009374 	.word	0x08009374

08003ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ac4:	b598      	push	{r3, r4, r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003ac8:	f7ff ffe8 	bl	8003a9c <HAL_RCC_GetHCLKFreq>
 8003acc:	4604      	mov	r4, r0
 8003ace:	f7ff f9d5 	bl	8002e7c <LL_RCC_GetAPB1Prescaler>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	0a1b      	lsrs	r3, r3, #8
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	4a04      	ldr	r2, [pc, #16]	; (8003aec <HAL_RCC_GetPCLK1Freq+0x28>)
 8003adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae0:	f003 031f 	and.w	r3, r3, #31
 8003ae4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	bd98      	pop	{r3, r4, r7, pc}
 8003aec:	080093b4 	.word	0x080093b4

08003af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003af0:	b598      	push	{r3, r4, r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003af4:	f7ff ffd2 	bl	8003a9c <HAL_RCC_GetHCLKFreq>
 8003af8:	4604      	mov	r4, r0
 8003afa:	f7ff f9cb 	bl	8002e94 <LL_RCC_GetAPB2Prescaler>
 8003afe:	4603      	mov	r3, r0
 8003b00:	0adb      	lsrs	r3, r3, #11
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	4a04      	ldr	r2, [pc, #16]	; (8003b18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b0c:	f003 031f 	and.w	r3, r3, #31
 8003b10:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	bd98      	pop	{r3, r4, r7, pc}
 8003b18:	080093b4 	.word	0x080093b4

08003b1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003b1c:	b590      	push	{r4, r7, lr}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2bb0      	cmp	r3, #176	; 0xb0
 8003b28:	d903      	bls.n	8003b32 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003b2a:	4b15      	ldr	r3, [pc, #84]	; (8003b80 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	e007      	b.n	8003b42 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	091b      	lsrs	r3, r3, #4
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	4a11      	ldr	r2, [pc, #68]	; (8003b80 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b40:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003b42:	f7ff f98d 	bl	8002e60 <LL_RCC_GetAHB4Prescaler>
 8003b46:	4603      	mov	r3, r0
 8003b48:	091b      	lsrs	r3, r3, #4
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	4a0d      	ldr	r2, [pc, #52]	; (8003b84 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	4a0a      	ldr	r2, [pc, #40]	; (8003b88 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003b60:	fba2 2303 	umull	r2, r3, r2, r3
 8003b64:	0c9c      	lsrs	r4, r3, #18
 8003b66:	f7fe fedb 	bl	8002920 <HAL_PWREx_GetVoltageRange>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4620      	mov	r0, r4
 8003b70:	f000 f80c 	bl	8003b8c <RCC_SetFlashLatency>
 8003b74:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd90      	pop	{r4, r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	080093d4 	.word	0x080093d4
 8003b84:	08009374 	.word	0x08009374
 8003b88:	431bde83 	.word	0x431bde83

08003b8c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003b8c:	b590      	push	{r4, r7, lr}
 8003b8e:	b093      	sub	sp, #76	; 0x4c
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003b96:	4b37      	ldr	r3, [pc, #220]	; (8003c74 <RCC_SetFlashLatency+0xe8>)
 8003b98:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003b9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003ba2:	4a35      	ldr	r2, [pc, #212]	; (8003c78 <RCC_SetFlashLatency+0xec>)
 8003ba4:	f107 031c 	add.w	r3, r7, #28
 8003ba8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003baa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003bae:	4b33      	ldr	r3, [pc, #204]	; (8003c7c <RCC_SetFlashLatency+0xf0>)
 8003bb0:	f107 040c 	add.w	r4, r7, #12
 8003bb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003bba:	2300      	movs	r3, #0
 8003bbc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc4:	d11a      	bne.n	8003bfc <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	643b      	str	r3, [r7, #64]	; 0x40
 8003bca:	e013      	b.n	8003bf4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	3348      	adds	r3, #72	; 0x48
 8003bd2:	443b      	add	r3, r7
 8003bd4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d807      	bhi.n	8003bee <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	3348      	adds	r3, #72	; 0x48
 8003be4:	443b      	add	r3, r7
 8003be6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003bea:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003bec:	e020      	b.n	8003c30 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	643b      	str	r3, [r7, #64]	; 0x40
 8003bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	d9e8      	bls.n	8003bcc <RCC_SetFlashLatency+0x40>
 8003bfa:	e019      	b.n	8003c30 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c00:	e013      	b.n	8003c2a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	3348      	adds	r3, #72	; 0x48
 8003c08:	443b      	add	r3, r7
 8003c0a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d807      	bhi.n	8003c24 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	3348      	adds	r3, #72	; 0x48
 8003c1a:	443b      	add	r3, r7
 8003c1c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003c20:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003c22:	e005      	b.n	8003c30 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c26:	3301      	adds	r3, #1
 8003c28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d9e8      	bls.n	8003c02 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003c30:	4b13      	ldr	r3, [pc, #76]	; (8003c80 <RCC_SetFlashLatency+0xf4>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f023 0207 	bic.w	r2, r3, #7
 8003c38:	4911      	ldr	r1, [pc, #68]	; (8003c80 <RCC_SetFlashLatency+0xf4>)
 8003c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c40:	f7fe fa48 	bl	80020d4 <HAL_GetTick>
 8003c44:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c46:	e008      	b.n	8003c5a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c48:	f7fe fa44 	bl	80020d4 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e007      	b.n	8003c6a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c5a:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <RCC_SetFlashLatency+0xf4>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d1ef      	bne.n	8003c48 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	374c      	adds	r7, #76	; 0x4c
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd90      	pop	{r4, r7, pc}
 8003c72:	bf00      	nop
 8003c74:	080091d8 	.word	0x080091d8
 8003c78:	080091e8 	.word	0x080091e8
 8003c7c:	080091f4 	.word	0x080091f4
 8003c80:	58004000 	.word	0x58004000

08003c84 <LL_RCC_LSE_IsEnabled>:
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d101      	bne.n	8003c9c <LL_RCC_LSE_IsEnabled+0x18>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e000      	b.n	8003c9e <LL_RCC_LSE_IsEnabled+0x1a>
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <LL_RCC_LSE_IsReady>:
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d101      	bne.n	8003cc0 <LL_RCC_LSE_IsReady+0x18>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e000      	b.n	8003cc2 <LL_RCC_LSE_IsReady+0x1a>
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <LL_RCC_SetRFWKPClockSource>:
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cdc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ce0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <LL_RCC_SetSMPSClockSource>:
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	f023 0203 	bic.w	r2, r3, #3
 8003d0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <LL_RCC_SetSMPSPrescaler>:
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <LL_RCC_SetUSARTClockSource>:
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d58:	f023 0203 	bic.w	r2, r3, #3
 8003d5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <LL_RCC_SetLPUARTClockSource>:
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d84:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <LL_RCC_SetI2CClockSource>:
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	091b      	lsrs	r3, r3, #4
 8003db4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003db8:	43db      	mvns	r3, r3
 8003dba:	401a      	ands	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003dc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <LL_RCC_SetLPTIMClockSource>:
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	0c1b      	lsrs	r3, r3, #16
 8003dee:	041b      	lsls	r3, r3, #16
 8003df0:	43db      	mvns	r3, r3
 8003df2:	401a      	ands	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	041b      	lsls	r3, r3, #16
 8003df8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <LL_RCC_SetSAIClockSource>:
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <LL_RCC_SetRNGClockSource>:
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003e4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <LL_RCC_SetCLK48ClockSource>:
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <LL_RCC_SetUSBClockSource>:
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b082      	sub	sp, #8
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff ffe3 	bl	8003e66 <LL_RCC_SetCLK48ClockSource>
}
 8003ea0:	bf00      	nop
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <LL_RCC_SetADCClockSource>:
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ebc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <LL_RCC_SetRTCClockSource>:
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ee8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <LL_RCC_GetRTCClockSource>:
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <LL_RCC_ForceBackupDomainReset>:
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f32:	bf00      	nop
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <LL_RCC_ReleaseBackupDomainReset>:
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f54:	bf00      	nop
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <LL_RCC_PLLSAI1_Enable>:
{
 8003f5e:	b480      	push	{r7}
 8003f60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f70:	6013      	str	r3, [r2, #0]
}
 8003f72:	bf00      	nop
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <LL_RCC_PLLSAI1_Disable>:
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f8e:	6013      	str	r3, [r2, #0]
}
 8003f90:	bf00      	nop
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <LL_RCC_PLLSAI1_IsReady>:
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fac:	d101      	bne.n	8003fb2 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b088      	sub	sp, #32
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003fca:	2300      	movs	r3, #0
 8003fcc:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d034      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fe2:	d021      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003fe4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fe8:	d81b      	bhi.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fee:	d01d      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003ff0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ff4:	d815      	bhi.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00b      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003ffa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ffe:	d110      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800400a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800400e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004010:	e00d      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3304      	adds	r3, #4
 8004016:	4618      	mov	r0, r3
 8004018:	f000 f947 	bl	80042aa <RCCEx_PLLSAI1_ConfigNP>
 800401c:	4603      	mov	r3, r0
 800401e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004020:	e005      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	77fb      	strb	r3, [r7, #31]
        break;
 8004026:	e002      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004028:	bf00      	nop
 800402a:	e000      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800402c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800402e:	7ffb      	ldrb	r3, [r7, #31]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d105      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff fee8 	bl	8003e0e <LL_RCC_SetSAIClockSource>
 800403e:	e001      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004040:	7ffb      	ldrb	r3, [r7, #31]
 8004042:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800404c:	2b00      	cmp	r3, #0
 800404e:	d046      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004050:	f7ff ff56 	bl	8003f00 <LL_RCC_GetRTCClockSource>
 8004054:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	429a      	cmp	r2, r3
 800405e:	d03c      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004060:	f7fe fc4e 	bl	8002900 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d105      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	4618      	mov	r0, r3
 8004070:	f7ff ff30 	bl	8003ed4 <LL_RCC_SetRTCClockSource>
 8004074:	e02e      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800407a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004080:	f7ff ff4b 	bl	8003f1a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004084:	f7ff ff5a 	bl	8003f3c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	4313      	orrs	r3, r2
 8004094:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004096:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80040a0:	f7ff fdf0 	bl	8003c84 <LL_RCC_LSE_IsEnabled>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d114      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040aa:	f7fe f813 	bl	80020d4 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80040b0:	e00b      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b2:	f7fe f80f 	bl	80020d4 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d902      	bls.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	77fb      	strb	r3, [r7, #31]
              break;
 80040c8:	e004      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80040ca:	f7ff fded 	bl	8003ca8 <LL_RCC_LSE_IsReady>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d1ee      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80040d4:	7ffb      	ldrb	r3, [r7, #31]
 80040d6:	77bb      	strb	r3, [r7, #30]
 80040d8:	e001      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040da:	7ffb      	ldrb	r3, [r7, #31]
 80040dc:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d004      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff fe2a 	bl	8003d48 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d004      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff fe35 	bl	8003d74 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0310 	and.w	r3, r3, #16
 8004112:	2b00      	cmp	r3, #0
 8004114:	d004      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff fe5d 	bl	8003dda <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0320 	and.w	r3, r3, #32
 8004128:	2b00      	cmp	r3, #0
 800412a:	d004      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	4618      	mov	r0, r3
 8004132:	f7ff fe52 	bl	8003dda <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0304 	and.w	r3, r3, #4
 800413e:	2b00      	cmp	r3, #0
 8004140:	d004      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	4618      	mov	r0, r3
 8004148:	f7ff fe2a 	bl	8003da0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0308 	and.w	r3, r3, #8
 8004154:	2b00      	cmp	r3, #0
 8004156:	d004      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff fe1f 	bl	8003da0 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416a:	2b00      	cmp	r3, #0
 800416c:	d022      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff fe8d 	bl	8003e92 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004180:	d107      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800418c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004190:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004196:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800419a:	d10b      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3304      	adds	r3, #4
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 f8dd 	bl	8004360 <RCCEx_PLLSAI1_ConfigNQ>
 80041a6:	4603      	mov	r3, r0
 80041a8:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80041aa:	7ffb      	ldrb	r3, [r7, #31]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 80041b0:	7ffb      	ldrb	r3, [r7, #31]
 80041b2:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d02b      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c8:	d008      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041d2:	d003      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d105      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff fe2a 	bl	8003e3a <LL_RCC_SetRNGClockSource>
 80041e6:	e00a      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x240>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	2000      	movs	r0, #0
 80041f4:	f7ff fe21 	bl	8003e3a <LL_RCC_SetRNGClockSource>
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f7ff fe34 	bl	8003e66 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004206:	d107      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004216:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004220:	2b00      	cmp	r3, #0
 8004222:	d022      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff fe3d 	bl	8003ea8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004232:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004236:	d107      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004246:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004250:	d10b      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	3304      	adds	r3, #4
 8004256:	4618      	mov	r0, r3
 8004258:	f000 f8dd 	bl	8004416 <RCCEx_PLLSAI1_ConfigNR>
 800425c:	4603      	mov	r3, r0
 800425e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004260:	7ffb      	ldrb	r3, [r7, #31]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8004266:	7ffb      	ldrb	r3, [r7, #31]
 8004268:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d004      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff fd26 	bl	8003ccc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d009      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff fd45 	bl	8003d20 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff fd2c 	bl	8003cf8 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80042a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3720      	adds	r7, #32
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80042b6:	f7ff fe61 	bl	8003f7c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80042ba:	f7fd ff0b 	bl	80020d4 <HAL_GetTick>
 80042be:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80042c0:	e009      	b.n	80042d6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042c2:	f7fd ff07 	bl	80020d4 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d902      	bls.n	80042d6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	73fb      	strb	r3, [r7, #15]
      break;
 80042d4:	e004      	b.n	80042e0 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80042d6:	f7ff fe60 	bl	8003f9a <LL_RCC_PLLSAI1_IsReady>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1f0      	bne.n	80042c2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d137      	bne.n	8004356 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80042e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	021b      	lsls	r3, r3, #8
 80042f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042fa:	4313      	orrs	r3, r2
 80042fc:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80042fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004310:	4313      	orrs	r3, r2
 8004312:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004314:	f7ff fe23 	bl	8003f5e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004318:	f7fd fedc 	bl	80020d4 <HAL_GetTick>
 800431c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800431e:	e009      	b.n	8004334 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004320:	f7fd fed8 	bl	80020d4 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d902      	bls.n	8004334 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	73fb      	strb	r3, [r7, #15]
        break;
 8004332:	e004      	b.n	800433e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004334:	f7ff fe31 	bl	8003f9a <LL_RCC_PLLSAI1_IsReady>
 8004338:	4603      	mov	r3, r0
 800433a:	2b01      	cmp	r3, #1
 800433c:	d1f0      	bne.n	8004320 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800433e:	7bfb      	ldrb	r3, [r7, #15]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d108      	bne.n	8004356 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004348:	691a      	ldr	r2, [r3, #16]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004352:	4313      	orrs	r3, r2
 8004354:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004356:	7bfb      	ldrb	r3, [r7, #15]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800436c:	f7ff fe06 	bl	8003f7c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004370:	f7fd feb0 	bl	80020d4 <HAL_GetTick>
 8004374:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004376:	e009      	b.n	800438c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004378:	f7fd feac 	bl	80020d4 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d902      	bls.n	800438c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	73fb      	strb	r3, [r7, #15]
      break;
 800438a:	e004      	b.n	8004396 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800438c:	f7ff fe05 	bl	8003f9a <LL_RCC_PLLSAI1_IsReady>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f0      	bne.n	8004378 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004396:	7bfb      	ldrb	r3, [r7, #15]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d137      	bne.n	800440c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800439c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	021b      	lsls	r3, r3, #8
 80043ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043b0:	4313      	orrs	r3, r2
 80043b2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80043b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043c6:	4313      	orrs	r3, r2
 80043c8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80043ca:	f7ff fdc8 	bl	8003f5e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ce:	f7fd fe81 	bl	80020d4 <HAL_GetTick>
 80043d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80043d4:	e009      	b.n	80043ea <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043d6:	f7fd fe7d 	bl	80020d4 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d902      	bls.n	80043ea <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	73fb      	strb	r3, [r7, #15]
        break;
 80043e8:	e004      	b.n	80043f4 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80043ea:	f7ff fdd6 	bl	8003f9a <LL_RCC_PLLSAI1_IsReady>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d1f0      	bne.n	80043d6 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d108      	bne.n	800440c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80043fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004408:	4313      	orrs	r3, r2
 800440a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800440c:	7bfb      	ldrb	r3, [r7, #15]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b084      	sub	sp, #16
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004422:	f7ff fdab 	bl	8003f7c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004426:	f7fd fe55 	bl	80020d4 <HAL_GetTick>
 800442a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800442c:	e009      	b.n	8004442 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800442e:	f7fd fe51 	bl	80020d4 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d902      	bls.n	8004442 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	73fb      	strb	r3, [r7, #15]
      break;
 8004440:	e004      	b.n	800444c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004442:	f7ff fdaa 	bl	8003f9a <LL_RCC_PLLSAI1_IsReady>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1f0      	bne.n	800442e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800444c:	7bfb      	ldrb	r3, [r7, #15]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d137      	bne.n	80044c2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	021b      	lsls	r3, r3, #8
 8004462:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004466:	4313      	orrs	r3, r2
 8004468:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800446a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800447c:	4313      	orrs	r3, r2
 800447e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004480:	f7ff fd6d 	bl	8003f5e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004484:	f7fd fe26 	bl	80020d4 <HAL_GetTick>
 8004488:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800448a:	e009      	b.n	80044a0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800448c:	f7fd fe22 	bl	80020d4 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d902      	bls.n	80044a0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	73fb      	strb	r3, [r7, #15]
        break;
 800449e:	e004      	b.n	80044aa <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80044a0:	f7ff fd7b 	bl	8003f9a <LL_RCC_PLLSAI1_IsReady>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d1f0      	bne.n	800448c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80044aa:	7bfb      	ldrb	r3, [r7, #15]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d108      	bne.n	80044c2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80044b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b4:	691a      	ldr	r2, [r3, #16]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044be:	4313      	orrs	r3, r2
 80044c0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80044c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e090      	b.n	8004600 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d106      	bne.n	80044f8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7fd fc04 	bl	8001d00 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	22ca      	movs	r2, #202	; 0xca
 8004506:	625a      	str	r2, [r3, #36]	; 0x24
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2253      	movs	r2, #83	; 0x53
 800450e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f89f 	bl	8004654 <RTC_EnterInitMode>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d009      	beq.n	8004530 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	22ff      	movs	r2, #255	; 0xff
 8004522:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2204      	movs	r2, #4
 8004528:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e067      	b.n	8004600 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6812      	ldr	r2, [r2, #0]
 800453a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800453e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004542:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6899      	ldr	r1, [r3, #8]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	431a      	orrs	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	68d2      	ldr	r2, [r2, #12]
 800456a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6919      	ldr	r1, [r3, #16]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	041a      	lsls	r2, r3, #16
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68da      	ldr	r2, [r3, #12]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800458e:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0203 	bic.w	r2, r2, #3
 800459e:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69da      	ldr	r2, [r3, #28]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 0320 	and.w	r3, r3, #32
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d113      	bne.n	80045ee <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f81e 	bl	8004608 <HAL_RTC_WaitForSynchro>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00d      	beq.n	80045ee <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	22ff      	movs	r2, #255	; 0xff
 80045d8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2204      	movs	r2, #4
 80045de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e008      	b.n	8004600 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	22ff      	movs	r2, #255	; 0xff
 80045f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 80045fe:	2300      	movs	r3, #0
  }
}
 8004600:	4618      	mov	r0, r3
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800461e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004620:	f7fd fd58 	bl	80020d4 <HAL_GetTick>
 8004624:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004626:	e009      	b.n	800463c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004628:	f7fd fd54 	bl	80020d4 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004636:	d901      	bls.n	800463c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e007      	b.n	800464c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f003 0320 	and.w	r3, r3, #32
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0ee      	beq.n	8004628 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004666:	2b00      	cmp	r3, #0
 8004668:	d119      	bne.n	800469e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f04f 32ff 	mov.w	r2, #4294967295
 8004672:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004674:	f7fd fd2e 	bl	80020d4 <HAL_GetTick>
 8004678:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800467a:	e009      	b.n	8004690 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800467c:	f7fd fd2a 	bl	80020d4 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800468a:	d901      	bls.n	8004690 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e007      	b.n	80046a0 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0ee      	beq.n	800467c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80046be:	2302      	movs	r3, #2
 80046c0:	e0a8      	b.n	8004814 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2202      	movs	r2, #2
 80046ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	22ca      	movs	r2, #202	; 0xca
 80046d8:	625a      	str	r2, [r3, #36]	; 0x24
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2253      	movs	r2, #83	; 0x53
 80046e0:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d020      	beq.n	8004732 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80046f0:	f7fd fcf0 	bl	80020d4 <HAL_GetTick>
 80046f4:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80046f6:	e015      	b.n	8004724 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80046f8:	f7fd fcec 	bl	80020d4 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004706:	d90d      	bls.n	8004724 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	22ff      	movs	r2, #255	; 0xff
 800470e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2203      	movs	r2, #3
 8004714:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e077      	b.n	8004814 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1e2      	bne.n	80046f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004740:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	b2da      	uxtb	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004752:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004754:	f7fd fcbe 	bl	80020d4 <HAL_GetTick>
 8004758:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800475a:	e015      	b.n	8004788 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800475c:	f7fd fcba 	bl	80020d4 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800476a:	d90d      	bls.n	8004788 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	22ff      	movs	r2, #255	; 0xff
 8004772:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2203      	movs	r2, #3
 8004778:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e045      	b.n	8004814 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f003 0304 	and.w	r3, r3, #4
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0e2      	beq.n	800475c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0207 	bic.w	r2, r2, #7
 80047ac:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6899      	ldr	r1, [r3, #8]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80047be:	4b17      	ldr	r3, [pc, #92]	; (800481c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80047c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047c4:	4a15      	ldr	r2, [pc, #84]	; (800481c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80047c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047ca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80047ce:	4b13      	ldr	r3, [pc, #76]	; (800481c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a12      	ldr	r2, [pc, #72]	; (800481c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80047d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047d8:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047e8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047f8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	22ff      	movs	r2, #255	; 0xff
 8004800:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3718      	adds	r7, #24
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	58000800 	.word	0x58000800

08004820 <LL_RCC_GetUSARTClockSource>:
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800482c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4013      	ands	r3, r2
}
 8004834:	4618      	mov	r0, r3
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <LL_RCC_GetLPUARTClockSource>:
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800484c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4013      	ands	r3, r2
}
 8004854:	4618      	mov	r0, r3
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e042      	b.n	80048f8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004878:	2b00      	cmp	r3, #0
 800487a:	d106      	bne.n	800488a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7fd fa6f 	bl	8001d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2224      	movs	r2, #36	; 0x24
 800488e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0201 	bic.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f8c2 	bl	8004a2c <UART_SetConfig>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e022      	b.n	80048f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fade 	bl	8004e7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 fb65 	bl	8004fc0 <UART_CheckIdleState>
 80048f6:	4603      	mov	r3, r0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08a      	sub	sp, #40	; 0x28
 8004904:	af02      	add	r7, sp, #8
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	603b      	str	r3, [r7, #0]
 800490c:	4613      	mov	r3, r2
 800490e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004916:	2b20      	cmp	r3, #32
 8004918:	f040 8083 	bne.w	8004a22 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <HAL_UART_Transmit+0x28>
 8004922:	88fb      	ldrh	r3, [r7, #6]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e07b      	b.n	8004a24 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004932:	2b01      	cmp	r3, #1
 8004934:	d101      	bne.n	800493a <HAL_UART_Transmit+0x3a>
 8004936:	2302      	movs	r3, #2
 8004938:	e074      	b.n	8004a24 <HAL_UART_Transmit+0x124>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2221      	movs	r2, #33	; 0x21
 800494e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004952:	f7fd fbbf 	bl	80020d4 <HAL_GetTick>
 8004956:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	88fa      	ldrh	r2, [r7, #6]
 800495c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	88fa      	ldrh	r2, [r7, #6]
 8004964:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004970:	d108      	bne.n	8004984 <HAL_UART_Transmit+0x84>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d104      	bne.n	8004984 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800497a:	2300      	movs	r3, #0
 800497c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	61bb      	str	r3, [r7, #24]
 8004982:	e003      	b.n	800498c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004988:	2300      	movs	r3, #0
 800498a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004994:	e02c      	b.n	80049f0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2200      	movs	r2, #0
 800499e:	2180      	movs	r1, #128	; 0x80
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 fb58 	bl	8005056 <UART_WaitOnFlagUntilTimeout>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e039      	b.n	8004a24 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10b      	bne.n	80049ce <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	461a      	mov	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	3302      	adds	r3, #2
 80049ca:	61bb      	str	r3, [r7, #24]
 80049cc:	e007      	b.n	80049de <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	781a      	ldrb	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	3301      	adds	r3, #1
 80049dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	3b01      	subs	r3, #1
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1cc      	bne.n	8004996 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	2200      	movs	r2, #0
 8004a04:	2140      	movs	r1, #64	; 0x40
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 fb25 	bl	8005056 <UART_WaitOnFlagUntilTimeout>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e006      	b.n	8004a24 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	e000      	b.n	8004a24 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004a22:	2302      	movs	r3, #2
  }
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3720      	adds	r7, #32
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a30:	b08c      	sub	sp, #48	; 0x30
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	431a      	orrs	r2, r3
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	4baf      	ldr	r3, [pc, #700]	; (8004d18 <UART_SetConfig+0x2ec>)
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	6812      	ldr	r2, [r2, #0]
 8004a62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a64:	430b      	orrs	r3, r1
 8004a66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4aa4      	ldr	r2, [pc, #656]	; (8004d1c <UART_SetConfig+0x2f0>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d004      	beq.n	8004a98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a94:	4313      	orrs	r3, r2
 8004a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004aa2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	6812      	ldr	r2, [r2, #0]
 8004aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004aac:	430b      	orrs	r3, r1
 8004aae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab6:	f023 010f 	bic.w	r1, r3, #15
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a95      	ldr	r2, [pc, #596]	; (8004d20 <UART_SetConfig+0x2f4>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d125      	bne.n	8004b1c <UART_SetConfig+0xf0>
 8004ad0:	2003      	movs	r0, #3
 8004ad2:	f7ff fea5 	bl	8004820 <LL_RCC_GetUSARTClockSource>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b03      	cmp	r3, #3
 8004ada:	d81b      	bhi.n	8004b14 <UART_SetConfig+0xe8>
 8004adc:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <UART_SetConfig+0xb8>)
 8004ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae2:	bf00      	nop
 8004ae4:	08004af5 	.word	0x08004af5
 8004ae8:	08004b05 	.word	0x08004b05
 8004aec:	08004afd 	.word	0x08004afd
 8004af0:	08004b0d 	.word	0x08004b0d
 8004af4:	2301      	movs	r3, #1
 8004af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004afa:	e042      	b.n	8004b82 <UART_SetConfig+0x156>
 8004afc:	2302      	movs	r3, #2
 8004afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b02:	e03e      	b.n	8004b82 <UART_SetConfig+0x156>
 8004b04:	2304      	movs	r3, #4
 8004b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b0a:	e03a      	b.n	8004b82 <UART_SetConfig+0x156>
 8004b0c:	2308      	movs	r3, #8
 8004b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b12:	e036      	b.n	8004b82 <UART_SetConfig+0x156>
 8004b14:	2310      	movs	r3, #16
 8004b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b1a:	e032      	b.n	8004b82 <UART_SetConfig+0x156>
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a7e      	ldr	r2, [pc, #504]	; (8004d1c <UART_SetConfig+0x2f0>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d12a      	bne.n	8004b7c <UART_SetConfig+0x150>
 8004b26:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004b2a:	f7ff fe89 	bl	8004840 <LL_RCC_GetLPUARTClockSource>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b34:	d01a      	beq.n	8004b6c <UART_SetConfig+0x140>
 8004b36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b3a:	d81b      	bhi.n	8004b74 <UART_SetConfig+0x148>
 8004b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b40:	d00c      	beq.n	8004b5c <UART_SetConfig+0x130>
 8004b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b46:	d815      	bhi.n	8004b74 <UART_SetConfig+0x148>
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d003      	beq.n	8004b54 <UART_SetConfig+0x128>
 8004b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b50:	d008      	beq.n	8004b64 <UART_SetConfig+0x138>
 8004b52:	e00f      	b.n	8004b74 <UART_SetConfig+0x148>
 8004b54:	2300      	movs	r3, #0
 8004b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b5a:	e012      	b.n	8004b82 <UART_SetConfig+0x156>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b62:	e00e      	b.n	8004b82 <UART_SetConfig+0x156>
 8004b64:	2304      	movs	r3, #4
 8004b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b6a:	e00a      	b.n	8004b82 <UART_SetConfig+0x156>
 8004b6c:	2308      	movs	r3, #8
 8004b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b72:	e006      	b.n	8004b82 <UART_SetConfig+0x156>
 8004b74:	2310      	movs	r3, #16
 8004b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b7a:	e002      	b.n	8004b82 <UART_SetConfig+0x156>
 8004b7c:	2310      	movs	r3, #16
 8004b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a65      	ldr	r2, [pc, #404]	; (8004d1c <UART_SetConfig+0x2f0>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	f040 8097 	bne.w	8004cbc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d823      	bhi.n	8004bde <UART_SetConfig+0x1b2>
 8004b96:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <UART_SetConfig+0x170>)
 8004b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9c:	08004bc1 	.word	0x08004bc1
 8004ba0:	08004bdf 	.word	0x08004bdf
 8004ba4:	08004bc9 	.word	0x08004bc9
 8004ba8:	08004bdf 	.word	0x08004bdf
 8004bac:	08004bcf 	.word	0x08004bcf
 8004bb0:	08004bdf 	.word	0x08004bdf
 8004bb4:	08004bdf 	.word	0x08004bdf
 8004bb8:	08004bdf 	.word	0x08004bdf
 8004bbc:	08004bd7 	.word	0x08004bd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bc0:	f7fe ff80 	bl	8003ac4 <HAL_RCC_GetPCLK1Freq>
 8004bc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bc6:	e010      	b.n	8004bea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bc8:	4b56      	ldr	r3, [pc, #344]	; (8004d24 <UART_SetConfig+0x2f8>)
 8004bca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bcc:	e00d      	b.n	8004bea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bce:	f7fe fef9 	bl	80039c4 <HAL_RCC_GetSysClockFreq>
 8004bd2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bd4:	e009      	b.n	8004bea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bdc:	e005      	b.n	8004bea <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004be8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 812b 	beq.w	8004e48 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	4a4c      	ldr	r2, [pc, #304]	; (8004d28 <UART_SetConfig+0x2fc>)
 8004bf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c04:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	4413      	add	r3, r2
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d305      	bcc.n	8004c22 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d903      	bls.n	8004c2a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c28:	e10e      	b.n	8004e48 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	60bb      	str	r3, [r7, #8]
 8004c30:	60fa      	str	r2, [r7, #12]
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	4a3c      	ldr	r2, [pc, #240]	; (8004d28 <UART_SetConfig+0x2fc>)
 8004c38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2200      	movs	r2, #0
 8004c40:	603b      	str	r3, [r7, #0]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c4c:	f7fb faf0 	bl	8000230 <__aeabi_uldivmod>
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4610      	mov	r0, r2
 8004c56:	4619      	mov	r1, r3
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	f04f 0300 	mov.w	r3, #0
 8004c60:	020b      	lsls	r3, r1, #8
 8004c62:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c66:	0202      	lsls	r2, r0, #8
 8004c68:	6979      	ldr	r1, [r7, #20]
 8004c6a:	6849      	ldr	r1, [r1, #4]
 8004c6c:	0849      	lsrs	r1, r1, #1
 8004c6e:	2000      	movs	r0, #0
 8004c70:	460c      	mov	r4, r1
 8004c72:	4605      	mov	r5, r0
 8004c74:	eb12 0804 	adds.w	r8, r2, r4
 8004c78:	eb43 0905 	adc.w	r9, r3, r5
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	469a      	mov	sl, r3
 8004c84:	4693      	mov	fp, r2
 8004c86:	4652      	mov	r2, sl
 8004c88:	465b      	mov	r3, fp
 8004c8a:	4640      	mov	r0, r8
 8004c8c:	4649      	mov	r1, r9
 8004c8e:	f7fb facf 	bl	8000230 <__aeabi_uldivmod>
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	4613      	mov	r3, r2
 8004c98:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ca0:	d308      	bcc.n	8004cb4 <UART_SetConfig+0x288>
 8004ca2:	6a3b      	ldr	r3, [r7, #32]
 8004ca4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ca8:	d204      	bcs.n	8004cb4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6a3a      	ldr	r2, [r7, #32]
 8004cb0:	60da      	str	r2, [r3, #12]
 8004cb2:	e0c9      	b.n	8004e48 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004cba:	e0c5      	b.n	8004e48 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc4:	d16e      	bne.n	8004da4 <UART_SetConfig+0x378>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004cc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	2b07      	cmp	r3, #7
 8004cce:	d82d      	bhi.n	8004d2c <UART_SetConfig+0x300>
 8004cd0:	a201      	add	r2, pc, #4	; (adr r2, 8004cd8 <UART_SetConfig+0x2ac>)
 8004cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd6:	bf00      	nop
 8004cd8:	08004cf9 	.word	0x08004cf9
 8004cdc:	08004d01 	.word	0x08004d01
 8004ce0:	08004d2d 	.word	0x08004d2d
 8004ce4:	08004d07 	.word	0x08004d07
 8004ce8:	08004d2d 	.word	0x08004d2d
 8004cec:	08004d2d 	.word	0x08004d2d
 8004cf0:	08004d2d 	.word	0x08004d2d
 8004cf4:	08004d0f 	.word	0x08004d0f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cf8:	f7fe fefa 	bl	8003af0 <HAL_RCC_GetPCLK2Freq>
 8004cfc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cfe:	e01b      	b.n	8004d38 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d00:	4b08      	ldr	r3, [pc, #32]	; (8004d24 <UART_SetConfig+0x2f8>)
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d04:	e018      	b.n	8004d38 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d06:	f7fe fe5d 	bl	80039c4 <HAL_RCC_GetSysClockFreq>
 8004d0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d0c:	e014      	b.n	8004d38 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d14:	e010      	b.n	8004d38 <UART_SetConfig+0x30c>
 8004d16:	bf00      	nop
 8004d18:	cfff69f3 	.word	0xcfff69f3
 8004d1c:	40008000 	.word	0x40008000
 8004d20:	40013800 	.word	0x40013800
 8004d24:	00f42400 	.word	0x00f42400
 8004d28:	08009414 	.word	0x08009414
      default:
        pclk = 0U;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 8084 	beq.w	8004e48 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	4a4b      	ldr	r2, [pc, #300]	; (8004e74 <UART_SetConfig+0x448>)
 8004d46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d52:	005a      	lsls	r2, r3, #1
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	085b      	lsrs	r3, r3, #1
 8004d5a:	441a      	add	r2, r3
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	2b0f      	cmp	r3, #15
 8004d6c:	d916      	bls.n	8004d9c <UART_SetConfig+0x370>
 8004d6e:	6a3b      	ldr	r3, [r7, #32]
 8004d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d74:	d212      	bcs.n	8004d9c <UART_SetConfig+0x370>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	f023 030f 	bic.w	r3, r3, #15
 8004d7e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	085b      	lsrs	r3, r3, #1
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	8bfb      	ldrh	r3, [r7, #30]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	8bfa      	ldrh	r2, [r7, #30]
 8004d98:	60da      	str	r2, [r3, #12]
 8004d9a:	e055      	b.n	8004e48 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004da2:	e051      	b.n	8004e48 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004da4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004da8:	3b01      	subs	r3, #1
 8004daa:	2b07      	cmp	r3, #7
 8004dac:	d821      	bhi.n	8004df2 <UART_SetConfig+0x3c6>
 8004dae:	a201      	add	r2, pc, #4	; (adr r2, 8004db4 <UART_SetConfig+0x388>)
 8004db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db4:	08004dd5 	.word	0x08004dd5
 8004db8:	08004ddd 	.word	0x08004ddd
 8004dbc:	08004df3 	.word	0x08004df3
 8004dc0:	08004de3 	.word	0x08004de3
 8004dc4:	08004df3 	.word	0x08004df3
 8004dc8:	08004df3 	.word	0x08004df3
 8004dcc:	08004df3 	.word	0x08004df3
 8004dd0:	08004deb 	.word	0x08004deb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dd4:	f7fe fe8c 	bl	8003af0 <HAL_RCC_GetPCLK2Freq>
 8004dd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dda:	e010      	b.n	8004dfe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ddc:	4b26      	ldr	r3, [pc, #152]	; (8004e78 <UART_SetConfig+0x44c>)
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004de0:	e00d      	b.n	8004dfe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004de2:	f7fe fdef 	bl	80039c4 <HAL_RCC_GetSysClockFreq>
 8004de6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004de8:	e009      	b.n	8004dfe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004df0:	e005      	b.n	8004dfe <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004dfc:	bf00      	nop
    }

    if (pclk != 0U)
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d021      	beq.n	8004e48 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	4a1a      	ldr	r2, [pc, #104]	; (8004e74 <UART_SetConfig+0x448>)
 8004e0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	085b      	lsrs	r3, r3, #1
 8004e1c:	441a      	add	r2, r3
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	2b0f      	cmp	r3, #15
 8004e2e:	d908      	bls.n	8004e42 <UART_SetConfig+0x416>
 8004e30:	6a3b      	ldr	r3, [r7, #32]
 8004e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e36:	d204      	bcs.n	8004e42 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = usartdiv;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6a3a      	ldr	r2, [r7, #32]
 8004e3e:	60da      	str	r2, [r3, #12]
 8004e40:	e002      	b.n	8004e48 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2200      	movs	r2, #0
 8004e62:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004e64:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3730      	adds	r7, #48	; 0x30
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e72:	bf00      	nop
 8004e74:	08009414 	.word	0x08009414
 8004e78:	00f42400 	.word	0x00f42400

08004e7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00a      	beq.n	8004ec8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f10:	f003 0310 	and.w	r3, r3, #16
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00a      	beq.n	8004f2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f32:	f003 0320 	and.w	r3, r3, #32
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d01a      	beq.n	8004f92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f7a:	d10a      	bne.n	8004f92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	605a      	str	r2, [r3, #4]
  }
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af02      	add	r7, sp, #8
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fd0:	f7fd f880 	bl	80020d4 <HAL_GetTick>
 8004fd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0308 	and.w	r3, r3, #8
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	d10e      	bne.n	8005002 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fe4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f82f 	bl	8005056 <UART_WaitOnFlagUntilTimeout>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e025      	b.n	800504e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b04      	cmp	r3, #4
 800500e:	d10e      	bne.n	800502e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005010:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f819 	bl	8005056 <UART_WaitOnFlagUntilTimeout>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e00f      	b.n	800504e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2220      	movs	r2, #32
 8005032:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2220      	movs	r2, #32
 800503a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b09c      	sub	sp, #112	; 0x70
 800505a:	af00      	add	r7, sp, #0
 800505c:	60f8      	str	r0, [r7, #12]
 800505e:	60b9      	str	r1, [r7, #8]
 8005060:	603b      	str	r3, [r7, #0]
 8005062:	4613      	mov	r3, r2
 8005064:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005066:	e0a9      	b.n	80051bc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005068:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800506a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506e:	f000 80a5 	beq.w	80051bc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005072:	f7fd f82f 	bl	80020d4 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800507e:	429a      	cmp	r2, r3
 8005080:	d302      	bcc.n	8005088 <UART_WaitOnFlagUntilTimeout+0x32>
 8005082:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005084:	2b00      	cmp	r3, #0
 8005086:	d140      	bne.n	800510a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005090:	e853 3f00 	ldrex	r3, [r3]
 8005094:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005098:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800509c:	667b      	str	r3, [r7, #100]	; 0x64
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050a8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80050ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050ae:	e841 2300 	strex	r3, r2, [r1]
 80050b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80050b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1e6      	bne.n	8005088 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3308      	adds	r3, #8
 80050c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c4:	e853 3f00 	ldrex	r3, [r3]
 80050c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050cc:	f023 0301 	bic.w	r3, r3, #1
 80050d0:	663b      	str	r3, [r7, #96]	; 0x60
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3308      	adds	r3, #8
 80050d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050da:	64ba      	str	r2, [r7, #72]	; 0x48
 80050dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80050e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050e2:	e841 2300 	strex	r3, r2, [r1]
 80050e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80050e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1e5      	bne.n	80050ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e069      	b.n	80051de <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0304 	and.w	r3, r3, #4
 8005114:	2b00      	cmp	r3, #0
 8005116:	d051      	beq.n	80051bc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005126:	d149      	bne.n	80051bc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005130:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	e853 3f00 	ldrex	r3, [r3]
 800513e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005146:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	461a      	mov	r2, r3
 800514e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005150:	637b      	str	r3, [r7, #52]	; 0x34
 8005152:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005154:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005158:	e841 2300 	strex	r3, r2, [r1]
 800515c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800515e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1e6      	bne.n	8005132 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3308      	adds	r3, #8
 800516a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	e853 3f00 	ldrex	r3, [r3]
 8005172:	613b      	str	r3, [r7, #16]
   return(result);
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f023 0301 	bic.w	r3, r3, #1
 800517a:	66bb      	str	r3, [r7, #104]	; 0x68
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	3308      	adds	r3, #8
 8005182:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005184:	623a      	str	r2, [r7, #32]
 8005186:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005188:	69f9      	ldr	r1, [r7, #28]
 800518a:	6a3a      	ldr	r2, [r7, #32]
 800518c:	e841 2300 	strex	r3, r2, [r1]
 8005190:	61bb      	str	r3, [r7, #24]
   return(result);
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1e5      	bne.n	8005164 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2220      	movs	r2, #32
 800519c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2220      	movs	r2, #32
 80051ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e010      	b.n	80051de <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	69da      	ldr	r2, [r3, #28]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	4013      	ands	r3, r2
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	bf0c      	ite	eq
 80051cc:	2301      	moveq	r3, #1
 80051ce:	2300      	movne	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	79fb      	ldrb	r3, [r7, #7]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	f43f af46 	beq.w	8005068 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3770      	adds	r7, #112	; 0x70
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b085      	sub	sp, #20
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_UARTEx_DisableFifoMode+0x16>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e027      	b.n	800524c <HAL_UARTEx_DisableFifoMode+0x66>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2224      	movs	r2, #36	; 0x24
 8005208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 0201 	bic.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800522a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2220      	movs	r2, #32
 800523e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005268:	2b01      	cmp	r3, #1
 800526a:	d101      	bne.n	8005270 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800526c:	2302      	movs	r3, #2
 800526e:	e02d      	b.n	80052cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2224      	movs	r2, #36	; 0x24
 800527c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0201 	bic.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f84f 	bl	8005350 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2220      	movs	r2, #32
 80052be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d101      	bne.n	80052ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80052e8:	2302      	movs	r3, #2
 80052ea:	e02d      	b.n	8005348 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2224      	movs	r2, #36	; 0x24
 80052f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 0201 	bic.w	r2, r2, #1
 8005312:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f811 	bl	8005350 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2220      	movs	r2, #32
 800533a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800535c:	2b00      	cmp	r3, #0
 800535e:	d108      	bne.n	8005372 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005370:	e031      	b.n	80053d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005372:	2308      	movs	r3, #8
 8005374:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005376:	2308      	movs	r3, #8
 8005378:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	0e5b      	lsrs	r3, r3, #25
 8005382:	b2db      	uxtb	r3, r3
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	0f5b      	lsrs	r3, r3, #29
 8005392:	b2db      	uxtb	r3, r3
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800539a:	7bbb      	ldrb	r3, [r7, #14]
 800539c:	7b3a      	ldrb	r2, [r7, #12]
 800539e:	4911      	ldr	r1, [pc, #68]	; (80053e4 <UARTEx_SetNbDataToProcess+0x94>)
 80053a0:	5c8a      	ldrb	r2, [r1, r2]
 80053a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80053a6:	7b3a      	ldrb	r2, [r7, #12]
 80053a8:	490f      	ldr	r1, [pc, #60]	; (80053e8 <UARTEx_SetNbDataToProcess+0x98>)
 80053aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
 80053ba:	7b7a      	ldrb	r2, [r7, #13]
 80053bc:	4909      	ldr	r1, [pc, #36]	; (80053e4 <UARTEx_SetNbDataToProcess+0x94>)
 80053be:	5c8a      	ldrb	r2, [r1, r2]
 80053c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80053c4:	7b7a      	ldrb	r2, [r7, #13]
 80053c6:	4908      	ldr	r1, [pc, #32]	; (80053e8 <UARTEx_SetNbDataToProcess+0x98>)
 80053c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80053d6:	bf00      	nop
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	0800942c 	.word	0x0800942c
 80053e8:	08009434 	.word	0x08009434

080053ec <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80053f2:	2300      	movs	r3, #0
 80053f4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80053f6:	f107 0308 	add.w	r3, r7, #8
 80053fa:	2218      	movs	r2, #24
 80053fc:	2100      	movs	r1, #0
 80053fe:	4618      	mov	r0, r3
 8005400:	f001 f8d8 	bl	80065b4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005404:	233f      	movs	r3, #63	; 0x3f
 8005406:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8005408:	2381      	movs	r3, #129	; 0x81
 800540a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800540c:	1dfb      	adds	r3, r7, #7
 800540e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005410:	2301      	movs	r3, #1
 8005412:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005414:	f107 0308 	add.w	r3, r7, #8
 8005418:	2100      	movs	r1, #0
 800541a:	4618      	mov	r0, r3
 800541c:	f001 fb54 	bl	8006ac8 <hci_send_req>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	da01      	bge.n	800542a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005426:	23ff      	movs	r3, #255	; 0xff
 8005428:	e000      	b.n	800542c <aci_gap_set_non_discoverable+0x40>
  return status;
 800542a:	79fb      	ldrb	r3, [r7, #7]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3720      	adds	r7, #32
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8005434:	b5b0      	push	{r4, r5, r7, lr}
 8005436:	b0ce      	sub	sp, #312	; 0x138
 8005438:	af00      	add	r7, sp, #0
 800543a:	4605      	mov	r5, r0
 800543c:	460c      	mov	r4, r1
 800543e:	4610      	mov	r0, r2
 8005440:	4619      	mov	r1, r3
 8005442:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005446:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800544a:	462a      	mov	r2, r5
 800544c:	701a      	strb	r2, [r3, #0]
 800544e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005452:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005456:	4622      	mov	r2, r4
 8005458:	801a      	strh	r2, [r3, #0]
 800545a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800545e:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8005462:	4602      	mov	r2, r0
 8005464:	801a      	strh	r2, [r3, #0]
 8005466:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800546a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800546e:	460a      	mov	r2, r1
 8005470:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8005472:	f107 0310 	add.w	r3, r7, #16
 8005476:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800547a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800547e:	3308      	adds	r3, #8
 8005480:	f107 0210 	add.w	r2, r7, #16
 8005484:	4413      	add	r3, r2
 8005486:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800548a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800548e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8005492:	4413      	add	r3, r2
 8005494:	3309      	adds	r3, #9
 8005496:	f107 0210 	add.w	r2, r7, #16
 800549a:	4413      	add	r3, r2
 800549c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80054a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80054a4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80054a8:	2200      	movs	r2, #0
 80054aa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80054ac:	2300      	movs	r3, #0
 80054ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 80054b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054b6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80054ba:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80054be:	7812      	ldrb	r2, [r2, #0]
 80054c0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80054c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80054c6:	3301      	adds	r3, #1
 80054c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80054cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054d0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80054d4:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80054d8:	8812      	ldrh	r2, [r2, #0]
 80054da:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80054de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80054e2:	3302      	adds	r3, #2
 80054e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80054e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054ec:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80054f0:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80054f4:	8812      	ldrh	r2, [r2, #0]
 80054f6:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80054fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80054fe:	3302      	adds	r3, #2
 8005500:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8005504:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005508:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800550c:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8005510:	7812      	ldrb	r2, [r2, #0]
 8005512:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005514:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005518:	3301      	adds	r3, #1
 800551a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800551e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005522:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8005526:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005528:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800552c:	3301      	adds	r3, #1
 800552e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8005532:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005536:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800553a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800553c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005540:	3301      	adds	r3, #1
 8005542:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8005546:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800554a:	3308      	adds	r3, #8
 800554c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005550:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8005554:	4618      	mov	r0, r3
 8005556:	f001 f81d 	bl	8006594 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800555a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800555e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005562:	4413      	add	r3, r2
 8005564:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8005568:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800556c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005570:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005572:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005576:	3301      	adds	r3, #1
 8005578:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800557c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005580:	3301      	adds	r3, #1
 8005582:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005586:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800558a:	4618      	mov	r0, r3
 800558c:	f001 f802 	bl	8006594 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8005590:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8005594:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005598:	4413      	add	r3, r2
 800559a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800559e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055a2:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80055a6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80055a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80055ac:	3302      	adds	r3, #2
 80055ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 80055b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055b6:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80055ba:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80055bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80055c0:	3302      	adds	r3, #2
 80055c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80055c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80055ca:	2218      	movs	r2, #24
 80055cc:	2100      	movs	r1, #0
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 fff0 	bl	80065b4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80055d4:	233f      	movs	r3, #63	; 0x3f
 80055d6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 80055da:	2383      	movs	r3, #131	; 0x83
 80055dc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80055e0:	f107 0310 	add.w	r3, r7, #16
 80055e4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80055e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80055ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80055f0:	f107 030f 	add.w	r3, r7, #15
 80055f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80055f8:	2301      	movs	r3, #1
 80055fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80055fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005602:	2100      	movs	r1, #0
 8005604:	4618      	mov	r0, r3
 8005606:	f001 fa5f 	bl	8006ac8 <hci_send_req>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	da01      	bge.n	8005614 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8005610:	23ff      	movs	r3, #255	; 0xff
 8005612:	e004      	b.n	800561e <aci_gap_set_discoverable+0x1ea>
  return status;
 8005614:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005618:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800561c:	781b      	ldrb	r3, [r3, #0]
}
 800561e:	4618      	mov	r0, r3
 8005620:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8005624:	46bd      	mov	sp, r7
 8005626:	bdb0      	pop	{r4, r5, r7, pc}

08005628 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b0cc      	sub	sp, #304	; 0x130
 800562c:	af00      	add	r7, sp, #0
 800562e:	4602      	mov	r2, r0
 8005630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005634:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005638:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800563a:	f107 0310 	add.w	r3, r7, #16
 800563e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005646:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800564a:	2200      	movs	r2, #0
 800564c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800564e:	2300      	movs	r3, #0
 8005650:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8005654:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005658:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800565c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005660:	7812      	ldrb	r2, [r2, #0]
 8005662:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005664:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005668:	3301      	adds	r3, #1
 800566a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800566e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005672:	2218      	movs	r2, #24
 8005674:	2100      	movs	r1, #0
 8005676:	4618      	mov	r0, r3
 8005678:	f000 ff9c 	bl	80065b4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800567c:	233f      	movs	r3, #63	; 0x3f
 800567e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8005682:	2385      	movs	r3, #133	; 0x85
 8005684:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005688:	f107 0310 	add.w	r3, r7, #16
 800568c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005690:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005694:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005698:	f107 030f 	add.w	r3, r7, #15
 800569c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80056a0:	2301      	movs	r3, #1
 80056a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80056a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80056aa:	2100      	movs	r1, #0
 80056ac:	4618      	mov	r0, r3
 80056ae:	f001 fa0b 	bl	8006ac8 <hci_send_req>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	da01      	bge.n	80056bc <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80056b8:	23ff      	movs	r3, #255	; 0xff
 80056ba:	e004      	b.n	80056c6 <aci_gap_set_io_capability+0x9e>
  return status;
 80056bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80056c4:	781b      	ldrb	r3, [r3, #0]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80056d0:	b5b0      	push	{r4, r5, r7, lr}
 80056d2:	b0cc      	sub	sp, #304	; 0x130
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	4605      	mov	r5, r0
 80056d8:	460c      	mov	r4, r1
 80056da:	4610      	mov	r0, r2
 80056dc:	4619      	mov	r1, r3
 80056de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80056e6:	462a      	mov	r2, r5
 80056e8:	701a      	strb	r2, [r3, #0]
 80056ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ee:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80056f2:	4622      	mov	r2, r4
 80056f4:	701a      	strb	r2, [r3, #0]
 80056f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056fa:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80056fe:	4602      	mov	r2, r0
 8005700:	701a      	strb	r2, [r3, #0]
 8005702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005706:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800570a:	460a      	mov	r2, r1
 800570c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800570e:	f107 0310 	add.w	r3, r7, #16
 8005712:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800571a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800571e:	2200      	movs	r2, #0
 8005720:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005722:	2300      	movs	r3, #0
 8005724:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8005728:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800572c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005730:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005734:	7812      	ldrb	r2, [r2, #0]
 8005736:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005738:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800573c:	3301      	adds	r3, #1
 800573e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8005742:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005746:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800574a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800574e:	7812      	ldrb	r2, [r2, #0]
 8005750:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005752:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005756:	3301      	adds	r3, #1
 8005758:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800575c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005760:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005764:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8005768:	7812      	ldrb	r2, [r2, #0]
 800576a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800576c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005770:	3301      	adds	r3, #1
 8005772:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8005776:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800577a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800577e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005782:	7812      	ldrb	r2, [r2, #0]
 8005784:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8005786:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800578a:	3301      	adds	r3, #1
 800578c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8005790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005794:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8005798:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800579a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800579e:	3301      	adds	r3, #1
 80057a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80057a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057a8:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80057ac:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80057ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057b2:	3301      	adds	r3, #1
 80057b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80057b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057bc:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80057c0:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80057c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057c6:	3301      	adds	r3, #1
 80057c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80057cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057d0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80057d4:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80057d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057dc:	3304      	adds	r3, #4
 80057de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80057e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e6:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80057ea:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80057ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057f0:	3301      	adds	r3, #1
 80057f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80057f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80057fa:	2218      	movs	r2, #24
 80057fc:	2100      	movs	r1, #0
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 fed8 	bl	80065b4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005804:	233f      	movs	r3, #63	; 0x3f
 8005806:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800580a:	2386      	movs	r3, #134	; 0x86
 800580c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005810:	f107 0310 	add.w	r3, r7, #16
 8005814:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005818:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800581c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005820:	f107 030f 	add.w	r3, r7, #15
 8005824:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005828:	2301      	movs	r3, #1
 800582a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800582e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005832:	2100      	movs	r1, #0
 8005834:	4618      	mov	r0, r3
 8005836:	f001 f947 	bl	8006ac8 <hci_send_req>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	da01      	bge.n	8005844 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8005840:	23ff      	movs	r3, #255	; 0xff
 8005842:	e004      	b.n	800584e <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8005844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005848:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800584c:	781b      	ldrb	r3, [r3, #0]
}
 800584e:	4618      	mov	r0, r3
 8005850:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005854:	46bd      	mov	sp, r7
 8005856:	bdb0      	pop	{r4, r5, r7, pc}

08005858 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b0cc      	sub	sp, #304	; 0x130
 800585c:	af00      	add	r7, sp, #0
 800585e:	4602      	mov	r2, r0
 8005860:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005864:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005868:	6019      	str	r1, [r3, #0]
 800586a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800586e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005872:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8005874:	f107 0310 	add.w	r3, r7, #16
 8005878:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800587c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005880:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005884:	2200      	movs	r2, #0
 8005886:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005888:	2300      	movs	r3, #0
 800588a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800588e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005892:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005896:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800589a:	8812      	ldrh	r2, [r2, #0]
 800589c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800589e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80058a2:	3302      	adds	r3, #2
 80058a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 80058a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058b0:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80058b4:	6812      	ldr	r2, [r2, #0]
 80058b6:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80058ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80058be:	3304      	adds	r3, #4
 80058c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80058c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80058c8:	2218      	movs	r2, #24
 80058ca:	2100      	movs	r1, #0
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 fe71 	bl	80065b4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80058d2:	233f      	movs	r3, #63	; 0x3f
 80058d4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 80058d8:	2388      	movs	r3, #136	; 0x88
 80058da:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80058de:	f107 0310 	add.w	r3, r7, #16
 80058e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80058e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80058ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80058ee:	f107 030f 	add.w	r3, r7, #15
 80058f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80058f6:	2301      	movs	r3, #1
 80058f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80058fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005900:	2100      	movs	r1, #0
 8005902:	4618      	mov	r0, r3
 8005904:	f001 f8e0 	bl	8006ac8 <hci_send_req>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	da01      	bge.n	8005912 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800590e:	23ff      	movs	r3, #255	; 0xff
 8005910:	e004      	b.n	800591c <aci_gap_pass_key_resp+0xc4>
  return status;
 8005912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005916:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800591a:	781b      	ldrb	r3, [r3, #0]
}
 800591c:	4618      	mov	r0, r3
 800591e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8005926:	b590      	push	{r4, r7, lr}
 8005928:	b0cd      	sub	sp, #308	; 0x134
 800592a:	af00      	add	r7, sp, #0
 800592c:	4604      	mov	r4, r0
 800592e:	4608      	mov	r0, r1
 8005930:	4611      	mov	r1, r2
 8005932:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005936:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005940:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005944:	4622      	mov	r2, r4
 8005946:	701a      	strb	r2, [r3, #0]
 8005948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800594c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005950:	4602      	mov	r2, r0
 8005952:	701a      	strb	r2, [r3, #0]
 8005954:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005958:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800595c:	460a      	mov	r2, r1
 800595e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8005960:	f107 0310 	add.w	r3, r7, #16
 8005964:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005968:	f107 0308 	add.w	r3, r7, #8
 800596c:	2207      	movs	r2, #7
 800596e:	2100      	movs	r1, #0
 8005970:	4618      	mov	r0, r3
 8005972:	f000 fe1f 	bl	80065b4 <Osal_MemSet>
  int index_input = 0;
 8005976:	2300      	movs	r3, #0
 8005978:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800597c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005980:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005984:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005988:	7812      	ldrb	r2, [r2, #0]
 800598a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800598c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005990:	3301      	adds	r3, #1
 8005992:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8005996:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800599a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800599e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80059a2:	7812      	ldrb	r2, [r2, #0]
 80059a4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80059a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80059aa:	3301      	adds	r3, #1
 80059ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 80059b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80059b8:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80059bc:	7812      	ldrb	r2, [r2, #0]
 80059be:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80059c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80059c4:	3301      	adds	r3, #1
 80059c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80059ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80059ce:	2218      	movs	r2, #24
 80059d0:	2100      	movs	r1, #0
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fdee 	bl	80065b4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80059d8:	233f      	movs	r3, #63	; 0x3f
 80059da:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80059de:	238a      	movs	r3, #138	; 0x8a
 80059e0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80059e4:	f107 0310 	add.w	r3, r7, #16
 80059e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80059ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80059f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80059f4:	f107 0308 	add.w	r3, r7, #8
 80059f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80059fc:	2307      	movs	r3, #7
 80059fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005a02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a06:	2100      	movs	r1, #0
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f001 f85d 	bl	8006ac8 <hci_send_req>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	da01      	bge.n	8005a18 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8005a14:	23ff      	movs	r3, #255	; 0xff
 8005a16:	e02e      	b.n	8005a76 <aci_gap_init+0x150>
  if ( resp.Status )
 8005a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a1c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d005      	beq.n	8005a32 <aci_gap_init+0x10c>
    return resp.Status;
 8005a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a2a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	e021      	b.n	8005a76 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8005a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a36:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005a3a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8005a4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a50:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005a54:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005a5e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8005a60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a64:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005a68:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8005a72:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd90      	pop	{r4, r7, pc}

08005a80 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b0cc      	sub	sp, #304	; 0x130
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	4602      	mov	r2, r0
 8005a88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a90:	6019      	str	r1, [r3, #0]
 8005a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a96:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005a9a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8005a9c:	f107 0310 	add.w	r3, r7, #16
 8005aa0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aa8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005aac:	2200      	movs	r2, #0
 8005aae:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8005ab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005abe:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005ac2:	7812      	ldrb	r2, [r2, #0]
 8005ac4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005ac6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005aca:	3301      	adds	r3, #1
 8005acc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8005ad0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ad4:	1c58      	adds	r0, r3, #1
 8005ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ada:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005ade:	781a      	ldrb	r2, [r3, #0]
 8005ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ae8:	6819      	ldr	r1, [r3, #0]
 8005aea:	f000 fd53 	bl	8006594 <Osal_MemCpy>
  index_input += AdvDataLen;
 8005aee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005af2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005afc:	4413      	add	r3, r2
 8005afe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005b02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b06:	2218      	movs	r2, #24
 8005b08:	2100      	movs	r1, #0
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 fd52 	bl	80065b4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005b10:	233f      	movs	r3, #63	; 0x3f
 8005b12:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8005b16:	238e      	movs	r3, #142	; 0x8e
 8005b18:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005b1c:	f107 0310 	add.w	r3, r7, #16
 8005b20:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005b24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b28:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005b2c:	f107 030f 	add.w	r3, r7, #15
 8005b30:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005b34:	2301      	movs	r3, #1
 8005b36:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005b3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b3e:	2100      	movs	r1, #0
 8005b40:	4618      	mov	r0, r3
 8005b42:	f000 ffc1 	bl	8006ac8 <hci_send_req>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	da01      	bge.n	8005b50 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8005b4c:	23ff      	movs	r3, #255	; 0xff
 8005b4e:	e004      	b.n	8005b5a <aci_gap_update_adv_data+0xda>
  return status;
 8005b50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b54:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005b58:	781b      	ldrb	r3, [r3, #0]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b088      	sub	sp, #32
 8005b68:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005b6e:	f107 0308 	add.w	r3, r7, #8
 8005b72:	2218      	movs	r2, #24
 8005b74:	2100      	movs	r1, #0
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 fd1c 	bl	80065b4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005b7c:	233f      	movs	r3, #63	; 0x3f
 8005b7e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8005b80:	2392      	movs	r3, #146	; 0x92
 8005b82:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005b84:	1dfb      	adds	r3, r7, #7
 8005b86:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005b8c:	f107 0308 	add.w	r3, r7, #8
 8005b90:	2100      	movs	r1, #0
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 ff98 	bl	8006ac8 <hci_send_req>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	da01      	bge.n	8005ba2 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005b9e:	23ff      	movs	r3, #255	; 0xff
 8005ba0:	e000      	b.n	8005ba4 <aci_gap_configure_whitelist+0x40>
  return status;
 8005ba2:	79fb      	ldrb	r3, [r7, #7]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3720      	adds	r7, #32
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b0cc      	sub	sp, #304	; 0x130
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bb8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005bbc:	801a      	strh	r2, [r3, #0]
 8005bbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc2:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8005bc6:	460a      	mov	r2, r1
 8005bc8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8005bca:	f107 0310 	add.w	r3, r7, #16
 8005bce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005bd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005bda:	2200      	movs	r2, #0
 8005bdc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005bde:	2300      	movs	r3, #0
 8005be0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8005be4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005bec:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005bf0:	8812      	ldrh	r2, [r2, #0]
 8005bf2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005bf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005bf8:	3302      	adds	r3, #2
 8005bfa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8005bfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c06:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8005c0a:	7812      	ldrb	r2, [r2, #0]
 8005c0c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005c0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c12:	3301      	adds	r3, #1
 8005c14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005c18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c1c:	2218      	movs	r2, #24
 8005c1e:	2100      	movs	r1, #0
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 fcc7 	bl	80065b4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005c26:	233f      	movs	r3, #63	; 0x3f
 8005c28:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8005c2c:	23a5      	movs	r3, #165	; 0xa5
 8005c2e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005c32:	f107 0310 	add.w	r3, r7, #16
 8005c36:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005c3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c3e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005c42:	f107 030f 	add.w	r3, r7, #15
 8005c46:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005c50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c54:	2100      	movs	r1, #0
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 ff36 	bl	8006ac8 <hci_send_req>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	da01      	bge.n	8005c66 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8005c62:	23ff      	movs	r3, #255	; 0xff
 8005c64:	e004      	b.n	8005c70 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8005c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c6a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005c6e:	781b      	ldrb	r3, [r3, #0]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b088      	sub	sp, #32
 8005c7e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005c80:	2300      	movs	r3, #0
 8005c82:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005c84:	f107 0308 	add.w	r3, r7, #8
 8005c88:	2218      	movs	r2, #24
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 fc91 	bl	80065b4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005c92:	233f      	movs	r3, #63	; 0x3f
 8005c94:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8005c96:	f240 1301 	movw	r3, #257	; 0x101
 8005c9a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005c9c:	1dfb      	adds	r3, r7, #7
 8005c9e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005ca4:	f107 0308 	add.w	r3, r7, #8
 8005ca8:	2100      	movs	r1, #0
 8005caa:	4618      	mov	r0, r3
 8005cac:	f000 ff0c 	bl	8006ac8 <hci_send_req>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	da01      	bge.n	8005cba <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8005cb6:	23ff      	movs	r3, #255	; 0xff
 8005cb8:	e000      	b.n	8005cbc <aci_gatt_init+0x42>
  return status;
 8005cba:	79fb      	ldrb	r3, [r7, #7]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3720      	adds	r7, #32
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8005cc4:	b590      	push	{r4, r7, lr}
 8005cc6:	b0cf      	sub	sp, #316	; 0x13c
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	4604      	mov	r4, r0
 8005ccc:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8005cd0:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8005cd4:	6001      	str	r1, [r0, #0]
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	4619      	mov	r1, r3
 8005cda:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005cde:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005ce2:	4622      	mov	r2, r4
 8005ce4:	701a      	strb	r2, [r3, #0]
 8005ce6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005cea:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005cee:	4602      	mov	r2, r0
 8005cf0:	701a      	strb	r2, [r3, #0]
 8005cf2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005cf6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005cfa:	460a      	mov	r2, r1
 8005cfc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8005cfe:	f107 0310 	add.w	r3, r7, #16
 8005d02:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8005d06:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d0a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d00a      	beq.n	8005d2a <aci_gatt_add_service+0x66>
 8005d14:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d18:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d101      	bne.n	8005d26 <aci_gatt_add_service+0x62>
 8005d22:	2311      	movs	r3, #17
 8005d24:	e002      	b.n	8005d2c <aci_gatt_add_service+0x68>
 8005d26:	2301      	movs	r3, #1
 8005d28:	e000      	b.n	8005d2c <aci_gatt_add_service+0x68>
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	f107 0210 	add.w	r2, r7, #16
 8005d30:	4413      	add	r3, r2
 8005d32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005d36:	f107 030c 	add.w	r3, r7, #12
 8005d3a:	2203      	movs	r2, #3
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 fc38 	bl	80065b4 <Osal_MemSet>
  int index_input = 0;
 8005d44:	2300      	movs	r3, #0
 8005d46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8005d4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005d4e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005d52:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8005d56:	7812      	ldrb	r2, [r2, #0]
 8005d58:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005d5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005d5e:	3301      	adds	r3, #1
 8005d60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8005d64:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d68:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d002      	beq.n	8005d78 <aci_gatt_add_service+0xb4>
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d004      	beq.n	8005d80 <aci_gatt_add_service+0xbc>
 8005d76:	e007      	b.n	8005d88 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8005d78:	2302      	movs	r3, #2
 8005d7a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8005d7e:	e005      	b.n	8005d8c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8005d80:	2310      	movs	r3, #16
 8005d82:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8005d86:	e001      	b.n	8005d8c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8005d88:	2397      	movs	r3, #151	; 0x97
 8005d8a:	e06c      	b.n	8005e66 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8005d8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005d90:	1c58      	adds	r0, r3, #1
 8005d92:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8005d96:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d9a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005d9e:	6819      	ldr	r1, [r3, #0]
 8005da0:	f000 fbf8 	bl	8006594 <Osal_MemCpy>
    index_input += size;
 8005da4:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8005da8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005dac:	4413      	add	r3, r2
 8005dae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8005db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005db6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005dba:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8005dbe:	7812      	ldrb	r2, [r2, #0]
 8005dc0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005dc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8005dcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dd0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005dd4:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8005dd8:	7812      	ldrb	r2, [r2, #0]
 8005dda:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8005ddc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005de0:	3301      	adds	r3, #1
 8005de2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005de6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005dea:	2218      	movs	r2, #24
 8005dec:	2100      	movs	r1, #0
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 fbe0 	bl	80065b4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005df4:	233f      	movs	r3, #63	; 0x3f
 8005df6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8005dfa:	f44f 7381 	mov.w	r3, #258	; 0x102
 8005dfe:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005e02:	f107 0310 	add.w	r3, r7, #16
 8005e06:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005e0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e0e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8005e12:	f107 030c 	add.w	r3, r7, #12
 8005e16:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005e20:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e24:	2100      	movs	r1, #0
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 fe4e 	bl	8006ac8 <hci_send_req>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	da01      	bge.n	8005e36 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8005e32:	23ff      	movs	r3, #255	; 0xff
 8005e34:	e017      	b.n	8005e66 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8005e36:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d005      	beq.n	8005e50 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8005e44:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	e00a      	b.n	8005e66 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8005e50:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e58:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8005e62:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd90      	pop	{r4, r7, pc}

08005e70 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8005e70:	b590      	push	{r4, r7, lr}
 8005e72:	b0d1      	sub	sp, #324	; 0x144
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	4604      	mov	r4, r0
 8005e78:	4608      	mov	r0, r1
 8005e7a:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8005e7e:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8005e82:	600a      	str	r2, [r1, #0]
 8005e84:	4619      	mov	r1, r3
 8005e86:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005e8a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005e8e:	4622      	mov	r2, r4
 8005e90:	801a      	strh	r2, [r3, #0]
 8005e92:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005e96:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	701a      	strb	r2, [r3, #0]
 8005e9e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005ea2:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8005ea6:	460a      	mov	r2, r1
 8005ea8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8005eaa:	f107 0318 	add.w	r3, r7, #24
 8005eae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8005eb2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005eb6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d00a      	beq.n	8005ed6 <aci_gatt_add_char+0x66>
 8005ec0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005ec4:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d101      	bne.n	8005ed2 <aci_gatt_add_char+0x62>
 8005ece:	2313      	movs	r3, #19
 8005ed0:	e002      	b.n	8005ed8 <aci_gatt_add_char+0x68>
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e000      	b.n	8005ed8 <aci_gatt_add_char+0x68>
 8005ed6:	2305      	movs	r3, #5
 8005ed8:	f107 0218 	add.w	r2, r7, #24
 8005edc:	4413      	add	r3, r2
 8005ede:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005ee2:	f107 0314 	add.w	r3, r7, #20
 8005ee6:	2203      	movs	r2, #3
 8005ee8:	2100      	movs	r1, #0
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 fb62 	bl	80065b4 <Osal_MemSet>
  int index_input = 0;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8005ef6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005efa:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005efe:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8005f02:	8812      	ldrh	r2, [r2, #0]
 8005f04:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005f06:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005f0a:	3302      	adds	r3, #2
 8005f0c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8005f10:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005f14:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005f18:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8005f1c:	7812      	ldrb	r2, [r2, #0]
 8005f1e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005f20:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005f24:	3301      	adds	r3, #1
 8005f26:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8005f2a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005f2e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d002      	beq.n	8005f3e <aci_gatt_add_char+0xce>
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d004      	beq.n	8005f46 <aci_gatt_add_char+0xd6>
 8005f3c:	e007      	b.n	8005f4e <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8005f3e:	2302      	movs	r3, #2
 8005f40:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8005f44:	e005      	b.n	8005f52 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8005f46:	2310      	movs	r3, #16
 8005f48:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8005f4c:	e001      	b.n	8005f52 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8005f4e:	2397      	movs	r3, #151	; 0x97
 8005f50:	e091      	b.n	8006076 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8005f52:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005f56:	1cd8      	adds	r0, r3, #3
 8005f58:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8005f5c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005f60:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005f64:	6819      	ldr	r1, [r3, #0]
 8005f66:	f000 fb15 	bl	8006594 <Osal_MemCpy>
    index_input += size;
 8005f6a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8005f6e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005f72:	4413      	add	r3, r2
 8005f74:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8005f78:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f7c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005f80:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8005f84:	8812      	ldrh	r2, [r2, #0]
 8005f86:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005f88:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005f8c:	3302      	adds	r3, #2
 8005f8e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8005f92:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f96:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8005f9a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8005f9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8005fa6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005faa:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005fae:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8005fb0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8005fba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fbe:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8005fc2:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8005fc4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005fc8:	3301      	adds	r3, #1
 8005fca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8005fce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fd2:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8005fd6:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8005fd8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005fdc:	3301      	adds	r3, #1
 8005fde:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8005fe2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fe6:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8005fea:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8005fec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005ff6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005ffa:	2218      	movs	r2, #24
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 fad8 	bl	80065b4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006004:	233f      	movs	r3, #63	; 0x3f
 8006006:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800600a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800600e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8006012:	f107 0318 	add.w	r3, r7, #24
 8006016:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800601a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800601e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8006022:	f107 0314 	add.w	r3, r7, #20
 8006026:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800602a:	2303      	movs	r3, #3
 800602c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006030:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006034:	2100      	movs	r1, #0
 8006036:	4618      	mov	r0, r3
 8006038:	f000 fd46 	bl	8006ac8 <hci_send_req>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	da01      	bge.n	8006046 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8006042:	23ff      	movs	r3, #255	; 0xff
 8006044:	e017      	b.n	8006076 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8006046:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800604a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d005      	beq.n	8006060 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8006054:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006058:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	e00a      	b.n	8006076 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8006060:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006064:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006068:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800606c:	b29a      	uxth	r2, r3
 800606e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006072:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800607c:	46bd      	mov	sp, r7
 800607e:	bd90      	pop	{r4, r7, pc}

08006080 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8006080:	b5b0      	push	{r4, r5, r7, lr}
 8006082:	b0cc      	sub	sp, #304	; 0x130
 8006084:	af00      	add	r7, sp, #0
 8006086:	4605      	mov	r5, r0
 8006088:	460c      	mov	r4, r1
 800608a:	4610      	mov	r0, r2
 800608c:	4619      	mov	r1, r3
 800608e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006092:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006096:	462a      	mov	r2, r5
 8006098:	801a      	strh	r2, [r3, #0]
 800609a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800609e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060a2:	4622      	mov	r2, r4
 80060a4:	801a      	strh	r2, [r3, #0]
 80060a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060aa:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80060ae:	4602      	mov	r2, r0
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80060ba:	460a      	mov	r2, r1
 80060bc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80060be:	f107 0310 	add.w	r3, r7, #16
 80060c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80060c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ca:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80060ce:	2200      	movs	r2, #0
 80060d0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80060d2:	2300      	movs	r3, #0
 80060d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80060d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80060e0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80060e4:	8812      	ldrh	r2, [r2, #0]
 80060e6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80060e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80060ec:	3302      	adds	r3, #2
 80060ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80060f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80060fa:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80060fe:	8812      	ldrh	r2, [r2, #0]
 8006100:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8006102:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006106:	3302      	adds	r3, #2
 8006108:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800610c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006110:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006114:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8006118:	7812      	ldrb	r2, [r2, #0]
 800611a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800611c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006120:	3301      	adds	r3, #1
 8006122:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8006126:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800612a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800612e:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8006132:	7812      	ldrb	r2, [r2, #0]
 8006134:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006136:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800613a:	3301      	adds	r3, #1
 800613c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8006140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006144:	1d98      	adds	r0, r3, #6
 8006146:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800614a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	461a      	mov	r2, r3
 8006152:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006156:	f000 fa1d 	bl	8006594 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800615a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800615e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006168:	4413      	add	r3, r2
 800616a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800616e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006172:	2218      	movs	r2, #24
 8006174:	2100      	movs	r1, #0
 8006176:	4618      	mov	r0, r3
 8006178:	f000 fa1c 	bl	80065b4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800617c:	233f      	movs	r3, #63	; 0x3f
 800617e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8006182:	f44f 7383 	mov.w	r3, #262	; 0x106
 8006186:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800618a:	f107 0310 	add.w	r3, r7, #16
 800618e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006192:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006196:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800619a:	f107 030f 	add.w	r3, r7, #15
 800619e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80061a2:	2301      	movs	r3, #1
 80061a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80061a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80061ac:	2100      	movs	r1, #0
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 fc8a 	bl	8006ac8 <hci_send_req>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	da01      	bge.n	80061be <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80061ba:	23ff      	movs	r3, #255	; 0xff
 80061bc:	e004      	b.n	80061c8 <aci_gatt_update_char_value+0x148>
  return status;
 80061be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061c2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80061c6:	781b      	ldrb	r3, [r3, #0]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bdb0      	pop	{r4, r5, r7, pc}

080061d2 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b0cc      	sub	sp, #304	; 0x130
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061e0:	601a      	str	r2, [r3, #0]
 80061e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061e6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80061ea:	4602      	mov	r2, r0
 80061ec:	701a      	strb	r2, [r3, #0]
 80061ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80061f6:	460a      	mov	r2, r1
 80061f8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80061fa:	f107 0310 	add.w	r3, r7, #16
 80061fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006206:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800620a:	2200      	movs	r2, #0
 800620c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800620e:	2300      	movs	r3, #0
 8006210:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8006214:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006218:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800621c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006220:	7812      	ldrb	r2, [r2, #0]
 8006222:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006224:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006228:	3301      	adds	r3, #1
 800622a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800622e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006232:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006236:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800623a:	7812      	ldrb	r2, [r2, #0]
 800623c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800623e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006242:	3301      	adds	r3, #1
 8006244:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8006248:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800624c:	1c98      	adds	r0, r3, #2
 800624e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006252:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006256:	781a      	ldrb	r2, [r3, #0]
 8006258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800625c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006260:	6819      	ldr	r1, [r3, #0]
 8006262:	f000 f997 	bl	8006594 <Osal_MemCpy>
  index_input += Length;
 8006266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800626a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006274:	4413      	add	r3, r2
 8006276:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800627a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800627e:	2218      	movs	r2, #24
 8006280:	2100      	movs	r1, #0
 8006282:	4618      	mov	r0, r3
 8006284:	f000 f996 	bl	80065b4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006288:	233f      	movs	r3, #63	; 0x3f
 800628a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800628e:	230c      	movs	r3, #12
 8006290:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006294:	f107 0310 	add.w	r3, r7, #16
 8006298:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800629c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80062a4:	f107 030f 	add.w	r3, r7, #15
 80062a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80062ac:	2301      	movs	r3, #1
 80062ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80062b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062b6:	2100      	movs	r1, #0
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 fc05 	bl	8006ac8 <hci_send_req>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	da01      	bge.n	80062c8 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80062c4:	23ff      	movs	r3, #255	; 0xff
 80062c6:	e004      	b.n	80062d2 <aci_hal_write_config_data+0x100>
  return status;
 80062c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062cc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80062d0:	781b      	ldrb	r3, [r3, #0]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b0cc      	sub	sp, #304	; 0x130
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	4602      	mov	r2, r0
 80062e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80062ec:	701a      	strb	r2, [r3, #0]
 80062ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062f2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80062f6:	460a      	mov	r2, r1
 80062f8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80062fa:	f107 0310 	add.w	r3, r7, #16
 80062fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006306:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800630a:	2200      	movs	r2, #0
 800630c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800630e:	2300      	movs	r3, #0
 8006310:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8006314:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006318:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800631c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006320:	7812      	ldrb	r2, [r2, #0]
 8006322:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006324:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006328:	3301      	adds	r3, #1
 800632a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800632e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006332:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006336:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800633a:	7812      	ldrb	r2, [r2, #0]
 800633c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800633e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006342:	3301      	adds	r3, #1
 8006344:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006348:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800634c:	2218      	movs	r2, #24
 800634e:	2100      	movs	r1, #0
 8006350:	4618      	mov	r0, r3
 8006352:	f000 f92f 	bl	80065b4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006356:	233f      	movs	r3, #63	; 0x3f
 8006358:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800635c:	230f      	movs	r3, #15
 800635e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006362:	f107 0310 	add.w	r3, r7, #16
 8006366:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800636a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800636e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006372:	f107 030f 	add.w	r3, r7, #15
 8006376:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800637a:	2301      	movs	r3, #1
 800637c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006380:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006384:	2100      	movs	r1, #0
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fb9e 	bl	8006ac8 <hci_send_req>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	da01      	bge.n	8006396 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8006392:	23ff      	movs	r3, #255	; 0xff
 8006394:	e004      	b.n	80063a0 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8006396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800639a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800639e:	781b      	ldrb	r3, [r3, #0]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b0cc      	sub	sp, #304	; 0x130
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	4602      	mov	r2, r0
 80063b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80063ba:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80063bc:	f107 0310 	add.w	r3, r7, #16
 80063c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80063c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80063cc:	2200      	movs	r2, #0
 80063ce:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80063d0:	2300      	movs	r3, #0
 80063d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80063d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80063de:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80063e2:	8812      	ldrh	r2, [r2, #0]
 80063e4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80063e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063ea:	3302      	adds	r3, #2
 80063ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80063f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063f4:	2218      	movs	r2, #24
 80063f6:	2100      	movs	r1, #0
 80063f8:	4618      	mov	r0, r3
 80063fa:	f000 f8db 	bl	80065b4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80063fe:	233f      	movs	r3, #63	; 0x3f
 8006400:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8006404:	2318      	movs	r3, #24
 8006406:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800640a:	f107 0310 	add.w	r3, r7, #16
 800640e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006412:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006416:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800641a:	f107 030f 	add.w	r3, r7, #15
 800641e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006422:	2301      	movs	r3, #1
 8006424:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006428:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800642c:	2100      	movs	r1, #0
 800642e:	4618      	mov	r0, r3
 8006430:	f000 fb4a 	bl	8006ac8 <hci_send_req>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	da01      	bge.n	800643e <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800643a:	23ff      	movs	r3, #255	; 0xff
 800643c:	e004      	b.n	8006448 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800643e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006442:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006446:	781b      	ldrb	r3, [r3, #0]
}
 8006448:	4618      	mov	r0, r3
 800644a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b088      	sub	sp, #32
 8006456:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006458:	2300      	movs	r3, #0
 800645a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800645c:	f107 0308 	add.w	r3, r7, #8
 8006460:	2218      	movs	r2, #24
 8006462:	2100      	movs	r1, #0
 8006464:	4618      	mov	r0, r3
 8006466:	f000 f8a5 	bl	80065b4 <Osal_MemSet>
  rq.ogf = 0x03;
 800646a:	2303      	movs	r3, #3
 800646c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800646e:	2303      	movs	r3, #3
 8006470:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006472:	1dfb      	adds	r3, r7, #7
 8006474:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006476:	2301      	movs	r3, #1
 8006478:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800647a:	f107 0308 	add.w	r3, r7, #8
 800647e:	2100      	movs	r1, #0
 8006480:	4618      	mov	r0, r3
 8006482:	f000 fb21 	bl	8006ac8 <hci_send_req>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	da01      	bge.n	8006490 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800648c:	23ff      	movs	r3, #255	; 0xff
 800648e:	e000      	b.n	8006492 <hci_reset+0x40>
  return status;
 8006490:	79fb      	ldrb	r3, [r7, #7]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3720      	adds	r7, #32
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800649a:	b590      	push	{r4, r7, lr}
 800649c:	b0cd      	sub	sp, #308	; 0x134
 800649e:	af00      	add	r7, sp, #0
 80064a0:	4604      	mov	r4, r0
 80064a2:	4608      	mov	r0, r1
 80064a4:	4611      	mov	r1, r2
 80064a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064aa:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80064ae:	4622      	mov	r2, r4
 80064b0:	701a      	strb	r2, [r3, #0]
 80064b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80064ba:	4602      	mov	r2, r0
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c2:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80064c6:	460a      	mov	r2, r1
 80064c8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80064ca:	f107 0310 	add.w	r3, r7, #16
 80064ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80064d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80064da:	2200      	movs	r2, #0
 80064dc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80064de:	2300      	movs	r3, #0
 80064e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80064e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064ec:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80064f0:	7812      	ldrb	r2, [r2, #0]
 80064f2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80064f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064f8:	3301      	adds	r3, #1
 80064fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 80064fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006502:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006506:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800650a:	7812      	ldrb	r2, [r2, #0]
 800650c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800650e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006512:	3301      	adds	r3, #1
 8006514:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8006518:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800651c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006520:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006524:	7812      	ldrb	r2, [r2, #0]
 8006526:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006528:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800652c:	3301      	adds	r3, #1
 800652e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006532:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006536:	2218      	movs	r2, #24
 8006538:	2100      	movs	r1, #0
 800653a:	4618      	mov	r0, r3
 800653c:	f000 f83a 	bl	80065b4 <Osal_MemSet>
  rq.ogf = 0x08;
 8006540:	2308      	movs	r3, #8
 8006542:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8006546:	2331      	movs	r3, #49	; 0x31
 8006548:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800654c:	f107 0310 	add.w	r3, r7, #16
 8006550:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006554:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006558:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800655c:	f107 030f 	add.w	r3, r7, #15
 8006560:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006564:	2301      	movs	r3, #1
 8006566:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800656a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800656e:	2100      	movs	r1, #0
 8006570:	4618      	mov	r0, r3
 8006572:	f000 faa9 	bl	8006ac8 <hci_send_req>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	da01      	bge.n	8006580 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800657c:	23ff      	movs	r3, #255	; 0xff
 800657e:	e004      	b.n	800658a <hci_le_set_default_phy+0xf0>
  return status;
 8006580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006584:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006588:	781b      	ldrb	r3, [r3, #0]
}
 800658a:	4618      	mov	r0, r3
 800658c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8006590:	46bd      	mov	sp, r7
 8006592:	bd90      	pop	{r4, r7, pc}

08006594 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	68b9      	ldr	r1, [r7, #8]
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f002 f97d 	bl	80088a4 <memcpy>
 80065aa:	4603      	mov	r3, r0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	68b9      	ldr	r1, [r7, #8]
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f002 f97b 	bl	80088c0 <memset>
 80065ca:	4603      	mov	r3, r0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80065d4:	b480      	push	{r7}
 80065d6:	af00      	add	r7, sp, #0
  return;
 80065d8:	bf00      	nop
}
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80065e2:	b480      	push	{r7}
 80065e4:	af00      	add	r7, sp, #0
  return;
 80065e6:	bf00      	nop
}
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80065f0:	b480      	push	{r7}
 80065f2:	af00      	add	r7, sp, #0
  return;
 80065f4:	bf00      	nop
}
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80065fe:	b480      	push	{r7}
 8006600:	af00      	add	r7, sp, #0
  return;
 8006602:	bf00      	nop
}
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800660c:	b480      	push	{r7}
 800660e:	af00      	add	r7, sp, #0
  return;
 8006610:	bf00      	nop
}
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800661a:	b480      	push	{r7}
 800661c:	af00      	add	r7, sp, #0
  return;
 800661e:	bf00      	nop
}
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8006628:	b480      	push	{r7}
 800662a:	af00      	add	r7, sp, #0
  return;
 800662c:	bf00      	nop
}
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr

08006636 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8006636:	b480      	push	{r7}
 8006638:	af00      	add	r7, sp, #0
  return;
 800663a:	bf00      	nop
}
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8006644:	b480      	push	{r7}
 8006646:	af00      	add	r7, sp, #0
  return;
 8006648:	bf00      	nop
}
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8006652:	b480      	push	{r7}
 8006654:	af00      	add	r7, sp, #0
  return;
 8006656:	bf00      	nop
}
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0
  return;
 8006664:	bf00      	nop
}
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800666e:	b480      	push	{r7}
 8006670:	af00      	add	r7, sp, #0
  return;
 8006672:	bf00      	nop
}
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0
  return;
 8006680:	bf00      	nop
}
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800668a:	b480      	push	{r7}
 800668c:	af00      	add	r7, sp, #0
  return;
 800668e:	bf00      	nop
}
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8006698:	b480      	push	{r7}
 800669a:	af00      	add	r7, sp, #0
  return;
 800669c:	bf00      	nop
}
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80066a6:	b480      	push	{r7}
 80066a8:	af00      	add	r7, sp, #0
  return;
 80066aa:	bf00      	nop
}
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80066b4:	b480      	push	{r7}
 80066b6:	af00      	add	r7, sp, #0
  return;
 80066b8:	bf00      	nop
}
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
	...

080066c4 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80066c8:	4b04      	ldr	r3, [pc, #16]	; (80066dc <SVCCTL_Init+0x18>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80066ce:	4b04      	ldr	r3, [pc, #16]	; (80066e0 <SVCCTL_Init+0x1c>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80066d4:	f000 f806 	bl	80066e4 <SVCCTL_SvcInit>

  return;
 80066d8:	bf00      	nop
}
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	20000120 	.word	0x20000120
 80066e0:	20000140 	.word	0x20000140

080066e4 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	af00      	add	r7, sp, #0
  BAS_Init();
 80066e8:	f7ff ff74 	bl	80065d4 <BAS_Init>

  BLS_Init();
 80066ec:	f7ff ff79 	bl	80065e2 <BLS_Init>

  CRS_STM_Init();
 80066f0:	f7ff ff7e 	bl	80065f0 <CRS_STM_Init>

  DIS_Init();
 80066f4:	f7ff ff83 	bl	80065fe <DIS_Init>

  EDS_STM_Init();
 80066f8:	f7ff ff88 	bl	800660c <EDS_STM_Init>

  HIDS_Init();
 80066fc:	f7ff ff8d 	bl	800661a <HIDS_Init>

  HRS_Init();
 8006700:	f7ff ff92 	bl	8006628 <HRS_Init>

  HTS_Init();
 8006704:	f7ff ff97 	bl	8006636 <HTS_Init>

  IAS_Init();
 8006708:	f7ff ff9c 	bl	8006644 <IAS_Init>

  LLS_Init();
 800670c:	f7ff ffa1 	bl	8006652 <LLS_Init>

  TPS_Init();
 8006710:	f7ff ffa6 	bl	8006660 <TPS_Init>

  MOTENV_STM_Init();
 8006714:	f7ff ffab 	bl	800666e <MOTENV_STM_Init>

  P2PS_STM_Init();
 8006718:	f7ff ffb0 	bl	800667c <P2PS_STM_Init>

  ZDD_STM_Init();
 800671c:	f7ff ffb5 	bl	800668a <ZDD_STM_Init>

  OTAS_STM_Init();
 8006720:	f7ff ffba 	bl	8006698 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8006724:	f7ff ffc6 	bl	80066b4 <BVOPUS_STM_Init>

  MESH_Init();
 8006728:	f7ff ffbd 	bl	80066a6 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800672c:	f001 fafe 	bl	8007d2c <SVCCTL_InitCustomSvc>
  
  return;
 8006730:	bf00      	nop
}
 8006732:	bd80      	pop	{r7, pc}

08006734 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800673c:	4b09      	ldr	r3, [pc, #36]	; (8006764 <SVCCTL_RegisterSvcHandler+0x30>)
 800673e:	7f1b      	ldrb	r3, [r3, #28]
 8006740:	4619      	mov	r1, r3
 8006742:	4a08      	ldr	r2, [pc, #32]	; (8006764 <SVCCTL_RegisterSvcHandler+0x30>)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800674a:	4b06      	ldr	r3, [pc, #24]	; (8006764 <SVCCTL_RegisterSvcHandler+0x30>)
 800674c:	7f1b      	ldrb	r3, [r3, #28]
 800674e:	3301      	adds	r3, #1
 8006750:	b2da      	uxtb	r2, r3
 8006752:	4b04      	ldr	r3, [pc, #16]	; (8006764 <SVCCTL_RegisterSvcHandler+0x30>)
 8006754:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8006756:	bf00      	nop
}
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	20000120 	.word	0x20000120

08006768 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	3301      	adds	r3, #1
 8006774:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8006776:	2300      	movs	r3, #0
 8006778:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	2bff      	cmp	r3, #255	; 0xff
 8006780:	d125      	bne.n	80067ce <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	3302      	adds	r3, #2
 8006786:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	b29b      	uxth	r3, r3
 800678e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006792:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006796:	d118      	bne.n	80067ca <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006798:	2300      	movs	r3, #0
 800679a:	757b      	strb	r3, [r7, #21]
 800679c:	e00d      	b.n	80067ba <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800679e:	7d7b      	ldrb	r3, [r7, #21]
 80067a0:	4a1a      	ldr	r2, [pc, #104]	; (800680c <SVCCTL_UserEvtRx+0xa4>)
 80067a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	4798      	blx	r3
 80067aa:	4603      	mov	r3, r0
 80067ac:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80067ae:	7dfb      	ldrb	r3, [r7, #23]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d108      	bne.n	80067c6 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80067b4:	7d7b      	ldrb	r3, [r7, #21]
 80067b6:	3301      	adds	r3, #1
 80067b8:	757b      	strb	r3, [r7, #21]
 80067ba:	4b14      	ldr	r3, [pc, #80]	; (800680c <SVCCTL_UserEvtRx+0xa4>)
 80067bc:	7f1b      	ldrb	r3, [r3, #28]
 80067be:	7d7a      	ldrb	r2, [r7, #21]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d3ec      	bcc.n	800679e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80067c4:	e002      	b.n	80067cc <SVCCTL_UserEvtRx+0x64>
              break;
 80067c6:	bf00      	nop
          break;
 80067c8:	e000      	b.n	80067cc <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80067ca:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80067cc:	e000      	b.n	80067d0 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80067ce:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 80067d0:	7dfb      	ldrb	r3, [r7, #23]
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d00f      	beq.n	80067f6 <SVCCTL_UserEvtRx+0x8e>
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	dc10      	bgt.n	80067fc <SVCCTL_UserEvtRx+0x94>
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d002      	beq.n	80067e4 <SVCCTL_UserEvtRx+0x7c>
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d006      	beq.n	80067f0 <SVCCTL_UserEvtRx+0x88>
 80067e2:	e00b      	b.n	80067fc <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 ff79 	bl	80076dc <SVCCTL_App_Notification>
 80067ea:	4603      	mov	r3, r0
 80067ec:	75bb      	strb	r3, [r7, #22]
      break;
 80067ee:	e008      	b.n	8006802 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80067f0:	2301      	movs	r3, #1
 80067f2:	75bb      	strb	r3, [r7, #22]
      break;
 80067f4:	e005      	b.n	8006802 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80067f6:	2300      	movs	r3, #0
 80067f8:	75bb      	strb	r3, [r7, #22]
      break;
 80067fa:	e002      	b.n	8006802 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80067fc:	2301      	movs	r3, #1
 80067fe:	75bb      	strb	r3, [r7, #22]
      break;
 8006800:	bf00      	nop
  }

  return (return_status);
 8006802:	7dbb      	ldrb	r3, [r7, #22]
}
 8006804:	4618      	mov	r0, r3
 8006806:	3718      	adds	r7, #24
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	20000120 	.word	0x20000120

08006810 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b088      	sub	sp, #32
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006818:	f107 030c 	add.w	r3, r7, #12
 800681c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	2125      	movs	r1, #37	; 0x25
 8006828:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800682c:	f000 fae2 	bl	8006df4 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	330b      	adds	r3, #11
 8006834:	78db      	ldrb	r3, [r3, #3]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3720      	adds	r7, #32
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b088      	sub	sp, #32
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006846:	f107 030c 	add.w	r3, r7, #12
 800684a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	210f      	movs	r1, #15
 8006856:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800685a:	f000 facb 	bl	8006df4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	330b      	adds	r3, #11
 8006862:	78db      	ldrb	r3, [r3, #3]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3720      	adds	r7, #32
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b088      	sub	sp, #32
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006874:	f107 030c 	add.w	r3, r7, #12
 8006878:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	210e      	movs	r1, #14
 8006880:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8006884:	f000 fab6 	bl	8006df4 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	330b      	adds	r3, #11
 800688c:	78db      	ldrb	r3, [r3, #3]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3720      	adds	r7, #32
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
	...

08006898 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8006898:	b480      	push	{r7}
 800689a:	b08b      	sub	sp, #44	; 0x2c
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80068a0:	2300      	movs	r3, #0
 80068a2:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80068a4:	2300      	movs	r3, #0
 80068a6:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80068a8:	2300      	movs	r3, #0
 80068aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80068ac:	2300      	movs	r3, #0
 80068ae:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80068b0:	2300      	movs	r3, #0
 80068b2:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80068b4:	2300      	movs	r3, #0
 80068b6:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80068b8:	2300      	movs	r3, #0
 80068ba:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80068bc:	2300      	movs	r3, #0
 80068be:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80068c0:	4b4a      	ldr	r3, [pc, #296]	; (80069ec <SHCI_GetWirelessFwInfo+0x154>)
 80068c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80068c8:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80068d2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a44      	ldr	r2, [pc, #272]	; (80069f0 <SHCI_GetWirelessFwInfo+0x158>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d10f      	bne.n	8006904 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	617b      	str	r3, [r7, #20]
 8006902:	e01a      	b.n	800693a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800690c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8006910:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	695b      	ldr	r3, [r3, #20]
 8006920:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693c:	0e1b      	lsrs	r3, r3, #24
 800693e:	b2da      	uxtb	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	0c1b      	lsrs	r3, r3, #16
 8006948:	b2da      	uxtb	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800694e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006950:	0a1b      	lsrs	r3, r3, #8
 8006952:	b2da      	uxtb	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8006958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695a:	091b      	lsrs	r3, r3, #4
 800695c:	b2db      	uxtb	r3, r3
 800695e:	f003 030f 	and.w	r3, r3, #15
 8006962:	b2da      	uxtb	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	b2db      	uxtb	r3, r3
 800696c:	f003 030f 	and.w	r3, r3, #15
 8006970:	b2da      	uxtb	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	0e1b      	lsrs	r3, r3, #24
 800697a:	b2da      	uxtb	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006980:	6a3b      	ldr	r3, [r7, #32]
 8006982:	0c1b      	lsrs	r3, r3, #16
 8006984:	b2da      	uxtb	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	0a1b      	lsrs	r3, r3, #8
 800698e:	b2da      	uxtb	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	b2da      	uxtb	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	0e1b      	lsrs	r3, r3, #24
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	0c1b      	lsrs	r3, r3, #16
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	0a1b      	lsrs	r3, r3, #8
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	0e1b      	lsrs	r3, r3, #24
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	0c1b      	lsrs	r3, r3, #16
 80069d0:	b2da      	uxtb	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	372c      	adds	r7, #44	; 0x2c
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	58004000 	.word	0x58004000
 80069f0:	a94656b9 	.word	0xa94656b9

080069f4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	4a08      	ldr	r2, [pc, #32]	; (8006a24 <hci_init+0x30>)
 8006a04:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8006a06:	4a08      	ldr	r2, [pc, #32]	; (8006a28 <hci_init+0x34>)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8006a0c:	4806      	ldr	r0, [pc, #24]	; (8006a28 <hci_init+0x34>)
 8006a0e:	f000 f973 	bl	8006cf8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 f8d4 	bl	8006bc4 <TlInit>

  return;
 8006a1c:	bf00      	nop
}
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	20000340 	.word	0x20000340
 8006a28:	20000318 	.word	0x20000318

08006a2c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006a32:	4822      	ldr	r0, [pc, #136]	; (8006abc <hci_user_evt_proc+0x90>)
 8006a34:	f000 fd28 	bl	8007488 <LST_is_empty>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d12b      	bne.n	8006a96 <hci_user_evt_proc+0x6a>
 8006a3e:	4b20      	ldr	r3, [pc, #128]	; (8006ac0 <hci_user_evt_proc+0x94>)
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d027      	beq.n	8006a96 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006a46:	f107 030c 	add.w	r3, r7, #12
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	481b      	ldr	r0, [pc, #108]	; (8006abc <hci_user_evt_proc+0x90>)
 8006a4e:	f000 fdaa 	bl	80075a6 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8006a52:	4b1c      	ldr	r3, [pc, #112]	; (8006ac4 <hci_user_evt_proc+0x98>)
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00c      	beq.n	8006a74 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006a62:	4b18      	ldr	r3, [pc, #96]	; (8006ac4 <hci_user_evt_proc+0x98>)
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	1d3a      	adds	r2, r7, #4
 8006a68:	4610      	mov	r0, r2
 8006a6a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8006a6c:	793a      	ldrb	r2, [r7, #4]
 8006a6e:	4b14      	ldr	r3, [pc, #80]	; (8006ac0 <hci_user_evt_proc+0x94>)
 8006a70:	701a      	strb	r2, [r3, #0]
 8006a72:	e002      	b.n	8006a7a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006a74:	4b12      	ldr	r3, [pc, #72]	; (8006ac0 <hci_user_evt_proc+0x94>)
 8006a76:	2201      	movs	r2, #1
 8006a78:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8006a7a:	4b11      	ldr	r3, [pc, #68]	; (8006ac0 <hci_user_evt_proc+0x94>)
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d004      	beq.n	8006a8c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f000 fc03 	bl	8007290 <TL_MM_EvtDone>
 8006a8a:	e004      	b.n	8006a96 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4619      	mov	r1, r3
 8006a90:	480a      	ldr	r0, [pc, #40]	; (8006abc <hci_user_evt_proc+0x90>)
 8006a92:	f000 fd1b 	bl	80074cc <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006a96:	4809      	ldr	r0, [pc, #36]	; (8006abc <hci_user_evt_proc+0x90>)
 8006a98:	f000 fcf6 	bl	8007488 <LST_is_empty>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d107      	bne.n	8006ab2 <hci_user_evt_proc+0x86>
 8006aa2:	4b07      	ldr	r3, [pc, #28]	; (8006ac0 <hci_user_evt_proc+0x94>)
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d003      	beq.n	8006ab2 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8006aaa:	4804      	ldr	r0, [pc, #16]	; (8006abc <hci_user_evt_proc+0x90>)
 8006aac:	f001 f814 	bl	8007ad8 <hci_notify_asynch_evt>
  }


  return;
 8006ab0:	bf00      	nop
 8006ab2:	bf00      	nop
}
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	20000148 	.word	0x20000148
 8006ac0:	20000154 	.word	0x20000154
 8006ac4:	20000318 	.word	0x20000318

08006ac8 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b088      	sub	sp, #32
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	f000 f8cb 	bl	8006c70 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8006ada:	2300      	movs	r3, #0
 8006adc:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	885b      	ldrh	r3, [r3, #2]
 8006ae2:	b21b      	sxth	r3, r3
 8006ae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ae8:	b21a      	sxth	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	029b      	lsls	r3, r3, #10
 8006af0:	b21b      	sxth	r3, r3
 8006af2:	4313      	orrs	r3, r2
 8006af4:	b21b      	sxth	r3, r3
 8006af6:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	b2d9      	uxtb	r1, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	689a      	ldr	r2, [r3, #8]
 8006b02:	8bbb      	ldrh	r3, [r7, #28]
 8006b04:	4618      	mov	r0, r3
 8006b06:	f000 f88d 	bl	8006c24 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8006b0a:	e04e      	b.n	8006baa <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8006b0c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8006b10:	f000 fff9 	bl	8007b06 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006b14:	e043      	b.n	8006b9e <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8006b16:	f107 030c 	add.w	r3, r7, #12
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	4828      	ldr	r0, [pc, #160]	; (8006bc0 <hci_send_req+0xf8>)
 8006b1e:	f000 fd42 	bl	80075a6 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	7a5b      	ldrb	r3, [r3, #9]
 8006b26:	2b0f      	cmp	r3, #15
 8006b28:	d114      	bne.n	8006b54 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	330b      	adds	r3, #11
 8006b2e:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	885b      	ldrh	r3, [r3, #2]
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	8bba      	ldrh	r2, [r7, #28]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d104      	bne.n	8006b46 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	7812      	ldrb	r2, [r2, #0]
 8006b44:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	785b      	ldrb	r3, [r3, #1]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d027      	beq.n	8006b9e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	77fb      	strb	r3, [r7, #31]
 8006b52:	e024      	b.n	8006b9e <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	330b      	adds	r3, #11
 8006b58:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	8bba      	ldrh	r2, [r7, #28]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d114      	bne.n	8006b92 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	7a9b      	ldrb	r3, [r3, #10]
 8006b6c:	3b03      	subs	r3, #3
 8006b6e:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	695a      	ldr	r2, [r3, #20]
 8006b74:	7dfb      	ldrb	r3, [r7, #23]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	bfa8      	it	ge
 8006b7a:	461a      	movge	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6918      	ldr	r0, [r3, #16]
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	1cd9      	adds	r1, r3, #3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	f001 fe89 	bl	80088a4 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d001      	beq.n	8006b9e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006b9e:	4808      	ldr	r0, [pc, #32]	; (8006bc0 <hci_send_req+0xf8>)
 8006ba0:	f000 fc72 	bl	8007488 <LST_is_empty>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d0b5      	beq.n	8006b16 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8006baa:	7ffb      	ldrb	r3, [r7, #31]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d0ad      	beq.n	8006b0c <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8006bb0:	2001      	movs	r0, #1
 8006bb2:	f000 f85d 	bl	8006c70 <NotifyCmdStatus>

  return 0;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3720      	adds	r7, #32
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	20000338 	.word	0x20000338

08006bc4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b086      	sub	sp, #24
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8006bcc:	480f      	ldr	r0, [pc, #60]	; (8006c0c <TlInit+0x48>)
 8006bce:	f000 fc4b 	bl	8007468 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8006bd2:	4a0f      	ldr	r2, [pc, #60]	; (8006c10 <TlInit+0x4c>)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8006bd8:	480e      	ldr	r0, [pc, #56]	; (8006c14 <TlInit+0x50>)
 8006bda:	f000 fc45 	bl	8007468 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006bde:	4b0e      	ldr	r3, [pc, #56]	; (8006c18 <TlInit+0x54>)
 8006be0:	2201      	movs	r2, #1
 8006be2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8006be4:	4b0d      	ldr	r3, [pc, #52]	; (8006c1c <TlInit+0x58>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00a      	beq.n	8006c02 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8006bf0:	4b0b      	ldr	r3, [pc, #44]	; (8006c20 <TlInit+0x5c>)
 8006bf2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8006bf4:	4b09      	ldr	r3, [pc, #36]	; (8006c1c <TlInit+0x58>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f107 0208 	add.w	r2, r7, #8
 8006bfc:	4610      	mov	r0, r2
 8006bfe:	4798      	blx	r3
  }

  return;
 8006c00:	bf00      	nop
 8006c02:	bf00      	nop
}
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	20000338 	.word	0x20000338
 8006c10:	20000150 	.word	0x20000150
 8006c14:	20000148 	.word	0x20000148
 8006c18:	20000154 	.word	0x20000154
 8006c1c:	20000318 	.word	0x20000318
 8006c20:	08006cb1 	.word	0x08006cb1

08006c24 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	603a      	str	r2, [r7, #0]
 8006c2e:	80fb      	strh	r3, [r7, #6]
 8006c30:	460b      	mov	r3, r1
 8006c32:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8006c34:	4b0c      	ldr	r3, [pc, #48]	; (8006c68 <SendCmd+0x44>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	88fa      	ldrh	r2, [r7, #6]
 8006c3a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8006c3e:	4b0a      	ldr	r3, [pc, #40]	; (8006c68 <SendCmd+0x44>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	797a      	ldrb	r2, [r7, #5]
 8006c44:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8006c46:	4b08      	ldr	r3, [pc, #32]	; (8006c68 <SendCmd+0x44>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	330c      	adds	r3, #12
 8006c4c:	797a      	ldrb	r2, [r7, #5]
 8006c4e:	6839      	ldr	r1, [r7, #0]
 8006c50:	4618      	mov	r0, r3
 8006c52:	f001 fe27 	bl	80088a4 <memcpy>

  hciContext.io.Send(0,0);
 8006c56:	4b05      	ldr	r3, [pc, #20]	; (8006c6c <SendCmd+0x48>)
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	2000      	movs	r0, #0
 8006c5e:	4798      	blx	r3

  return;
 8006c60:	bf00      	nop
}
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	20000150 	.word	0x20000150
 8006c6c:	20000318 	.word	0x20000318

08006c70 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	4603      	mov	r3, r0
 8006c78:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8006c7a:	79fb      	ldrb	r3, [r7, #7]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d108      	bne.n	8006c92 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8006c80:	4b0a      	ldr	r3, [pc, #40]	; (8006cac <NotifyCmdStatus+0x3c>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00d      	beq.n	8006ca4 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8006c88:	4b08      	ldr	r3, [pc, #32]	; (8006cac <NotifyCmdStatus+0x3c>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8006c90:	e008      	b.n	8006ca4 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8006c92:	4b06      	ldr	r3, [pc, #24]	; (8006cac <NotifyCmdStatus+0x3c>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d004      	beq.n	8006ca4 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8006c9a:	4b04      	ldr	r3, [pc, #16]	; (8006cac <NotifyCmdStatus+0x3c>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2001      	movs	r0, #1
 8006ca0:	4798      	blx	r3
  return;
 8006ca2:	bf00      	nop
 8006ca4:	bf00      	nop
}
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	20000340 	.word	0x20000340

08006cb0 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	7a5b      	ldrb	r3, [r3, #9]
 8006cbc:	2b0f      	cmp	r3, #15
 8006cbe:	d003      	beq.n	8006cc8 <TlEvtReceived+0x18>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	7a5b      	ldrb	r3, [r3, #9]
 8006cc4:	2b0e      	cmp	r3, #14
 8006cc6:	d107      	bne.n	8006cd8 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8006cc8:	6879      	ldr	r1, [r7, #4]
 8006cca:	4809      	ldr	r0, [pc, #36]	; (8006cf0 <TlEvtReceived+0x40>)
 8006ccc:	f000 fc24 	bl	8007518 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	f000 ff0d 	bl	8007af0 <hci_cmd_resp_release>
 8006cd6:	e006      	b.n	8006ce6 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8006cd8:	6879      	ldr	r1, [r7, #4]
 8006cda:	4806      	ldr	r0, [pc, #24]	; (8006cf4 <TlEvtReceived+0x44>)
 8006cdc:	f000 fc1c 	bl	8007518 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006ce0:	4804      	ldr	r0, [pc, #16]	; (8006cf4 <TlEvtReceived+0x44>)
 8006ce2:	f000 fef9 	bl	8007ad8 <hci_notify_asynch_evt>
  }

  return;
 8006ce6:	bf00      	nop
}
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	20000338 	.word	0x20000338
 8006cf4:	20000148 	.word	0x20000148

08006cf8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a05      	ldr	r2, [pc, #20]	; (8006d18 <hci_register_io_bus+0x20>)
 8006d04:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a04      	ldr	r2, [pc, #16]	; (8006d1c <hci_register_io_bus+0x24>)
 8006d0a:	611a      	str	r2, [r3, #16]

  return;
 8006d0c:	bf00      	nop
}
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr
 8006d18:	08007009 	.word	0x08007009
 8006d1c:	08007071 	.word	0x08007071

08006d20 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	4a08      	ldr	r2, [pc, #32]	; (8006d50 <shci_init+0x30>)
 8006d30:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8006d32:	4a08      	ldr	r2, [pc, #32]	; (8006d54 <shci_init+0x34>)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8006d38:	4806      	ldr	r0, [pc, #24]	; (8006d54 <shci_init+0x34>)
 8006d3a:	f000 f911 	bl	8006f60 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4618      	mov	r0, r3
 8006d44:	f000 f894 	bl	8006e70 <TlInit>

  return;
 8006d48:	bf00      	nop
}
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	20000364 	.word	0x20000364
 8006d54:	20000344 	.word	0x20000344

08006d58 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006d5e:	4822      	ldr	r0, [pc, #136]	; (8006de8 <shci_user_evt_proc+0x90>)
 8006d60:	f000 fb92 	bl	8007488 <LST_is_empty>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d12b      	bne.n	8006dc2 <shci_user_evt_proc+0x6a>
 8006d6a:	4b20      	ldr	r3, [pc, #128]	; (8006dec <shci_user_evt_proc+0x94>)
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d027      	beq.n	8006dc2 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006d72:	f107 030c 	add.w	r3, r7, #12
 8006d76:	4619      	mov	r1, r3
 8006d78:	481b      	ldr	r0, [pc, #108]	; (8006de8 <shci_user_evt_proc+0x90>)
 8006d7a:	f000 fc14 	bl	80075a6 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8006d7e:	4b1c      	ldr	r3, [pc, #112]	; (8006df0 <shci_user_evt_proc+0x98>)
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00c      	beq.n	8006da0 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006d8e:	4b18      	ldr	r3, [pc, #96]	; (8006df0 <shci_user_evt_proc+0x98>)
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	1d3a      	adds	r2, r7, #4
 8006d94:	4610      	mov	r0, r2
 8006d96:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8006d98:	793a      	ldrb	r2, [r7, #4]
 8006d9a:	4b14      	ldr	r3, [pc, #80]	; (8006dec <shci_user_evt_proc+0x94>)
 8006d9c:	701a      	strb	r2, [r3, #0]
 8006d9e:	e002      	b.n	8006da6 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006da0:	4b12      	ldr	r3, [pc, #72]	; (8006dec <shci_user_evt_proc+0x94>)
 8006da2:	2201      	movs	r2, #1
 8006da4:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8006da6:	4b11      	ldr	r3, [pc, #68]	; (8006dec <shci_user_evt_proc+0x94>)
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d004      	beq.n	8006db8 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	4618      	mov	r0, r3
 8006db2:	f000 fa6d 	bl	8007290 <TL_MM_EvtDone>
 8006db6:	e004      	b.n	8006dc2 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	4619      	mov	r1, r3
 8006dbc:	480a      	ldr	r0, [pc, #40]	; (8006de8 <shci_user_evt_proc+0x90>)
 8006dbe:	f000 fb85 	bl	80074cc <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006dc2:	4809      	ldr	r0, [pc, #36]	; (8006de8 <shci_user_evt_proc+0x90>)
 8006dc4:	f000 fb60 	bl	8007488 <LST_is_empty>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d107      	bne.n	8006dde <shci_user_evt_proc+0x86>
 8006dce:	4b07      	ldr	r3, [pc, #28]	; (8006dec <shci_user_evt_proc+0x94>)
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d003      	beq.n	8006dde <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8006dd6:	4804      	ldr	r0, [pc, #16]	; (8006de8 <shci_user_evt_proc+0x90>)
 8006dd8:	f7f9 feb1 	bl	8000b3e <shci_notify_asynch_evt>
  }


  return;
 8006ddc:	bf00      	nop
 8006dde:	bf00      	nop
}
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	20000160 	.word	0x20000160
 8006dec:	20000170 	.word	0x20000170
 8006df0:	20000344 	.word	0x20000344

08006df4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60ba      	str	r2, [r7, #8]
 8006dfc:	607b      	str	r3, [r7, #4]
 8006dfe:	4603      	mov	r3, r0
 8006e00:	81fb      	strh	r3, [r7, #14]
 8006e02:	460b      	mov	r3, r1
 8006e04:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8006e06:	2000      	movs	r0, #0
 8006e08:	f000 f864 	bl	8006ed4 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8006e0c:	4b16      	ldr	r3, [pc, #88]	; (8006e68 <shci_send+0x74>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	89fa      	ldrh	r2, [r7, #14]
 8006e12:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8006e16:	4b14      	ldr	r3, [pc, #80]	; (8006e68 <shci_send+0x74>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	7b7a      	ldrb	r2, [r7, #13]
 8006e1c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8006e1e:	4b12      	ldr	r3, [pc, #72]	; (8006e68 <shci_send+0x74>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	330c      	adds	r3, #12
 8006e24:	7b7a      	ldrb	r2, [r7, #13]
 8006e26:	68b9      	ldr	r1, [r7, #8]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f001 fd3b 	bl	80088a4 <memcpy>

  shciContext.io.Send(0,0);
 8006e2e:	4b0f      	ldr	r3, [pc, #60]	; (8006e6c <shci_send+0x78>)
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	2100      	movs	r1, #0
 8006e34:	2000      	movs	r0, #0
 8006e36:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8006e38:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8006e3c:	f7f9 fe96 	bl	8000b6c <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f103 0008 	add.w	r0, r3, #8
 8006e46:	4b08      	ldr	r3, [pc, #32]	; (8006e68 <shci_send+0x74>)
 8006e48:	6819      	ldr	r1, [r3, #0]
 8006e4a:	4b07      	ldr	r3, [pc, #28]	; (8006e68 <shci_send+0x74>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	789b      	ldrb	r3, [r3, #2]
 8006e50:	3303      	adds	r3, #3
 8006e52:	461a      	mov	r2, r3
 8006e54:	f001 fd26 	bl	80088a4 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8006e58:	2001      	movs	r0, #1
 8006e5a:	f000 f83b 	bl	8006ed4 <Cmd_SetStatus>

  return;
 8006e5e:	bf00      	nop
}
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	2000016c 	.word	0x2000016c
 8006e6c:	20000344 	.word	0x20000344

08006e70 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8006e78:	4a10      	ldr	r2, [pc, #64]	; (8006ebc <TlInit+0x4c>)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8006e7e:	4810      	ldr	r0, [pc, #64]	; (8006ec0 <TlInit+0x50>)
 8006e80:	f000 faf2 	bl	8007468 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8006e84:	2001      	movs	r0, #1
 8006e86:	f000 f825 	bl	8006ed4 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006e8a:	4b0e      	ldr	r3, [pc, #56]	; (8006ec4 <TlInit+0x54>)
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8006e90:	4b0d      	ldr	r3, [pc, #52]	; (8006ec8 <TlInit+0x58>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00c      	beq.n	8006eb2 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8006e9c:	4b0b      	ldr	r3, [pc, #44]	; (8006ecc <TlInit+0x5c>)
 8006e9e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8006ea0:	4b0b      	ldr	r3, [pc, #44]	; (8006ed0 <TlInit+0x60>)
 8006ea2:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8006ea4:	4b08      	ldr	r3, [pc, #32]	; (8006ec8 <TlInit+0x58>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f107 020c 	add.w	r2, r7, #12
 8006eac:	4610      	mov	r0, r2
 8006eae:	4798      	blx	r3
  }

  return;
 8006eb0:	bf00      	nop
 8006eb2:	bf00      	nop
}
 8006eb4:	3718      	adds	r7, #24
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	2000016c 	.word	0x2000016c
 8006ec0:	20000160 	.word	0x20000160
 8006ec4:	20000170 	.word	0x20000170
 8006ec8:	20000344 	.word	0x20000344
 8006ecc:	08006f25 	.word	0x08006f25
 8006ed0:	08006f3d 	.word	0x08006f3d

08006ed4 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	4603      	mov	r3, r0
 8006edc:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8006ede:	79fb      	ldrb	r3, [r7, #7]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10b      	bne.n	8006efc <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8006ee4:	4b0d      	ldr	r3, [pc, #52]	; (8006f1c <Cmd_SetStatus+0x48>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d003      	beq.n	8006ef4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8006eec:	4b0b      	ldr	r3, [pc, #44]	; (8006f1c <Cmd_SetStatus+0x48>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8006ef4:	4b0a      	ldr	r3, [pc, #40]	; (8006f20 <Cmd_SetStatus+0x4c>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8006efa:	e00b      	b.n	8006f14 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8006efc:	4b08      	ldr	r3, [pc, #32]	; (8006f20 <Cmd_SetStatus+0x4c>)
 8006efe:	2201      	movs	r2, #1
 8006f00:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8006f02:	4b06      	ldr	r3, [pc, #24]	; (8006f1c <Cmd_SetStatus+0x48>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d004      	beq.n	8006f14 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8006f0a:	4b04      	ldr	r3, [pc, #16]	; (8006f1c <Cmd_SetStatus+0x48>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2001      	movs	r0, #1
 8006f10:	4798      	blx	r3
  return;
 8006f12:	bf00      	nop
 8006f14:	bf00      	nop
}
 8006f16:	3708      	adds	r7, #8
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	20000364 	.word	0x20000364
 8006f20:	20000168 	.word	0x20000168

08006f24 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	f7f9 fe12 	bl	8000b56 <shci_cmd_resp_release>

  return;
 8006f32:	bf00      	nop
}
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
	...

08006f3c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8006f44:	6879      	ldr	r1, [r7, #4]
 8006f46:	4805      	ldr	r0, [pc, #20]	; (8006f5c <TlUserEvtReceived+0x20>)
 8006f48:	f000 fae6 	bl	8007518 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006f4c:	4803      	ldr	r0, [pc, #12]	; (8006f5c <TlUserEvtReceived+0x20>)
 8006f4e:	f7f9 fdf6 	bl	8000b3e <shci_notify_asynch_evt>

  return;
 8006f52:	bf00      	nop
}
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20000160 	.word	0x20000160

08006f60 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a05      	ldr	r2, [pc, #20]	; (8006f80 <shci_register_io_bus+0x20>)
 8006f6c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a04      	ldr	r2, [pc, #16]	; (8006f84 <shci_register_io_bus+0x24>)
 8006f72:	611a      	str	r2, [r3, #16]

  return;
 8006f74:	bf00      	nop
}
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr
 8006f80:	0800711d 	.word	0x0800711d
 8006f84:	08007171 	.word	0x08007171

08006f88 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8006f8c:	f001 f91e 	bl	80081cc <HW_IPCC_Enable>

  return;
 8006f90:	bf00      	nop
}
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <TL_Init>:


void TL_Init( void )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8006f98:	4b10      	ldr	r3, [pc, #64]	; (8006fdc <TL_Init+0x48>)
 8006f9a:	4a11      	ldr	r2, [pc, #68]	; (8006fe0 <TL_Init+0x4c>)
 8006f9c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8006f9e:	4b0f      	ldr	r3, [pc, #60]	; (8006fdc <TL_Init+0x48>)
 8006fa0:	4a10      	ldr	r2, [pc, #64]	; (8006fe4 <TL_Init+0x50>)
 8006fa2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8006fa4:	4b0d      	ldr	r3, [pc, #52]	; (8006fdc <TL_Init+0x48>)
 8006fa6:	4a10      	ldr	r2, [pc, #64]	; (8006fe8 <TL_Init+0x54>)
 8006fa8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8006faa:	4b0c      	ldr	r3, [pc, #48]	; (8006fdc <TL_Init+0x48>)
 8006fac:	4a0f      	ldr	r2, [pc, #60]	; (8006fec <TL_Init+0x58>)
 8006fae:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8006fb0:	4b0a      	ldr	r3, [pc, #40]	; (8006fdc <TL_Init+0x48>)
 8006fb2:	4a0f      	ldr	r2, [pc, #60]	; (8006ff0 <TL_Init+0x5c>)
 8006fb4:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8006fb6:	4b09      	ldr	r3, [pc, #36]	; (8006fdc <TL_Init+0x48>)
 8006fb8:	4a0e      	ldr	r2, [pc, #56]	; (8006ff4 <TL_Init+0x60>)
 8006fba:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8006fbc:	4b07      	ldr	r3, [pc, #28]	; (8006fdc <TL_Init+0x48>)
 8006fbe:	4a0e      	ldr	r2, [pc, #56]	; (8006ff8 <TL_Init+0x64>)
 8006fc0:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8006fc2:	4b06      	ldr	r3, [pc, #24]	; (8006fdc <TL_Init+0x48>)
 8006fc4:	4a0d      	ldr	r2, [pc, #52]	; (8006ffc <TL_Init+0x68>)
 8006fc6:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8006fc8:	4b04      	ldr	r3, [pc, #16]	; (8006fdc <TL_Init+0x48>)
 8006fca:	4a0d      	ldr	r2, [pc, #52]	; (8007000 <TL_Init+0x6c>)
 8006fcc:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8006fce:	4b03      	ldr	r3, [pc, #12]	; (8006fdc <TL_Init+0x48>)
 8006fd0:	4a0c      	ldr	r2, [pc, #48]	; (8007004 <TL_Init+0x70>)
 8006fd2:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8006fd4:	f001 f90e 	bl	80081f4 <HW_IPCC_Init>

  return;
 8006fd8:	bf00      	nop
}
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	20030000 	.word	0x20030000
 8006fe0:	20030028 	.word	0x20030028
 8006fe4:	20030048 	.word	0x20030048
 8006fe8:	20030058 	.word	0x20030058
 8006fec:	20030064 	.word	0x20030064
 8006ff0:	2003006c 	.word	0x2003006c
 8006ff4:	20030074 	.word	0x20030074
 8006ff8:	2003007c 	.word	0x2003007c
 8006ffc:	20030098 	.word	0x20030098
 8007000:	2003009c 	.word	0x2003009c
 8007004:	200300a8 	.word	0x200300a8

08007008 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8007014:	4811      	ldr	r0, [pc, #68]	; (800705c <TL_BLE_Init+0x54>)
 8007016:	f000 fa27 	bl	8007468 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800701a:	4b11      	ldr	r3, [pc, #68]	; (8007060 <TL_BLE_Init+0x58>)
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	68da      	ldr	r2, [r3, #12]
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	4a0c      	ldr	r2, [pc, #48]	; (8007064 <TL_BLE_Init+0x5c>)
 8007034:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	4a08      	ldr	r2, [pc, #32]	; (800705c <TL_BLE_Init+0x54>)
 800703a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800703c:	f001 f8f0 	bl	8008220 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a08      	ldr	r2, [pc, #32]	; (8007068 <TL_BLE_Init+0x60>)
 8007046:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	4a07      	ldr	r2, [pc, #28]	; (800706c <TL_BLE_Init+0x64>)
 800704e:	6013      	str	r3, [r2, #0]

  return 0;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	200300c4 	.word	0x200300c4
 8007060:	20030000 	.word	0x20030000
 8007064:	20030a48 	.word	0x20030a48
 8007068:	20000370 	.word	0x20000370
 800706c:	20000374 	.word	0x20000374

08007070 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	460b      	mov	r3, r1
 800707a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800707c:	4b09      	ldr	r3, [pc, #36]	; (80070a4 <TL_BLE_SendCmd+0x34>)
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2201      	movs	r2, #1
 8007084:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8007086:	4b07      	ldr	r3, [pc, #28]	; (80070a4 <TL_BLE_SendCmd+0x34>)
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4619      	mov	r1, r3
 800708e:	2001      	movs	r0, #1
 8007090:	f000 f96c 	bl	800736c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8007094:	f001 f8ce 	bl	8008234 <HW_IPCC_BLE_SendCmd>

  return 0;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3708      	adds	r7, #8
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	20030000 	.word	0x20030000

080070a8 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80070ae:	e01c      	b.n	80070ea <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80070b0:	1d3b      	adds	r3, r7, #4
 80070b2:	4619      	mov	r1, r3
 80070b4:	4812      	ldr	r0, [pc, #72]	; (8007100 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80070b6:	f000 fa76 	bl	80075a6 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	7a5b      	ldrb	r3, [r3, #9]
 80070be:	2b0f      	cmp	r3, #15
 80070c0:	d003      	beq.n	80070ca <HW_IPCC_BLE_RxEvtNot+0x22>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	7a5b      	ldrb	r3, [r3, #9]
 80070c6:	2b0e      	cmp	r3, #14
 80070c8:	d105      	bne.n	80070d6 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4619      	mov	r1, r3
 80070ce:	2002      	movs	r0, #2
 80070d0:	f000 f94c 	bl	800736c <OutputDbgTrace>
 80070d4:	e004      	b.n	80070e0 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4619      	mov	r1, r3
 80070da:	2003      	movs	r0, #3
 80070dc:	f000 f946 	bl	800736c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80070e0:	4b08      	ldr	r3, [pc, #32]	; (8007104 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	4610      	mov	r0, r2
 80070e8:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80070ea:	4805      	ldr	r0, [pc, #20]	; (8007100 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80070ec:	f000 f9cc 	bl	8007488 <LST_is_empty>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d0dc      	beq.n	80070b0 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80070f6:	bf00      	nop
}
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	200300c4 	.word	0x200300c4
 8007104:	20000370 	.word	0x20000370

08007108 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800710c:	4b02      	ldr	r3, [pc, #8]	; (8007118 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4798      	blx	r3

  return;
 8007112:	bf00      	nop
}
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	20000374 	.word	0x20000374

0800711c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8007128:	480d      	ldr	r0, [pc, #52]	; (8007160 <TL_SYS_Init+0x44>)
 800712a:	f000 f99d 	bl	8007468 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800712e:	4b0d      	ldr	r3, [pc, #52]	; (8007164 <TL_SYS_Init+0x48>)
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	689a      	ldr	r2, [r3, #8]
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	4a08      	ldr	r2, [pc, #32]	; (8007160 <TL_SYS_Init+0x44>)
 8007140:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8007142:	f001 f899 	bl	8008278 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a07      	ldr	r2, [pc, #28]	; (8007168 <TL_SYS_Init+0x4c>)
 800714c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	4a06      	ldr	r2, [pc, #24]	; (800716c <TL_SYS_Init+0x50>)
 8007154:	6013      	str	r3, [r2, #0]

  return 0;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	200300cc 	.word	0x200300cc
 8007164:	20030000 	.word	0x20030000
 8007168:	20000378 	.word	0x20000378
 800716c:	2000037c 	.word	0x2000037c

08007170 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	460b      	mov	r3, r1
 800717a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800717c:	4b09      	ldr	r3, [pc, #36]	; (80071a4 <TL_SYS_SendCmd+0x34>)
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2210      	movs	r2, #16
 8007184:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8007186:	4b07      	ldr	r3, [pc, #28]	; (80071a4 <TL_SYS_SendCmd+0x34>)
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4619      	mov	r1, r3
 800718e:	2004      	movs	r0, #4
 8007190:	f000 f8ec 	bl	800736c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8007194:	f001 f87a 	bl	800828c <HW_IPCC_SYS_SendCmd>

  return 0;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	20030000 	.word	0x20030000

080071a8 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80071ac:	4b07      	ldr	r3, [pc, #28]	; (80071cc <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4619      	mov	r1, r3
 80071b4:	2005      	movs	r0, #5
 80071b6:	f000 f8d9 	bl	800736c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80071ba:	4b05      	ldr	r3, [pc, #20]	; (80071d0 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a03      	ldr	r2, [pc, #12]	; (80071cc <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80071c0:	68d2      	ldr	r2, [r2, #12]
 80071c2:	6812      	ldr	r2, [r2, #0]
 80071c4:	4610      	mov	r0, r2
 80071c6:	4798      	blx	r3

  return;
 80071c8:	bf00      	nop
}
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	20030000 	.word	0x20030000
 80071d0:	20000378 	.word	0x20000378

080071d4 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80071da:	e00e      	b.n	80071fa <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80071dc:	1d3b      	adds	r3, r7, #4
 80071de:	4619      	mov	r1, r3
 80071e0:	480b      	ldr	r0, [pc, #44]	; (8007210 <HW_IPCC_SYS_EvtNot+0x3c>)
 80071e2:	f000 f9e0 	bl	80075a6 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4619      	mov	r1, r3
 80071ea:	2006      	movs	r0, #6
 80071ec:	f000 f8be 	bl	800736c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80071f0:	4b08      	ldr	r3, [pc, #32]	; (8007214 <HW_IPCC_SYS_EvtNot+0x40>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	4610      	mov	r0, r2
 80071f8:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80071fa:	4805      	ldr	r0, [pc, #20]	; (8007210 <HW_IPCC_SYS_EvtNot+0x3c>)
 80071fc:	f000 f944 	bl	8007488 <LST_is_empty>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d0ea      	beq.n	80071dc <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8007206:	bf00      	nop
}
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	200300cc 	.word	0x200300cc
 8007214:	2000037c 	.word	0x2000037c

08007218 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8007220:	4817      	ldr	r0, [pc, #92]	; (8007280 <TL_MM_Init+0x68>)
 8007222:	f000 f921 	bl	8007468 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8007226:	4817      	ldr	r0, [pc, #92]	; (8007284 <TL_MM_Init+0x6c>)
 8007228:	f000 f91e 	bl	8007468 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800722c:	4b16      	ldr	r3, [pc, #88]	; (8007288 <TL_MM_Init+0x70>)
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	4a16      	ldr	r2, [pc, #88]	; (800728c <TL_MM_Init+0x74>)
 8007232:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8007234:	4b15      	ldr	r3, [pc, #84]	; (800728c <TL_MM_Init+0x74>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	6892      	ldr	r2, [r2, #8]
 800723c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800723e:	4b13      	ldr	r3, [pc, #76]	; (800728c <TL_MM_Init+0x74>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	68d2      	ldr	r2, [r2, #12]
 8007246:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8007248:	4b10      	ldr	r3, [pc, #64]	; (800728c <TL_MM_Init+0x74>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a0c      	ldr	r2, [pc, #48]	; (8007280 <TL_MM_Init+0x68>)
 800724e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8007250:	4b0e      	ldr	r3, [pc, #56]	; (800728c <TL_MM_Init+0x74>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	6812      	ldr	r2, [r2, #0]
 8007258:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800725a:	4b0c      	ldr	r3, [pc, #48]	; (800728c <TL_MM_Init+0x74>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	6852      	ldr	r2, [r2, #4]
 8007262:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8007264:	4b09      	ldr	r3, [pc, #36]	; (800728c <TL_MM_Init+0x74>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	6912      	ldr	r2, [r2, #16]
 800726c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800726e:	4b07      	ldr	r3, [pc, #28]	; (800728c <TL_MM_Init+0x74>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	6952      	ldr	r2, [r2, #20]
 8007276:	619a      	str	r2, [r3, #24]

  return;
 8007278:	bf00      	nop
}
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	200300b4 	.word	0x200300b4
 8007284:	20000368 	.word	0x20000368
 8007288:	20030000 	.word	0x20030000
 800728c:	20000380 	.word	0x20000380

08007290 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8007298:	6879      	ldr	r1, [r7, #4]
 800729a:	4807      	ldr	r0, [pc, #28]	; (80072b8 <TL_MM_EvtDone+0x28>)
 800729c:	f000 f93c 	bl	8007518 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80072a0:	6879      	ldr	r1, [r7, #4]
 80072a2:	2000      	movs	r0, #0
 80072a4:	f000 f862 	bl	800736c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80072a8:	4804      	ldr	r0, [pc, #16]	; (80072bc <TL_MM_EvtDone+0x2c>)
 80072aa:	f001 f815 	bl	80082d8 <HW_IPCC_MM_SendFreeBuf>

  return;
 80072ae:	bf00      	nop
}
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	20000368 	.word	0x20000368
 80072bc:	080072c1 	.word	0x080072c1

080072c0 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80072c6:	e00c      	b.n	80072e2 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80072c8:	1d3b      	adds	r3, r7, #4
 80072ca:	4619      	mov	r1, r3
 80072cc:	480a      	ldr	r0, [pc, #40]	; (80072f8 <SendFreeBuf+0x38>)
 80072ce:	f000 f96a 	bl	80075a6 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80072d2:	4b0a      	ldr	r3, [pc, #40]	; (80072fc <SendFreeBuf+0x3c>)
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	4611      	mov	r1, r2
 80072dc:	4618      	mov	r0, r3
 80072de:	f000 f91b 	bl	8007518 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80072e2:	4805      	ldr	r0, [pc, #20]	; (80072f8 <SendFreeBuf+0x38>)
 80072e4:	f000 f8d0 	bl	8007488 <LST_is_empty>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d0ec      	beq.n	80072c8 <SendFreeBuf+0x8>
  }

  return;
 80072ee:	bf00      	nop
}
 80072f0:	3708      	adds	r7, #8
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	20000368 	.word	0x20000368
 80072fc:	20030000 	.word	0x20030000

08007300 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8007304:	4805      	ldr	r0, [pc, #20]	; (800731c <TL_TRACES_Init+0x1c>)
 8007306:	f000 f8af 	bl	8007468 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800730a:	4b05      	ldr	r3, [pc, #20]	; (8007320 <TL_TRACES_Init+0x20>)
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	4a03      	ldr	r2, [pc, #12]	; (800731c <TL_TRACES_Init+0x1c>)
 8007310:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8007312:	f001 f817 	bl	8008344 <HW_IPCC_TRACES_Init>

  return;
 8007316:	bf00      	nop
}
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	200300bc 	.word	0x200300bc
 8007320:	20030000 	.word	0x20030000

08007324 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800732a:	e008      	b.n	800733e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800732c:	1d3b      	adds	r3, r7, #4
 800732e:	4619      	mov	r1, r3
 8007330:	4808      	ldr	r0, [pc, #32]	; (8007354 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007332:	f000 f938 	bl	80075a6 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4618      	mov	r0, r3
 800733a:	f000 f80d 	bl	8007358 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800733e:	4805      	ldr	r0, [pc, #20]	; (8007354 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007340:	f000 f8a2 	bl	8007488 <LST_is_empty>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d0f0      	beq.n	800732c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800734a:	bf00      	nop
}
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	200300bc 	.word	0x200300bc

08007358 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	4603      	mov	r3, r0
 8007374:	6039      	str	r1, [r7, #0]
 8007376:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8007378:	79fb      	ldrb	r3, [r7, #7]
 800737a:	2b06      	cmp	r3, #6
 800737c:	d845      	bhi.n	800740a <OutputDbgTrace+0x9e>
 800737e:	a201      	add	r2, pc, #4	; (adr r2, 8007384 <OutputDbgTrace+0x18>)
 8007380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007384:	080073a1 	.word	0x080073a1
 8007388:	080073c5 	.word	0x080073c5
 800738c:	080073cb 	.word	0x080073cb
 8007390:	080073df 	.word	0x080073df
 8007394:	080073eb 	.word	0x080073eb
 8007398:	080073f1 	.word	0x080073f1
 800739c:	080073ff 	.word	0x080073ff
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	7a5b      	ldrb	r3, [r3, #9]
 80073a8:	2bff      	cmp	r3, #255	; 0xff
 80073aa:	d005      	beq.n	80073b8 <OutputDbgTrace+0x4c>
 80073ac:	2bff      	cmp	r3, #255	; 0xff
 80073ae:	dc05      	bgt.n	80073bc <OutputDbgTrace+0x50>
 80073b0:	2b0e      	cmp	r3, #14
 80073b2:	d005      	beq.n	80073c0 <OutputDbgTrace+0x54>
 80073b4:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80073b6:	e001      	b.n	80073bc <OutputDbgTrace+0x50>
          break;
 80073b8:	bf00      	nop
 80073ba:	e027      	b.n	800740c <OutputDbgTrace+0xa0>
          break;
 80073bc:	bf00      	nop
 80073be:	e025      	b.n	800740c <OutputDbgTrace+0xa0>
          break;
 80073c0:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80073c2:	e023      	b.n	800740c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80073c8:	e020      	b.n	800740c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	7a5b      	ldrb	r3, [r3, #9]
 80073d2:	2b0e      	cmp	r3, #14
 80073d4:	d001      	beq.n	80073da <OutputDbgTrace+0x6e>
 80073d6:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80073d8:	e000      	b.n	80073dc <OutputDbgTrace+0x70>
          break;
 80073da:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80073dc:	e016      	b.n	800740c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	7a5b      	ldrb	r3, [r3, #9]
 80073e6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80073e8:	e010      	b.n	800740c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80073ee:	e00d      	b.n	800740c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	7a5b      	ldrb	r3, [r3, #9]
 80073f8:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80073fa:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80073fc:	e006      	b.n	800740c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	7a5b      	ldrb	r3, [r3, #9]
 8007406:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007408:	e000      	b.n	800740c <OutputDbgTrace+0xa0>

    default:
      break;
 800740a:	bf00      	nop
  }

  return;
 800740c:	bf00      	nop
}
 800740e:	3714      	adds	r7, #20
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	4603      	mov	r3, r0
 8007420:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8007422:	4b0f      	ldr	r3, [pc, #60]	; (8007460 <OTP_Read+0x48>)
 8007424:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007426:	e002      	b.n	800742e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	3b08      	subs	r3, #8
 800742c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	3307      	adds	r3, #7
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	79fa      	ldrb	r2, [r7, #7]
 8007436:	429a      	cmp	r2, r3
 8007438:	d003      	beq.n	8007442 <OTP_Read+0x2a>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	4a09      	ldr	r2, [pc, #36]	; (8007464 <OTP_Read+0x4c>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d1f2      	bne.n	8007428 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3307      	adds	r3, #7
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	79fa      	ldrb	r2, [r7, #7]
 800744a:	429a      	cmp	r2, r3
 800744c:	d001      	beq.n	8007452 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800744e:	2300      	movs	r3, #0
 8007450:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8007452:	68fb      	ldr	r3, [r7, #12]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3714      	adds	r7, #20
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	1fff73f8 	.word	0x1fff73f8
 8007464:	1fff7000 	.word	0x1fff7000

08007468 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	605a      	str	r2, [r3, #4]
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8007488:	b480      	push	{r7}
 800748a:	b087      	sub	sp, #28
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007490:	f3ef 8310 	mrs	r3, PRIMASK
 8007494:	60fb      	str	r3, [r7, #12]
  return(result);
 8007496:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007498:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800749a:	b672      	cpsid	i
}
 800749c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d102      	bne.n	80074ae <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80074a8:	2301      	movs	r3, #1
 80074aa:	75fb      	strb	r3, [r7, #23]
 80074ac:	e001      	b.n	80074b2 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80074ae:	2300      	movs	r3, #0
 80074b0:	75fb      	strb	r3, [r7, #23]
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	f383 8810 	msr	PRIMASK, r3
}
 80074bc:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80074be:	7dfb      	ldrb	r3, [r7, #23]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	371c      	adds	r7, #28
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b087      	sub	sp, #28
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074d6:	f3ef 8310 	mrs	r3, PRIMASK
 80074da:	60fb      	str	r3, [r7, #12]
  return(result);
 80074dc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80074de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80074e0:	b672      	cpsid	i
}
 80074e2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	683a      	ldr	r2, [r7, #0]
 80074f6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	683a      	ldr	r2, [r7, #0]
 80074fe:	605a      	str	r2, [r3, #4]
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	f383 8810 	msr	PRIMASK, r3
}
 800750a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800750c:	bf00      	nop
 800750e:	371c      	adds	r7, #28
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8007518:	b480      	push	{r7}
 800751a:	b087      	sub	sp, #28
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007522:	f3ef 8310 	mrs	r3, PRIMASK
 8007526:	60fb      	str	r3, [r7, #12]
  return(result);
 8007528:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800752a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800752c:	b672      	cpsid	i
}
 800752e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	685a      	ldr	r2, [r3, #4]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	f383 8810 	msr	PRIMASK, r3
}
 8007556:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007558:	bf00      	nop
 800755a:	371c      	adds	r7, #28
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8007564:	b480      	push	{r7}
 8007566:	b087      	sub	sp, #28
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800756c:	f3ef 8310 	mrs	r3, PRIMASK
 8007570:	60fb      	str	r3, [r7, #12]
  return(result);
 8007572:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007574:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007576:	b672      	cpsid	i
}
 8007578:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	6812      	ldr	r2, [r2, #0]
 8007582:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	6852      	ldr	r2, [r2, #4]
 800758c:	605a      	str	r2, [r3, #4]
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	f383 8810 	msr	PRIMASK, r3
}
 8007598:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800759a:	bf00      	nop
 800759c:	371c      	adds	r7, #28
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b086      	sub	sp, #24
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075b0:	f3ef 8310 	mrs	r3, PRIMASK
 80075b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80075b6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80075b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80075ba:	b672      	cpsid	i
}
 80075bc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7ff ffca 	bl	8007564 <LST_remove_node>
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	f383 8810 	msr	PRIMASK, r3
}
 80075da:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80075dc:	bf00      	nop
 80075de:	3718      	adds	r7, #24
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80075e4:	b480      	push	{r7}
 80075e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80075e8:	4b03      	ldr	r3, [pc, #12]	; (80075f8 <LL_FLASH_GetUDN+0x14>)
 80075ea:	681b      	ldr	r3, [r3, #0]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	1fff7580 	.word	0x1fff7580

080075fc <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80075fc:	b480      	push	{r7}
 80075fe:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8007600:	4b03      	ldr	r3, [pc, #12]	; (8007610 <LL_FLASH_GetDeviceID+0x14>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	b2db      	uxtb	r3, r3
}
 8007606:	4618      	mov	r0, r3
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr
 8007610:	1fff7584 	.word	0x1fff7584

08007614 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8007614:	b480      	push	{r7}
 8007616:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8007618:	4b03      	ldr	r3, [pc, #12]	; (8007628 <LL_FLASH_GetSTCompanyID+0x14>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	0a1b      	lsrs	r3, r3, #8
}
 800761e:	4618      	mov	r0, r3
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	1fff7584 	.word	0x1fff7584

0800762c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800762c:	b5b0      	push	{r4, r5, r7, lr}
 800762e:	b08e      	sub	sp, #56	; 0x38
 8007630:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

	UTIL_SEQ_RegTask(1 << CFG_TASK_MY_TASK, UTIL_SEQ_RFU, myTask);
 8007632:	4a25      	ldr	r2, [pc, #148]	; (80076c8 <APP_BLE_Init+0x9c>)
 8007634:	2100      	movs	r1, #0
 8007636:	2004      	movs	r0, #4
 8007638:	f000 ffc6 	bl	80085c8 <UTIL_SEQ_RegTask>
	UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 800763c:	2100      	movs	r1, #0
 800763e:	2004      	movs	r0, #4
 8007640:	f000 ffe4 	bl	800860c <UTIL_SEQ_SetTask>

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8007644:	4b21      	ldr	r3, [pc, #132]	; (80076cc <APP_BLE_Init+0xa0>)
 8007646:	1d3c      	adds	r4, r7, #4
 8007648:	461d      	mov	r5, r3
 800764a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800764c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800764e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007654:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007656:	682b      	ldr	r3, [r5, #0]
 8007658:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800765a:	f000 f8ff 	bl	800785c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800765e:	2101      	movs	r1, #1
 8007660:	2002      	movs	r0, #2
 8007662:	f000 fe97 	bl	8008394 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8007666:	4a1a      	ldr	r2, [pc, #104]	; (80076d0 <APP_BLE_Init+0xa4>)
 8007668:	2100      	movs	r1, #0
 800766a:	2002      	movs	r0, #2
 800766c:	f000 ffac 	bl	80085c8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 8007670:	1d3b      	adds	r3, r7, #4
 8007672:	4618      	mov	r0, r3
 8007674:	f7ff f8cc 	bl	8006810 <SHCI_C2_BLE_Init>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d001      	beq.n	8007682 <APP_BLE_Init+0x56>
  {
    Error_Handler();
 800767e:	f7fa fa91 	bl	8001ba4 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8007682:	f000 f901 	bl	8007888 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8007686:	f7ff f81d 	bl	80066c4 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800768a:	4b12      	ldr	r3, [pc, #72]	; (80076d4 <APP_BLE_Init+0xa8>)
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8007692:	4b10      	ldr	r3, [pc, #64]	; (80076d4 <APP_BLE_Init+0xa8>)
 8007694:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007698:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800769a:	4a0f      	ldr	r2, [pc, #60]	; (80076d8 <APP_BLE_Init+0xac>)
 800769c:	2100      	movs	r1, #0
 800769e:	2001      	movs	r0, #1
 80076a0:	f000 ff92 	bl	80085c8 <UTIL_SEQ_RegTask>
  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 80076a4:	2006      	movs	r0, #6
 80076a6:	f7fe fe80 	bl	80063aa <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 80076aa:	f000 fabb 	bl	8007c24 <Custom_APP_Init>
/* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80076ae:	4b09      	ldr	r3, [pc, #36]	; (80076d4 <APP_BLE_Init+0xa8>)
 80076b0:	2200      	movs	r2, #0
 80076b2:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80076b4:	4b07      	ldr	r3, [pc, #28]	; (80076d4 <APP_BLE_Init+0xa8>)
 80076b6:	2200      	movs	r2, #0
 80076b8:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 80076ba:	2001      	movs	r0, #1
 80076bc:	f000 f97e 	bl	80079bc <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 80076c0:	bf00      	nop
}
 80076c2:	3738      	adds	r7, #56	; 0x38
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bdb0      	pop	{r4, r5, r7, pc}
 80076c8:	08007b8d 	.word	0x08007b8d
 80076cc:	08009204 	.word	0x08009204
 80076d0:	08006a2d 	.word	0x08006a2d
 80076d4:	20000174 	.word	0x20000174
 80076d8:	08007aa5 	.word	0x08007aa5

080076dc <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b08a      	sub	sp, #40	; 0x28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	3301      	adds	r3, #1
 80076e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	2bff      	cmp	r3, #255	; 0xff
 80076f0:	d053      	beq.n	800779a <SVCCTL_App_Notification+0xbe>
 80076f2:	2bff      	cmp	r3, #255	; 0xff
 80076f4:	f300 80a3 	bgt.w	800783e <SVCCTL_App_Notification+0x162>
 80076f8:	2b05      	cmp	r3, #5
 80076fa:	d002      	beq.n	8007702 <SVCCTL_App_Notification+0x26>
 80076fc:	2b3e      	cmp	r3, #62	; 0x3e
 80076fe:	d020      	beq.n	8007742 <SVCCTL_App_Notification+0x66>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8007700:	e09d      	b.n	800783e <SVCCTL_App_Notification+0x162>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8007702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007704:	3302      	adds	r3, #2
 8007706:	60bb      	str	r3, [r7, #8]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800770e:	b29a      	uxth	r2, r3
 8007710:	4b4f      	ldr	r3, [pc, #316]	; (8007850 <SVCCTL_App_Notification+0x174>)
 8007712:	8adb      	ldrh	r3, [r3, #22]
 8007714:	429a      	cmp	r2, r3
 8007716:	d106      	bne.n	8007726 <SVCCTL_App_Notification+0x4a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8007718:	4b4d      	ldr	r3, [pc, #308]	; (8007850 <SVCCTL_App_Notification+0x174>)
 800771a:	2200      	movs	r2, #0
 800771c:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800771e:	4b4c      	ldr	r3, [pc, #304]	; (8007850 <SVCCTL_App_Notification+0x174>)
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8007726:	2001      	movs	r0, #1
 8007728:	f000 f948 	bl	80079bc <Adv_Request>
      handleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800772c:	4b49      	ldr	r3, [pc, #292]	; (8007854 <SVCCTL_App_Notification+0x178>)
 800772e:	2201      	movs	r2, #1
 8007730:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007732:	4b47      	ldr	r3, [pc, #284]	; (8007850 <SVCCTL_App_Notification+0x174>)
 8007734:	8ada      	ldrh	r2, [r3, #22]
 8007736:	4b47      	ldr	r3, [pc, #284]	; (8007854 <SVCCTL_App_Notification+0x178>)
 8007738:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&handleNotification);
 800773a:	4846      	ldr	r0, [pc, #280]	; (8007854 <SVCCTL_App_Notification+0x178>)
 800773c:	f000 fa5e 	bl	8007bfc <Custom_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8007740:	e080      	b.n	8007844 <SVCCTL_App_Notification+0x168>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8007742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007744:	3302      	adds	r3, #2
 8007746:	613b      	str	r3, [r7, #16]
      switch (meta_evt->subevent)
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d001      	beq.n	8007754 <SVCCTL_App_Notification+0x78>
 8007750:	2b03      	cmp	r3, #3
          break;
 8007752:	e021      	b.n	8007798 <SVCCTL_App_Notification+0xbc>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	3301      	adds	r3, #1
 8007758:	60fb      	str	r3, [r7, #12]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800775a:	4b3d      	ldr	r3, [pc, #244]	; (8007850 <SVCCTL_App_Notification+0x174>)
 800775c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007760:	2b04      	cmp	r3, #4
 8007762:	d104      	bne.n	800776e <SVCCTL_App_Notification+0x92>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8007764:	4b3a      	ldr	r3, [pc, #232]	; (8007850 <SVCCTL_App_Notification+0x174>)
 8007766:	2206      	movs	r2, #6
 8007768:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800776c:	e003      	b.n	8007776 <SVCCTL_App_Notification+0x9a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800776e:	4b38      	ldr	r3, [pc, #224]	; (8007850 <SVCCTL_App_Notification+0x174>)
 8007770:	2205      	movs	r2, #5
 8007772:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800777c:	b29a      	uxth	r2, r3
 800777e:	4b34      	ldr	r3, [pc, #208]	; (8007850 <SVCCTL_App_Notification+0x174>)
 8007780:	82da      	strh	r2, [r3, #22]
          handleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8007782:	4b34      	ldr	r3, [pc, #208]	; (8007854 <SVCCTL_App_Notification+0x178>)
 8007784:	2200      	movs	r2, #0
 8007786:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007788:	4b31      	ldr	r3, [pc, #196]	; (8007850 <SVCCTL_App_Notification+0x174>)
 800778a:	8ada      	ldrh	r2, [r3, #22]
 800778c:	4b31      	ldr	r3, [pc, #196]	; (8007854 <SVCCTL_App_Notification+0x178>)
 800778e:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&handleNotification);
 8007790:	4830      	ldr	r0, [pc, #192]	; (8007854 <SVCCTL_App_Notification+0x178>)
 8007792:	f000 fa33 	bl	8007bfc <Custom_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8007796:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 8007798:	e054      	b.n	8007844 <SVCCTL_App_Notification+0x168>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779c:	3302      	adds	r3, #2
 800779e:	623b      	str	r3, [r7, #32]
      switch (blecore_evt->ecode)
 80077a0:	6a3b      	ldr	r3, [r7, #32]
 80077a2:	881b      	ldrh	r3, [r3, #0]
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077aa:	d042      	beq.n	8007832 <SVCCTL_App_Notification+0x156>
 80077ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077b0:	dc47      	bgt.n	8007842 <SVCCTL_App_Notification+0x166>
 80077b2:	2b04      	cmp	r3, #4
 80077b4:	d03f      	beq.n	8007836 <SVCCTL_App_Notification+0x15a>
 80077b6:	2b04      	cmp	r3, #4
 80077b8:	db43      	blt.n	8007842 <SVCCTL_App_Notification+0x166>
 80077ba:	f240 420a 	movw	r2, #1034	; 0x40a
 80077be:	4293      	cmp	r3, r2
 80077c0:	dc3f      	bgt.n	8007842 <SVCCTL_App_Notification+0x166>
 80077c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077c6:	dd3c      	ble.n	8007842 <SVCCTL_App_Notification+0x166>
 80077c8:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 80077cc:	2b09      	cmp	r3, #9
 80077ce:	d838      	bhi.n	8007842 <SVCCTL_App_Notification+0x166>
 80077d0:	a201      	add	r2, pc, #4	; (adr r2, 80077d8 <SVCCTL_App_Notification+0xfc>)
 80077d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d6:	bf00      	nop
 80077d8:	0800782b 	.word	0x0800782b
 80077dc:	08007801 	.word	0x08007801
 80077e0:	08007843 	.word	0x08007843
 80077e4:	08007843 	.word	0x08007843
 80077e8:	08007843 	.word	0x08007843
 80077ec:	08007843 	.word	0x08007843
 80077f0:	0800783b 	.word	0x0800783b
 80077f4:	08007843 	.word	0x08007843
 80077f8:	0800780f 	.word	0x0800780f
 80077fc:	0800783b 	.word	0x0800783b
            aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8007800:	4b13      	ldr	r3, [pc, #76]	; (8007850 <SVCCTL_App_Notification+0x174>)
 8007802:	8adb      	ldrh	r3, [r3, #22]
 8007804:	4914      	ldr	r1, [pc, #80]	; (8007858 <SVCCTL_App_Notification+0x17c>)
 8007806:	4618      	mov	r0, r3
 8007808:	f7fe f826 	bl	8005858 <aci_gap_pass_key_resp>
        break;
 800780c:	e016      	b.n	800783c <SVCCTL_App_Notification+0x160>
            evt_numeric_value = (aci_gap_numeric_comparison_value_event_rp0 *)blecore_evt->data;
 800780e:	6a3b      	ldr	r3, [r7, #32]
 8007810:	3302      	adds	r3, #2
 8007812:	61fb      	str	r3, [r7, #28]
            numeric_value = evt_numeric_value->Numeric_Value;
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800781a:	61bb      	str	r3, [r7, #24]
            aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800781c:	4b0c      	ldr	r3, [pc, #48]	; (8007850 <SVCCTL_App_Notification+0x174>)
 800781e:	8adb      	ldrh	r3, [r3, #22]
 8007820:	2101      	movs	r1, #1
 8007822:	4618      	mov	r0, r3
 8007824:	f7fe f9c2 	bl	8005bac <aci_gap_numeric_comparison_value_confirm_yesno>
        break;
 8007828:	e008      	b.n	800783c <SVCCTL_App_Notification+0x160>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 800782a:	6a3b      	ldr	r3, [r7, #32]
 800782c:	3302      	adds	r3, #2
 800782e:	617b      	str	r3, [r7, #20]
        break;
 8007830:	e004      	b.n	800783c <SVCCTL_App_Notification+0x160>
      break;
 8007832:	bf00      	nop
 8007834:	e005      	b.n	8007842 <SVCCTL_App_Notification+0x166>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8007836:	bf00      	nop
 8007838:	e003      	b.n	8007842 <SVCCTL_App_Notification+0x166>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800783a:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800783c:	e001      	b.n	8007842 <SVCCTL_App_Notification+0x166>
      break;
 800783e:	bf00      	nop
 8007840:	e000      	b.n	8007844 <SVCCTL_App_Notification+0x168>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007842:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8007844:	2301      	movs	r3, #1
}
 8007846:	4618      	mov	r0, r3
 8007848:	3728      	adds	r7, #40	; 0x28
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	20000174 	.word	0x20000174
 8007854:	2000038c 	.word	0x2000038c
 8007858:	0001b207 	.word	0x0001b207

0800785c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8007862:	4b06      	ldr	r3, [pc, #24]	; (800787c <Ble_Tl_Init+0x20>)
 8007864:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8007866:	4b06      	ldr	r3, [pc, #24]	; (8007880 <Ble_Tl_Init+0x24>)
 8007868:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800786a:	463b      	mov	r3, r7
 800786c:	4619      	mov	r1, r3
 800786e:	4805      	ldr	r0, [pc, #20]	; (8007884 <Ble_Tl_Init+0x28>)
 8007870:	f7ff f8c0 	bl	80069f4 <hci_init>

  return;
 8007874:	bf00      	nop
}
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	200300d4 	.word	0x200300d4
 8007880:	08007b55 	.word	0x08007b55
 8007884:	08007b1d 	.word	0x08007b1d

08007888 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 8007888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800788a:	b08d      	sub	sp, #52	; 0x34
 800788c:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 800788e:	2300      	movs	r3, #0
 8007890:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8007892:	f7fe fdde 	bl	8006452 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 8007896:	f000 f8c1 	bl	8007a1c <BleGetBdAddress>
 800789a:	6178      	str	r0, [r7, #20]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800789c:	697a      	ldr	r2, [r7, #20]
 800789e:	2106      	movs	r1, #6
 80078a0:	2000      	movs	r0, #0
 80078a2:	f7fe fc96 	bl	80061d2 <aci_hal_write_config_data>
#endif

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 80078a6:	4a40      	ldr	r2, [pc, #256]	; (80079a8 <Ble_Hci_Gap_Gatt_Init+0x120>)
 80078a8:	2110      	movs	r1, #16
 80078aa:	2018      	movs	r0, #24
 80078ac:	f7fe fc91 	bl	80061d2 <aci_hal_write_config_data>

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 80078b0:	4a3e      	ldr	r2, [pc, #248]	; (80079ac <Ble_Hci_Gap_Gatt_Init+0x124>)
 80078b2:	2110      	movs	r1, #16
 80078b4:	2008      	movs	r0, #8
 80078b6:	f7fe fc8c 	bl	80061d2 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80078ba:	2118      	movs	r1, #24
 80078bc:	2001      	movs	r0, #1
 80078be:	f7fe fd0d 	bl	80062dc <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 80078c2:	f7fe f9da 	bl	8005c7a <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 80078c6:	2300      	movs	r3, #0
 80078c8:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80078ca:	7cfb      	ldrb	r3, [r7, #19]
 80078cc:	f043 0301 	orr.w	r3, r3, #1
 80078d0:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 80078d2:	7cfb      	ldrb	r3, [r7, #19]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d01d      	beq.n	8007914 <Ble_Hci_Gap_Gatt_Init+0x8c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 80078d8:	4b35      	ldr	r3, [pc, #212]	; (80079b0 <Ble_Hci_Gap_Gatt_Init+0x128>)
 80078da:	60fb      	str	r3, [r7, #12]
    aci_gap_init(role,
 80078dc:	f107 020a 	add.w	r2, r7, #10
 80078e0:	7cf8      	ldrb	r0, [r7, #19]
 80078e2:	1dbb      	adds	r3, r7, #6
 80078e4:	9301      	str	r3, [sp, #4]
 80078e6:	f107 0308 	add.w	r3, r7, #8
 80078ea:	9300      	str	r3, [sp, #0]
 80078ec:	4613      	mov	r3, r2
 80078ee:	2208      	movs	r2, #8
 80078f0:	2100      	movs	r1, #0
 80078f2:	f7fe f818 	bl	8005926 <aci_gap_init>
                 CFG_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle,
                 &gap_dev_name_char_handle,
                 &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 80078f6:	897c      	ldrh	r4, [r7, #10]
 80078f8:	893d      	ldrh	r5, [r7, #8]
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f7f8 fc40 	bl	8000180 <strlen>
 8007900:	4603      	mov	r3, r0
 8007902:	b2da      	uxtb	r2, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	4613      	mov	r3, r2
 800790a:	2200      	movs	r2, #0
 800790c:	4629      	mov	r1, r5
 800790e:	4620      	mov	r0, r4
 8007910:	f7fe fbb6 	bl	8006080 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8007914:	8978      	ldrh	r0, [r7, #10]
 8007916:	88f9      	ldrh	r1, [r7, #6]
 8007918:	1d3b      	adds	r3, r7, #4
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	2302      	movs	r3, #2
 800791e:	2200      	movs	r2, #0
 8007920:	f7fe fbae 	bl	8006080 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8007924:	2202      	movs	r2, #2
 8007926:	2102      	movs	r1, #2
 8007928:	2000      	movs	r0, #0
 800792a:	f7fe fdb6 	bl	800649a <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800792e:	4b21      	ldr	r3, [pc, #132]	; (80079b4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8007930:	2201      	movs	r2, #1
 8007932:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8007934:	4b1f      	ldr	r3, [pc, #124]	; (80079b4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	4618      	mov	r0, r3
 800793a:	f7fd fe75 	bl	8005628 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800793e:	4b1d      	ldr	r3, [pc, #116]	; (80079b4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8007940:	2201      	movs	r2, #1
 8007942:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8007944:	4b1b      	ldr	r3, [pc, #108]	; (80079b4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8007946:	2208      	movs	r2, #8
 8007948:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800794a:	4b1a      	ldr	r3, [pc, #104]	; (80079b4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800794c:	2210      	movs	r2, #16
 800794e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8007950:	4b18      	ldr	r3, [pc, #96]	; (80079b4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8007952:	2200      	movs	r2, #0
 8007954:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8007956:	4b17      	ldr	r3, [pc, #92]	; (80079b4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8007958:	4a17      	ldr	r2, [pc, #92]	; (80079b8 <Ble_Hci_Gap_Gatt_Init+0x130>)
 800795a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800795c:	4b15      	ldr	r3, [pc, #84]	; (80079b4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800795e:	2200      	movs	r2, #0
 8007960:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8007962:	4b14      	ldr	r3, [pc, #80]	; (80079b4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8007964:	789c      	ldrb	r4, [r3, #2]
 8007966:	4b13      	ldr	r3, [pc, #76]	; (80079b4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8007968:	785d      	ldrb	r5, [r3, #1]
 800796a:	4b12      	ldr	r3, [pc, #72]	; (80079b4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800796c:	791b      	ldrb	r3, [r3, #4]
 800796e:	4a11      	ldr	r2, [pc, #68]	; (80079b4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8007970:	7952      	ldrb	r2, [r2, #5]
 8007972:	4910      	ldr	r1, [pc, #64]	; (80079b4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8007974:	78c9      	ldrb	r1, [r1, #3]
 8007976:	480f      	ldr	r0, [pc, #60]	; (80079b4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8007978:	6880      	ldr	r0, [r0, #8]
 800797a:	2600      	movs	r6, #0
 800797c:	9604      	str	r6, [sp, #16]
 800797e:	9003      	str	r0, [sp, #12]
 8007980:	9102      	str	r1, [sp, #8]
 8007982:	9201      	str	r2, [sp, #4]
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	2300      	movs	r3, #0
 8007988:	2201      	movs	r2, #1
 800798a:	4629      	mov	r1, r5
 800798c:	4620      	mov	r0, r4
 800798e:	f7fd fe9f 	bl	80056d0 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8007992:	4b08      	ldr	r3, [pc, #32]	; (80079b4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8007994:	789b      	ldrb	r3, [r3, #2]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d001      	beq.n	800799e <Ble_Hci_Gap_Gatt_Init+0x116>
   {
     aci_gap_configure_whitelist();
 800799a:	f7fe f8e3 	bl	8005b64 <aci_gap_configure_whitelist>
   }
}
 800799e:	bf00      	nop
 80079a0:	371c      	adds	r7, #28
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079a6:	bf00      	nop
 80079a8:	08009444 	.word	0x08009444
 80079ac:	08009454 	.word	0x08009454
 80079b0:	08009238 	.word	0x08009238
 80079b4:	20000174 	.word	0x20000174
 80079b8:	0001b207 	.word	0x0001b207

080079bc <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b08c      	sub	sp, #48	; 0x30
 80079c0:	af08      	add	r7, sp, #32
 80079c2:	4603      	mov	r3, r0
 80079c4:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80079c6:	2392      	movs	r3, #146	; 0x92
 80079c8:	73fb      	strb	r3, [r7, #15]

    BleApplicationContext.Device_Connection_Status = New_Status;
 80079ca:	4a12      	ldr	r2, [pc, #72]	; (8007a14 <Adv_Request+0x58>)
 80079cc:	79fb      	ldrb	r3, [r7, #7]
 80079ce:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 80079d2:	2300      	movs	r3, #0
 80079d4:	9306      	str	r3, [sp, #24]
 80079d6:	2300      	movs	r3, #0
 80079d8:	9305      	str	r3, [sp, #20]
 80079da:	2300      	movs	r3, #0
 80079dc:	9304      	str	r3, [sp, #16]
 80079de:	2300      	movs	r3, #0
 80079e0:	9303      	str	r3, [sp, #12]
 80079e2:	2300      	movs	r3, #0
 80079e4:	9302      	str	r3, [sp, #8]
 80079e6:	2300      	movs	r3, #0
 80079e8:	9301      	str	r3, [sp, #4]
 80079ea:	2300      	movs	r3, #0
 80079ec:	9300      	str	r3, [sp, #0]
 80079ee:	2300      	movs	r3, #0
 80079f0:	22a0      	movs	r2, #160	; 0xa0
 80079f2:	2180      	movs	r1, #128	; 0x80
 80079f4:	2000      	movs	r0, #0
 80079f6:	f7fd fd1d 	bl	8005434 <aci_gap_set_discoverable>
 80079fa:	4603      	mov	r3, r0
 80079fc:	73fb      	strb	r3, [r7, #15]
        0,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(ad_data), (uint8_t*) ad_data);
 80079fe:	4906      	ldr	r1, [pc, #24]	; (8007a18 <Adv_Request+0x5c>)
 8007a00:	2008      	movs	r0, #8
 8007a02:	f7fe f83d 	bl	8005a80 <aci_gap_update_adv_data>
 8007a06:	4603      	mov	r3, r0
 8007a08:	73fb      	strb	r3, [r7, #15]
    else
    {
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
    }

  return;
 8007a0a:	bf00      	nop
}
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	20000174 	.word	0x20000174
 8007a18:	20000010 	.word	0x20000010

08007a1c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8007a22:	f7ff fddf 	bl	80075e4 <LL_FLASH_GetUDN>
 8007a26:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a2e:	d023      	beq.n	8007a78 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8007a30:	f7ff fdf0 	bl	8007614 <LL_FLASH_GetSTCompanyID>
 8007a34:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8007a36:	f7ff fde1 	bl	80075fc <LL_FLASH_GetDeviceID>
 8007a3a:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	b2da      	uxtb	r2, r3
 8007a40:	4b16      	ldr	r3, [pc, #88]	; (8007a9c <BleGetBdAddress+0x80>)
 8007a42:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	0a1b      	lsrs	r3, r3, #8
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	4b14      	ldr	r3, [pc, #80]	; (8007a9c <BleGetBdAddress+0x80>)
 8007a4c:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	4b12      	ldr	r3, [pc, #72]	; (8007a9c <BleGetBdAddress+0x80>)
 8007a54:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	b2da      	uxtb	r2, r3
 8007a5a:	4b10      	ldr	r3, [pc, #64]	; (8007a9c <BleGetBdAddress+0x80>)
 8007a5c:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	0a1b      	lsrs	r3, r3, #8
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	4b0d      	ldr	r3, [pc, #52]	; (8007a9c <BleGetBdAddress+0x80>)
 8007a66:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	0c1b      	lsrs	r3, r3, #16
 8007a6c:	b2da      	uxtb	r2, r3
 8007a6e:	4b0b      	ldr	r3, [pc, #44]	; (8007a9c <BleGetBdAddress+0x80>)
 8007a70:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8007a72:	4b0a      	ldr	r3, [pc, #40]	; (8007a9c <BleGetBdAddress+0x80>)
 8007a74:	617b      	str	r3, [r7, #20]
 8007a76:	e00b      	b.n	8007a90 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8007a78:	2000      	movs	r0, #0
 8007a7a:	f7ff fccd 	bl	8007418 <OTP_Read>
 8007a7e:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d002      	beq.n	8007a8c <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	617b      	str	r3, [r7, #20]
 8007a8a:	e001      	b.n	8007a90 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8007a8c:	4b04      	ldr	r3, [pc, #16]	; (8007aa0 <BleGetBdAddress+0x84>)
 8007a8e:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 8007a90:	697b      	ldr	r3, [r7, #20]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3718      	adds	r7, #24
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	20000384 	.word	0x20000384
 8007aa0:	0800943c 	.word	0x0800943c

08007aa4 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8007aaa:	4b0a      	ldr	r3, [pc, #40]	; (8007ad4 <Adv_Cancel+0x30>)
 8007aac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ab0:	2b05      	cmp	r3, #5
 8007ab2:	d00a      	beq.n	8007aca <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 8007ab8:	f7fd fc98 	bl	80053ec <aci_gap_set_non_discoverable>
 8007abc:	4603      	mov	r3, r0
 8007abe:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007ac0:	4b04      	ldr	r3, [pc, #16]	; (8007ad4 <Adv_Cancel+0x30>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 8007ac8:	bf00      	nop
 8007aca:	bf00      	nop
}
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	20000174 	.word	0x20000174

08007ad8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	2002      	movs	r0, #2
 8007ae4:	f000 fd92 	bl	800860c <UTIL_SEQ_SetTask>
  return;
 8007ae8:	bf00      	nop
}
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007af8:	2001      	movs	r0, #1
 8007afa:	f000 fdf3 	bl	80086e4 <UTIL_SEQ_SetEvt>
  return;
 8007afe:	bf00      	nop
}
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b082      	sub	sp, #8
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007b0e:	2001      	movs	r0, #1
 8007b10:	f000 fe08 	bl	8008724 <UTIL_SEQ_WaitEvt>
  return;
 8007b14:	bf00      	nop
}
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	3308      	adds	r3, #8
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7fe fe1a 	bl	8006768 <SVCCTL_UserEvtRx>
 8007b34:	4603      	mov	r3, r0
 8007b36:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8007b38:	7afb      	ldrb	r3, [r7, #11]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2201      	movs	r2, #1
 8007b42:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8007b44:	e003      	b.n	8007b4e <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	701a      	strb	r2, [r3, #0]
  return;
 8007b4c:	bf00      	nop
}
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8007b5e:	79fb      	ldrb	r3, [r7, #7]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d002      	beq.n	8007b6a <BLE_StatusNot+0x16>
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d006      	beq.n	8007b76 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8007b68:	e00b      	b.n	8007b82 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007b6a:	2307      	movs	r3, #7
 8007b6c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f000 fd78 	bl	8008664 <UTIL_SEQ_PauseTask>
      break;
 8007b74:	e005      	b.n	8007b82 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007b76:	2307      	movs	r3, #7
 8007b78:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f000 fd92 	bl	80086a4 <UTIL_SEQ_ResumeTask>
      break;
 8007b80:	bf00      	nop
  }
  return;
 8007b82:	bf00      	nop
}
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
	...

08007b8c <myTask>:
static void Custom_Mycharnotify_Update_Char(void);
static void Custom_Mycharnotify_Send_Notification(void);

/* USER CODE BEGIN PFP */
	void myTask(void)
	{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	af00      	add	r7, sp, #0
		//Read the Button State
		if(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8007b90:	2110      	movs	r1, #16
 8007b92:	480a      	ldr	r0, [pc, #40]	; (8007bbc <myTask+0x30>)
 8007b94:	f7fa fdc0 	bl	8002718 <HAL_GPIO_ReadPin>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d108      	bne.n	8007bb0 <myTask+0x24>
		{
			UpdateCharData[0] ^= 0x1;
 8007b9e:	4b08      	ldr	r3, [pc, #32]	; (8007bc0 <myTask+0x34>)
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	f083 0301 	eor.w	r3, r3, #1
 8007ba6:	b2da      	uxtb	r2, r3
 8007ba8:	4b05      	ldr	r3, [pc, #20]	; (8007bc0 <myTask+0x34>)
 8007baa:	701a      	strb	r2, [r3, #0]
			Custom_Mycharnotify_Update_Char();		//Depends on Characteristic long name from CubeMX
 8007bac:	f000 f842 	bl	8007c34 <Custom_Mycharnotify_Update_Char>
		}
		UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	2004      	movs	r0, #4
 8007bb4:	f000 fd2a 	bl	800860c <UTIL_SEQ_SetTask>
	}
 8007bb8:	bf00      	nop
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	48000800 	.word	0x48000800
 8007bc0:	20000390 	.word	0x20000390

08007bc4 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch(pNotification->Custom_Evt_Opcode)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d006      	beq.n	8007be2 <Custom_STM_App_Notification+0x1e>
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	dc06      	bgt.n	8007be6 <Custom_STM_App_Notification+0x22>
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d006      	beq.n	8007bea <Custom_STM_App_Notification+0x26>
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d006      	beq.n	8007bee <Custom_STM_App_Notification+0x2a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8007be0:	e001      	b.n	8007be6 <Custom_STM_App_Notification+0x22>
      break;
 8007be2:	bf00      	nop
 8007be4:	e004      	b.n	8007bf0 <Custom_STM_App_Notification+0x2c>
      break;
 8007be6:	bf00      	nop
 8007be8:	e002      	b.n	8007bf0 <Custom_STM_App_Notification+0x2c>
      break;
 8007bea:	bf00      	nop
 8007bec:	e000      	b.n	8007bf0 <Custom_STM_App_Notification+0x2c>
      break;
 8007bee:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8007bf0:	bf00      	nop
}
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch(pNotification->Custom_Evt_Opcode)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d002      	beq.n	8007c12 <Custom_APP_Notification+0x16>
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d002      	beq.n	8007c16 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8007c10:	e002      	b.n	8007c18 <Custom_APP_Notification+0x1c>
      break;
 8007c12:	bf00      	nop
 8007c14:	e000      	b.n	8007c18 <Custom_APP_Notification+0x1c>
      break;
 8007c16:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8007c18:	bf00      	nop
}
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8007c24:	b480      	push	{r7}
 8007c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8007c28:	bf00      	nop
}
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
	...

08007c34 <Custom_Mycharnotify_Update_Char>:
 *
 *************************************************************/

  /* LED_SVC */
void Custom_Mycharnotify_Update_Char(void) /* Property Read */
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	af00      	add	r7, sp, #0
  Custom_STM_App_Update_Char(CUSTOM_STM_MYCHARNOTIFY, (uint8_t *)UpdateCharData);
 8007c38:	4902      	ldr	r1, [pc, #8]	; (8007c44 <Custom_Mycharnotify_Update_Char+0x10>)
 8007c3a:	2001      	movs	r0, #1
 8007c3c:	f000 f918 	bl	8007e70 <Custom_STM_App_Update_Char>
  /* USER CODE BEGIN Mycharnotify_UC*/

  /* USER CODE END Mycharnotify_UC*/
  return;
 8007c40:	bf00      	nop
}
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	20000390 	.word	0x20000390

08007c48 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b08a      	sub	sp, #40	; 0x28
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8007c50:	2300      	movs	r3, #0
 8007c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8007c5c:	6a3b      	ldr	r3, [r7, #32]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	2bff      	cmp	r3, #255	; 0xff
 8007c62:	d157      	bne.n	8007d14 <Custom_STM_Event_Handler+0xcc>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	3302      	adds	r3, #2
 8007c68:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	881b      	ldrh	r3, [r3, #0]
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	f640 4214 	movw	r2, #3092	; 0xc14
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d047      	beq.n	8007d08 <Custom_STM_Event_Handler+0xc0>
 8007c78:	f640 4214 	movw	r2, #3092	; 0xc14
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	dc45      	bgt.n	8007d0c <Custom_STM_Event_Handler+0xc4>
 8007c80:	f640 4201 	movw	r2, #3073	; 0xc01
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d003      	beq.n	8007c90 <Custom_STM_Event_Handler+0x48>
 8007c88:	f640 4213 	movw	r2, #3091	; 0xc13
 8007c8c:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8007c8e:	e040      	b.n	8007d12 <Custom_STM_Event_Handler+0xca>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	3302      	adds	r3, #2
 8007c94:	61bb      	str	r3, [r7, #24]
          if(attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	885b      	ldrh	r3, [r3, #2]
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	4b21      	ldr	r3, [pc, #132]	; (8007d24 <Custom_STM_Event_Handler+0xdc>)
 8007ca0:	889b      	ldrh	r3, [r3, #4]
 8007ca2:	3302      	adds	r3, #2
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d119      	bne.n	8007cdc <Custom_STM_Event_Handler+0x94>
            return_value = SVCCTL_EvtAckFlowEnable;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch(attribute_modified->Attr_Data[0])
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	7a1b      	ldrb	r3, [r3, #8]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d002      	beq.n	8007cbc <Custom_STM_Event_Handler+0x74>
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d008      	beq.n	8007ccc <Custom_STM_Event_Handler+0x84>
              break;
 8007cba:	e024      	b.n	8007d06 <Custom_STM_Event_Handler+0xbe>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT;
 8007cbc:	2302      	movs	r3, #2
 8007cbe:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8007cc0:	f107 0308 	add.w	r3, r7, #8
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f7ff ff7d 	bl	8007bc4 <Custom_STM_App_Notification>
                break;
 8007cca:	e01c      	b.n	8007d06 <Custom_STM_Event_Handler+0xbe>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8007cd0:	f107 0308 	add.w	r3, r7, #8
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7ff ff75 	bl	8007bc4 <Custom_STM_App_Notification>
                break;
 8007cda:	e014      	b.n	8007d06 <Custom_STM_Event_Handler+0xbe>
          else if(attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	885b      	ldrh	r3, [r3, #2]
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	4b0f      	ldr	r3, [pc, #60]	; (8007d24 <Custom_STM_Event_Handler+0xdc>)
 8007ce6:	885b      	ldrh	r3, [r3, #2]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d110      	bne.n	8007d10 <Custom_STM_Event_Handler+0xc8>
            return_value = SVCCTL_EvtAckFlowEnable;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (attribute_modified->Attr_Data[0] == 0x22)
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	7a1b      	ldrb	r3, [r3, #8]
 8007cf8:	2b22      	cmp	r3, #34	; 0x22
 8007cfa:	d109      	bne.n	8007d10 <Custom_STM_Event_Handler+0xc8>
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8007cfc:	2101      	movs	r1, #1
 8007cfe:	480a      	ldr	r0, [pc, #40]	; (8007d28 <Custom_STM_Event_Handler+0xe0>)
 8007d00:	f7fa fd3a 	bl	8002778 <HAL_GPIO_TogglePin>
          break;
 8007d04:	e004      	b.n	8007d10 <Custom_STM_Event_Handler+0xc8>
 8007d06:	e003      	b.n	8007d10 <Custom_STM_Event_Handler+0xc8>
          break;
 8007d08:	bf00      	nop
 8007d0a:	e004      	b.n	8007d16 <Custom_STM_Event_Handler+0xce>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8007d0c:	bf00      	nop
 8007d0e:	e002      	b.n	8007d16 <Custom_STM_Event_Handler+0xce>
          break;
 8007d10:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007d12:	e000      	b.n	8007d16 <Custom_STM_Event_Handler+0xce>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8007d14:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8007d16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3728      	adds	r7, #40	; 0x28
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	20000158 	.word	0x20000158
 8007d28:	48000400 	.word	0x48000400

08007d2c <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b08a      	sub	sp, #40	; 0x28
 8007d30:	af06      	add	r7, sp, #24
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8007d32:	484b      	ldr	r0, [pc, #300]	; (8007e60 <SVCCTL_InitCustomSvc+0x134>)
 8007d34:	f7fe fcfe 	bl	8006734 <SVCCTL_RegisterSvcHandler>
   *                                2 for myCharNotify +
   *                                1 for myCharNotify configuration descriptor +
   *                              = 6
   */

  COPY_LED_SVC_UUID(uuid.Char_UUID_128);
 8007d38:	238f      	movs	r3, #143	; 0x8f
 8007d3a:	703b      	strb	r3, [r7, #0]
 8007d3c:	23e5      	movs	r3, #229	; 0xe5
 8007d3e:	707b      	strb	r3, [r7, #1]
 8007d40:	23b3      	movs	r3, #179	; 0xb3
 8007d42:	70bb      	strb	r3, [r7, #2]
 8007d44:	23d5      	movs	r3, #213	; 0xd5
 8007d46:	70fb      	strb	r3, [r7, #3]
 8007d48:	232e      	movs	r3, #46	; 0x2e
 8007d4a:	713b      	strb	r3, [r7, #4]
 8007d4c:	237f      	movs	r3, #127	; 0x7f
 8007d4e:	717b      	strb	r3, [r7, #5]
 8007d50:	234a      	movs	r3, #74	; 0x4a
 8007d52:	71bb      	strb	r3, [r7, #6]
 8007d54:	2398      	movs	r3, #152	; 0x98
 8007d56:	71fb      	strb	r3, [r7, #7]
 8007d58:	232a      	movs	r3, #42	; 0x2a
 8007d5a:	723b      	strb	r3, [r7, #8]
 8007d5c:	2348      	movs	r3, #72	; 0x48
 8007d5e:	727b      	strb	r3, [r7, #9]
 8007d60:	237a      	movs	r3, #122	; 0x7a
 8007d62:	72bb      	strb	r3, [r7, #10]
 8007d64:	23cc      	movs	r3, #204	; 0xcc
 8007d66:	72fb      	strb	r3, [r7, #11]
 8007d68:	2300      	movs	r3, #0
 8007d6a:	733b      	strb	r3, [r7, #12]
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	737b      	strb	r3, [r7, #13]
 8007d70:	2300      	movs	r3, #0
 8007d72:	73bb      	strb	r3, [r7, #14]
 8007d74:	2300      	movs	r3, #0
 8007d76:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_service(UUID_TYPE_128,
 8007d78:	4639      	mov	r1, r7
 8007d7a:	4b3a      	ldr	r3, [pc, #232]	; (8007e64 <SVCCTL_InitCustomSvc+0x138>)
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	2306      	movs	r3, #6
 8007d80:	2201      	movs	r2, #1
 8007d82:	2002      	movs	r0, #2
 8007d84:	f7fd ff9e 	bl	8005cc4 <aci_gatt_add_service>
                       &(CustomContext.CustomLed_SvcHdle));

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 8007d88:	2319      	movs	r3, #25
 8007d8a:	703b      	strb	r3, [r7, #0]
 8007d8c:	23ed      	movs	r3, #237	; 0xed
 8007d8e:	707b      	strb	r3, [r7, #1]
 8007d90:	2382      	movs	r3, #130	; 0x82
 8007d92:	70bb      	strb	r3, [r7, #2]
 8007d94:	23ae      	movs	r3, #174	; 0xae
 8007d96:	70fb      	strb	r3, [r7, #3]
 8007d98:	23ed      	movs	r3, #237	; 0xed
 8007d9a:	713b      	strb	r3, [r7, #4]
 8007d9c:	2321      	movs	r3, #33	; 0x21
 8007d9e:	717b      	strb	r3, [r7, #5]
 8007da0:	234c      	movs	r3, #76	; 0x4c
 8007da2:	71bb      	strb	r3, [r7, #6]
 8007da4:	239d      	movs	r3, #157	; 0x9d
 8007da6:	71fb      	strb	r3, [r7, #7]
 8007da8:	2341      	movs	r3, #65	; 0x41
 8007daa:	723b      	strb	r3, [r7, #8]
 8007dac:	2345      	movs	r3, #69	; 0x45
 8007dae:	727b      	strb	r3, [r7, #9]
 8007db0:	2322      	movs	r3, #34	; 0x22
 8007db2:	72bb      	strb	r3, [r7, #10]
 8007db4:	238e      	movs	r3, #142	; 0x8e
 8007db6:	72fb      	strb	r3, [r7, #11]
 8007db8:	2300      	movs	r3, #0
 8007dba:	733b      	strb	r3, [r7, #12]
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	737b      	strb	r3, [r7, #13]
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	73bb      	strb	r3, [r7, #14]
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomLed_SvcHdle,
 8007dc8:	4b26      	ldr	r3, [pc, #152]	; (8007e64 <SVCCTL_InitCustomSvc+0x138>)
 8007dca:	8818      	ldrh	r0, [r3, #0]
 8007dcc:	2301      	movs	r3, #1
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	463a      	mov	r2, r7
 8007dd2:	4925      	ldr	r1, [pc, #148]	; (8007e68 <SVCCTL_InitCustomSvc+0x13c>)
 8007dd4:	9105      	str	r1, [sp, #20]
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	9104      	str	r1, [sp, #16]
 8007dda:	2110      	movs	r1, #16
 8007ddc:	9103      	str	r1, [sp, #12]
 8007dde:	2101      	movs	r1, #1
 8007de0:	9102      	str	r1, [sp, #8]
 8007de2:	2100      	movs	r1, #0
 8007de4:	9101      	str	r1, [sp, #4]
 8007de6:	2108      	movs	r1, #8
 8007de8:	9100      	str	r1, [sp, #0]
 8007dea:	2102      	movs	r1, #2
 8007dec:	f7fe f840 	bl	8005e70 <aci_gatt_add_char>
                    CHAR_VALUE_LEN_CONSTANT,
                    &(CustomContext.CustomMycharwriteHdle));
  /**
   *  myCharNotify
   */
  COPY_MYCHARNOTIFY_UUID(uuid.Char_UUID_128);
 8007df0:	2319      	movs	r3, #25
 8007df2:	703b      	strb	r3, [r7, #0]
 8007df4:	23ed      	movs	r3, #237	; 0xed
 8007df6:	707b      	strb	r3, [r7, #1]
 8007df8:	2382      	movs	r3, #130	; 0x82
 8007dfa:	70bb      	strb	r3, [r7, #2]
 8007dfc:	23ae      	movs	r3, #174	; 0xae
 8007dfe:	70fb      	strb	r3, [r7, #3]
 8007e00:	23ed      	movs	r3, #237	; 0xed
 8007e02:	713b      	strb	r3, [r7, #4]
 8007e04:	2321      	movs	r3, #33	; 0x21
 8007e06:	717b      	strb	r3, [r7, #5]
 8007e08:	234c      	movs	r3, #76	; 0x4c
 8007e0a:	71bb      	strb	r3, [r7, #6]
 8007e0c:	239d      	movs	r3, #157	; 0x9d
 8007e0e:	71fb      	strb	r3, [r7, #7]
 8007e10:	2341      	movs	r3, #65	; 0x41
 8007e12:	723b      	strb	r3, [r7, #8]
 8007e14:	2345      	movs	r3, #69	; 0x45
 8007e16:	727b      	strb	r3, [r7, #9]
 8007e18:	2322      	movs	r3, #34	; 0x22
 8007e1a:	72bb      	strb	r3, [r7, #10]
 8007e1c:	238e      	movs	r3, #142	; 0x8e
 8007e1e:	72fb      	strb	r3, [r7, #11]
 8007e20:	2301      	movs	r3, #1
 8007e22:	733b      	strb	r3, [r7, #12]
 8007e24:	2300      	movs	r3, #0
 8007e26:	737b      	strb	r3, [r7, #13]
 8007e28:	2300      	movs	r3, #0
 8007e2a:	73bb      	strb	r3, [r7, #14]
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomLed_SvcHdle,
 8007e30:	4b0c      	ldr	r3, [pc, #48]	; (8007e64 <SVCCTL_InitCustomSvc+0x138>)
 8007e32:	8818      	ldrh	r0, [r3, #0]
 8007e34:	2301      	movs	r3, #1
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	463a      	mov	r2, r7
 8007e3a:	490c      	ldr	r1, [pc, #48]	; (8007e6c <SVCCTL_InitCustomSvc+0x140>)
 8007e3c:	9105      	str	r1, [sp, #20]
 8007e3e:	2100      	movs	r1, #0
 8007e40:	9104      	str	r1, [sp, #16]
 8007e42:	2110      	movs	r1, #16
 8007e44:	9103      	str	r1, [sp, #12]
 8007e46:	2107      	movs	r1, #7
 8007e48:	9102      	str	r1, [sp, #8]
 8007e4a:	2100      	movs	r1, #0
 8007e4c:	9101      	str	r1, [sp, #4]
 8007e4e:	2110      	movs	r1, #16
 8007e50:	9100      	str	r1, [sp, #0]
 8007e52:	2102      	movs	r1, #2
 8007e54:	f7fe f80c 	bl	8005e70 <aci_gatt_add_char>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8007e58:	bf00      	nop
}
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	08007c49 	.word	0x08007c49
 8007e64:	20000158 	.word	0x20000158
 8007e68:	2000015a 	.word	0x2000015a
 8007e6c:	2000015c 	.word	0x2000015c

08007e70 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af02      	add	r7, sp, #8
 8007e76:	4603      	mov	r3, r0
 8007e78:	6039      	str	r1, [r7, #0]
 8007e7a:	71fb      	strb	r3, [r7, #7]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8007e7c:	2392      	movs	r3, #146	; 0x92
 8007e7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch(CharOpcode)
 8007e80:	79fb      	ldrb	r3, [r7, #7]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d002      	beq.n	8007e8c <Custom_STM_App_Update_Char+0x1c>
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d00e      	beq.n	8007ea8 <Custom_STM_App_Update_Char+0x38>

      /* USER CODE END CUSTOM_STM_Service_1_Char_2*/
      break;

    default:
      break;
 8007e8a:	e01b      	b.n	8007ec4 <Custom_STM_App_Update_Char+0x54>
      result = aci_gatt_update_char_value(CustomContext.CustomLed_SvcHdle,
 8007e8c:	4b10      	ldr	r3, [pc, #64]	; (8007ed0 <Custom_STM_App_Update_Char+0x60>)
 8007e8e:	8818      	ldrh	r0, [r3, #0]
 8007e90:	4b0f      	ldr	r3, [pc, #60]	; (8007ed0 <Custom_STM_App_Update_Char+0x60>)
 8007e92:	8859      	ldrh	r1, [r3, #2]
 8007e94:	2201      	movs	r2, #1
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	9300      	str	r3, [sp, #0]
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f7fe f8ef 	bl	8006080 <aci_gatt_update_char_value>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ea6:	e00d      	b.n	8007ec4 <Custom_STM_App_Update_Char+0x54>
      result = aci_gatt_update_char_value(CustomContext.CustomLed_SvcHdle,
 8007ea8:	4b09      	ldr	r3, [pc, #36]	; (8007ed0 <Custom_STM_App_Update_Char+0x60>)
 8007eaa:	8818      	ldrh	r0, [r3, #0]
 8007eac:	4b08      	ldr	r3, [pc, #32]	; (8007ed0 <Custom_STM_App_Update_Char+0x60>)
 8007eae:	8899      	ldrh	r1, [r3, #4]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f7fe f8e1 	bl	8006080 <aci_gatt_update_char_value>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ec2:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return result;
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	20000158 	.word	0x20000158

08007ed4 <LL_PWR_EnableBootC2>:
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8007ed8:	4b05      	ldr	r3, [pc, #20]	; (8007ef0 <LL_PWR_EnableBootC2+0x1c>)
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	4a04      	ldr	r2, [pc, #16]	; (8007ef0 <LL_PWR_EnableBootC2+0x1c>)
 8007ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ee2:	60d3      	str	r3, [r2, #12]
}
 8007ee4:	bf00      	nop
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	58000400 	.word	0x58000400

08007ef4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8007efc:	4b06      	ldr	r3, [pc, #24]	; (8007f18 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8007efe:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8007f02:	4905      	ldr	r1, [pc, #20]	; (8007f18 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr
 8007f18:	58000800 	.word	0x58000800

08007f1c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8007f24:	4b05      	ldr	r3, [pc, #20]	; (8007f3c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007f26:	6a1a      	ldr	r2, [r3, #32]
 8007f28:	4904      	ldr	r1, [pc, #16]	; (8007f3c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	620b      	str	r3, [r1, #32]
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr
 8007f3c:	58000800 	.word	0x58000800

08007f40 <LL_AHB3_GRP1_EnableClock>:
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8007f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8007f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4013      	ands	r3, r2
 8007f62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007f64:	68fb      	ldr	r3, [r7, #12]
}
 8007f66:	bf00      	nop
 8007f68:	3714      	adds	r7, #20
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr

08007f72 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8007f72:	b480      	push	{r7}
 8007f74:	b085      	sub	sp, #20
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8007f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f7e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8007f82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8007f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f92:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4013      	ands	r3, r2
 8007f9a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
}
 8007f9e:	bf00      	nop
 8007fa0:	3714      	adds	r7, #20
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <LL_C1_IPCC_EnableIT_TXF>:
{
 8007faa:	b480      	push	{r7}
 8007fac:	b083      	sub	sp, #12
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	601a      	str	r2, [r3, #0]
}
 8007fbe:	bf00      	nop
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <LL_C1_IPCC_EnableIT_RXO>:
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b083      	sub	sp, #12
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f043 0201 	orr.w	r2, r3, #1
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	601a      	str	r2, [r3, #0]
}
 8007fde:	bf00      	nop
 8007fe0:	370c      	adds	r7, #12
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <LL_C1_IPCC_EnableTransmitChannel>:
{
 8007fea:	b480      	push	{r7}
 8007fec:	b083      	sub	sp, #12
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	041b      	lsls	r3, r3, #16
 8007ffc:	43db      	mvns	r3, r3
 8007ffe:	401a      	ands	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	605a      	str	r2, [r3, #4]
}
 8008004:	bf00      	nop
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	685a      	ldr	r2, [r3, #4]
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	041b      	lsls	r3, r3, #16
 8008022:	431a      	orrs	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	605a      	str	r2, [r3, #4]
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	685a      	ldr	r2, [r3, #4]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	43db      	mvns	r3, r3
 8008046:	401a      	ands	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	605a      	str	r2, [r3, #4]
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	683a      	ldr	r2, [r7, #0]
 8008066:	609a      	str	r2, [r3, #8]
}
 8008068:	bf00      	nop
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <LL_C1_IPCC_SetFlag_CHx>:
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	041a      	lsls	r2, r3, #16
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	609a      	str	r2, [r3, #8]
}
 8008086:	bf00      	nop
 8008088:	370c      	adds	r7, #12
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr

08008092 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8008092:	b480      	push	{r7}
 8008094:	b083      	sub	sp, #12
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
 800809a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	68da      	ldr	r2, [r3, #12]
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	4013      	ands	r3, r2
 80080a4:	683a      	ldr	r2, [r7, #0]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d101      	bne.n	80080ae <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80080aa:	2301      	movs	r3, #1
 80080ac:	e000      	b.n	80080b0 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	69da      	ldr	r2, [r3, #28]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	4013      	ands	r3, r2
 80080ce:	683a      	ldr	r2, [r7, #0]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d101      	bne.n	80080d8 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80080d4:	2301      	movs	r3, #1
 80080d6:	e000      	b.n	80080da <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	370c      	adds	r7, #12
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
	...

080080e8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80080ec:	2102      	movs	r1, #2
 80080ee:	4819      	ldr	r0, [pc, #100]	; (8008154 <HW_IPCC_Rx_Handler+0x6c>)
 80080f0:	f7ff ffe4 	bl	80080bc <LL_C2_IPCC_IsActiveFlag_CHx>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d009      	beq.n	800810e <HW_IPCC_Rx_Handler+0x26>
 80080fa:	4b16      	ldr	r3, [pc, #88]	; (8008154 <HW_IPCC_Rx_Handler+0x6c>)
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	43db      	mvns	r3, r3
 8008100:	f003 0302 	and.w	r3, r3, #2
 8008104:	2b00      	cmp	r3, #0
 8008106:	d002      	beq.n	800810e <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8008108:	f000 f8da 	bl	80082c0 <HW_IPCC_SYS_EvtHandler>
 800810c:	e01f      	b.n	800814e <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800810e:	2101      	movs	r1, #1
 8008110:	4810      	ldr	r0, [pc, #64]	; (8008154 <HW_IPCC_Rx_Handler+0x6c>)
 8008112:	f7ff ffd3 	bl	80080bc <LL_C2_IPCC_IsActiveFlag_CHx>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d008      	beq.n	800812e <HW_IPCC_Rx_Handler+0x46>
 800811c:	4b0d      	ldr	r3, [pc, #52]	; (8008154 <HW_IPCC_Rx_Handler+0x6c>)
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	f003 0301 	and.w	r3, r3, #1
 8008124:	2b00      	cmp	r3, #0
 8008126:	d102      	bne.n	800812e <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8008128:	f000 f88e 	bl	8008248 <HW_IPCC_BLE_EvtHandler>
 800812c:	e00f      	b.n	800814e <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800812e:	2108      	movs	r1, #8
 8008130:	4808      	ldr	r0, [pc, #32]	; (8008154 <HW_IPCC_Rx_Handler+0x6c>)
 8008132:	f7ff ffc3 	bl	80080bc <LL_C2_IPCC_IsActiveFlag_CHx>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d009      	beq.n	8008150 <HW_IPCC_Rx_Handler+0x68>
 800813c:	4b05      	ldr	r3, [pc, #20]	; (8008154 <HW_IPCC_Rx_Handler+0x6c>)
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	43db      	mvns	r3, r3
 8008142:	f003 0308 	and.w	r3, r3, #8
 8008146:	2b00      	cmp	r3, #0
 8008148:	d002      	beq.n	8008150 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800814a:	f000 f905 	bl	8008358 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800814e:	bf00      	nop
 8008150:	bf00      	nop
}
 8008152:	bd80      	pop	{r7, pc}
 8008154:	58000c00 	.word	0x58000c00

08008158 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800815c:	2102      	movs	r1, #2
 800815e:	481a      	ldr	r0, [pc, #104]	; (80081c8 <HW_IPCC_Tx_Handler+0x70>)
 8008160:	f7ff ff97 	bl	8008092 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d109      	bne.n	800817e <HW_IPCC_Tx_Handler+0x26>
 800816a:	4b17      	ldr	r3, [pc, #92]	; (80081c8 <HW_IPCC_Tx_Handler+0x70>)
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	43db      	mvns	r3, r3
 8008170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d002      	beq.n	800817e <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8008178:	f000 f896 	bl	80082a8 <HW_IPCC_SYS_CmdEvtHandler>
 800817c:	e020      	b.n	80081c0 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800817e:	2108      	movs	r1, #8
 8008180:	4811      	ldr	r0, [pc, #68]	; (80081c8 <HW_IPCC_Tx_Handler+0x70>)
 8008182:	f7ff ff86 	bl	8008092 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d109      	bne.n	80081a0 <HW_IPCC_Tx_Handler+0x48>
 800818c:	4b0e      	ldr	r3, [pc, #56]	; (80081c8 <HW_IPCC_Tx_Handler+0x70>)
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	43db      	mvns	r3, r3
 8008192:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008196:	2b00      	cmp	r3, #0
 8008198:	d002      	beq.n	80081a0 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 800819a:	f000 f8bf 	bl	800831c <HW_IPCC_MM_FreeBufHandler>
 800819e:	e00f      	b.n	80081c0 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80081a0:	2120      	movs	r1, #32
 80081a2:	4809      	ldr	r0, [pc, #36]	; (80081c8 <HW_IPCC_Tx_Handler+0x70>)
 80081a4:	f7ff ff75 	bl	8008092 <LL_C1_IPCC_IsActiveFlag_CHx>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d109      	bne.n	80081c2 <HW_IPCC_Tx_Handler+0x6a>
 80081ae:	4b06      	ldr	r3, [pc, #24]	; (80081c8 <HW_IPCC_Tx_Handler+0x70>)
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	43db      	mvns	r3, r3
 80081b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d002      	beq.n	80081c2 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80081bc:	f000 f850 	bl	8008260 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80081c0:	bf00      	nop
 80081c2:	bf00      	nop
}
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	58000c00 	.word	0x58000c00

080081cc <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80081d0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80081d4:	f7ff fecd 	bl	8007f72 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80081d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80081dc:	f7ff fe8a 	bl	8007ef4 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80081e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80081e4:	f7ff fe9a 	bl	8007f1c <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80081e8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80081ea:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80081ec:	f7ff fe72 	bl	8007ed4 <LL_PWR_EnableBootC2>

  return;
 80081f0:	bf00      	nop
}
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80081f8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80081fc:	f7ff fea0 	bl	8007f40 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8008200:	4806      	ldr	r0, [pc, #24]	; (800821c <HW_IPCC_Init+0x28>)
 8008202:	f7ff fee2 	bl	8007fca <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8008206:	4805      	ldr	r0, [pc, #20]	; (800821c <HW_IPCC_Init+0x28>)
 8008208:	f7ff fecf 	bl	8007faa <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800820c:	202c      	movs	r0, #44	; 0x2c
 800820e:	f7fa f8ce 	bl	80023ae <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8008212:	202d      	movs	r0, #45	; 0x2d
 8008214:	f7fa f8cb 	bl	80023ae <HAL_NVIC_EnableIRQ>

  return;
 8008218:	bf00      	nop
}
 800821a:	bd80      	pop	{r7, pc}
 800821c:	58000c00 	.word	0x58000c00

08008220 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8008220:	b580      	push	{r7, lr}
 8008222:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008224:	2101      	movs	r1, #1
 8008226:	4802      	ldr	r0, [pc, #8]	; (8008230 <HW_IPCC_BLE_Init+0x10>)
 8008228:	f7ff ff04 	bl	8008034 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800822c:	bf00      	nop
}
 800822e:	bd80      	pop	{r7, pc}
 8008230:	58000c00 	.word	0x58000c00

08008234 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8008234:	b580      	push	{r7, lr}
 8008236:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8008238:	2101      	movs	r1, #1
 800823a:	4802      	ldr	r0, [pc, #8]	; (8008244 <HW_IPCC_BLE_SendCmd+0x10>)
 800823c:	f7ff ff1a 	bl	8008074 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008240:	bf00      	nop
}
 8008242:	bd80      	pop	{r7, pc}
 8008244:	58000c00 	.word	0x58000c00

08008248 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800824c:	f7fe ff2c 	bl	80070a8 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008250:	2101      	movs	r1, #1
 8008252:	4802      	ldr	r0, [pc, #8]	; (800825c <HW_IPCC_BLE_EvtHandler+0x14>)
 8008254:	f7ff ff00 	bl	8008058 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008258:	bf00      	nop
}
 800825a:	bd80      	pop	{r7, pc}
 800825c:	58000c00 	.word	0x58000c00

08008260 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8008260:	b580      	push	{r7, lr}
 8008262:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8008264:	2120      	movs	r1, #32
 8008266:	4803      	ldr	r0, [pc, #12]	; (8008274 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8008268:	f7ff fed2 	bl	8008010 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800826c:	f7fe ff4c 	bl	8007108 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8008270:	bf00      	nop
}
 8008272:	bd80      	pop	{r7, pc}
 8008274:	58000c00 	.word	0x58000c00

08008278 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8008278:	b580      	push	{r7, lr}
 800827a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800827c:	2102      	movs	r1, #2
 800827e:	4802      	ldr	r0, [pc, #8]	; (8008288 <HW_IPCC_SYS_Init+0x10>)
 8008280:	f7ff fed8 	bl	8008034 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008284:	bf00      	nop
}
 8008286:	bd80      	pop	{r7, pc}
 8008288:	58000c00 	.word	0x58000c00

0800828c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800828c:	b580      	push	{r7, lr}
 800828e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008290:	2102      	movs	r1, #2
 8008292:	4804      	ldr	r0, [pc, #16]	; (80082a4 <HW_IPCC_SYS_SendCmd+0x18>)
 8008294:	f7ff feee 	bl	8008074 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008298:	2102      	movs	r1, #2
 800829a:	4802      	ldr	r0, [pc, #8]	; (80082a4 <HW_IPCC_SYS_SendCmd+0x18>)
 800829c:	f7ff fea5 	bl	8007fea <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80082a0:	bf00      	nop
}
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	58000c00 	.word	0x58000c00

080082a8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80082ac:	2102      	movs	r1, #2
 80082ae:	4803      	ldr	r0, [pc, #12]	; (80082bc <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80082b0:	f7ff feae 	bl	8008010 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80082b4:	f7fe ff78 	bl	80071a8 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80082b8:	bf00      	nop
}
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	58000c00 	.word	0x58000c00

080082c0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80082c4:	f7fe ff86 	bl	80071d4 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80082c8:	2102      	movs	r1, #2
 80082ca:	4802      	ldr	r0, [pc, #8]	; (80082d4 <HW_IPCC_SYS_EvtHandler+0x14>)
 80082cc:	f7ff fec4 	bl	8008058 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80082d0:	bf00      	nop
}
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	58000c00 	.word	0x58000c00

080082d8 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80082e0:	2108      	movs	r1, #8
 80082e2:	480c      	ldr	r0, [pc, #48]	; (8008314 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80082e4:	f7ff fed5 	bl	8008092 <LL_C1_IPCC_IsActiveFlag_CHx>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d007      	beq.n	80082fe <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80082ee:	4a0a      	ldr	r2, [pc, #40]	; (8008318 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80082f4:	2108      	movs	r1, #8
 80082f6:	4807      	ldr	r0, [pc, #28]	; (8008314 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80082f8:	f7ff fe77 	bl	8007fea <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80082fc:	e006      	b.n	800830c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008302:	2108      	movs	r1, #8
 8008304:	4803      	ldr	r0, [pc, #12]	; (8008314 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008306:	f7ff feb5 	bl	8008074 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800830a:	bf00      	nop
}
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	58000c00 	.word	0x58000c00
 8008318:	20000488 	.word	0x20000488

0800831c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800831c:	b580      	push	{r7, lr}
 800831e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008320:	2108      	movs	r1, #8
 8008322:	4806      	ldr	r0, [pc, #24]	; (800833c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008324:	f7ff fe74 	bl	8008010 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8008328:	4b05      	ldr	r3, [pc, #20]	; (8008340 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800832e:	2108      	movs	r1, #8
 8008330:	4802      	ldr	r0, [pc, #8]	; (800833c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008332:	f7ff fe9f 	bl	8008074 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008336:	bf00      	nop
}
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	58000c00 	.word	0x58000c00
 8008340:	20000488 	.word	0x20000488

08008344 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8008344:	b580      	push	{r7, lr}
 8008346:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008348:	2108      	movs	r1, #8
 800834a:	4802      	ldr	r0, [pc, #8]	; (8008354 <HW_IPCC_TRACES_Init+0x10>)
 800834c:	f7ff fe72 	bl	8008034 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008350:	bf00      	nop
}
 8008352:	bd80      	pop	{r7, pc}
 8008354:	58000c00 	.word	0x58000c00

08008358 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800835c:	f7fe ffe2 	bl	8007324 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008360:	2108      	movs	r1, #8
 8008362:	4802      	ldr	r0, [pc, #8]	; (800836c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8008364:	f7ff fe78 	bl	8008058 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008368:	bf00      	nop
}
 800836a:	bd80      	pop	{r7, pc}
 800836c:	58000c00 	.word	0x58000c00

08008370 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8008370:	b480      	push	{r7}
 8008372:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8008374:	4b05      	ldr	r3, [pc, #20]	; (800838c <UTIL_LPM_Init+0x1c>)
 8008376:	2200      	movs	r2, #0
 8008378:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800837a:	4b05      	ldr	r3, [pc, #20]	; (8008390 <UTIL_LPM_Init+0x20>)
 800837c:	2200      	movs	r2, #0
 800837e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8008380:	bf00      	nop
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	2000048c 	.word	0x2000048c
 8008390:	20000490 	.word	0x20000490

08008394 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8008394:	b480      	push	{r7}
 8008396:	b087      	sub	sp, #28
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	460b      	mov	r3, r1
 800839e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083a0:	f3ef 8310 	mrs	r3, PRIMASK
 80083a4:	613b      	str	r3, [r7, #16]
  return(result);
 80083a6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80083a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80083aa:	b672      	cpsid	i
}
 80083ac:	bf00      	nop
  
  switch(state)
 80083ae:	78fb      	ldrb	r3, [r7, #3]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d008      	beq.n	80083c6 <UTIL_LPM_SetOffMode+0x32>
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d10e      	bne.n	80083d6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80083b8:	4b0d      	ldr	r3, [pc, #52]	; (80083f0 <UTIL_LPM_SetOffMode+0x5c>)
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4313      	orrs	r3, r2
 80083c0:	4a0b      	ldr	r2, [pc, #44]	; (80083f0 <UTIL_LPM_SetOffMode+0x5c>)
 80083c2:	6013      	str	r3, [r2, #0]
      break;
 80083c4:	e008      	b.n	80083d8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	43da      	mvns	r2, r3
 80083ca:	4b09      	ldr	r3, [pc, #36]	; (80083f0 <UTIL_LPM_SetOffMode+0x5c>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4013      	ands	r3, r2
 80083d0:	4a07      	ldr	r2, [pc, #28]	; (80083f0 <UTIL_LPM_SetOffMode+0x5c>)
 80083d2:	6013      	str	r3, [r2, #0]
      break;
 80083d4:	e000      	b.n	80083d8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80083d6:	bf00      	nop
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f383 8810 	msr	PRIMASK, r3
}
 80083e2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80083e4:	bf00      	nop
 80083e6:	371c      	adds	r7, #28
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr
 80083f0:	20000490 	.word	0x20000490

080083f4 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b08c      	sub	sp, #48	; 0x30
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80083fc:	4b6a      	ldr	r3, [pc, #424]	; (80085a8 <UTIL_SEQ_Run+0x1b4>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	627b      	str	r3, [r7, #36]	; 0x24
  SuperMask &= Mask_bm;
 8008402:	4b69      	ldr	r3, [pc, #420]	; (80085a8 <UTIL_SEQ_Run+0x1b4>)
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4013      	ands	r3, r2
 800840a:	4a67      	ldr	r2, [pc, #412]	; (80085a8 <UTIL_SEQ_Run+0x1b4>)
 800840c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800840e:	4b67      	ldr	r3, [pc, #412]	; (80085ac <UTIL_SEQ_Run+0x1b8>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8008414:	e086      	b.n	8008524 <UTIL_SEQ_Run+0x130>
  {
    counter = 0U;
 8008416:	2300      	movs	r3, #0
 8008418:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800841a:	e002      	b.n	8008422 <UTIL_SEQ_Run+0x2e>
    {
      counter++;
 800841c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841e:	3301      	adds	r3, #1
 8008420:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8008422:	4a63      	ldr	r2, [pc, #396]	; (80085b0 <UTIL_SEQ_Run+0x1bc>)
 8008424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008426:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800842a:	4b62      	ldr	r3, [pc, #392]	; (80085b4 <UTIL_SEQ_Run+0x1c0>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	401a      	ands	r2, r3
 8008430:	4b5d      	ldr	r3, [pc, #372]	; (80085a8 <UTIL_SEQ_Run+0x1b4>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4013      	ands	r3, r2
 8008436:	2b00      	cmp	r3, #0
 8008438:	d0f0      	beq.n	800841c <UTIL_SEQ_Run+0x28>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800843a:	4a5d      	ldr	r2, [pc, #372]	; (80085b0 <UTIL_SEQ_Run+0x1bc>)
 800843c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008442:	4b5c      	ldr	r3, [pc, #368]	; (80085b4 <UTIL_SEQ_Run+0x1c0>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	401a      	ands	r2, r3
 8008448:	4b57      	ldr	r3, [pc, #348]	; (80085a8 <UTIL_SEQ_Run+0x1b4>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4013      	ands	r3, r2
 800844e:	623b      	str	r3, [r7, #32]
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8008450:	4a57      	ldr	r2, [pc, #348]	; (80085b0 <UTIL_SEQ_Run+0x1bc>)
 8008452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008454:	00db      	lsls	r3, r3, #3
 8008456:	4413      	add	r3, r2
 8008458:	685a      	ldr	r2, [r3, #4]
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	4013      	ands	r3, r2
 800845e:	2b00      	cmp	r3, #0
 8008460:	d106      	bne.n	8008470 <UTIL_SEQ_Run+0x7c>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8008462:	4a53      	ldr	r2, [pc, #332]	; (80085b0 <UTIL_SEQ_Run+0x1bc>)
 8008464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008466:	00db      	lsls	r3, r3, #3
 8008468:	4413      	add	r3, r2
 800846a:	f04f 32ff 	mov.w	r2, #4294967295
 800846e:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8008470:	4a4f      	ldr	r2, [pc, #316]	; (80085b0 <UTIL_SEQ_Run+0x1bc>)
 8008472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008474:	00db      	lsls	r3, r3, #3
 8008476:	4413      	add	r3, r2
 8008478:	685a      	ldr	r2, [r3, #4]
 800847a:	6a3b      	ldr	r3, [r7, #32]
 800847c:	4013      	ands	r3, r2
 800847e:	4618      	mov	r0, r3
 8008480:	f000 f9ac 	bl	80087dc <SEQ_BitPosition>
 8008484:	4603      	mov	r3, r0
 8008486:	461a      	mov	r2, r3
 8008488:	4b4b      	ldr	r3, [pc, #300]	; (80085b8 <UTIL_SEQ_Run+0x1c4>)
 800848a:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800848c:	4a48      	ldr	r2, [pc, #288]	; (80085b0 <UTIL_SEQ_Run+0x1bc>)
 800848e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008490:	00db      	lsls	r3, r3, #3
 8008492:	4413      	add	r3, r2
 8008494:	685a      	ldr	r2, [r3, #4]
 8008496:	4b48      	ldr	r3, [pc, #288]	; (80085b8 <UTIL_SEQ_Run+0x1c4>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2101      	movs	r1, #1
 800849c:	fa01 f303 	lsl.w	r3, r1, r3
 80084a0:	43db      	mvns	r3, r3
 80084a2:	401a      	ands	r2, r3
 80084a4:	4942      	ldr	r1, [pc, #264]	; (80085b0 <UTIL_SEQ_Run+0x1bc>)
 80084a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a8:	00db      	lsls	r3, r3, #3
 80084aa:	440b      	add	r3, r1
 80084ac:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084ae:	f3ef 8310 	mrs	r3, PRIMASK
 80084b2:	617b      	str	r3, [r7, #20]
  return(result);
 80084b4:	697b      	ldr	r3, [r7, #20]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80084b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80084b8:	b672      	cpsid	i
}
 80084ba:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80084bc:	4b3e      	ldr	r3, [pc, #248]	; (80085b8 <UTIL_SEQ_Run+0x1c4>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2201      	movs	r2, #1
 80084c2:	fa02 f303 	lsl.w	r3, r2, r3
 80084c6:	43da      	mvns	r2, r3
 80084c8:	4b38      	ldr	r3, [pc, #224]	; (80085ac <UTIL_SEQ_Run+0x1b8>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4013      	ands	r3, r2
 80084ce:	4a37      	ldr	r2, [pc, #220]	; (80085ac <UTIL_SEQ_Run+0x1b8>)
 80084d0:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80084d2:	2302      	movs	r3, #2
 80084d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084d6:	e013      	b.n	8008500 <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80084d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084da:	3b01      	subs	r3, #1
 80084dc:	4a34      	ldr	r2, [pc, #208]	; (80085b0 <UTIL_SEQ_Run+0x1bc>)
 80084de:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80084e2:	4b35      	ldr	r3, [pc, #212]	; (80085b8 <UTIL_SEQ_Run+0x1c4>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2201      	movs	r2, #1
 80084e8:	fa02 f303 	lsl.w	r3, r2, r3
 80084ec:	43da      	mvns	r2, r3
 80084ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f0:	3b01      	subs	r3, #1
 80084f2:	400a      	ands	r2, r1
 80084f4:	492e      	ldr	r1, [pc, #184]	; (80085b0 <UTIL_SEQ_Run+0x1bc>)
 80084f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80084fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fc:	3b01      	subs	r3, #1
 80084fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1e8      	bne.n	80084d8 <UTIL_SEQ_Run+0xe4>
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	f383 8810 	msr	PRIMASK, r3
}
 8008510:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8008512:	4b29      	ldr	r3, [pc, #164]	; (80085b8 <UTIL_SEQ_Run+0x1c4>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a29      	ldr	r2, [pc, #164]	; (80085bc <UTIL_SEQ_Run+0x1c8>)
 8008518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800851c:	4798      	blx	r3
    
    local_taskset = TaskSet;
 800851e:	4b23      	ldr	r3, [pc, #140]	; (80085ac <UTIL_SEQ_Run+0x1b8>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8008524:	4b23      	ldr	r3, [pc, #140]	; (80085b4 <UTIL_SEQ_Run+0x1c0>)
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852a:	401a      	ands	r2, r3
 800852c:	4b1e      	ldr	r3, [pc, #120]	; (80085a8 <UTIL_SEQ_Run+0x1b4>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4013      	ands	r3, r2
 8008532:	2b00      	cmp	r3, #0
 8008534:	d007      	beq.n	8008546 <UTIL_SEQ_Run+0x152>
 8008536:	4b22      	ldr	r3, [pc, #136]	; (80085c0 <UTIL_SEQ_Run+0x1cc>)
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	4b22      	ldr	r3, [pc, #136]	; (80085c4 <UTIL_SEQ_Run+0x1d0>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4013      	ands	r3, r2
 8008540:	2b00      	cmp	r3, #0
 8008542:	f43f af68 	beq.w	8008416 <UTIL_SEQ_Run+0x22>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8008546:	4b1c      	ldr	r3, [pc, #112]	; (80085b8 <UTIL_SEQ_Run+0x1c4>)
 8008548:	f04f 32ff 	mov.w	r2, #4294967295
 800854c:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800854e:	f000 f937 	bl	80087c0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008552:	f3ef 8310 	mrs	r3, PRIMASK
 8008556:	60fb      	str	r3, [r7, #12]
  return(result);
 8008558:	68fb      	ldr	r3, [r7, #12]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800855a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800855c:	b672      	cpsid	i
}
 800855e:	bf00      	nop
  local_taskset = TaskSet;
 8008560:	4b12      	ldr	r3, [pc, #72]	; (80085ac <UTIL_SEQ_Run+0x1b8>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	62bb      	str	r3, [r7, #40]	; 0x28
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8008566:	4b13      	ldr	r3, [pc, #76]	; (80085b4 <UTIL_SEQ_Run+0x1c0>)
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856c:	401a      	ands	r2, r3
 800856e:	4b0e      	ldr	r3, [pc, #56]	; (80085a8 <UTIL_SEQ_Run+0x1b4>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4013      	ands	r3, r2
 8008574:	2b00      	cmp	r3, #0
 8008576:	d108      	bne.n	800858a <UTIL_SEQ_Run+0x196>
 8008578:	4b11      	ldr	r3, [pc, #68]	; (80085c0 <UTIL_SEQ_Run+0x1cc>)
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	4b11      	ldr	r3, [pc, #68]	; (80085c4 <UTIL_SEQ_Run+0x1d0>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4013      	ands	r3, r2
 8008582:	2b00      	cmp	r3, #0
 8008584:	d101      	bne.n	800858a <UTIL_SEQ_Run+0x196>
  {
	UTIL_SEQ_Idle( );
 8008586:	f7f8 fac6 	bl	8000b16 <UTIL_SEQ_Idle>
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	f383 8810 	msr	PRIMASK, r3
}
 8008594:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 8008596:	f000 f91a 	bl	80087ce <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800859a:	4a03      	ldr	r2, [pc, #12]	; (80085a8 <UTIL_SEQ_Run+0x1b4>)
 800859c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859e:	6013      	str	r3, [r2, #0]

  return;
 80085a0:	bf00      	nop
}
 80085a2:	3730      	adds	r7, #48	; 0x30
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	2000001c 	.word	0x2000001c
 80085ac:	20000494 	.word	0x20000494
 80085b0:	20000524 	.word	0x20000524
 80085b4:	20000018 	.word	0x20000018
 80085b8:	200004a0 	.word	0x200004a0
 80085bc:	200004a4 	.word	0x200004a4
 80085c0:	20000498 	.word	0x20000498
 80085c4:	2000049c 	.word	0x2000049c

080085c8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b088      	sub	sp, #32
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085d4:	f3ef 8310 	mrs	r3, PRIMASK
 80085d8:	617b      	str	r3, [r7, #20]
  return(result);
 80085da:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80085dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80085de:	b672      	cpsid	i
}
 80085e0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f000 f8fa 	bl	80087dc <SEQ_BitPosition>
 80085e8:	4603      	mov	r3, r0
 80085ea:	4619      	mov	r1, r3
 80085ec:	4a06      	ldr	r2, [pc, #24]	; (8008608 <UTIL_SEQ_RegTask+0x40>)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	f383 8810 	msr	PRIMASK, r3
}
 80085fe:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8008600:	bf00      	nop
}
 8008602:	3720      	adds	r7, #32
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	200004a4 	.word	0x200004a4

0800860c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800860c:	b480      	push	{r7}
 800860e:	b087      	sub	sp, #28
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008616:	f3ef 8310 	mrs	r3, PRIMASK
 800861a:	60fb      	str	r3, [r7, #12]
  return(result);
 800861c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800861e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008620:	b672      	cpsid	i
}
 8008622:	bf00      	nop

  TaskSet |= TaskId_bm;
 8008624:	4b0d      	ldr	r3, [pc, #52]	; (800865c <UTIL_SEQ_SetTask+0x50>)
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4313      	orrs	r3, r2
 800862c:	4a0b      	ldr	r2, [pc, #44]	; (800865c <UTIL_SEQ_SetTask+0x50>)
 800862e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8008630:	4a0b      	ldr	r2, [pc, #44]	; (8008660 <UTIL_SEQ_SetTask+0x54>)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	431a      	orrs	r2, r3
 800863c:	4908      	ldr	r1, [pc, #32]	; (8008660 <UTIL_SEQ_SetTask+0x54>)
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	f383 8810 	msr	PRIMASK, r3
}
 800864e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008650:	bf00      	nop
}
 8008652:	371c      	adds	r7, #28
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr
 800865c:	20000494 	.word	0x20000494
 8008660:	20000524 	.word	0x20000524

08008664 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008664:	b480      	push	{r7}
 8008666:	b087      	sub	sp, #28
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800866c:	f3ef 8310 	mrs	r3, PRIMASK
 8008670:	60fb      	str	r3, [r7, #12]
  return(result);
 8008672:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008674:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008676:	b672      	cpsid	i
}
 8008678:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	43da      	mvns	r2, r3
 800867e:	4b08      	ldr	r3, [pc, #32]	; (80086a0 <UTIL_SEQ_PauseTask+0x3c>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4013      	ands	r3, r2
 8008684:	4a06      	ldr	r2, [pc, #24]	; (80086a0 <UTIL_SEQ_PauseTask+0x3c>)
 8008686:	6013      	str	r3, [r2, #0]
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	f383 8810 	msr	PRIMASK, r3
}
 8008692:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008694:	bf00      	nop
}
 8008696:	371c      	adds	r7, #28
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr
 80086a0:	20000018 	.word	0x20000018

080086a4 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80086a4:	b480      	push	{r7}
 80086a6:	b087      	sub	sp, #28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086ac:	f3ef 8310 	mrs	r3, PRIMASK
 80086b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80086b2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80086b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80086b6:	b672      	cpsid	i
}
 80086b8:	bf00      	nop

  TaskMask |= TaskId_bm;
 80086ba:	4b09      	ldr	r3, [pc, #36]	; (80086e0 <UTIL_SEQ_ResumeTask+0x3c>)
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	4a07      	ldr	r2, [pc, #28]	; (80086e0 <UTIL_SEQ_ResumeTask+0x3c>)
 80086c4:	6013      	str	r3, [r2, #0]
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	f383 8810 	msr	PRIMASK, r3
}
 80086d0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80086d2:	bf00      	nop
}
 80086d4:	371c      	adds	r7, #28
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	20000018 	.word	0x20000018

080086e4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80086e4:	b480      	push	{r7}
 80086e6:	b087      	sub	sp, #28
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086ec:	f3ef 8310 	mrs	r3, PRIMASK
 80086f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80086f2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80086f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80086f6:	b672      	cpsid	i
}
 80086f8:	bf00      	nop

  EvtSet |= EvtId_bm;
 80086fa:	4b09      	ldr	r3, [pc, #36]	; (8008720 <UTIL_SEQ_SetEvt+0x3c>)
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4313      	orrs	r3, r2
 8008702:	4a07      	ldr	r2, [pc, #28]	; (8008720 <UTIL_SEQ_SetEvt+0x3c>)
 8008704:	6013      	str	r3, [r2, #0]
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	f383 8810 	msr	PRIMASK, r3
}
 8008710:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008712:	bf00      	nop
}
 8008714:	371c      	adds	r7, #28
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	20000498 	.word	0x20000498

08008724 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b088      	sub	sp, #32
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800872c:	4b21      	ldr	r3, [pc, #132]	; (80087b4 <UTIL_SEQ_WaitEvt+0x90>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8008732:	4b20      	ldr	r3, [pc, #128]	; (80087b4 <UTIL_SEQ_WaitEvt+0x90>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800873a:	d102      	bne.n	8008742 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 800873c:	2300      	movs	r3, #0
 800873e:	61fb      	str	r3, [r7, #28]
 8008740:	e005      	b.n	800874e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 8008742:	4b1c      	ldr	r3, [pc, #112]	; (80087b4 <UTIL_SEQ_WaitEvt+0x90>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2201      	movs	r2, #1
 8008748:	fa02 f303 	lsl.w	r3, r2, r3
 800874c:	61fb      	str	r3, [r7, #28]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800874e:	4b1a      	ldr	r3, [pc, #104]	; (80087b8 <UTIL_SEQ_WaitEvt+0x94>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8008754:	4a18      	ldr	r2, [pc, #96]	; (80087b8 <UTIL_SEQ_WaitEvt+0x94>)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800875a:	e005      	b.n	8008768 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800875c:	4b16      	ldr	r3, [pc, #88]	; (80087b8 <UTIL_SEQ_WaitEvt+0x94>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4619      	mov	r1, r3
 8008762:	69f8      	ldr	r0, [r7, #28]
 8008764:	f7f8 f9de 	bl	8000b24 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 8008768:	4b14      	ldr	r3, [pc, #80]	; (80087bc <UTIL_SEQ_WaitEvt+0x98>)
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	4b12      	ldr	r3, [pc, #72]	; (80087b8 <UTIL_SEQ_WaitEvt+0x94>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4013      	ands	r3, r2
 8008772:	2b00      	cmp	r3, #0
 8008774:	d0f2      	beq.n	800875c <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8008776:	4a0f      	ldr	r2, [pc, #60]	; (80087b4 <UTIL_SEQ_WaitEvt+0x90>)
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800877c:	f3ef 8310 	mrs	r3, PRIMASK
 8008780:	60bb      	str	r3, [r7, #8]
  return(result);
 8008782:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008784:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008786:	b672      	cpsid	i
}
 8008788:	bf00      	nop

  EvtSet &= (~EvtWaited);
 800878a:	4b0b      	ldr	r3, [pc, #44]	; (80087b8 <UTIL_SEQ_WaitEvt+0x94>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	43da      	mvns	r2, r3
 8008790:	4b0a      	ldr	r3, [pc, #40]	; (80087bc <UTIL_SEQ_WaitEvt+0x98>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4013      	ands	r3, r2
 8008796:	4a09      	ldr	r2, [pc, #36]	; (80087bc <UTIL_SEQ_WaitEvt+0x98>)
 8008798:	6013      	str	r3, [r2, #0]
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f383 8810 	msr	PRIMASK, r3
}
 80087a4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80087a6:	4a04      	ldr	r2, [pc, #16]	; (80087b8 <UTIL_SEQ_WaitEvt+0x94>)
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	6013      	str	r3, [r2, #0]

  return;
 80087ac:	bf00      	nop
}
 80087ae:	3720      	adds	r7, #32
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	200004a0 	.word	0x200004a0
 80087b8:	2000049c 	.word	0x2000049c
 80087bc:	20000498 	.word	0x20000498

080087c0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80087c0:	b480      	push	{r7}
 80087c2:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80087c4:	bf00      	nop
}
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr

080087ce <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80087ce:	b480      	push	{r7}
 80087d0:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80087d2:	bf00      	nop
}
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 80087e4:	2300      	movs	r3, #0
 80087e6:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	0c1b      	lsrs	r3, r3, #16
 80087ec:	041b      	lsls	r3, r3, #16
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d104      	bne.n	80087fc <SEQ_BitPosition+0x20>
 80087f2:	2310      	movs	r3, #16
 80087f4:	73fb      	strb	r3, [r7, #15]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	041b      	lsls	r3, r3, #16
 80087fa:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008802:	2b00      	cmp	r3, #0
 8008804:	d105      	bne.n	8008812 <SEQ_BitPosition+0x36>
 8008806:	7bfb      	ldrb	r3, [r7, #15]
 8008808:	3308      	adds	r3, #8
 800880a:	73fb      	strb	r3, [r7, #15]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	021b      	lsls	r3, r3, #8
 8008810:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008818:	2b00      	cmp	r3, #0
 800881a:	d105      	bne.n	8008828 <SEQ_BitPosition+0x4c>
 800881c:	7bfb      	ldrb	r3, [r7, #15]
 800881e:	3304      	adds	r3, #4
 8008820:	73fb      	strb	r3, [r7, #15]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	011b      	lsls	r3, r3, #4
 8008826:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	0f1b      	lsrs	r3, r3, #28
 800882c:	4a07      	ldr	r2, [pc, #28]	; (800884c <SEQ_BitPosition+0x70>)
 800882e:	5cd2      	ldrb	r2, [r2, r3]
 8008830:	7bfb      	ldrb	r3, [r7, #15]
 8008832:	4413      	add	r3, r2
 8008834:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8008836:	7bfb      	ldrb	r3, [r7, #15]
 8008838:	f1c3 031f 	rsb	r3, r3, #31
 800883c:	b2db      	uxtb	r3, r3
}
 800883e:	4618      	mov	r0, r3
 8008840:	3714      	adds	r7, #20
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	08009464 	.word	0x08009464

08008850 <__errno>:
 8008850:	4b01      	ldr	r3, [pc, #4]	; (8008858 <__errno+0x8>)
 8008852:	6818      	ldr	r0, [r3, #0]
 8008854:	4770      	bx	lr
 8008856:	bf00      	nop
 8008858:	20000020 	.word	0x20000020

0800885c <__libc_init_array>:
 800885c:	b570      	push	{r4, r5, r6, lr}
 800885e:	4d0d      	ldr	r5, [pc, #52]	; (8008894 <__libc_init_array+0x38>)
 8008860:	4c0d      	ldr	r4, [pc, #52]	; (8008898 <__libc_init_array+0x3c>)
 8008862:	1b64      	subs	r4, r4, r5
 8008864:	10a4      	asrs	r4, r4, #2
 8008866:	2600      	movs	r6, #0
 8008868:	42a6      	cmp	r6, r4
 800886a:	d109      	bne.n	8008880 <__libc_init_array+0x24>
 800886c:	4d0b      	ldr	r5, [pc, #44]	; (800889c <__libc_init_array+0x40>)
 800886e:	4c0c      	ldr	r4, [pc, #48]	; (80088a0 <__libc_init_array+0x44>)
 8008870:	f000 fc8e 	bl	8009190 <_init>
 8008874:	1b64      	subs	r4, r4, r5
 8008876:	10a4      	asrs	r4, r4, #2
 8008878:	2600      	movs	r6, #0
 800887a:	42a6      	cmp	r6, r4
 800887c:	d105      	bne.n	800888a <__libc_init_array+0x2e>
 800887e:	bd70      	pop	{r4, r5, r6, pc}
 8008880:	f855 3b04 	ldr.w	r3, [r5], #4
 8008884:	4798      	blx	r3
 8008886:	3601      	adds	r6, #1
 8008888:	e7ee      	b.n	8008868 <__libc_init_array+0xc>
 800888a:	f855 3b04 	ldr.w	r3, [r5], #4
 800888e:	4798      	blx	r3
 8008890:	3601      	adds	r6, #1
 8008892:	e7f2      	b.n	800887a <__libc_init_array+0x1e>
 8008894:	08009510 	.word	0x08009510
 8008898:	08009510 	.word	0x08009510
 800889c:	08009510 	.word	0x08009510
 80088a0:	08009514 	.word	0x08009514

080088a4 <memcpy>:
 80088a4:	440a      	add	r2, r1
 80088a6:	4291      	cmp	r1, r2
 80088a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80088ac:	d100      	bne.n	80088b0 <memcpy+0xc>
 80088ae:	4770      	bx	lr
 80088b0:	b510      	push	{r4, lr}
 80088b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088ba:	4291      	cmp	r1, r2
 80088bc:	d1f9      	bne.n	80088b2 <memcpy+0xe>
 80088be:	bd10      	pop	{r4, pc}

080088c0 <memset>:
 80088c0:	4402      	add	r2, r0
 80088c2:	4603      	mov	r3, r0
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d100      	bne.n	80088ca <memset+0xa>
 80088c8:	4770      	bx	lr
 80088ca:	f803 1b01 	strb.w	r1, [r3], #1
 80088ce:	e7f9      	b.n	80088c4 <memset+0x4>

080088d0 <siprintf>:
 80088d0:	b40e      	push	{r1, r2, r3}
 80088d2:	b500      	push	{lr}
 80088d4:	b09c      	sub	sp, #112	; 0x70
 80088d6:	ab1d      	add	r3, sp, #116	; 0x74
 80088d8:	9002      	str	r0, [sp, #8]
 80088da:	9006      	str	r0, [sp, #24]
 80088dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088e0:	4809      	ldr	r0, [pc, #36]	; (8008908 <siprintf+0x38>)
 80088e2:	9107      	str	r1, [sp, #28]
 80088e4:	9104      	str	r1, [sp, #16]
 80088e6:	4909      	ldr	r1, [pc, #36]	; (800890c <siprintf+0x3c>)
 80088e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80088ec:	9105      	str	r1, [sp, #20]
 80088ee:	6800      	ldr	r0, [r0, #0]
 80088f0:	9301      	str	r3, [sp, #4]
 80088f2:	a902      	add	r1, sp, #8
 80088f4:	f000 f8fe 	bl	8008af4 <_svfiprintf_r>
 80088f8:	9b02      	ldr	r3, [sp, #8]
 80088fa:	2200      	movs	r2, #0
 80088fc:	701a      	strb	r2, [r3, #0]
 80088fe:	b01c      	add	sp, #112	; 0x70
 8008900:	f85d eb04 	ldr.w	lr, [sp], #4
 8008904:	b003      	add	sp, #12
 8008906:	4770      	bx	lr
 8008908:	20000020 	.word	0x20000020
 800890c:	ffff0208 	.word	0xffff0208

08008910 <__retarget_lock_acquire_recursive>:
 8008910:	4770      	bx	lr

08008912 <__retarget_lock_release_recursive>:
 8008912:	4770      	bx	lr

08008914 <sbrk_aligned>:
 8008914:	b570      	push	{r4, r5, r6, lr}
 8008916:	4e0e      	ldr	r6, [pc, #56]	; (8008950 <sbrk_aligned+0x3c>)
 8008918:	460c      	mov	r4, r1
 800891a:	6831      	ldr	r1, [r6, #0]
 800891c:	4605      	mov	r5, r0
 800891e:	b911      	cbnz	r1, 8008926 <sbrk_aligned+0x12>
 8008920:	f000 fb7c 	bl	800901c <_sbrk_r>
 8008924:	6030      	str	r0, [r6, #0]
 8008926:	4621      	mov	r1, r4
 8008928:	4628      	mov	r0, r5
 800892a:	f000 fb77 	bl	800901c <_sbrk_r>
 800892e:	1c43      	adds	r3, r0, #1
 8008930:	d00a      	beq.n	8008948 <sbrk_aligned+0x34>
 8008932:	1cc4      	adds	r4, r0, #3
 8008934:	f024 0403 	bic.w	r4, r4, #3
 8008938:	42a0      	cmp	r0, r4
 800893a:	d007      	beq.n	800894c <sbrk_aligned+0x38>
 800893c:	1a21      	subs	r1, r4, r0
 800893e:	4628      	mov	r0, r5
 8008940:	f000 fb6c 	bl	800901c <_sbrk_r>
 8008944:	3001      	adds	r0, #1
 8008946:	d101      	bne.n	800894c <sbrk_aligned+0x38>
 8008948:	f04f 34ff 	mov.w	r4, #4294967295
 800894c:	4620      	mov	r0, r4
 800894e:	bd70      	pop	{r4, r5, r6, pc}
 8008950:	2000053c 	.word	0x2000053c

08008954 <_malloc_r>:
 8008954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008958:	1ccd      	adds	r5, r1, #3
 800895a:	f025 0503 	bic.w	r5, r5, #3
 800895e:	3508      	adds	r5, #8
 8008960:	2d0c      	cmp	r5, #12
 8008962:	bf38      	it	cc
 8008964:	250c      	movcc	r5, #12
 8008966:	2d00      	cmp	r5, #0
 8008968:	4607      	mov	r7, r0
 800896a:	db01      	blt.n	8008970 <_malloc_r+0x1c>
 800896c:	42a9      	cmp	r1, r5
 800896e:	d905      	bls.n	800897c <_malloc_r+0x28>
 8008970:	230c      	movs	r3, #12
 8008972:	603b      	str	r3, [r7, #0]
 8008974:	2600      	movs	r6, #0
 8008976:	4630      	mov	r0, r6
 8008978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800897c:	4e2e      	ldr	r6, [pc, #184]	; (8008a38 <_malloc_r+0xe4>)
 800897e:	f000 fb77 	bl	8009070 <__malloc_lock>
 8008982:	6833      	ldr	r3, [r6, #0]
 8008984:	461c      	mov	r4, r3
 8008986:	bb34      	cbnz	r4, 80089d6 <_malloc_r+0x82>
 8008988:	4629      	mov	r1, r5
 800898a:	4638      	mov	r0, r7
 800898c:	f7ff ffc2 	bl	8008914 <sbrk_aligned>
 8008990:	1c43      	adds	r3, r0, #1
 8008992:	4604      	mov	r4, r0
 8008994:	d14d      	bne.n	8008a32 <_malloc_r+0xde>
 8008996:	6834      	ldr	r4, [r6, #0]
 8008998:	4626      	mov	r6, r4
 800899a:	2e00      	cmp	r6, #0
 800899c:	d140      	bne.n	8008a20 <_malloc_r+0xcc>
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	4631      	mov	r1, r6
 80089a2:	4638      	mov	r0, r7
 80089a4:	eb04 0803 	add.w	r8, r4, r3
 80089a8:	f000 fb38 	bl	800901c <_sbrk_r>
 80089ac:	4580      	cmp	r8, r0
 80089ae:	d13a      	bne.n	8008a26 <_malloc_r+0xd2>
 80089b0:	6821      	ldr	r1, [r4, #0]
 80089b2:	3503      	adds	r5, #3
 80089b4:	1a6d      	subs	r5, r5, r1
 80089b6:	f025 0503 	bic.w	r5, r5, #3
 80089ba:	3508      	adds	r5, #8
 80089bc:	2d0c      	cmp	r5, #12
 80089be:	bf38      	it	cc
 80089c0:	250c      	movcc	r5, #12
 80089c2:	4629      	mov	r1, r5
 80089c4:	4638      	mov	r0, r7
 80089c6:	f7ff ffa5 	bl	8008914 <sbrk_aligned>
 80089ca:	3001      	adds	r0, #1
 80089cc:	d02b      	beq.n	8008a26 <_malloc_r+0xd2>
 80089ce:	6823      	ldr	r3, [r4, #0]
 80089d0:	442b      	add	r3, r5
 80089d2:	6023      	str	r3, [r4, #0]
 80089d4:	e00e      	b.n	80089f4 <_malloc_r+0xa0>
 80089d6:	6822      	ldr	r2, [r4, #0]
 80089d8:	1b52      	subs	r2, r2, r5
 80089da:	d41e      	bmi.n	8008a1a <_malloc_r+0xc6>
 80089dc:	2a0b      	cmp	r2, #11
 80089de:	d916      	bls.n	8008a0e <_malloc_r+0xba>
 80089e0:	1961      	adds	r1, r4, r5
 80089e2:	42a3      	cmp	r3, r4
 80089e4:	6025      	str	r5, [r4, #0]
 80089e6:	bf18      	it	ne
 80089e8:	6059      	strne	r1, [r3, #4]
 80089ea:	6863      	ldr	r3, [r4, #4]
 80089ec:	bf08      	it	eq
 80089ee:	6031      	streq	r1, [r6, #0]
 80089f0:	5162      	str	r2, [r4, r5]
 80089f2:	604b      	str	r3, [r1, #4]
 80089f4:	4638      	mov	r0, r7
 80089f6:	f104 060b 	add.w	r6, r4, #11
 80089fa:	f000 fb3f 	bl	800907c <__malloc_unlock>
 80089fe:	f026 0607 	bic.w	r6, r6, #7
 8008a02:	1d23      	adds	r3, r4, #4
 8008a04:	1af2      	subs	r2, r6, r3
 8008a06:	d0b6      	beq.n	8008976 <_malloc_r+0x22>
 8008a08:	1b9b      	subs	r3, r3, r6
 8008a0a:	50a3      	str	r3, [r4, r2]
 8008a0c:	e7b3      	b.n	8008976 <_malloc_r+0x22>
 8008a0e:	6862      	ldr	r2, [r4, #4]
 8008a10:	42a3      	cmp	r3, r4
 8008a12:	bf0c      	ite	eq
 8008a14:	6032      	streq	r2, [r6, #0]
 8008a16:	605a      	strne	r2, [r3, #4]
 8008a18:	e7ec      	b.n	80089f4 <_malloc_r+0xa0>
 8008a1a:	4623      	mov	r3, r4
 8008a1c:	6864      	ldr	r4, [r4, #4]
 8008a1e:	e7b2      	b.n	8008986 <_malloc_r+0x32>
 8008a20:	4634      	mov	r4, r6
 8008a22:	6876      	ldr	r6, [r6, #4]
 8008a24:	e7b9      	b.n	800899a <_malloc_r+0x46>
 8008a26:	230c      	movs	r3, #12
 8008a28:	603b      	str	r3, [r7, #0]
 8008a2a:	4638      	mov	r0, r7
 8008a2c:	f000 fb26 	bl	800907c <__malloc_unlock>
 8008a30:	e7a1      	b.n	8008976 <_malloc_r+0x22>
 8008a32:	6025      	str	r5, [r4, #0]
 8008a34:	e7de      	b.n	80089f4 <_malloc_r+0xa0>
 8008a36:	bf00      	nop
 8008a38:	20000538 	.word	0x20000538

08008a3c <__ssputs_r>:
 8008a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a40:	688e      	ldr	r6, [r1, #8]
 8008a42:	429e      	cmp	r6, r3
 8008a44:	4682      	mov	sl, r0
 8008a46:	460c      	mov	r4, r1
 8008a48:	4690      	mov	r8, r2
 8008a4a:	461f      	mov	r7, r3
 8008a4c:	d838      	bhi.n	8008ac0 <__ssputs_r+0x84>
 8008a4e:	898a      	ldrh	r2, [r1, #12]
 8008a50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a54:	d032      	beq.n	8008abc <__ssputs_r+0x80>
 8008a56:	6825      	ldr	r5, [r4, #0]
 8008a58:	6909      	ldr	r1, [r1, #16]
 8008a5a:	eba5 0901 	sub.w	r9, r5, r1
 8008a5e:	6965      	ldr	r5, [r4, #20]
 8008a60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a68:	3301      	adds	r3, #1
 8008a6a:	444b      	add	r3, r9
 8008a6c:	106d      	asrs	r5, r5, #1
 8008a6e:	429d      	cmp	r5, r3
 8008a70:	bf38      	it	cc
 8008a72:	461d      	movcc	r5, r3
 8008a74:	0553      	lsls	r3, r2, #21
 8008a76:	d531      	bpl.n	8008adc <__ssputs_r+0xa0>
 8008a78:	4629      	mov	r1, r5
 8008a7a:	f7ff ff6b 	bl	8008954 <_malloc_r>
 8008a7e:	4606      	mov	r6, r0
 8008a80:	b950      	cbnz	r0, 8008a98 <__ssputs_r+0x5c>
 8008a82:	230c      	movs	r3, #12
 8008a84:	f8ca 3000 	str.w	r3, [sl]
 8008a88:	89a3      	ldrh	r3, [r4, #12]
 8008a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a8e:	81a3      	strh	r3, [r4, #12]
 8008a90:	f04f 30ff 	mov.w	r0, #4294967295
 8008a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a98:	6921      	ldr	r1, [r4, #16]
 8008a9a:	464a      	mov	r2, r9
 8008a9c:	f7ff ff02 	bl	80088a4 <memcpy>
 8008aa0:	89a3      	ldrh	r3, [r4, #12]
 8008aa2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aaa:	81a3      	strh	r3, [r4, #12]
 8008aac:	6126      	str	r6, [r4, #16]
 8008aae:	6165      	str	r5, [r4, #20]
 8008ab0:	444e      	add	r6, r9
 8008ab2:	eba5 0509 	sub.w	r5, r5, r9
 8008ab6:	6026      	str	r6, [r4, #0]
 8008ab8:	60a5      	str	r5, [r4, #8]
 8008aba:	463e      	mov	r6, r7
 8008abc:	42be      	cmp	r6, r7
 8008abe:	d900      	bls.n	8008ac2 <__ssputs_r+0x86>
 8008ac0:	463e      	mov	r6, r7
 8008ac2:	6820      	ldr	r0, [r4, #0]
 8008ac4:	4632      	mov	r2, r6
 8008ac6:	4641      	mov	r1, r8
 8008ac8:	f000 fab8 	bl	800903c <memmove>
 8008acc:	68a3      	ldr	r3, [r4, #8]
 8008ace:	1b9b      	subs	r3, r3, r6
 8008ad0:	60a3      	str	r3, [r4, #8]
 8008ad2:	6823      	ldr	r3, [r4, #0]
 8008ad4:	4433      	add	r3, r6
 8008ad6:	6023      	str	r3, [r4, #0]
 8008ad8:	2000      	movs	r0, #0
 8008ada:	e7db      	b.n	8008a94 <__ssputs_r+0x58>
 8008adc:	462a      	mov	r2, r5
 8008ade:	f000 fb1f 	bl	8009120 <_realloc_r>
 8008ae2:	4606      	mov	r6, r0
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	d1e1      	bne.n	8008aac <__ssputs_r+0x70>
 8008ae8:	6921      	ldr	r1, [r4, #16]
 8008aea:	4650      	mov	r0, sl
 8008aec:	f000 facc 	bl	8009088 <_free_r>
 8008af0:	e7c7      	b.n	8008a82 <__ssputs_r+0x46>
	...

08008af4 <_svfiprintf_r>:
 8008af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af8:	4698      	mov	r8, r3
 8008afa:	898b      	ldrh	r3, [r1, #12]
 8008afc:	061b      	lsls	r3, r3, #24
 8008afe:	b09d      	sub	sp, #116	; 0x74
 8008b00:	4607      	mov	r7, r0
 8008b02:	460d      	mov	r5, r1
 8008b04:	4614      	mov	r4, r2
 8008b06:	d50e      	bpl.n	8008b26 <_svfiprintf_r+0x32>
 8008b08:	690b      	ldr	r3, [r1, #16]
 8008b0a:	b963      	cbnz	r3, 8008b26 <_svfiprintf_r+0x32>
 8008b0c:	2140      	movs	r1, #64	; 0x40
 8008b0e:	f7ff ff21 	bl	8008954 <_malloc_r>
 8008b12:	6028      	str	r0, [r5, #0]
 8008b14:	6128      	str	r0, [r5, #16]
 8008b16:	b920      	cbnz	r0, 8008b22 <_svfiprintf_r+0x2e>
 8008b18:	230c      	movs	r3, #12
 8008b1a:	603b      	str	r3, [r7, #0]
 8008b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b20:	e0d1      	b.n	8008cc6 <_svfiprintf_r+0x1d2>
 8008b22:	2340      	movs	r3, #64	; 0x40
 8008b24:	616b      	str	r3, [r5, #20]
 8008b26:	2300      	movs	r3, #0
 8008b28:	9309      	str	r3, [sp, #36]	; 0x24
 8008b2a:	2320      	movs	r3, #32
 8008b2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b30:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b34:	2330      	movs	r3, #48	; 0x30
 8008b36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008ce0 <_svfiprintf_r+0x1ec>
 8008b3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b3e:	f04f 0901 	mov.w	r9, #1
 8008b42:	4623      	mov	r3, r4
 8008b44:	469a      	mov	sl, r3
 8008b46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b4a:	b10a      	cbz	r2, 8008b50 <_svfiprintf_r+0x5c>
 8008b4c:	2a25      	cmp	r2, #37	; 0x25
 8008b4e:	d1f9      	bne.n	8008b44 <_svfiprintf_r+0x50>
 8008b50:	ebba 0b04 	subs.w	fp, sl, r4
 8008b54:	d00b      	beq.n	8008b6e <_svfiprintf_r+0x7a>
 8008b56:	465b      	mov	r3, fp
 8008b58:	4622      	mov	r2, r4
 8008b5a:	4629      	mov	r1, r5
 8008b5c:	4638      	mov	r0, r7
 8008b5e:	f7ff ff6d 	bl	8008a3c <__ssputs_r>
 8008b62:	3001      	adds	r0, #1
 8008b64:	f000 80aa 	beq.w	8008cbc <_svfiprintf_r+0x1c8>
 8008b68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b6a:	445a      	add	r2, fp
 8008b6c:	9209      	str	r2, [sp, #36]	; 0x24
 8008b6e:	f89a 3000 	ldrb.w	r3, [sl]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	f000 80a2 	beq.w	8008cbc <_svfiprintf_r+0x1c8>
 8008b78:	2300      	movs	r3, #0
 8008b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b82:	f10a 0a01 	add.w	sl, sl, #1
 8008b86:	9304      	str	r3, [sp, #16]
 8008b88:	9307      	str	r3, [sp, #28]
 8008b8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b8e:	931a      	str	r3, [sp, #104]	; 0x68
 8008b90:	4654      	mov	r4, sl
 8008b92:	2205      	movs	r2, #5
 8008b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b98:	4851      	ldr	r0, [pc, #324]	; (8008ce0 <_svfiprintf_r+0x1ec>)
 8008b9a:	f7f7 faf9 	bl	8000190 <memchr>
 8008b9e:	9a04      	ldr	r2, [sp, #16]
 8008ba0:	b9d8      	cbnz	r0, 8008bda <_svfiprintf_r+0xe6>
 8008ba2:	06d0      	lsls	r0, r2, #27
 8008ba4:	bf44      	itt	mi
 8008ba6:	2320      	movmi	r3, #32
 8008ba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bac:	0711      	lsls	r1, r2, #28
 8008bae:	bf44      	itt	mi
 8008bb0:	232b      	movmi	r3, #43	; 0x2b
 8008bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bb6:	f89a 3000 	ldrb.w	r3, [sl]
 8008bba:	2b2a      	cmp	r3, #42	; 0x2a
 8008bbc:	d015      	beq.n	8008bea <_svfiprintf_r+0xf6>
 8008bbe:	9a07      	ldr	r2, [sp, #28]
 8008bc0:	4654      	mov	r4, sl
 8008bc2:	2000      	movs	r0, #0
 8008bc4:	f04f 0c0a 	mov.w	ip, #10
 8008bc8:	4621      	mov	r1, r4
 8008bca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bce:	3b30      	subs	r3, #48	; 0x30
 8008bd0:	2b09      	cmp	r3, #9
 8008bd2:	d94e      	bls.n	8008c72 <_svfiprintf_r+0x17e>
 8008bd4:	b1b0      	cbz	r0, 8008c04 <_svfiprintf_r+0x110>
 8008bd6:	9207      	str	r2, [sp, #28]
 8008bd8:	e014      	b.n	8008c04 <_svfiprintf_r+0x110>
 8008bda:	eba0 0308 	sub.w	r3, r0, r8
 8008bde:	fa09 f303 	lsl.w	r3, r9, r3
 8008be2:	4313      	orrs	r3, r2
 8008be4:	9304      	str	r3, [sp, #16]
 8008be6:	46a2      	mov	sl, r4
 8008be8:	e7d2      	b.n	8008b90 <_svfiprintf_r+0x9c>
 8008bea:	9b03      	ldr	r3, [sp, #12]
 8008bec:	1d19      	adds	r1, r3, #4
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	9103      	str	r1, [sp, #12]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	bfbb      	ittet	lt
 8008bf6:	425b      	neglt	r3, r3
 8008bf8:	f042 0202 	orrlt.w	r2, r2, #2
 8008bfc:	9307      	strge	r3, [sp, #28]
 8008bfe:	9307      	strlt	r3, [sp, #28]
 8008c00:	bfb8      	it	lt
 8008c02:	9204      	strlt	r2, [sp, #16]
 8008c04:	7823      	ldrb	r3, [r4, #0]
 8008c06:	2b2e      	cmp	r3, #46	; 0x2e
 8008c08:	d10c      	bne.n	8008c24 <_svfiprintf_r+0x130>
 8008c0a:	7863      	ldrb	r3, [r4, #1]
 8008c0c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c0e:	d135      	bne.n	8008c7c <_svfiprintf_r+0x188>
 8008c10:	9b03      	ldr	r3, [sp, #12]
 8008c12:	1d1a      	adds	r2, r3, #4
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	9203      	str	r2, [sp, #12]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	bfb8      	it	lt
 8008c1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c20:	3402      	adds	r4, #2
 8008c22:	9305      	str	r3, [sp, #20]
 8008c24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008cf0 <_svfiprintf_r+0x1fc>
 8008c28:	7821      	ldrb	r1, [r4, #0]
 8008c2a:	2203      	movs	r2, #3
 8008c2c:	4650      	mov	r0, sl
 8008c2e:	f7f7 faaf 	bl	8000190 <memchr>
 8008c32:	b140      	cbz	r0, 8008c46 <_svfiprintf_r+0x152>
 8008c34:	2340      	movs	r3, #64	; 0x40
 8008c36:	eba0 000a 	sub.w	r0, r0, sl
 8008c3a:	fa03 f000 	lsl.w	r0, r3, r0
 8008c3e:	9b04      	ldr	r3, [sp, #16]
 8008c40:	4303      	orrs	r3, r0
 8008c42:	3401      	adds	r4, #1
 8008c44:	9304      	str	r3, [sp, #16]
 8008c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c4a:	4826      	ldr	r0, [pc, #152]	; (8008ce4 <_svfiprintf_r+0x1f0>)
 8008c4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c50:	2206      	movs	r2, #6
 8008c52:	f7f7 fa9d 	bl	8000190 <memchr>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	d038      	beq.n	8008ccc <_svfiprintf_r+0x1d8>
 8008c5a:	4b23      	ldr	r3, [pc, #140]	; (8008ce8 <_svfiprintf_r+0x1f4>)
 8008c5c:	bb1b      	cbnz	r3, 8008ca6 <_svfiprintf_r+0x1b2>
 8008c5e:	9b03      	ldr	r3, [sp, #12]
 8008c60:	3307      	adds	r3, #7
 8008c62:	f023 0307 	bic.w	r3, r3, #7
 8008c66:	3308      	adds	r3, #8
 8008c68:	9303      	str	r3, [sp, #12]
 8008c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c6c:	4433      	add	r3, r6
 8008c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c70:	e767      	b.n	8008b42 <_svfiprintf_r+0x4e>
 8008c72:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c76:	460c      	mov	r4, r1
 8008c78:	2001      	movs	r0, #1
 8008c7a:	e7a5      	b.n	8008bc8 <_svfiprintf_r+0xd4>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	3401      	adds	r4, #1
 8008c80:	9305      	str	r3, [sp, #20]
 8008c82:	4619      	mov	r1, r3
 8008c84:	f04f 0c0a 	mov.w	ip, #10
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c8e:	3a30      	subs	r2, #48	; 0x30
 8008c90:	2a09      	cmp	r2, #9
 8008c92:	d903      	bls.n	8008c9c <_svfiprintf_r+0x1a8>
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d0c5      	beq.n	8008c24 <_svfiprintf_r+0x130>
 8008c98:	9105      	str	r1, [sp, #20]
 8008c9a:	e7c3      	b.n	8008c24 <_svfiprintf_r+0x130>
 8008c9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ca0:	4604      	mov	r4, r0
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e7f0      	b.n	8008c88 <_svfiprintf_r+0x194>
 8008ca6:	ab03      	add	r3, sp, #12
 8008ca8:	9300      	str	r3, [sp, #0]
 8008caa:	462a      	mov	r2, r5
 8008cac:	4b0f      	ldr	r3, [pc, #60]	; (8008cec <_svfiprintf_r+0x1f8>)
 8008cae:	a904      	add	r1, sp, #16
 8008cb0:	4638      	mov	r0, r7
 8008cb2:	f3af 8000 	nop.w
 8008cb6:	1c42      	adds	r2, r0, #1
 8008cb8:	4606      	mov	r6, r0
 8008cba:	d1d6      	bne.n	8008c6a <_svfiprintf_r+0x176>
 8008cbc:	89ab      	ldrh	r3, [r5, #12]
 8008cbe:	065b      	lsls	r3, r3, #25
 8008cc0:	f53f af2c 	bmi.w	8008b1c <_svfiprintf_r+0x28>
 8008cc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cc6:	b01d      	add	sp, #116	; 0x74
 8008cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ccc:	ab03      	add	r3, sp, #12
 8008cce:	9300      	str	r3, [sp, #0]
 8008cd0:	462a      	mov	r2, r5
 8008cd2:	4b06      	ldr	r3, [pc, #24]	; (8008cec <_svfiprintf_r+0x1f8>)
 8008cd4:	a904      	add	r1, sp, #16
 8008cd6:	4638      	mov	r0, r7
 8008cd8:	f000 f87a 	bl	8008dd0 <_printf_i>
 8008cdc:	e7eb      	b.n	8008cb6 <_svfiprintf_r+0x1c2>
 8008cde:	bf00      	nop
 8008ce0:	080094d4 	.word	0x080094d4
 8008ce4:	080094de 	.word	0x080094de
 8008ce8:	00000000 	.word	0x00000000
 8008cec:	08008a3d 	.word	0x08008a3d
 8008cf0:	080094da 	.word	0x080094da

08008cf4 <_printf_common>:
 8008cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf8:	4616      	mov	r6, r2
 8008cfa:	4699      	mov	r9, r3
 8008cfc:	688a      	ldr	r2, [r1, #8]
 8008cfe:	690b      	ldr	r3, [r1, #16]
 8008d00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d04:	4293      	cmp	r3, r2
 8008d06:	bfb8      	it	lt
 8008d08:	4613      	movlt	r3, r2
 8008d0a:	6033      	str	r3, [r6, #0]
 8008d0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d10:	4607      	mov	r7, r0
 8008d12:	460c      	mov	r4, r1
 8008d14:	b10a      	cbz	r2, 8008d1a <_printf_common+0x26>
 8008d16:	3301      	adds	r3, #1
 8008d18:	6033      	str	r3, [r6, #0]
 8008d1a:	6823      	ldr	r3, [r4, #0]
 8008d1c:	0699      	lsls	r1, r3, #26
 8008d1e:	bf42      	ittt	mi
 8008d20:	6833      	ldrmi	r3, [r6, #0]
 8008d22:	3302      	addmi	r3, #2
 8008d24:	6033      	strmi	r3, [r6, #0]
 8008d26:	6825      	ldr	r5, [r4, #0]
 8008d28:	f015 0506 	ands.w	r5, r5, #6
 8008d2c:	d106      	bne.n	8008d3c <_printf_common+0x48>
 8008d2e:	f104 0a19 	add.w	sl, r4, #25
 8008d32:	68e3      	ldr	r3, [r4, #12]
 8008d34:	6832      	ldr	r2, [r6, #0]
 8008d36:	1a9b      	subs	r3, r3, r2
 8008d38:	42ab      	cmp	r3, r5
 8008d3a:	dc26      	bgt.n	8008d8a <_printf_common+0x96>
 8008d3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d40:	1e13      	subs	r3, r2, #0
 8008d42:	6822      	ldr	r2, [r4, #0]
 8008d44:	bf18      	it	ne
 8008d46:	2301      	movne	r3, #1
 8008d48:	0692      	lsls	r2, r2, #26
 8008d4a:	d42b      	bmi.n	8008da4 <_printf_common+0xb0>
 8008d4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d50:	4649      	mov	r1, r9
 8008d52:	4638      	mov	r0, r7
 8008d54:	47c0      	blx	r8
 8008d56:	3001      	adds	r0, #1
 8008d58:	d01e      	beq.n	8008d98 <_printf_common+0xa4>
 8008d5a:	6823      	ldr	r3, [r4, #0]
 8008d5c:	68e5      	ldr	r5, [r4, #12]
 8008d5e:	6832      	ldr	r2, [r6, #0]
 8008d60:	f003 0306 	and.w	r3, r3, #6
 8008d64:	2b04      	cmp	r3, #4
 8008d66:	bf08      	it	eq
 8008d68:	1aad      	subeq	r5, r5, r2
 8008d6a:	68a3      	ldr	r3, [r4, #8]
 8008d6c:	6922      	ldr	r2, [r4, #16]
 8008d6e:	bf0c      	ite	eq
 8008d70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d74:	2500      	movne	r5, #0
 8008d76:	4293      	cmp	r3, r2
 8008d78:	bfc4      	itt	gt
 8008d7a:	1a9b      	subgt	r3, r3, r2
 8008d7c:	18ed      	addgt	r5, r5, r3
 8008d7e:	2600      	movs	r6, #0
 8008d80:	341a      	adds	r4, #26
 8008d82:	42b5      	cmp	r5, r6
 8008d84:	d11a      	bne.n	8008dbc <_printf_common+0xc8>
 8008d86:	2000      	movs	r0, #0
 8008d88:	e008      	b.n	8008d9c <_printf_common+0xa8>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	4652      	mov	r2, sl
 8008d8e:	4649      	mov	r1, r9
 8008d90:	4638      	mov	r0, r7
 8008d92:	47c0      	blx	r8
 8008d94:	3001      	adds	r0, #1
 8008d96:	d103      	bne.n	8008da0 <_printf_common+0xac>
 8008d98:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008da0:	3501      	adds	r5, #1
 8008da2:	e7c6      	b.n	8008d32 <_printf_common+0x3e>
 8008da4:	18e1      	adds	r1, r4, r3
 8008da6:	1c5a      	adds	r2, r3, #1
 8008da8:	2030      	movs	r0, #48	; 0x30
 8008daa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008dae:	4422      	add	r2, r4
 8008db0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008db4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008db8:	3302      	adds	r3, #2
 8008dba:	e7c7      	b.n	8008d4c <_printf_common+0x58>
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	4622      	mov	r2, r4
 8008dc0:	4649      	mov	r1, r9
 8008dc2:	4638      	mov	r0, r7
 8008dc4:	47c0      	blx	r8
 8008dc6:	3001      	adds	r0, #1
 8008dc8:	d0e6      	beq.n	8008d98 <_printf_common+0xa4>
 8008dca:	3601      	adds	r6, #1
 8008dcc:	e7d9      	b.n	8008d82 <_printf_common+0x8e>
	...

08008dd0 <_printf_i>:
 8008dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd4:	7e0f      	ldrb	r7, [r1, #24]
 8008dd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008dd8:	2f78      	cmp	r7, #120	; 0x78
 8008dda:	4691      	mov	r9, r2
 8008ddc:	4680      	mov	r8, r0
 8008dde:	460c      	mov	r4, r1
 8008de0:	469a      	mov	sl, r3
 8008de2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008de6:	d807      	bhi.n	8008df8 <_printf_i+0x28>
 8008de8:	2f62      	cmp	r7, #98	; 0x62
 8008dea:	d80a      	bhi.n	8008e02 <_printf_i+0x32>
 8008dec:	2f00      	cmp	r7, #0
 8008dee:	f000 80d8 	beq.w	8008fa2 <_printf_i+0x1d2>
 8008df2:	2f58      	cmp	r7, #88	; 0x58
 8008df4:	f000 80a3 	beq.w	8008f3e <_printf_i+0x16e>
 8008df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e00:	e03a      	b.n	8008e78 <_printf_i+0xa8>
 8008e02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e06:	2b15      	cmp	r3, #21
 8008e08:	d8f6      	bhi.n	8008df8 <_printf_i+0x28>
 8008e0a:	a101      	add	r1, pc, #4	; (adr r1, 8008e10 <_printf_i+0x40>)
 8008e0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e10:	08008e69 	.word	0x08008e69
 8008e14:	08008e7d 	.word	0x08008e7d
 8008e18:	08008df9 	.word	0x08008df9
 8008e1c:	08008df9 	.word	0x08008df9
 8008e20:	08008df9 	.word	0x08008df9
 8008e24:	08008df9 	.word	0x08008df9
 8008e28:	08008e7d 	.word	0x08008e7d
 8008e2c:	08008df9 	.word	0x08008df9
 8008e30:	08008df9 	.word	0x08008df9
 8008e34:	08008df9 	.word	0x08008df9
 8008e38:	08008df9 	.word	0x08008df9
 8008e3c:	08008f89 	.word	0x08008f89
 8008e40:	08008ead 	.word	0x08008ead
 8008e44:	08008f6b 	.word	0x08008f6b
 8008e48:	08008df9 	.word	0x08008df9
 8008e4c:	08008df9 	.word	0x08008df9
 8008e50:	08008fab 	.word	0x08008fab
 8008e54:	08008df9 	.word	0x08008df9
 8008e58:	08008ead 	.word	0x08008ead
 8008e5c:	08008df9 	.word	0x08008df9
 8008e60:	08008df9 	.word	0x08008df9
 8008e64:	08008f73 	.word	0x08008f73
 8008e68:	682b      	ldr	r3, [r5, #0]
 8008e6a:	1d1a      	adds	r2, r3, #4
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	602a      	str	r2, [r5, #0]
 8008e70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e0a3      	b.n	8008fc4 <_printf_i+0x1f4>
 8008e7c:	6820      	ldr	r0, [r4, #0]
 8008e7e:	6829      	ldr	r1, [r5, #0]
 8008e80:	0606      	lsls	r6, r0, #24
 8008e82:	f101 0304 	add.w	r3, r1, #4
 8008e86:	d50a      	bpl.n	8008e9e <_printf_i+0xce>
 8008e88:	680e      	ldr	r6, [r1, #0]
 8008e8a:	602b      	str	r3, [r5, #0]
 8008e8c:	2e00      	cmp	r6, #0
 8008e8e:	da03      	bge.n	8008e98 <_printf_i+0xc8>
 8008e90:	232d      	movs	r3, #45	; 0x2d
 8008e92:	4276      	negs	r6, r6
 8008e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e98:	485e      	ldr	r0, [pc, #376]	; (8009014 <_printf_i+0x244>)
 8008e9a:	230a      	movs	r3, #10
 8008e9c:	e019      	b.n	8008ed2 <_printf_i+0x102>
 8008e9e:	680e      	ldr	r6, [r1, #0]
 8008ea0:	602b      	str	r3, [r5, #0]
 8008ea2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ea6:	bf18      	it	ne
 8008ea8:	b236      	sxthne	r6, r6
 8008eaa:	e7ef      	b.n	8008e8c <_printf_i+0xbc>
 8008eac:	682b      	ldr	r3, [r5, #0]
 8008eae:	6820      	ldr	r0, [r4, #0]
 8008eb0:	1d19      	adds	r1, r3, #4
 8008eb2:	6029      	str	r1, [r5, #0]
 8008eb4:	0601      	lsls	r1, r0, #24
 8008eb6:	d501      	bpl.n	8008ebc <_printf_i+0xec>
 8008eb8:	681e      	ldr	r6, [r3, #0]
 8008eba:	e002      	b.n	8008ec2 <_printf_i+0xf2>
 8008ebc:	0646      	lsls	r6, r0, #25
 8008ebe:	d5fb      	bpl.n	8008eb8 <_printf_i+0xe8>
 8008ec0:	881e      	ldrh	r6, [r3, #0]
 8008ec2:	4854      	ldr	r0, [pc, #336]	; (8009014 <_printf_i+0x244>)
 8008ec4:	2f6f      	cmp	r7, #111	; 0x6f
 8008ec6:	bf0c      	ite	eq
 8008ec8:	2308      	moveq	r3, #8
 8008eca:	230a      	movne	r3, #10
 8008ecc:	2100      	movs	r1, #0
 8008ece:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ed2:	6865      	ldr	r5, [r4, #4]
 8008ed4:	60a5      	str	r5, [r4, #8]
 8008ed6:	2d00      	cmp	r5, #0
 8008ed8:	bfa2      	ittt	ge
 8008eda:	6821      	ldrge	r1, [r4, #0]
 8008edc:	f021 0104 	bicge.w	r1, r1, #4
 8008ee0:	6021      	strge	r1, [r4, #0]
 8008ee2:	b90e      	cbnz	r6, 8008ee8 <_printf_i+0x118>
 8008ee4:	2d00      	cmp	r5, #0
 8008ee6:	d04d      	beq.n	8008f84 <_printf_i+0x1b4>
 8008ee8:	4615      	mov	r5, r2
 8008eea:	fbb6 f1f3 	udiv	r1, r6, r3
 8008eee:	fb03 6711 	mls	r7, r3, r1, r6
 8008ef2:	5dc7      	ldrb	r7, [r0, r7]
 8008ef4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ef8:	4637      	mov	r7, r6
 8008efa:	42bb      	cmp	r3, r7
 8008efc:	460e      	mov	r6, r1
 8008efe:	d9f4      	bls.n	8008eea <_printf_i+0x11a>
 8008f00:	2b08      	cmp	r3, #8
 8008f02:	d10b      	bne.n	8008f1c <_printf_i+0x14c>
 8008f04:	6823      	ldr	r3, [r4, #0]
 8008f06:	07de      	lsls	r6, r3, #31
 8008f08:	d508      	bpl.n	8008f1c <_printf_i+0x14c>
 8008f0a:	6923      	ldr	r3, [r4, #16]
 8008f0c:	6861      	ldr	r1, [r4, #4]
 8008f0e:	4299      	cmp	r1, r3
 8008f10:	bfde      	ittt	le
 8008f12:	2330      	movle	r3, #48	; 0x30
 8008f14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f1c:	1b52      	subs	r2, r2, r5
 8008f1e:	6122      	str	r2, [r4, #16]
 8008f20:	f8cd a000 	str.w	sl, [sp]
 8008f24:	464b      	mov	r3, r9
 8008f26:	aa03      	add	r2, sp, #12
 8008f28:	4621      	mov	r1, r4
 8008f2a:	4640      	mov	r0, r8
 8008f2c:	f7ff fee2 	bl	8008cf4 <_printf_common>
 8008f30:	3001      	adds	r0, #1
 8008f32:	d14c      	bne.n	8008fce <_printf_i+0x1fe>
 8008f34:	f04f 30ff 	mov.w	r0, #4294967295
 8008f38:	b004      	add	sp, #16
 8008f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f3e:	4835      	ldr	r0, [pc, #212]	; (8009014 <_printf_i+0x244>)
 8008f40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008f44:	6829      	ldr	r1, [r5, #0]
 8008f46:	6823      	ldr	r3, [r4, #0]
 8008f48:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f4c:	6029      	str	r1, [r5, #0]
 8008f4e:	061d      	lsls	r5, r3, #24
 8008f50:	d514      	bpl.n	8008f7c <_printf_i+0x1ac>
 8008f52:	07df      	lsls	r7, r3, #31
 8008f54:	bf44      	itt	mi
 8008f56:	f043 0320 	orrmi.w	r3, r3, #32
 8008f5a:	6023      	strmi	r3, [r4, #0]
 8008f5c:	b91e      	cbnz	r6, 8008f66 <_printf_i+0x196>
 8008f5e:	6823      	ldr	r3, [r4, #0]
 8008f60:	f023 0320 	bic.w	r3, r3, #32
 8008f64:	6023      	str	r3, [r4, #0]
 8008f66:	2310      	movs	r3, #16
 8008f68:	e7b0      	b.n	8008ecc <_printf_i+0xfc>
 8008f6a:	6823      	ldr	r3, [r4, #0]
 8008f6c:	f043 0320 	orr.w	r3, r3, #32
 8008f70:	6023      	str	r3, [r4, #0]
 8008f72:	2378      	movs	r3, #120	; 0x78
 8008f74:	4828      	ldr	r0, [pc, #160]	; (8009018 <_printf_i+0x248>)
 8008f76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f7a:	e7e3      	b.n	8008f44 <_printf_i+0x174>
 8008f7c:	0659      	lsls	r1, r3, #25
 8008f7e:	bf48      	it	mi
 8008f80:	b2b6      	uxthmi	r6, r6
 8008f82:	e7e6      	b.n	8008f52 <_printf_i+0x182>
 8008f84:	4615      	mov	r5, r2
 8008f86:	e7bb      	b.n	8008f00 <_printf_i+0x130>
 8008f88:	682b      	ldr	r3, [r5, #0]
 8008f8a:	6826      	ldr	r6, [r4, #0]
 8008f8c:	6961      	ldr	r1, [r4, #20]
 8008f8e:	1d18      	adds	r0, r3, #4
 8008f90:	6028      	str	r0, [r5, #0]
 8008f92:	0635      	lsls	r5, r6, #24
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	d501      	bpl.n	8008f9c <_printf_i+0x1cc>
 8008f98:	6019      	str	r1, [r3, #0]
 8008f9a:	e002      	b.n	8008fa2 <_printf_i+0x1d2>
 8008f9c:	0670      	lsls	r0, r6, #25
 8008f9e:	d5fb      	bpl.n	8008f98 <_printf_i+0x1c8>
 8008fa0:	8019      	strh	r1, [r3, #0]
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	6123      	str	r3, [r4, #16]
 8008fa6:	4615      	mov	r5, r2
 8008fa8:	e7ba      	b.n	8008f20 <_printf_i+0x150>
 8008faa:	682b      	ldr	r3, [r5, #0]
 8008fac:	1d1a      	adds	r2, r3, #4
 8008fae:	602a      	str	r2, [r5, #0]
 8008fb0:	681d      	ldr	r5, [r3, #0]
 8008fb2:	6862      	ldr	r2, [r4, #4]
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	f7f7 f8ea 	bl	8000190 <memchr>
 8008fbc:	b108      	cbz	r0, 8008fc2 <_printf_i+0x1f2>
 8008fbe:	1b40      	subs	r0, r0, r5
 8008fc0:	6060      	str	r0, [r4, #4]
 8008fc2:	6863      	ldr	r3, [r4, #4]
 8008fc4:	6123      	str	r3, [r4, #16]
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fcc:	e7a8      	b.n	8008f20 <_printf_i+0x150>
 8008fce:	6923      	ldr	r3, [r4, #16]
 8008fd0:	462a      	mov	r2, r5
 8008fd2:	4649      	mov	r1, r9
 8008fd4:	4640      	mov	r0, r8
 8008fd6:	47d0      	blx	sl
 8008fd8:	3001      	adds	r0, #1
 8008fda:	d0ab      	beq.n	8008f34 <_printf_i+0x164>
 8008fdc:	6823      	ldr	r3, [r4, #0]
 8008fde:	079b      	lsls	r3, r3, #30
 8008fe0:	d413      	bmi.n	800900a <_printf_i+0x23a>
 8008fe2:	68e0      	ldr	r0, [r4, #12]
 8008fe4:	9b03      	ldr	r3, [sp, #12]
 8008fe6:	4298      	cmp	r0, r3
 8008fe8:	bfb8      	it	lt
 8008fea:	4618      	movlt	r0, r3
 8008fec:	e7a4      	b.n	8008f38 <_printf_i+0x168>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	4632      	mov	r2, r6
 8008ff2:	4649      	mov	r1, r9
 8008ff4:	4640      	mov	r0, r8
 8008ff6:	47d0      	blx	sl
 8008ff8:	3001      	adds	r0, #1
 8008ffa:	d09b      	beq.n	8008f34 <_printf_i+0x164>
 8008ffc:	3501      	adds	r5, #1
 8008ffe:	68e3      	ldr	r3, [r4, #12]
 8009000:	9903      	ldr	r1, [sp, #12]
 8009002:	1a5b      	subs	r3, r3, r1
 8009004:	42ab      	cmp	r3, r5
 8009006:	dcf2      	bgt.n	8008fee <_printf_i+0x21e>
 8009008:	e7eb      	b.n	8008fe2 <_printf_i+0x212>
 800900a:	2500      	movs	r5, #0
 800900c:	f104 0619 	add.w	r6, r4, #25
 8009010:	e7f5      	b.n	8008ffe <_printf_i+0x22e>
 8009012:	bf00      	nop
 8009014:	080094e5 	.word	0x080094e5
 8009018:	080094f6 	.word	0x080094f6

0800901c <_sbrk_r>:
 800901c:	b538      	push	{r3, r4, r5, lr}
 800901e:	4d06      	ldr	r5, [pc, #24]	; (8009038 <_sbrk_r+0x1c>)
 8009020:	2300      	movs	r3, #0
 8009022:	4604      	mov	r4, r0
 8009024:	4608      	mov	r0, r1
 8009026:	602b      	str	r3, [r5, #0]
 8009028:	f7f8 ff26 	bl	8001e78 <_sbrk>
 800902c:	1c43      	adds	r3, r0, #1
 800902e:	d102      	bne.n	8009036 <_sbrk_r+0x1a>
 8009030:	682b      	ldr	r3, [r5, #0]
 8009032:	b103      	cbz	r3, 8009036 <_sbrk_r+0x1a>
 8009034:	6023      	str	r3, [r4, #0]
 8009036:	bd38      	pop	{r3, r4, r5, pc}
 8009038:	20000540 	.word	0x20000540

0800903c <memmove>:
 800903c:	4288      	cmp	r0, r1
 800903e:	b510      	push	{r4, lr}
 8009040:	eb01 0402 	add.w	r4, r1, r2
 8009044:	d902      	bls.n	800904c <memmove+0x10>
 8009046:	4284      	cmp	r4, r0
 8009048:	4623      	mov	r3, r4
 800904a:	d807      	bhi.n	800905c <memmove+0x20>
 800904c:	1e43      	subs	r3, r0, #1
 800904e:	42a1      	cmp	r1, r4
 8009050:	d008      	beq.n	8009064 <memmove+0x28>
 8009052:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009056:	f803 2f01 	strb.w	r2, [r3, #1]!
 800905a:	e7f8      	b.n	800904e <memmove+0x12>
 800905c:	4402      	add	r2, r0
 800905e:	4601      	mov	r1, r0
 8009060:	428a      	cmp	r2, r1
 8009062:	d100      	bne.n	8009066 <memmove+0x2a>
 8009064:	bd10      	pop	{r4, pc}
 8009066:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800906a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800906e:	e7f7      	b.n	8009060 <memmove+0x24>

08009070 <__malloc_lock>:
 8009070:	4801      	ldr	r0, [pc, #4]	; (8009078 <__malloc_lock+0x8>)
 8009072:	f7ff bc4d 	b.w	8008910 <__retarget_lock_acquire_recursive>
 8009076:	bf00      	nop
 8009078:	20000534 	.word	0x20000534

0800907c <__malloc_unlock>:
 800907c:	4801      	ldr	r0, [pc, #4]	; (8009084 <__malloc_unlock+0x8>)
 800907e:	f7ff bc48 	b.w	8008912 <__retarget_lock_release_recursive>
 8009082:	bf00      	nop
 8009084:	20000534 	.word	0x20000534

08009088 <_free_r>:
 8009088:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800908a:	2900      	cmp	r1, #0
 800908c:	d044      	beq.n	8009118 <_free_r+0x90>
 800908e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009092:	9001      	str	r0, [sp, #4]
 8009094:	2b00      	cmp	r3, #0
 8009096:	f1a1 0404 	sub.w	r4, r1, #4
 800909a:	bfb8      	it	lt
 800909c:	18e4      	addlt	r4, r4, r3
 800909e:	f7ff ffe7 	bl	8009070 <__malloc_lock>
 80090a2:	4a1e      	ldr	r2, [pc, #120]	; (800911c <_free_r+0x94>)
 80090a4:	9801      	ldr	r0, [sp, #4]
 80090a6:	6813      	ldr	r3, [r2, #0]
 80090a8:	b933      	cbnz	r3, 80090b8 <_free_r+0x30>
 80090aa:	6063      	str	r3, [r4, #4]
 80090ac:	6014      	str	r4, [r2, #0]
 80090ae:	b003      	add	sp, #12
 80090b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090b4:	f7ff bfe2 	b.w	800907c <__malloc_unlock>
 80090b8:	42a3      	cmp	r3, r4
 80090ba:	d908      	bls.n	80090ce <_free_r+0x46>
 80090bc:	6825      	ldr	r5, [r4, #0]
 80090be:	1961      	adds	r1, r4, r5
 80090c0:	428b      	cmp	r3, r1
 80090c2:	bf01      	itttt	eq
 80090c4:	6819      	ldreq	r1, [r3, #0]
 80090c6:	685b      	ldreq	r3, [r3, #4]
 80090c8:	1949      	addeq	r1, r1, r5
 80090ca:	6021      	streq	r1, [r4, #0]
 80090cc:	e7ed      	b.n	80090aa <_free_r+0x22>
 80090ce:	461a      	mov	r2, r3
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	b10b      	cbz	r3, 80090d8 <_free_r+0x50>
 80090d4:	42a3      	cmp	r3, r4
 80090d6:	d9fa      	bls.n	80090ce <_free_r+0x46>
 80090d8:	6811      	ldr	r1, [r2, #0]
 80090da:	1855      	adds	r5, r2, r1
 80090dc:	42a5      	cmp	r5, r4
 80090de:	d10b      	bne.n	80090f8 <_free_r+0x70>
 80090e0:	6824      	ldr	r4, [r4, #0]
 80090e2:	4421      	add	r1, r4
 80090e4:	1854      	adds	r4, r2, r1
 80090e6:	42a3      	cmp	r3, r4
 80090e8:	6011      	str	r1, [r2, #0]
 80090ea:	d1e0      	bne.n	80090ae <_free_r+0x26>
 80090ec:	681c      	ldr	r4, [r3, #0]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	6053      	str	r3, [r2, #4]
 80090f2:	4421      	add	r1, r4
 80090f4:	6011      	str	r1, [r2, #0]
 80090f6:	e7da      	b.n	80090ae <_free_r+0x26>
 80090f8:	d902      	bls.n	8009100 <_free_r+0x78>
 80090fa:	230c      	movs	r3, #12
 80090fc:	6003      	str	r3, [r0, #0]
 80090fe:	e7d6      	b.n	80090ae <_free_r+0x26>
 8009100:	6825      	ldr	r5, [r4, #0]
 8009102:	1961      	adds	r1, r4, r5
 8009104:	428b      	cmp	r3, r1
 8009106:	bf04      	itt	eq
 8009108:	6819      	ldreq	r1, [r3, #0]
 800910a:	685b      	ldreq	r3, [r3, #4]
 800910c:	6063      	str	r3, [r4, #4]
 800910e:	bf04      	itt	eq
 8009110:	1949      	addeq	r1, r1, r5
 8009112:	6021      	streq	r1, [r4, #0]
 8009114:	6054      	str	r4, [r2, #4]
 8009116:	e7ca      	b.n	80090ae <_free_r+0x26>
 8009118:	b003      	add	sp, #12
 800911a:	bd30      	pop	{r4, r5, pc}
 800911c:	20000538 	.word	0x20000538

08009120 <_realloc_r>:
 8009120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009124:	4680      	mov	r8, r0
 8009126:	4614      	mov	r4, r2
 8009128:	460e      	mov	r6, r1
 800912a:	b921      	cbnz	r1, 8009136 <_realloc_r+0x16>
 800912c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009130:	4611      	mov	r1, r2
 8009132:	f7ff bc0f 	b.w	8008954 <_malloc_r>
 8009136:	b92a      	cbnz	r2, 8009144 <_realloc_r+0x24>
 8009138:	f7ff ffa6 	bl	8009088 <_free_r>
 800913c:	4625      	mov	r5, r4
 800913e:	4628      	mov	r0, r5
 8009140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009144:	f000 f81b 	bl	800917e <_malloc_usable_size_r>
 8009148:	4284      	cmp	r4, r0
 800914a:	4607      	mov	r7, r0
 800914c:	d802      	bhi.n	8009154 <_realloc_r+0x34>
 800914e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009152:	d812      	bhi.n	800917a <_realloc_r+0x5a>
 8009154:	4621      	mov	r1, r4
 8009156:	4640      	mov	r0, r8
 8009158:	f7ff fbfc 	bl	8008954 <_malloc_r>
 800915c:	4605      	mov	r5, r0
 800915e:	2800      	cmp	r0, #0
 8009160:	d0ed      	beq.n	800913e <_realloc_r+0x1e>
 8009162:	42bc      	cmp	r4, r7
 8009164:	4622      	mov	r2, r4
 8009166:	4631      	mov	r1, r6
 8009168:	bf28      	it	cs
 800916a:	463a      	movcs	r2, r7
 800916c:	f7ff fb9a 	bl	80088a4 <memcpy>
 8009170:	4631      	mov	r1, r6
 8009172:	4640      	mov	r0, r8
 8009174:	f7ff ff88 	bl	8009088 <_free_r>
 8009178:	e7e1      	b.n	800913e <_realloc_r+0x1e>
 800917a:	4635      	mov	r5, r6
 800917c:	e7df      	b.n	800913e <_realloc_r+0x1e>

0800917e <_malloc_usable_size_r>:
 800917e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009182:	1f18      	subs	r0, r3, #4
 8009184:	2b00      	cmp	r3, #0
 8009186:	bfbc      	itt	lt
 8009188:	580b      	ldrlt	r3, [r1, r0]
 800918a:	18c0      	addlt	r0, r0, r3
 800918c:	4770      	bx	lr
	...

08009190 <_init>:
 8009190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009192:	bf00      	nop
 8009194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009196:	bc08      	pop	{r3}
 8009198:	469e      	mov	lr, r3
 800919a:	4770      	bx	lr

0800919c <_fini>:
 800919c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800919e:	bf00      	nop
 80091a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091a2:	bc08      	pop	{r3}
 80091a4:	469e      	mov	lr, r3
 80091a6:	4770      	bx	lr
