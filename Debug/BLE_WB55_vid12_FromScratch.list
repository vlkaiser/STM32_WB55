
BLE_WB55_vid12_FromScratch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000758c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  080076c8  080076c8  000176c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007938  08007938  00017938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800793c  0800793c  0001793c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000004  08007940  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  20000020  0800795c  00020020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003e  200000bc  080079f5  000200bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000fc  08007a33  000200fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_APP_CONTEXT 00000084  20000110  08007a44  00020110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000002a8  20000194  08007ac8  00020194  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000043c  08007ac8  0002043c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 16 .debug_info   000248f9  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00004ec6  00000000  00000000  00044abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000022b0  00000000  00000000  00049988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00002048  00000000  00000000  0004bc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002a90a  00000000  00000000  0004dc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0002325f  00000000  00000000  0007858a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000efed4  00000000  00000000  0009b7e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000050  00000000  00000000  0018b6bd  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00008eec  00000000  00000000  0018b710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000194 	.word	0x20000194
 8000158:	00000000 	.word	0x00000000
 800015c:	080076b0 	.word	0x080076b0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000198 	.word	0x20000198
 8000178:	080076b0 	.word	0x080076b0

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000192:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <APPD_EnableCPU2+0x34>)
 8000194:	1d3c      	adds	r4, r7, #4
 8000196:	461d      	mov	r5, r3
 8000198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a0:	c403      	stmia	r4!, {r0, r1}
 80001a2:	8022      	strh	r2, [r4, #0]
 80001a4:	3402      	adds	r4, #2
 80001a6:	0c13      	lsrs	r3, r2, #16
 80001a8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80001aa:	f005 ff9f 	bl	80060ec <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	4618      	mov	r0, r3
 80001b2:	f005 fa3a 	bl	800562a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80001b6:	bf00      	nop
}
 80001b8:	3720      	adds	r7, #32
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bdb0      	pop	{r4, r5, r7, pc}
 80001be:	bf00      	nop
 80001c0:	080076c8 	.word	0x080076c8

080001c4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80001d2:	f023 0207 	bic.w	r2, r3, #7
 80001d6:	4905      	ldr	r1, [pc, #20]	; (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4313      	orrs	r3, r2
 80001dc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr
 80001ec:	58000400 	.word	0x58000400

080001f0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80001f8:	4b06      	ldr	r3, [pc, #24]	; (8000214 <LL_EXTI_EnableIT_32_63+0x24>)
 80001fa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80001fe:	4905      	ldr	r1, [pc, #20]	; (8000214 <LL_EXTI_EnableIT_32_63+0x24>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4313      	orrs	r3, r2
 8000204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	58000800 	.word	0x58000800

08000218 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000224:	4a0a      	ldr	r2, [pc, #40]	; (8000250 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000226:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800022a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800022e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000232:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	021b      	lsls	r3, r3, #8
 800023a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800023e:	4313      	orrs	r3, r2
 8000240:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	cafecafe 	.word	0xcafecafe

08000254 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800025c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000266:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4313      	orrs	r3, r2
 800026e:	608b      	str	r3, [r1, #8]
}
 8000270:	bf00      	nop
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr

0800027c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000288:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800028c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr

0800029e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800029e:	b480      	push	{r7}
 80002a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80002a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80002aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80002ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80002b6:	bf00      	nop
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80002c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80002cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80002d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80002d4:	d101      	bne.n	80002da <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80002d6:	2301      	movs	r3, #1
 80002d8:	e000      	b.n	80002dc <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80002da:	2300      	movs	r3, #0
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr

080002e6 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80002e6:	b480      	push	{r7}
 80002e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80002ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80002f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80002fa:	d101      	bne.n	8000300 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80002fc:	2301      	movs	r3, #1
 80002fe:	e000      	b.n	8000302 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000300:	2300      	movs	r3, #0
}
 8000302:	4618      	mov	r0, r3
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr

0800030c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000318:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800031a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4313      	orrs	r3, r2
 8000322:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000328:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4013      	ands	r3, r2
 800032e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000330:	68fb      	ldr	r3, [r7, #12]
}
 8000332:	bf00      	nop
 8000334:	3714      	adds	r7, #20
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
	...

08000340 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000344:	4b04      	ldr	r3, [pc, #16]	; (8000358 <LL_DBGMCU_GetRevisionID+0x18>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	0c1b      	lsrs	r3, r3, #16
 800034a:	b29b      	uxth	r3, r3
}
 800034c:	4618      	mov	r0, r3
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	e0042000 	.word	0xe0042000

0800035c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	685a      	ldr	r2, [r3, #4]
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	041b      	lsls	r3, r3, #16
 800036e:	431a      	orrs	r2, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	605a      	str	r2, [r3, #4]
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr

08000380 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	685a      	ldr	r2, [r3, #4]
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	431a      	orrs	r2, r3
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	605a      	str	r2, [r3, #4]
}
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr

080003a2 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80003a2:	b480      	push	{r7}
 80003a4:	b083      	sub	sp, #12
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	6078      	str	r0, [r7, #4]
 80003aa:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	695a      	ldr	r2, [r3, #20]
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	041b      	lsls	r3, r3, #16
 80003b4:	431a      	orrs	r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	615a      	str	r2, [r3, #20]
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr

080003c6 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80003c6:	b480      	push	{r7}
 80003c8:	b083      	sub	sp, #12
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	6078      	str	r0, [r7, #4]
 80003ce:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	695a      	ldr	r2, [r3, #20]
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	431a      	orrs	r2, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	615a      	str	r2, [r3, #20]
}
 80003dc:	bf00      	nop
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr

080003e8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	683a      	ldr	r2, [r7, #0]
 80003f6:	609a      	str	r2, [r3, #8]
}
 80003f8:	bf00      	nop
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr

08000404 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	683a      	ldr	r2, [r7, #0]
 8000412:	619a      	str	r2, [r3, #24]
}
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr

08000420 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	22ff      	movs	r2, #255	; 0xff
 800042c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800042e:	bf00      	nop
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr

0800043a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800043a:	b480      	push	{r7}
 800043c:	b083      	sub	sp, #12
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	22ca      	movs	r2, #202	; 0xca
 8000446:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	2253      	movs	r2, #83	; 0x53
 800044c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800044e:	bf00      	nop
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr

0800045a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800045a:	b480      	push	{r7}
 800045c:	b083      	sub	sp, #12
 800045e:	af00      	add	r7, sp, #0
 8000460:	6078      	str	r0, [r7, #4]
 8000462:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	f023 0207 	bic.w	r2, r3, #7
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	431a      	orrs	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	609a      	str	r2, [r3, #8]
}
 8000474:	bf00      	nop
 8000476:	370c      	adds	r7, #12
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr

08000480 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 8000484:	4b04      	ldr	r3, [pc, #16]	; (8000498 <MX_APPE_Config+0x18>)
 8000486:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800048a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 800048c:	f000 f824 	bl	80004d8 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000490:	f000 f864 	bl	800055c <Config_HSE>

  return;
 8000494:	bf00      	nop
}
 8000496:	bd80      	pop	{r7, pc}
 8000498:	58004000 	.word	0x58004000

0800049c <MX_APPE_Init>:

void MX_APPE_Init( void )
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  System_Init( );       /**< System initialization */
 80004a0:	f000 f870 	bl	8000584 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80004a4:	f000 f888 	bl	80005b8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80004a8:	4903      	ldr	r1, [pc, #12]	; (80004b8 <MX_APPE_Init+0x1c>)
 80004aa:	2000      	movs	r0, #0
 80004ac:	f000 fdc0 	bl	8001030 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80004b0:	f000 f890 	bl	80005d4 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80004b4:	bf00      	nop
}
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	200001f8 	.word	0x200001f8

080004bc <Init_Smps>:

void Init_Smps( void )
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  return;
 80004c0:	bf00      	nop
}
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr

080004ca <Init_Exti>:

void Init_Exti( void )
{
 80004ca:	b580      	push	{r7, lr}
 80004cc:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63( LL_EXTI_LINE_36 & LL_EXTI_LINE_38 );
 80004ce:	2000      	movs	r0, #0
 80004d0:	f7ff fe8e 	bl	80001f0 <LL_EXTI_EnableIT_32_63>

  return;
 80004d4:	bf00      	nop
}
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 80004dc:	f000 f804 	bl	80004e8 <Reset_BackupDomain>

  Reset_IPCC();
 80004e0:	f000 f81a 	bl	8000518 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW */

  return;
 80004e4:	bf00      	nop
}
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80004ec:	f7ff fee8 	bl	80002c0 <LL_RCC_IsActiveFlag_PINRST>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d00d      	beq.n	8000512 <Reset_BackupDomain+0x2a>
 80004f6:	f7ff fef6 	bl	80002e6 <LL_RCC_IsActiveFlag_SFTRST>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d108      	bne.n	8000512 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000500:	f001 ff1e 	bl	8002340 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000504:	f001 ff1c 	bl	8002340 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000508:	f7ff feb8 	bl	800027c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 800050c:	f7ff fec7 	bl	800029e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000510:	bf00      	nop
 8000512:	bf00      	nop
}
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 800051c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000520:	f7ff fef4 	bl	800030c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000524:	213f      	movs	r1, #63	; 0x3f
 8000526:	480c      	ldr	r0, [pc, #48]	; (8000558 <Reset_IPCC+0x40>)
 8000528:	f7ff ff5e 	bl	80003e8 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 800052c:	213f      	movs	r1, #63	; 0x3f
 800052e:	480a      	ldr	r0, [pc, #40]	; (8000558 <Reset_IPCC+0x40>)
 8000530:	f7ff ff68 	bl	8000404 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000534:	213f      	movs	r1, #63	; 0x3f
 8000536:	4808      	ldr	r0, [pc, #32]	; (8000558 <Reset_IPCC+0x40>)
 8000538:	f7ff ff10 	bl	800035c <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 800053c:	213f      	movs	r1, #63	; 0x3f
 800053e:	4806      	ldr	r0, [pc, #24]	; (8000558 <Reset_IPCC+0x40>)
 8000540:	f7ff ff2f 	bl	80003a2 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000544:	213f      	movs	r1, #63	; 0x3f
 8000546:	4804      	ldr	r0, [pc, #16]	; (8000558 <Reset_IPCC+0x40>)
 8000548:	f7ff ff1a 	bl	8000380 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 800054c:	213f      	movs	r1, #63	; 0x3f
 800054e:	4802      	ldr	r0, [pc, #8]	; (8000558 <Reset_IPCC+0x40>)
 8000550:	f7ff ff39 	bl	80003c6 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000554:	bf00      	nop
}
 8000556:	bd80      	pop	{r7, pc}
 8000558:	58000c00 	.word	0x58000c00

0800055c <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000562:	2000      	movs	r0, #0
 8000564:	f005 fe4e 	bl	8006204 <OTP_Read>
 8000568:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d005      	beq.n	800057c <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	799b      	ldrb	r3, [r3, #6]
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff fe4f 	bl	8000218 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800057a:	bf00      	nop
 800057c:	bf00      	nop
}
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <System_Init>:

static void System_Init( void )
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  Init_Smps( );
 8000588:	f7ff ff98 	bl	80004bc <Init_Smps>

  Init_Exti( );
 800058c:	f7ff ff9d 	bl	80004ca <Init_Exti>

  Init_Rtc( );
 8000590:	f000 f802 	bl	8000598 <Init_Rtc>

  return;
 8000594:	bf00      	nop
}
 8000596:	bd80      	pop	{r7, pc}

08000598 <Init_Rtc>:

static void Init_Rtc( void )
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 800059c:	4805      	ldr	r0, [pc, #20]	; (80005b4 <Init_Rtc+0x1c>)
 800059e:	f7ff ff4c 	bl	800043a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80005a2:	2100      	movs	r1, #0
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <Init_Rtc+0x1c>)
 80005a6:	f7ff ff58 	bl	800045a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80005aa:	4802      	ldr	r0, [pc, #8]	; (80005b4 <Init_Rtc+0x1c>)
 80005ac:	f7ff ff38 	bl	8000420 <LL_RTC_EnableWriteProtection>

  return;
 80005b0:	bf00      	nop
}
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40002800 	.word	0x40002800

080005b8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80005bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80005c0:	f7ff fe48 	bl	8000254 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80005c4:	f006 fdca 	bl	800715c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80005c8:	2004      	movs	r0, #4
 80005ca:	f7ff fdfb 	bl	80001c4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 80005ce:	bf00      	nop
}
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80005da:	f005 fbd1 	bl	8005d80 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 80005de:	4a11      	ldr	r2, [pc, #68]	; (8000624 <appe_Tl_Init+0x50>)
 80005e0:	2100      	movs	r1, #0
 80005e2:	2008      	movs	r0, #8
 80005e4:	f006 fee6 	bl	80073b4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <appe_Tl_Init+0x54>)
 80005ea:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <appe_Tl_Init+0x58>)
 80005ee:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80005f0:	463b      	mov	r3, r7
 80005f2:	4619      	mov	r1, r3
 80005f4:	480e      	ldr	r0, [pc, #56]	; (8000630 <appe_Tl_Init+0x5c>)
 80005f6:	f005 fa89 	bl	8005b0c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <appe_Tl_Init+0x60>)
 80005fc:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <appe_Tl_Init+0x64>)
 8000600:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <appe_Tl_Init+0x68>)
 8000604:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000606:	f240 533c 	movw	r3, #1340	; 0x53c
 800060a:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	4618      	mov	r0, r3
 8000612:	f005 fcf7 	bl	8006004 <TL_MM_Init>

  TL_Enable();
 8000616:	f005 fbad 	bl	8005d74 <TL_Enable>

  return;
 800061a:	bf00      	nop
}
 800061c:	3720      	adds	r7, #32
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	08005b45 	.word	0x08005b45
 8000628:	20030724 	.word	0x20030724
 800062c:	08000641 	.word	0x08000641
 8000630:	08000659 	.word	0x08000659
 8000634:	2003093c 	.word	0x2003093c
 8000638:	20030830 	.word	0x20030830
 800063c:	200301e8 	.word	0x200301e8

08000640 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800064a:	bf00      	nop
}
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
	...

08000658 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	330b      	adds	r3, #11
 8000666:	61fb      	str	r3, [r7, #28]

  /* Read the firmware version of both the wireless firmware and the FUS */
  SHCI_GetWirelessFwInfo( &WirelessInfo );
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	4618      	mov	r0, r3
 800066e:	f005 f809 	bl	8005684 <SHCI_GetWirelessFwInfo>
  APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
  APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
  APP_DBG_MSG("FUS version %d.%d.%d\n\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

  switch(p_sys_event->subevtcode)
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	b29b      	uxth	r3, r3
 8000678:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800067c:	2b07      	cmp	r3, #7
 800067e:	d81b      	bhi.n	80006b8 <APPE_SysUserEvtRx+0x60>
 8000680:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <APPE_SysUserEvtRx+0x30>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	080006a9 	.word	0x080006a9
 800068c:	080006b1 	.word	0x080006b1
 8000690:	080006b9 	.word	0x080006b9
 8000694:	080006b9 	.word	0x080006b9
 8000698:	080006b9 	.word	0x080006b9
 800069c:	080006b9 	.word	0x080006b9
 80006a0:	080006b9 	.word	0x080006b9
 80006a4:	080006b9 	.word	0x080006b9
  {
  case SHCI_SUB_EVT_CODE_READY:
    APPE_SysEvtReadyProcessing(pPayload);
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f000 f81c 	bl	80006e6 <APPE_SysEvtReadyProcessing>
    break;
 80006ae:	e004      	b.n	80006ba <APPE_SysUserEvtRx+0x62>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APPE_SysEvtError(pPayload);
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f000 f807 	bl	80006c4 <APPE_SysEvtError>
    break;
 80006b6:	e000      	b.n	80006ba <APPE_SysUserEvtRx+0x62>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_ERASE\n");
    break;

  default:
    break;
 80006b8:	bf00      	nop
  }

  return;
 80006ba:	bf00      	nop
}
 80006bc:	3720      	adds	r7, #32
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop

080006c4 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( void * pPayload)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	330b      	adds	r3, #11
 80006d2:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	3302      	adds	r3, #2
 80006d8:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80006da:	bf00      	nop
}
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void * pPayload )
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b08a      	sub	sp, #40	; 0x28
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	330b      	adds	r3, #11
 8000706:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000708:	6a3b      	ldr	r3, [r7, #32]
 800070a:	3302      	adds	r3, #2
 800070c:	61fb      	str	r3, [r7, #28]

  if(p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d117      	bne.n	8000746 <APPE_SysEvtReadyProcessing+0x60>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2( );
 8000716:	f7ff fd39 	bl	800018c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800071a:	230d      	movs	r3, #13
 800071c:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800071e:	237f      	movs	r3, #127	; 0x7f
 8000720:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000722:	f7ff fe0d 	bl	8000340 <LL_DBGMCU_GetRevisionID>
 8000726:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG("DBGMCU_GetRevisionID= %lx \n\n", RevisionID);

    config_param.RevisionID = RevisionID;
 8000728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072a:	b29b      	uxth	r3, r3
 800072c:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	4618      	mov	r0, r3
 8000734:	f004 ff90 	bl	8005658 <SHCI_C2_Config>

    APP_BLE_Init( );
 8000738:	f005 fe6e 	bl	8006418 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800073c:	2100      	movs	r1, #0
 800073e:	2001      	movs	r0, #1
 8000740:	f006 fd1e 	bl	8007180 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n");
  }

  return;
 8000744:	e007      	b.n	8000756 <APPE_SysEvtReadyProcessing+0x70>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d103      	bne.n	8000756 <APPE_SysEvtReadyProcessing+0x70>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
  return;
 8000754:	bf00      	nop
 8000756:	bf00      	nop
}
 8000758:	3728      	adds	r7, #40	; 0x28
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <MX_APPE_Process>:
    __WFI( );
  }
}

void MX_APPE_Process(void)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000762:	f04f 30ff 	mov.w	r0, #4294967295
 8000766:	f006 fd3b 	bl	80071e0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}

0800076e <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8000772:	bf00      	nop
}
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000786:	f04f 30ff 	mov.w	r0, #4294967295
 800078a:	f006 fd29 	bl	80071e0 <UTIL_SEQ_Run>

  return;
 800078e:	bf00      	nop
}
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800079e:	2100      	movs	r1, #0
 80007a0:	2008      	movs	r0, #8
 80007a2:	f006 fe29 	bl	80073f8 <UTIL_SEQ_SetTask>
  return;
 80007a6:	bf00      	nop
}
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80007b6:	2002      	movs	r0, #2
 80007b8:	f006 fe8a 	bl	80074d0 <UTIL_SEQ_SetEvt>
  return;
 80007bc:	bf00      	nop
}
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80007cc:	2002      	movs	r0, #2
 80007ce:	f006 fe9f 	bl	8007510 <UTIL_SEQ_WaitEvt>
  return;
 80007d2:	bf00      	nop
}
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <LL_EXTI_EnableIT_0_31>:
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <LL_EXTI_EnableIT_0_31+0x24>)
 80007e6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80007ea:	4905      	ldr	r1, [pc, #20]	; (8000800 <LL_EXTI_EnableIT_0_31+0x24>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	58000800 	.word	0x58000800

08000804 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4904      	ldr	r1, [pc, #16]	; (8000824 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4313      	orrs	r3, r2
 8000816:	600b      	str	r3, [r1, #0]

}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	58000800 	.word	0x58000800

08000828 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800082e:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <ReadRtcSsrValue+0x3c>)
 8000830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000832:	b29b      	uxth	r3, r3
 8000834:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <ReadRtcSsrValue+0x3c>)
 8000838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800083a:	b29b      	uxth	r3, r3
 800083c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800083e:	e005      	b.n	800084c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <ReadRtcSsrValue+0x3c>)
 8000846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000848:	b29b      	uxth	r3, r3
 800084a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	429a      	cmp	r2, r3
 8000852:	d1f5      	bne.n	8000840 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000854:	683b      	ldr	r3, [r7, #0]
}
 8000856:	4618      	mov	r0, r3
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	40002800 	.word	0x40002800

08000868 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	460a      	mov	r2, r1
 8000872:	71fb      	strb	r3, [r7, #7]
 8000874:	4613      	mov	r3, r2
 8000876:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000878:	79ba      	ldrb	r2, [r7, #6]
 800087a:	491d      	ldr	r1, [pc, #116]	; (80008f0 <LinkTimerAfter+0x88>)
 800087c:	4613      	mov	r3, r2
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	4413      	add	r3, r2
 8000882:	00db      	lsls	r3, r3, #3
 8000884:	440b      	add	r3, r1
 8000886:	3315      	adds	r3, #21
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800088c:	7bfb      	ldrb	r3, [r7, #15]
 800088e:	2b06      	cmp	r3, #6
 8000890:	d009      	beq.n	80008a6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000892:	7bfa      	ldrb	r2, [r7, #15]
 8000894:	4916      	ldr	r1, [pc, #88]	; (80008f0 <LinkTimerAfter+0x88>)
 8000896:	4613      	mov	r3, r2
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	4413      	add	r3, r2
 800089c:	00db      	lsls	r3, r3, #3
 800089e:	440b      	add	r3, r1
 80008a0:	3314      	adds	r3, #20
 80008a2:	79fa      	ldrb	r2, [r7, #7]
 80008a4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80008a6:	79fa      	ldrb	r2, [r7, #7]
 80008a8:	4911      	ldr	r1, [pc, #68]	; (80008f0 <LinkTimerAfter+0x88>)
 80008aa:	4613      	mov	r3, r2
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	4413      	add	r3, r2
 80008b0:	00db      	lsls	r3, r3, #3
 80008b2:	440b      	add	r3, r1
 80008b4:	3315      	adds	r3, #21
 80008b6:	7bfa      	ldrb	r2, [r7, #15]
 80008b8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80008ba:	79fa      	ldrb	r2, [r7, #7]
 80008bc:	490c      	ldr	r1, [pc, #48]	; (80008f0 <LinkTimerAfter+0x88>)
 80008be:	4613      	mov	r3, r2
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	4413      	add	r3, r2
 80008c4:	00db      	lsls	r3, r3, #3
 80008c6:	440b      	add	r3, r1
 80008c8:	3314      	adds	r3, #20
 80008ca:	79ba      	ldrb	r2, [r7, #6]
 80008cc:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80008ce:	79ba      	ldrb	r2, [r7, #6]
 80008d0:	4907      	ldr	r1, [pc, #28]	; (80008f0 <LinkTimerAfter+0x88>)
 80008d2:	4613      	mov	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4413      	add	r3, r2
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	440b      	add	r3, r1
 80008dc:	3315      	adds	r3, #21
 80008de:	79fa      	ldrb	r2, [r7, #7]
 80008e0:	701a      	strb	r2, [r3, #0]

  return;
 80008e2:	bf00      	nop
}
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	20000020 	.word	0x20000020

080008f4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	460a      	mov	r2, r1
 80008fe:	71fb      	strb	r3, [r7, #7]
 8000900:	4613      	mov	r3, r2
 8000902:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000904:	4b29      	ldr	r3, [pc, #164]	; (80009ac <LinkTimerBefore+0xb8>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	79ba      	ldrb	r2, [r7, #6]
 800090c:	429a      	cmp	r2, r3
 800090e:	d032      	beq.n	8000976 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000910:	79ba      	ldrb	r2, [r7, #6]
 8000912:	4927      	ldr	r1, [pc, #156]	; (80009b0 <LinkTimerBefore+0xbc>)
 8000914:	4613      	mov	r3, r2
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	4413      	add	r3, r2
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	440b      	add	r3, r1
 800091e:	3314      	adds	r3, #20
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000924:	7bfa      	ldrb	r2, [r7, #15]
 8000926:	4922      	ldr	r1, [pc, #136]	; (80009b0 <LinkTimerBefore+0xbc>)
 8000928:	4613      	mov	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	4413      	add	r3, r2
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	440b      	add	r3, r1
 8000932:	3315      	adds	r3, #21
 8000934:	79fa      	ldrb	r2, [r7, #7]
 8000936:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000938:	79fa      	ldrb	r2, [r7, #7]
 800093a:	491d      	ldr	r1, [pc, #116]	; (80009b0 <LinkTimerBefore+0xbc>)
 800093c:	4613      	mov	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	4413      	add	r3, r2
 8000942:	00db      	lsls	r3, r3, #3
 8000944:	440b      	add	r3, r1
 8000946:	3315      	adds	r3, #21
 8000948:	79ba      	ldrb	r2, [r7, #6]
 800094a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800094c:	79fa      	ldrb	r2, [r7, #7]
 800094e:	4918      	ldr	r1, [pc, #96]	; (80009b0 <LinkTimerBefore+0xbc>)
 8000950:	4613      	mov	r3, r2
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	4413      	add	r3, r2
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	440b      	add	r3, r1
 800095a:	3314      	adds	r3, #20
 800095c:	7bfa      	ldrb	r2, [r7, #15]
 800095e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000960:	79ba      	ldrb	r2, [r7, #6]
 8000962:	4913      	ldr	r1, [pc, #76]	; (80009b0 <LinkTimerBefore+0xbc>)
 8000964:	4613      	mov	r3, r2
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	4413      	add	r3, r2
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	440b      	add	r3, r1
 800096e:	3314      	adds	r3, #20
 8000970:	79fa      	ldrb	r2, [r7, #7]
 8000972:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000974:	e014      	b.n	80009a0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000976:	79fa      	ldrb	r2, [r7, #7]
 8000978:	490d      	ldr	r1, [pc, #52]	; (80009b0 <LinkTimerBefore+0xbc>)
 800097a:	4613      	mov	r3, r2
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	4413      	add	r3, r2
 8000980:	00db      	lsls	r3, r3, #3
 8000982:	440b      	add	r3, r1
 8000984:	3315      	adds	r3, #21
 8000986:	79ba      	ldrb	r2, [r7, #6]
 8000988:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800098a:	79ba      	ldrb	r2, [r7, #6]
 800098c:	4908      	ldr	r1, [pc, #32]	; (80009b0 <LinkTimerBefore+0xbc>)
 800098e:	4613      	mov	r3, r2
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	4413      	add	r3, r2
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	440b      	add	r3, r1
 8000998:	3314      	adds	r3, #20
 800099a:	79fa      	ldrb	r2, [r7, #7]
 800099c:	701a      	strb	r2, [r3, #0]
  return;
 800099e:	bf00      	nop
}
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	200000b0 	.word	0x200000b0
 80009b0:	20000020 	.word	0x20000020

080009b4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009be:	4b4e      	ldr	r3, [pc, #312]	; (8000af8 <linkTimer+0x144>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	2b06      	cmp	r3, #6
 80009c6:	d118      	bne.n	80009fa <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80009c8:	4b4b      	ldr	r3, [pc, #300]	; (8000af8 <linkTimer+0x144>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4b4b      	ldr	r3, [pc, #300]	; (8000afc <linkTimer+0x148>)
 80009d0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80009d2:	4a49      	ldr	r2, [pc, #292]	; (8000af8 <linkTimer+0x144>)
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80009d8:	79fa      	ldrb	r2, [r7, #7]
 80009da:	4949      	ldr	r1, [pc, #292]	; (8000b00 <linkTimer+0x14c>)
 80009dc:	4613      	mov	r3, r2
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	4413      	add	r3, r2
 80009e2:	00db      	lsls	r3, r3, #3
 80009e4:	440b      	add	r3, r1
 80009e6:	3315      	adds	r3, #21
 80009e8:	2206      	movs	r2, #6
 80009ea:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80009ec:	4b45      	ldr	r3, [pc, #276]	; (8000b04 <linkTimer+0x150>)
 80009ee:	f04f 32ff 	mov.w	r2, #4294967295
 80009f2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	81fb      	strh	r3, [r7, #14]
 80009f8:	e078      	b.n	8000aec <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80009fa:	f000 f909 	bl	8000c10 <ReturnTimeElapsed>
 80009fe:	4603      	mov	r3, r0
 8000a00:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000a02:	79fa      	ldrb	r2, [r7, #7]
 8000a04:	493e      	ldr	r1, [pc, #248]	; (8000b00 <linkTimer+0x14c>)
 8000a06:	4613      	mov	r3, r2
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	4413      	add	r3, r2
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	440b      	add	r3, r1
 8000a10:	3308      	adds	r3, #8
 8000a12:	6819      	ldr	r1, [r3, #0]
 8000a14:	89fb      	ldrh	r3, [r7, #14]
 8000a16:	79fa      	ldrb	r2, [r7, #7]
 8000a18:	4419      	add	r1, r3
 8000a1a:	4839      	ldr	r0, [pc, #228]	; (8000b00 <linkTimer+0x14c>)
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	4413      	add	r3, r2
 8000a22:	00db      	lsls	r3, r3, #3
 8000a24:	4403      	add	r3, r0
 8000a26:	3308      	adds	r3, #8
 8000a28:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000a2a:	79fa      	ldrb	r2, [r7, #7]
 8000a2c:	4934      	ldr	r1, [pc, #208]	; (8000b00 <linkTimer+0x14c>)
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	440b      	add	r3, r1
 8000a38:	3308      	adds	r3, #8
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000a3e:	4b2e      	ldr	r3, [pc, #184]	; (8000af8 <linkTimer+0x144>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	4619      	mov	r1, r3
 8000a46:	4a2e      	ldr	r2, [pc, #184]	; (8000b00 <linkTimer+0x14c>)
 8000a48:	460b      	mov	r3, r1
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	440b      	add	r3, r1
 8000a4e:	00db      	lsls	r3, r3, #3
 8000a50:	4413      	add	r3, r2
 8000a52:	3308      	adds	r3, #8
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d337      	bcc.n	8000acc <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000a5c:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <linkTimer+0x144>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000a62:	7b7a      	ldrb	r2, [r7, #13]
 8000a64:	4926      	ldr	r1, [pc, #152]	; (8000b00 <linkTimer+0x14c>)
 8000a66:	4613      	mov	r3, r2
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	4413      	add	r3, r2
 8000a6c:	00db      	lsls	r3, r3, #3
 8000a6e:	440b      	add	r3, r1
 8000a70:	3315      	adds	r3, #21
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000a76:	e013      	b.n	8000aa0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000a78:	7b7a      	ldrb	r2, [r7, #13]
 8000a7a:	4921      	ldr	r1, [pc, #132]	; (8000b00 <linkTimer+0x14c>)
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	4413      	add	r3, r2
 8000a82:	00db      	lsls	r3, r3, #3
 8000a84:	440b      	add	r3, r1
 8000a86:	3315      	adds	r3, #21
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000a8c:	7b7a      	ldrb	r2, [r7, #13]
 8000a8e:	491c      	ldr	r1, [pc, #112]	; (8000b00 <linkTimer+0x14c>)
 8000a90:	4613      	mov	r3, r2
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	4413      	add	r3, r2
 8000a96:	00db      	lsls	r3, r3, #3
 8000a98:	440b      	add	r3, r1
 8000a9a:	3315      	adds	r3, #21
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000aa0:	7b3b      	ldrb	r3, [r7, #12]
 8000aa2:	2b06      	cmp	r3, #6
 8000aa4:	d00b      	beq.n	8000abe <linkTimer+0x10a>
 8000aa6:	7b3a      	ldrb	r2, [r7, #12]
 8000aa8:	4915      	ldr	r1, [pc, #84]	; (8000b00 <linkTimer+0x14c>)
 8000aaa:	4613      	mov	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4413      	add	r3, r2
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	440b      	add	r3, r1
 8000ab4:	3308      	adds	r3, #8
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	68ba      	ldr	r2, [r7, #8]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d2dc      	bcs.n	8000a78 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000abe:	7b7a      	ldrb	r2, [r7, #13]
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fecf 	bl	8000868 <LinkTimerAfter>
 8000aca:	e00f      	b.n	8000aec <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <linkTimer+0x144>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff ff0c 	bl	80008f4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <linkTimer+0x144>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <linkTimer+0x148>)
 8000ae4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000ae6:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <linkTimer+0x144>)
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000aec:	89fb      	ldrh	r3, [r7, #14]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200000b0 	.word	0x200000b0
 8000afc:	200000b1 	.word	0x200000b1
 8000b00:	20000020 	.word	0x20000020
 8000b04:	200000b4 	.word	0x200000b4

08000b08 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	460a      	mov	r2, r1
 8000b12:	71fb      	strb	r3, [r7, #7]
 8000b14:	4613      	mov	r3, r2
 8000b16:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000b18:	4b39      	ldr	r3, [pc, #228]	; (8000c00 <UnlinkTimer+0xf8>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	79fa      	ldrb	r2, [r7, #7]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d111      	bne.n	8000b48 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000b24:	4b36      	ldr	r3, [pc, #216]	; (8000c00 <UnlinkTimer+0xf8>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4b36      	ldr	r3, [pc, #216]	; (8000c04 <UnlinkTimer+0xfc>)
 8000b2c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000b2e:	79fa      	ldrb	r2, [r7, #7]
 8000b30:	4935      	ldr	r1, [pc, #212]	; (8000c08 <UnlinkTimer+0x100>)
 8000b32:	4613      	mov	r3, r2
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	4413      	add	r3, r2
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	440b      	add	r3, r1
 8000b3c:	3315      	adds	r3, #21
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4b2f      	ldr	r3, [pc, #188]	; (8000c00 <UnlinkTimer+0xf8>)
 8000b44:	701a      	strb	r2, [r3, #0]
 8000b46:	e03e      	b.n	8000bc6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000b48:	79fa      	ldrb	r2, [r7, #7]
 8000b4a:	492f      	ldr	r1, [pc, #188]	; (8000c08 <UnlinkTimer+0x100>)
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	4413      	add	r3, r2
 8000b52:	00db      	lsls	r3, r3, #3
 8000b54:	440b      	add	r3, r1
 8000b56:	3314      	adds	r3, #20
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000b5c:	79fa      	ldrb	r2, [r7, #7]
 8000b5e:	492a      	ldr	r1, [pc, #168]	; (8000c08 <UnlinkTimer+0x100>)
 8000b60:	4613      	mov	r3, r2
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	4413      	add	r3, r2
 8000b66:	00db      	lsls	r3, r3, #3
 8000b68:	440b      	add	r3, r1
 8000b6a:	3315      	adds	r3, #21
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000b70:	79f9      	ldrb	r1, [r7, #7]
 8000b72:	7bfa      	ldrb	r2, [r7, #15]
 8000b74:	4824      	ldr	r0, [pc, #144]	; (8000c08 <UnlinkTimer+0x100>)
 8000b76:	460b      	mov	r3, r1
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	440b      	add	r3, r1
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	4403      	add	r3, r0
 8000b80:	3315      	adds	r3, #21
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	b2d8      	uxtb	r0, r3
 8000b86:	4920      	ldr	r1, [pc, #128]	; (8000c08 <UnlinkTimer+0x100>)
 8000b88:	4613      	mov	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	4413      	add	r3, r2
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	440b      	add	r3, r1
 8000b92:	3315      	adds	r3, #21
 8000b94:	4602      	mov	r2, r0
 8000b96:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b98:	7bbb      	ldrb	r3, [r7, #14]
 8000b9a:	2b06      	cmp	r3, #6
 8000b9c:	d013      	beq.n	8000bc6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000b9e:	79f9      	ldrb	r1, [r7, #7]
 8000ba0:	7bba      	ldrb	r2, [r7, #14]
 8000ba2:	4819      	ldr	r0, [pc, #100]	; (8000c08 <UnlinkTimer+0x100>)
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	440b      	add	r3, r1
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	4403      	add	r3, r0
 8000bae:	3314      	adds	r3, #20
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	b2d8      	uxtb	r0, r3
 8000bb4:	4914      	ldr	r1, [pc, #80]	; (8000c08 <UnlinkTimer+0x100>)
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	4413      	add	r3, r2
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	440b      	add	r3, r1
 8000bc0:	3314      	adds	r3, #20
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000bc6:	79fa      	ldrb	r2, [r7, #7]
 8000bc8:	490f      	ldr	r1, [pc, #60]	; (8000c08 <UnlinkTimer+0x100>)
 8000bca:	4613      	mov	r3, r2
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	4413      	add	r3, r2
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	440b      	add	r3, r1
 8000bd4:	330c      	adds	r3, #12
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <UnlinkTimer+0xf8>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b06      	cmp	r3, #6
 8000be2:	d107      	bne.n	8000bf4 <UnlinkTimer+0xec>
 8000be4:	79bb      	ldrb	r3, [r7, #6]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d104      	bne.n	8000bf4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <UnlinkTimer+0x104>)
 8000bec:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf0:	601a      	str	r2, [r3, #0]
  }

  return;
 8000bf2:	bf00      	nop
 8000bf4:	bf00      	nop
}
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	200000b0 	.word	0x200000b0
 8000c04:	200000b1 	.word	0x200000b1
 8000c08:	20000020 	.word	0x20000020
 8000c0c:	200000b4 	.word	0x200000b4

08000c10 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000c16:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <ReturnTimeElapsed+0x70>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c1e:	d026      	beq.n	8000c6e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000c20:	f7ff fe02 	bl	8000828 <ReadRtcSsrValue>
 8000c24:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000c26:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <ReturnTimeElapsed+0x70>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d805      	bhi.n	8000c3c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000c30:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <ReturnTimeElapsed+0x70>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	e00a      	b.n	8000c52 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <ReturnTimeElapsed+0x74>)
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000c48:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <ReturnTimeElapsed+0x70>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	683a      	ldr	r2, [r7, #0]
 8000c4e:	4413      	add	r3, r2
 8000c50:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000c52:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <ReturnTimeElapsed+0x78>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	fb02 f303 	mul.w	r3, r2, r3
 8000c5e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000c60:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <ReturnTimeElapsed+0x7c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	40d3      	lsrs	r3, r2
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	e001      	b.n	8000c72 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	b29b      	uxth	r3, r3
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200000b4 	.word	0x200000b4
 8000c84:	200001b6 	.word	0x200001b6
 8000c88:	200001b5 	.word	0x200001b5
 8000c8c:	200001b4 	.word	0x200001b4

08000c90 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d108      	bne.n	8000cb2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000ca0:	f7ff fdc2 	bl	8000828 <ReadRtcSsrValue>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	4a24      	ldr	r2, [pc, #144]	; (8000d38 <RestartWakeupCounter+0xa8>)
 8000ca8:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000caa:	2003      	movs	r0, #3
 8000cac:	f001 f8c7 	bl	8001e3e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000cb0:	e03e      	b.n	8000d30 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000cb2:	88fb      	ldrh	r3, [r7, #6]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d803      	bhi.n	8000cc0 <RestartWakeupCounter+0x30>
 8000cb8:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <RestartWakeupCounter+0xac>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d002      	beq.n	8000cc6 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000cc6:	bf00      	nop
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <RestartWakeupCounter+0xb0>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	f003 0304 	and.w	r3, r3, #4
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d0f7      	beq.n	8000cc8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000cd8:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <RestartWakeupCounter+0xb0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <RestartWakeupCounter+0xb0>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000cec:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <RestartWakeupCounter+0xb4>)
 8000cf0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000cf4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000cf6:	2003      	movs	r0, #3
 8000cf8:	f001 f8af 	bl	8001e5a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <RestartWakeupCounter+0xb8>)
 8000cfe:	695b      	ldr	r3, [r3, #20]
 8000d00:	0c1b      	lsrs	r3, r3, #16
 8000d02:	041b      	lsls	r3, r3, #16
 8000d04:	88fa      	ldrh	r2, [r7, #6]
 8000d06:	4910      	ldr	r1, [pc, #64]	; (8000d48 <RestartWakeupCounter+0xb8>)
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000d0c:	f7ff fd8c 	bl	8000828 <ReadRtcSsrValue>
 8000d10:	4603      	mov	r3, r0
 8000d12:	4a09      	ldr	r2, [pc, #36]	; (8000d38 <RestartWakeupCounter+0xa8>)
 8000d14:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <RestartWakeupCounter+0xb0>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	689a      	ldr	r2, [r3, #8]
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <RestartWakeupCounter+0xb0>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d28:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000d2a:	f3af 8000 	nop.w
  return ;
 8000d2e:	bf00      	nop
}
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200000b4 	.word	0x200000b4
 8000d3c:	200001b4 	.word	0x200001b4
 8000d40:	200001b0 	.word	0x200001b0
 8000d44:	58000800 	.word	0x58000800
 8000d48:	40002800 	.word	0x40002800

08000d4c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000d52:	4b47      	ldr	r3, [pc, #284]	; (8000e70 <RescheduleTimerList+0x124>)
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d5e:	d108      	bne.n	8000d72 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000d60:	bf00      	nop
 8000d62:	4b44      	ldr	r3, [pc, #272]	; (8000e74 <RescheduleTimerList+0x128>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	f003 0304 	and.w	r3, r3, #4
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d1f7      	bne.n	8000d62 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000d72:	4b40      	ldr	r3, [pc, #256]	; (8000e74 <RescheduleTimerList+0x128>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	4b3e      	ldr	r3, [pc, #248]	; (8000e74 <RescheduleTimerList+0x128>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d84:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000d86:	4b3c      	ldr	r3, [pc, #240]	; (8000e78 <RescheduleTimerList+0x12c>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000d8c:	7bfa      	ldrb	r2, [r7, #15]
 8000d8e:	493b      	ldr	r1, [pc, #236]	; (8000e7c <RescheduleTimerList+0x130>)
 8000d90:	4613      	mov	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	4413      	add	r3, r2
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	440b      	add	r3, r1
 8000d9a:	3308      	adds	r3, #8
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000da0:	f7ff ff36 	bl	8000c10 <ReturnTimeElapsed>
 8000da4:	4603      	mov	r3, r0
 8000da6:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000da8:	88fb      	ldrh	r3, [r7, #6]
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d205      	bcs.n	8000dbc <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000db4:	4b32      	ldr	r3, [pc, #200]	; (8000e80 <RescheduleTimerList+0x134>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
 8000dba:	e04d      	b.n	8000e58 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	4a31      	ldr	r2, [pc, #196]	; (8000e84 <RescheduleTimerList+0x138>)
 8000dc0:	8812      	ldrh	r2, [r2, #0]
 8000dc2:	b292      	uxth	r2, r2
 8000dc4:	4413      	add	r3, r2
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d906      	bls.n	8000ddc <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000dce:	4b2d      	ldr	r3, [pc, #180]	; (8000e84 <RescheduleTimerList+0x138>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000dd4:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <RescheduleTimerList+0x134>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
 8000dda:	e03d      	b.n	8000e58 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000de6:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <RescheduleTimerList+0x134>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000dec:	e034      	b.n	8000e58 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000dee:	7bfa      	ldrb	r2, [r7, #15]
 8000df0:	4922      	ldr	r1, [pc, #136]	; (8000e7c <RescheduleTimerList+0x130>)
 8000df2:	4613      	mov	r3, r2
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	4413      	add	r3, r2
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	440b      	add	r3, r1
 8000dfc:	3308      	adds	r3, #8
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	88fb      	ldrh	r3, [r7, #6]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d20a      	bcs.n	8000e1c <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000e06:	7bfa      	ldrb	r2, [r7, #15]
 8000e08:	491c      	ldr	r1, [pc, #112]	; (8000e7c <RescheduleTimerList+0x130>)
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	4413      	add	r3, r2
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	440b      	add	r3, r1
 8000e14:	3308      	adds	r3, #8
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	e013      	b.n	8000e44 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000e1c:	7bfa      	ldrb	r2, [r7, #15]
 8000e1e:	4917      	ldr	r1, [pc, #92]	; (8000e7c <RescheduleTimerList+0x130>)
 8000e20:	4613      	mov	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	4413      	add	r3, r2
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	440b      	add	r3, r1
 8000e2a:	3308      	adds	r3, #8
 8000e2c:	6819      	ldr	r1, [r3, #0]
 8000e2e:	88fb      	ldrh	r3, [r7, #6]
 8000e30:	7bfa      	ldrb	r2, [r7, #15]
 8000e32:	1ac9      	subs	r1, r1, r3
 8000e34:	4811      	ldr	r0, [pc, #68]	; (8000e7c <RescheduleTimerList+0x130>)
 8000e36:	4613      	mov	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	4413      	add	r3, r2
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	4403      	add	r3, r0
 8000e40:	3308      	adds	r3, #8
 8000e42:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000e44:	7bfa      	ldrb	r2, [r7, #15]
 8000e46:	490d      	ldr	r1, [pc, #52]	; (8000e7c <RescheduleTimerList+0x130>)
 8000e48:	4613      	mov	r3, r2
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	4413      	add	r3, r2
 8000e4e:	00db      	lsls	r3, r3, #3
 8000e50:	440b      	add	r3, r1
 8000e52:	3315      	adds	r3, #21
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d1c7      	bne.n	8000dee <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000e5e:	89bb      	ldrh	r3, [r7, #12]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff15 	bl	8000c90 <RestartWakeupCounter>

  return ;
 8000e66:	bf00      	nop
}
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40002800 	.word	0x40002800
 8000e74:	200001b0 	.word	0x200001b0
 8000e78:	200000b0 	.word	0x200000b0
 8000e7c:	20000020 	.word	0x20000020
 8000e80:	200000b8 	.word	0x200000b8
 8000e84:	200001b8 	.word	0x200001b8

08000e88 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8000e92:	617b      	str	r3, [r7, #20]
  return(result);
 8000e94:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000e98:	b672      	cpsid	i
}
 8000e9a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e9c:	4b5f      	ldr	r3, [pc, #380]	; (800101c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	22ca      	movs	r2, #202	; 0xca
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24
 8000ea6:	4b5d      	ldr	r3, [pc, #372]	; (800101c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2253      	movs	r2, #83	; 0x53
 8000eae:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000eb0:	4b5a      	ldr	r3, [pc, #360]	; (800101c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	4b58      	ldr	r3, [pc, #352]	; (800101c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ec2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000ec4:	4b56      	ldr	r3, [pc, #344]	; (8001020 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000ecc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ed0:	4954      	ldr	r1, [pc, #336]	; (8001024 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	4413      	add	r3, r2
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	440b      	add	r3, r1
 8000edc:	330c      	adds	r3, #12
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d172      	bne.n	8000fcc <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000ee6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000eea:	494e      	ldr	r1, [pc, #312]	; (8001024 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000eec:	4613      	mov	r3, r2
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	4413      	add	r3, r2
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	440b      	add	r3, r1
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000efa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000efe:	4949      	ldr	r1, [pc, #292]	; (8001024 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000f00:	4613      	mov	r3, r2
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	4413      	add	r3, r2
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	440b      	add	r3, r1
 8000f0a:	3310      	adds	r3, #16
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000f10:	4b45      	ldr	r3, [pc, #276]	; (8001028 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d050      	beq.n	8000fbc <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000f1a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f1e:	4941      	ldr	r1, [pc, #260]	; (8001024 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000f20:	4613      	mov	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4413      	add	r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	440b      	add	r3, r1
 8000f2a:	330d      	adds	r3, #13
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d126      	bne.n	8000f82 <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000f34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f38:	2101      	movs	r1, #1
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fde4 	bl	8000b08 <UnlinkTimer>
 8000f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f42:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	f383 8810 	msr	PRIMASK, r3
}
 8000f4a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000f4c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f50:	4934      	ldr	r1, [pc, #208]	; (8001024 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000f52:	4613      	mov	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4413      	add	r3, r2
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	440b      	add	r3, r1
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f64:	4611      	mov	r1, r2
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f9d4 	bl	8001314 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f6c:	4b2b      	ldr	r3, [pc, #172]	; (800101c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	22ca      	movs	r2, #202	; 0xca
 8000f74:	625a      	str	r2, [r3, #36]	; 0x24
 8000f76:	4b29      	ldr	r3, [pc, #164]	; (800101c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2253      	movs	r2, #83	; 0x53
 8000f7e:	625a      	str	r2, [r3, #36]	; 0x24
 8000f80:	e014      	b.n	8000fac <HW_TS_RTC_Wakeup_Handler+0x124>
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f383 8810 	msr	PRIMASK, r3
}
 8000f8c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000f8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f932 	bl	80011fc <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f98:	4b20      	ldr	r3, [pc, #128]	; (800101c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	22ca      	movs	r2, #202	; 0xca
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
 8000fa2:	4b1e      	ldr	r3, [pc, #120]	; (800101c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2253      	movs	r2, #83	; 0x53
 8000faa:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000fac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fb0:	69fa      	ldr	r2, [r7, #28]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	69b8      	ldr	r0, [r7, #24]
 8000fb6:	f000 fa35 	bl	8001424 <HW_TS_RTC_Int_AppNot>
 8000fba:	e025      	b.n	8001008 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8000fbc:	f7ff fec6 	bl	8000d4c <RescheduleTimerList>
 8000fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	f383 8810 	msr	PRIMASK, r3
}
 8000fca:	e01d      	b.n	8001008 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000fcc:	bf00      	nop
 8000fce:	4b13      	ldr	r3, [pc, #76]	; (800101c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0f7      	beq.n	8000fce <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000ff2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	; (800102c <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 8000ff6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffe:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f383 8810 	msr	PRIMASK, r3
}
 8001006:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <HW_TS_RTC_Wakeup_Handler+0x194>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	22ff      	movs	r2, #255	; 0xff
 8001010:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001012:	bf00      	nop
}
 8001014:	3728      	adds	r7, #40	; 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200001b0 	.word	0x200001b0
 8001020:	200000b0 	.word	0x200000b0
 8001024:	20000020 	.word	0x20000020
 8001028:	200000b8 	.word	0x200000b8
 800102c:	58000800 	.word	0x58000800

08001030 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 800103c:	4a64      	ldr	r2, [pc, #400]	; (80011d0 <HW_TS_Init+0x1a0>)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001042:	4b63      	ldr	r3, [pc, #396]	; (80011d0 <HW_TS_Init+0x1a0>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	22ca      	movs	r2, #202	; 0xca
 800104a:	625a      	str	r2, [r3, #36]	; 0x24
 800104c:	4b60      	ldr	r3, [pc, #384]	; (80011d0 <HW_TS_Init+0x1a0>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2253      	movs	r2, #83	; 0x53
 8001054:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001056:	4b5f      	ldr	r3, [pc, #380]	; (80011d4 <HW_TS_Init+0x1a4>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	4a5e      	ldr	r2, [pc, #376]	; (80011d4 <HW_TS_Init+0x1a4>)
 800105c:	f043 0320 	orr.w	r3, r3, #32
 8001060:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001062:	4b5c      	ldr	r3, [pc, #368]	; (80011d4 <HW_TS_Init+0x1a4>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	f003 0307 	and.w	r3, r3, #7
 800106c:	b2db      	uxtb	r3, r3
 800106e:	f1c3 0304 	rsb	r3, r3, #4
 8001072:	b2da      	uxtb	r2, r3
 8001074:	4b58      	ldr	r3, [pc, #352]	; (80011d8 <HW_TS_Init+0x1a8>)
 8001076:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001078:	4b56      	ldr	r3, [pc, #344]	; (80011d4 <HW_TS_Init+0x1a4>)
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001080:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001084:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	fa92 f2a2 	rbit	r2, r2
 800108c:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	2a00      	cmp	r2, #0
 8001096:	d101      	bne.n	800109c <HW_TS_Init+0x6c>
  {
    return 32U;
 8001098:	2220      	movs	r2, #32
 800109a:	e003      	b.n	80010a4 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	fab2 f282 	clz	r2, r2
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	40d3      	lsrs	r3, r2
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	3301      	adds	r3, #1
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	4b4b      	ldr	r3, [pc, #300]	; (80011dc <HW_TS_Init+0x1ac>)
 80010ae:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80010b0:	4b48      	ldr	r3, [pc, #288]	; (80011d4 <HW_TS_Init+0x1a4>)
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	3301      	adds	r3, #1
 80010be:	b29a      	uxth	r2, r3
 80010c0:	4b47      	ldr	r3, [pc, #284]	; (80011e0 <HW_TS_Init+0x1b0>)
 80010c2:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80010c4:	4b46      	ldr	r3, [pc, #280]	; (80011e0 <HW_TS_Init+0x1b0>)
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	3b01      	subs	r3, #1
 80010ca:	4a44      	ldr	r2, [pc, #272]	; (80011dc <HW_TS_Init+0x1ac>)
 80010cc:	7812      	ldrb	r2, [r2, #0]
 80010ce:	fb02 f303 	mul.w	r3, r2, r3
 80010d2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80010d6:	4a40      	ldr	r2, [pc, #256]	; (80011d8 <HW_TS_Init+0x1a8>)
 80010d8:	7812      	ldrb	r2, [r2, #0]
 80010da:	40d3      	lsrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d904      	bls.n	80010f2 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80010e8:	4b3e      	ldr	r3, [pc, #248]	; (80011e4 <HW_TS_Init+0x1b4>)
 80010ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ee:	801a      	strh	r2, [r3, #0]
 80010f0:	e003      	b.n	80010fa <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	4b3b      	ldr	r3, [pc, #236]	; (80011e4 <HW_TS_Init+0x1b4>)
 80010f8:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80010fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80010fe:	f7ff fb81 	bl	8000804 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001102:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001106:	f7ff fb69 	bl	80007dc <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d143      	bne.n	8001198 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001110:	4b35      	ldr	r3, [pc, #212]	; (80011e8 <HW_TS_Init+0x1b8>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001116:	4b35      	ldr	r3, [pc, #212]	; (80011ec <HW_TS_Init+0x1bc>)
 8001118:	f04f 32ff 	mov.w	r2, #4294967295
 800111c:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800111e:	2300      	movs	r3, #0
 8001120:	77fb      	strb	r3, [r7, #31]
 8001122:	e00c      	b.n	800113e <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001124:	7ffa      	ldrb	r2, [r7, #31]
 8001126:	4932      	ldr	r1, [pc, #200]	; (80011f0 <HW_TS_Init+0x1c0>)
 8001128:	4613      	mov	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	440b      	add	r3, r1
 8001132:	330c      	adds	r3, #12
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001138:	7ffb      	ldrb	r3, [r7, #31]
 800113a:	3301      	adds	r3, #1
 800113c:	77fb      	strb	r3, [r7, #31]
 800113e:	7ffb      	ldrb	r3, [r7, #31]
 8001140:	2b05      	cmp	r3, #5
 8001142:	d9ef      	bls.n	8001124 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001144:	4b2b      	ldr	r3, [pc, #172]	; (80011f4 <HW_TS_Init+0x1c4>)
 8001146:	2206      	movs	r2, #6
 8001148:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800114a:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <HW_TS_Init+0x1a0>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <HW_TS_Init+0x1a0>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800115c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <HW_TS_Init+0x1a0>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <HW_TS_Init+0x1a0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001172:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001174:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <HW_TS_Init+0x1c8>)
 8001176:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800117a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800117c:	2003      	movs	r0, #3
 800117e:	f000 fe6c 	bl	8001e5a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <HW_TS_Init+0x1a0>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <HW_TS_Init+0x1a0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	e00a      	b.n	80011ae <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HW_TS_Init+0x1a0>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80011a8:	2003      	movs	r0, #3
 80011aa:	f000 fe48 	bl	8001e3e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <HW_TS_Init+0x1a0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	22ff      	movs	r2, #255	; 0xff
 80011b6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80011b8:	2200      	movs	r2, #0
 80011ba:	2103      	movs	r1, #3
 80011bc:	2003      	movs	r0, #3
 80011be:	f000 fdfc 	bl	8001dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80011c2:	2003      	movs	r0, #3
 80011c4:	f000 fe13 	bl	8001dee <HAL_NVIC_EnableIRQ>

  return;
 80011c8:	bf00      	nop
}
 80011ca:	3720      	adds	r7, #32
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200001b0 	.word	0x200001b0
 80011d4:	40002800 	.word	0x40002800
 80011d8:	200001b4 	.word	0x200001b4
 80011dc:	200001b5 	.word	0x200001b5
 80011e0:	200001b6 	.word	0x200001b6
 80011e4:	200001b8 	.word	0x200001b8
 80011e8:	200000b8 	.word	0x200000b8
 80011ec:	200000b4 	.word	0x200000b4
 80011f0:	20000020 	.word	0x20000020
 80011f4:	200000b0 	.word	0x200000b0
 80011f8:	58000800 	.word	0x58000800

080011fc <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001206:	f3ef 8310 	mrs	r3, PRIMASK
 800120a:	60fb      	str	r3, [r7, #12]
  return(result);
 800120c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800120e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001210:	b672      	cpsid	i
}
 8001212:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001214:	2003      	movs	r0, #3
 8001216:	f000 fdf8 	bl	8001e0a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800121a:	4b38      	ldr	r3, [pc, #224]	; (80012fc <HW_TS_Stop+0x100>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	22ca      	movs	r2, #202	; 0xca
 8001222:	625a      	str	r2, [r3, #36]	; 0x24
 8001224:	4b35      	ldr	r3, [pc, #212]	; (80012fc <HW_TS_Stop+0x100>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2253      	movs	r2, #83	; 0x53
 800122c:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800122e:	79fa      	ldrb	r2, [r7, #7]
 8001230:	4933      	ldr	r1, [pc, #204]	; (8001300 <HW_TS_Stop+0x104>)
 8001232:	4613      	mov	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	440b      	add	r3, r1
 800123c:	330c      	adds	r3, #12
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d148      	bne.n	80012d8 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fc5c 	bl	8000b08 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001250:	4b2c      	ldr	r3, [pc, #176]	; (8001304 <HW_TS_Stop+0x108>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001256:	7cfb      	ldrb	r3, [r7, #19]
 8001258:	2b06      	cmp	r3, #6
 800125a:	d135      	bne.n	80012c8 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800125c:	4b2a      	ldr	r3, [pc, #168]	; (8001308 <HW_TS_Stop+0x10c>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001268:	d108      	bne.n	800127c <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800126a:	bf00      	nop
 800126c:	4b23      	ldr	r3, [pc, #140]	; (80012fc <HW_TS_Stop+0x100>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1f7      	bne.n	800126c <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800127c:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <HW_TS_Stop+0x100>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <HW_TS_Stop+0x100>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800128e:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001290:	bf00      	nop
 8001292:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <HW_TS_Stop+0x100>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0f7      	beq.n	8001292 <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <HW_TS_Stop+0x100>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <HW_TS_Stop+0x100>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80012b6:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80012b8:	4b14      	ldr	r3, [pc, #80]	; (800130c <HW_TS_Stop+0x110>)
 80012ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80012be:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80012c0:	2003      	movs	r0, #3
 80012c2:	f000 fdca 	bl	8001e5a <HAL_NVIC_ClearPendingIRQ>
 80012c6:	e007      	b.n	80012d8 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <HW_TS_Stop+0x114>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	7cfa      	ldrb	r2, [r7, #19]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d001      	beq.n	80012d8 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 80012d4:	f7ff fd3a 	bl	8000d4c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <HW_TS_Stop+0x100>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	22ff      	movs	r2, #255	; 0xff
 80012e0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80012e2:	2003      	movs	r0, #3
 80012e4:	f000 fd83 	bl	8001dee <HAL_NVIC_EnableIRQ>
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	f383 8810 	msr	PRIMASK, r3
}
 80012f2:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80012f4:	bf00      	nop
}
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200001b0 	.word	0x200001b0
 8001300:	20000020 	.word	0x20000020
 8001304:	200000b0 	.word	0x200000b0
 8001308:	40002800 	.word	0x40002800
 800130c:	58000800 	.word	0x58000800
 8001310:	200000b1 	.word	0x200000b1

08001314 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001320:	79fa      	ldrb	r2, [r7, #7]
 8001322:	493c      	ldr	r1, [pc, #240]	; (8001414 <HW_TS_Start+0x100>)
 8001324:	4613      	mov	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4413      	add	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	440b      	add	r3, r1
 800132e:	330c      	adds	r3, #12
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d103      	bne.n	8001340 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff5e 	bl	80011fc <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001340:	f3ef 8310 	mrs	r3, PRIMASK
 8001344:	60fb      	str	r3, [r7, #12]
  return(result);
 8001346:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001348:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800134a:	b672      	cpsid	i
}
 800134c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800134e:	2003      	movs	r0, #3
 8001350:	f000 fd5b 	bl	8001e0a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001354:	4b30      	ldr	r3, [pc, #192]	; (8001418 <HW_TS_Start+0x104>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	22ca      	movs	r2, #202	; 0xca
 800135c:	625a      	str	r2, [r3, #36]	; 0x24
 800135e:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <HW_TS_Start+0x104>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2253      	movs	r2, #83	; 0x53
 8001366:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001368:	79fa      	ldrb	r2, [r7, #7]
 800136a:	492a      	ldr	r1, [pc, #168]	; (8001414 <HW_TS_Start+0x100>)
 800136c:	4613      	mov	r3, r2
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4413      	add	r3, r2
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	440b      	add	r3, r1
 8001376:	330c      	adds	r3, #12
 8001378:	2202      	movs	r2, #2
 800137a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800137c:	79fa      	ldrb	r2, [r7, #7]
 800137e:	4925      	ldr	r1, [pc, #148]	; (8001414 <HW_TS_Start+0x100>)
 8001380:	4613      	mov	r3, r2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	440b      	add	r3, r1
 800138a:	3308      	adds	r3, #8
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001390:	79fa      	ldrb	r2, [r7, #7]
 8001392:	4920      	ldr	r1, [pc, #128]	; (8001414 <HW_TS_Start+0x100>)
 8001394:	4613      	mov	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4413      	add	r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	440b      	add	r3, r1
 800139e:	3304      	adds	r3, #4
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fb04 	bl	80009b4 <linkTimer>
 80013ac:	4603      	mov	r3, r0
 80013ae:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	; (800141c <HW_TS_Start+0x108>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <HW_TS_Start+0x10c>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	7c7a      	ldrb	r2, [r7, #17]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d002      	beq.n	80013c8 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 80013c2:	f7ff fcc3 	bl	8000d4c <RescheduleTimerList>
 80013c6:	e013      	b.n	80013f0 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80013c8:	79fa      	ldrb	r2, [r7, #7]
 80013ca:	4912      	ldr	r1, [pc, #72]	; (8001414 <HW_TS_Start+0x100>)
 80013cc:	4613      	mov	r3, r2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4413      	add	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	440b      	add	r3, r1
 80013d6:	3308      	adds	r3, #8
 80013d8:	6819      	ldr	r1, [r3, #0]
 80013da:	8a7b      	ldrh	r3, [r7, #18]
 80013dc:	79fa      	ldrb	r2, [r7, #7]
 80013de:	1ac9      	subs	r1, r1, r3
 80013e0:	480c      	ldr	r0, [pc, #48]	; (8001414 <HW_TS_Start+0x100>)
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	4403      	add	r3, r0
 80013ec:	3308      	adds	r3, #8
 80013ee:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HW_TS_Start+0x104>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	22ff      	movs	r2, #255	; 0xff
 80013f8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013fa:	2003      	movs	r0, #3
 80013fc:	f000 fcf7 	bl	8001dee <HAL_NVIC_EnableIRQ>
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	f383 8810 	msr	PRIMASK, r3
}
 800140a:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800140c:	bf00      	nop
}
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000020 	.word	0x20000020
 8001418:	200001b0 	.word	0x200001b0
 800141c:	200000b0 	.word	0x200000b0
 8001420:	200000b1 	.word	0x200000b1

08001424 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	460b      	mov	r3, r1
 800142e:	607a      	str	r2, [r7, #4]
 8001430:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4798      	blx	r3

  return;
 8001436:	bf00      	nop
}
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <LL_RCC_LSE_SetDriveCapability>:
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800144a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800144e:	f023 0218 	bic.w	r2, r3, #24
 8001452:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4313      	orrs	r3, r2
 800145a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <LL_AHB2_GRP1_EnableClock>:
{
 800146a:	b480      	push	{r7}
 800146c:	b085      	sub	sp, #20
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001476:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001478:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4313      	orrs	r3, r2
 8001480:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001486:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4013      	ands	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800148e:	68fb      	ldr	r3, [r7, #12]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a0:	f000 faca 	bl	8001a38 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80014a4:	f7fe ffec 	bl	8000480 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a8:	f000 f810 	bl	80014cc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80014ac:	f000 f870 	bl	8001590 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 80014b0:	f000 f88e 	bl	80015d0 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b4:	f000 f8dc 	bl	8001670 <MX_GPIO_Init>
  MX_RF_Init();
 80014b8:	f000 f89e 	bl	80015f8 <MX_RF_Init>
  MX_RTC_Init();
 80014bc:	f000 f8a4 	bl	8001608 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80014c0:	f7fe ffec 	bl	800049c <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80014c4:	f7ff f94b 	bl	800075e <MX_APPE_Process>
 80014c8:	e7fc      	b.n	80014c4 <main+0x28>
	...

080014cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b09a      	sub	sp, #104	; 0x68
 80014d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d2:	f107 0320 	add.w	r3, r7, #32
 80014d6:	2248      	movs	r2, #72	; 0x48
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f006 f8e0 	bl	80076a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	611a      	str	r2, [r3, #16]
 80014ee:	615a      	str	r2, [r3, #20]
 80014f0:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014f2:	f000 ff25 	bl	8002340 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80014f6:	2000      	movs	r0, #0
 80014f8:	f7ff ffa1 	bl	800143e <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014fc:	4b23      	ldr	r3, [pc, #140]	; (800158c <SystemClock_Config+0xc0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001504:	4a21      	ldr	r2, [pc, #132]	; (800158c <SystemClock_Config+0xc0>)
 8001506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	4b1f      	ldr	r3, [pc, #124]	; (800158c <SystemClock_Config+0xc0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001518:	2327      	movs	r3, #39	; 0x27
 800151a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800151c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001522:	2301      	movs	r3, #1
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001526:	f44f 7380 	mov.w	r3, #256	; 0x100
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800152c:	2301      	movs	r3, #1
 800152e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001530:	2340      	movs	r3, #64	; 0x40
 8001532:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001534:	2300      	movs	r3, #0
 8001536:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001538:	23a0      	movs	r3, #160	; 0xa0
 800153a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800153c:	2300      	movs	r3, #0
 800153e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001540:	f107 0320 	add.w	r3, r7, #32
 8001544:	4618      	mov	r0, r3
 8001546:	f001 fa77 	bl	8002a38 <HAL_RCC_OscConfig>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001550:	f000 f8f6 	bl	8001740 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001554:	236f      	movs	r3, #111	; 0x6f
 8001556:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2101      	movs	r1, #1
 8001574:	4618      	mov	r0, r3
 8001576:	f001 fded 	bl	8003154 <HAL_RCC_ClockConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001580:	f000 f8de 	bl	8001740 <Error_Handler>
  }
}
 8001584:	bf00      	nop
 8001586:	3768      	adds	r7, #104	; 0x68
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	58000400 	.word	0x58000400

08001590 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b094      	sub	sp, #80	; 0x50
 8001594:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001596:	463b      	mov	r3, r7
 8001598:	2250      	movs	r2, #80	; 0x50
 800159a:	2100      	movs	r1, #0
 800159c:	4618      	mov	r0, r3
 800159e:	f006 f87f 	bl	80076a0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80015a2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80015a6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80015a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015ac:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80015ae:	2300      	movs	r3, #0
 80015b0:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015b6:	463b      	mov	r3, r7
 80015b8:	4618      	mov	r0, r3
 80015ba:	f002 f9dc 	bl	8003976 <HAL_RCCEx_PeriphCLKConfig>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80015c4:	f000 f8bc 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80015c8:	bf00      	nop
 80015ca:	3750      	adds	r7, #80	; 0x50
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_IPCC_Init+0x20>)
 80015d6:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <MX_IPCC_Init+0x24>)
 80015d8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_IPCC_Init+0x20>)
 80015dc:	f000 fe2a 	bl	8002234 <HAL_IPCC_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80015e6:	f000 f8ab 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	200001bc 	.word	0x200001bc
 80015f4:	58000c00 	.word	0x58000c00

080015f8 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800160c:	4b16      	ldr	r3, [pc, #88]	; (8001668 <MX_RTC_Init+0x60>)
 800160e:	4a17      	ldr	r2, [pc, #92]	; (800166c <MX_RTC_Init+0x64>)
 8001610:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <MX_RTC_Init+0x60>)
 8001614:	2200      	movs	r2, #0
 8001616:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <MX_RTC_Init+0x60>)
 800161a:	220f      	movs	r2, #15
 800161c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <MX_RTC_Init+0x60>)
 8001620:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001624:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <MX_RTC_Init+0x60>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800162c:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <MX_RTC_Init+0x60>)
 800162e:	2200      	movs	r2, #0
 8001630:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001632:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <MX_RTC_Init+0x60>)
 8001634:	2200      	movs	r2, #0
 8001636:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <MX_RTC_Init+0x60>)
 800163a:	2200      	movs	r2, #0
 800163c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800163e:	480a      	ldr	r0, [pc, #40]	; (8001668 <MX_RTC_Init+0x60>)
 8001640:	f002 fc20 	bl	8003e84 <HAL_RTC_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800164a:	f000 f879 	bl	8001740 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_RTC_Init+0x60>)
 8001654:	f002 fd04 	bl	8004060 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800165e:	f000 f86f 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200001f8 	.word	0x200001f8
 800166c:	40002800 	.word	0x40002800

08001670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001684:	2004      	movs	r0, #4
 8001686:	f7ff fef0 	bl	800146a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800168a:	2002      	movs	r0, #2
 800168c:	f7ff feed 	bl	800146a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001690:	2001      	movs	r0, #1
 8001692:	f7ff feea 	bl	800146a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001696:	2008      	movs	r0, #8
 8001698:	f7ff fee7 	bl	800146a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	2123      	movs	r1, #35	; 0x23
 80016a0:	4824      	ldr	r0, [pc, #144]	; (8001734 <MX_GPIO_Init+0xc4>)
 80016a2:	f000 fd71 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016a6:	2310      	movs	r3, #16
 80016a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ae:	2301      	movs	r3, #1
 80016b0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	4619      	mov	r1, r3
 80016b6:	4820      	ldr	r0, [pc, #128]	; (8001738 <MX_GPIO_Init+0xc8>)
 80016b8:	f000 fbde 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80016bc:	2323      	movs	r3, #35	; 0x23
 80016be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2300      	movs	r3, #0
 80016ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	4619      	mov	r1, r3
 80016d0:	4818      	ldr	r0, [pc, #96]	; (8001734 <MX_GPIO_Init+0xc4>)
 80016d2:	f000 fbd1 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016dc:	2302      	movs	r3, #2
 80016de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80016e8:	230a      	movs	r3, #10
 80016ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	4619      	mov	r1, r3
 80016f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f4:	f000 fbc0 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80016f8:	2303      	movs	r3, #3
 80016fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	4619      	mov	r1, r3
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <MX_GPIO_Init+0xcc>)
 800170a:	f000 fbb5 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800170e:	23c0      	movs	r3, #192	; 0xc0
 8001710:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800171e:	2307      	movs	r3, #7
 8001720:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	4619      	mov	r1, r3
 8001726:	4803      	ldr	r0, [pc, #12]	; (8001734 <MX_GPIO_Init+0xc4>)
 8001728:	f000 fba6 	bl	8001e78 <HAL_GPIO_Init>

}
 800172c:	bf00      	nop
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	48000400 	.word	0x48000400
 8001738:	48000800 	.word	0x48000800
 800173c:	48000c00 	.word	0x48000c00

08001740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001744:	b672      	cpsid	i
}
 8001746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001748:	e7fe      	b.n	8001748 <Error_Handler+0x8>

0800174a <LL_RCC_EnableRTC>:
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800174e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001756:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800175a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800175e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <LL_AHB3_GRP1_EnableClock>:
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001778:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800177a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4313      	orrs	r3, r2
 8001782:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001788:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4013      	ands	r3, r2
 800178e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001790:	68fb      	ldr	r3, [r7, #12]
}
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800179e:	b480      	push	{r7}
 80017a0:	b085      	sub	sp, #20
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80017a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80017b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4013      	ands	r3, r2
 80017c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80017d4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80017d8:	f7ff ffc8 	bl	800176c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80017dc:	2200      	movs	r2, #0
 80017de:	2100      	movs	r1, #0
 80017e0:	202e      	movs	r0, #46	; 0x2e
 80017e2:	f000 faea 	bl	8001dba <HAL_NVIC_SetPriority>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80017e6:	202e      	movs	r0, #46	; 0x2e
 80017e8:	f000 fb01 	bl	8001dee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0d      	ldr	r2, [pc, #52]	; (8001834 <HAL_IPCC_MspInit+0x44>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d113      	bne.n	800182a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001802:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001806:	f7ff ffb1 	bl	800176c <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2100      	movs	r1, #0
 800180e:	202c      	movs	r0, #44	; 0x2c
 8001810:	f000 fad3 	bl	8001dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001814:	202c      	movs	r0, #44	; 0x2c
 8001816:	f000 faea 	bl	8001dee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2100      	movs	r1, #0
 800181e:	202d      	movs	r0, #45	; 0x2d
 8001820:	f000 facb 	bl	8001dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001824:	202d      	movs	r0, #45	; 0x2d
 8001826:	f000 fae2 	bl	8001dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	58000c00 	.word	0x58000c00

08001838 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b096      	sub	sp, #88	; 0x58
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001840:	f107 0308 	add.w	r3, r7, #8
 8001844:	2250      	movs	r2, #80	; 0x50
 8001846:	2100      	movs	r1, #0
 8001848:	4618      	mov	r0, r3
 800184a:	f005 ff29 	bl	80076a0 <memset>
  if(hrtc->Instance==RTC)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a12      	ldr	r2, [pc, #72]	; (800189c <HAL_RTC_MspInit+0x64>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d11d      	bne.n	8001894 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001858:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800185c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800185e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001862:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001864:	f107 0308 	add.w	r3, r7, #8
 8001868:	4618      	mov	r0, r3
 800186a:	f002 f884 	bl	8003976 <HAL_RCCEx_PeriphCLKConfig>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001874:	f7ff ff64 	bl	8001740 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001878:	f7ff ff67 	bl	800174a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800187c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001880:	f7ff ff8d 	bl	800179e <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001884:	2200      	movs	r2, #0
 8001886:	2100      	movs	r1, #0
 8001888:	2003      	movs	r0, #3
 800188a:	f000 fa96 	bl	8001dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800188e:	2003      	movs	r0, #3
 8001890:	f000 faad 	bl	8001dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001894:	bf00      	nop
 8001896:	3758      	adds	r7, #88	; 0x58
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40002800 	.word	0x40002800

080018a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <NMI_Handler+0x4>

080018a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018aa:	e7fe      	b.n	80018aa <HardFault_Handler+0x4>

080018ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <MemManage_Handler+0x4>

080018b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <BusFault_Handler+0x4>

080018b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <UsageFault_Handler+0x4>

080018be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ec:	f000 f8fe 	bl	8001aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80018f8:	f7ff fac6 	bl	8000e88 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}

08001900 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001904:	f005 fae6 	bl	8006ed4 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}

0800190c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001910:	f005 fb18 	bl	8006f44 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}

08001918 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800191c:	f000 fc66 	bl	80021ec <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}

08001924 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001928:	4b24      	ldr	r3, [pc, #144]	; (80019bc <SystemInit+0x98>)
 800192a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800192e:	4a23      	ldr	r2, [pc, #140]	; (80019bc <SystemInit+0x98>)
 8001930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800194c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001950:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800195c:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <SystemInit+0x9c>)
 800195e:	4013      	ands	r3, r2
 8001960:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800196a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800196e:	f023 0305 	bic.w	r3, r3, #5
 8001972:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800197e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001982:	f023 0301 	bic.w	r3, r3, #1
 8001986:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800198a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800198e:	4a0d      	ldr	r2, [pc, #52]	; (80019c4 <SystemInit+0xa0>)
 8001990:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001996:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <SystemInit+0xa0>)
 8001998:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800199a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ae:	2200      	movs	r2, #0
 80019b0:	619a      	str	r2, [r3, #24]
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000ed00 	.word	0xe000ed00
 80019c0:	faf6fefb 	.word	0xfaf6fefb
 80019c4:	22041000 	.word	0x22041000

080019c8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80019c8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ca:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019cc:	3304      	adds	r3, #4

080019ce <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ce:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80019d2:	d3f9      	bcc.n	80019c8 <CopyDataInit>
  bx lr
 80019d4:	4770      	bx	lr

080019d6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80019d6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80019d8:	3004      	adds	r0, #4

080019da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80019da:	4288      	cmp	r0, r1
  bcc FillZerobss
 80019dc:	d3fb      	bcc.n	80019d6 <FillZerobss>
  bx lr
 80019de:	4770      	bx	lr

080019e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019e0:	480c      	ldr	r0, [pc, #48]	; (8001a14 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80019e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019e4:	f7ff ff9e 	bl	8001924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80019e8:	480b      	ldr	r0, [pc, #44]	; (8001a18 <LoopForever+0x8>)
 80019ea:	490c      	ldr	r1, [pc, #48]	; (8001a1c <LoopForever+0xc>)
 80019ec:	4a0c      	ldr	r2, [pc, #48]	; (8001a20 <LoopForever+0x10>)
 80019ee:	2300      	movs	r3, #0
 80019f0:	f7ff ffed 	bl	80019ce <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80019f4:	480b      	ldr	r0, [pc, #44]	; (8001a24 <LoopForever+0x14>)
 80019f6:	490c      	ldr	r1, [pc, #48]	; (8001a28 <LoopForever+0x18>)
 80019f8:	2300      	movs	r3, #0
 80019fa:	f7ff ffee 	bl	80019da <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80019fe:	480b      	ldr	r0, [pc, #44]	; (8001a2c <LoopForever+0x1c>)
 8001a00:	490b      	ldr	r1, [pc, #44]	; (8001a30 <LoopForever+0x20>)
 8001a02:	2300      	movs	r3, #0
 8001a04:	f7ff ffe9 	bl	80019da <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a08:	f005 fe18 	bl	800763c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001a0c:	f7ff fd46 	bl	800149c <main>

08001a10 <LoopForever>:

LoopForever:
  b LoopForever
 8001a10:	e7fe      	b.n	8001a10 <LoopForever>
 8001a12:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001a14:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001a18:	20000004 	.word	0x20000004
 8001a1c:	20000020 	.word	0x20000020
 8001a20:	08007940 	.word	0x08007940
  INIT_BSS _sbss, _ebss
 8001a24:	20000194 	.word	0x20000194
 8001a28:	2000043c 	.word	0x2000043c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001a2c:	200301e0 	.word	0x200301e0
 8001a30:	20030a57 	.word	0x20030a57

08001a34 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a34:	e7fe      	b.n	8001a34 <ADC1_IRQHandler>
	...

08001a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a42:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <HAL_Init+0x3c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a0b      	ldr	r2, [pc, #44]	; (8001a74 <HAL_Init+0x3c>)
 8001a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a4e:	2003      	movs	r0, #3
 8001a50:	f000 f9a8 	bl	8001da4 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a54:	2000      	movs	r0, #0
 8001a56:	f000 f80f 	bl	8001a78 <HAL_InitTick>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d002      	beq.n	8001a66 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	71fb      	strb	r3, [r7, #7]
 8001a64:	e001      	b.n	8001a6a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a66:	f7ff feb3 	bl	80017d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	58004000 	.word	0x58004000

08001a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001a84:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <HAL_InitTick+0x6c>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d024      	beq.n	8001ad6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a8c:	f001 fd0e 	bl	80034ac <HAL_RCC_GetHCLKFreq>
 8001a90:	4602      	mov	r2, r0
 8001a92:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <HAL_InitTick+0x6c>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	4619      	mov	r1, r3
 8001a98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 f9be 	bl	8001e26 <HAL_SYSTICK_Config>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10f      	bne.n	8001ad0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b0f      	cmp	r3, #15
 8001ab4:	d809      	bhi.n	8001aca <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	f04f 30ff 	mov.w	r0, #4294967295
 8001abe:	f000 f97c 	bl	8001dba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ac2:	4a09      	ldr	r2, [pc, #36]	; (8001ae8 <HAL_InitTick+0x70>)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	e007      	b.n	8001ada <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	73fb      	strb	r3, [r7, #15]
 8001ace:	e004      	b.n	8001ada <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
 8001ad4:	e001      	b.n	8001ada <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	2000000c 	.word	0x2000000c
 8001ae8:	20000008 	.word	0x20000008

08001aec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_IncTick+0x20>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_IncTick+0x24>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <HAL_IncTick+0x24>)
 8001afe:	6013      	str	r3, [r2, #0]
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	2000000c 	.word	0x2000000c
 8001b10:	2000021c 	.word	0x2000021c

08001b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return uwTick;
 8001b18:	4b03      	ldr	r3, [pc, #12]	; (8001b28 <HAL_GetTick+0x14>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	2000021c 	.word	0x2000021c

08001b2c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <HAL_GetTickPrio+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	20000008 	.word	0x20000008

08001b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <__NVIC_SetPriorityGrouping+0x44>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b60:	4013      	ands	r3, r2
 8001b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b76:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <__NVIC_SetPriorityGrouping+0x44>)
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	60d3      	str	r3, [r2, #12]
}
 8001b7c:	bf00      	nop
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b90:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	0a1b      	lsrs	r3, r3, #8
 8001b96:	f003 0307 	and.w	r3, r3, #7
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	db0b      	blt.n	8001bd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	f003 021f 	and.w	r2, r3, #31
 8001bc0:	4907      	ldr	r1, [pc, #28]	; (8001be0 <__NVIC_EnableIRQ+0x38>)
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	095b      	lsrs	r3, r3, #5
 8001bc8:	2001      	movs	r0, #1
 8001bca:	fa00 f202 	lsl.w	r2, r0, r2
 8001bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000e100 	.word	0xe000e100

08001be4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	db12      	blt.n	8001c1c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	f003 021f 	and.w	r2, r3, #31
 8001bfc:	490a      	ldr	r1, [pc, #40]	; (8001c28 <__NVIC_DisableIRQ+0x44>)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	095b      	lsrs	r3, r3, #5
 8001c04:	2001      	movs	r0, #1
 8001c06:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0a:	3320      	adds	r3, #32
 8001c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c10:	f3bf 8f4f 	dsb	sy
}
 8001c14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c16:	f3bf 8f6f 	isb	sy
}
 8001c1a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000e100 	.word	0xe000e100

08001c2c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	db0c      	blt.n	8001c58 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	f003 021f 	and.w	r2, r3, #31
 8001c44:	4907      	ldr	r1, [pc, #28]	; (8001c64 <__NVIC_SetPendingIRQ+0x38>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	095b      	lsrs	r3, r3, #5
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c52:	3340      	adds	r3, #64	; 0x40
 8001c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000e100 	.word	0xe000e100

08001c68 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	db0c      	blt.n	8001c94 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	f003 021f 	and.w	r2, r3, #31
 8001c80:	4907      	ldr	r1, [pc, #28]	; (8001ca0 <__NVIC_ClearPendingIRQ+0x38>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	095b      	lsrs	r3, r3, #5
 8001c88:	2001      	movs	r0, #1
 8001c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8e:	3360      	adds	r3, #96	; 0x60
 8001c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000e100 	.word	0xe000e100

08001ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	6039      	str	r1, [r7, #0]
 8001cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	db0a      	blt.n	8001cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	490c      	ldr	r1, [pc, #48]	; (8001cf0 <__NVIC_SetPriority+0x4c>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	0112      	lsls	r2, r2, #4
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ccc:	e00a      	b.n	8001ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4908      	ldr	r1, [pc, #32]	; (8001cf4 <__NVIC_SetPriority+0x50>)
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	3b04      	subs	r3, #4
 8001cdc:	0112      	lsls	r2, r2, #4
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	761a      	strb	r2, [r3, #24]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000e100 	.word	0xe000e100
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b089      	sub	sp, #36	; 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f1c3 0307 	rsb	r3, r3, #7
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	bf28      	it	cs
 8001d16:	2304      	movcs	r3, #4
 8001d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	2b06      	cmp	r3, #6
 8001d20:	d902      	bls.n	8001d28 <NVIC_EncodePriority+0x30>
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3b03      	subs	r3, #3
 8001d26:	e000      	b.n	8001d2a <NVIC_EncodePriority+0x32>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43da      	mvns	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d40:	f04f 31ff 	mov.w	r1, #4294967295
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4a:	43d9      	mvns	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	4313      	orrs	r3, r2
         );
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3724      	adds	r7, #36	; 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d70:	d301      	bcc.n	8001d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d72:	2301      	movs	r3, #1
 8001d74:	e00f      	b.n	8001d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d76:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <SysTick_Config+0x40>)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d7e:	210f      	movs	r1, #15
 8001d80:	f04f 30ff 	mov.w	r0, #4294967295
 8001d84:	f7ff ff8e 	bl	8001ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <SysTick_Config+0x40>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d8e:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <SysTick_Config+0x40>)
 8001d90:	2207      	movs	r2, #7
 8001d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	e000e010 	.word	0xe000e010

08001da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff fec9 	bl	8001b44 <__NVIC_SetPriorityGrouping>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc8:	f7ff fee0 	bl	8001b8c <__NVIC_GetPriorityGrouping>
 8001dcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	68b9      	ldr	r1, [r7, #8]
 8001dd2:	6978      	ldr	r0, [r7, #20]
 8001dd4:	f7ff ff90 	bl	8001cf8 <NVIC_EncodePriority>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dde:	4611      	mov	r1, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ff5f 	bl	8001ca4 <__NVIC_SetPriority>
}
 8001de6:	bf00      	nop
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	4603      	mov	r3, r0
 8001df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fed3 	bl	8001ba8 <__NVIC_EnableIRQ>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	4603      	mov	r3, r0
 8001e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fee3 	bl	8001be4 <__NVIC_DisableIRQ>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff ff96 	bl	8001d60 <SysTick_Config>
 8001e34:	4603      	mov	r3, r0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff feed 	bl	8001c2c <__NVIC_SetPendingIRQ>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fefd 	bl	8001c68 <__NVIC_ClearPendingIRQ>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e86:	e14c      	b.n	8002122 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	fa01 f303 	lsl.w	r3, r1, r3
 8001e94:	4013      	ands	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 813e 	beq.w	800211c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d005      	beq.n	8001eb8 <HAL_GPIO_Init+0x40>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d130      	bne.n	8001f1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eee:	2201      	movs	r2, #1
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4013      	ands	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	091b      	lsrs	r3, r3, #4
 8001f04:	f003 0201 	and.w	r2, r3, #1
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d017      	beq.n	8001f56 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	2203      	movs	r2, #3
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d123      	bne.n	8001faa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	08da      	lsrs	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3208      	adds	r2, #8
 8001f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	220f      	movs	r2, #15
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4013      	ands	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	691a      	ldr	r2, [r3, #16]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	08da      	lsrs	r2, r3, #3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3208      	adds	r2, #8
 8001fa4:	6939      	ldr	r1, [r7, #16]
 8001fa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f003 0203 	and.w	r2, r3, #3
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 8098 	beq.w	800211c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001fec:	4a54      	ldr	r2, [pc, #336]	; (8002140 <HAL_GPIO_Init+0x2c8>)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	089b      	lsrs	r3, r3, #2
 8001ff2:	3302      	adds	r3, #2
 8001ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	220f      	movs	r2, #15
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4013      	ands	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002016:	d019      	beq.n	800204c <HAL_GPIO_Init+0x1d4>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a4a      	ldr	r2, [pc, #296]	; (8002144 <HAL_GPIO_Init+0x2cc>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d013      	beq.n	8002048 <HAL_GPIO_Init+0x1d0>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a49      	ldr	r2, [pc, #292]	; (8002148 <HAL_GPIO_Init+0x2d0>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d00d      	beq.n	8002044 <HAL_GPIO_Init+0x1cc>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a48      	ldr	r2, [pc, #288]	; (800214c <HAL_GPIO_Init+0x2d4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d007      	beq.n	8002040 <HAL_GPIO_Init+0x1c8>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a47      	ldr	r2, [pc, #284]	; (8002150 <HAL_GPIO_Init+0x2d8>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d101      	bne.n	800203c <HAL_GPIO_Init+0x1c4>
 8002038:	2304      	movs	r3, #4
 800203a:	e008      	b.n	800204e <HAL_GPIO_Init+0x1d6>
 800203c:	2307      	movs	r3, #7
 800203e:	e006      	b.n	800204e <HAL_GPIO_Init+0x1d6>
 8002040:	2303      	movs	r3, #3
 8002042:	e004      	b.n	800204e <HAL_GPIO_Init+0x1d6>
 8002044:	2302      	movs	r3, #2
 8002046:	e002      	b.n	800204e <HAL_GPIO_Init+0x1d6>
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <HAL_GPIO_Init+0x1d6>
 800204c:	2300      	movs	r3, #0
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	f002 0203 	and.w	r2, r2, #3
 8002054:	0092      	lsls	r2, r2, #2
 8002056:	4093      	lsls	r3, r2
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800205e:	4938      	ldr	r1, [pc, #224]	; (8002140 <HAL_GPIO_Init+0x2c8>)
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	3302      	adds	r3, #2
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800206c:	4b39      	ldr	r3, [pc, #228]	; (8002154 <HAL_GPIO_Init+0x2dc>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	43db      	mvns	r3, r3
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4013      	ands	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4313      	orrs	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002090:	4a30      	ldr	r2, [pc, #192]	; (8002154 <HAL_GPIO_Init+0x2dc>)
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002096:	4b2f      	ldr	r3, [pc, #188]	; (8002154 <HAL_GPIO_Init+0x2dc>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	43db      	mvns	r3, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4013      	ands	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020ba:	4a26      	ldr	r2, [pc, #152]	; (8002154 <HAL_GPIO_Init+0x2dc>)
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020c0:	4b24      	ldr	r3, [pc, #144]	; (8002154 <HAL_GPIO_Init+0x2dc>)
 80020c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4013      	ands	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020e6:	4a1b      	ldr	r2, [pc, #108]	; (8002154 <HAL_GPIO_Init+0x2dc>)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80020ee:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_GPIO_Init+0x2dc>)
 80020f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002114:	4a0f      	ldr	r2, [pc, #60]	; (8002154 <HAL_GPIO_Init+0x2dc>)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	3301      	adds	r3, #1
 8002120:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	fa22 f303 	lsr.w	r3, r2, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	f47f aeab 	bne.w	8001e88 <HAL_GPIO_Init+0x10>
  }
}
 8002132:	bf00      	nop
 8002134:	bf00      	nop
 8002136:	371c      	adds	r7, #28
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	40010000 	.word	0x40010000
 8002144:	48000400 	.word	0x48000400
 8002148:	48000800 	.word	0x48000800
 800214c:	48000c00 	.word	0x48000c00
 8002150:	48001000 	.word	0x48001000
 8002154:	58000800 	.word	0x58000800

08002158 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	887b      	ldrh	r3, [r7, #2]
 800216a:	4013      	ands	r3, r2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d002      	beq.n	8002176 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002170:	2301      	movs	r3, #1
 8002172:	73fb      	strb	r3, [r7, #15]
 8002174:	e001      	b.n	800217a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002176:	2300      	movs	r3, #0
 8002178:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800217a:	7bfb      	ldrb	r3, [r7, #15]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
 8002194:	4613      	mov	r3, r2
 8002196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002198:	787b      	ldrb	r3, [r7, #1]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800219e:	887a      	ldrh	r2, [r7, #2]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021a4:	e002      	b.n	80021ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021a6:	887a      	ldrh	r2, [r7, #2]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021ca:	887a      	ldrh	r2, [r7, #2]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4013      	ands	r3, r2
 80021d0:	041a      	lsls	r2, r3, #16
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	43d9      	mvns	r1, r3
 80021d6:	887b      	ldrh	r3, [r7, #2]
 80021d8:	400b      	ands	r3, r1
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	619a      	str	r2, [r3, #24]
}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80021f2:	4b0a      	ldr	r3, [pc, #40]	; (800221c <HAL_HSEM_IRQHandler+0x30>)
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <HAL_HSEM_IRQHandler+0x30>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	43db      	mvns	r3, r3
 8002200:	4906      	ldr	r1, [pc, #24]	; (800221c <HAL_HSEM_IRQHandler+0x30>)
 8002202:	4013      	ands	r3, r2
 8002204:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002206:	4a05      	ldr	r2, [pc, #20]	; (800221c <HAL_HSEM_IRQHandler+0x30>)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f807 	bl	8002220 <HAL_HSEM_FreeCallback>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	58001500 	.word	0x58001500

08002220 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800223c:	2300      	movs	r3, #0
 800223e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d01e      	beq.n	8002284 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002246:	4b13      	ldr	r3, [pc, #76]	; (8002294 <HAL_IPCC_Init+0x60>)
 8002248:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d102      	bne.n	800225c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff faca 	bl	80017f0 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800225c:	68b8      	ldr	r0, [r7, #8]
 800225e:	f000 f85b 	bl	8002318 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f82c 	bl	80022cc <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002282:	e001      	b.n	8002288 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002288:	7bfb      	ldrb	r3, [r7, #15]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	58000c00 	.word	0x58000c00

08002298 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	4613      	mov	r3, r2
 80022a4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b085      	sub	sp, #20
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	60f8      	str	r0, [r7, #12]
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	4613      	mov	r3, r2
 80022be:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80022d4:	2300      	movs	r3, #0
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	e00f      	b.n	80022fa <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	4a0b      	ldr	r2, [pc, #44]	; (8002310 <IPCC_SetDefaultCallbacks+0x44>)
 80022e4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	3306      	adds	r3, #6
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	4a08      	ldr	r2, [pc, #32]	; (8002314 <IPCC_SetDefaultCallbacks+0x48>)
 80022f2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	3301      	adds	r3, #1
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2b05      	cmp	r3, #5
 80022fe:	d9ec      	bls.n	80022da <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8002300:	bf00      	nop
 8002302:	bf00      	nop
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	08002299 	.word	0x08002299
 8002314:	080022b3 	.word	0x080022b3

08002318 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 800232c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	223f      	movs	r2, #63	; 0x3f
 8002332:	609a      	str	r2, [r3, #8]
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a04      	ldr	r2, [pc, #16]	; (800235c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800234a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234e:	6013      	str	r3, [r2, #0]
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	58000400 	.word	0x58000400

08002360 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <HAL_PWREx_GetVoltageRange+0x18>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	58000400 	.word	0x58000400

0800237c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800238a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800238e:	d101      	bne.n	8002394 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002390:	2301      	movs	r3, #1
 8002392:	e000      	b.n	8002396 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <LL_RCC_HSE_Enable>:
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80023a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b2:	6013      	str	r3, [r2, #0]
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <LL_RCC_HSE_Disable>:
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80023c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d0:	6013      	str	r3, [r2, #0]
}
 80023d2:	bf00      	nop
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <LL_RCC_HSE_IsReady>:
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80023e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023ee:	d101      	bne.n	80023f4 <LL_RCC_HSE_IsReady+0x18>
 80023f0:	2301      	movs	r3, #1
 80023f2:	e000      	b.n	80023f6 <LL_RCC_HSE_IsReady+0x1a>
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <LL_RCC_HSI_Enable>:
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800240e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002412:	6013      	str	r3, [r2, #0]
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <LL_RCC_HSI_Disable>:
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800242c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002430:	6013      	str	r3, [r2, #0]
}
 8002432:	bf00      	nop
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <LL_RCC_HSI_IsReady>:
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800244a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800244e:	d101      	bne.n	8002454 <LL_RCC_HSI_IsReady+0x18>
 8002450:	2301      	movs	r3, #1
 8002452:	e000      	b.n	8002456 <LL_RCC_HSI_IsReady+0x1a>
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	061b      	lsls	r3, r3, #24
 8002476:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800247a:	4313      	orrs	r3, r2
 800247c:	604b      	str	r3, [r1, #4]
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <LL_RCC_HSI48_Enable>:
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800248e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002492:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002496:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80024a2:	bf00      	nop
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_RCC_HSI48_Disable>:
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80024b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024bc:	f023 0301 	bic.w	r3, r3, #1
 80024c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <LL_RCC_HSI48_IsReady>:
{
 80024ce:	b480      	push	{r7}
 80024d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80024d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d101      	bne.n	80024e6 <LL_RCC_HSI48_IsReady+0x18>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <LL_RCC_HSI48_IsReady+0x1a>
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <LL_RCC_LSE_Enable>:
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80024f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800250a:	bf00      	nop
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <LL_RCC_LSE_Disable>:
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002520:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002524:	f023 0301 	bic.w	r3, r3, #1
 8002528:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <LL_RCC_LSE_EnableBypass>:
{
 8002536:	b480      	push	{r7}
 8002538:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800253a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800253e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002542:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002546:	f043 0304 	orr.w	r3, r3, #4
 800254a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800254e:	bf00      	nop
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_RCC_LSE_DisableBypass>:
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800255c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002564:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002568:	f023 0304 	bic.w	r3, r3, #4
 800256c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <LL_RCC_LSE_IsReady>:
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800257e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b02      	cmp	r3, #2
 800258c:	d101      	bne.n	8002592 <LL_RCC_LSE_IsReady+0x18>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <LL_RCC_LSE_IsReady+0x1a>
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <LL_RCC_LSI1_Enable>:
{
 800259e:	b480      	push	{r7}
 80025a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80025a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025ae:	f043 0301 	orr.w	r3, r3, #1
 80025b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80025b6:	bf00      	nop
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <LL_RCC_LSI1_Disable>:
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80025c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025d0:	f023 0301 	bic.w	r3, r3, #1
 80025d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <LL_RCC_LSI1_IsReady>:
{
 80025e2:	b480      	push	{r7}
 80025e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80025e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d101      	bne.n	80025fa <LL_RCC_LSI1_IsReady+0x18>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <LL_RCC_LSI1_IsReady+0x1a>
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <LL_RCC_LSI2_Enable>:
{
 8002606:	b480      	push	{r7}
 8002608:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800260a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800260e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002612:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002616:	f043 0304 	orr.w	r3, r3, #4
 800261a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800261e:	bf00      	nop
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <LL_RCC_LSI2_Disable>:
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800262c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002634:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002638:	f023 0304 	bic.w	r3, r3, #4
 800263c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <LL_RCC_LSI2_IsReady>:
{
 800264a:	b480      	push	{r7}
 800264c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800264e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b08      	cmp	r3, #8
 800265c:	d101      	bne.n	8002662 <LL_RCC_LSI2_IsReady+0x18>
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <LL_RCC_LSI2_IsReady+0x1a>
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <LL_RCC_LSI2_SetTrimming>:
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800267a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800267e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	021b      	lsls	r3, r3, #8
 8002686:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <LL_RCC_MSI_Enable>:
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80026a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	6013      	str	r3, [r2, #0]
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <LL_RCC_MSI_Disable>:
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80026be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026c8:	f023 0301 	bic.w	r3, r3, #1
 80026cc:	6013      	str	r3, [r2, #0]
}
 80026ce:	bf00      	nop
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <LL_RCC_MSI_IsReady>:
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80026dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d101      	bne.n	80026ee <LL_RCC_MSI_IsReady+0x16>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <LL_RCC_MSI_IsReady+0x18>
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <LL_RCC_MSI_SetRange>:
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800270c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4313      	orrs	r3, r2
 8002714:	600b      	str	r3, [r1, #0]
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <LL_RCC_MSI_GetRange>:
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002732:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2bb0      	cmp	r3, #176	; 0xb0
 8002738:	d901      	bls.n	800273e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800273a:	23b0      	movs	r3, #176	; 0xb0
 800273c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800273e:	687b      	ldr	r3, [r7, #4]
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <LL_RCC_MSI_SetCalibTrimming>:
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	021b      	lsls	r3, r3, #8
 8002762:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002766:	4313      	orrs	r3, r2
 8002768:	604b      	str	r3, [r1, #4]
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <LL_RCC_SetSysClkSource>:
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800277e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f023 0203 	bic.w	r2, r3, #3
 8002788:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4313      	orrs	r3, r2
 8002790:	608b      	str	r3, [r1, #8]
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <LL_RCC_GetSysClkSource>:
{
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80027a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 030c 	and.w	r3, r3, #12
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <LL_RCC_SetAHBPrescaler>:
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80027be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	608b      	str	r3, [r1, #8]
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <LL_C2_RCC_SetAHBPrescaler>:
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80027e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80027ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <LL_RCC_SetAHB4Prescaler>:
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002816:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800281a:	f023 020f 	bic.w	r2, r3, #15
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <LL_RCC_SetAPB1Prescaler>:
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800284a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4313      	orrs	r3, r2
 8002852:	608b      	str	r3, [r1, #8]
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <LL_RCC_SetAPB2Prescaler>:
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002872:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4313      	orrs	r3, r2
 800287a:	608b      	str	r3, [r1, #8]
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <LL_RCC_GetAHBPrescaler>:
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800288c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002896:	4618      	mov	r0, r3
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <LL_RCC_GetAHB4Prescaler>:
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80028a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <LL_RCC_PLL_Enable>:
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80028c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ce:	6013      	str	r3, [r2, #0]
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <LL_RCC_PLL_Disable>:
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80028de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ec:	6013      	str	r3, [r2, #0]
}
 80028ee:	bf00      	nop
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <LL_RCC_PLL_IsReady>:
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80028fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002906:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800290a:	d101      	bne.n	8002910 <LL_RCC_PLL_IsReady+0x18>
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <LL_RCC_PLL_IsReady+0x1a>
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <LL_RCC_PLL_GetN>:
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	0a1b      	lsrs	r3, r3, #8
 8002928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800292c:	4618      	mov	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <LL_RCC_PLL_GetR>:
{
 8002936:	b480      	push	{r7}
 8002938:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800293a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002944:	4618      	mov	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <LL_RCC_PLL_GetDivider>:
{
 800294e:	b480      	push	{r7}
 8002950:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800295c:	4618      	mov	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <LL_RCC_PLL_GetMainSource>:
{
 8002966:	b480      	push	{r7}
 8002968:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800296a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f003 0303 	and.w	r3, r3, #3
}
 8002974:	4618      	mov	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <LL_RCC_IsActiveFlag_HPRE>:
{
 800297e:	b480      	push	{r7}
 8002980:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002990:	d101      	bne.n	8002996 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80029a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029b6:	d101      	bne.n	80029bc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80029cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80029d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029dc:	d101      	bne.n	80029e2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <LL_RCC_IsActiveFlag_PPRE1>:
{
 80029ee:	b480      	push	{r7}
 80029f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80029f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a00:	d101      	bne.n	8002a06 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8002a12:	b480      	push	{r7}
 8002a14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a24:	d101      	bne.n	8002a2a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
	...

08002a38 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a38:	b590      	push	{r4, r7, lr}
 8002a3a:	b08d      	sub	sp, #52	; 0x34
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e37f      	b.n	800314a <HAL_RCC_OscConfig+0x712>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0320 	and.w	r3, r3, #32
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 8092 	beq.w	8002b7c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a58:	f7ff fea1 	bl	800279e <LL_RCC_GetSysClkSource>
 8002a5c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a5e:	f7ff ff82 	bl	8002966 <LL_RCC_PLL_GetMainSource>
 8002a62:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <HAL_RCC_OscConfig+0x3e>
 8002a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6c:	2b0c      	cmp	r3, #12
 8002a6e:	d14c      	bne.n	8002b0a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d149      	bne.n	8002b0a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a76:	f7ff fe2f 	bl	80026d8 <LL_RCC_MSI_IsReady>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <HAL_RCC_OscConfig+0x54>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e35e      	b.n	800314a <HAL_RCC_OscConfig+0x712>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002a90:	f7ff fe47 	bl	8002722 <LL_RCC_MSI_GetRange>
 8002a94:	4603      	mov	r3, r0
 8002a96:	429c      	cmp	r4, r3
 8002a98:	d914      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fd18 	bl	80034d4 <RCC_SetFlashLatencyFromMSIRange>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e34d      	b.n	800314a <HAL_RCC_OscConfig+0x712>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fe21 	bl	80026fa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fe45 	bl	800274c <LL_RCC_MSI_SetCalibTrimming>
 8002ac2:	e013      	b.n	8002aec <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fe16 	bl	80026fa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff fe3a 	bl	800274c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 fcf9 	bl	80034d4 <RCC_SetFlashLatencyFromMSIRange>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e32e      	b.n	800314a <HAL_RCC_OscConfig+0x712>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002aec:	f000 fcde 	bl	80034ac <HAL_RCC_GetHCLKFreq>
 8002af0:	4603      	mov	r3, r0
 8002af2:	4aa5      	ldr	r2, [pc, #660]	; (8002d88 <HAL_RCC_OscConfig+0x350>)
 8002af4:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002af6:	4ba5      	ldr	r3, [pc, #660]	; (8002d8c <HAL_RCC_OscConfig+0x354>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fe ffbc 	bl	8001a78 <HAL_InitTick>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d039      	beq.n	8002b7a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e31f      	b.n	800314a <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d01e      	beq.n	8002b50 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b12:	f7ff fdc3 	bl	800269c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b16:	f7fe fffd 	bl	8001b14 <HAL_GetTick>
 8002b1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b1e:	f7fe fff9 	bl	8001b14 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e30c      	b.n	800314a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002b30:	f7ff fdd2 	bl	80026d8 <LL_RCC_MSI_IsReady>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f1      	beq.n	8002b1e <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff fddb 	bl	80026fa <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff fdff 	bl	800274c <LL_RCC_MSI_SetCalibTrimming>
 8002b4e:	e015      	b.n	8002b7c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b50:	f7ff fdb3 	bl	80026ba <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b54:	f7fe ffde 	bl	8001b14 <HAL_GetTick>
 8002b58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b5c:	f7fe ffda 	bl	8001b14 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e2ed      	b.n	800314a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002b6e:	f7ff fdb3 	bl	80026d8 <LL_RCC_MSI_IsReady>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1f1      	bne.n	8002b5c <HAL_RCC_OscConfig+0x124>
 8002b78:	e000      	b.n	8002b7c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b7a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d04e      	beq.n	8002c26 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b88:	f7ff fe09 	bl	800279e <LL_RCC_GetSysClkSource>
 8002b8c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b8e:	f7ff feea 	bl	8002966 <LL_RCC_PLL_GetMainSource>
 8002b92:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d005      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x16e>
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	2b0c      	cmp	r3, #12
 8002b9e:	d10d      	bne.n	8002bbc <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d10a      	bne.n	8002bbc <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba6:	f7ff fc19 	bl	80023dc <LL_RCC_HSE_IsReady>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d039      	beq.n	8002c24 <HAL_RCC_OscConfig+0x1ec>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d135      	bne.n	8002c24 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e2c6      	b.n	800314a <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc4:	d102      	bne.n	8002bcc <HAL_RCC_OscConfig+0x194>
 8002bc6:	f7ff fbeb 	bl	80023a0 <LL_RCC_HSE_Enable>
 8002bca:	e001      	b.n	8002bd0 <HAL_RCC_OscConfig+0x198>
 8002bcc:	f7ff fbf7 	bl	80023be <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d012      	beq.n	8002bfe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd8:	f7fe ff9c 	bl	8001b14 <HAL_GetTick>
 8002bdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be0:	f7fe ff98 	bl	8001b14 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b64      	cmp	r3, #100	; 0x64
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e2ab      	b.n	800314a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002bf2:	f7ff fbf3 	bl	80023dc <LL_RCC_HSE_IsReady>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0f1      	beq.n	8002be0 <HAL_RCC_OscConfig+0x1a8>
 8002bfc:	e013      	b.n	8002c26 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfe:	f7fe ff89 	bl	8001b14 <HAL_GetTick>
 8002c02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c06:	f7fe ff85 	bl	8001b14 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b64      	cmp	r3, #100	; 0x64
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e298      	b.n	800314a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002c18:	f7ff fbe0 	bl	80023dc <LL_RCC_HSE_IsReady>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f1      	bne.n	8002c06 <HAL_RCC_OscConfig+0x1ce>
 8002c22:	e000      	b.n	8002c26 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c24:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d051      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c32:	f7ff fdb4 	bl	800279e <LL_RCC_GetSysClkSource>
 8002c36:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c38:	f7ff fe95 	bl	8002966 <LL_RCC_PLL_GetMainSource>
 8002c3c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d005      	beq.n	8002c50 <HAL_RCC_OscConfig+0x218>
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	2b0c      	cmp	r3, #12
 8002c48:	d113      	bne.n	8002c72 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d110      	bne.n	8002c72 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c50:	f7ff fbf4 	bl	800243c <LL_RCC_HSI_IsReady>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d005      	beq.n	8002c66 <HAL_RCC_OscConfig+0x22e>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e271      	b.n	800314a <HAL_RCC_OscConfig+0x712>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff fbf8 	bl	8002460 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c70:	e031      	b.n	8002cd6 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d019      	beq.n	8002cae <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c7a:	f7ff fbc1 	bl	8002400 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7e:	f7fe ff49 	bl	8001b14 <HAL_GetTick>
 8002c82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c86:	f7fe ff45 	bl	8001b14 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e258      	b.n	800314a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002c98:	f7ff fbd0 	bl	800243c <LL_RCC_HSI_IsReady>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f1      	beq.n	8002c86 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fbda 	bl	8002460 <LL_RCC_HSI_SetCalibTrimming>
 8002cac:	e013      	b.n	8002cd6 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cae:	f7ff fbb6 	bl	800241e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb2:	f7fe ff2f 	bl	8001b14 <HAL_GetTick>
 8002cb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cba:	f7fe ff2b 	bl	8001b14 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e23e      	b.n	800314a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002ccc:	f7ff fbb6 	bl	800243c <LL_RCC_HSI_IsReady>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f1      	bne.n	8002cba <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d106      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 80a4 	beq.w	8002e38 <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d077      	beq.n	8002de8 <HAL_RCC_OscConfig+0x3b0>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d04b      	beq.n	8002d9c <HAL_RCC_OscConfig+0x364>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002d04:	f7ff fc6d 	bl	80025e2 <LL_RCC_LSI1_IsReady>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d113      	bne.n	8002d36 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002d0e:	f7ff fc46 	bl	800259e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d12:	f7fe feff 	bl	8001b14 <HAL_GetTick>
 8002d16:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002d1a:	f7fe fefb 	bl	8001b14 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e20e      	b.n	800314a <HAL_RCC_OscConfig+0x712>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002d2c:	f7ff fc59 	bl	80025e2 <LL_RCC_LSI1_IsReady>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f1      	beq.n	8002d1a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002d36:	f7ff fc66 	bl	8002606 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3a:	f7fe feeb 	bl	8001b14 <HAL_GetTick>
 8002d3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002d42:	f7fe fee7 	bl	8001b14 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e1fa      	b.n	800314a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002d54:	f7ff fc79 	bl	800264a <LL_RCC_LSI2_IsReady>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f1      	beq.n	8002d42 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff fc83 	bl	800266e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002d68:	f7ff fc2a 	bl	80025c0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fe fed2 	bl	8001b14 <HAL_GetTick>
 8002d70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002d72:	e00d      	b.n	8002d90 <HAL_RCC_OscConfig+0x358>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002d74:	f7fe fece 	bl	8001b14 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d906      	bls.n	8002d90 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e1e1      	b.n	800314a <HAL_RCC_OscConfig+0x712>
 8002d86:	bf00      	nop
 8002d88:	20000004 	.word	0x20000004
 8002d8c:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002d90:	f7ff fc27 	bl	80025e2 <LL_RCC_LSI1_IsReady>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1ec      	bne.n	8002d74 <HAL_RCC_OscConfig+0x33c>
 8002d9a:	e04d      	b.n	8002e38 <HAL_RCC_OscConfig+0x400>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002d9c:	f7ff fbff 	bl	800259e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da0:	f7fe feb8 	bl	8001b14 <HAL_GetTick>
 8002da4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x382>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002da8:	f7fe feb4 	bl	8001b14 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e1c7      	b.n	800314a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002dba:	f7ff fc12 	bl	80025e2 <LL_RCC_LSI1_IsReady>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0f1      	beq.n	8002da8 <HAL_RCC_OscConfig+0x370>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002dc4:	f7ff fc30 	bl	8002628 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x3a4>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002dca:	f7fe fea3 	bl	8001b14 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e1b6      	b.n	800314a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002ddc:	f7ff fc35 	bl	800264a <LL_RCC_LSI2_IsReady>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f1      	bne.n	8002dca <HAL_RCC_OscConfig+0x392>
 8002de6:	e027      	b.n	8002e38 <HAL_RCC_OscConfig+0x400>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002de8:	f7ff fc1e 	bl	8002628 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dec:	f7fe fe92 	bl	8001b14 <HAL_GetTick>
 8002df0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x3ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002df4:	f7fe fe8e 	bl	8001b14 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e1a1      	b.n	800314a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002e06:	f7ff fc20 	bl	800264a <LL_RCC_LSI2_IsReady>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f1      	bne.n	8002df4 <HAL_RCC_OscConfig+0x3bc>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002e10:	f7ff fbd6 	bl	80025c0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e14:	f7fe fe7e 	bl	8001b14 <HAL_GetTick>
 8002e18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x3f6>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002e1c:	f7fe fe7a 	bl	8001b14 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e18d      	b.n	800314a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002e2e:	f7ff fbd8 	bl	80025e2 <LL_RCC_LSI1_IsReady>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1f1      	bne.n	8002e1c <HAL_RCC_OscConfig+0x3e4>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d05b      	beq.n	8002efc <HAL_RCC_OscConfig+0x4c4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e44:	4ba7      	ldr	r3, [pc, #668]	; (80030e4 <HAL_RCC_OscConfig+0x6ac>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d114      	bne.n	8002e7a <HAL_RCC_OscConfig+0x442>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002e50:	f7ff fa76 	bl	8002340 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e54:	f7fe fe5e 	bl	8001b14 <HAL_GetTick>
 8002e58:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x436>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5c:	f7fe fe5a 	bl	8001b14 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e16d      	b.n	800314a <HAL_RCC_OscConfig+0x712>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e6e:	4b9d      	ldr	r3, [pc, #628]	; (80030e4 <HAL_RCC_OscConfig+0x6ac>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0x424>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d102      	bne.n	8002e88 <HAL_RCC_OscConfig+0x450>
 8002e82:	f7ff fb36 	bl	80024f2 <LL_RCC_LSE_Enable>
 8002e86:	e00c      	b.n	8002ea2 <HAL_RCC_OscConfig+0x46a>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b05      	cmp	r3, #5
 8002e8e:	d104      	bne.n	8002e9a <HAL_RCC_OscConfig+0x462>
 8002e90:	f7ff fb51 	bl	8002536 <LL_RCC_LSE_EnableBypass>
 8002e94:	f7ff fb2d 	bl	80024f2 <LL_RCC_LSE_Enable>
 8002e98:	e003      	b.n	8002ea2 <HAL_RCC_OscConfig+0x46a>
 8002e9a:	f7ff fb3b 	bl	8002514 <LL_RCC_LSE_Disable>
 8002e9e:	f7ff fb5b 	bl	8002558 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d014      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eaa:	f7fe fe33 	bl	8001b14 <HAL_GetTick>
 8002eae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002eb0:	e00a      	b.n	8002ec8 <HAL_RCC_OscConfig+0x490>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb2:	f7fe fe2f 	bl	8001b14 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e140      	b.n	800314a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002ec8:	f7ff fb57 	bl	800257a <LL_RCC_LSE_IsReady>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0ef      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x47a>
 8002ed2:	e013      	b.n	8002efc <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed4:	f7fe fe1e 	bl	8001b14 <HAL_GetTick>
 8002ed8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002eda:	e00a      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002edc:	f7fe fe1a 	bl	8001b14 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e12b      	b.n	800314a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002ef2:	f7ff fb42 	bl	800257a <LL_RCC_LSE_IsReady>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1ef      	bne.n	8002edc <HAL_RCC_OscConfig+0x4a4>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d02c      	beq.n	8002f62 <HAL_RCC_OscConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d014      	beq.n	8002f3a <HAL_RCC_OscConfig+0x502>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f10:	f7ff fabb 	bl	800248a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f14:	f7fe fdfe 	bl	8001b14 <HAL_GetTick>
 8002f18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x4f6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f1c:	f7fe fdfa 	bl	8001b14 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e10d      	b.n	800314a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002f2e:	f7ff face 	bl	80024ce <LL_RCC_HSI48_IsReady>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0f1      	beq.n	8002f1c <HAL_RCC_OscConfig+0x4e4>
 8002f38:	e013      	b.n	8002f62 <HAL_RCC_OscConfig+0x52a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f3a:	f7ff fab7 	bl	80024ac <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3e:	f7fe fde9 	bl	8001b14 <HAL_GetTick>
 8002f42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x520>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f46:	f7fe fde5 	bl	8001b14 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e0f8      	b.n	800314a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002f58:	f7ff fab9 	bl	80024ce <LL_RCC_HSI48_IsReady>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f1      	bne.n	8002f46 <HAL_RCC_OscConfig+0x50e>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 80ee 	beq.w	8003148 <HAL_RCC_OscConfig+0x710>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f6c:	f7ff fc17 	bl	800279e <LL_RCC_GetSysClkSource>
 8002f70:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	f040 80b4 	bne.w	80030ec <HAL_RCC_OscConfig+0x6b4>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f003 0203 	and.w	r2, r3, #3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d123      	bne.n	8002fda <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d11c      	bne.n	8002fda <HAL_RCC_OscConfig+0x5a2>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	0a1b      	lsrs	r3, r3, #8
 8002fa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d114      	bne.n	8002fda <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d10d      	bne.n	8002fda <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d106      	bne.n	8002fda <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d05d      	beq.n	8003096 <HAL_RCC_OscConfig+0x65e>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	2b0c      	cmp	r3, #12
 8002fde:	d058      	beq.n	8003092 <HAL_RCC_OscConfig+0x65a>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x5ba>

          {
            return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e0ab      	b.n	800314a <HAL_RCC_OscConfig+0x712>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ff2:	f7ff fc72 	bl	80028da <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ff6:	f7fe fd8d 	bl	8001b14 <HAL_GetTick>
 8002ffa:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x5d8>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ffe:	f7fe fd89 	bl	8001b14 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x5d8>
              {
                return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e09c      	b.n	800314a <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1ef      	bne.n	8002ffe <HAL_RCC_OscConfig+0x5c6>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800301e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	4b30      	ldr	r3, [pc, #192]	; (80030e8 <HAL_RCC_OscConfig+0x6b0>)
 8003026:	4013      	ands	r3, r2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003030:	4311      	orrs	r1, r2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003036:	0212      	lsls	r2, r2, #8
 8003038:	4311      	orrs	r1, r2
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800303e:	4311      	orrs	r1, r2
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003044:	4311      	orrs	r1, r2
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800304a:	430a      	orrs	r2, r1
 800304c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003050:	4313      	orrs	r3, r2
 8003052:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003054:	f7ff fc32 	bl	80028bc <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003066:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003068:	f7fe fd54 	bl	8001b14 <HAL_GetTick>
 800306c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x64a>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003070:	f7fe fd50 	bl	8001b14 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x64a>
              {
                return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e063      	b.n	800314a <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0ef      	beq.n	8003070 <HAL_RCC_OscConfig+0x638>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003090:	e05a      	b.n	8003148 <HAL_RCC_OscConfig+0x710>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e059      	b.n	800314a <HAL_RCC_OscConfig+0x712>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d151      	bne.n	8003148 <HAL_RCC_OscConfig+0x710>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030a4:	f7ff fc0a 	bl	80028bc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030b8:	f7fe fd2c 	bl	8001b14 <HAL_GetTick>
 80030bc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x69a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c0:	f7fe fd28 	bl	8001b14 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x69a>
            {
              return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e03b      	b.n	800314a <HAL_RCC_OscConfig+0x712>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0ef      	beq.n	80030c0 <HAL_RCC_OscConfig+0x688>
 80030e0:	e032      	b.n	8003148 <HAL_RCC_OscConfig+0x710>
 80030e2:	bf00      	nop
 80030e4:	58000400 	.word	0x58000400
 80030e8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	2b0c      	cmp	r3, #12
 80030f0:	d028      	beq.n	8003144 <HAL_RCC_OscConfig+0x70c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f2:	f7ff fbf2 	bl	80028da <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80030f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003100:	f023 0303 	bic.w	r3, r3, #3
 8003104:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8003106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003110:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003118:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311a:	f7fe fcfb 	bl	8001b14 <HAL_GetTick>
 800311e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x6fc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003122:	f7fe fcf7 	bl	8001b14 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x6fc>
          {
            return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e00a      	b.n	800314a <HAL_RCC_OscConfig+0x712>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1ef      	bne.n	8003122 <HAL_RCC_OscConfig+0x6ea>
 8003142:	e001      	b.n	8003148 <HAL_RCC_OscConfig+0x710>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <HAL_RCC_OscConfig+0x712>
      }
    }
  }
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3734      	adds	r7, #52	; 0x34
 800314e:	46bd      	mov	sp, r7
 8003150:	bd90      	pop	{r4, r7, pc}
 8003152:	bf00      	nop

08003154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e12d      	b.n	80033c4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003168:	4b98      	ldr	r3, [pc, #608]	; (80033cc <HAL_RCC_ClockConfig+0x278>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d91b      	bls.n	80031ae <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003176:	4b95      	ldr	r3, [pc, #596]	; (80033cc <HAL_RCC_ClockConfig+0x278>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 0207 	bic.w	r2, r3, #7
 800317e:	4993      	ldr	r1, [pc, #588]	; (80033cc <HAL_RCC_ClockConfig+0x278>)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	4313      	orrs	r3, r2
 8003184:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003186:	f7fe fcc5 	bl	8001b14 <HAL_GetTick>
 800318a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800318e:	f7fe fcc1 	bl	8001b14 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e111      	b.n	80033c4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a0:	4b8a      	ldr	r3, [pc, #552]	; (80033cc <HAL_RCC_ClockConfig+0x278>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d1ef      	bne.n	800318e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d016      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff faf9 	bl	80027b6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80031c4:	f7fe fca6 	bl	8001b14 <HAL_GetTick>
 80031c8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80031ca:	e008      	b.n	80031de <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031cc:	f7fe fca2 	bl	8001b14 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e0f2      	b.n	80033c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80031de:	f7ff fbce 	bl	800297e <LL_RCC_IsActiveFlag_HPRE>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0f1      	beq.n	80031cc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d016      	beq.n	8003222 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff faf0 	bl	80027de <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80031fe:	f7fe fc89 	bl	8001b14 <HAL_GetTick>
 8003202:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003204:	e008      	b.n	8003218 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003206:	f7fe fc85 	bl	8001b14 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e0d5      	b.n	80033c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003218:	f7ff fbc3 	bl	80029a2 <LL_RCC_IsActiveFlag_C2HPRE>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f1      	beq.n	8003206 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322a:	2b00      	cmp	r3, #0
 800322c:	d016      	beq.n	800325c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff fae9 	bl	800280a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003238:	f7fe fc6c 	bl	8001b14 <HAL_GetTick>
 800323c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800323e:	e008      	b.n	8003252 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003240:	f7fe fc68 	bl	8001b14 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e0b8      	b.n	80033c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003252:	f7ff fbb9 	bl	80029c8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0f1      	beq.n	8003240 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d016      	beq.n	8003296 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fae3 	bl	8002838 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003272:	f7fe fc4f 	bl	8001b14 <HAL_GetTick>
 8003276:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003278:	e008      	b.n	800328c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800327a:	f7fe fc4b 	bl	8001b14 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e09b      	b.n	80033c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800328c:	f7ff fbaf 	bl	80029ee <LL_RCC_IsActiveFlag_PPRE1>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0f1      	beq.n	800327a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d017      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff fad9 	bl	8002860 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80032ae:	f7fe fc31 	bl	8001b14 <HAL_GetTick>
 80032b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80032b6:	f7fe fc2d 	bl	8001b14 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e07d      	b.n	80033c4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80032c8:	f7ff fba3 	bl	8002a12 <LL_RCC_IsActiveFlag_PPRE2>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0f1      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d043      	beq.n	8003366 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d106      	bne.n	80032f4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80032e6:	f7ff f879 	bl	80023dc <LL_RCC_HSE_IsReady>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d11e      	bne.n	800332e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e067      	b.n	80033c4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	d106      	bne.n	800330a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80032fc:	f7ff fafc 	bl	80028f8 <LL_RCC_PLL_IsReady>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d113      	bne.n	800332e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e05c      	b.n	80033c4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d106      	bne.n	8003320 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003312:	f7ff f9e1 	bl	80026d8 <LL_RCC_MSI_IsReady>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d108      	bne.n	800332e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e051      	b.n	80033c4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003320:	f7ff f88c 	bl	800243c <LL_RCC_HSI_IsReady>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e04a      	b.n	80033c4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff fa1f 	bl	8002776 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003338:	f7fe fbec 	bl	8001b14 <HAL_GetTick>
 800333c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333e:	e00a      	b.n	8003356 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003340:	f7fe fbe8 	bl	8001b14 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	; 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e036      	b.n	80033c4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003356:	f7ff fa22 	bl	800279e <LL_RCC_GetSysClkSource>
 800335a:	4602      	mov	r2, r0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	429a      	cmp	r2, r3
 8003364:	d1ec      	bne.n	8003340 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003366:	4b19      	ldr	r3, [pc, #100]	; (80033cc <HAL_RCC_ClockConfig+0x278>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d21b      	bcs.n	80033ac <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003374:	4b15      	ldr	r3, [pc, #84]	; (80033cc <HAL_RCC_ClockConfig+0x278>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f023 0207 	bic.w	r2, r3, #7
 800337c:	4913      	ldr	r1, [pc, #76]	; (80033cc <HAL_RCC_ClockConfig+0x278>)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	4313      	orrs	r3, r2
 8003382:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003384:	f7fe fbc6 	bl	8001b14 <HAL_GetTick>
 8003388:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	e008      	b.n	800339e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800338c:	f7fe fbc2 	bl	8001b14 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e012      	b.n	80033c4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <HAL_RCC_ClockConfig+0x278>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d1ef      	bne.n	800338c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80033ac:	f000 f87e 	bl	80034ac <HAL_RCC_GetHCLKFreq>
 80033b0:	4603      	mov	r3, r0
 80033b2:	4a07      	ldr	r2, [pc, #28]	; (80033d0 <HAL_RCC_ClockConfig+0x27c>)
 80033b4:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80033b6:	f7fe fbb9 	bl	8001b2c <HAL_GetTickPrio>
 80033ba:	4603      	mov	r3, r0
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fe fb5b 	bl	8001a78 <HAL_InitTick>
 80033c2:	4603      	mov	r3, r0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	58004000 	.word	0x58004000
 80033d0:	20000004 	.word	0x20000004

080033d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d4:	b590      	push	{r4, r7, lr}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033da:	f7ff f9e0 	bl	800279e <LL_RCC_GetSysClkSource>
 80033de:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10a      	bne.n	80033fc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80033e6:	f7ff f99c 	bl	8002722 <LL_RCC_MSI_GetRange>
 80033ea:	4603      	mov	r3, r0
 80033ec:	091b      	lsrs	r3, r3, #4
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	4a2b      	ldr	r2, [pc, #172]	; (80034a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 80033f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	e04b      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d102      	bne.n	8003408 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003402:	4b28      	ldr	r3, [pc, #160]	; (80034a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	e045      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b08      	cmp	r3, #8
 800340c:	d10a      	bne.n	8003424 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800340e:	f7fe ffb5 	bl	800237c <LL_RCC_HSE_IsEnabledDiv2>
 8003412:	4603      	mov	r3, r0
 8003414:	2b01      	cmp	r3, #1
 8003416:	d102      	bne.n	800341e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003418:	4b22      	ldr	r3, [pc, #136]	; (80034a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	e03a      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800341e:	4b22      	ldr	r3, [pc, #136]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	e037      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003424:	f7ff fa9f 	bl	8002966 <LL_RCC_PLL_GetMainSource>
 8003428:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b02      	cmp	r3, #2
 800342e:	d003      	beq.n	8003438 <HAL_RCC_GetSysClockFreq+0x64>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2b03      	cmp	r3, #3
 8003434:	d003      	beq.n	800343e <HAL_RCC_GetSysClockFreq+0x6a>
 8003436:	e00d      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003438:	4b1a      	ldr	r3, [pc, #104]	; (80034a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800343a:	60bb      	str	r3, [r7, #8]
        break;
 800343c:	e015      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800343e:	f7fe ff9d 	bl	800237c <LL_RCC_HSE_IsEnabledDiv2>
 8003442:	4603      	mov	r3, r0
 8003444:	2b01      	cmp	r3, #1
 8003446:	d102      	bne.n	800344e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003448:	4b16      	ldr	r3, [pc, #88]	; (80034a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800344a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800344c:	e00d      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800344e:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003450:	60bb      	str	r3, [r7, #8]
        break;
 8003452:	e00a      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003454:	f7ff f965 	bl	8002722 <LL_RCC_MSI_GetRange>
 8003458:	4603      	mov	r3, r0
 800345a:	091b      	lsrs	r3, r3, #4
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	4a0f      	ldr	r2, [pc, #60]	; (80034a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003466:	60bb      	str	r3, [r7, #8]
        break;
 8003468:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800346a:	f7ff fa57 	bl	800291c <LL_RCC_PLL_GetN>
 800346e:	4602      	mov	r2, r0
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	fb03 f402 	mul.w	r4, r3, r2
 8003476:	f7ff fa6a 	bl	800294e <LL_RCC_PLL_GetDivider>
 800347a:	4603      	mov	r3, r0
 800347c:	091b      	lsrs	r3, r3, #4
 800347e:	3301      	adds	r3, #1
 8003480:	fbb4 f4f3 	udiv	r4, r4, r3
 8003484:	f7ff fa57 	bl	8002936 <LL_RCC_PLL_GetR>
 8003488:	4603      	mov	r3, r0
 800348a:	0f5b      	lsrs	r3, r3, #29
 800348c:	3301      	adds	r3, #1
 800348e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003492:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8003494:	68fb      	ldr	r3, [r7, #12]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	bd90      	pop	{r4, r7, pc}
 800349e:	bf00      	nop
 80034a0:	080078c0 	.word	0x080078c0
 80034a4:	00f42400 	.word	0x00f42400
 80034a8:	01e84800 	.word	0x01e84800

080034ac <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034ac:	b598      	push	{r3, r4, r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80034b0:	f7ff ff90 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 80034b4:	4604      	mov	r4, r0
 80034b6:	f7ff f9e7 	bl	8002888 <LL_RCC_GetAHBPrescaler>
 80034ba:	4603      	mov	r3, r0
 80034bc:	091b      	lsrs	r3, r3, #4
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	4a03      	ldr	r2, [pc, #12]	; (80034d0 <HAL_RCC_GetHCLKFreq+0x24>)
 80034c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	bd98      	pop	{r3, r4, r7, pc}
 80034d0:	08007880 	.word	0x08007880

080034d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80034d4:	b590      	push	{r4, r7, lr}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2bb0      	cmp	r3, #176	; 0xb0
 80034e0:	d903      	bls.n	80034ea <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80034e2:	4b15      	ldr	r3, [pc, #84]	; (8003538 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	e007      	b.n	80034fa <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	091b      	lsrs	r3, r3, #4
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	4a11      	ldr	r2, [pc, #68]	; (8003538 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80034f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80034fa:	f7ff f9d1 	bl	80028a0 <LL_RCC_GetAHB4Prescaler>
 80034fe:	4603      	mov	r3, r0
 8003500:	091b      	lsrs	r3, r3, #4
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	4a0d      	ldr	r2, [pc, #52]	; (800353c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003512:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4a0a      	ldr	r2, [pc, #40]	; (8003540 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003518:	fba2 2303 	umull	r2, r3, r2, r3
 800351c:	0c9c      	lsrs	r4, r3, #18
 800351e:	f7fe ff1f 	bl	8002360 <HAL_PWREx_GetVoltageRange>
 8003522:	4603      	mov	r3, r0
 8003524:	4619      	mov	r1, r3
 8003526:	4620      	mov	r0, r4
 8003528:	f000 f80c 	bl	8003544 <RCC_SetFlashLatency>
 800352c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800352e:	4618      	mov	r0, r3
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	bd90      	pop	{r4, r7, pc}
 8003536:	bf00      	nop
 8003538:	080078c0 	.word	0x080078c0
 800353c:	08007880 	.word	0x08007880
 8003540:	431bde83 	.word	0x431bde83

08003544 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003544:	b590      	push	{r4, r7, lr}
 8003546:	b093      	sub	sp, #76	; 0x4c
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800354e:	4b37      	ldr	r3, [pc, #220]	; (800362c <RCC_SetFlashLatency+0xe8>)
 8003550:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003554:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003556:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800355a:	4a35      	ldr	r2, [pc, #212]	; (8003630 <RCC_SetFlashLatency+0xec>)
 800355c:	f107 031c 	add.w	r3, r7, #28
 8003560:	ca07      	ldmia	r2, {r0, r1, r2}
 8003562:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003566:	4b33      	ldr	r3, [pc, #204]	; (8003634 <RCC_SetFlashLatency+0xf0>)
 8003568:	f107 040c 	add.w	r4, r7, #12
 800356c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800356e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003572:	2300      	movs	r3, #0
 8003574:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800357c:	d11a      	bne.n	80035b4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800357e:	2300      	movs	r3, #0
 8003580:	643b      	str	r3, [r7, #64]	; 0x40
 8003582:	e013      	b.n	80035ac <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	3348      	adds	r3, #72	; 0x48
 800358a:	443b      	add	r3, r7
 800358c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	429a      	cmp	r2, r3
 8003594:	d807      	bhi.n	80035a6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	3348      	adds	r3, #72	; 0x48
 800359c:	443b      	add	r3, r7
 800359e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80035a2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80035a4:	e020      	b.n	80035e8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80035a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035a8:	3301      	adds	r3, #1
 80035aa:	643b      	str	r3, [r7, #64]	; 0x40
 80035ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ae:	2b03      	cmp	r3, #3
 80035b0:	d9e8      	bls.n	8003584 <RCC_SetFlashLatency+0x40>
 80035b2:	e019      	b.n	80035e8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80035b4:	2300      	movs	r3, #0
 80035b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035b8:	e013      	b.n	80035e2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80035ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	3348      	adds	r3, #72	; 0x48
 80035c0:	443b      	add	r3, r7
 80035c2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d807      	bhi.n	80035dc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80035cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	3348      	adds	r3, #72	; 0x48
 80035d2:	443b      	add	r3, r7
 80035d4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80035d8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80035da:	e005      	b.n	80035e8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80035dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035de:	3301      	adds	r3, #1
 80035e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d9e8      	bls.n	80035ba <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80035e8:	4b13      	ldr	r3, [pc, #76]	; (8003638 <RCC_SetFlashLatency+0xf4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f023 0207 	bic.w	r2, r3, #7
 80035f0:	4911      	ldr	r1, [pc, #68]	; (8003638 <RCC_SetFlashLatency+0xf4>)
 80035f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035f4:	4313      	orrs	r3, r2
 80035f6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80035f8:	f7fe fa8c 	bl	8001b14 <HAL_GetTick>
 80035fc:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80035fe:	e008      	b.n	8003612 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003600:	f7fe fa88 	bl	8001b14 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e007      	b.n	8003622 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003612:	4b09      	ldr	r3, [pc, #36]	; (8003638 <RCC_SetFlashLatency+0xf4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800361c:	429a      	cmp	r2, r3
 800361e:	d1ef      	bne.n	8003600 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	374c      	adds	r7, #76	; 0x4c
 8003626:	46bd      	mov	sp, r7
 8003628:	bd90      	pop	{r4, r7, pc}
 800362a:	bf00      	nop
 800362c:	080076e4 	.word	0x080076e4
 8003630:	080076f4 	.word	0x080076f4
 8003634:	08007700 	.word	0x08007700
 8003638:	58004000 	.word	0x58004000

0800363c <LL_RCC_LSE_IsEnabled>:
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <LL_RCC_LSE_IsEnabled+0x18>
 8003650:	2301      	movs	r3, #1
 8003652:	e000      	b.n	8003656 <LL_RCC_LSE_IsEnabled+0x1a>
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <LL_RCC_LSE_IsReady>:
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b02      	cmp	r3, #2
 8003672:	d101      	bne.n	8003678 <LL_RCC_LSE_IsReady+0x18>
 8003674:	2301      	movs	r3, #1
 8003676:	e000      	b.n	800367a <LL_RCC_LSE_IsReady+0x1a>
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <LL_RCC_SetRFWKPClockSource>:
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800368c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003694:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003698:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <LL_RCC_SetSMPSClockSource>:
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80036b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	f023 0203 	bic.w	r2, r3, #3
 80036c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	624b      	str	r3, [r1, #36]	; 0x24
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <LL_RCC_SetSMPSPrescaler>:
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80036e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <LL_RCC_SetUSARTClockSource>:
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800370c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003710:	f023 0203 	bic.w	r2, r3, #3
 8003714:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4313      	orrs	r3, r2
 800371c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <LL_RCC_SetLPUARTClockSource>:
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003740:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <LL_RCC_SetI2CClockSource>:
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003764:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	091b      	lsrs	r3, r3, #4
 800376c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003770:	43db      	mvns	r3, r3
 8003772:	401a      	ands	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800377c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <LL_RCC_SetLPTIMClockSource>:
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800379a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800379e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	0c1b      	lsrs	r3, r3, #16
 80037a6:	041b      	lsls	r3, r3, #16
 80037a8:	43db      	mvns	r3, r3
 80037aa:	401a      	ands	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	041b      	lsls	r3, r3, #16
 80037b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <LL_RCC_SetSAIClockSource>:
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80037ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <LL_RCC_SetRNGClockSource>:
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80037fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003802:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003806:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <LL_RCC_SetCLK48ClockSource>:
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800382a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003832:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <LL_RCC_SetUSBClockSource>:
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b082      	sub	sp, #8
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7ff ffe3 	bl	800381e <LL_RCC_SetCLK48ClockSource>
}
 8003858:	bf00      	nop
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <LL_RCC_SetADCClockSource>:
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800386c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003870:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003874:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <LL_RCC_SetRTCClockSource>:
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <LL_RCC_GetRTCClockSource>:
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80038bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <LL_RCC_ForceBackupDomainReset>:
{
 80038d2:	b480      	push	{r7}
 80038d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80038d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80038ea:	bf00      	nop
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <LL_RCC_ReleaseBackupDomainReset>:
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80038f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003900:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003908:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800390c:	bf00      	nop
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <LL_RCC_PLLSAI1_Enable>:
{
 8003916:	b480      	push	{r7}
 8003918:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800391a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003924:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003928:	6013      	str	r3, [r2, #0]
}
 800392a:	bf00      	nop
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <LL_RCC_PLLSAI1_Disable>:
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003942:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003946:	6013      	str	r3, [r2, #0]
}
 8003948:	bf00      	nop
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <LL_RCC_PLLSAI1_IsReady>:
{
 8003952:	b480      	push	{r7}
 8003954:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003960:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003964:	d101      	bne.n	800396a <LL_RCC_PLLSAI1_IsReady+0x18>
 8003966:	2301      	movs	r3, #1
 8003968:	e000      	b.n	800396c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b088      	sub	sp, #32
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800397e:	2300      	movs	r3, #0
 8003980:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003982:	2300      	movs	r3, #0
 8003984:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398e:	2b00      	cmp	r3, #0
 8003990:	d034      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800399a:	d021      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800399c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039a0:	d81b      	bhi.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039a6:	d01d      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80039a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039ac:	d815      	bhi.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00b      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x54>
 80039b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039b6:	d110      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80039b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80039c8:	e00d      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3304      	adds	r3, #4
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 f947 	bl	8003c62 <RCCEx_PLLSAI1_ConfigNP>
 80039d4:	4603      	mov	r3, r0
 80039d6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80039d8:	e005      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	77fb      	strb	r3, [r7, #31]
        break;
 80039de:	e002      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80039e0:	bf00      	nop
 80039e2:	e000      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80039e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e6:	7ffb      	ldrb	r3, [r7, #31]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d105      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff fee8 	bl	80037c6 <LL_RCC_SetSAIClockSource>
 80039f6:	e001      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f8:	7ffb      	ldrb	r3, [r7, #31]
 80039fa:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d046      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003a08:	f7ff ff56 	bl	80038b8 <LL_RCC_GetRTCClockSource>
 8003a0c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d03c      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003a18:	f7fe fc92 	bl	8002340 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d105      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff ff30 	bl	800388c <LL_RCC_SetRTCClockSource>
 8003a2c:	e02e      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a36:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003a38:	f7ff ff4b 	bl	80038d2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003a3c:	f7ff ff5a 	bl	80038f4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003a4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003a58:	f7ff fdf0 	bl	800363c <LL_RCC_LSE_IsEnabled>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d114      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a62:	f7fe f857 	bl	8001b14 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003a68:	e00b      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6a:	f7fe f853 	bl	8001b14 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d902      	bls.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	77fb      	strb	r3, [r7, #31]
              break;
 8003a80:	e004      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003a82:	f7ff fded 	bl	8003660 <LL_RCC_LSE_IsReady>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d1ee      	bne.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003a8c:	7ffb      	ldrb	r3, [r7, #31]
 8003a8e:	77bb      	strb	r3, [r7, #30]
 8003a90:	e001      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a92:	7ffb      	ldrb	r3, [r7, #31]
 8003a94:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d004      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff fe2a 	bl	8003700 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d004      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff fe35 	bl	800372c <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0310 	and.w	r3, r3, #16
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d004      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff fe5d 	bl	8003792 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0320 	and.w	r3, r3, #32
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d004      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff fe52 	bl	8003792 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d004      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff fe2a 	bl	8003758 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d004      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff fe1f 	bl	8003758 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d022      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff fe8d 	bl	800384a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b38:	d107      	bne.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b48:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b52:	d10b      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3304      	adds	r3, #4
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 f8dd 	bl	8003d18 <RCCEx_PLLSAI1_ConfigNQ>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003b62:	7ffb      	ldrb	r3, [r7, #31]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8003b68:	7ffb      	ldrb	r3, [r7, #31]
 8003b6a:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d02b      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b80:	d008      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b8a:	d003      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d105      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff fe2a 	bl	80037f2 <LL_RCC_SetRNGClockSource>
 8003b9e:	e00a      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	2000      	movs	r0, #0
 8003bac:	f7ff fe21 	bl	80037f2 <LL_RCC_SetRNGClockSource>
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f7ff fe34 	bl	800381e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bba:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003bbe:	d107      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d022      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff fe3d 	bl	8003860 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bee:	d107      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bfe:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c08:	d10b      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 f8dd 	bl	8003dce <RCCEx_PLLSAI1_ConfigNR>
 8003c14:	4603      	mov	r3, r0
 8003c16:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003c18:	7ffb      	ldrb	r3, [r7, #31]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8003c1e:	7ffb      	ldrb	r3, [r7, #31]
 8003c20:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d004      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff fd26 	bl	8003684 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d009      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff fd45 	bl	80036d8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff fd2c 	bl	80036b0 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8003c58:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3720      	adds	r7, #32
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003c6e:	f7ff fe61 	bl	8003934 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c72:	f7fd ff4f 	bl	8001b14 <HAL_GetTick>
 8003c76:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003c78:	e009      	b.n	8003c8e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c7a:	f7fd ff4b 	bl	8001b14 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d902      	bls.n	8003c8e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c8c:	e004      	b.n	8003c98 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003c8e:	f7ff fe60 	bl	8003952 <LL_RCC_PLLSAI1_IsReady>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1f0      	bne.n	8003c7a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d137      	bne.n	8003d0e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	021b      	lsls	r3, r3, #8
 8003cae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003ccc:	f7ff fe23 	bl	8003916 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd0:	f7fd ff20 	bl	8001b14 <HAL_GetTick>
 8003cd4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003cd6:	e009      	b.n	8003cec <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cd8:	f7fd ff1c 	bl	8001b14 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d902      	bls.n	8003cec <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	73fb      	strb	r3, [r7, #15]
        break;
 8003cea:	e004      	b.n	8003cf6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003cec:	f7ff fe31 	bl	8003952 <LL_RCC_PLLSAI1_IsReady>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d1f0      	bne.n	8003cd8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d108      	bne.n	8003d0e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d00:	691a      	ldr	r2, [r3, #16]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003d24:	f7ff fe06 	bl	8003934 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003d28:	f7fd fef4 	bl	8001b14 <HAL_GetTick>
 8003d2c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003d2e:	e009      	b.n	8003d44 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d30:	f7fd fef0 	bl	8001b14 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d902      	bls.n	8003d44 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	73fb      	strb	r3, [r7, #15]
      break;
 8003d42:	e004      	b.n	8003d4e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003d44:	f7ff fe05 	bl	8003952 <LL_RCC_PLLSAI1_IsReady>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d137      	bne.n	8003dc4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	021b      	lsls	r3, r3, #8
 8003d64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003d82:	f7ff fdc8 	bl	8003916 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d86:	f7fd fec5 	bl	8001b14 <HAL_GetTick>
 8003d8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003d8c:	e009      	b.n	8003da2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d8e:	f7fd fec1 	bl	8001b14 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d902      	bls.n	8003da2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	73fb      	strb	r3, [r7, #15]
        break;
 8003da0:	e004      	b.n	8003dac <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003da2:	f7ff fdd6 	bl	8003952 <LL_RCC_PLLSAI1_IsReady>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d1f0      	bne.n	8003d8e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d108      	bne.n	8003dc4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b084      	sub	sp, #16
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003dda:	f7ff fdab 	bl	8003934 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003dde:	f7fd fe99 	bl	8001b14 <HAL_GetTick>
 8003de2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003de4:	e009      	b.n	8003dfa <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003de6:	f7fd fe95 	bl	8001b14 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d902      	bls.n	8003dfa <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	73fb      	strb	r3, [r7, #15]
      break;
 8003df8:	e004      	b.n	8003e04 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003dfa:	f7ff fdaa 	bl	8003952 <LL_RCC_PLLSAI1_IsReady>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1f0      	bne.n	8003de6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d137      	bne.n	8003e7a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	021b      	lsls	r3, r3, #8
 8003e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e34:	4313      	orrs	r3, r2
 8003e36:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003e38:	f7ff fd6d 	bl	8003916 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e3c:	f7fd fe6a 	bl	8001b14 <HAL_GetTick>
 8003e40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003e42:	e009      	b.n	8003e58 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e44:	f7fd fe66 	bl	8001b14 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d902      	bls.n	8003e58 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	73fb      	strb	r3, [r7, #15]
        break;
 8003e56:	e004      	b.n	8003e62 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003e58:	f7ff fd7b 	bl	8003952 <LL_RCC_PLLSAI1_IsReady>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d1f0      	bne.n	8003e44 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d108      	bne.n	8003e7a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e76:	4313      	orrs	r3, r2
 8003e78:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e090      	b.n	8003fb8 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d106      	bne.n	8003eb0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7fd fcc4 	bl	8001838 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	22ca      	movs	r2, #202	; 0xca
 8003ebe:	625a      	str	r2, [r3, #36]	; 0x24
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2253      	movs	r2, #83	; 0x53
 8003ec6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f89f 	bl	800400c <RTC_EnterInitMode>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d009      	beq.n	8003ee8 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	22ff      	movs	r2, #255	; 0xff
 8003eda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2204      	movs	r2, #4
 8003ee0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e067      	b.n	8003fb8 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6812      	ldr	r2, [r2, #0]
 8003ef2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003ef6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003efa:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6899      	ldr	r1, [r3, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	68d2      	ldr	r2, [r2, #12]
 8003f22:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6919      	ldr	r1, [r3, #16]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	041a      	lsls	r2, r3, #16
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f46:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0203 	bic.w	r2, r2, #3
 8003f56:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69da      	ldr	r2, [r3, #28]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d113      	bne.n	8003fa6 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f81e 	bl	8003fc0 <HAL_RTC_WaitForSynchro>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00d      	beq.n	8003fa6 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	22ff      	movs	r2, #255	; 0xff
 8003f90:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2204      	movs	r2, #4
 8003f96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e008      	b.n	8003fb8 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	22ff      	movs	r2, #255	; 0xff
 8003fac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
  }
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fd6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003fd8:	f7fd fd9c 	bl	8001b14 <HAL_GetTick>
 8003fdc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003fde:	e009      	b.n	8003ff4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003fe0:	f7fd fd98 	bl	8001b14 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fee:	d901      	bls.n	8003ff4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e007      	b.n	8004004 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f003 0320 	and.w	r3, r3, #32
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0ee      	beq.n	8003fe0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401e:	2b00      	cmp	r3, #0
 8004020:	d119      	bne.n	8004056 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f04f 32ff 	mov.w	r2, #4294967295
 800402a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800402c:	f7fd fd72 	bl	8001b14 <HAL_GetTick>
 8004030:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004032:	e009      	b.n	8004048 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004034:	f7fd fd6e 	bl	8001b14 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004042:	d901      	bls.n	8004048 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e007      	b.n	8004058 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0ee      	beq.n	8004034 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8004076:	2302      	movs	r3, #2
 8004078:	e0a8      	b.n	80041cc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2202      	movs	r2, #2
 8004086:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	22ca      	movs	r2, #202	; 0xca
 8004090:	625a      	str	r2, [r3, #36]	; 0x24
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2253      	movs	r2, #83	; 0x53
 8004098:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d020      	beq.n	80040ea <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80040a8:	f7fd fd34 	bl	8001b14 <HAL_GetTick>
 80040ac:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80040ae:	e015      	b.n	80040dc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80040b0:	f7fd fd30 	bl	8001b14 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040be:	d90d      	bls.n	80040dc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	22ff      	movs	r2, #255	; 0xff
 80040c6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2203      	movs	r2, #3
 80040cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e077      	b.n	80041cc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f003 0304 	and.w	r3, r3, #4
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1e2      	bne.n	80040b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f8:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	b2da      	uxtb	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800410a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800410c:	f7fd fd02 	bl	8001b14 <HAL_GetTick>
 8004110:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004112:	e015      	b.n	8004140 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004114:	f7fd fcfe 	bl	8001b14 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004122:	d90d      	bls.n	8004140 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	22ff      	movs	r2, #255	; 0xff
 800412a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2203      	movs	r2, #3
 8004130:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e045      	b.n	80041cc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f003 0304 	and.w	r3, r3, #4
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0e2      	beq.n	8004114 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0207 	bic.w	r2, r2, #7
 8004164:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6899      	ldr	r1, [r3, #8]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	430a      	orrs	r2, r1
 8004174:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004176:	4b17      	ldr	r3, [pc, #92]	; (80041d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004178:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800417c:	4a15      	ldr	r2, [pc, #84]	; (80041d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800417e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004182:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004186:	4b13      	ldr	r3, [pc, #76]	; (80041d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a12      	ldr	r2, [pc, #72]	; (80041d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800418c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004190:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041a0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041b0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	22ff      	movs	r2, #255	; 0xff
 80041b8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	58000800 	.word	0x58000800

080041d8 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80041de:	2300      	movs	r3, #0
 80041e0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80041e2:	f107 0308 	add.w	r3, r7, #8
 80041e6:	2218      	movs	r2, #24
 80041e8:	2100      	movs	r1, #0
 80041ea:	4618      	mov	r0, r3
 80041ec:	f001 f8d8 	bl	80053a0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80041f0:	233f      	movs	r3, #63	; 0x3f
 80041f2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80041f4:	2381      	movs	r3, #129	; 0x81
 80041f6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80041f8:	1dfb      	adds	r3, r7, #7
 80041fa:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80041fc:	2301      	movs	r3, #1
 80041fe:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004200:	f107 0308 	add.w	r3, r7, #8
 8004204:	2100      	movs	r1, #0
 8004206:	4618      	mov	r0, r3
 8004208:	f001 fb54 	bl	80058b4 <hci_send_req>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	da01      	bge.n	8004216 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8004212:	23ff      	movs	r3, #255	; 0xff
 8004214:	e000      	b.n	8004218 <aci_gap_set_non_discoverable+0x40>
  return status;
 8004216:	79fb      	ldrb	r3, [r7, #7]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3720      	adds	r7, #32
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8004220:	b5b0      	push	{r4, r5, r7, lr}
 8004222:	b0ce      	sub	sp, #312	; 0x138
 8004224:	af00      	add	r7, sp, #0
 8004226:	4605      	mov	r5, r0
 8004228:	460c      	mov	r4, r1
 800422a:	4610      	mov	r0, r2
 800422c:	4619      	mov	r1, r3
 800422e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004232:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8004236:	462a      	mov	r2, r5
 8004238:	701a      	strb	r2, [r3, #0]
 800423a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800423e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004242:	4622      	mov	r2, r4
 8004244:	801a      	strh	r2, [r3, #0]
 8004246:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800424a:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800424e:	4602      	mov	r2, r0
 8004250:	801a      	strh	r2, [r3, #0]
 8004252:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004256:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800425a:	460a      	mov	r2, r1
 800425c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800425e:	f107 0310 	add.w	r3, r7, #16
 8004262:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8004266:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800426a:	3308      	adds	r3, #8
 800426c:	f107 0210 	add.w	r2, r7, #16
 8004270:	4413      	add	r3, r2
 8004272:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8004276:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800427a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800427e:	4413      	add	r3, r2
 8004280:	3309      	adds	r3, #9
 8004282:	f107 0210 	add.w	r2, r7, #16
 8004286:	4413      	add	r3, r2
 8004288:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800428c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004290:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004294:	2200      	movs	r2, #0
 8004296:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004298:	2300      	movs	r3, #0
 800429a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800429e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80042a2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80042a6:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80042aa:	7812      	ldrb	r2, [r2, #0]
 80042ac:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80042ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80042b2:	3301      	adds	r3, #1
 80042b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80042b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80042bc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80042c0:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80042c4:	8812      	ldrh	r2, [r2, #0]
 80042c6:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80042ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80042ce:	3302      	adds	r3, #2
 80042d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80042d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80042d8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80042dc:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80042e0:	8812      	ldrh	r2, [r2, #0]
 80042e2:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80042e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80042ea:	3302      	adds	r3, #2
 80042ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80042f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80042f4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80042f8:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80042fc:	7812      	ldrb	r2, [r2, #0]
 80042fe:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004300:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004304:	3301      	adds	r3, #1
 8004306:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800430a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800430e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8004312:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8004314:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004318:	3301      	adds	r3, #1
 800431a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800431e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004322:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004326:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8004328:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800432c:	3301      	adds	r3, #1
 800432e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8004332:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004336:	3308      	adds	r3, #8
 8004338:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800433c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8004340:	4618      	mov	r0, r3
 8004342:	f001 f81d 	bl	8005380 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8004346:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800434a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800434e:	4413      	add	r3, r2
 8004350:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8004354:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004358:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800435c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800435e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004362:	3301      	adds	r3, #1
 8004364:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8004368:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800436c:	3301      	adds	r3, #1
 800436e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004372:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8004376:	4618      	mov	r0, r3
 8004378:	f001 f802 	bl	8005380 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800437c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8004380:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004384:	4413      	add	r3, r2
 8004386:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800438a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800438e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8004392:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8004394:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004398:	3302      	adds	r3, #2
 800439a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800439e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043a2:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80043a6:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80043a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043ac:	3302      	adds	r3, #2
 80043ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80043b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80043b6:	2218      	movs	r2, #24
 80043b8:	2100      	movs	r1, #0
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fff0 	bl	80053a0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80043c0:	233f      	movs	r3, #63	; 0x3f
 80043c2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 80043c6:	2383      	movs	r3, #131	; 0x83
 80043c8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80043cc:	f107 0310 	add.w	r3, r7, #16
 80043d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80043d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80043dc:	f107 030f 	add.w	r3, r7, #15
 80043e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80043e4:	2301      	movs	r3, #1
 80043e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80043ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80043ee:	2100      	movs	r1, #0
 80043f0:	4618      	mov	r0, r3
 80043f2:	f001 fa5f 	bl	80058b4 <hci_send_req>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	da01      	bge.n	8004400 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80043fc:	23ff      	movs	r3, #255	; 0xff
 80043fe:	e004      	b.n	800440a <aci_gap_set_discoverable+0x1ea>
  return status;
 8004400:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004404:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004408:	781b      	ldrb	r3, [r3, #0]
}
 800440a:	4618      	mov	r0, r3
 800440c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8004410:	46bd      	mov	sp, r7
 8004412:	bdb0      	pop	{r4, r5, r7, pc}

08004414 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b0cc      	sub	sp, #304	; 0x130
 8004418:	af00      	add	r7, sp, #0
 800441a:	4602      	mov	r2, r0
 800441c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004420:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004424:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8004426:	f107 0310 	add.w	r3, r7, #16
 800442a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800442e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004432:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004436:	2200      	movs	r2, #0
 8004438:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800443a:	2300      	movs	r3, #0
 800443c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8004440:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004444:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004448:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800444c:	7812      	ldrb	r2, [r2, #0]
 800444e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004450:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004454:	3301      	adds	r3, #1
 8004456:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800445a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800445e:	2218      	movs	r2, #24
 8004460:	2100      	movs	r1, #0
 8004462:	4618      	mov	r0, r3
 8004464:	f000 ff9c 	bl	80053a0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004468:	233f      	movs	r3, #63	; 0x3f
 800446a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800446e:	2385      	movs	r3, #133	; 0x85
 8004470:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004474:	f107 0310 	add.w	r3, r7, #16
 8004478:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800447c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004480:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004484:	f107 030f 	add.w	r3, r7, #15
 8004488:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800448c:	2301      	movs	r3, #1
 800448e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004492:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004496:	2100      	movs	r1, #0
 8004498:	4618      	mov	r0, r3
 800449a:	f001 fa0b 	bl	80058b4 <hci_send_req>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	da01      	bge.n	80044a8 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80044a4:	23ff      	movs	r3, #255	; 0xff
 80044a6:	e004      	b.n	80044b2 <aci_gap_set_io_capability+0x9e>
  return status;
 80044a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044ac:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80044b0:	781b      	ldrb	r3, [r3, #0]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80044bc:	b5b0      	push	{r4, r5, r7, lr}
 80044be:	b0cc      	sub	sp, #304	; 0x130
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	4605      	mov	r5, r0
 80044c4:	460c      	mov	r4, r1
 80044c6:	4610      	mov	r0, r2
 80044c8:	4619      	mov	r1, r3
 80044ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044ce:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80044d2:	462a      	mov	r2, r5
 80044d4:	701a      	strb	r2, [r3, #0]
 80044d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044da:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80044de:	4622      	mov	r2, r4
 80044e0:	701a      	strb	r2, [r3, #0]
 80044e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044e6:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80044ea:	4602      	mov	r2, r0
 80044ec:	701a      	strb	r2, [r3, #0]
 80044ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044f6:	460a      	mov	r2, r1
 80044f8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80044fa:	f107 0310 	add.w	r3, r7, #16
 80044fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004506:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800450a:	2200      	movs	r2, #0
 800450c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800450e:	2300      	movs	r3, #0
 8004510:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8004514:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004518:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800451c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004520:	7812      	ldrb	r2, [r2, #0]
 8004522:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004524:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004528:	3301      	adds	r3, #1
 800452a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800452e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004532:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004536:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800453a:	7812      	ldrb	r2, [r2, #0]
 800453c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800453e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004542:	3301      	adds	r3, #1
 8004544:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8004548:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800454c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004550:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8004554:	7812      	ldrb	r2, [r2, #0]
 8004556:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004558:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800455c:	3301      	adds	r3, #1
 800455e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8004562:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004566:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800456a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800456e:	7812      	ldrb	r2, [r2, #0]
 8004570:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8004572:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004576:	3301      	adds	r3, #1
 8004578:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800457c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004580:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8004584:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8004586:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800458a:	3301      	adds	r3, #1
 800458c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8004590:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004594:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8004598:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800459a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800459e:	3301      	adds	r3, #1
 80045a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80045a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045a8:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80045ac:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80045ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80045b2:	3301      	adds	r3, #1
 80045b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80045b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045bc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80045c0:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80045c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80045c8:	3304      	adds	r3, #4
 80045ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80045ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045d2:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80045d6:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80045d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80045dc:	3301      	adds	r3, #1
 80045de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80045e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80045e6:	2218      	movs	r2, #24
 80045e8:	2100      	movs	r1, #0
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fed8 	bl	80053a0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80045f0:	233f      	movs	r3, #63	; 0x3f
 80045f2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80045f6:	2386      	movs	r3, #134	; 0x86
 80045f8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80045fc:	f107 0310 	add.w	r3, r7, #16
 8004600:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004604:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004608:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800460c:	f107 030f 	add.w	r3, r7, #15
 8004610:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004614:	2301      	movs	r3, #1
 8004616:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800461a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800461e:	2100      	movs	r1, #0
 8004620:	4618      	mov	r0, r3
 8004622:	f001 f947 	bl	80058b4 <hci_send_req>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	da01      	bge.n	8004630 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800462c:	23ff      	movs	r3, #255	; 0xff
 800462e:	e004      	b.n	800463a <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8004630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004634:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004638:	781b      	ldrb	r3, [r3, #0]
}
 800463a:	4618      	mov	r0, r3
 800463c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004640:	46bd      	mov	sp, r7
 8004642:	bdb0      	pop	{r4, r5, r7, pc}

08004644 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b0cc      	sub	sp, #304	; 0x130
 8004648:	af00      	add	r7, sp, #0
 800464a:	4602      	mov	r2, r0
 800464c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004650:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004654:	6019      	str	r1, [r3, #0]
 8004656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800465a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800465e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8004660:	f107 0310 	add.w	r3, r7, #16
 8004664:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800466c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004670:	2200      	movs	r2, #0
 8004672:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004674:	2300      	movs	r3, #0
 8004676:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800467a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800467e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004682:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004686:	8812      	ldrh	r2, [r2, #0]
 8004688:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800468a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800468e:	3302      	adds	r3, #2
 8004690:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8004694:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004698:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800469c:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80046a0:	6812      	ldr	r2, [r2, #0]
 80046a2:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80046a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80046aa:	3304      	adds	r3, #4
 80046ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80046b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80046b4:	2218      	movs	r2, #24
 80046b6:	2100      	movs	r1, #0
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 fe71 	bl	80053a0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80046be:	233f      	movs	r3, #63	; 0x3f
 80046c0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 80046c4:	2388      	movs	r3, #136	; 0x88
 80046c6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80046ca:	f107 0310 	add.w	r3, r7, #16
 80046ce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80046d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80046d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80046da:	f107 030f 	add.w	r3, r7, #15
 80046de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80046e2:	2301      	movs	r3, #1
 80046e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80046e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80046ec:	2100      	movs	r1, #0
 80046ee:	4618      	mov	r0, r3
 80046f0:	f001 f8e0 	bl	80058b4 <hci_send_req>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	da01      	bge.n	80046fe <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 80046fa:	23ff      	movs	r3, #255	; 0xff
 80046fc:	e004      	b.n	8004708 <aci_gap_pass_key_resp+0xc4>
  return status;
 80046fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004702:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004706:	781b      	ldrb	r3, [r3, #0]
}
 8004708:	4618      	mov	r0, r3
 800470a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8004712:	b590      	push	{r4, r7, lr}
 8004714:	b0cd      	sub	sp, #308	; 0x134
 8004716:	af00      	add	r7, sp, #0
 8004718:	4604      	mov	r4, r0
 800471a:	4608      	mov	r0, r1
 800471c:	4611      	mov	r1, r2
 800471e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004722:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800472c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004730:	4622      	mov	r2, r4
 8004732:	701a      	strb	r2, [r3, #0]
 8004734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004738:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800473c:	4602      	mov	r2, r0
 800473e:	701a      	strb	r2, [r3, #0]
 8004740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004744:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8004748:	460a      	mov	r2, r1
 800474a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800474c:	f107 0310 	add.w	r3, r7, #16
 8004750:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8004754:	f107 0308 	add.w	r3, r7, #8
 8004758:	2207      	movs	r2, #7
 800475a:	2100      	movs	r1, #0
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fe1f 	bl	80053a0 <Osal_MemSet>
  int index_input = 0;
 8004762:	2300      	movs	r3, #0
 8004764:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8004768:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800476c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004770:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004774:	7812      	ldrb	r2, [r2, #0]
 8004776:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004778:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800477c:	3301      	adds	r3, #1
 800477e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8004782:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004786:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800478a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800478e:	7812      	ldrb	r2, [r2, #0]
 8004790:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004792:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004796:	3301      	adds	r3, #1
 8004798:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800479c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80047a4:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80047a8:	7812      	ldrb	r2, [r2, #0]
 80047aa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80047ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80047b0:	3301      	adds	r3, #1
 80047b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80047b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80047ba:	2218      	movs	r2, #24
 80047bc:	2100      	movs	r1, #0
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 fdee 	bl	80053a0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80047c4:	233f      	movs	r3, #63	; 0x3f
 80047c6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80047ca:	238a      	movs	r3, #138	; 0x8a
 80047cc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80047d0:	f107 0310 	add.w	r3, r7, #16
 80047d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80047d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80047dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80047e0:	f107 0308 	add.w	r3, r7, #8
 80047e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80047e8:	2307      	movs	r3, #7
 80047ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80047ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80047f2:	2100      	movs	r1, #0
 80047f4:	4618      	mov	r0, r3
 80047f6:	f001 f85d 	bl	80058b4 <hci_send_req>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	da01      	bge.n	8004804 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8004800:	23ff      	movs	r3, #255	; 0xff
 8004802:	e02e      	b.n	8004862 <aci_gap_init+0x150>
  if ( resp.Status )
 8004804:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004808:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d005      	beq.n	800481e <aci_gap_init+0x10c>
    return resp.Status;
 8004812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004816:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	e021      	b.n	8004862 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800481e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004822:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004826:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800482a:	b29a      	uxth	r2, r3
 800482c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004830:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8004838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800483c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004840:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8004844:	b29a      	uxth	r2, r3
 8004846:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800484a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800484c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004850:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004854:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004858:	b29a      	uxth	r2, r3
 800485a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800485e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8004868:	46bd      	mov	sp, r7
 800486a:	bd90      	pop	{r4, r7, pc}

0800486c <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b0cc      	sub	sp, #304	; 0x130
 8004870:	af00      	add	r7, sp, #0
 8004872:	4602      	mov	r2, r0
 8004874:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004878:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800487c:	6019      	str	r1, [r3, #0]
 800487e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004882:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004886:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8004888:	f107 0310 	add.w	r3, r7, #16
 800488c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004894:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004898:	2200      	movs	r2, #0
 800489a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800489c:	2300      	movs	r3, #0
 800489e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 80048a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80048aa:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80048ae:	7812      	ldrb	r2, [r2, #0]
 80048b0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80048b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80048b6:	3301      	adds	r3, #1
 80048b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80048bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048c0:	1c58      	adds	r0, r3, #1
 80048c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048c6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80048ca:	781a      	ldrb	r2, [r3, #0]
 80048cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048d4:	6819      	ldr	r1, [r3, #0]
 80048d6:	f000 fd53 	bl	8005380 <Osal_MemCpy>
  index_input += AdvDataLen;
 80048da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048de:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80048e8:	4413      	add	r3, r2
 80048ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80048ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048f2:	2218      	movs	r2, #24
 80048f4:	2100      	movs	r1, #0
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fd52 	bl	80053a0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80048fc:	233f      	movs	r3, #63	; 0x3f
 80048fe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8004902:	238e      	movs	r3, #142	; 0x8e
 8004904:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004908:	f107 0310 	add.w	r3, r7, #16
 800490c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004910:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004914:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004918:	f107 030f 	add.w	r3, r7, #15
 800491c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004920:	2301      	movs	r3, #1
 8004922:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004926:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800492a:	2100      	movs	r1, #0
 800492c:	4618      	mov	r0, r3
 800492e:	f000 ffc1 	bl	80058b4 <hci_send_req>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	da01      	bge.n	800493c <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8004938:	23ff      	movs	r3, #255	; 0xff
 800493a:	e004      	b.n	8004946 <aci_gap_update_adv_data+0xda>
  return status;
 800493c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004940:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004944:	781b      	ldrb	r3, [r3, #0]
}
 8004946:	4618      	mov	r0, r3
 8004948:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b088      	sub	sp, #32
 8004954:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004956:	2300      	movs	r3, #0
 8004958:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800495a:	f107 0308 	add.w	r3, r7, #8
 800495e:	2218      	movs	r2, #24
 8004960:	2100      	movs	r1, #0
 8004962:	4618      	mov	r0, r3
 8004964:	f000 fd1c 	bl	80053a0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004968:	233f      	movs	r3, #63	; 0x3f
 800496a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800496c:	2392      	movs	r3, #146	; 0x92
 800496e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004970:	1dfb      	adds	r3, r7, #7
 8004972:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004974:	2301      	movs	r3, #1
 8004976:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004978:	f107 0308 	add.w	r3, r7, #8
 800497c:	2100      	movs	r1, #0
 800497e:	4618      	mov	r0, r3
 8004980:	f000 ff98 	bl	80058b4 <hci_send_req>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	da01      	bge.n	800498e <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800498a:	23ff      	movs	r3, #255	; 0xff
 800498c:	e000      	b.n	8004990 <aci_gap_configure_whitelist+0x40>
  return status;
 800498e:	79fb      	ldrb	r3, [r7, #7]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3720      	adds	r7, #32
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b0cc      	sub	sp, #304	; 0x130
 800499c:	af00      	add	r7, sp, #0
 800499e:	4602      	mov	r2, r0
 80049a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049a4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80049a8:	801a      	strh	r2, [r3, #0]
 80049aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ae:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80049b2:	460a      	mov	r2, r1
 80049b4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80049b6:	f107 0310 	add.w	r3, r7, #16
 80049ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80049be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049c2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80049c6:	2200      	movs	r2, #0
 80049c8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80049ca:	2300      	movs	r3, #0
 80049cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80049d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80049d8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80049dc:	8812      	ldrh	r2, [r2, #0]
 80049de:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80049e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049e4:	3302      	adds	r3, #2
 80049e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80049ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80049f2:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80049f6:	7812      	ldrb	r2, [r2, #0]
 80049f8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80049fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049fe:	3301      	adds	r3, #1
 8004a00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004a04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a08:	2218      	movs	r2, #24
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 fcc7 	bl	80053a0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004a12:	233f      	movs	r3, #63	; 0x3f
 8004a14:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8004a18:	23a5      	movs	r3, #165	; 0xa5
 8004a1a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004a1e:	f107 0310 	add.w	r3, r7, #16
 8004a22:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004a26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a2a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004a2e:	f107 030f 	add.w	r3, r7, #15
 8004a32:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004a36:	2301      	movs	r3, #1
 8004a38:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004a3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a40:	2100      	movs	r1, #0
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 ff36 	bl	80058b4 <hci_send_req>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	da01      	bge.n	8004a52 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8004a4e:	23ff      	movs	r3, #255	; 0xff
 8004a50:	e004      	b.n	8004a5c <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8004a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a56:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004a5a:	781b      	ldrb	r3, [r3, #0]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b088      	sub	sp, #32
 8004a6a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004a70:	f107 0308 	add.w	r3, r7, #8
 8004a74:	2218      	movs	r2, #24
 8004a76:	2100      	movs	r1, #0
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 fc91 	bl	80053a0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004a7e:	233f      	movs	r3, #63	; 0x3f
 8004a80:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8004a82:	f240 1301 	movw	r3, #257	; 0x101
 8004a86:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004a88:	1dfb      	adds	r3, r7, #7
 8004a8a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004a90:	f107 0308 	add.w	r3, r7, #8
 8004a94:	2100      	movs	r1, #0
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 ff0c 	bl	80058b4 <hci_send_req>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	da01      	bge.n	8004aa6 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8004aa2:	23ff      	movs	r3, #255	; 0xff
 8004aa4:	e000      	b.n	8004aa8 <aci_gatt_init+0x42>
  return status;
 8004aa6:	79fb      	ldrb	r3, [r7, #7]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3720      	adds	r7, #32
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8004ab0:	b590      	push	{r4, r7, lr}
 8004ab2:	b0cf      	sub	sp, #316	; 0x13c
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	4604      	mov	r4, r0
 8004ab8:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8004abc:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8004ac0:	6001      	str	r1, [r0, #0]
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004aca:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8004ace:	4622      	mov	r2, r4
 8004ad0:	701a      	strb	r2, [r3, #0]
 8004ad2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004ad6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8004ada:	4602      	mov	r2, r0
 8004adc:	701a      	strb	r2, [r3, #0]
 8004ade:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004ae2:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8004ae6:	460a      	mov	r2, r1
 8004ae8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8004aea:	f107 0310 	add.w	r3, r7, #16
 8004aee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8004af2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004af6:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d00a      	beq.n	8004b16 <aci_gatt_add_service+0x66>
 8004b00:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004b04:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d101      	bne.n	8004b12 <aci_gatt_add_service+0x62>
 8004b0e:	2311      	movs	r3, #17
 8004b10:	e002      	b.n	8004b18 <aci_gatt_add_service+0x68>
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <aci_gatt_add_service+0x68>
 8004b16:	2303      	movs	r3, #3
 8004b18:	f107 0210 	add.w	r2, r7, #16
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8004b22:	f107 030c 	add.w	r3, r7, #12
 8004b26:	2203      	movs	r2, #3
 8004b28:	2100      	movs	r1, #0
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fc38 	bl	80053a0 <Osal_MemSet>
  int index_input = 0;
 8004b30:	2300      	movs	r3, #0
 8004b32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8004b36:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004b3a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004b3e:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8004b42:	7812      	ldrb	r2, [r2, #0]
 8004b44:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004b46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8004b50:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004b54:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d002      	beq.n	8004b64 <aci_gatt_add_service+0xb4>
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d004      	beq.n	8004b6c <aci_gatt_add_service+0xbc>
 8004b62:	e007      	b.n	8004b74 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8004b64:	2302      	movs	r3, #2
 8004b66:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8004b6a:	e005      	b.n	8004b78 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8004b6c:	2310      	movs	r3, #16
 8004b6e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8004b72:	e001      	b.n	8004b78 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8004b74:	2397      	movs	r3, #151	; 0x97
 8004b76:	e06c      	b.n	8004c52 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8004b78:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004b7c:	1c58      	adds	r0, r3, #1
 8004b7e:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8004b82:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004b86:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004b8a:	6819      	ldr	r1, [r3, #0]
 8004b8c:	f000 fbf8 	bl	8005380 <Osal_MemCpy>
    index_input += size;
 8004b90:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8004b94:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004b98:	4413      	add	r3, r2
 8004b9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8004b9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ba2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004ba6:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8004baa:	7812      	ldrb	r2, [r2, #0]
 8004bac:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8004bae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8004bb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bbc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004bc0:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8004bc4:	7812      	ldrb	r2, [r2, #0]
 8004bc6:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8004bc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004bcc:	3301      	adds	r3, #1
 8004bce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004bd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004bd6:	2218      	movs	r2, #24
 8004bd8:	2100      	movs	r1, #0
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 fbe0 	bl	80053a0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004be0:	233f      	movs	r3, #63	; 0x3f
 8004be2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8004be6:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004bea:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004bee:	f107 0310 	add.w	r3, r7, #16
 8004bf2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004bf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004bfa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8004bfe:	f107 030c 	add.w	r3, r7, #12
 8004c02:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8004c06:	2303      	movs	r3, #3
 8004c08:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004c0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c10:	2100      	movs	r1, #0
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fe4e 	bl	80058b4 <hci_send_req>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	da01      	bge.n	8004c22 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8004c1e:	23ff      	movs	r3, #255	; 0xff
 8004c20:	e017      	b.n	8004c52 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8004c22:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004c26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d005      	beq.n	8004c3c <aci_gatt_add_service+0x18c>
    return resp.Status;
 8004c30:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004c34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	e00a      	b.n	8004c52 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8004c3c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004c40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c44:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004c4e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd90      	pop	{r4, r7, pc}

08004c5c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8004c5c:	b590      	push	{r4, r7, lr}
 8004c5e:	b0d1      	sub	sp, #324	; 0x144
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	4604      	mov	r4, r0
 8004c64:	4608      	mov	r0, r1
 8004c66:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8004c6a:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8004c6e:	600a      	str	r2, [r1, #0]
 8004c70:	4619      	mov	r1, r3
 8004c72:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004c76:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8004c7a:	4622      	mov	r2, r4
 8004c7c:	801a      	strh	r2, [r3, #0]
 8004c7e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004c82:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8004c86:	4602      	mov	r2, r0
 8004c88:	701a      	strb	r2, [r3, #0]
 8004c8a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004c8e:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8004c92:	460a      	mov	r2, r1
 8004c94:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8004c96:	f107 0318 	add.w	r3, r7, #24
 8004c9a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8004c9e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004ca2:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d00a      	beq.n	8004cc2 <aci_gatt_add_char+0x66>
 8004cac:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004cb0:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d101      	bne.n	8004cbe <aci_gatt_add_char+0x62>
 8004cba:	2313      	movs	r3, #19
 8004cbc:	e002      	b.n	8004cc4 <aci_gatt_add_char+0x68>
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e000      	b.n	8004cc4 <aci_gatt_add_char+0x68>
 8004cc2:	2305      	movs	r3, #5
 8004cc4:	f107 0218 	add.w	r2, r7, #24
 8004cc8:	4413      	add	r3, r2
 8004cca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8004cce:	f107 0314 	add.w	r3, r7, #20
 8004cd2:	2203      	movs	r2, #3
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fb62 	bl	80053a0 <Osal_MemSet>
  int index_input = 0;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8004ce2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004ce6:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8004cea:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8004cee:	8812      	ldrh	r2, [r2, #0]
 8004cf0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004cf2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004cf6:	3302      	adds	r3, #2
 8004cf8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8004cfc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004d00:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8004d04:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8004d08:	7812      	ldrb	r2, [r2, #0]
 8004d0a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004d0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d10:	3301      	adds	r3, #1
 8004d12:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8004d16:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004d1a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d002      	beq.n	8004d2a <aci_gatt_add_char+0xce>
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d004      	beq.n	8004d32 <aci_gatt_add_char+0xd6>
 8004d28:	e007      	b.n	8004d3a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8004d30:	e005      	b.n	8004d3e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8004d32:	2310      	movs	r3, #16
 8004d34:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8004d38:	e001      	b.n	8004d3e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8004d3a:	2397      	movs	r3, #151	; 0x97
 8004d3c:	e091      	b.n	8004e62 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8004d3e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004d42:	1cd8      	adds	r0, r3, #3
 8004d44:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8004d48:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004d4c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004d50:	6819      	ldr	r1, [r3, #0]
 8004d52:	f000 fb15 	bl	8005380 <Osal_MemCpy>
    index_input += size;
 8004d56:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8004d5a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004d5e:	4413      	add	r3, r2
 8004d60:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8004d64:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d68:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8004d6c:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8004d70:	8812      	ldrh	r2, [r2, #0]
 8004d72:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8004d74:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d78:	3302      	adds	r3, #2
 8004d7a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8004d7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d82:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8004d86:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8004d88:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8004d92:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d96:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004d9a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8004d9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004da0:	3301      	adds	r3, #1
 8004da2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8004da6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004daa:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8004dae:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8004db0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004db4:	3301      	adds	r3, #1
 8004db6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8004dba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004dbe:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8004dc2:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8004dc4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004dc8:	3301      	adds	r3, #1
 8004dca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8004dce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004dd2:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8004dd6:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8004dd8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004ddc:	3301      	adds	r3, #1
 8004dde:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004de2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004de6:	2218      	movs	r2, #24
 8004de8:	2100      	movs	r1, #0
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fad8 	bl	80053a0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004df0:	233f      	movs	r3, #63	; 0x3f
 8004df2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8004df6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004dfa:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8004dfe:	f107 0318 	add.w	r3, r7, #24
 8004e02:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8004e06:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004e0a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8004e0e:	f107 0314 	add.w	r3, r7, #20
 8004e12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8004e16:	2303      	movs	r3, #3
 8004e18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004e1c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004e20:	2100      	movs	r1, #0
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fd46 	bl	80058b4 <hci_send_req>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	da01      	bge.n	8004e32 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8004e2e:	23ff      	movs	r3, #255	; 0xff
 8004e30:	e017      	b.n	8004e62 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8004e32:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004e36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d005      	beq.n	8004e4c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8004e40:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004e44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	e00a      	b.n	8004e62 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8004e4c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004e50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e54:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004e5e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd90      	pop	{r4, r7, pc}

08004e6c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8004e6c:	b5b0      	push	{r4, r5, r7, lr}
 8004e6e:	b0cc      	sub	sp, #304	; 0x130
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	4605      	mov	r5, r0
 8004e74:	460c      	mov	r4, r1
 8004e76:	4610      	mov	r0, r2
 8004e78:	4619      	mov	r1, r3
 8004e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e7e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004e82:	462a      	mov	r2, r5
 8004e84:	801a      	strh	r2, [r3, #0]
 8004e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e8e:	4622      	mov	r2, r4
 8004e90:	801a      	strh	r2, [r3, #0]
 8004e92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e96:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	701a      	strb	r2, [r3, #0]
 8004e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea2:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004ea6:	460a      	mov	r2, r1
 8004ea8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8004eaa:	f107 0310 	add.w	r3, r7, #16
 8004eae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eb6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004eba:	2200      	movs	r2, #0
 8004ebc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8004ec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ec8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004ecc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004ed0:	8812      	ldrh	r2, [r2, #0]
 8004ed2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004ed4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ed8:	3302      	adds	r3, #2
 8004eda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8004ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ee2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004ee6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004eea:	8812      	ldrh	r2, [r2, #0]
 8004eec:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8004eee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ef2:	3302      	adds	r3, #2
 8004ef4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8004ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004efc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f00:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8004f04:	7812      	ldrb	r2, [r2, #0]
 8004f06:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8004f08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8004f12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f16:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f1a:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8004f1e:	7812      	ldrb	r2, [r2, #0]
 8004f20:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004f22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f26:	3301      	adds	r3, #1
 8004f28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8004f2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f30:	1d98      	adds	r0, r3, #6
 8004f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f36:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004f42:	f000 fa1d 	bl	8005380 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8004f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f4a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004f54:	4413      	add	r3, r2
 8004f56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004f5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f5e:	2218      	movs	r2, #24
 8004f60:	2100      	movs	r1, #0
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fa1c 	bl	80053a0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004f68:	233f      	movs	r3, #63	; 0x3f
 8004f6a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8004f6e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8004f72:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004f76:	f107 0310 	add.w	r3, r7, #16
 8004f7a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004f7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f82:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004f86:	f107 030f 	add.w	r3, r7, #15
 8004f8a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004f94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f98:	2100      	movs	r1, #0
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 fc8a 	bl	80058b4 <hci_send_req>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	da01      	bge.n	8004faa <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8004fa6:	23ff      	movs	r3, #255	; 0xff
 8004fa8:	e004      	b.n	8004fb4 <aci_gatt_update_char_value+0x148>
  return status;
 8004faa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fae:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004fb2:	781b      	ldrb	r3, [r3, #0]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bdb0      	pop	{r4, r5, r7, pc}

08004fbe <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b0cc      	sub	sp, #304	; 0x130
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fd2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	701a      	strb	r2, [r3, #0]
 8004fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fde:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004fe2:	460a      	mov	r2, r1
 8004fe4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8004fe6:	f107 0310 	add.w	r3, r7, #16
 8004fea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8005000:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005004:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005008:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800500c:	7812      	ldrb	r2, [r2, #0]
 800500e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005010:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005014:	3301      	adds	r3, #1
 8005016:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800501a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800501e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005022:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005026:	7812      	ldrb	r2, [r2, #0]
 8005028:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800502a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800502e:	3301      	adds	r3, #1
 8005030:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8005034:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005038:	1c98      	adds	r0, r3, #2
 800503a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800503e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005042:	781a      	ldrb	r2, [r3, #0]
 8005044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005048:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800504c:	6819      	ldr	r1, [r3, #0]
 800504e:	f000 f997 	bl	8005380 <Osal_MemCpy>
  index_input += Length;
 8005052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005056:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005060:	4413      	add	r3, r2
 8005062:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005066:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800506a:	2218      	movs	r2, #24
 800506c:	2100      	movs	r1, #0
 800506e:	4618      	mov	r0, r3
 8005070:	f000 f996 	bl	80053a0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005074:	233f      	movs	r3, #63	; 0x3f
 8005076:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800507a:	230c      	movs	r3, #12
 800507c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005080:	f107 0310 	add.w	r3, r7, #16
 8005084:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005088:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800508c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005090:	f107 030f 	add.w	r3, r7, #15
 8005094:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005098:	2301      	movs	r3, #1
 800509a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800509e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80050a2:	2100      	movs	r1, #0
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 fc05 	bl	80058b4 <hci_send_req>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	da01      	bge.n	80050b4 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80050b0:	23ff      	movs	r3, #255	; 0xff
 80050b2:	e004      	b.n	80050be <aci_hal_write_config_data+0x100>
  return status;
 80050b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050b8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80050bc:	781b      	ldrb	r3, [r3, #0]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b0cc      	sub	sp, #304	; 0x130
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	4602      	mov	r2, r0
 80050d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80050d8:	701a      	strb	r2, [r3, #0]
 80050da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050de:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80050e2:	460a      	mov	r2, r1
 80050e4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80050e6:	f107 0310 	add.w	r3, r7, #16
 80050ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80050ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050f2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80050f6:	2200      	movs	r2, #0
 80050f8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80050fa:	2300      	movs	r3, #0
 80050fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8005100:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005104:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005108:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800510c:	7812      	ldrb	r2, [r2, #0]
 800510e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005110:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005114:	3301      	adds	r3, #1
 8005116:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800511a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800511e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005122:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005126:	7812      	ldrb	r2, [r2, #0]
 8005128:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800512a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800512e:	3301      	adds	r3, #1
 8005130:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005134:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005138:	2218      	movs	r2, #24
 800513a:	2100      	movs	r1, #0
 800513c:	4618      	mov	r0, r3
 800513e:	f000 f92f 	bl	80053a0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005142:	233f      	movs	r3, #63	; 0x3f
 8005144:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8005148:	230f      	movs	r3, #15
 800514a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800514e:	f107 0310 	add.w	r3, r7, #16
 8005152:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005156:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800515a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800515e:	f107 030f 	add.w	r3, r7, #15
 8005162:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005166:	2301      	movs	r3, #1
 8005168:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800516c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005170:	2100      	movs	r1, #0
 8005172:	4618      	mov	r0, r3
 8005174:	f000 fb9e 	bl	80058b4 <hci_send_req>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	da01      	bge.n	8005182 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800517e:	23ff      	movs	r3, #255	; 0xff
 8005180:	e004      	b.n	800518c <aci_hal_set_tx_power_level+0xc4>
  return status;
 8005182:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005186:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800518a:	781b      	ldrb	r3, [r3, #0]
}
 800518c:	4618      	mov	r0, r3
 800518e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b0cc      	sub	sp, #304	; 0x130
 800519a:	af00      	add	r7, sp, #0
 800519c:	4602      	mov	r2, r0
 800519e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80051a6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80051a8:	f107 0310 	add.w	r3, r7, #16
 80051ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80051b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80051b8:	2200      	movs	r2, #0
 80051ba:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80051bc:	2300      	movs	r3, #0
 80051be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80051c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80051ca:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80051ce:	8812      	ldrh	r2, [r2, #0]
 80051d0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80051d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80051d6:	3302      	adds	r3, #2
 80051d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80051dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051e0:	2218      	movs	r2, #24
 80051e2:	2100      	movs	r1, #0
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 f8db 	bl	80053a0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80051ea:	233f      	movs	r3, #63	; 0x3f
 80051ec:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 80051f0:	2318      	movs	r3, #24
 80051f2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80051f6:	f107 0310 	add.w	r3, r7, #16
 80051fa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80051fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005202:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005206:	f107 030f 	add.w	r3, r7, #15
 800520a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800520e:	2301      	movs	r3, #1
 8005210:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005214:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005218:	2100      	movs	r1, #0
 800521a:	4618      	mov	r0, r3
 800521c:	f000 fb4a 	bl	80058b4 <hci_send_req>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	da01      	bge.n	800522a <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8005226:	23ff      	movs	r3, #255	; 0xff
 8005228:	e004      	b.n	8005234 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800522a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800522e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005232:	781b      	ldrb	r3, [r3, #0]
}
 8005234:	4618      	mov	r0, r3
 8005236:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b088      	sub	sp, #32
 8005242:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005244:	2300      	movs	r3, #0
 8005246:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005248:	f107 0308 	add.w	r3, r7, #8
 800524c:	2218      	movs	r2, #24
 800524e:	2100      	movs	r1, #0
 8005250:	4618      	mov	r0, r3
 8005252:	f000 f8a5 	bl	80053a0 <Osal_MemSet>
  rq.ogf = 0x03;
 8005256:	2303      	movs	r3, #3
 8005258:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800525a:	2303      	movs	r3, #3
 800525c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800525e:	1dfb      	adds	r3, r7, #7
 8005260:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005262:	2301      	movs	r3, #1
 8005264:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005266:	f107 0308 	add.w	r3, r7, #8
 800526a:	2100      	movs	r1, #0
 800526c:	4618      	mov	r0, r3
 800526e:	f000 fb21 	bl	80058b4 <hci_send_req>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	da01      	bge.n	800527c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005278:	23ff      	movs	r3, #255	; 0xff
 800527a:	e000      	b.n	800527e <hci_reset+0x40>
  return status;
 800527c:	79fb      	ldrb	r3, [r7, #7]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3720      	adds	r7, #32
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8005286:	b590      	push	{r4, r7, lr}
 8005288:	b0cd      	sub	sp, #308	; 0x134
 800528a:	af00      	add	r7, sp, #0
 800528c:	4604      	mov	r4, r0
 800528e:	4608      	mov	r0, r1
 8005290:	4611      	mov	r1, r2
 8005292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005296:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800529a:	4622      	mov	r2, r4
 800529c:	701a      	strb	r2, [r3, #0]
 800529e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052a2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80052a6:	4602      	mov	r2, r0
 80052a8:	701a      	strb	r2, [r3, #0]
 80052aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ae:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80052b2:	460a      	mov	r2, r1
 80052b4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80052b6:	f107 0310 	add.w	r3, r7, #16
 80052ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80052be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80052c6:	2200      	movs	r2, #0
 80052c8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80052ca:	2300      	movs	r3, #0
 80052cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80052d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80052d8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80052dc:	7812      	ldrb	r2, [r2, #0]
 80052de:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80052e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80052e4:	3301      	adds	r3, #1
 80052e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 80052ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80052f2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80052f6:	7812      	ldrb	r2, [r2, #0]
 80052f8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80052fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80052fe:	3301      	adds	r3, #1
 8005300:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8005304:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005308:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800530c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8005310:	7812      	ldrb	r2, [r2, #0]
 8005312:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005314:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005318:	3301      	adds	r3, #1
 800531a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800531e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005322:	2218      	movs	r2, #24
 8005324:	2100      	movs	r1, #0
 8005326:	4618      	mov	r0, r3
 8005328:	f000 f83a 	bl	80053a0 <Osal_MemSet>
  rq.ogf = 0x08;
 800532c:	2308      	movs	r3, #8
 800532e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8005332:	2331      	movs	r3, #49	; 0x31
 8005334:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005338:	f107 0310 	add.w	r3, r7, #16
 800533c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005340:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005344:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005348:	f107 030f 	add.w	r3, r7, #15
 800534c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005350:	2301      	movs	r3, #1
 8005352:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005356:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800535a:	2100      	movs	r1, #0
 800535c:	4618      	mov	r0, r3
 800535e:	f000 faa9 	bl	80058b4 <hci_send_req>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	da01      	bge.n	800536c <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8005368:	23ff      	movs	r3, #255	; 0xff
 800536a:	e004      	b.n	8005376 <hci_le_set_default_phy+0xf0>
  return status;
 800536c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005370:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005374:	781b      	ldrb	r3, [r3, #0]
}
 8005376:	4618      	mov	r0, r3
 8005378:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800537c:	46bd      	mov	sp, r7
 800537e:	bd90      	pop	{r4, r7, pc}

08005380 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	68b9      	ldr	r1, [r7, #8]
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f002 f977 	bl	8007684 <memcpy>
 8005396:	4603      	mov	r3, r0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	68b9      	ldr	r1, [r7, #8]
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f002 f975 	bl	80076a0 <memset>
 80053b6:	4603      	mov	r3, r0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  return;
 80053c4:	bf00      	nop
}
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80053ce:	b480      	push	{r7}
 80053d0:	af00      	add	r7, sp, #0
  return;
 80053d2:	bf00      	nop
}
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
  return;
 80053e0:	bf00      	nop
}
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80053ea:	b480      	push	{r7}
 80053ec:	af00      	add	r7, sp, #0
  return;
 80053ee:	bf00      	nop
}
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return;
 80053fc:	bf00      	nop
}
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8005406:	b480      	push	{r7}
 8005408:	af00      	add	r7, sp, #0
  return;
 800540a:	bf00      	nop
}
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
  return;
 8005418:	bf00      	nop
}
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8005422:	b480      	push	{r7}
 8005424:	af00      	add	r7, sp, #0
  return;
 8005426:	bf00      	nop
}
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0
  return;
 8005434:	bf00      	nop
}
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800543e:	b480      	push	{r7}
 8005440:	af00      	add	r7, sp, #0
  return;
 8005442:	bf00      	nop
}
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  return;
 8005450:	bf00      	nop
}
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800545a:	b480      	push	{r7}
 800545c:	af00      	add	r7, sp, #0
  return;
 800545e:	bf00      	nop
}
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
  return;
 800546c:	bf00      	nop
}
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8005476:	b480      	push	{r7}
 8005478:	af00      	add	r7, sp, #0
  return;
 800547a:	bf00      	nop
}
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
  return;
 8005488:	bf00      	nop
}
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8005492:	b480      	push	{r7}
 8005494:	af00      	add	r7, sp, #0
  return;
 8005496:	bf00      	nop
}
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
  return;
 80054a4:	bf00      	nop
}
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
	...

080054b0 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80054b4:	4b04      	ldr	r3, [pc, #16]	; (80054c8 <SVCCTL_Init+0x18>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80054ba:	4b04      	ldr	r3, [pc, #16]	; (80054cc <SVCCTL_Init+0x1c>)
 80054bc:	2200      	movs	r2, #0
 80054be:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80054c0:	f000 f806 	bl	80054d0 <SVCCTL_SvcInit>

  return;
 80054c4:	bf00      	nop
}
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	200000bc 	.word	0x200000bc
 80054cc:	200000dc 	.word	0x200000dc

080054d0 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
  BAS_Init();
 80054d4:	f7ff ff74 	bl	80053c0 <BAS_Init>

  BLS_Init();
 80054d8:	f7ff ff79 	bl	80053ce <BLS_Init>

  CRS_STM_Init();
 80054dc:	f7ff ff7e 	bl	80053dc <CRS_STM_Init>

  DIS_Init();
 80054e0:	f7ff ff83 	bl	80053ea <DIS_Init>

  EDS_STM_Init();
 80054e4:	f7ff ff88 	bl	80053f8 <EDS_STM_Init>

  HIDS_Init();
 80054e8:	f7ff ff8d 	bl	8005406 <HIDS_Init>

  HRS_Init();
 80054ec:	f7ff ff92 	bl	8005414 <HRS_Init>

  HTS_Init();
 80054f0:	f7ff ff97 	bl	8005422 <HTS_Init>

  IAS_Init();
 80054f4:	f7ff ff9c 	bl	8005430 <IAS_Init>

  LLS_Init();
 80054f8:	f7ff ffa1 	bl	800543e <LLS_Init>

  TPS_Init();
 80054fc:	f7ff ffa6 	bl	800544c <TPS_Init>

  MOTENV_STM_Init();
 8005500:	f7ff ffab 	bl	800545a <MOTENV_STM_Init>

  P2PS_STM_Init();
 8005504:	f7ff ffb0 	bl	8005468 <P2PS_STM_Init>

  ZDD_STM_Init();
 8005508:	f7ff ffb5 	bl	8005476 <ZDD_STM_Init>

  OTAS_STM_Init();
 800550c:	f7ff ffba 	bl	8005484 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8005510:	f7ff ffc6 	bl	80054a0 <BVOPUS_STM_Init>

  MESH_Init();
 8005514:	f7ff ffbd 	bl	8005492 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8005518:	f001 fafe 	bl	8006b18 <SVCCTL_InitCustomSvc>
  
  return;
 800551c:	bf00      	nop
}
 800551e:	bd80      	pop	{r7, pc}

08005520 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8005528:	4b09      	ldr	r3, [pc, #36]	; (8005550 <SVCCTL_RegisterSvcHandler+0x30>)
 800552a:	7f1b      	ldrb	r3, [r3, #28]
 800552c:	4619      	mov	r1, r3
 800552e:	4a08      	ldr	r2, [pc, #32]	; (8005550 <SVCCTL_RegisterSvcHandler+0x30>)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8005536:	4b06      	ldr	r3, [pc, #24]	; (8005550 <SVCCTL_RegisterSvcHandler+0x30>)
 8005538:	7f1b      	ldrb	r3, [r3, #28]
 800553a:	3301      	adds	r3, #1
 800553c:	b2da      	uxtb	r2, r3
 800553e:	4b04      	ldr	r3, [pc, #16]	; (8005550 <SVCCTL_RegisterSvcHandler+0x30>)
 8005540:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8005542:	bf00      	nop
}
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	200000bc 	.word	0x200000bc

08005554 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3301      	adds	r3, #1
 8005560:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8005562:	2300      	movs	r3, #0
 8005564:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	2bff      	cmp	r3, #255	; 0xff
 800556c:	d125      	bne.n	80055ba <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	3302      	adds	r3, #2
 8005572:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	b29b      	uxth	r3, r3
 800557a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800557e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005582:	d118      	bne.n	80055b6 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005584:	2300      	movs	r3, #0
 8005586:	757b      	strb	r3, [r7, #21]
 8005588:	e00d      	b.n	80055a6 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800558a:	7d7b      	ldrb	r3, [r7, #21]
 800558c:	4a1a      	ldr	r2, [pc, #104]	; (80055f8 <SVCCTL_UserEvtRx+0xa4>)
 800558e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	4798      	blx	r3
 8005596:	4603      	mov	r3, r0
 8005598:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800559a:	7dfb      	ldrb	r3, [r7, #23]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d108      	bne.n	80055b2 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80055a0:	7d7b      	ldrb	r3, [r7, #21]
 80055a2:	3301      	adds	r3, #1
 80055a4:	757b      	strb	r3, [r7, #21]
 80055a6:	4b14      	ldr	r3, [pc, #80]	; (80055f8 <SVCCTL_UserEvtRx+0xa4>)
 80055a8:	7f1b      	ldrb	r3, [r3, #28]
 80055aa:	7d7a      	ldrb	r2, [r7, #21]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d3ec      	bcc.n	800558a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80055b0:	e002      	b.n	80055b8 <SVCCTL_UserEvtRx+0x64>
              break;
 80055b2:	bf00      	nop
          break;
 80055b4:	e000      	b.n	80055b8 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80055b6:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80055b8:	e000      	b.n	80055bc <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80055ba:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 80055bc:	7dfb      	ldrb	r3, [r7, #23]
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d00f      	beq.n	80055e2 <SVCCTL_UserEvtRx+0x8e>
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	dc10      	bgt.n	80055e8 <SVCCTL_UserEvtRx+0x94>
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d002      	beq.n	80055d0 <SVCCTL_UserEvtRx+0x7c>
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d006      	beq.n	80055dc <SVCCTL_UserEvtRx+0x88>
 80055ce:	e00b      	b.n	80055e8 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 ff79 	bl	80064c8 <SVCCTL_App_Notification>
 80055d6:	4603      	mov	r3, r0
 80055d8:	75bb      	strb	r3, [r7, #22]
      break;
 80055da:	e008      	b.n	80055ee <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80055dc:	2301      	movs	r3, #1
 80055de:	75bb      	strb	r3, [r7, #22]
      break;
 80055e0:	e005      	b.n	80055ee <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80055e2:	2300      	movs	r3, #0
 80055e4:	75bb      	strb	r3, [r7, #22]
      break;
 80055e6:	e002      	b.n	80055ee <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80055e8:	2301      	movs	r3, #1
 80055ea:	75bb      	strb	r3, [r7, #22]
      break;
 80055ec:	bf00      	nop
  }

  return (return_status);
 80055ee:	7dbb      	ldrb	r3, [r7, #22]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3718      	adds	r7, #24
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	200000bc 	.word	0x200000bc

080055fc <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b088      	sub	sp, #32
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8005604:	f107 030c 	add.w	r3, r7, #12
 8005608:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	2125      	movs	r1, #37	; 0x25
 8005614:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8005618:	f000 fae2 	bl	8005be0 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	330b      	adds	r3, #11
 8005620:	78db      	ldrb	r3, [r3, #3]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3720      	adds	r7, #32
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b088      	sub	sp, #32
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8005632:	f107 030c 	add.w	r3, r7, #12
 8005636:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	210f      	movs	r1, #15
 8005642:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8005646:	f000 facb 	bl	8005be0 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	330b      	adds	r3, #11
 800564e:	78db      	ldrb	r3, [r3, #3]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3720      	adds	r7, #32
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b088      	sub	sp, #32
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8005660:	f107 030c 	add.w	r3, r7, #12
 8005664:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	210e      	movs	r1, #14
 800566c:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8005670:	f000 fab6 	bl	8005be0 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	330b      	adds	r3, #11
 8005678:	78db      	ldrb	r3, [r3, #3]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3720      	adds	r7, #32
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
	...

08005684 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8005684:	b480      	push	{r7}
 8005686:	b08b      	sub	sp, #44	; 0x2c
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800568c:	2300      	movs	r3, #0
 800568e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8005690:	2300      	movs	r3, #0
 8005692:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8005694:	2300      	movs	r3, #0
 8005696:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8005698:	2300      	movs	r3, #0
 800569a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800569c:	2300      	movs	r3, #0
 800569e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80056a0:	2300      	movs	r3, #0
 80056a2:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80056a4:	2300      	movs	r3, #0
 80056a6:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80056a8:	2300      	movs	r3, #0
 80056aa:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80056ac:	4b4a      	ldr	r3, [pc, #296]	; (80057d8 <SHCI_GetWirelessFwInfo+0x154>)
 80056ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80056b4:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80056be:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a44      	ldr	r2, [pc, #272]	; (80057dc <SHCI_GetWirelessFwInfo+0x158>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d10f      	bne.n	80056f0 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	69db      	ldr	r3, [r3, #28]
 80056e0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	617b      	str	r3, [r7, #20]
 80056ee:	e01a      	b.n	8005726 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80056f8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80056fc:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	0e1b      	lsrs	r3, r3, #24
 800572a:	b2da      	uxtb	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	0c1b      	lsrs	r3, r3, #16
 8005734:	b2da      	uxtb	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	0a1b      	lsrs	r3, r3, #8
 800573e:	b2da      	uxtb	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	091b      	lsrs	r3, r3, #4
 8005748:	b2db      	uxtb	r3, r3
 800574a:	f003 030f 	and.w	r3, r3, #15
 800574e:	b2da      	uxtb	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	b2db      	uxtb	r3, r3
 8005758:	f003 030f 	and.w	r3, r3, #15
 800575c:	b2da      	uxtb	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8005762:	6a3b      	ldr	r3, [r7, #32]
 8005764:	0e1b      	lsrs	r3, r3, #24
 8005766:	b2da      	uxtb	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	0c1b      	lsrs	r3, r3, #16
 8005770:	b2da      	uxtb	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	0a1b      	lsrs	r3, r3, #8
 800577a:	b2da      	uxtb	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	b2da      	uxtb	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	b2da      	uxtb	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	0e1b      	lsrs	r3, r3, #24
 8005794:	b2da      	uxtb	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	0c1b      	lsrs	r3, r3, #16
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	0a1b      	lsrs	r3, r3, #8
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	0e1b      	lsrs	r3, r3, #24
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	0c1b      	lsrs	r3, r3, #16
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	372c      	adds	r7, #44	; 0x2c
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr
 80057d8:	58004000 	.word	0x58004000
 80057dc:	a94656b9 	.word	0xa94656b9

080057e0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	4a08      	ldr	r2, [pc, #32]	; (8005810 <hci_init+0x30>)
 80057f0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80057f2:	4a08      	ldr	r2, [pc, #32]	; (8005814 <hci_init+0x34>)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80057f8:	4806      	ldr	r0, [pc, #24]	; (8005814 <hci_init+0x34>)
 80057fa:	f000 f973 	bl	8005ae4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4618      	mov	r0, r3
 8005804:	f000 f8d4 	bl	80059b0 <TlInit>

  return;
 8005808:	bf00      	nop
}
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	20000248 	.word	0x20000248
 8005814:	20000220 	.word	0x20000220

08005818 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800581e:	4822      	ldr	r0, [pc, #136]	; (80058a8 <hci_user_evt_proc+0x90>)
 8005820:	f000 fd28 	bl	8006274 <LST_is_empty>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d12b      	bne.n	8005882 <hci_user_evt_proc+0x6a>
 800582a:	4b20      	ldr	r3, [pc, #128]	; (80058ac <hci_user_evt_proc+0x94>)
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d027      	beq.n	8005882 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8005832:	f107 030c 	add.w	r3, r7, #12
 8005836:	4619      	mov	r1, r3
 8005838:	481b      	ldr	r0, [pc, #108]	; (80058a8 <hci_user_evt_proc+0x90>)
 800583a:	f000 fdaa 	bl	8006392 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800583e:	4b1c      	ldr	r3, [pc, #112]	; (80058b0 <hci_user_evt_proc+0x98>)
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00c      	beq.n	8005860 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800584a:	2301      	movs	r3, #1
 800584c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800584e:	4b18      	ldr	r3, [pc, #96]	; (80058b0 <hci_user_evt_proc+0x98>)
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	1d3a      	adds	r2, r7, #4
 8005854:	4610      	mov	r0, r2
 8005856:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8005858:	793a      	ldrb	r2, [r7, #4]
 800585a:	4b14      	ldr	r3, [pc, #80]	; (80058ac <hci_user_evt_proc+0x94>)
 800585c:	701a      	strb	r2, [r3, #0]
 800585e:	e002      	b.n	8005866 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8005860:	4b12      	ldr	r3, [pc, #72]	; (80058ac <hci_user_evt_proc+0x94>)
 8005862:	2201      	movs	r2, #1
 8005864:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8005866:	4b11      	ldr	r3, [pc, #68]	; (80058ac <hci_user_evt_proc+0x94>)
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d004      	beq.n	8005878 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	4618      	mov	r0, r3
 8005872:	f000 fc03 	bl	800607c <TL_MM_EvtDone>
 8005876:	e004      	b.n	8005882 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4619      	mov	r1, r3
 800587c:	480a      	ldr	r0, [pc, #40]	; (80058a8 <hci_user_evt_proc+0x90>)
 800587e:	f000 fd1b 	bl	80062b8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8005882:	4809      	ldr	r0, [pc, #36]	; (80058a8 <hci_user_evt_proc+0x90>)
 8005884:	f000 fcf6 	bl	8006274 <LST_is_empty>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d107      	bne.n	800589e <hci_user_evt_proc+0x86>
 800588e:	4b07      	ldr	r3, [pc, #28]	; (80058ac <hci_user_evt_proc+0x94>)
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8005896:	4804      	ldr	r0, [pc, #16]	; (80058a8 <hci_user_evt_proc+0x90>)
 8005898:	f001 f814 	bl	80068c4 <hci_notify_asynch_evt>
  }


  return;
 800589c:	bf00      	nop
 800589e:	bf00      	nop
}
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	200000e4 	.word	0x200000e4
 80058ac:	200000f0 	.word	0x200000f0
 80058b0:	20000220 	.word	0x20000220

080058b4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b088      	sub	sp, #32
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	460b      	mov	r3, r1
 80058be:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80058c0:	2000      	movs	r0, #0
 80058c2:	f000 f8cb 	bl	8005a5c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80058c6:	2300      	movs	r3, #0
 80058c8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	885b      	ldrh	r3, [r3, #2]
 80058ce:	b21b      	sxth	r3, r3
 80058d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058d4:	b21a      	sxth	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	029b      	lsls	r3, r3, #10
 80058dc:	b21b      	sxth	r3, r3
 80058de:	4313      	orrs	r3, r2
 80058e0:	b21b      	sxth	r3, r3
 80058e2:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	b2d9      	uxtb	r1, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689a      	ldr	r2, [r3, #8]
 80058ee:	8bbb      	ldrh	r3, [r7, #28]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 f88d 	bl	8005a10 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80058f6:	e04e      	b.n	8005996 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80058f8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80058fc:	f000 fff9 	bl	80068f2 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8005900:	e043      	b.n	800598a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8005902:	f107 030c 	add.w	r3, r7, #12
 8005906:	4619      	mov	r1, r3
 8005908:	4828      	ldr	r0, [pc, #160]	; (80059ac <hci_send_req+0xf8>)
 800590a:	f000 fd42 	bl	8006392 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	7a5b      	ldrb	r3, [r3, #9]
 8005912:	2b0f      	cmp	r3, #15
 8005914:	d114      	bne.n	8005940 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	330b      	adds	r3, #11
 800591a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	885b      	ldrh	r3, [r3, #2]
 8005920:	b29b      	uxth	r3, r3
 8005922:	8bba      	ldrh	r2, [r7, #28]
 8005924:	429a      	cmp	r2, r3
 8005926:	d104      	bne.n	8005932 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	7812      	ldrb	r2, [r2, #0]
 8005930:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	785b      	ldrb	r3, [r3, #1]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d027      	beq.n	800598a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800593a:	2301      	movs	r3, #1
 800593c:	77fb      	strb	r3, [r7, #31]
 800593e:	e024      	b.n	800598a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	330b      	adds	r3, #11
 8005944:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800594c:	b29b      	uxth	r3, r3
 800594e:	8bba      	ldrh	r2, [r7, #28]
 8005950:	429a      	cmp	r2, r3
 8005952:	d114      	bne.n	800597e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	7a9b      	ldrb	r3, [r3, #10]
 8005958:	3b03      	subs	r3, #3
 800595a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	695a      	ldr	r2, [r3, #20]
 8005960:	7dfb      	ldrb	r3, [r7, #23]
 8005962:	429a      	cmp	r2, r3
 8005964:	bfa8      	it	ge
 8005966:	461a      	movge	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6918      	ldr	r0, [r3, #16]
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	1cd9      	adds	r1, r3, #3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	461a      	mov	r2, r3
 800597a:	f001 fe83 	bl	8007684 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8005986:	2301      	movs	r3, #1
 8005988:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800598a:	4808      	ldr	r0, [pc, #32]	; (80059ac <hci_send_req+0xf8>)
 800598c:	f000 fc72 	bl	8006274 <LST_is_empty>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0b5      	beq.n	8005902 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8005996:	7ffb      	ldrb	r3, [r7, #31]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d0ad      	beq.n	80058f8 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800599c:	2001      	movs	r0, #1
 800599e:	f000 f85d 	bl	8005a5c <NotifyCmdStatus>

  return 0;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3720      	adds	r7, #32
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	20000240 	.word	0x20000240

080059b0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80059b8:	480f      	ldr	r0, [pc, #60]	; (80059f8 <TlInit+0x48>)
 80059ba:	f000 fc4b 	bl	8006254 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80059be:	4a0f      	ldr	r2, [pc, #60]	; (80059fc <TlInit+0x4c>)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80059c4:	480e      	ldr	r0, [pc, #56]	; (8005a00 <TlInit+0x50>)
 80059c6:	f000 fc45 	bl	8006254 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80059ca:	4b0e      	ldr	r3, [pc, #56]	; (8005a04 <TlInit+0x54>)
 80059cc:	2201      	movs	r2, #1
 80059ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80059d0:	4b0d      	ldr	r3, [pc, #52]	; (8005a08 <TlInit+0x58>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00a      	beq.n	80059ee <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80059dc:	4b0b      	ldr	r3, [pc, #44]	; (8005a0c <TlInit+0x5c>)
 80059de:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80059e0:	4b09      	ldr	r3, [pc, #36]	; (8005a08 <TlInit+0x58>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f107 0208 	add.w	r2, r7, #8
 80059e8:	4610      	mov	r0, r2
 80059ea:	4798      	blx	r3
  }

  return;
 80059ec:	bf00      	nop
 80059ee:	bf00      	nop
}
 80059f0:	3718      	adds	r7, #24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	20000240 	.word	0x20000240
 80059fc:	200000ec 	.word	0x200000ec
 8005a00:	200000e4 	.word	0x200000e4
 8005a04:	200000f0 	.word	0x200000f0
 8005a08:	20000220 	.word	0x20000220
 8005a0c:	08005a9d 	.word	0x08005a9d

08005a10 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	4603      	mov	r3, r0
 8005a18:	603a      	str	r2, [r7, #0]
 8005a1a:	80fb      	strh	r3, [r7, #6]
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8005a20:	4b0c      	ldr	r3, [pc, #48]	; (8005a54 <SendCmd+0x44>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	88fa      	ldrh	r2, [r7, #6]
 8005a26:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8005a2a:	4b0a      	ldr	r3, [pc, #40]	; (8005a54 <SendCmd+0x44>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	797a      	ldrb	r2, [r7, #5]
 8005a30:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8005a32:	4b08      	ldr	r3, [pc, #32]	; (8005a54 <SendCmd+0x44>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	330c      	adds	r3, #12
 8005a38:	797a      	ldrb	r2, [r7, #5]
 8005a3a:	6839      	ldr	r1, [r7, #0]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f001 fe21 	bl	8007684 <memcpy>

  hciContext.io.Send(0,0);
 8005a42:	4b05      	ldr	r3, [pc, #20]	; (8005a58 <SendCmd+0x48>)
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	2100      	movs	r1, #0
 8005a48:	2000      	movs	r0, #0
 8005a4a:	4798      	blx	r3

  return;
 8005a4c:	bf00      	nop
}
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	200000ec 	.word	0x200000ec
 8005a58:	20000220 	.word	0x20000220

08005a5c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	4603      	mov	r3, r0
 8005a64:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8005a66:	79fb      	ldrb	r3, [r7, #7]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d108      	bne.n	8005a7e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8005a6c:	4b0a      	ldr	r3, [pc, #40]	; (8005a98 <NotifyCmdStatus+0x3c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00d      	beq.n	8005a90 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8005a74:	4b08      	ldr	r3, [pc, #32]	; (8005a98 <NotifyCmdStatus+0x3c>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2000      	movs	r0, #0
 8005a7a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8005a7c:	e008      	b.n	8005a90 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8005a7e:	4b06      	ldr	r3, [pc, #24]	; (8005a98 <NotifyCmdStatus+0x3c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d004      	beq.n	8005a90 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8005a86:	4b04      	ldr	r3, [pc, #16]	; (8005a98 <NotifyCmdStatus+0x3c>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2001      	movs	r0, #1
 8005a8c:	4798      	blx	r3
  return;
 8005a8e:	bf00      	nop
 8005a90:	bf00      	nop
}
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	20000248 	.word	0x20000248

08005a9c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	7a5b      	ldrb	r3, [r3, #9]
 8005aa8:	2b0f      	cmp	r3, #15
 8005aaa:	d003      	beq.n	8005ab4 <TlEvtReceived+0x18>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	7a5b      	ldrb	r3, [r3, #9]
 8005ab0:	2b0e      	cmp	r3, #14
 8005ab2:	d107      	bne.n	8005ac4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8005ab4:	6879      	ldr	r1, [r7, #4]
 8005ab6:	4809      	ldr	r0, [pc, #36]	; (8005adc <TlEvtReceived+0x40>)
 8005ab8:	f000 fc24 	bl	8006304 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8005abc:	2000      	movs	r0, #0
 8005abe:	f000 ff0d 	bl	80068dc <hci_cmd_resp_release>
 8005ac2:	e006      	b.n	8005ad2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8005ac4:	6879      	ldr	r1, [r7, #4]
 8005ac6:	4806      	ldr	r0, [pc, #24]	; (8005ae0 <TlEvtReceived+0x44>)
 8005ac8:	f000 fc1c 	bl	8006304 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005acc:	4804      	ldr	r0, [pc, #16]	; (8005ae0 <TlEvtReceived+0x44>)
 8005ace:	f000 fef9 	bl	80068c4 <hci_notify_asynch_evt>
  }

  return;
 8005ad2:	bf00      	nop
}
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20000240 	.word	0x20000240
 8005ae0:	200000e4 	.word	0x200000e4

08005ae4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a05      	ldr	r2, [pc, #20]	; (8005b04 <hci_register_io_bus+0x20>)
 8005af0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a04      	ldr	r2, [pc, #16]	; (8005b08 <hci_register_io_bus+0x24>)
 8005af6:	611a      	str	r2, [r3, #16]

  return;
 8005af8:	bf00      	nop
}
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	08005df5 	.word	0x08005df5
 8005b08:	08005e5d 	.word	0x08005e5d

08005b0c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	4a08      	ldr	r2, [pc, #32]	; (8005b3c <shci_init+0x30>)
 8005b1c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8005b1e:	4a08      	ldr	r2, [pc, #32]	; (8005b40 <shci_init+0x34>)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8005b24:	4806      	ldr	r0, [pc, #24]	; (8005b40 <shci_init+0x34>)
 8005b26:	f000 f911 	bl	8005d4c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 f894 	bl	8005c5c <TlInit>

  return;
 8005b34:	bf00      	nop
}
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	2000026c 	.word	0x2000026c
 8005b40:	2000024c 	.word	0x2000024c

08005b44 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8005b4a:	4822      	ldr	r0, [pc, #136]	; (8005bd4 <shci_user_evt_proc+0x90>)
 8005b4c:	f000 fb92 	bl	8006274 <LST_is_empty>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d12b      	bne.n	8005bae <shci_user_evt_proc+0x6a>
 8005b56:	4b20      	ldr	r3, [pc, #128]	; (8005bd8 <shci_user_evt_proc+0x94>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d027      	beq.n	8005bae <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8005b5e:	f107 030c 	add.w	r3, r7, #12
 8005b62:	4619      	mov	r1, r3
 8005b64:	481b      	ldr	r0, [pc, #108]	; (8005bd4 <shci_user_evt_proc+0x90>)
 8005b66:	f000 fc14 	bl	8006392 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8005b6a:	4b1c      	ldr	r3, [pc, #112]	; (8005bdc <shci_user_evt_proc+0x98>)
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00c      	beq.n	8005b8c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8005b76:	2301      	movs	r3, #1
 8005b78:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8005b7a:	4b18      	ldr	r3, [pc, #96]	; (8005bdc <shci_user_evt_proc+0x98>)
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	1d3a      	adds	r2, r7, #4
 8005b80:	4610      	mov	r0, r2
 8005b82:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8005b84:	793a      	ldrb	r2, [r7, #4]
 8005b86:	4b14      	ldr	r3, [pc, #80]	; (8005bd8 <shci_user_evt_proc+0x94>)
 8005b88:	701a      	strb	r2, [r3, #0]
 8005b8a:	e002      	b.n	8005b92 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005b8c:	4b12      	ldr	r3, [pc, #72]	; (8005bd8 <shci_user_evt_proc+0x94>)
 8005b8e:	2201      	movs	r2, #1
 8005b90:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8005b92:	4b11      	ldr	r3, [pc, #68]	; (8005bd8 <shci_user_evt_proc+0x94>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d004      	beq.n	8005ba4 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f000 fa6d 	bl	800607c <TL_MM_EvtDone>
 8005ba2:	e004      	b.n	8005bae <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	480a      	ldr	r0, [pc, #40]	; (8005bd4 <shci_user_evt_proc+0x90>)
 8005baa:	f000 fb85 	bl	80062b8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8005bae:	4809      	ldr	r0, [pc, #36]	; (8005bd4 <shci_user_evt_proc+0x90>)
 8005bb0:	f000 fb60 	bl	8006274 <LST_is_empty>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d107      	bne.n	8005bca <shci_user_evt_proc+0x86>
 8005bba:	4b07      	ldr	r3, [pc, #28]	; (8005bd8 <shci_user_evt_proc+0x94>)
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8005bc2:	4804      	ldr	r0, [pc, #16]	; (8005bd4 <shci_user_evt_proc+0x90>)
 8005bc4:	f7fa fde7 	bl	8000796 <shci_notify_asynch_evt>
  }


  return;
 8005bc8:	bf00      	nop
 8005bca:	bf00      	nop
}
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	200000fc 	.word	0x200000fc
 8005bd8:	2000010c 	.word	0x2000010c
 8005bdc:	2000024c 	.word	0x2000024c

08005be0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60ba      	str	r2, [r7, #8]
 8005be8:	607b      	str	r3, [r7, #4]
 8005bea:	4603      	mov	r3, r0
 8005bec:	81fb      	strh	r3, [r7, #14]
 8005bee:	460b      	mov	r3, r1
 8005bf0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8005bf2:	2000      	movs	r0, #0
 8005bf4:	f000 f864 	bl	8005cc0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8005bf8:	4b16      	ldr	r3, [pc, #88]	; (8005c54 <shci_send+0x74>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	89fa      	ldrh	r2, [r7, #14]
 8005bfe:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8005c02:	4b14      	ldr	r3, [pc, #80]	; (8005c54 <shci_send+0x74>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	7b7a      	ldrb	r2, [r7, #13]
 8005c08:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8005c0a:	4b12      	ldr	r3, [pc, #72]	; (8005c54 <shci_send+0x74>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	330c      	adds	r3, #12
 8005c10:	7b7a      	ldrb	r2, [r7, #13]
 8005c12:	68b9      	ldr	r1, [r7, #8]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f001 fd35 	bl	8007684 <memcpy>

  shciContext.io.Send(0,0);
 8005c1a:	4b0f      	ldr	r3, [pc, #60]	; (8005c58 <shci_send+0x78>)
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	2100      	movs	r1, #0
 8005c20:	2000      	movs	r0, #0
 8005c22:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8005c24:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8005c28:	f7fa fdcc 	bl	80007c4 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f103 0008 	add.w	r0, r3, #8
 8005c32:	4b08      	ldr	r3, [pc, #32]	; (8005c54 <shci_send+0x74>)
 8005c34:	6819      	ldr	r1, [r3, #0]
 8005c36:	4b07      	ldr	r3, [pc, #28]	; (8005c54 <shci_send+0x74>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	789b      	ldrb	r3, [r3, #2]
 8005c3c:	3303      	adds	r3, #3
 8005c3e:	461a      	mov	r2, r3
 8005c40:	f001 fd20 	bl	8007684 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005c44:	2001      	movs	r0, #1
 8005c46:	f000 f83b 	bl	8005cc0 <Cmd_SetStatus>

  return;
 8005c4a:	bf00      	nop
}
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	20000108 	.word	0x20000108
 8005c58:	2000024c 	.word	0x2000024c

08005c5c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8005c64:	4a10      	ldr	r2, [pc, #64]	; (8005ca8 <TlInit+0x4c>)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8005c6a:	4810      	ldr	r0, [pc, #64]	; (8005cac <TlInit+0x50>)
 8005c6c:	f000 faf2 	bl	8006254 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005c70:	2001      	movs	r0, #1
 8005c72:	f000 f825 	bl	8005cc0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005c76:	4b0e      	ldr	r3, [pc, #56]	; (8005cb0 <TlInit+0x54>)
 8005c78:	2201      	movs	r2, #1
 8005c7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8005c7c:	4b0d      	ldr	r3, [pc, #52]	; (8005cb4 <TlInit+0x58>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00c      	beq.n	8005c9e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8005c88:	4b0b      	ldr	r3, [pc, #44]	; (8005cb8 <TlInit+0x5c>)
 8005c8a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8005c8c:	4b0b      	ldr	r3, [pc, #44]	; (8005cbc <TlInit+0x60>)
 8005c8e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8005c90:	4b08      	ldr	r3, [pc, #32]	; (8005cb4 <TlInit+0x58>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f107 020c 	add.w	r2, r7, #12
 8005c98:	4610      	mov	r0, r2
 8005c9a:	4798      	blx	r3
  }

  return;
 8005c9c:	bf00      	nop
 8005c9e:	bf00      	nop
}
 8005ca0:	3718      	adds	r7, #24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	20000108 	.word	0x20000108
 8005cac:	200000fc 	.word	0x200000fc
 8005cb0:	2000010c 	.word	0x2000010c
 8005cb4:	2000024c 	.word	0x2000024c
 8005cb8:	08005d11 	.word	0x08005d11
 8005cbc:	08005d29 	.word	0x08005d29

08005cc0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8005cca:	79fb      	ldrb	r3, [r7, #7]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10b      	bne.n	8005ce8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8005cd0:	4b0d      	ldr	r3, [pc, #52]	; (8005d08 <Cmd_SetStatus+0x48>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d003      	beq.n	8005ce0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8005cd8:	4b0b      	ldr	r3, [pc, #44]	; (8005d08 <Cmd_SetStatus+0x48>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2000      	movs	r0, #0
 8005cde:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8005ce0:	4b0a      	ldr	r3, [pc, #40]	; (8005d0c <Cmd_SetStatus+0x4c>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8005ce6:	e00b      	b.n	8005d00 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8005ce8:	4b08      	ldr	r3, [pc, #32]	; (8005d0c <Cmd_SetStatus+0x4c>)
 8005cea:	2201      	movs	r2, #1
 8005cec:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8005cee:	4b06      	ldr	r3, [pc, #24]	; (8005d08 <Cmd_SetStatus+0x48>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d004      	beq.n	8005d00 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8005cf6:	4b04      	ldr	r3, [pc, #16]	; (8005d08 <Cmd_SetStatus+0x48>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2001      	movs	r0, #1
 8005cfc:	4798      	blx	r3
  return;
 8005cfe:	bf00      	nop
 8005d00:	bf00      	nop
}
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	2000026c 	.word	0x2000026c
 8005d0c:	20000104 	.word	0x20000104

08005d10 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8005d18:	2000      	movs	r0, #0
 8005d1a:	f7fa fd48 	bl	80007ae <shci_cmd_resp_release>

  return;
 8005d1e:	bf00      	nop
}
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
	...

08005d28 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8005d30:	6879      	ldr	r1, [r7, #4]
 8005d32:	4805      	ldr	r0, [pc, #20]	; (8005d48 <TlUserEvtReceived+0x20>)
 8005d34:	f000 fae6 	bl	8006304 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005d38:	4803      	ldr	r0, [pc, #12]	; (8005d48 <TlUserEvtReceived+0x20>)
 8005d3a:	f7fa fd2c 	bl	8000796 <shci_notify_asynch_evt>

  return;
 8005d3e:	bf00      	nop
}
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	200000fc 	.word	0x200000fc

08005d4c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a05      	ldr	r2, [pc, #20]	; (8005d6c <shci_register_io_bus+0x20>)
 8005d58:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a04      	ldr	r2, [pc, #16]	; (8005d70 <shci_register_io_bus+0x24>)
 8005d5e:	611a      	str	r2, [r3, #16]

  return;
 8005d60:	bf00      	nop
}
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	08005f09 	.word	0x08005f09
 8005d70:	08005f5d 	.word	0x08005f5d

08005d74 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8005d78:	f001 f91e 	bl	8006fb8 <HW_IPCC_Enable>

  return;
 8005d7c:	bf00      	nop
}
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <TL_Init>:


void TL_Init( void )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8005d84:	4b10      	ldr	r3, [pc, #64]	; (8005dc8 <TL_Init+0x48>)
 8005d86:	4a11      	ldr	r2, [pc, #68]	; (8005dcc <TL_Init+0x4c>)
 8005d88:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8005d8a:	4b0f      	ldr	r3, [pc, #60]	; (8005dc8 <TL_Init+0x48>)
 8005d8c:	4a10      	ldr	r2, [pc, #64]	; (8005dd0 <TL_Init+0x50>)
 8005d8e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8005d90:	4b0d      	ldr	r3, [pc, #52]	; (8005dc8 <TL_Init+0x48>)
 8005d92:	4a10      	ldr	r2, [pc, #64]	; (8005dd4 <TL_Init+0x54>)
 8005d94:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8005d96:	4b0c      	ldr	r3, [pc, #48]	; (8005dc8 <TL_Init+0x48>)
 8005d98:	4a0f      	ldr	r2, [pc, #60]	; (8005dd8 <TL_Init+0x58>)
 8005d9a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8005d9c:	4b0a      	ldr	r3, [pc, #40]	; (8005dc8 <TL_Init+0x48>)
 8005d9e:	4a0f      	ldr	r2, [pc, #60]	; (8005ddc <TL_Init+0x5c>)
 8005da0:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8005da2:	4b09      	ldr	r3, [pc, #36]	; (8005dc8 <TL_Init+0x48>)
 8005da4:	4a0e      	ldr	r2, [pc, #56]	; (8005de0 <TL_Init+0x60>)
 8005da6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8005da8:	4b07      	ldr	r3, [pc, #28]	; (8005dc8 <TL_Init+0x48>)
 8005daa:	4a0e      	ldr	r2, [pc, #56]	; (8005de4 <TL_Init+0x64>)
 8005dac:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8005dae:	4b06      	ldr	r3, [pc, #24]	; (8005dc8 <TL_Init+0x48>)
 8005db0:	4a0d      	ldr	r2, [pc, #52]	; (8005de8 <TL_Init+0x68>)
 8005db2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8005db4:	4b04      	ldr	r3, [pc, #16]	; (8005dc8 <TL_Init+0x48>)
 8005db6:	4a0d      	ldr	r2, [pc, #52]	; (8005dec <TL_Init+0x6c>)
 8005db8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8005dba:	4b03      	ldr	r3, [pc, #12]	; (8005dc8 <TL_Init+0x48>)
 8005dbc:	4a0c      	ldr	r2, [pc, #48]	; (8005df0 <TL_Init+0x70>)
 8005dbe:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8005dc0:	f001 f90e 	bl	8006fe0 <HW_IPCC_Init>

  return;
 8005dc4:	bf00      	nop
}
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	20030000 	.word	0x20030000
 8005dcc:	20030028 	.word	0x20030028
 8005dd0:	20030048 	.word	0x20030048
 8005dd4:	20030058 	.word	0x20030058
 8005dd8:	20030064 	.word	0x20030064
 8005ddc:	2003006c 	.word	0x2003006c
 8005de0:	20030074 	.word	0x20030074
 8005de4:	2003007c 	.word	0x2003007c
 8005de8:	20030098 	.word	0x20030098
 8005dec:	2003009c 	.word	0x2003009c
 8005df0:	200300a8 	.word	0x200300a8

08005df4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8005e00:	4811      	ldr	r0, [pc, #68]	; (8005e48 <TL_BLE_Init+0x54>)
 8005e02:	f000 fa27 	bl	8006254 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8005e06:	4b11      	ldr	r3, [pc, #68]	; (8005e4c <TL_BLE_Init+0x58>)
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	689a      	ldr	r2, [r3, #8]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	68da      	ldr	r2, [r3, #12]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	4a0c      	ldr	r2, [pc, #48]	; (8005e50 <TL_BLE_Init+0x5c>)
 8005e20:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	4a08      	ldr	r2, [pc, #32]	; (8005e48 <TL_BLE_Init+0x54>)
 8005e26:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8005e28:	f001 f8f0 	bl	800700c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a08      	ldr	r2, [pc, #32]	; (8005e54 <TL_BLE_Init+0x60>)
 8005e32:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	4a07      	ldr	r2, [pc, #28]	; (8005e58 <TL_BLE_Init+0x64>)
 8005e3a:	6013      	str	r3, [r2, #0]

  return 0;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	200300c4 	.word	0x200300c4
 8005e4c:	20030000 	.word	0x20030000
 8005e50:	20030a48 	.word	0x20030a48
 8005e54:	20000278 	.word	0x20000278
 8005e58:	2000027c 	.word	0x2000027c

08005e5c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	460b      	mov	r3, r1
 8005e66:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8005e68:	4b09      	ldr	r3, [pc, #36]	; (8005e90 <TL_BLE_SendCmd+0x34>)
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8005e72:	4b07      	ldr	r3, [pc, #28]	; (8005e90 <TL_BLE_SendCmd+0x34>)
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4619      	mov	r1, r3
 8005e7a:	2001      	movs	r0, #1
 8005e7c:	f000 f96c 	bl	8006158 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8005e80:	f001 f8ce 	bl	8007020 <HW_IPCC_BLE_SendCmd>

  return 0;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	20030000 	.word	0x20030000

08005e94 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8005e9a:	e01c      	b.n	8005ed6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8005e9c:	1d3b      	adds	r3, r7, #4
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	4812      	ldr	r0, [pc, #72]	; (8005eec <HW_IPCC_BLE_RxEvtNot+0x58>)
 8005ea2:	f000 fa76 	bl	8006392 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	7a5b      	ldrb	r3, [r3, #9]
 8005eaa:	2b0f      	cmp	r3, #15
 8005eac:	d003      	beq.n	8005eb6 <HW_IPCC_BLE_RxEvtNot+0x22>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	7a5b      	ldrb	r3, [r3, #9]
 8005eb2:	2b0e      	cmp	r3, #14
 8005eb4:	d105      	bne.n	8005ec2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4619      	mov	r1, r3
 8005eba:	2002      	movs	r0, #2
 8005ebc:	f000 f94c 	bl	8006158 <OutputDbgTrace>
 8005ec0:	e004      	b.n	8005ecc <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	2003      	movs	r0, #3
 8005ec8:	f000 f946 	bl	8006158 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8005ecc:	4b08      	ldr	r3, [pc, #32]	; (8005ef0 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	4610      	mov	r0, r2
 8005ed4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8005ed6:	4805      	ldr	r0, [pc, #20]	; (8005eec <HW_IPCC_BLE_RxEvtNot+0x58>)
 8005ed8:	f000 f9cc 	bl	8006274 <LST_is_empty>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d0dc      	beq.n	8005e9c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8005ee2:	bf00      	nop
}
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	200300c4 	.word	0x200300c4
 8005ef0:	20000278 	.word	0x20000278

08005ef4 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8005ef8:	4b02      	ldr	r3, [pc, #8]	; (8005f04 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4798      	blx	r3

  return;
 8005efe:	bf00      	nop
}
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	2000027c 	.word	0x2000027c

08005f08 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8005f14:	480d      	ldr	r0, [pc, #52]	; (8005f4c <TL_SYS_Init+0x44>)
 8005f16:	f000 f99d 	bl	8006254 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8005f1a:	4b0d      	ldr	r3, [pc, #52]	; (8005f50 <TL_SYS_Init+0x48>)
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	4a08      	ldr	r2, [pc, #32]	; (8005f4c <TL_SYS_Init+0x44>)
 8005f2c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8005f2e:	f001 f899 	bl	8007064 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a07      	ldr	r2, [pc, #28]	; (8005f54 <TL_SYS_Init+0x4c>)
 8005f38:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	4a06      	ldr	r2, [pc, #24]	; (8005f58 <TL_SYS_Init+0x50>)
 8005f40:	6013      	str	r3, [r2, #0]

  return 0;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	200300cc 	.word	0x200300cc
 8005f50:	20030000 	.word	0x20030000
 8005f54:	20000280 	.word	0x20000280
 8005f58:	20000284 	.word	0x20000284

08005f5c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	460b      	mov	r3, r1
 8005f66:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8005f68:	4b09      	ldr	r3, [pc, #36]	; (8005f90 <TL_SYS_SendCmd+0x34>)
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2210      	movs	r2, #16
 8005f70:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8005f72:	4b07      	ldr	r3, [pc, #28]	; (8005f90 <TL_SYS_SendCmd+0x34>)
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4619      	mov	r1, r3
 8005f7a:	2004      	movs	r0, #4
 8005f7c:	f000 f8ec 	bl	8006158 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8005f80:	f001 f87a 	bl	8007078 <HW_IPCC_SYS_SendCmd>

  return 0;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20030000 	.word	0x20030000

08005f94 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005f98:	4b07      	ldr	r3, [pc, #28]	; (8005fb8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	2005      	movs	r0, #5
 8005fa2:	f000 f8d9 	bl	8006158 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005fa6:	4b05      	ldr	r3, [pc, #20]	; (8005fbc <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a03      	ldr	r2, [pc, #12]	; (8005fb8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8005fac:	68d2      	ldr	r2, [r2, #12]
 8005fae:	6812      	ldr	r2, [r2, #0]
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	4798      	blx	r3

  return;
 8005fb4:	bf00      	nop
}
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	20030000 	.word	0x20030000
 8005fbc:	20000280 	.word	0x20000280

08005fc0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005fc6:	e00e      	b.n	8005fe6 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8005fc8:	1d3b      	adds	r3, r7, #4
 8005fca:	4619      	mov	r1, r3
 8005fcc:	480b      	ldr	r0, [pc, #44]	; (8005ffc <HW_IPCC_SYS_EvtNot+0x3c>)
 8005fce:	f000 f9e0 	bl	8006392 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	2006      	movs	r0, #6
 8005fd8:	f000 f8be 	bl	8006158 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8005fdc:	4b08      	ldr	r3, [pc, #32]	; (8006000 <HW_IPCC_SYS_EvtNot+0x40>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	4610      	mov	r0, r2
 8005fe4:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005fe6:	4805      	ldr	r0, [pc, #20]	; (8005ffc <HW_IPCC_SYS_EvtNot+0x3c>)
 8005fe8:	f000 f944 	bl	8006274 <LST_is_empty>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0ea      	beq.n	8005fc8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8005ff2:	bf00      	nop
}
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	200300cc 	.word	0x200300cc
 8006000:	20000284 	.word	0x20000284

08006004 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800600c:	4817      	ldr	r0, [pc, #92]	; (800606c <TL_MM_Init+0x68>)
 800600e:	f000 f921 	bl	8006254 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8006012:	4817      	ldr	r0, [pc, #92]	; (8006070 <TL_MM_Init+0x6c>)
 8006014:	f000 f91e 	bl	8006254 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8006018:	4b16      	ldr	r3, [pc, #88]	; (8006074 <TL_MM_Init+0x70>)
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	4a16      	ldr	r2, [pc, #88]	; (8006078 <TL_MM_Init+0x74>)
 800601e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8006020:	4b15      	ldr	r3, [pc, #84]	; (8006078 <TL_MM_Init+0x74>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	6892      	ldr	r2, [r2, #8]
 8006028:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800602a:	4b13      	ldr	r3, [pc, #76]	; (8006078 <TL_MM_Init+0x74>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	68d2      	ldr	r2, [r2, #12]
 8006032:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8006034:	4b10      	ldr	r3, [pc, #64]	; (8006078 <TL_MM_Init+0x74>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a0c      	ldr	r2, [pc, #48]	; (800606c <TL_MM_Init+0x68>)
 800603a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800603c:	4b0e      	ldr	r3, [pc, #56]	; (8006078 <TL_MM_Init+0x74>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	6812      	ldr	r2, [r2, #0]
 8006044:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8006046:	4b0c      	ldr	r3, [pc, #48]	; (8006078 <TL_MM_Init+0x74>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	6852      	ldr	r2, [r2, #4]
 800604e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8006050:	4b09      	ldr	r3, [pc, #36]	; (8006078 <TL_MM_Init+0x74>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	6912      	ldr	r2, [r2, #16]
 8006058:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800605a:	4b07      	ldr	r3, [pc, #28]	; (8006078 <TL_MM_Init+0x74>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	6952      	ldr	r2, [r2, #20]
 8006062:	619a      	str	r2, [r3, #24]

  return;
 8006064:	bf00      	nop
}
 8006066:	3708      	adds	r7, #8
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	200300b4 	.word	0x200300b4
 8006070:	20000270 	.word	0x20000270
 8006074:	20030000 	.word	0x20030000
 8006078:	20000288 	.word	0x20000288

0800607c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	4807      	ldr	r0, [pc, #28]	; (80060a4 <TL_MM_EvtDone+0x28>)
 8006088:	f000 f93c 	bl	8006304 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	2000      	movs	r0, #0
 8006090:	f000 f862 	bl	8006158 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8006094:	4804      	ldr	r0, [pc, #16]	; (80060a8 <TL_MM_EvtDone+0x2c>)
 8006096:	f001 f815 	bl	80070c4 <HW_IPCC_MM_SendFreeBuf>

  return;
 800609a:	bf00      	nop
}
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	20000270 	.word	0x20000270
 80060a8:	080060ad 	.word	0x080060ad

080060ac <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80060b2:	e00c      	b.n	80060ce <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80060b4:	1d3b      	adds	r3, r7, #4
 80060b6:	4619      	mov	r1, r3
 80060b8:	480a      	ldr	r0, [pc, #40]	; (80060e4 <SendFreeBuf+0x38>)
 80060ba:	f000 f96a 	bl	8006392 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80060be:	4b0a      	ldr	r3, [pc, #40]	; (80060e8 <SendFreeBuf+0x3c>)
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	4611      	mov	r1, r2
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 f91b 	bl	8006304 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80060ce:	4805      	ldr	r0, [pc, #20]	; (80060e4 <SendFreeBuf+0x38>)
 80060d0:	f000 f8d0 	bl	8006274 <LST_is_empty>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0ec      	beq.n	80060b4 <SendFreeBuf+0x8>
  }

  return;
 80060da:	bf00      	nop
}
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	20000270 	.word	0x20000270
 80060e8:	20030000 	.word	0x20030000

080060ec <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80060f0:	4805      	ldr	r0, [pc, #20]	; (8006108 <TL_TRACES_Init+0x1c>)
 80060f2:	f000 f8af 	bl	8006254 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80060f6:	4b05      	ldr	r3, [pc, #20]	; (800610c <TL_TRACES_Init+0x20>)
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	4a03      	ldr	r2, [pc, #12]	; (8006108 <TL_TRACES_Init+0x1c>)
 80060fc:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80060fe:	f001 f817 	bl	8007130 <HW_IPCC_TRACES_Init>

  return;
 8006102:	bf00      	nop
}
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	200300bc 	.word	0x200300bc
 800610c:	20030000 	.word	0x20030000

08006110 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8006116:	e008      	b.n	800612a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8006118:	1d3b      	adds	r3, r7, #4
 800611a:	4619      	mov	r1, r3
 800611c:	4808      	ldr	r0, [pc, #32]	; (8006140 <HW_IPCC_TRACES_EvtNot+0x30>)
 800611e:	f000 f938 	bl	8006392 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4618      	mov	r0, r3
 8006126:	f000 f80d 	bl	8006144 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800612a:	4805      	ldr	r0, [pc, #20]	; (8006140 <HW_IPCC_TRACES_EvtNot+0x30>)
 800612c:	f000 f8a2 	bl	8006274 <LST_is_empty>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d0f0      	beq.n	8006118 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8006136:	bf00      	nop
}
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	200300bc 	.word	0x200300bc

08006144 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	4603      	mov	r3, r0
 8006160:	6039      	str	r1, [r7, #0]
 8006162:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8006164:	79fb      	ldrb	r3, [r7, #7]
 8006166:	2b06      	cmp	r3, #6
 8006168:	d845      	bhi.n	80061f6 <OutputDbgTrace+0x9e>
 800616a:	a201      	add	r2, pc, #4	; (adr r2, 8006170 <OutputDbgTrace+0x18>)
 800616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006170:	0800618d 	.word	0x0800618d
 8006174:	080061b1 	.word	0x080061b1
 8006178:	080061b7 	.word	0x080061b7
 800617c:	080061cb 	.word	0x080061cb
 8006180:	080061d7 	.word	0x080061d7
 8006184:	080061dd 	.word	0x080061dd
 8006188:	080061eb 	.word	0x080061eb
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	7a5b      	ldrb	r3, [r3, #9]
 8006194:	2bff      	cmp	r3, #255	; 0xff
 8006196:	d005      	beq.n	80061a4 <OutputDbgTrace+0x4c>
 8006198:	2bff      	cmp	r3, #255	; 0xff
 800619a:	dc05      	bgt.n	80061a8 <OutputDbgTrace+0x50>
 800619c:	2b0e      	cmp	r3, #14
 800619e:	d005      	beq.n	80061ac <OutputDbgTrace+0x54>
 80061a0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80061a2:	e001      	b.n	80061a8 <OutputDbgTrace+0x50>
          break;
 80061a4:	bf00      	nop
 80061a6:	e027      	b.n	80061f8 <OutputDbgTrace+0xa0>
          break;
 80061a8:	bf00      	nop
 80061aa:	e025      	b.n	80061f8 <OutputDbgTrace+0xa0>
          break;
 80061ac:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80061ae:	e023      	b.n	80061f8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80061b4:	e020      	b.n	80061f8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	7a5b      	ldrb	r3, [r3, #9]
 80061be:	2b0e      	cmp	r3, #14
 80061c0:	d001      	beq.n	80061c6 <OutputDbgTrace+0x6e>
 80061c2:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80061c4:	e000      	b.n	80061c8 <OutputDbgTrace+0x70>
          break;
 80061c6:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80061c8:	e016      	b.n	80061f8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	7a5b      	ldrb	r3, [r3, #9]
 80061d2:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80061d4:	e010      	b.n	80061f8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80061da:	e00d      	b.n	80061f8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	7a5b      	ldrb	r3, [r3, #9]
 80061e4:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80061e6:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80061e8:	e006      	b.n	80061f8 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	7a5b      	ldrb	r3, [r3, #9]
 80061f2:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80061f4:	e000      	b.n	80061f8 <OutputDbgTrace+0xa0>

    default:
      break;
 80061f6:	bf00      	nop
  }

  return;
 80061f8:	bf00      	nop
}
 80061fa:	3714      	adds	r7, #20
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	4603      	mov	r3, r0
 800620c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800620e:	4b0f      	ldr	r3, [pc, #60]	; (800624c <OTP_Read+0x48>)
 8006210:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8006212:	e002      	b.n	800621a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	3b08      	subs	r3, #8
 8006218:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	3307      	adds	r3, #7
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	79fa      	ldrb	r2, [r7, #7]
 8006222:	429a      	cmp	r2, r3
 8006224:	d003      	beq.n	800622e <OTP_Read+0x2a>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	4a09      	ldr	r2, [pc, #36]	; (8006250 <OTP_Read+0x4c>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d1f2      	bne.n	8006214 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3307      	adds	r3, #7
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	79fa      	ldrb	r2, [r7, #7]
 8006236:	429a      	cmp	r2, r3
 8006238:	d001      	beq.n	800623e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800623a:	2300      	movs	r3, #0
 800623c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800623e:	68fb      	ldr	r3, [r7, #12]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	1fff73f8 	.word	0x1fff73f8
 8006250:	1fff7000 	.word	0x1fff7000

08006254 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	605a      	str	r2, [r3, #4]
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8006274:	b480      	push	{r7}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800627c:	f3ef 8310 	mrs	r3, PRIMASK
 8006280:	60fb      	str	r3, [r7, #12]
  return(result);
 8006282:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006284:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006286:	b672      	cpsid	i
}
 8006288:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	429a      	cmp	r2, r3
 8006292:	d102      	bne.n	800629a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8006294:	2301      	movs	r3, #1
 8006296:	75fb      	strb	r3, [r7, #23]
 8006298:	e001      	b.n	800629e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800629a:	2300      	movs	r3, #0
 800629c:	75fb      	strb	r3, [r7, #23]
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	f383 8810 	msr	PRIMASK, r3
}
 80062a8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80062aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	371c      	adds	r7, #28
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b087      	sub	sp, #28
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062c2:	f3ef 8310 	mrs	r3, PRIMASK
 80062c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80062c8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80062ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80062cc:	b672      	cpsid	i
}
 80062ce:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	605a      	str	r2, [r3, #4]
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	f383 8810 	msr	PRIMASK, r3
}
 80062f6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80062f8:	bf00      	nop
 80062fa:	371c      	adds	r7, #28
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800630e:	f3ef 8310 	mrs	r3, PRIMASK
 8006312:	60fb      	str	r3, [r7, #12]
  return(result);
 8006314:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006316:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006318:	b672      	cpsid	i
}
 800631a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	601a      	str	r2, [r3, #0]
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	f383 8810 	msr	PRIMASK, r3
}
 8006342:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006344:	bf00      	nop
 8006346:	371c      	adds	r7, #28
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8006350:	b480      	push	{r7}
 8006352:	b087      	sub	sp, #28
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006358:	f3ef 8310 	mrs	r3, PRIMASK
 800635c:	60fb      	str	r3, [r7, #12]
  return(result);
 800635e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006360:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006362:	b672      	cpsid	i
}
 8006364:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	6812      	ldr	r2, [r2, #0]
 800636e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	6852      	ldr	r2, [r2, #4]
 8006378:	605a      	str	r2, [r3, #4]
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	f383 8810 	msr	PRIMASK, r3
}
 8006384:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006386:	bf00      	nop
 8006388:	371c      	adds	r7, #28
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b086      	sub	sp, #24
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800639c:	f3ef 8310 	mrs	r3, PRIMASK
 80063a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80063a2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80063a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80063a6:	b672      	cpsid	i
}
 80063a8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7ff ffca 	bl	8006350 <LST_remove_node>
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	f383 8810 	msr	PRIMASK, r3
}
 80063c6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80063c8:	bf00      	nop
 80063ca:	3718      	adds	r7, #24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80063d0:	b480      	push	{r7}
 80063d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80063d4:	4b03      	ldr	r3, [pc, #12]	; (80063e4 <LL_FLASH_GetUDN+0x14>)
 80063d6:	681b      	ldr	r3, [r3, #0]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	1fff7580 	.word	0x1fff7580

080063e8 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80063e8:	b480      	push	{r7}
 80063ea:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80063ec:	4b03      	ldr	r3, [pc, #12]	; (80063fc <LL_FLASH_GetDeviceID+0x14>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	b2db      	uxtb	r3, r3
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr
 80063fc:	1fff7584 	.word	0x1fff7584

08006400 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8006400:	b480      	push	{r7}
 8006402:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8006404:	4b03      	ldr	r3, [pc, #12]	; (8006414 <LL_FLASH_GetSTCompanyID+0x14>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	0a1b      	lsrs	r3, r3, #8
}
 800640a:	4618      	mov	r0, r3
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	1fff7584 	.word	0x1fff7584

08006418 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8006418:	b5b0      	push	{r4, r5, r7, lr}
 800641a:	b08e      	sub	sp, #56	; 0x38
 800641c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

	UTIL_SEQ_RegTask(1 << CFG_TASK_MY_TASK, UTIL_SEQ_RFU, myTask);
 800641e:	4a25      	ldr	r2, [pc, #148]	; (80064b4 <APP_BLE_Init+0x9c>)
 8006420:	2100      	movs	r1, #0
 8006422:	2004      	movs	r0, #4
 8006424:	f000 ffc6 	bl	80073b4 <UTIL_SEQ_RegTask>
	UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 8006428:	2100      	movs	r1, #0
 800642a:	2004      	movs	r0, #4
 800642c:	f000 ffe4 	bl	80073f8 <UTIL_SEQ_SetTask>

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8006430:	4b21      	ldr	r3, [pc, #132]	; (80064b8 <APP_BLE_Init+0xa0>)
 8006432:	1d3c      	adds	r4, r7, #4
 8006434:	461d      	mov	r5, r3
 8006436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800643a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800643c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800643e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006440:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006442:	682b      	ldr	r3, [r5, #0]
 8006444:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8006446:	f000 f8ff 	bl	8006648 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800644a:	2101      	movs	r1, #1
 800644c:	2002      	movs	r0, #2
 800644e:	f000 fe97 	bl	8007180 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8006452:	4a1a      	ldr	r2, [pc, #104]	; (80064bc <APP_BLE_Init+0xa4>)
 8006454:	2100      	movs	r1, #0
 8006456:	2002      	movs	r0, #2
 8006458:	f000 ffac 	bl	80073b4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 800645c:	1d3b      	adds	r3, r7, #4
 800645e:	4618      	mov	r0, r3
 8006460:	f7ff f8cc 	bl	80055fc <SHCI_C2_BLE_Init>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <APP_BLE_Init+0x56>
  {
    Error_Handler();
 800646a:	f7fb f969 	bl	8001740 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800646e:	f000 f901 	bl	8006674 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8006472:	f7ff f81d 	bl	80054b0 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8006476:	4b12      	ldr	r3, [pc, #72]	; (80064c0 <APP_BLE_Init+0xa8>)
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800647e:	4b10      	ldr	r3, [pc, #64]	; (80064c0 <APP_BLE_Init+0xa8>)
 8006480:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006484:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8006486:	4a0f      	ldr	r2, [pc, #60]	; (80064c4 <APP_BLE_Init+0xac>)
 8006488:	2100      	movs	r1, #0
 800648a:	2001      	movs	r0, #1
 800648c:	f000 ff92 	bl	80073b4 <UTIL_SEQ_RegTask>
  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 8006490:	2006      	movs	r0, #6
 8006492:	f7fe fe80 	bl	8005196 <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8006496:	f000 fabb 	bl	8006a10 <Custom_APP_Init>
/* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800649a:	4b09      	ldr	r3, [pc, #36]	; (80064c0 <APP_BLE_Init+0xa8>)
 800649c:	2200      	movs	r2, #0
 800649e:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80064a0:	4b07      	ldr	r3, [pc, #28]	; (80064c0 <APP_BLE_Init+0xa8>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 80064a6:	2001      	movs	r0, #1
 80064a8:	f000 f97e 	bl	80067a8 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 80064ac:	bf00      	nop
}
 80064ae:	3738      	adds	r7, #56	; 0x38
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bdb0      	pop	{r4, r5, r7, pc}
 80064b4:	08006979 	.word	0x08006979
 80064b8:	08007710 	.word	0x08007710
 80064bc:	08005819 	.word	0x08005819
 80064c0:	20000110 	.word	0x20000110
 80064c4:	08006891 	.word	0x08006891

080064c8 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08a      	sub	sp, #40	; 0x28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3301      	adds	r3, #1
 80064d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	2bff      	cmp	r3, #255	; 0xff
 80064dc:	d053      	beq.n	8006586 <SVCCTL_App_Notification+0xbe>
 80064de:	2bff      	cmp	r3, #255	; 0xff
 80064e0:	f300 80a3 	bgt.w	800662a <SVCCTL_App_Notification+0x162>
 80064e4:	2b05      	cmp	r3, #5
 80064e6:	d002      	beq.n	80064ee <SVCCTL_App_Notification+0x26>
 80064e8:	2b3e      	cmp	r3, #62	; 0x3e
 80064ea:	d020      	beq.n	800652e <SVCCTL_App_Notification+0x66>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80064ec:	e09d      	b.n	800662a <SVCCTL_App_Notification+0x162>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f0:	3302      	adds	r3, #2
 80064f2:	60bb      	str	r3, [r7, #8]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	4b4f      	ldr	r3, [pc, #316]	; (800663c <SVCCTL_App_Notification+0x174>)
 80064fe:	8adb      	ldrh	r3, [r3, #22]
 8006500:	429a      	cmp	r2, r3
 8006502:	d106      	bne.n	8006512 <SVCCTL_App_Notification+0x4a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8006504:	4b4d      	ldr	r3, [pc, #308]	; (800663c <SVCCTL_App_Notification+0x174>)
 8006506:	2200      	movs	r2, #0
 8006508:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800650a:	4b4c      	ldr	r3, [pc, #304]	; (800663c <SVCCTL_App_Notification+0x174>)
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8006512:	2001      	movs	r0, #1
 8006514:	f000 f948 	bl	80067a8 <Adv_Request>
      handleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8006518:	4b49      	ldr	r3, [pc, #292]	; (8006640 <SVCCTL_App_Notification+0x178>)
 800651a:	2201      	movs	r2, #1
 800651c:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800651e:	4b47      	ldr	r3, [pc, #284]	; (800663c <SVCCTL_App_Notification+0x174>)
 8006520:	8ada      	ldrh	r2, [r3, #22]
 8006522:	4b47      	ldr	r3, [pc, #284]	; (8006640 <SVCCTL_App_Notification+0x178>)
 8006524:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&handleNotification);
 8006526:	4846      	ldr	r0, [pc, #280]	; (8006640 <SVCCTL_App_Notification+0x178>)
 8006528:	f000 fa5e 	bl	80069e8 <Custom_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800652c:	e080      	b.n	8006630 <SVCCTL_App_Notification+0x168>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	3302      	adds	r3, #2
 8006532:	613b      	str	r3, [r7, #16]
      switch (meta_evt->subevent)
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d001      	beq.n	8006540 <SVCCTL_App_Notification+0x78>
 800653c:	2b03      	cmp	r3, #3
          break;
 800653e:	e021      	b.n	8006584 <SVCCTL_App_Notification+0xbc>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	3301      	adds	r3, #1
 8006544:	60fb      	str	r3, [r7, #12]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8006546:	4b3d      	ldr	r3, [pc, #244]	; (800663c <SVCCTL_App_Notification+0x174>)
 8006548:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800654c:	2b04      	cmp	r3, #4
 800654e:	d104      	bne.n	800655a <SVCCTL_App_Notification+0x92>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8006550:	4b3a      	ldr	r3, [pc, #232]	; (800663c <SVCCTL_App_Notification+0x174>)
 8006552:	2206      	movs	r2, #6
 8006554:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8006558:	e003      	b.n	8006562 <SVCCTL_App_Notification+0x9a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800655a:	4b38      	ldr	r3, [pc, #224]	; (800663c <SVCCTL_App_Notification+0x174>)
 800655c:	2205      	movs	r2, #5
 800655e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006568:	b29a      	uxth	r2, r3
 800656a:	4b34      	ldr	r3, [pc, #208]	; (800663c <SVCCTL_App_Notification+0x174>)
 800656c:	82da      	strh	r2, [r3, #22]
          handleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800656e:	4b34      	ldr	r3, [pc, #208]	; (8006640 <SVCCTL_App_Notification+0x178>)
 8006570:	2200      	movs	r2, #0
 8006572:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8006574:	4b31      	ldr	r3, [pc, #196]	; (800663c <SVCCTL_App_Notification+0x174>)
 8006576:	8ada      	ldrh	r2, [r3, #22]
 8006578:	4b31      	ldr	r3, [pc, #196]	; (8006640 <SVCCTL_App_Notification+0x178>)
 800657a:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&handleNotification);
 800657c:	4830      	ldr	r0, [pc, #192]	; (8006640 <SVCCTL_App_Notification+0x178>)
 800657e:	f000 fa33 	bl	80069e8 <Custom_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8006582:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 8006584:	e054      	b.n	8006630 <SVCCTL_App_Notification+0x168>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8006586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006588:	3302      	adds	r3, #2
 800658a:	623b      	str	r3, [r7, #32]
      switch (blecore_evt->ecode)
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	b29b      	uxth	r3, r3
 8006592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006596:	d042      	beq.n	800661e <SVCCTL_App_Notification+0x156>
 8006598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800659c:	dc47      	bgt.n	800662e <SVCCTL_App_Notification+0x166>
 800659e:	2b04      	cmp	r3, #4
 80065a0:	d03f      	beq.n	8006622 <SVCCTL_App_Notification+0x15a>
 80065a2:	2b04      	cmp	r3, #4
 80065a4:	db43      	blt.n	800662e <SVCCTL_App_Notification+0x166>
 80065a6:	f240 420a 	movw	r2, #1034	; 0x40a
 80065aa:	4293      	cmp	r3, r2
 80065ac:	dc3f      	bgt.n	800662e <SVCCTL_App_Notification+0x166>
 80065ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065b2:	dd3c      	ble.n	800662e <SVCCTL_App_Notification+0x166>
 80065b4:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 80065b8:	2b09      	cmp	r3, #9
 80065ba:	d838      	bhi.n	800662e <SVCCTL_App_Notification+0x166>
 80065bc:	a201      	add	r2, pc, #4	; (adr r2, 80065c4 <SVCCTL_App_Notification+0xfc>)
 80065be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c2:	bf00      	nop
 80065c4:	08006617 	.word	0x08006617
 80065c8:	080065ed 	.word	0x080065ed
 80065cc:	0800662f 	.word	0x0800662f
 80065d0:	0800662f 	.word	0x0800662f
 80065d4:	0800662f 	.word	0x0800662f
 80065d8:	0800662f 	.word	0x0800662f
 80065dc:	08006627 	.word	0x08006627
 80065e0:	0800662f 	.word	0x0800662f
 80065e4:	080065fb 	.word	0x080065fb
 80065e8:	08006627 	.word	0x08006627
            aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 80065ec:	4b13      	ldr	r3, [pc, #76]	; (800663c <SVCCTL_App_Notification+0x174>)
 80065ee:	8adb      	ldrh	r3, [r3, #22]
 80065f0:	4914      	ldr	r1, [pc, #80]	; (8006644 <SVCCTL_App_Notification+0x17c>)
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7fe f826 	bl	8004644 <aci_gap_pass_key_resp>
        break;
 80065f8:	e016      	b.n	8006628 <SVCCTL_App_Notification+0x160>
            evt_numeric_value = (aci_gap_numeric_comparison_value_event_rp0 *)blecore_evt->data;
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	3302      	adds	r3, #2
 80065fe:	61fb      	str	r3, [r7, #28]
            numeric_value = evt_numeric_value->Numeric_Value;
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8006606:	61bb      	str	r3, [r7, #24]
            aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8006608:	4b0c      	ldr	r3, [pc, #48]	; (800663c <SVCCTL_App_Notification+0x174>)
 800660a:	8adb      	ldrh	r3, [r3, #22]
 800660c:	2101      	movs	r1, #1
 800660e:	4618      	mov	r0, r3
 8006610:	f7fe f9c2 	bl	8004998 <aci_gap_numeric_comparison_value_confirm_yesno>
        break;
 8006614:	e008      	b.n	8006628 <SVCCTL_App_Notification+0x160>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 8006616:	6a3b      	ldr	r3, [r7, #32]
 8006618:	3302      	adds	r3, #2
 800661a:	617b      	str	r3, [r7, #20]
        break;
 800661c:	e004      	b.n	8006628 <SVCCTL_App_Notification+0x160>
      break;
 800661e:	bf00      	nop
 8006620:	e005      	b.n	800662e <SVCCTL_App_Notification+0x166>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8006622:	bf00      	nop
 8006624:	e003      	b.n	800662e <SVCCTL_App_Notification+0x166>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8006626:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8006628:	e001      	b.n	800662e <SVCCTL_App_Notification+0x166>
      break;
 800662a:	bf00      	nop
 800662c:	e000      	b.n	8006630 <SVCCTL_App_Notification+0x168>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800662e:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8006630:	2301      	movs	r3, #1
}
 8006632:	4618      	mov	r0, r3
 8006634:	3728      	adds	r7, #40	; 0x28
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	20000110 	.word	0x20000110
 8006640:	20000294 	.word	0x20000294
 8006644:	0001b207 	.word	0x0001b207

08006648 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800664e:	4b06      	ldr	r3, [pc, #24]	; (8006668 <Ble_Tl_Init+0x20>)
 8006650:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8006652:	4b06      	ldr	r3, [pc, #24]	; (800666c <Ble_Tl_Init+0x24>)
 8006654:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8006656:	463b      	mov	r3, r7
 8006658:	4619      	mov	r1, r3
 800665a:	4805      	ldr	r0, [pc, #20]	; (8006670 <Ble_Tl_Init+0x28>)
 800665c:	f7ff f8c0 	bl	80057e0 <hci_init>

  return;
 8006660:	bf00      	nop
}
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	200300d4 	.word	0x200300d4
 800666c:	08006941 	.word	0x08006941
 8006670:	08006909 	.word	0x08006909

08006674 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 8006674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006676:	b08d      	sub	sp, #52	; 0x34
 8006678:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 800667a:	2300      	movs	r3, #0
 800667c:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800667e:	f7fe fdde 	bl	800523e <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 8006682:	f000 f8c1 	bl	8006808 <BleGetBdAddress>
 8006686:	6178      	str	r0, [r7, #20]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	2106      	movs	r1, #6
 800668c:	2000      	movs	r0, #0
 800668e:	f7fe fc96 	bl	8004fbe <aci_hal_write_config_data>
#endif

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8006692:	4a40      	ldr	r2, [pc, #256]	; (8006794 <Ble_Hci_Gap_Gatt_Init+0x120>)
 8006694:	2110      	movs	r1, #16
 8006696:	2018      	movs	r0, #24
 8006698:	f7fe fc91 	bl	8004fbe <aci_hal_write_config_data>

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800669c:	4a3e      	ldr	r2, [pc, #248]	; (8006798 <Ble_Hci_Gap_Gatt_Init+0x124>)
 800669e:	2110      	movs	r1, #16
 80066a0:	2008      	movs	r0, #8
 80066a2:	f7fe fc8c 	bl	8004fbe <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80066a6:	2118      	movs	r1, #24
 80066a8:	2001      	movs	r0, #1
 80066aa:	f7fe fd0d 	bl	80050c8 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 80066ae:	f7fe f9da 	bl	8004a66 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 80066b2:	2300      	movs	r3, #0
 80066b4:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80066b6:	7cfb      	ldrb	r3, [r7, #19]
 80066b8:	f043 0301 	orr.w	r3, r3, #1
 80066bc:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 80066be:	7cfb      	ldrb	r3, [r7, #19]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d01d      	beq.n	8006700 <Ble_Hci_Gap_Gatt_Init+0x8c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 80066c4:	4b35      	ldr	r3, [pc, #212]	; (800679c <Ble_Hci_Gap_Gatt_Init+0x128>)
 80066c6:	60fb      	str	r3, [r7, #12]
    aci_gap_init(role,
 80066c8:	f107 020a 	add.w	r2, r7, #10
 80066cc:	7cf8      	ldrb	r0, [r7, #19]
 80066ce:	1dbb      	adds	r3, r7, #6
 80066d0:	9301      	str	r3, [sp, #4]
 80066d2:	f107 0308 	add.w	r3, r7, #8
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	4613      	mov	r3, r2
 80066da:	2208      	movs	r2, #8
 80066dc:	2100      	movs	r1, #0
 80066de:	f7fe f818 	bl	8004712 <aci_gap_init>
                 CFG_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle,
                 &gap_dev_name_char_handle,
                 &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 80066e2:	897c      	ldrh	r4, [r7, #10]
 80066e4:	893d      	ldrh	r5, [r7, #8]
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f7f9 fd48 	bl	800017c <strlen>
 80066ec:	4603      	mov	r3, r0
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	4613      	mov	r3, r2
 80066f6:	2200      	movs	r2, #0
 80066f8:	4629      	mov	r1, r5
 80066fa:	4620      	mov	r0, r4
 80066fc:	f7fe fbb6 	bl	8004e6c <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8006700:	8978      	ldrh	r0, [r7, #10]
 8006702:	88f9      	ldrh	r1, [r7, #6]
 8006704:	1d3b      	adds	r3, r7, #4
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	2302      	movs	r3, #2
 800670a:	2200      	movs	r2, #0
 800670c:	f7fe fbae 	bl	8004e6c <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8006710:	2202      	movs	r2, #2
 8006712:	2102      	movs	r1, #2
 8006714:	2000      	movs	r0, #0
 8006716:	f7fe fdb6 	bl	8005286 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800671a:	4b21      	ldr	r3, [pc, #132]	; (80067a0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800671c:	2201      	movs	r2, #1
 800671e:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8006720:	4b1f      	ldr	r3, [pc, #124]	; (80067a0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	4618      	mov	r0, r3
 8006726:	f7fd fe75 	bl	8004414 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800672a:	4b1d      	ldr	r3, [pc, #116]	; (80067a0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800672c:	2201      	movs	r2, #1
 800672e:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8006730:	4b1b      	ldr	r3, [pc, #108]	; (80067a0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8006732:	2208      	movs	r2, #8
 8006734:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8006736:	4b1a      	ldr	r3, [pc, #104]	; (80067a0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8006738:	2210      	movs	r2, #16
 800673a:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800673c:	4b18      	ldr	r3, [pc, #96]	; (80067a0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800673e:	2200      	movs	r2, #0
 8006740:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8006742:	4b17      	ldr	r3, [pc, #92]	; (80067a0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8006744:	4a17      	ldr	r2, [pc, #92]	; (80067a4 <Ble_Hci_Gap_Gatt_Init+0x130>)
 8006746:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8006748:	4b15      	ldr	r3, [pc, #84]	; (80067a0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800674a:	2200      	movs	r2, #0
 800674c:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800674e:	4b14      	ldr	r3, [pc, #80]	; (80067a0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8006750:	789c      	ldrb	r4, [r3, #2]
 8006752:	4b13      	ldr	r3, [pc, #76]	; (80067a0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8006754:	785d      	ldrb	r5, [r3, #1]
 8006756:	4b12      	ldr	r3, [pc, #72]	; (80067a0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8006758:	791b      	ldrb	r3, [r3, #4]
 800675a:	4a11      	ldr	r2, [pc, #68]	; (80067a0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800675c:	7952      	ldrb	r2, [r2, #5]
 800675e:	4910      	ldr	r1, [pc, #64]	; (80067a0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8006760:	78c9      	ldrb	r1, [r1, #3]
 8006762:	480f      	ldr	r0, [pc, #60]	; (80067a0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8006764:	6880      	ldr	r0, [r0, #8]
 8006766:	2600      	movs	r6, #0
 8006768:	9604      	str	r6, [sp, #16]
 800676a:	9003      	str	r0, [sp, #12]
 800676c:	9102      	str	r1, [sp, #8]
 800676e:	9201      	str	r2, [sp, #4]
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	2300      	movs	r3, #0
 8006774:	2201      	movs	r2, #1
 8006776:	4629      	mov	r1, r5
 8006778:	4620      	mov	r0, r4
 800677a:	f7fd fe9f 	bl	80044bc <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800677e:	4b08      	ldr	r3, [pc, #32]	; (80067a0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8006780:	789b      	ldrb	r3, [r3, #2]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <Ble_Hci_Gap_Gatt_Init+0x116>
   {
     aci_gap_configure_whitelist();
 8006786:	f7fe f8e3 	bl	8004950 <aci_gap_configure_whitelist>
   }
}
 800678a:	bf00      	nop
 800678c:	371c      	adds	r7, #28
 800678e:	46bd      	mov	sp, r7
 8006790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006792:	bf00      	nop
 8006794:	08007908 	.word	0x08007908
 8006798:	08007918 	.word	0x08007918
 800679c:	08007744 	.word	0x08007744
 80067a0:	20000110 	.word	0x20000110
 80067a4:	0001b207 	.word	0x0001b207

080067a8 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08c      	sub	sp, #48	; 0x30
 80067ac:	af08      	add	r7, sp, #32
 80067ae:	4603      	mov	r3, r0
 80067b0:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80067b2:	2392      	movs	r3, #146	; 0x92
 80067b4:	73fb      	strb	r3, [r7, #15]

    BleApplicationContext.Device_Connection_Status = New_Status;
 80067b6:	4a12      	ldr	r2, [pc, #72]	; (8006800 <Adv_Request+0x58>)
 80067b8:	79fb      	ldrb	r3, [r7, #7]
 80067ba:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 80067be:	2300      	movs	r3, #0
 80067c0:	9306      	str	r3, [sp, #24]
 80067c2:	2300      	movs	r3, #0
 80067c4:	9305      	str	r3, [sp, #20]
 80067c6:	2300      	movs	r3, #0
 80067c8:	9304      	str	r3, [sp, #16]
 80067ca:	2300      	movs	r3, #0
 80067cc:	9303      	str	r3, [sp, #12]
 80067ce:	2300      	movs	r3, #0
 80067d0:	9302      	str	r3, [sp, #8]
 80067d2:	2300      	movs	r3, #0
 80067d4:	9301      	str	r3, [sp, #4]
 80067d6:	2300      	movs	r3, #0
 80067d8:	9300      	str	r3, [sp, #0]
 80067da:	2300      	movs	r3, #0
 80067dc:	22a0      	movs	r2, #160	; 0xa0
 80067de:	2180      	movs	r1, #128	; 0x80
 80067e0:	2000      	movs	r0, #0
 80067e2:	f7fd fd1d 	bl	8004220 <aci_gap_set_discoverable>
 80067e6:	4603      	mov	r3, r0
 80067e8:	73fb      	strb	r3, [r7, #15]
        0,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(ad_data), (uint8_t*) ad_data);
 80067ea:	4906      	ldr	r1, [pc, #24]	; (8006804 <Adv_Request+0x5c>)
 80067ec:	2008      	movs	r0, #8
 80067ee:	f7fe f83d 	bl	800486c <aci_gap_update_adv_data>
 80067f2:	4603      	mov	r3, r0
 80067f4:	73fb      	strb	r3, [r7, #15]
    else
    {
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
    }

  return;
 80067f6:	bf00      	nop
}
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	20000110 	.word	0x20000110
 8006804:	20000010 	.word	0x20000010

08006808 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b086      	sub	sp, #24
 800680c:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800680e:	f7ff fddf 	bl	80063d0 <LL_FLASH_GetUDN>
 8006812:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681a:	d023      	beq.n	8006864 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800681c:	f7ff fdf0 	bl	8006400 <LL_FLASH_GetSTCompanyID>
 8006820:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8006822:	f7ff fde1 	bl	80063e8 <LL_FLASH_GetDeviceID>
 8006826:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	b2da      	uxtb	r2, r3
 800682c:	4b16      	ldr	r3, [pc, #88]	; (8006888 <BleGetBdAddress+0x80>)
 800682e:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	0a1b      	lsrs	r3, r3, #8
 8006834:	b2da      	uxtb	r2, r3
 8006836:	4b14      	ldr	r3, [pc, #80]	; (8006888 <BleGetBdAddress+0x80>)
 8006838:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	b2da      	uxtb	r2, r3
 800683e:	4b12      	ldr	r3, [pc, #72]	; (8006888 <BleGetBdAddress+0x80>)
 8006840:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	b2da      	uxtb	r2, r3
 8006846:	4b10      	ldr	r3, [pc, #64]	; (8006888 <BleGetBdAddress+0x80>)
 8006848:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	0a1b      	lsrs	r3, r3, #8
 800684e:	b2da      	uxtb	r2, r3
 8006850:	4b0d      	ldr	r3, [pc, #52]	; (8006888 <BleGetBdAddress+0x80>)
 8006852:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	0c1b      	lsrs	r3, r3, #16
 8006858:	b2da      	uxtb	r2, r3
 800685a:	4b0b      	ldr	r3, [pc, #44]	; (8006888 <BleGetBdAddress+0x80>)
 800685c:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800685e:	4b0a      	ldr	r3, [pc, #40]	; (8006888 <BleGetBdAddress+0x80>)
 8006860:	617b      	str	r3, [r7, #20]
 8006862:	e00b      	b.n	800687c <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8006864:	2000      	movs	r0, #0
 8006866:	f7ff fccd 	bl	8006204 <OTP_Read>
 800686a:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	617b      	str	r3, [r7, #20]
 8006876:	e001      	b.n	800687c <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8006878:	4b04      	ldr	r3, [pc, #16]	; (800688c <BleGetBdAddress+0x84>)
 800687a:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 800687c:	697b      	ldr	r3, [r7, #20]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3718      	adds	r7, #24
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	2000028c 	.word	0x2000028c
 800688c:	08007900 	.word	0x08007900

08006890 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8006896:	4b0a      	ldr	r3, [pc, #40]	; (80068c0 <Adv_Cancel+0x30>)
 8006898:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800689c:	2b05      	cmp	r3, #5
 800689e:	d00a      	beq.n	80068b6 <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 80068a0:	2300      	movs	r3, #0
 80068a2:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 80068a4:	f7fd fc98 	bl	80041d8 <aci_gap_set_non_discoverable>
 80068a8:	4603      	mov	r3, r0
 80068aa:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80068ac:	4b04      	ldr	r3, [pc, #16]	; (80068c0 <Adv_Cancel+0x30>)
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 80068b4:	bf00      	nop
 80068b6:	bf00      	nop
}
 80068b8:	3708      	adds	r7, #8
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	20000110 	.word	0x20000110

080068c4 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80068cc:	2100      	movs	r1, #0
 80068ce:	2002      	movs	r0, #2
 80068d0:	f000 fd92 	bl	80073f8 <UTIL_SEQ_SetTask>
  return;
 80068d4:	bf00      	nop
}
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80068e4:	2001      	movs	r0, #1
 80068e6:	f000 fdf3 	bl	80074d0 <UTIL_SEQ_SetEvt>
  return;
 80068ea:	bf00      	nop
}
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b082      	sub	sp, #8
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80068fa:	2001      	movs	r0, #1
 80068fc:	f000 fe08 	bl	8007510 <UTIL_SEQ_WaitEvt>
  return;
 8006900:	bf00      	nop
}
 8006902:	3708      	adds	r7, #8
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	3308      	adds	r3, #8
 800691a:	4618      	mov	r0, r3
 800691c:	f7fe fe1a 	bl	8005554 <SVCCTL_UserEvtRx>
 8006920:	4603      	mov	r3, r0
 8006922:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8006924:	7afb      	ldrb	r3, [r7, #11]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d003      	beq.n	8006932 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2201      	movs	r2, #1
 800692e:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8006930:	e003      	b.n	800693a <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	701a      	strb	r2, [r3, #0]
  return;
 8006938:	bf00      	nop
}
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	4603      	mov	r3, r0
 8006948:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800694a:	79fb      	ldrb	r3, [r7, #7]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d002      	beq.n	8006956 <BLE_StatusNot+0x16>
 8006950:	2b01      	cmp	r3, #1
 8006952:	d006      	beq.n	8006962 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8006954:	e00b      	b.n	800696e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8006956:	2307      	movs	r3, #7
 8006958:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f000 fd78 	bl	8007450 <UTIL_SEQ_PauseTask>
      break;
 8006960:	e005      	b.n	800696e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8006962:	2307      	movs	r3, #7
 8006964:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f000 fd92 	bl	8007490 <UTIL_SEQ_ResumeTask>
      break;
 800696c:	bf00      	nop
  }
  return;
 800696e:	bf00      	nop
}
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
	...

08006978 <myTask>:
static void Custom_Mycharnotify_Update_Char(void);
static void Custom_Mycharnotify_Send_Notification(void);

/* USER CODE BEGIN PFP */
	void myTask(void)
	{
 8006978:	b580      	push	{r7, lr}
 800697a:	af00      	add	r7, sp, #0
		//Read the Button State
		if(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 800697c:	2110      	movs	r1, #16
 800697e:	480a      	ldr	r0, [pc, #40]	; (80069a8 <myTask+0x30>)
 8006980:	f7fb fbea 	bl	8002158 <HAL_GPIO_ReadPin>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d108      	bne.n	800699c <myTask+0x24>
		{
			UpdateCharData[0] ^= 0x1;
 800698a:	4b08      	ldr	r3, [pc, #32]	; (80069ac <myTask+0x34>)
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	f083 0301 	eor.w	r3, r3, #1
 8006992:	b2da      	uxtb	r2, r3
 8006994:	4b05      	ldr	r3, [pc, #20]	; (80069ac <myTask+0x34>)
 8006996:	701a      	strb	r2, [r3, #0]
			Custom_Mycharnotify_Update_Char();		//Depends on Characteristic long name from CubeMX
 8006998:	f000 f842 	bl	8006a20 <Custom_Mycharnotify_Update_Char>
		}
		UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 800699c:	2100      	movs	r1, #0
 800699e:	2004      	movs	r0, #4
 80069a0:	f000 fd2a 	bl	80073f8 <UTIL_SEQ_SetTask>
	}
 80069a4:	bf00      	nop
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	48000800 	.word	0x48000800
 80069ac:	20000298 	.word	0x20000298

080069b0 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch(pNotification->Custom_Evt_Opcode)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d006      	beq.n	80069ce <Custom_STM_App_Notification+0x1e>
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	dc06      	bgt.n	80069d2 <Custom_STM_App_Notification+0x22>
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d006      	beq.n	80069d6 <Custom_STM_App_Notification+0x26>
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d006      	beq.n	80069da <Custom_STM_App_Notification+0x2a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 80069cc:	e001      	b.n	80069d2 <Custom_STM_App_Notification+0x22>
      break;
 80069ce:	bf00      	nop
 80069d0:	e004      	b.n	80069dc <Custom_STM_App_Notification+0x2c>
      break;
 80069d2:	bf00      	nop
 80069d4:	e002      	b.n	80069dc <Custom_STM_App_Notification+0x2c>
      break;
 80069d6:	bf00      	nop
 80069d8:	e000      	b.n	80069dc <Custom_STM_App_Notification+0x2c>
      break;
 80069da:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 80069dc:	bf00      	nop
}
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch(pNotification->Custom_Evt_Opcode)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d002      	beq.n	80069fe <Custom_APP_Notification+0x16>
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d002      	beq.n	8006a02 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 80069fc:	e002      	b.n	8006a04 <Custom_APP_Notification+0x1c>
      break;
 80069fe:	bf00      	nop
 8006a00:	e000      	b.n	8006a04 <Custom_APP_Notification+0x1c>
      break;
 8006a02:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8006a04:	bf00      	nop
}
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8006a10:	b480      	push	{r7}
 8006a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8006a14:	bf00      	nop
}
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
	...

08006a20 <Custom_Mycharnotify_Update_Char>:
 *
 *************************************************************/

  /* LED_SVC */
void Custom_Mycharnotify_Update_Char(void) /* Property Read */
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	af00      	add	r7, sp, #0
  Custom_STM_App_Update_Char(CUSTOM_STM_MYCHARNOTIFY, (uint8_t *)UpdateCharData);
 8006a24:	4902      	ldr	r1, [pc, #8]	; (8006a30 <Custom_Mycharnotify_Update_Char+0x10>)
 8006a26:	2001      	movs	r0, #1
 8006a28:	f000 f918 	bl	8006c5c <Custom_STM_App_Update_Char>
  /* USER CODE BEGIN Mycharnotify_UC*/

  /* USER CODE END Mycharnotify_UC*/
  return;
 8006a2c:	bf00      	nop
}
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	20000298 	.word	0x20000298

08006a34 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b08a      	sub	sp, #40	; 0x28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	3301      	adds	r3, #1
 8006a46:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	2bff      	cmp	r3, #255	; 0xff
 8006a4e:	d157      	bne.n	8006b00 <Custom_STM_Event_Handler+0xcc>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	3302      	adds	r3, #2
 8006a54:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	f640 4214 	movw	r2, #3092	; 0xc14
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d047      	beq.n	8006af4 <Custom_STM_Event_Handler+0xc0>
 8006a64:	f640 4214 	movw	r2, #3092	; 0xc14
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	dc45      	bgt.n	8006af8 <Custom_STM_Event_Handler+0xc4>
 8006a6c:	f640 4201 	movw	r2, #3073	; 0xc01
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d003      	beq.n	8006a7c <Custom_STM_Event_Handler+0x48>
 8006a74:	f640 4213 	movw	r2, #3091	; 0xc13
 8006a78:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8006a7a:	e040      	b.n	8006afe <Custom_STM_Event_Handler+0xca>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	3302      	adds	r3, #2
 8006a80:	61bb      	str	r3, [r7, #24]
          if(attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	885b      	ldrh	r3, [r3, #2]
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	461a      	mov	r2, r3
 8006a8a:	4b21      	ldr	r3, [pc, #132]	; (8006b10 <Custom_STM_Event_Handler+0xdc>)
 8006a8c:	889b      	ldrh	r3, [r3, #4]
 8006a8e:	3302      	adds	r3, #2
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d119      	bne.n	8006ac8 <Custom_STM_Event_Handler+0x94>
            return_value = SVCCTL_EvtAckFlowEnable;
 8006a94:	2301      	movs	r3, #1
 8006a96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch(attribute_modified->Attr_Data[0])
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	7a1b      	ldrb	r3, [r3, #8]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d002      	beq.n	8006aa8 <Custom_STM_Event_Handler+0x74>
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d008      	beq.n	8006ab8 <Custom_STM_Event_Handler+0x84>
              break;
 8006aa6:	e024      	b.n	8006af2 <Custom_STM_Event_Handler+0xbe>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT;
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8006aac:	f107 0308 	add.w	r3, r7, #8
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7ff ff7d 	bl	80069b0 <Custom_STM_App_Notification>
                break;
 8006ab6:	e01c      	b.n	8006af2 <Custom_STM_Event_Handler+0xbe>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8006abc:	f107 0308 	add.w	r3, r7, #8
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7ff ff75 	bl	80069b0 <Custom_STM_App_Notification>
                break;
 8006ac6:	e014      	b.n	8006af2 <Custom_STM_Event_Handler+0xbe>
          else if(attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	885b      	ldrh	r3, [r3, #2]
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	461a      	mov	r2, r3
 8006ad0:	4b0f      	ldr	r3, [pc, #60]	; (8006b10 <Custom_STM_Event_Handler+0xdc>)
 8006ad2:	885b      	ldrh	r3, [r3, #2]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d110      	bne.n	8006afc <Custom_STM_Event_Handler+0xc8>
            return_value = SVCCTL_EvtAckFlowEnable;
 8006ada:	2301      	movs	r3, #1
 8006adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (attribute_modified->Attr_Data[0] == 0x22)
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	7a1b      	ldrb	r3, [r3, #8]
 8006ae4:	2b22      	cmp	r3, #34	; 0x22
 8006ae6:	d109      	bne.n	8006afc <Custom_STM_Event_Handler+0xc8>
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8006ae8:	2101      	movs	r1, #1
 8006aea:	480a      	ldr	r0, [pc, #40]	; (8006b14 <Custom_STM_Event_Handler+0xe0>)
 8006aec:	f7fb fb64 	bl	80021b8 <HAL_GPIO_TogglePin>
          break;
 8006af0:	e004      	b.n	8006afc <Custom_STM_Event_Handler+0xc8>
 8006af2:	e003      	b.n	8006afc <Custom_STM_Event_Handler+0xc8>
          break;
 8006af4:	bf00      	nop
 8006af6:	e004      	b.n	8006b02 <Custom_STM_Event_Handler+0xce>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8006af8:	bf00      	nop
 8006afa:	e002      	b.n	8006b02 <Custom_STM_Event_Handler+0xce>
          break;
 8006afc:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8006afe:	e000      	b.n	8006b02 <Custom_STM_Event_Handler+0xce>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8006b00:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8006b02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 8006b06:	4618      	mov	r0, r3
 8006b08:	3728      	adds	r7, #40	; 0x28
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	200000f4 	.word	0x200000f4
 8006b14:	48000400 	.word	0x48000400

08006b18 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b08a      	sub	sp, #40	; 0x28
 8006b1c:	af06      	add	r7, sp, #24
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8006b1e:	484b      	ldr	r0, [pc, #300]	; (8006c4c <SVCCTL_InitCustomSvc+0x134>)
 8006b20:	f7fe fcfe 	bl	8005520 <SVCCTL_RegisterSvcHandler>
   *                                2 for myCharNotify +
   *                                1 for myCharNotify configuration descriptor +
   *                              = 6
   */

  COPY_LED_SVC_UUID(uuid.Char_UUID_128);
 8006b24:	238f      	movs	r3, #143	; 0x8f
 8006b26:	703b      	strb	r3, [r7, #0]
 8006b28:	23e5      	movs	r3, #229	; 0xe5
 8006b2a:	707b      	strb	r3, [r7, #1]
 8006b2c:	23b3      	movs	r3, #179	; 0xb3
 8006b2e:	70bb      	strb	r3, [r7, #2]
 8006b30:	23d5      	movs	r3, #213	; 0xd5
 8006b32:	70fb      	strb	r3, [r7, #3]
 8006b34:	232e      	movs	r3, #46	; 0x2e
 8006b36:	713b      	strb	r3, [r7, #4]
 8006b38:	237f      	movs	r3, #127	; 0x7f
 8006b3a:	717b      	strb	r3, [r7, #5]
 8006b3c:	234a      	movs	r3, #74	; 0x4a
 8006b3e:	71bb      	strb	r3, [r7, #6]
 8006b40:	2398      	movs	r3, #152	; 0x98
 8006b42:	71fb      	strb	r3, [r7, #7]
 8006b44:	232a      	movs	r3, #42	; 0x2a
 8006b46:	723b      	strb	r3, [r7, #8]
 8006b48:	2348      	movs	r3, #72	; 0x48
 8006b4a:	727b      	strb	r3, [r7, #9]
 8006b4c:	237a      	movs	r3, #122	; 0x7a
 8006b4e:	72bb      	strb	r3, [r7, #10]
 8006b50:	23cc      	movs	r3, #204	; 0xcc
 8006b52:	72fb      	strb	r3, [r7, #11]
 8006b54:	2300      	movs	r3, #0
 8006b56:	733b      	strb	r3, [r7, #12]
 8006b58:	2300      	movs	r3, #0
 8006b5a:	737b      	strb	r3, [r7, #13]
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	73bb      	strb	r3, [r7, #14]
 8006b60:	2300      	movs	r3, #0
 8006b62:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_service(UUID_TYPE_128,
 8006b64:	4639      	mov	r1, r7
 8006b66:	4b3a      	ldr	r3, [pc, #232]	; (8006c50 <SVCCTL_InitCustomSvc+0x138>)
 8006b68:	9300      	str	r3, [sp, #0]
 8006b6a:	2306      	movs	r3, #6
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	2002      	movs	r0, #2
 8006b70:	f7fd ff9e 	bl	8004ab0 <aci_gatt_add_service>
                       &(CustomContext.CustomLed_SvcHdle));

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 8006b74:	2319      	movs	r3, #25
 8006b76:	703b      	strb	r3, [r7, #0]
 8006b78:	23ed      	movs	r3, #237	; 0xed
 8006b7a:	707b      	strb	r3, [r7, #1]
 8006b7c:	2382      	movs	r3, #130	; 0x82
 8006b7e:	70bb      	strb	r3, [r7, #2]
 8006b80:	23ae      	movs	r3, #174	; 0xae
 8006b82:	70fb      	strb	r3, [r7, #3]
 8006b84:	23ed      	movs	r3, #237	; 0xed
 8006b86:	713b      	strb	r3, [r7, #4]
 8006b88:	2321      	movs	r3, #33	; 0x21
 8006b8a:	717b      	strb	r3, [r7, #5]
 8006b8c:	234c      	movs	r3, #76	; 0x4c
 8006b8e:	71bb      	strb	r3, [r7, #6]
 8006b90:	239d      	movs	r3, #157	; 0x9d
 8006b92:	71fb      	strb	r3, [r7, #7]
 8006b94:	2341      	movs	r3, #65	; 0x41
 8006b96:	723b      	strb	r3, [r7, #8]
 8006b98:	2345      	movs	r3, #69	; 0x45
 8006b9a:	727b      	strb	r3, [r7, #9]
 8006b9c:	2322      	movs	r3, #34	; 0x22
 8006b9e:	72bb      	strb	r3, [r7, #10]
 8006ba0:	238e      	movs	r3, #142	; 0x8e
 8006ba2:	72fb      	strb	r3, [r7, #11]
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	733b      	strb	r3, [r7, #12]
 8006ba8:	2300      	movs	r3, #0
 8006baa:	737b      	strb	r3, [r7, #13]
 8006bac:	2300      	movs	r3, #0
 8006bae:	73bb      	strb	r3, [r7, #14]
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomLed_SvcHdle,
 8006bb4:	4b26      	ldr	r3, [pc, #152]	; (8006c50 <SVCCTL_InitCustomSvc+0x138>)
 8006bb6:	8818      	ldrh	r0, [r3, #0]
 8006bb8:	2301      	movs	r3, #1
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	463a      	mov	r2, r7
 8006bbe:	4925      	ldr	r1, [pc, #148]	; (8006c54 <SVCCTL_InitCustomSvc+0x13c>)
 8006bc0:	9105      	str	r1, [sp, #20]
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	9104      	str	r1, [sp, #16]
 8006bc6:	2110      	movs	r1, #16
 8006bc8:	9103      	str	r1, [sp, #12]
 8006bca:	2101      	movs	r1, #1
 8006bcc:	9102      	str	r1, [sp, #8]
 8006bce:	2100      	movs	r1, #0
 8006bd0:	9101      	str	r1, [sp, #4]
 8006bd2:	2108      	movs	r1, #8
 8006bd4:	9100      	str	r1, [sp, #0]
 8006bd6:	2102      	movs	r1, #2
 8006bd8:	f7fe f840 	bl	8004c5c <aci_gatt_add_char>
                    CHAR_VALUE_LEN_CONSTANT,
                    &(CustomContext.CustomMycharwriteHdle));
  /**
   *  myCharNotify
   */
  COPY_MYCHARNOTIFY_UUID(uuid.Char_UUID_128);
 8006bdc:	2319      	movs	r3, #25
 8006bde:	703b      	strb	r3, [r7, #0]
 8006be0:	23ed      	movs	r3, #237	; 0xed
 8006be2:	707b      	strb	r3, [r7, #1]
 8006be4:	2382      	movs	r3, #130	; 0x82
 8006be6:	70bb      	strb	r3, [r7, #2]
 8006be8:	23ae      	movs	r3, #174	; 0xae
 8006bea:	70fb      	strb	r3, [r7, #3]
 8006bec:	23ed      	movs	r3, #237	; 0xed
 8006bee:	713b      	strb	r3, [r7, #4]
 8006bf0:	2321      	movs	r3, #33	; 0x21
 8006bf2:	717b      	strb	r3, [r7, #5]
 8006bf4:	234c      	movs	r3, #76	; 0x4c
 8006bf6:	71bb      	strb	r3, [r7, #6]
 8006bf8:	239d      	movs	r3, #157	; 0x9d
 8006bfa:	71fb      	strb	r3, [r7, #7]
 8006bfc:	2341      	movs	r3, #65	; 0x41
 8006bfe:	723b      	strb	r3, [r7, #8]
 8006c00:	2345      	movs	r3, #69	; 0x45
 8006c02:	727b      	strb	r3, [r7, #9]
 8006c04:	2322      	movs	r3, #34	; 0x22
 8006c06:	72bb      	strb	r3, [r7, #10]
 8006c08:	238e      	movs	r3, #142	; 0x8e
 8006c0a:	72fb      	strb	r3, [r7, #11]
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	733b      	strb	r3, [r7, #12]
 8006c10:	2300      	movs	r3, #0
 8006c12:	737b      	strb	r3, [r7, #13]
 8006c14:	2300      	movs	r3, #0
 8006c16:	73bb      	strb	r3, [r7, #14]
 8006c18:	2300      	movs	r3, #0
 8006c1a:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomLed_SvcHdle,
 8006c1c:	4b0c      	ldr	r3, [pc, #48]	; (8006c50 <SVCCTL_InitCustomSvc+0x138>)
 8006c1e:	8818      	ldrh	r0, [r3, #0]
 8006c20:	2301      	movs	r3, #1
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	463a      	mov	r2, r7
 8006c26:	490c      	ldr	r1, [pc, #48]	; (8006c58 <SVCCTL_InitCustomSvc+0x140>)
 8006c28:	9105      	str	r1, [sp, #20]
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	9104      	str	r1, [sp, #16]
 8006c2e:	2110      	movs	r1, #16
 8006c30:	9103      	str	r1, [sp, #12]
 8006c32:	2107      	movs	r1, #7
 8006c34:	9102      	str	r1, [sp, #8]
 8006c36:	2100      	movs	r1, #0
 8006c38:	9101      	str	r1, [sp, #4]
 8006c3a:	2110      	movs	r1, #16
 8006c3c:	9100      	str	r1, [sp, #0]
 8006c3e:	2102      	movs	r1, #2
 8006c40:	f7fe f80c 	bl	8004c5c <aci_gatt_add_char>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8006c44:	bf00      	nop
}
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	08006a35 	.word	0x08006a35
 8006c50:	200000f4 	.word	0x200000f4
 8006c54:	200000f6 	.word	0x200000f6
 8006c58:	200000f8 	.word	0x200000f8

08006c5c <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af02      	add	r7, sp, #8
 8006c62:	4603      	mov	r3, r0
 8006c64:	6039      	str	r1, [r7, #0]
 8006c66:	71fb      	strb	r3, [r7, #7]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8006c68:	2392      	movs	r3, #146	; 0x92
 8006c6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch(CharOpcode)
 8006c6c:	79fb      	ldrb	r3, [r7, #7]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d002      	beq.n	8006c78 <Custom_STM_App_Update_Char+0x1c>
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d00e      	beq.n	8006c94 <Custom_STM_App_Update_Char+0x38>

      /* USER CODE END CUSTOM_STM_Service_1_Char_2*/
      break;

    default:
      break;
 8006c76:	e01b      	b.n	8006cb0 <Custom_STM_App_Update_Char+0x54>
      result = aci_gatt_update_char_value(CustomContext.CustomLed_SvcHdle,
 8006c78:	4b10      	ldr	r3, [pc, #64]	; (8006cbc <Custom_STM_App_Update_Char+0x60>)
 8006c7a:	8818      	ldrh	r0, [r3, #0]
 8006c7c:	4b0f      	ldr	r3, [pc, #60]	; (8006cbc <Custom_STM_App_Update_Char+0x60>)
 8006c7e:	8859      	ldrh	r1, [r3, #2]
 8006c80:	2201      	movs	r2, #1
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	4613      	mov	r3, r2
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f7fe f8ef 	bl	8004e6c <aci_gatt_update_char_value>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	73fb      	strb	r3, [r7, #15]
      break;
 8006c92:	e00d      	b.n	8006cb0 <Custom_STM_App_Update_Char+0x54>
      result = aci_gatt_update_char_value(CustomContext.CustomLed_SvcHdle,
 8006c94:	4b09      	ldr	r3, [pc, #36]	; (8006cbc <Custom_STM_App_Update_Char+0x60>)
 8006c96:	8818      	ldrh	r0, [r3, #0]
 8006c98:	4b08      	ldr	r3, [pc, #32]	; (8006cbc <Custom_STM_App_Update_Char+0x60>)
 8006c9a:	8899      	ldrh	r1, [r3, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f7fe f8e1 	bl	8004e6c <aci_gatt_update_char_value>
 8006caa:	4603      	mov	r3, r0
 8006cac:	73fb      	strb	r3, [r7, #15]
      break;
 8006cae:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return result;
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	200000f4 	.word	0x200000f4

08006cc0 <LL_PWR_EnableBootC2>:
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8006cc4:	4b05      	ldr	r3, [pc, #20]	; (8006cdc <LL_PWR_EnableBootC2+0x1c>)
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	4a04      	ldr	r2, [pc, #16]	; (8006cdc <LL_PWR_EnableBootC2+0x1c>)
 8006cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cce:	60d3      	str	r3, [r2, #12]
}
 8006cd0:	bf00      	nop
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	58000400 	.word	0x58000400

08006ce0 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8006ce8:	4b06      	ldr	r3, [pc, #24]	; (8006d04 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8006cea:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8006cee:	4905      	ldr	r1, [pc, #20]	; (8006d04 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr
 8006d04:	58000800 	.word	0x58000800

08006d08 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8006d10:	4b05      	ldr	r3, [pc, #20]	; (8006d28 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006d12:	6a1a      	ldr	r2, [r3, #32]
 8006d14:	4904      	ldr	r1, [pc, #16]	; (8006d28 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	620b      	str	r3, [r1, #32]
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr
 8006d28:	58000800 	.word	0x58000800

08006d2c <LL_AHB3_GRP1_EnableClock>:
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006d50:	68fb      	ldr	r3, [r7, #12]
}
 8006d52:	bf00      	nop
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b085      	sub	sp, #20
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8006d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d6a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8006d6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8006d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d7e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4013      	ands	r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006d88:	68fb      	ldr	r3, [r7, #12]
}
 8006d8a:	bf00      	nop
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <LL_C1_IPCC_EnableIT_TXF>:
{
 8006d96:	b480      	push	{r7}
 8006d98:	b083      	sub	sp, #12
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	601a      	str	r2, [r3, #0]
}
 8006daa:	bf00      	nop
 8006dac:	370c      	adds	r7, #12
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <LL_C1_IPCC_EnableIT_RXO>:
{
 8006db6:	b480      	push	{r7}
 8006db8:	b083      	sub	sp, #12
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f043 0201 	orr.w	r2, r3, #1
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	601a      	str	r2, [r3, #0]
}
 8006dca:	bf00      	nop
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b083      	sub	sp, #12
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685a      	ldr	r2, [r3, #4]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	041b      	lsls	r3, r3, #16
 8006de8:	43db      	mvns	r3, r3
 8006dea:	401a      	ands	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	605a      	str	r2, [r3, #4]
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <LL_C1_IPCC_DisableTransmitChannel>:
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685a      	ldr	r2, [r3, #4]
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	041b      	lsls	r3, r3, #16
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	605a      	str	r2, [r3, #4]
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685a      	ldr	r2, [r3, #4]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	43db      	mvns	r3, r3
 8006e32:	401a      	ands	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	605a      	str	r2, [r3, #4]
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	609a      	str	r2, [r3, #8]
}
 8006e54:	bf00      	nop
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <LL_C1_IPCC_SetFlag_CHx>:
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	041a      	lsls	r2, r3, #16
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	609a      	str	r2, [r3, #8]
}
 8006e72:	bf00      	nop
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b083      	sub	sp, #12
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
 8006e86:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	68da      	ldr	r2, [r3, #12]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	4013      	ands	r3, r2
 8006e90:	683a      	ldr	r2, [r7, #0]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d101      	bne.n	8006e9a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8006e96:	2301      	movs	r3, #1
 8006e98:	e000      	b.n	8006e9c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	69da      	ldr	r2, [r3, #28]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	4013      	ands	r3, r2
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d101      	bne.n	8006ec4 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e000      	b.n	8006ec6 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
	...

08006ed4 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8006ed8:	2102      	movs	r1, #2
 8006eda:	4819      	ldr	r0, [pc, #100]	; (8006f40 <HW_IPCC_Rx_Handler+0x6c>)
 8006edc:	f7ff ffe4 	bl	8006ea8 <LL_C2_IPCC_IsActiveFlag_CHx>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d009      	beq.n	8006efa <HW_IPCC_Rx_Handler+0x26>
 8006ee6:	4b16      	ldr	r3, [pc, #88]	; (8006f40 <HW_IPCC_Rx_Handler+0x6c>)
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	43db      	mvns	r3, r3
 8006eec:	f003 0302 	and.w	r3, r3, #2
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d002      	beq.n	8006efa <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8006ef4:	f000 f8da 	bl	80070ac <HW_IPCC_SYS_EvtHandler>
 8006ef8:	e01f      	b.n	8006f3a <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8006efa:	2101      	movs	r1, #1
 8006efc:	4810      	ldr	r0, [pc, #64]	; (8006f40 <HW_IPCC_Rx_Handler+0x6c>)
 8006efe:	f7ff ffd3 	bl	8006ea8 <LL_C2_IPCC_IsActiveFlag_CHx>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d008      	beq.n	8006f1a <HW_IPCC_Rx_Handler+0x46>
 8006f08:	4b0d      	ldr	r3, [pc, #52]	; (8006f40 <HW_IPCC_Rx_Handler+0x6c>)
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d102      	bne.n	8006f1a <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8006f14:	f000 f88e 	bl	8007034 <HW_IPCC_BLE_EvtHandler>
 8006f18:	e00f      	b.n	8006f3a <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8006f1a:	2108      	movs	r1, #8
 8006f1c:	4808      	ldr	r0, [pc, #32]	; (8006f40 <HW_IPCC_Rx_Handler+0x6c>)
 8006f1e:	f7ff ffc3 	bl	8006ea8 <LL_C2_IPCC_IsActiveFlag_CHx>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d009      	beq.n	8006f3c <HW_IPCC_Rx_Handler+0x68>
 8006f28:	4b05      	ldr	r3, [pc, #20]	; (8006f40 <HW_IPCC_Rx_Handler+0x6c>)
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	43db      	mvns	r3, r3
 8006f2e:	f003 0308 	and.w	r3, r3, #8
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8006f36:	f000 f905 	bl	8007144 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8006f3a:	bf00      	nop
 8006f3c:	bf00      	nop
}
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	58000c00 	.word	0x58000c00

08006f44 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8006f48:	2102      	movs	r1, #2
 8006f4a:	481a      	ldr	r0, [pc, #104]	; (8006fb4 <HW_IPCC_Tx_Handler+0x70>)
 8006f4c:	f7ff ff97 	bl	8006e7e <LL_C1_IPCC_IsActiveFlag_CHx>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d109      	bne.n	8006f6a <HW_IPCC_Tx_Handler+0x26>
 8006f56:	4b17      	ldr	r3, [pc, #92]	; (8006fb4 <HW_IPCC_Tx_Handler+0x70>)
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	43db      	mvns	r3, r3
 8006f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8006f64:	f000 f896 	bl	8007094 <HW_IPCC_SYS_CmdEvtHandler>
 8006f68:	e020      	b.n	8006fac <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8006f6a:	2108      	movs	r1, #8
 8006f6c:	4811      	ldr	r0, [pc, #68]	; (8006fb4 <HW_IPCC_Tx_Handler+0x70>)
 8006f6e:	f7ff ff86 	bl	8006e7e <LL_C1_IPCC_IsActiveFlag_CHx>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d109      	bne.n	8006f8c <HW_IPCC_Tx_Handler+0x48>
 8006f78:	4b0e      	ldr	r3, [pc, #56]	; (8006fb4 <HW_IPCC_Tx_Handler+0x70>)
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	43db      	mvns	r3, r3
 8006f7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d002      	beq.n	8006f8c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8006f86:	f000 f8bf 	bl	8007108 <HW_IPCC_MM_FreeBufHandler>
 8006f8a:	e00f      	b.n	8006fac <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8006f8c:	2120      	movs	r1, #32
 8006f8e:	4809      	ldr	r0, [pc, #36]	; (8006fb4 <HW_IPCC_Tx_Handler+0x70>)
 8006f90:	f7ff ff75 	bl	8006e7e <LL_C1_IPCC_IsActiveFlag_CHx>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d109      	bne.n	8006fae <HW_IPCC_Tx_Handler+0x6a>
 8006f9a:	4b06      	ldr	r3, [pc, #24]	; (8006fb4 <HW_IPCC_Tx_Handler+0x70>)
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	43db      	mvns	r3, r3
 8006fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d002      	beq.n	8006fae <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8006fa8:	f000 f850 	bl	800704c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8006fac:	bf00      	nop
 8006fae:	bf00      	nop
}
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	58000c00 	.word	0x58000c00

08006fb8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8006fbc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006fc0:	f7ff fecd 	bl	8006d5e <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8006fc4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006fc8:	f7ff fe8a 	bl	8006ce0 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8006fcc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006fd0:	f7ff fe9a 	bl	8006d08 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8006fd4:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8006fd6:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8006fd8:	f7ff fe72 	bl	8006cc0 <LL_PWR_EnableBootC2>

  return;
 8006fdc:	bf00      	nop
}
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8006fe4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006fe8:	f7ff fea0 	bl	8006d2c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8006fec:	4806      	ldr	r0, [pc, #24]	; (8007008 <HW_IPCC_Init+0x28>)
 8006fee:	f7ff fee2 	bl	8006db6 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8006ff2:	4805      	ldr	r0, [pc, #20]	; (8007008 <HW_IPCC_Init+0x28>)
 8006ff4:	f7ff fecf 	bl	8006d96 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8006ff8:	202c      	movs	r0, #44	; 0x2c
 8006ffa:	f7fa fef8 	bl	8001dee <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8006ffe:	202d      	movs	r0, #45	; 0x2d
 8007000:	f7fa fef5 	bl	8001dee <HAL_NVIC_EnableIRQ>

  return;
 8007004:	bf00      	nop
}
 8007006:	bd80      	pop	{r7, pc}
 8007008:	58000c00 	.word	0x58000c00

0800700c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800700c:	b580      	push	{r7, lr}
 800700e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8007010:	2101      	movs	r1, #1
 8007012:	4802      	ldr	r0, [pc, #8]	; (800701c <HW_IPCC_BLE_Init+0x10>)
 8007014:	f7ff ff04 	bl	8006e20 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8007018:	bf00      	nop
}
 800701a:	bd80      	pop	{r7, pc}
 800701c:	58000c00 	.word	0x58000c00

08007020 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8007024:	2101      	movs	r1, #1
 8007026:	4802      	ldr	r0, [pc, #8]	; (8007030 <HW_IPCC_BLE_SendCmd+0x10>)
 8007028:	f7ff ff1a 	bl	8006e60 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800702c:	bf00      	nop
}
 800702e:	bd80      	pop	{r7, pc}
 8007030:	58000c00 	.word	0x58000c00

08007034 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8007034:	b580      	push	{r7, lr}
 8007036:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8007038:	f7fe ff2c 	bl	8005e94 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800703c:	2101      	movs	r1, #1
 800703e:	4802      	ldr	r0, [pc, #8]	; (8007048 <HW_IPCC_BLE_EvtHandler+0x14>)
 8007040:	f7ff ff00 	bl	8006e44 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007044:	bf00      	nop
}
 8007046:	bd80      	pop	{r7, pc}
 8007048:	58000c00 	.word	0x58000c00

0800704c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8007050:	2120      	movs	r1, #32
 8007052:	4803      	ldr	r0, [pc, #12]	; (8007060 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8007054:	f7ff fed2 	bl	8006dfc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8007058:	f7fe ff4c 	bl	8005ef4 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800705c:	bf00      	nop
}
 800705e:	bd80      	pop	{r7, pc}
 8007060:	58000c00 	.word	0x58000c00

08007064 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8007068:	2102      	movs	r1, #2
 800706a:	4802      	ldr	r0, [pc, #8]	; (8007074 <HW_IPCC_SYS_Init+0x10>)
 800706c:	f7ff fed8 	bl	8006e20 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8007070:	bf00      	nop
}
 8007072:	bd80      	pop	{r7, pc}
 8007074:	58000c00 	.word	0x58000c00

08007078 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800707c:	2102      	movs	r1, #2
 800707e:	4804      	ldr	r0, [pc, #16]	; (8007090 <HW_IPCC_SYS_SendCmd+0x18>)
 8007080:	f7ff feee 	bl	8006e60 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007084:	2102      	movs	r1, #2
 8007086:	4802      	ldr	r0, [pc, #8]	; (8007090 <HW_IPCC_SYS_SendCmd+0x18>)
 8007088:	f7ff fea5 	bl	8006dd6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800708c:	bf00      	nop
}
 800708e:	bd80      	pop	{r7, pc}
 8007090:	58000c00 	.word	0x58000c00

08007094 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8007094:	b580      	push	{r7, lr}
 8007096:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007098:	2102      	movs	r1, #2
 800709a:	4803      	ldr	r0, [pc, #12]	; (80070a8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800709c:	f7ff feae 	bl	8006dfc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80070a0:	f7fe ff78 	bl	8005f94 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80070a4:	bf00      	nop
}
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	58000c00 	.word	0x58000c00

080070ac <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80070b0:	f7fe ff86 	bl	8005fc0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80070b4:	2102      	movs	r1, #2
 80070b6:	4802      	ldr	r0, [pc, #8]	; (80070c0 <HW_IPCC_SYS_EvtHandler+0x14>)
 80070b8:	f7ff fec4 	bl	8006e44 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80070bc:	bf00      	nop
}
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	58000c00 	.word	0x58000c00

080070c4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80070cc:	2108      	movs	r1, #8
 80070ce:	480c      	ldr	r0, [pc, #48]	; (8007100 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80070d0:	f7ff fed5 	bl	8006e7e <LL_C1_IPCC_IsActiveFlag_CHx>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d007      	beq.n	80070ea <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80070da:	4a0a      	ldr	r2, [pc, #40]	; (8007104 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80070e0:	2108      	movs	r1, #8
 80070e2:	4807      	ldr	r0, [pc, #28]	; (8007100 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80070e4:	f7ff fe77 	bl	8006dd6 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80070e8:	e006      	b.n	80070f8 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80070ee:	2108      	movs	r1, #8
 80070f0:	4803      	ldr	r0, [pc, #12]	; (8007100 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80070f2:	f7ff feb5 	bl	8006e60 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80070f6:	bf00      	nop
}
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	58000c00 	.word	0x58000c00
 8007104:	20000390 	.word	0x20000390

08007108 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800710c:	2108      	movs	r1, #8
 800710e:	4806      	ldr	r0, [pc, #24]	; (8007128 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8007110:	f7ff fe74 	bl	8006dfc <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8007114:	4b05      	ldr	r3, [pc, #20]	; (800712c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800711a:	2108      	movs	r1, #8
 800711c:	4802      	ldr	r0, [pc, #8]	; (8007128 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800711e:	f7ff fe9f 	bl	8006e60 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8007122:	bf00      	nop
}
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	58000c00 	.word	0x58000c00
 800712c:	20000390 	.word	0x20000390

08007130 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8007130:	b580      	push	{r7, lr}
 8007132:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8007134:	2108      	movs	r1, #8
 8007136:	4802      	ldr	r0, [pc, #8]	; (8007140 <HW_IPCC_TRACES_Init+0x10>)
 8007138:	f7ff fe72 	bl	8006e20 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800713c:	bf00      	nop
}
 800713e:	bd80      	pop	{r7, pc}
 8007140:	58000c00 	.word	0x58000c00

08007144 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8007144:	b580      	push	{r7, lr}
 8007146:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8007148:	f7fe ffe2 	bl	8006110 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800714c:	2108      	movs	r1, #8
 800714e:	4802      	ldr	r0, [pc, #8]	; (8007158 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8007150:	f7ff fe78 	bl	8006e44 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007154:	bf00      	nop
}
 8007156:	bd80      	pop	{r7, pc}
 8007158:	58000c00 	.word	0x58000c00

0800715c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800715c:	b480      	push	{r7}
 800715e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8007160:	4b05      	ldr	r3, [pc, #20]	; (8007178 <UTIL_LPM_Init+0x1c>)
 8007162:	2200      	movs	r2, #0
 8007164:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8007166:	4b05      	ldr	r3, [pc, #20]	; (800717c <UTIL_LPM_Init+0x20>)
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800716c:	bf00      	nop
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	20000394 	.word	0x20000394
 800717c:	20000398 	.word	0x20000398

08007180 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8007180:	b480      	push	{r7}
 8007182:	b087      	sub	sp, #28
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	460b      	mov	r3, r1
 800718a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800718c:	f3ef 8310 	mrs	r3, PRIMASK
 8007190:	613b      	str	r3, [r7, #16]
  return(result);
 8007192:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8007194:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007196:	b672      	cpsid	i
}
 8007198:	bf00      	nop
  
  switch(state)
 800719a:	78fb      	ldrb	r3, [r7, #3]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d008      	beq.n	80071b2 <UTIL_LPM_SetOffMode+0x32>
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d10e      	bne.n	80071c2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80071a4:	4b0d      	ldr	r3, [pc, #52]	; (80071dc <UTIL_LPM_SetOffMode+0x5c>)
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	4a0b      	ldr	r2, [pc, #44]	; (80071dc <UTIL_LPM_SetOffMode+0x5c>)
 80071ae:	6013      	str	r3, [r2, #0]
      break;
 80071b0:	e008      	b.n	80071c4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	43da      	mvns	r2, r3
 80071b6:	4b09      	ldr	r3, [pc, #36]	; (80071dc <UTIL_LPM_SetOffMode+0x5c>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4013      	ands	r3, r2
 80071bc:	4a07      	ldr	r2, [pc, #28]	; (80071dc <UTIL_LPM_SetOffMode+0x5c>)
 80071be:	6013      	str	r3, [r2, #0]
      break;
 80071c0:	e000      	b.n	80071c4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80071c2:	bf00      	nop
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f383 8810 	msr	PRIMASK, r3
}
 80071ce:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80071d0:	bf00      	nop
 80071d2:	371c      	adds	r7, #28
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	20000398 	.word	0x20000398

080071e0 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b08c      	sub	sp, #48	; 0x30
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80071e8:	4b6a      	ldr	r3, [pc, #424]	; (8007394 <UTIL_SEQ_Run+0x1b4>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	627b      	str	r3, [r7, #36]	; 0x24
  SuperMask &= Mask_bm;
 80071ee:	4b69      	ldr	r3, [pc, #420]	; (8007394 <UTIL_SEQ_Run+0x1b4>)
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4013      	ands	r3, r2
 80071f6:	4a67      	ldr	r2, [pc, #412]	; (8007394 <UTIL_SEQ_Run+0x1b4>)
 80071f8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80071fa:	4b67      	ldr	r3, [pc, #412]	; (8007398 <UTIL_SEQ_Run+0x1b8>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8007200:	e086      	b.n	8007310 <UTIL_SEQ_Run+0x130>
  {
    counter = 0U;
 8007202:	2300      	movs	r3, #0
 8007204:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8007206:	e002      	b.n	800720e <UTIL_SEQ_Run+0x2e>
    {
      counter++;
 8007208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720a:	3301      	adds	r3, #1
 800720c:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800720e:	4a63      	ldr	r2, [pc, #396]	; (800739c <UTIL_SEQ_Run+0x1bc>)
 8007210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007212:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007216:	4b62      	ldr	r3, [pc, #392]	; (80073a0 <UTIL_SEQ_Run+0x1c0>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	401a      	ands	r2, r3
 800721c:	4b5d      	ldr	r3, [pc, #372]	; (8007394 <UTIL_SEQ_Run+0x1b4>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4013      	ands	r3, r2
 8007222:	2b00      	cmp	r3, #0
 8007224:	d0f0      	beq.n	8007208 <UTIL_SEQ_Run+0x28>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8007226:	4a5d      	ldr	r2, [pc, #372]	; (800739c <UTIL_SEQ_Run+0x1bc>)
 8007228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800722e:	4b5c      	ldr	r3, [pc, #368]	; (80073a0 <UTIL_SEQ_Run+0x1c0>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	401a      	ands	r2, r3
 8007234:	4b57      	ldr	r3, [pc, #348]	; (8007394 <UTIL_SEQ_Run+0x1b4>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4013      	ands	r3, r2
 800723a:	623b      	str	r3, [r7, #32]
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800723c:	4a57      	ldr	r2, [pc, #348]	; (800739c <UTIL_SEQ_Run+0x1bc>)
 800723e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007240:	00db      	lsls	r3, r3, #3
 8007242:	4413      	add	r3, r2
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	6a3b      	ldr	r3, [r7, #32]
 8007248:	4013      	ands	r3, r2
 800724a:	2b00      	cmp	r3, #0
 800724c:	d106      	bne.n	800725c <UTIL_SEQ_Run+0x7c>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800724e:	4a53      	ldr	r2, [pc, #332]	; (800739c <UTIL_SEQ_Run+0x1bc>)
 8007250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007252:	00db      	lsls	r3, r3, #3
 8007254:	4413      	add	r3, r2
 8007256:	f04f 32ff 	mov.w	r2, #4294967295
 800725a:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800725c:	4a4f      	ldr	r2, [pc, #316]	; (800739c <UTIL_SEQ_Run+0x1bc>)
 800725e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007260:	00db      	lsls	r3, r3, #3
 8007262:	4413      	add	r3, r2
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	6a3b      	ldr	r3, [r7, #32]
 8007268:	4013      	ands	r3, r2
 800726a:	4618      	mov	r0, r3
 800726c:	f000 f9ac 	bl	80075c8 <SEQ_BitPosition>
 8007270:	4603      	mov	r3, r0
 8007272:	461a      	mov	r2, r3
 8007274:	4b4b      	ldr	r3, [pc, #300]	; (80073a4 <UTIL_SEQ_Run+0x1c4>)
 8007276:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8007278:	4a48      	ldr	r2, [pc, #288]	; (800739c <UTIL_SEQ_Run+0x1bc>)
 800727a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727c:	00db      	lsls	r3, r3, #3
 800727e:	4413      	add	r3, r2
 8007280:	685a      	ldr	r2, [r3, #4]
 8007282:	4b48      	ldr	r3, [pc, #288]	; (80073a4 <UTIL_SEQ_Run+0x1c4>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2101      	movs	r1, #1
 8007288:	fa01 f303 	lsl.w	r3, r1, r3
 800728c:	43db      	mvns	r3, r3
 800728e:	401a      	ands	r2, r3
 8007290:	4942      	ldr	r1, [pc, #264]	; (800739c <UTIL_SEQ_Run+0x1bc>)
 8007292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007294:	00db      	lsls	r3, r3, #3
 8007296:	440b      	add	r3, r1
 8007298:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800729a:	f3ef 8310 	mrs	r3, PRIMASK
 800729e:	617b      	str	r3, [r7, #20]
  return(result);
 80072a0:	697b      	ldr	r3, [r7, #20]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80072a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80072a4:	b672      	cpsid	i
}
 80072a6:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80072a8:	4b3e      	ldr	r3, [pc, #248]	; (80073a4 <UTIL_SEQ_Run+0x1c4>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2201      	movs	r2, #1
 80072ae:	fa02 f303 	lsl.w	r3, r2, r3
 80072b2:	43da      	mvns	r2, r3
 80072b4:	4b38      	ldr	r3, [pc, #224]	; (8007398 <UTIL_SEQ_Run+0x1b8>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4013      	ands	r3, r2
 80072ba:	4a37      	ldr	r2, [pc, #220]	; (8007398 <UTIL_SEQ_Run+0x1b8>)
 80072bc:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80072be:	2302      	movs	r3, #2
 80072c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072c2:	e013      	b.n	80072ec <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80072c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c6:	3b01      	subs	r3, #1
 80072c8:	4a34      	ldr	r2, [pc, #208]	; (800739c <UTIL_SEQ_Run+0x1bc>)
 80072ca:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80072ce:	4b35      	ldr	r3, [pc, #212]	; (80073a4 <UTIL_SEQ_Run+0x1c4>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2201      	movs	r2, #1
 80072d4:	fa02 f303 	lsl.w	r3, r2, r3
 80072d8:	43da      	mvns	r2, r3
 80072da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072dc:	3b01      	subs	r3, #1
 80072de:	400a      	ands	r2, r1
 80072e0:	492e      	ldr	r1, [pc, #184]	; (800739c <UTIL_SEQ_Run+0x1bc>)
 80072e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80072e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e8:	3b01      	subs	r3, #1
 80072ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1e8      	bne.n	80072c4 <UTIL_SEQ_Run+0xe4>
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	f383 8810 	msr	PRIMASK, r3
}
 80072fc:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80072fe:	4b29      	ldr	r3, [pc, #164]	; (80073a4 <UTIL_SEQ_Run+0x1c4>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a29      	ldr	r2, [pc, #164]	; (80073a8 <UTIL_SEQ_Run+0x1c8>)
 8007304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007308:	4798      	blx	r3
    
    local_taskset = TaskSet;
 800730a:	4b23      	ldr	r3, [pc, #140]	; (8007398 <UTIL_SEQ_Run+0x1b8>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8007310:	4b23      	ldr	r3, [pc, #140]	; (80073a0 <UTIL_SEQ_Run+0x1c0>)
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007316:	401a      	ands	r2, r3
 8007318:	4b1e      	ldr	r3, [pc, #120]	; (8007394 <UTIL_SEQ_Run+0x1b4>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4013      	ands	r3, r2
 800731e:	2b00      	cmp	r3, #0
 8007320:	d007      	beq.n	8007332 <UTIL_SEQ_Run+0x152>
 8007322:	4b22      	ldr	r3, [pc, #136]	; (80073ac <UTIL_SEQ_Run+0x1cc>)
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	4b22      	ldr	r3, [pc, #136]	; (80073b0 <UTIL_SEQ_Run+0x1d0>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4013      	ands	r3, r2
 800732c:	2b00      	cmp	r3, #0
 800732e:	f43f af68 	beq.w	8007202 <UTIL_SEQ_Run+0x22>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8007332:	4b1c      	ldr	r3, [pc, #112]	; (80073a4 <UTIL_SEQ_Run+0x1c4>)
 8007334:	f04f 32ff 	mov.w	r2, #4294967295
 8007338:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800733a:	f000 f937 	bl	80075ac <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800733e:	f3ef 8310 	mrs	r3, PRIMASK
 8007342:	60fb      	str	r3, [r7, #12]
  return(result);
 8007344:	68fb      	ldr	r3, [r7, #12]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8007346:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8007348:	b672      	cpsid	i
}
 800734a:	bf00      	nop
  local_taskset = TaskSet;
 800734c:	4b12      	ldr	r3, [pc, #72]	; (8007398 <UTIL_SEQ_Run+0x1b8>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	62bb      	str	r3, [r7, #40]	; 0x28
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8007352:	4b13      	ldr	r3, [pc, #76]	; (80073a0 <UTIL_SEQ_Run+0x1c0>)
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007358:	401a      	ands	r2, r3
 800735a:	4b0e      	ldr	r3, [pc, #56]	; (8007394 <UTIL_SEQ_Run+0x1b4>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4013      	ands	r3, r2
 8007360:	2b00      	cmp	r3, #0
 8007362:	d108      	bne.n	8007376 <UTIL_SEQ_Run+0x196>
 8007364:	4b11      	ldr	r3, [pc, #68]	; (80073ac <UTIL_SEQ_Run+0x1cc>)
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	4b11      	ldr	r3, [pc, #68]	; (80073b0 <UTIL_SEQ_Run+0x1d0>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4013      	ands	r3, r2
 800736e:	2b00      	cmp	r3, #0
 8007370:	d101      	bne.n	8007376 <UTIL_SEQ_Run+0x196>
  {
	UTIL_SEQ_Idle( );
 8007372:	f7f9 f9fc 	bl	800076e <UTIL_SEQ_Idle>
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	f383 8810 	msr	PRIMASK, r3
}
 8007380:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 8007382:	f000 f91a 	bl	80075ba <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8007386:	4a03      	ldr	r2, [pc, #12]	; (8007394 <UTIL_SEQ_Run+0x1b4>)
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	6013      	str	r3, [r2, #0]

  return;
 800738c:	bf00      	nop
}
 800738e:	3730      	adds	r7, #48	; 0x30
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	2000001c 	.word	0x2000001c
 8007398:	2000039c 	.word	0x2000039c
 800739c:	2000042c 	.word	0x2000042c
 80073a0:	20000018 	.word	0x20000018
 80073a4:	200003a8 	.word	0x200003a8
 80073a8:	200003ac 	.word	0x200003ac
 80073ac:	200003a0 	.word	0x200003a0
 80073b0:	200003a4 	.word	0x200003a4

080073b4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b088      	sub	sp, #32
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073c0:	f3ef 8310 	mrs	r3, PRIMASK
 80073c4:	617b      	str	r3, [r7, #20]
  return(result);
 80073c6:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80073c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80073ca:	b672      	cpsid	i
}
 80073cc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f000 f8fa 	bl	80075c8 <SEQ_BitPosition>
 80073d4:	4603      	mov	r3, r0
 80073d6:	4619      	mov	r1, r3
 80073d8:	4a06      	ldr	r2, [pc, #24]	; (80073f4 <UTIL_SEQ_RegTask+0x40>)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	f383 8810 	msr	PRIMASK, r3
}
 80073ea:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80073ec:	bf00      	nop
}
 80073ee:	3720      	adds	r7, #32
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	200003ac 	.word	0x200003ac

080073f8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80073f8:	b480      	push	{r7}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007402:	f3ef 8310 	mrs	r3, PRIMASK
 8007406:	60fb      	str	r3, [r7, #12]
  return(result);
 8007408:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800740a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800740c:	b672      	cpsid	i
}
 800740e:	bf00      	nop

  TaskSet |= TaskId_bm;
 8007410:	4b0d      	ldr	r3, [pc, #52]	; (8007448 <UTIL_SEQ_SetTask+0x50>)
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4313      	orrs	r3, r2
 8007418:	4a0b      	ldr	r2, [pc, #44]	; (8007448 <UTIL_SEQ_SetTask+0x50>)
 800741a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800741c:	4a0b      	ldr	r2, [pc, #44]	; (800744c <UTIL_SEQ_SetTask+0x54>)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	431a      	orrs	r2, r3
 8007428:	4908      	ldr	r1, [pc, #32]	; (800744c <UTIL_SEQ_SetTask+0x54>)
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	f383 8810 	msr	PRIMASK, r3
}
 800743a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800743c:	bf00      	nop
}
 800743e:	371c      	adds	r7, #28
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	2000039c 	.word	0x2000039c
 800744c:	2000042c 	.word	0x2000042c

08007450 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8007450:	b480      	push	{r7}
 8007452:	b087      	sub	sp, #28
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007458:	f3ef 8310 	mrs	r3, PRIMASK
 800745c:	60fb      	str	r3, [r7, #12]
  return(result);
 800745e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007460:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007462:	b672      	cpsid	i
}
 8007464:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	43da      	mvns	r2, r3
 800746a:	4b08      	ldr	r3, [pc, #32]	; (800748c <UTIL_SEQ_PauseTask+0x3c>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4013      	ands	r3, r2
 8007470:	4a06      	ldr	r2, [pc, #24]	; (800748c <UTIL_SEQ_PauseTask+0x3c>)
 8007472:	6013      	str	r3, [r2, #0]
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	f383 8810 	msr	PRIMASK, r3
}
 800747e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8007480:	bf00      	nop
}
 8007482:	371c      	adds	r7, #28
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	20000018 	.word	0x20000018

08007490 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8007490:	b480      	push	{r7}
 8007492:	b087      	sub	sp, #28
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007498:	f3ef 8310 	mrs	r3, PRIMASK
 800749c:	60fb      	str	r3, [r7, #12]
  return(result);
 800749e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80074a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80074a2:	b672      	cpsid	i
}
 80074a4:	bf00      	nop

  TaskMask |= TaskId_bm;
 80074a6:	4b09      	ldr	r3, [pc, #36]	; (80074cc <UTIL_SEQ_ResumeTask+0x3c>)
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	4a07      	ldr	r2, [pc, #28]	; (80074cc <UTIL_SEQ_ResumeTask+0x3c>)
 80074b0:	6013      	str	r3, [r2, #0]
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	f383 8810 	msr	PRIMASK, r3
}
 80074bc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80074be:	bf00      	nop
}
 80074c0:	371c      	adds	r7, #28
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	20000018 	.word	0x20000018

080074d0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80074d0:	b480      	push	{r7}
 80074d2:	b087      	sub	sp, #28
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074d8:	f3ef 8310 	mrs	r3, PRIMASK
 80074dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80074de:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80074e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80074e2:	b672      	cpsid	i
}
 80074e4:	bf00      	nop

  EvtSet |= EvtId_bm;
 80074e6:	4b09      	ldr	r3, [pc, #36]	; (800750c <UTIL_SEQ_SetEvt+0x3c>)
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	4a07      	ldr	r2, [pc, #28]	; (800750c <UTIL_SEQ_SetEvt+0x3c>)
 80074f0:	6013      	str	r3, [r2, #0]
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	f383 8810 	msr	PRIMASK, r3
}
 80074fc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80074fe:	bf00      	nop
}
 8007500:	371c      	adds	r7, #28
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	200003a0 	.word	0x200003a0

08007510 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b088      	sub	sp, #32
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8007518:	4b21      	ldr	r3, [pc, #132]	; (80075a0 <UTIL_SEQ_WaitEvt+0x90>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800751e:	4b20      	ldr	r3, [pc, #128]	; (80075a0 <UTIL_SEQ_WaitEvt+0x90>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007526:	d102      	bne.n	800752e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 8007528:	2300      	movs	r3, #0
 800752a:	61fb      	str	r3, [r7, #28]
 800752c:	e005      	b.n	800753a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 800752e:	4b1c      	ldr	r3, [pc, #112]	; (80075a0 <UTIL_SEQ_WaitEvt+0x90>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2201      	movs	r2, #1
 8007534:	fa02 f303 	lsl.w	r3, r2, r3
 8007538:	61fb      	str	r3, [r7, #28]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800753a:	4b1a      	ldr	r3, [pc, #104]	; (80075a4 <UTIL_SEQ_WaitEvt+0x94>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8007540:	4a18      	ldr	r2, [pc, #96]	; (80075a4 <UTIL_SEQ_WaitEvt+0x94>)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 8007546:	e005      	b.n	8007554 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 8007548:	4b16      	ldr	r3, [pc, #88]	; (80075a4 <UTIL_SEQ_WaitEvt+0x94>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4619      	mov	r1, r3
 800754e:	69f8      	ldr	r0, [r7, #28]
 8007550:	f7f9 f914 	bl	800077c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 8007554:	4b14      	ldr	r3, [pc, #80]	; (80075a8 <UTIL_SEQ_WaitEvt+0x98>)
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	4b12      	ldr	r3, [pc, #72]	; (80075a4 <UTIL_SEQ_WaitEvt+0x94>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4013      	ands	r3, r2
 800755e:	2b00      	cmp	r3, #0
 8007560:	d0f2      	beq.n	8007548 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8007562:	4a0f      	ldr	r2, [pc, #60]	; (80075a0 <UTIL_SEQ_WaitEvt+0x90>)
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007568:	f3ef 8310 	mrs	r3, PRIMASK
 800756c:	60bb      	str	r3, [r7, #8]
  return(result);
 800756e:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007570:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007572:	b672      	cpsid	i
}
 8007574:	bf00      	nop

  EvtSet &= (~EvtWaited);
 8007576:	4b0b      	ldr	r3, [pc, #44]	; (80075a4 <UTIL_SEQ_WaitEvt+0x94>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	43da      	mvns	r2, r3
 800757c:	4b0a      	ldr	r3, [pc, #40]	; (80075a8 <UTIL_SEQ_WaitEvt+0x98>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4013      	ands	r3, r2
 8007582:	4a09      	ldr	r2, [pc, #36]	; (80075a8 <UTIL_SEQ_WaitEvt+0x98>)
 8007584:	6013      	str	r3, [r2, #0]
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f383 8810 	msr	PRIMASK, r3
}
 8007590:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8007592:	4a04      	ldr	r2, [pc, #16]	; (80075a4 <UTIL_SEQ_WaitEvt+0x94>)
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	6013      	str	r3, [r2, #0]

  return;
 8007598:	bf00      	nop
}
 800759a:	3720      	adds	r7, #32
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	200003a8 	.word	0x200003a8
 80075a4:	200003a4 	.word	0x200003a4
 80075a8:	200003a0 	.word	0x200003a0

080075ac <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80075ac:	b480      	push	{r7}
 80075ae:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80075b0:	bf00      	nop
}
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80075ba:	b480      	push	{r7}
 80075bc:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80075be:	bf00      	nop
}
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 80075d0:	2300      	movs	r3, #0
 80075d2:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	0c1b      	lsrs	r3, r3, #16
 80075d8:	041b      	lsls	r3, r3, #16
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d104      	bne.n	80075e8 <SEQ_BitPosition+0x20>
 80075de:	2310      	movs	r3, #16
 80075e0:	73fb      	strb	r3, [r7, #15]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	041b      	lsls	r3, r3, #16
 80075e6:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d105      	bne.n	80075fe <SEQ_BitPosition+0x36>
 80075f2:	7bfb      	ldrb	r3, [r7, #15]
 80075f4:	3308      	adds	r3, #8
 80075f6:	73fb      	strb	r3, [r7, #15]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	021b      	lsls	r3, r3, #8
 80075fc:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d105      	bne.n	8007614 <SEQ_BitPosition+0x4c>
 8007608:	7bfb      	ldrb	r3, [r7, #15]
 800760a:	3304      	adds	r3, #4
 800760c:	73fb      	strb	r3, [r7, #15]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	011b      	lsls	r3, r3, #4
 8007612:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	0f1b      	lsrs	r3, r3, #28
 8007618:	4a07      	ldr	r2, [pc, #28]	; (8007638 <SEQ_BitPosition+0x70>)
 800761a:	5cd2      	ldrb	r2, [r2, r3]
 800761c:	7bfb      	ldrb	r3, [r7, #15]
 800761e:	4413      	add	r3, r2
 8007620:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8007622:	7bfb      	ldrb	r3, [r7, #15]
 8007624:	f1c3 031f 	rsb	r3, r3, #31
 8007628:	b2db      	uxtb	r3, r3
}
 800762a:	4618      	mov	r0, r3
 800762c:	3714      	adds	r7, #20
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	08007928 	.word	0x08007928

0800763c <__libc_init_array>:
 800763c:	b570      	push	{r4, r5, r6, lr}
 800763e:	4d0d      	ldr	r5, [pc, #52]	; (8007674 <__libc_init_array+0x38>)
 8007640:	4c0d      	ldr	r4, [pc, #52]	; (8007678 <__libc_init_array+0x3c>)
 8007642:	1b64      	subs	r4, r4, r5
 8007644:	10a4      	asrs	r4, r4, #2
 8007646:	2600      	movs	r6, #0
 8007648:	42a6      	cmp	r6, r4
 800764a:	d109      	bne.n	8007660 <__libc_init_array+0x24>
 800764c:	4d0b      	ldr	r5, [pc, #44]	; (800767c <__libc_init_array+0x40>)
 800764e:	4c0c      	ldr	r4, [pc, #48]	; (8007680 <__libc_init_array+0x44>)
 8007650:	f000 f82e 	bl	80076b0 <_init>
 8007654:	1b64      	subs	r4, r4, r5
 8007656:	10a4      	asrs	r4, r4, #2
 8007658:	2600      	movs	r6, #0
 800765a:	42a6      	cmp	r6, r4
 800765c:	d105      	bne.n	800766a <__libc_init_array+0x2e>
 800765e:	bd70      	pop	{r4, r5, r6, pc}
 8007660:	f855 3b04 	ldr.w	r3, [r5], #4
 8007664:	4798      	blx	r3
 8007666:	3601      	adds	r6, #1
 8007668:	e7ee      	b.n	8007648 <__libc_init_array+0xc>
 800766a:	f855 3b04 	ldr.w	r3, [r5], #4
 800766e:	4798      	blx	r3
 8007670:	3601      	adds	r6, #1
 8007672:	e7f2      	b.n	800765a <__libc_init_array+0x1e>
 8007674:	08007938 	.word	0x08007938
 8007678:	08007938 	.word	0x08007938
 800767c:	08007938 	.word	0x08007938
 8007680:	0800793c 	.word	0x0800793c

08007684 <memcpy>:
 8007684:	440a      	add	r2, r1
 8007686:	4291      	cmp	r1, r2
 8007688:	f100 33ff 	add.w	r3, r0, #4294967295
 800768c:	d100      	bne.n	8007690 <memcpy+0xc>
 800768e:	4770      	bx	lr
 8007690:	b510      	push	{r4, lr}
 8007692:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007696:	f803 4f01 	strb.w	r4, [r3, #1]!
 800769a:	4291      	cmp	r1, r2
 800769c:	d1f9      	bne.n	8007692 <memcpy+0xe>
 800769e:	bd10      	pop	{r4, pc}

080076a0 <memset>:
 80076a0:	4402      	add	r2, r0
 80076a2:	4603      	mov	r3, r0
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d100      	bne.n	80076aa <memset+0xa>
 80076a8:	4770      	bx	lr
 80076aa:	f803 1b01 	strb.w	r1, [r3], #1
 80076ae:	e7f9      	b.n	80076a4 <memset+0x4>

080076b0 <_init>:
 80076b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b2:	bf00      	nop
 80076b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076b6:	bc08      	pop	{r3}
 80076b8:	469e      	mov	lr, r3
 80076ba:	4770      	bx	lr

080076bc <_fini>:
 80076bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076be:	bf00      	nop
 80076c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076c2:	bc08      	pop	{r3}
 80076c4:	469e      	mov	lr, r3
 80076c6:	4770      	bx	lr
