
BLE_WB55_vid12_FromScratch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e82c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f8c  0800e970  0800e970  0001e970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f8fc  0800f8fc  0001f8fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f904  0800f904  0001f904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f908  0800f908  0001f908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f4  20000004  0800f90c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200001f8  0800fb00  000201f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003e  20000294  0800fb99  00020294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  200002d4  0800fbd7  000202d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 00000084  200002e8  0800fbe8  000202e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000084c  2000036c  0800fc6c  0002036c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000bb8  0800fc6c  00020bb8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002036c  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 17 .debug_info   00033a77  00000000  00000000  0002039c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 000065dc  00000000  00000000  00053e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002d38  00000000  00000000  0005a3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002a48  00000000  00000000  0005d128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002f982  00000000  00000000  0005fb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00032381  00000000  00000000  0008f4f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    001098b6  00000000  00000000  000c1873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  001cb129  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000cf30  00000000  00000000  001cb17c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000036c 	.word	0x2000036c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e954 	.word	0x0800e954

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000370 	.word	0x20000370
 800017c:	0800e954 	.word	0x0800e954

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <drawBitmap>:
*/
/**************************************************************************/

void drawBitmap(int16_t x, int16_t y, uint8_t *bitmap, int16_t w,
        int16_t h, uint16_t color, uint16_t bg)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60ba      	str	r2, [r7, #8]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4603      	mov	r3, r0
 8000f08:	81fb      	strh	r3, [r7, #14]
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	81bb      	strh	r3, [r7, #12]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	80fb      	strh	r3, [r7, #6]

    ssd1306_Fill(bg);		//Clear the screen
 8000f12:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f001 fe88 	bl	8002c2c <ssd1306_Fill>

	int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000f1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f20:	3307      	adds	r3, #7
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	da00      	bge.n	8000f28 <drawBitmap+0x2c>
 8000f26:	3307      	adds	r3, #7
 8000f28:	10db      	asrs	r3, r3, #3
 8000f2a:	833b      	strh	r3, [r7, #24]
	uint8_t byte = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	75fb      	strb	r3, [r7, #23]

	//Height
	for (int16_t j = 0; j < h; j++, y++)
 8000f30:	2300      	movs	r3, #0
 8000f32:	83fb      	strh	r3, [r7, #30]
 8000f34:	e068      	b.n	8001008 <drawBitmap+0x10c>
	{
		//Width
		for (int16_t i = 0; i < w; i++)
 8000f36:	2300      	movs	r3, #0
 8000f38:	83bb      	strh	r3, [r7, #28]
 8000f3a:	e053      	b.n	8000fe4 <drawBitmap+0xe8>
		{
				byte = bitmap[j * byteWidth + i / 8];		// Row/Col of byte
 8000f3c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f40:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000f44:	fb03 f202 	mul.w	r2, r3, r2
 8000f48:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	da00      	bge.n	8000f52 <drawBitmap+0x56>
 8000f50:	3307      	adds	r3, #7
 8000f52:	10db      	asrs	r3, r3, #3
 8000f54:	b21b      	sxth	r3, r3
 8000f56:	4413      	add	r3, r2
 8000f58:	461a      	mov	r2, r3
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	75fb      	strb	r3, [r7, #23]

				for (int8_t cnt = 0; cnt < 8; cnt ++)
 8000f62:	2300      	movs	r3, #0
 8000f64:	76fb      	strb	r3, [r7, #27]
 8000f66:	e02f      	b.n	8000fc8 <drawBitmap+0xcc>
				{
					//Shift left to right through byte to get each bit if the return val > 0, there is a 1 in that space.
					if ( (byte & (0x80 >> cnt)) == 0)
 8000f68:	7dfa      	ldrb	r2, [r7, #23]
 8000f6a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000f6e:	2180      	movs	r1, #128	; 0x80
 8000f70:	fa41 f303 	asr.w	r3, r1, r3
 8000f74:	4013      	ands	r3, r2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d110      	bne.n	8000f9c <drawBitmap+0xa0>
					{
						//  If 0, Background
						ssd1306_DrawPixel( x + i + cnt, y, bg);
 8000f7a:	89fb      	ldrh	r3, [r7, #14]
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	8bbb      	ldrh	r3, [r7, #28]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	4413      	add	r3, r2
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	7efb      	ldrb	r3, [r7, #27]
 8000f88:	4413      	add	r3, r2
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	89ba      	ldrh	r2, [r7, #12]
 8000f8e:	b2d1      	uxtb	r1, r2
 8000f90:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	4618      	mov	r0, r3
 8000f96:	f001 fe95 	bl	8002cc4 <ssd1306_DrawPixel>
 8000f9a:	e00f      	b.n	8000fbc <drawBitmap+0xc0>
					}
					else
					{
						//if not 0, Pixel Color
						ssd1306_DrawPixel( x + i + cnt, y, color );
 8000f9c:	89fb      	ldrh	r3, [r7, #14]
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	8bbb      	ldrh	r3, [r7, #28]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	4413      	add	r3, r2
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	7efb      	ldrb	r3, [r7, #27]
 8000faa:	4413      	add	r3, r2
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	89ba      	ldrh	r2, [r7, #12]
 8000fb0:	b2d1      	uxtb	r1, r2
 8000fb2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 fe84 	bl	8002cc4 <ssd1306_DrawPixel>
				for (int8_t cnt = 0; cnt < 8; cnt ++)
 8000fbc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	76fb      	strb	r3, [r7, #27]
 8000fc8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000fcc:	2b07      	cmp	r3, #7
 8000fce:	ddcb      	ble.n	8000f68 <drawBitmap+0x6c>
					}
				}
				// Increment x-pos by 1 byte
				i = i + 7;
 8000fd0:	8bbb      	ldrh	r3, [r7, #28]
 8000fd2:	3307      	adds	r3, #7
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	83bb      	strh	r3, [r7, #28]
		for (int16_t i = 0; i < w; i++)
 8000fd8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	3301      	adds	r3, #1
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	83bb      	strh	r3, [r7, #28]
 8000fe4:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000fe8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	dba5      	blt.n	8000f3c <drawBitmap+0x40>
	for (int16_t j = 0; j < h; j++, y++)
 8000ff0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	83fb      	strh	r3, [r7, #30]
 8000ffc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001000:	b29b      	uxth	r3, r3
 8001002:	3301      	adds	r3, #1
 8001004:	b29b      	uxth	r3, r3
 8001006:	81bb      	strh	r3, [r7, #12]
 8001008:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800100c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001010:	429a      	cmp	r2, r3
 8001012:	db90      	blt.n	8000f36 <drawBitmap+0x3a>
			}
		}

	  ssd1306_UpdateScreen();
 8001014:	f001 fe2e 	bl	8002c74 <ssd1306_UpdateScreen>
	  return;
 8001018:	bf00      	nop

}
 800101a:	3720      	adds	r7, #32
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <writeSmFont>:

    @note	If you don't want overlapping text, clear the screen.
*/
/**************************************************************************/
void writeSmFont(int16_t x, int16_t y, uint16_t color, char* str)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	4603      	mov	r3, r0
 800102a:	81fb      	strh	r3, [r7, #14]
 800102c:	460b      	mov	r3, r1
 800102e:	81bb      	strh	r3, [r7, #12]
 8001030:	4613      	mov	r3, r2
 8001032:	817b      	strh	r3, [r7, #10]
	ssd1306_SetCursor(x, y);
 8001034:	89fb      	ldrh	r3, [r7, #14]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	89ba      	ldrh	r2, [r7, #12]
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	4611      	mov	r1, r2
 800103e:	4618      	mov	r0, r3
 8001040:	f001 ff4e 	bl	8002ee0 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, color);
 8001044:	897b      	ldrh	r3, [r7, #10]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	4a05      	ldr	r2, [pc, #20]	; (8001060 <writeSmFont+0x40>)
 800104a:	ca06      	ldmia	r2, {r1, r2}
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f001 ff21 	bl	8002e94 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8001052:	f001 fe0f 	bl	8002c74 <ssd1306_UpdateScreen>
	return;
 8001056:	bf00      	nop
}
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000004 	.word	0x20000004

08001064 <clearScreen>:
	ssd1306_UpdateScreen();
	return;
}

void clearScreen(uint16_t color)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	80fb      	strh	r3, [r7, #6]
	ssd1306_Fill(color);
 800106e:	88fb      	ldrh	r3, [r7, #6]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f001 fdda 	bl	8002c2c <ssd1306_Fill>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8001080:	b5b0      	push	{r4, r5, r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <APPD_EnableCPU2+0x34>)
 8001088:	1d3c      	adds	r4, r7, #4
 800108a:	461d      	mov	r5, r3
 800108c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800108e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001090:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001094:	c403      	stmia	r4!, {r0, r1}
 8001096:	8022      	strh	r2, [r4, #0]
 8001098:	3402      	adds	r4, #2
 800109a:	0c13      	lsrs	r3, r2, #16
 800109c:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800109e:	f009 fa6d 	bl	800a57c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	4618      	mov	r0, r3
 80010a6:	f008 fd08 	bl	8009aba <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80010aa:	bf00      	nop
}
 80010ac:	3720      	adds	r7, #32
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bdb0      	pop	{r4, r5, r7, pc}
 80010b2:	bf00      	nop
 80010b4:	0800e970 	.word	0x0800e970

080010b8 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <LL_C2_PWR_SetPowerMode+0x28>)
 80010c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010c6:	f023 0207 	bic.w	r2, r3, #7
 80010ca:	4905      	ldr	r1, [pc, #20]	; (80010e0 <LL_C2_PWR_SetPowerMode+0x28>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	58000400 	.word	0x58000400

080010e4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <LL_EXTI_EnableIT_32_63+0x24>)
 80010ee:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80010f2:	4905      	ldr	r1, [pc, #20]	; (8001108 <LL_EXTI_EnableIT_32_63+0x24>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	58000800 	.word	0x58000800

0800110c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001118:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800111a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800111e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001122:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001126:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001132:	4313      	orrs	r3, r2
 8001134:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	cafecafe 	.word	0xcafecafe

08001148 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800115a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4313      	orrs	r3, r2
 8001162:	608b      	str	r3, [r1, #8]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800117c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800119a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800119e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80011b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80011c8:	d101      	bne.n	80011ce <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80011ca:	2301      	movs	r3, #1
 80011cc:	e000      	b.n	80011d0 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80011de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80011ee:	d101      	bne.n	80011f4 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80011f0:	2301      	movs	r3, #1
 80011f2:	e000      	b.n	80011f6 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800120c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800120e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4313      	orrs	r3, r2
 8001216:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800121c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4013      	ands	r3, r2
 8001222:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001224:	68fb      	ldr	r3, [r7, #12]
}
 8001226:	bf00      	nop
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <LL_DBGMCU_GetRevisionID+0x18>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	0c1b      	lsrs	r3, r3, #16
 800123e:	b29b      	uxth	r3, r3
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e0042000 	.word	0xe0042000

08001250 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	041b      	lsls	r3, r3, #16
 8001262:	431a      	orrs	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	605a      	str	r2, [r3, #4]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	431a      	orrs	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	605a      	str	r2, [r3, #4]
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
 800129e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	695a      	ldr	r2, [r3, #20]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	041b      	lsls	r3, r3, #16
 80012a8:	431a      	orrs	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	615a      	str	r2, [r3, #20]
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
 80012c2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	695a      	ldr	r2, [r3, #20]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	615a      	str	r2, [r3, #20]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	609a      	str	r2, [r3, #8]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	619a      	str	r2, [r3, #24]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <LL_LPM_EnableSleep+0x1c>)
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	4a04      	ldr	r2, [pc, #16]	; (8001330 <LL_LPM_EnableSleep+0x1c>)
 800131e:	f023 0304 	bic.w	r3, r3, #4
 8001322:	6113      	str	r3, [r2, #16]
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	22ff      	movs	r2, #255	; 0xff
 8001340:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	22ca      	movs	r2, #202	; 0xca
 800135a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2253      	movs	r2, #83	; 0x53
 8001360:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f023 0207 	bic.w	r2, r3, #7
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	431a      	orrs	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	609a      	str	r2, [r3, #8]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <MX_APPE_Config+0x18>)
 800139a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800139e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 80013a0:	f000 f824 	bl	80013ec <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80013a4:	f000 f864 	bl	8001470 <Config_HSE>

  return;
 80013a8:	bf00      	nop
}
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	58004000 	.word	0x58004000

080013b0 <MX_APPE_Init>:

void MX_APPE_Init( void )
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  System_Init( );       /**< System initialization */
 80013b4:	f000 f870 	bl	8001498 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80013b8:	f000 f888 	bl	80014cc <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80013bc:	4903      	ldr	r1, [pc, #12]	; (80013cc <MX_APPE_Init+0x1c>)
 80013be:	2000      	movs	r0, #0
 80013c0:	f000 fde4 	bl	8001f8c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80013c4:	f000 f890 	bl	80014e8 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80013c8:	bf00      	nop
}
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000480 	.word	0x20000480

080013d0 <Init_Smps>:

void Init_Smps( void )
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  return;
 80013d4:	bf00      	nop
}
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <Init_Exti>:

void Init_Exti( void )
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63( LL_EXTI_LINE_36 & LL_EXTI_LINE_38 );
 80013e2:	2000      	movs	r0, #0
 80013e4:	f7ff fe7e 	bl	80010e4 <LL_EXTI_EnableIT_32_63>

  return;
 80013e8:	bf00      	nop
}
 80013ea:	bd80      	pop	{r7, pc}

080013ec <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 80013f0:	f000 f804 	bl	80013fc <Reset_BackupDomain>

  Reset_IPCC();
 80013f4:	f000 f81a 	bl	800142c <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW */

  return;
 80013f8:	bf00      	nop
}
 80013fa:	bd80      	pop	{r7, pc}

080013fc <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001400:	f7ff fed8 	bl	80011b4 <LL_RCC_IsActiveFlag_PINRST>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00d      	beq.n	8001426 <Reset_BackupDomain+0x2a>
 800140a:	f7ff fee6 	bl	80011da <LL_RCC_IsActiveFlag_SFTRST>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d108      	bne.n	8001426 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001414:	f004 fbb2 	bl	8005b7c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8001418:	f004 fbb0 	bl	8005b7c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 800141c:	f7ff fea8 	bl	8001170 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001420:	f7ff feb7 	bl	8001192 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8001424:	bf00      	nop
 8001426:	bf00      	nop
}
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <Reset_IPCC>:

static void Reset_IPCC( void )
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001430:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001434:	f7ff fee4 	bl	8001200 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8001438:	213f      	movs	r1, #63	; 0x3f
 800143a:	480c      	ldr	r0, [pc, #48]	; (800146c <Reset_IPCC+0x40>)
 800143c:	f7ff ff4e 	bl	80012dc <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001440:	213f      	movs	r1, #63	; 0x3f
 8001442:	480a      	ldr	r0, [pc, #40]	; (800146c <Reset_IPCC+0x40>)
 8001444:	f7ff ff58 	bl	80012f8 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8001448:	213f      	movs	r1, #63	; 0x3f
 800144a:	4808      	ldr	r0, [pc, #32]	; (800146c <Reset_IPCC+0x40>)
 800144c:	f7ff ff00 	bl	8001250 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001450:	213f      	movs	r1, #63	; 0x3f
 8001452:	4806      	ldr	r0, [pc, #24]	; (800146c <Reset_IPCC+0x40>)
 8001454:	f7ff ff1f 	bl	8001296 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8001458:	213f      	movs	r1, #63	; 0x3f
 800145a:	4804      	ldr	r0, [pc, #16]	; (800146c <Reset_IPCC+0x40>)
 800145c:	f7ff ff0a 	bl	8001274 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001460:	213f      	movs	r1, #63	; 0x3f
 8001462:	4802      	ldr	r0, [pc, #8]	; (800146c <Reset_IPCC+0x40>)
 8001464:	f7ff ff29 	bl	80012ba <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8001468:	bf00      	nop
}
 800146a:	bd80      	pop	{r7, pc}
 800146c:	58000c00 	.word	0x58000c00

08001470 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001476:	2000      	movs	r0, #0
 8001478:	f009 f90c 	bl	800a694 <OTP_Read>
 800147c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	799b      	ldrb	r3, [r3, #6]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fe3f 	bl	800110c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800148e:	bf00      	nop
 8001490:	bf00      	nop
}
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <System_Init>:

static void System_Init( void )
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  Init_Smps( );
 800149c:	f7ff ff98 	bl	80013d0 <Init_Smps>

  Init_Exti( );
 80014a0:	f7ff ff9d 	bl	80013de <Init_Exti>

  Init_Rtc( );
 80014a4:	f000 f802 	bl	80014ac <Init_Rtc>

  return;
 80014a8:	bf00      	nop
}
 80014aa:	bd80      	pop	{r7, pc}

080014ac <Init_Rtc>:

static void Init_Rtc( void )
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80014b0:	4805      	ldr	r0, [pc, #20]	; (80014c8 <Init_Rtc+0x1c>)
 80014b2:	f7ff ff4c 	bl	800134e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80014b6:	2100      	movs	r1, #0
 80014b8:	4803      	ldr	r0, [pc, #12]	; (80014c8 <Init_Rtc+0x1c>)
 80014ba:	f7ff ff58 	bl	800136e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80014be:	4802      	ldr	r0, [pc, #8]	; (80014c8 <Init_Rtc+0x1c>)
 80014c0:	f7ff ff38 	bl	8001334 <LL_RTC_EnableWriteProtection>

  return;
 80014c4:	bf00      	nop
}
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40002800 	.word	0x40002800

080014cc <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80014d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80014d4:	f7ff fe38 	bl	8001148 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80014d8:	f00a f8b4 	bl	800b644 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80014dc:	2004      	movs	r0, #4
 80014de:	f7ff fdeb 	bl	80010b8 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 80014e2:	bf00      	nop
}
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80014ee:	f008 fe8f 	bl	800a210 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 80014f2:	4a11      	ldr	r2, [pc, #68]	; (8001538 <appe_Tl_Init+0x50>)
 80014f4:	2100      	movs	r1, #0
 80014f6:	2008      	movs	r0, #8
 80014f8:	f00a f9d0 	bl	800b89c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <appe_Tl_Init+0x54>)
 80014fe:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <appe_Tl_Init+0x58>)
 8001502:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001504:	463b      	mov	r3, r7
 8001506:	4619      	mov	r1, r3
 8001508:	480e      	ldr	r0, [pc, #56]	; (8001544 <appe_Tl_Init+0x5c>)
 800150a:	f008 fd47 	bl	8009f9c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <appe_Tl_Init+0x60>)
 8001510:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <appe_Tl_Init+0x64>)
 8001514:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <appe_Tl_Init+0x68>)
 8001518:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800151a:	f240 533c 	movw	r3, #1340	; 0x53c
 800151e:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8001520:	f107 0308 	add.w	r3, r7, #8
 8001524:	4618      	mov	r0, r3
 8001526:	f008 ffb5 	bl	800a494 <TL_MM_Init>

  TL_Enable();
 800152a:	f008 fe6b 	bl	800a204 <TL_Enable>

  return;
 800152e:	bf00      	nop
}
 8001530:	3720      	adds	r7, #32
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	08009fd5 	.word	0x08009fd5
 800153c:	20030724 	.word	0x20030724
 8001540:	08001555 	.word	0x08001555
 8001544:	0800156d 	.word	0x0800156d
 8001548:	2003093c 	.word	0x2003093c
 800154c:	20030830 	.word	0x20030830
 8001550:	200301e8 	.word	0x200301e8

08001554 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800155e:	bf00      	nop
}
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	330b      	adds	r3, #11
 800157a:	61fb      	str	r3, [r7, #28]

  /* Read the firmware version of both the wireless firmware and the FUS */
  SHCI_GetWirelessFwInfo( &WirelessInfo );
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	4618      	mov	r0, r3
 8001582:	f008 fac7 	bl	8009b14 <SHCI_GetWirelessFwInfo>
  APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
  APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
  APP_DBG_MSG("FUS version %d.%d.%d\n\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

  switch(p_sys_event->subevtcode)
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	b29b      	uxth	r3, r3
 800158c:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8001590:	2b07      	cmp	r3, #7
 8001592:	d81b      	bhi.n	80015cc <APPE_SysUserEvtRx+0x60>
 8001594:	a201      	add	r2, pc, #4	; (adr r2, 800159c <APPE_SysUserEvtRx+0x30>)
 8001596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159a:	bf00      	nop
 800159c:	080015bd 	.word	0x080015bd
 80015a0:	080015c5 	.word	0x080015c5
 80015a4:	080015cd 	.word	0x080015cd
 80015a8:	080015cd 	.word	0x080015cd
 80015ac:	080015cd 	.word	0x080015cd
 80015b0:	080015cd 	.word	0x080015cd
 80015b4:	080015cd 	.word	0x080015cd
 80015b8:	080015cd 	.word	0x080015cd
  {
  case SHCI_SUB_EVT_CODE_READY:
    APPE_SysEvtReadyProcessing(pPayload);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 f81c 	bl	80015fa <APPE_SysEvtReadyProcessing>
    break;
 80015c2:	e004      	b.n	80015ce <APPE_SysUserEvtRx+0x62>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APPE_SysEvtError(pPayload);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 f807 	bl	80015d8 <APPE_SysEvtError>
    break;
 80015ca:	e000      	b.n	80015ce <APPE_SysUserEvtRx+0x62>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_ERASE\n");
    break;

  default:
    break;
 80015cc:	bf00      	nop
  }

  return;
 80015ce:	bf00      	nop
}
 80015d0:	3720      	adds	r7, #32
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop

080015d8 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( void * pPayload)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	330b      	adds	r3, #11
 80015e6:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	3302      	adds	r3, #2
 80015ec:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80015ee:	bf00      	nop
}
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void * pPayload )
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b08a      	sub	sp, #40	; 0x28
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001602:	f107 030c 	add.w	r3, r7, #12
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001610:	2300      	movs	r3, #0
 8001612:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	330b      	adds	r3, #11
 800161a:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800161c:	6a3b      	ldr	r3, [r7, #32]
 800161e:	3302      	adds	r3, #2
 8001620:	61fb      	str	r3, [r7, #28]

  if(p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d117      	bne.n	800165a <APPE_SysEvtReadyProcessing+0x60>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2( );
 800162a:	f7ff fd29 	bl	8001080 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800162e:	230d      	movs	r3, #13
 8001630:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001632:	237f      	movs	r3, #127	; 0x7f
 8001634:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001636:	f7ff fdfd 	bl	8001234 <LL_DBGMCU_GetRevisionID>
 800163a:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG("DBGMCU_GetRevisionID= %lx \n\n", RevisionID);

    config_param.RevisionID = RevisionID;
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	b29b      	uxth	r3, r3
 8001640:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 8001642:	f107 030c 	add.w	r3, r7, #12
 8001646:	4618      	mov	r0, r3
 8001648:	f008 fa4e 	bl	8009ae8 <SHCI_C2_Config>

    APP_BLE_Init( );
 800164c:	f009 f92c 	bl	800a8a8 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001650:	2100      	movs	r1, #0
 8001652:	2001      	movs	r0, #1
 8001654:	f00a f808 	bl	800b668 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n");
  }

  return;
 8001658:	e007      	b.n	800166a <APPE_SysEvtReadyProcessing+0x70>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d103      	bne.n	800166a <APPE_SysEvtReadyProcessing+0x70>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
  return;
 8001668:	bf00      	nop
 800166a:	bf00      	nop
}
 800166c:	3728      	adds	r7, #40	; 0x28
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b084      	sub	sp, #16
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800167a:	f002 f82b 	bl	80036d4 <HAL_GetTick>
 800167e:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800168a:	d00a      	beq.n	80016a2 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800168c:	f002 f83a 	bl	8003704 <HAL_GetTickFreq>
 8001690:	4603      	mov	r3, r0
 8001692:	461a      	mov	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4413      	add	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800169a:	e002      	b.n	80016a2 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800169c:	f7ff fe3a 	bl	8001314 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 80016a0:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80016a2:	f002 f817 	bl	80036d4 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d8f4      	bhi.n	800169c <HAL_Delay+0x2a>
  }
}
 80016b2:	bf00      	nop
 80016b4:	bf00      	nop
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f00a f800 	bl	800b6c8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}

080016cc <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 80016d0:	bf00      	nop
}
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295
 80016e8:	f009 ffee 	bl	800b6c8 <UTIL_SEQ_Run>

  return;
 80016ec:	bf00      	nop
}
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80016fc:	2100      	movs	r1, #0
 80016fe:	2008      	movs	r0, #8
 8001700:	f00a f8ee 	bl	800b8e0 <UTIL_SEQ_SetTask>
  return;
 8001704:	bf00      	nop
}
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8001714:	2002      	movs	r0, #2
 8001716:	f00a f94f 	bl	800b9b8 <UTIL_SEQ_SetEvt>
  return;
 800171a:	bf00      	nop
}
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 800172a:	2002      	movs	r0, #2
 800172c:	f00a f964 	bl	800b9f8 <UTIL_SEQ_WaitEvt>
  return;
 8001730:	bf00      	nop
}
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <LL_EXTI_EnableIT_0_31>:
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <LL_EXTI_EnableIT_0_31+0x24>)
 8001742:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001746:	4905      	ldr	r1, [pc, #20]	; (800175c <LL_EXTI_EnableIT_0_31+0x24>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4313      	orrs	r3, r2
 800174c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	58000800 	.word	0x58000800

08001760 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4904      	ldr	r1, [pc, #16]	; (8001780 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4313      	orrs	r3, r2
 8001772:	600b      	str	r3, [r1, #0]

}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	58000800 	.word	0x58000800

08001784 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800178a:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <ReadRtcSsrValue+0x3c>)
 800178c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178e:	b29b      	uxth	r3, r3
 8001790:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <ReadRtcSsrValue+0x3c>)
 8001794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001796:	b29b      	uxth	r3, r3
 8001798:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800179a:	e005      	b.n	80017a8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <ReadRtcSsrValue+0x3c>)
 80017a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d1f5      	bne.n	800179c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80017b0:	683b      	ldr	r3, [r7, #0]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40002800 	.word	0x40002800

080017c4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	460a      	mov	r2, r1
 80017ce:	71fb      	strb	r3, [r7, #7]
 80017d0:	4613      	mov	r3, r2
 80017d2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80017d4:	79ba      	ldrb	r2, [r7, #6]
 80017d6:	491d      	ldr	r1, [pc, #116]	; (800184c <LinkTimerAfter+0x88>)
 80017d8:	4613      	mov	r3, r2
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	4413      	add	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	440b      	add	r3, r1
 80017e2:	3315      	adds	r3, #21
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d009      	beq.n	8001802 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80017ee:	7bfa      	ldrb	r2, [r7, #15]
 80017f0:	4916      	ldr	r1, [pc, #88]	; (800184c <LinkTimerAfter+0x88>)
 80017f2:	4613      	mov	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	4413      	add	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	440b      	add	r3, r1
 80017fc:	3314      	adds	r3, #20
 80017fe:	79fa      	ldrb	r2, [r7, #7]
 8001800:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001802:	79fa      	ldrb	r2, [r7, #7]
 8001804:	4911      	ldr	r1, [pc, #68]	; (800184c <LinkTimerAfter+0x88>)
 8001806:	4613      	mov	r3, r2
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	4413      	add	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	440b      	add	r3, r1
 8001810:	3315      	adds	r3, #21
 8001812:	7bfa      	ldrb	r2, [r7, #15]
 8001814:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001816:	79fa      	ldrb	r2, [r7, #7]
 8001818:	490c      	ldr	r1, [pc, #48]	; (800184c <LinkTimerAfter+0x88>)
 800181a:	4613      	mov	r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	4413      	add	r3, r2
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	440b      	add	r3, r1
 8001824:	3314      	adds	r3, #20
 8001826:	79ba      	ldrb	r2, [r7, #6]
 8001828:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800182a:	79ba      	ldrb	r2, [r7, #6]
 800182c:	4907      	ldr	r1, [pc, #28]	; (800184c <LinkTimerAfter+0x88>)
 800182e:	4613      	mov	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	440b      	add	r3, r1
 8001838:	3315      	adds	r3, #21
 800183a:	79fa      	ldrb	r2, [r7, #7]
 800183c:	701a      	strb	r2, [r3, #0]

  return;
 800183e:	bf00      	nop
}
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	200001f8 	.word	0x200001f8

08001850 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	460a      	mov	r2, r1
 800185a:	71fb      	strb	r3, [r7, #7]
 800185c:	4613      	mov	r3, r2
 800185e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001860:	4b29      	ldr	r3, [pc, #164]	; (8001908 <LinkTimerBefore+0xb8>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	79ba      	ldrb	r2, [r7, #6]
 8001868:	429a      	cmp	r2, r3
 800186a:	d032      	beq.n	80018d2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800186c:	79ba      	ldrb	r2, [r7, #6]
 800186e:	4927      	ldr	r1, [pc, #156]	; (800190c <LinkTimerBefore+0xbc>)
 8001870:	4613      	mov	r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4413      	add	r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	440b      	add	r3, r1
 800187a:	3314      	adds	r3, #20
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001880:	7bfa      	ldrb	r2, [r7, #15]
 8001882:	4922      	ldr	r1, [pc, #136]	; (800190c <LinkTimerBefore+0xbc>)
 8001884:	4613      	mov	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4413      	add	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	440b      	add	r3, r1
 800188e:	3315      	adds	r3, #21
 8001890:	79fa      	ldrb	r2, [r7, #7]
 8001892:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001894:	79fa      	ldrb	r2, [r7, #7]
 8001896:	491d      	ldr	r1, [pc, #116]	; (800190c <LinkTimerBefore+0xbc>)
 8001898:	4613      	mov	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4413      	add	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	440b      	add	r3, r1
 80018a2:	3315      	adds	r3, #21
 80018a4:	79ba      	ldrb	r2, [r7, #6]
 80018a6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80018a8:	79fa      	ldrb	r2, [r7, #7]
 80018aa:	4918      	ldr	r1, [pc, #96]	; (800190c <LinkTimerBefore+0xbc>)
 80018ac:	4613      	mov	r3, r2
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	4413      	add	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	440b      	add	r3, r1
 80018b6:	3314      	adds	r3, #20
 80018b8:	7bfa      	ldrb	r2, [r7, #15]
 80018ba:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80018bc:	79ba      	ldrb	r2, [r7, #6]
 80018be:	4913      	ldr	r1, [pc, #76]	; (800190c <LinkTimerBefore+0xbc>)
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	440b      	add	r3, r1
 80018ca:	3314      	adds	r3, #20
 80018cc:	79fa      	ldrb	r2, [r7, #7]
 80018ce:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80018d0:	e014      	b.n	80018fc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80018d2:	79fa      	ldrb	r2, [r7, #7]
 80018d4:	490d      	ldr	r1, [pc, #52]	; (800190c <LinkTimerBefore+0xbc>)
 80018d6:	4613      	mov	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	440b      	add	r3, r1
 80018e0:	3315      	adds	r3, #21
 80018e2:	79ba      	ldrb	r2, [r7, #6]
 80018e4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80018e6:	79ba      	ldrb	r2, [r7, #6]
 80018e8:	4908      	ldr	r1, [pc, #32]	; (800190c <LinkTimerBefore+0xbc>)
 80018ea:	4613      	mov	r3, r2
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	4413      	add	r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	440b      	add	r3, r1
 80018f4:	3314      	adds	r3, #20
 80018f6:	79fa      	ldrb	r2, [r7, #7]
 80018f8:	701a      	strb	r2, [r3, #0]
  return;
 80018fa:	bf00      	nop
}
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000288 	.word	0x20000288
 800190c:	200001f8 	.word	0x200001f8

08001910 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800191a:	4b4e      	ldr	r3, [pc, #312]	; (8001a54 <linkTimer+0x144>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b06      	cmp	r3, #6
 8001922:	d118      	bne.n	8001956 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001924:	4b4b      	ldr	r3, [pc, #300]	; (8001a54 <linkTimer+0x144>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4b4b      	ldr	r3, [pc, #300]	; (8001a58 <linkTimer+0x148>)
 800192c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800192e:	4a49      	ldr	r2, [pc, #292]	; (8001a54 <linkTimer+0x144>)
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001934:	79fa      	ldrb	r2, [r7, #7]
 8001936:	4949      	ldr	r1, [pc, #292]	; (8001a5c <linkTimer+0x14c>)
 8001938:	4613      	mov	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4413      	add	r3, r2
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	440b      	add	r3, r1
 8001942:	3315      	adds	r3, #21
 8001944:	2206      	movs	r2, #6
 8001946:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001948:	4b45      	ldr	r3, [pc, #276]	; (8001a60 <linkTimer+0x150>)
 800194a:	f04f 32ff 	mov.w	r2, #4294967295
 800194e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	81fb      	strh	r3, [r7, #14]
 8001954:	e078      	b.n	8001a48 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001956:	f000 f909 	bl	8001b6c <ReturnTimeElapsed>
 800195a:	4603      	mov	r3, r0
 800195c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800195e:	79fa      	ldrb	r2, [r7, #7]
 8001960:	493e      	ldr	r1, [pc, #248]	; (8001a5c <linkTimer+0x14c>)
 8001962:	4613      	mov	r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4413      	add	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	440b      	add	r3, r1
 800196c:	3308      	adds	r3, #8
 800196e:	6819      	ldr	r1, [r3, #0]
 8001970:	89fb      	ldrh	r3, [r7, #14]
 8001972:	79fa      	ldrb	r2, [r7, #7]
 8001974:	4419      	add	r1, r3
 8001976:	4839      	ldr	r0, [pc, #228]	; (8001a5c <linkTimer+0x14c>)
 8001978:	4613      	mov	r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4413      	add	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	4403      	add	r3, r0
 8001982:	3308      	adds	r3, #8
 8001984:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001986:	79fa      	ldrb	r2, [r7, #7]
 8001988:	4934      	ldr	r1, [pc, #208]	; (8001a5c <linkTimer+0x14c>)
 800198a:	4613      	mov	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	440b      	add	r3, r1
 8001994:	3308      	adds	r3, #8
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800199a:	4b2e      	ldr	r3, [pc, #184]	; (8001a54 <linkTimer+0x144>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	4619      	mov	r1, r3
 80019a2:	4a2e      	ldr	r2, [pc, #184]	; (8001a5c <linkTimer+0x14c>)
 80019a4:	460b      	mov	r3, r1
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	440b      	add	r3, r1
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	4413      	add	r3, r2
 80019ae:	3308      	adds	r3, #8
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d337      	bcc.n	8001a28 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80019b8:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <linkTimer+0x144>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80019be:	7b7a      	ldrb	r2, [r7, #13]
 80019c0:	4926      	ldr	r1, [pc, #152]	; (8001a5c <linkTimer+0x14c>)
 80019c2:	4613      	mov	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4413      	add	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	440b      	add	r3, r1
 80019cc:	3315      	adds	r3, #21
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80019d2:	e013      	b.n	80019fc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80019d4:	7b7a      	ldrb	r2, [r7, #13]
 80019d6:	4921      	ldr	r1, [pc, #132]	; (8001a5c <linkTimer+0x14c>)
 80019d8:	4613      	mov	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4413      	add	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	440b      	add	r3, r1
 80019e2:	3315      	adds	r3, #21
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80019e8:	7b7a      	ldrb	r2, [r7, #13]
 80019ea:	491c      	ldr	r1, [pc, #112]	; (8001a5c <linkTimer+0x14c>)
 80019ec:	4613      	mov	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	4413      	add	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	440b      	add	r3, r1
 80019f6:	3315      	adds	r3, #21
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80019fc:	7b3b      	ldrb	r3, [r7, #12]
 80019fe:	2b06      	cmp	r3, #6
 8001a00:	d00b      	beq.n	8001a1a <linkTimer+0x10a>
 8001a02:	7b3a      	ldrb	r2, [r7, #12]
 8001a04:	4915      	ldr	r1, [pc, #84]	; (8001a5c <linkTimer+0x14c>)
 8001a06:	4613      	mov	r3, r2
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4413      	add	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	440b      	add	r3, r1
 8001a10:	3308      	adds	r3, #8
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68ba      	ldr	r2, [r7, #8]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d2dc      	bcs.n	80019d4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001a1a:	7b7a      	ldrb	r2, [r7, #13]
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	4611      	mov	r1, r2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fecf 	bl	80017c4 <LinkTimerAfter>
 8001a26:	e00f      	b.n	8001a48 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001a28:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <linkTimer+0x144>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	4611      	mov	r1, r2
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff ff0c 	bl	8001850 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <linkTimer+0x144>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <linkTimer+0x148>)
 8001a40:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001a42:	4a04      	ldr	r2, [pc, #16]	; (8001a54 <linkTimer+0x144>)
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001a48:	89fb      	ldrh	r3, [r7, #14]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000288 	.word	0x20000288
 8001a58:	20000289 	.word	0x20000289
 8001a5c:	200001f8 	.word	0x200001f8
 8001a60:	2000028c 	.word	0x2000028c

08001a64 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	460a      	mov	r2, r1
 8001a6e:	71fb      	strb	r3, [r7, #7]
 8001a70:	4613      	mov	r3, r2
 8001a72:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001a74:	4b39      	ldr	r3, [pc, #228]	; (8001b5c <UnlinkTimer+0xf8>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	79fa      	ldrb	r2, [r7, #7]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d111      	bne.n	8001aa4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001a80:	4b36      	ldr	r3, [pc, #216]	; (8001b5c <UnlinkTimer+0xf8>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	4b36      	ldr	r3, [pc, #216]	; (8001b60 <UnlinkTimer+0xfc>)
 8001a88:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001a8a:	79fa      	ldrb	r2, [r7, #7]
 8001a8c:	4935      	ldr	r1, [pc, #212]	; (8001b64 <UnlinkTimer+0x100>)
 8001a8e:	4613      	mov	r3, r2
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	4413      	add	r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	440b      	add	r3, r1
 8001a98:	3315      	adds	r3, #21
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4b2f      	ldr	r3, [pc, #188]	; (8001b5c <UnlinkTimer+0xf8>)
 8001aa0:	701a      	strb	r2, [r3, #0]
 8001aa2:	e03e      	b.n	8001b22 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001aa4:	79fa      	ldrb	r2, [r7, #7]
 8001aa6:	492f      	ldr	r1, [pc, #188]	; (8001b64 <UnlinkTimer+0x100>)
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	4413      	add	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	440b      	add	r3, r1
 8001ab2:	3314      	adds	r3, #20
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001ab8:	79fa      	ldrb	r2, [r7, #7]
 8001aba:	492a      	ldr	r1, [pc, #168]	; (8001b64 <UnlinkTimer+0x100>)
 8001abc:	4613      	mov	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	440b      	add	r3, r1
 8001ac6:	3315      	adds	r3, #21
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001acc:	79f9      	ldrb	r1, [r7, #7]
 8001ace:	7bfa      	ldrb	r2, [r7, #15]
 8001ad0:	4824      	ldr	r0, [pc, #144]	; (8001b64 <UnlinkTimer+0x100>)
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	440b      	add	r3, r1
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	4403      	add	r3, r0
 8001adc:	3315      	adds	r3, #21
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	b2d8      	uxtb	r0, r3
 8001ae2:	4920      	ldr	r1, [pc, #128]	; (8001b64 <UnlinkTimer+0x100>)
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4413      	add	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	440b      	add	r3, r1
 8001aee:	3315      	adds	r3, #21
 8001af0:	4602      	mov	r2, r0
 8001af2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001af4:	7bbb      	ldrb	r3, [r7, #14]
 8001af6:	2b06      	cmp	r3, #6
 8001af8:	d013      	beq.n	8001b22 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001afa:	79f9      	ldrb	r1, [r7, #7]
 8001afc:	7bba      	ldrb	r2, [r7, #14]
 8001afe:	4819      	ldr	r0, [pc, #100]	; (8001b64 <UnlinkTimer+0x100>)
 8001b00:	460b      	mov	r3, r1
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	440b      	add	r3, r1
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4403      	add	r3, r0
 8001b0a:	3314      	adds	r3, #20
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	b2d8      	uxtb	r0, r3
 8001b10:	4914      	ldr	r1, [pc, #80]	; (8001b64 <UnlinkTimer+0x100>)
 8001b12:	4613      	mov	r3, r2
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	4413      	add	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	440b      	add	r3, r1
 8001b1c:	3314      	adds	r3, #20
 8001b1e:	4602      	mov	r2, r0
 8001b20:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001b22:	79fa      	ldrb	r2, [r7, #7]
 8001b24:	490f      	ldr	r1, [pc, #60]	; (8001b64 <UnlinkTimer+0x100>)
 8001b26:	4613      	mov	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	4413      	add	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	440b      	add	r3, r1
 8001b30:	330c      	adds	r3, #12
 8001b32:	2201      	movs	r2, #1
 8001b34:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <UnlinkTimer+0xf8>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b06      	cmp	r3, #6
 8001b3e:	d107      	bne.n	8001b50 <UnlinkTimer+0xec>
 8001b40:	79bb      	ldrb	r3, [r7, #6]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d104      	bne.n	8001b50 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001b46:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <UnlinkTimer+0x104>)
 8001b48:	f04f 32ff 	mov.w	r2, #4294967295
 8001b4c:	601a      	str	r2, [r3, #0]
  }

  return;
 8001b4e:	bf00      	nop
 8001b50:	bf00      	nop
}
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	20000288 	.word	0x20000288
 8001b60:	20000289 	.word	0x20000289
 8001b64:	200001f8 	.word	0x200001f8
 8001b68:	2000028c 	.word	0x2000028c

08001b6c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001b72:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <ReturnTimeElapsed+0x70>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b7a:	d026      	beq.n	8001bca <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001b7c:	f7ff fe02 	bl	8001784 <ReadRtcSsrValue>
 8001b80:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001b82:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <ReturnTimeElapsed+0x70>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d805      	bhi.n	8001b98 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001b8c:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <ReturnTimeElapsed+0x70>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	e00a      	b.n	8001bae <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <ReturnTimeElapsed+0x74>)
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001ba4:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <ReturnTimeElapsed+0x70>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001bae:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <ReturnTimeElapsed+0x78>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	fb02 f303 	mul.w	r3, r2, r3
 8001bba:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001bbc:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <ReturnTimeElapsed+0x7c>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	40d3      	lsrs	r3, r2
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	e001      	b.n	8001bce <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	b29b      	uxth	r3, r3
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	2000028c 	.word	0x2000028c
 8001be0:	2000038e 	.word	0x2000038e
 8001be4:	2000038d 	.word	0x2000038d
 8001be8:	2000038c 	.word	0x2000038c

08001bec <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d108      	bne.n	8001c0e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001bfc:	f7ff fdc2 	bl	8001784 <ReadRtcSsrValue>
 8001c00:	4603      	mov	r3, r0
 8001c02:	4a24      	ldr	r2, [pc, #144]	; (8001c94 <RestartWakeupCounter+0xa8>)
 8001c04:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001c06:	2003      	movs	r0, #3
 8001c08:	f003 f8e5 	bl	8004dd6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001c0c:	e03e      	b.n	8001c8c <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d803      	bhi.n	8001c1c <RestartWakeupCounter+0x30>
 8001c14:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <RestartWakeupCounter+0xac>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d002      	beq.n	8001c22 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001c22:	bf00      	nop
 8001c24:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <RestartWakeupCounter+0xb0>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0f7      	beq.n	8001c24 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001c34:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <RestartWakeupCounter+0xb0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <RestartWakeupCounter+0xb0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001c48:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <RestartWakeupCounter+0xb4>)
 8001c4c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c50:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001c52:	2003      	movs	r0, #3
 8001c54:	f003 f8cd 	bl	8004df2 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001c58:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <RestartWakeupCounter+0xb8>)
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	0c1b      	lsrs	r3, r3, #16
 8001c5e:	041b      	lsls	r3, r3, #16
 8001c60:	88fa      	ldrh	r2, [r7, #6]
 8001c62:	4910      	ldr	r1, [pc, #64]	; (8001ca4 <RestartWakeupCounter+0xb8>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001c68:	f7ff fd8c 	bl	8001784 <ReadRtcSsrValue>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4a09      	ldr	r2, [pc, #36]	; (8001c94 <RestartWakeupCounter+0xa8>)
 8001c70:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8001c72:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <RestartWakeupCounter+0xb0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <RestartWakeupCounter+0xb0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c84:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001c86:	f3af 8000 	nop.w
  return ;
 8001c8a:	bf00      	nop
}
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	2000028c 	.word	0x2000028c
 8001c98:	2000038c 	.word	0x2000038c
 8001c9c:	20000388 	.word	0x20000388
 8001ca0:	58000800 	.word	0x58000800
 8001ca4:	40002800 	.word	0x40002800

08001ca8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001cae:	4b47      	ldr	r3, [pc, #284]	; (8001dcc <RescheduleTimerList+0x124>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cba:	d108      	bne.n	8001cce <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001cbc:	bf00      	nop
 8001cbe:	4b44      	ldr	r3, [pc, #272]	; (8001dd0 <RescheduleTimerList+0x128>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f7      	bne.n	8001cbe <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001cce:	4b40      	ldr	r3, [pc, #256]	; (8001dd0 <RescheduleTimerList+0x128>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	4b3e      	ldr	r3, [pc, #248]	; (8001dd0 <RescheduleTimerList+0x128>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ce0:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001ce2:	4b3c      	ldr	r3, [pc, #240]	; (8001dd4 <RescheduleTimerList+0x12c>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001ce8:	7bfa      	ldrb	r2, [r7, #15]
 8001cea:	493b      	ldr	r1, [pc, #236]	; (8001dd8 <RescheduleTimerList+0x130>)
 8001cec:	4613      	mov	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4413      	add	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	440b      	add	r3, r1
 8001cf6:	3308      	adds	r3, #8
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001cfc:	f7ff ff36 	bl	8001b6c <ReturnTimeElapsed>
 8001d00:	4603      	mov	r3, r0
 8001d02:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001d04:	88fb      	ldrh	r3, [r7, #6]
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d205      	bcs.n	8001d18 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001d10:	4b32      	ldr	r3, [pc, #200]	; (8001ddc <RescheduleTimerList+0x134>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	701a      	strb	r2, [r3, #0]
 8001d16:	e04d      	b.n	8001db4 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001d18:	88fb      	ldrh	r3, [r7, #6]
 8001d1a:	4a31      	ldr	r2, [pc, #196]	; (8001de0 <RescheduleTimerList+0x138>)
 8001d1c:	8812      	ldrh	r2, [r2, #0]
 8001d1e:	b292      	uxth	r2, r2
 8001d20:	4413      	add	r3, r2
 8001d22:	461a      	mov	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d906      	bls.n	8001d38 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001d2a:	4b2d      	ldr	r3, [pc, #180]	; (8001de0 <RescheduleTimerList+0x138>)
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001d30:	4b2a      	ldr	r3, [pc, #168]	; (8001ddc <RescheduleTimerList+0x134>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
 8001d36:	e03d      	b.n	8001db4 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	88fb      	ldrh	r3, [r7, #6]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001d42:	4b26      	ldr	r3, [pc, #152]	; (8001ddc <RescheduleTimerList+0x134>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d48:	e034      	b.n	8001db4 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001d4a:	7bfa      	ldrb	r2, [r7, #15]
 8001d4c:	4922      	ldr	r1, [pc, #136]	; (8001dd8 <RescheduleTimerList+0x130>)
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	440b      	add	r3, r1
 8001d58:	3308      	adds	r3, #8
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	88fb      	ldrh	r3, [r7, #6]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d20a      	bcs.n	8001d78 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001d62:	7bfa      	ldrb	r2, [r7, #15]
 8001d64:	491c      	ldr	r1, [pc, #112]	; (8001dd8 <RescheduleTimerList+0x130>)
 8001d66:	4613      	mov	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4413      	add	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	440b      	add	r3, r1
 8001d70:	3308      	adds	r3, #8
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	e013      	b.n	8001da0 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001d78:	7bfa      	ldrb	r2, [r7, #15]
 8001d7a:	4917      	ldr	r1, [pc, #92]	; (8001dd8 <RescheduleTimerList+0x130>)
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4413      	add	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	440b      	add	r3, r1
 8001d86:	3308      	adds	r3, #8
 8001d88:	6819      	ldr	r1, [r3, #0]
 8001d8a:	88fb      	ldrh	r3, [r7, #6]
 8001d8c:	7bfa      	ldrb	r2, [r7, #15]
 8001d8e:	1ac9      	subs	r1, r1, r3
 8001d90:	4811      	ldr	r0, [pc, #68]	; (8001dd8 <RescheduleTimerList+0x130>)
 8001d92:	4613      	mov	r3, r2
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4413      	add	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4403      	add	r3, r0
 8001d9c:	3308      	adds	r3, #8
 8001d9e:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001da0:	7bfa      	ldrb	r2, [r7, #15]
 8001da2:	490d      	ldr	r1, [pc, #52]	; (8001dd8 <RescheduleTimerList+0x130>)
 8001da4:	4613      	mov	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4413      	add	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	440b      	add	r3, r1
 8001dae:	3315      	adds	r3, #21
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d1c7      	bne.n	8001d4a <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001dba:	89bb      	ldrh	r3, [r7, #12]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff15 	bl	8001bec <RestartWakeupCounter>

  return ;
 8001dc2:	bf00      	nop
}
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40002800 	.word	0x40002800
 8001dd0:	20000388 	.word	0x20000388
 8001dd4:	20000288 	.word	0x20000288
 8001dd8:	200001f8 	.word	0x200001f8
 8001ddc:	20000290 	.word	0x20000290
 8001de0:	20000390 	.word	0x20000390

08001de4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dea:	f3ef 8310 	mrs	r3, PRIMASK
 8001dee:	617b      	str	r3, [r7, #20]
  return(result);
 8001df0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001df4:	b672      	cpsid	i
}
 8001df6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001df8:	4b5f      	ldr	r3, [pc, #380]	; (8001f78 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	22ca      	movs	r2, #202	; 0xca
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24
 8001e02:	4b5d      	ldr	r3, [pc, #372]	; (8001f78 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2253      	movs	r2, #83	; 0x53
 8001e0a:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001e0c:	4b5a      	ldr	r3, [pc, #360]	; (8001f78 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	4b58      	ldr	r3, [pc, #352]	; (8001f78 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e1e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001e20:	4b56      	ldr	r3, [pc, #344]	; (8001f7c <HW_TS_RTC_Wakeup_Handler+0x198>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001e28:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e2c:	4954      	ldr	r1, [pc, #336]	; (8001f80 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001e2e:	4613      	mov	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4413      	add	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	440b      	add	r3, r1
 8001e38:	330c      	adds	r3, #12
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d172      	bne.n	8001f28 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001e42:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e46:	494e      	ldr	r1, [pc, #312]	; (8001f80 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001e48:	4613      	mov	r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4413      	add	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	440b      	add	r3, r1
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001e56:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e5a:	4949      	ldr	r1, [pc, #292]	; (8001f80 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	4413      	add	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	440b      	add	r3, r1
 8001e66:	3310      	adds	r3, #16
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001e6c:	4b45      	ldr	r3, [pc, #276]	; (8001f84 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d050      	beq.n	8001f18 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001e76:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e7a:	4941      	ldr	r1, [pc, #260]	; (8001f80 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4413      	add	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	440b      	add	r3, r1
 8001e86:	330d      	adds	r3, #13
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d126      	bne.n	8001ede <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001e90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e94:	2101      	movs	r1, #1
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fde4 	bl	8001a64 <UnlinkTimer>
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	f383 8810 	msr	PRIMASK, r3
}
 8001ea6:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001ea8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001eac:	4934      	ldr	r1, [pc, #208]	; (8001f80 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001eae:	4613      	mov	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4413      	add	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	440b      	add	r3, r1
 8001eb8:	3304      	adds	r3, #4
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f9d4 	bl	8002270 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001ec8:	4b2b      	ldr	r3, [pc, #172]	; (8001f78 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	22ca      	movs	r2, #202	; 0xca
 8001ed0:	625a      	str	r2, [r3, #36]	; 0x24
 8001ed2:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2253      	movs	r2, #83	; 0x53
 8001eda:	625a      	str	r2, [r3, #36]	; 0x24
 8001edc:	e014      	b.n	8001f08 <HW_TS_RTC_Wakeup_Handler+0x124>
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f383 8810 	msr	PRIMASK, r3
}
 8001ee8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001eea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 f932 	bl	8002158 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001ef4:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	22ca      	movs	r2, #202	; 0xca
 8001efc:	625a      	str	r2, [r3, #36]	; 0x24
 8001efe:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2253      	movs	r2, #83	; 0x53
 8001f06:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001f08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f0c:	69fa      	ldr	r2, [r7, #28]
 8001f0e:	4619      	mov	r1, r3
 8001f10:	69b8      	ldr	r0, [r7, #24]
 8001f12:	f000 fa35 	bl	8002380 <HW_TS_RTC_Int_AppNot>
 8001f16:	e025      	b.n	8001f64 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8001f18:	f7ff fec6 	bl	8001ca8 <RescheduleTimerList>
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	f383 8810 	msr	PRIMASK, r3
}
 8001f26:	e01d      	b.n	8001f64 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001f28:	bf00      	nop
 8001f2a:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f7      	beq.n	8001f2a <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001f4e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001f50:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 8001f52:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f56:	60da      	str	r2, [r3, #12]
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f383 8810 	msr	PRIMASK, r3
}
 8001f62:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001f64:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	22ff      	movs	r2, #255	; 0xff
 8001f6c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001f6e:	bf00      	nop
}
 8001f70:	3728      	adds	r7, #40	; 0x28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000388 	.word	0x20000388
 8001f7c:	20000288 	.word	0x20000288
 8001f80:	200001f8 	.word	0x200001f8
 8001f84:	20000290 	.word	0x20000290
 8001f88:	58000800 	.word	0x58000800

08001f8c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001f98:	4a64      	ldr	r2, [pc, #400]	; (800212c <HW_TS_Init+0x1a0>)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001f9e:	4b63      	ldr	r3, [pc, #396]	; (800212c <HW_TS_Init+0x1a0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	22ca      	movs	r2, #202	; 0xca
 8001fa6:	625a      	str	r2, [r3, #36]	; 0x24
 8001fa8:	4b60      	ldr	r3, [pc, #384]	; (800212c <HW_TS_Init+0x1a0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2253      	movs	r2, #83	; 0x53
 8001fb0:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001fb2:	4b5f      	ldr	r3, [pc, #380]	; (8002130 <HW_TS_Init+0x1a4>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	4a5e      	ldr	r2, [pc, #376]	; (8002130 <HW_TS_Init+0x1a4>)
 8001fb8:	f043 0320 	orr.w	r3, r3, #32
 8001fbc:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001fbe:	4b5c      	ldr	r3, [pc, #368]	; (8002130 <HW_TS_Init+0x1a4>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	f1c3 0304 	rsb	r3, r3, #4
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	4b58      	ldr	r3, [pc, #352]	; (8002134 <HW_TS_Init+0x1a8>)
 8001fd2:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001fd4:	4b56      	ldr	r3, [pc, #344]	; (8002130 <HW_TS_Init+0x1a4>)
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001fdc:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001fe0:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	fa92 f2a2 	rbit	r2, r2
 8001fe8:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	2a00      	cmp	r2, #0
 8001ff2:	d101      	bne.n	8001ff8 <HW_TS_Init+0x6c>
  {
    return 32U;
 8001ff4:	2220      	movs	r2, #32
 8001ff6:	e003      	b.n	8002000 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	fab2 f282 	clz	r2, r2
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	40d3      	lsrs	r3, r2
 8002002:	b2db      	uxtb	r3, r3
 8002004:	3301      	adds	r3, #1
 8002006:	b2da      	uxtb	r2, r3
 8002008:	4b4b      	ldr	r3, [pc, #300]	; (8002138 <HW_TS_Init+0x1ac>)
 800200a:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800200c:	4b48      	ldr	r3, [pc, #288]	; (8002130 <HW_TS_Init+0x1a4>)
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	b29b      	uxth	r3, r3
 8002012:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002016:	b29b      	uxth	r3, r3
 8002018:	3301      	adds	r3, #1
 800201a:	b29a      	uxth	r2, r3
 800201c:	4b47      	ldr	r3, [pc, #284]	; (800213c <HW_TS_Init+0x1b0>)
 800201e:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002020:	4b46      	ldr	r3, [pc, #280]	; (800213c <HW_TS_Init+0x1b0>)
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	3b01      	subs	r3, #1
 8002026:	4a44      	ldr	r2, [pc, #272]	; (8002138 <HW_TS_Init+0x1ac>)
 8002028:	7812      	ldrb	r2, [r2, #0]
 800202a:	fb02 f303 	mul.w	r3, r2, r3
 800202e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002032:	4a40      	ldr	r2, [pc, #256]	; (8002134 <HW_TS_Init+0x1a8>)
 8002034:	7812      	ldrb	r2, [r2, #0]
 8002036:	40d3      	lsrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002040:	4293      	cmp	r3, r2
 8002042:	d904      	bls.n	800204e <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002044:	4b3e      	ldr	r3, [pc, #248]	; (8002140 <HW_TS_Init+0x1b4>)
 8002046:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800204a:	801a      	strh	r2, [r3, #0]
 800204c:	e003      	b.n	8002056 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	b29a      	uxth	r2, r3
 8002052:	4b3b      	ldr	r3, [pc, #236]	; (8002140 <HW_TS_Init+0x1b4>)
 8002054:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002056:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800205a:	f7ff fb81 	bl	8001760 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800205e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002062:	f7ff fb69 	bl	8001738 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d143      	bne.n	80020f4 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800206c:	4b35      	ldr	r3, [pc, #212]	; (8002144 <HW_TS_Init+0x1b8>)
 800206e:	2201      	movs	r2, #1
 8002070:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002072:	4b35      	ldr	r3, [pc, #212]	; (8002148 <HW_TS_Init+0x1bc>)
 8002074:	f04f 32ff 	mov.w	r2, #4294967295
 8002078:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800207a:	2300      	movs	r3, #0
 800207c:	77fb      	strb	r3, [r7, #31]
 800207e:	e00c      	b.n	800209a <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002080:	7ffa      	ldrb	r2, [r7, #31]
 8002082:	4932      	ldr	r1, [pc, #200]	; (800214c <HW_TS_Init+0x1c0>)
 8002084:	4613      	mov	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4413      	add	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	440b      	add	r3, r1
 800208e:	330c      	adds	r3, #12
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002094:	7ffb      	ldrb	r3, [r7, #31]
 8002096:	3301      	adds	r3, #1
 8002098:	77fb      	strb	r3, [r7, #31]
 800209a:	7ffb      	ldrb	r3, [r7, #31]
 800209c:	2b05      	cmp	r3, #5
 800209e:	d9ef      	bls.n	8002080 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80020a0:	4b2b      	ldr	r3, [pc, #172]	; (8002150 <HW_TS_Init+0x1c4>)
 80020a2:	2206      	movs	r2, #6
 80020a4:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80020a6:	4b21      	ldr	r3, [pc, #132]	; (800212c <HW_TS_Init+0x1a0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	4b1f      	ldr	r3, [pc, #124]	; (800212c <HW_TS_Init+0x1a0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020b8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80020ba:	4b1c      	ldr	r3, [pc, #112]	; (800212c <HW_TS_Init+0x1a0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <HW_TS_Init+0x1a0>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80020ce:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80020d0:	4b20      	ldr	r3, [pc, #128]	; (8002154 <HW_TS_Init+0x1c8>)
 80020d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80020d6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80020d8:	2003      	movs	r0, #3
 80020da:	f002 fe8a 	bl	8004df2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80020de:	4b13      	ldr	r3, [pc, #76]	; (800212c <HW_TS_Init+0x1a0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	4b11      	ldr	r3, [pc, #68]	; (800212c <HW_TS_Init+0x1a0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020f0:	609a      	str	r2, [r3, #8]
 80020f2:	e00a      	b.n	800210a <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80020f4:	4b0d      	ldr	r3, [pc, #52]	; (800212c <HW_TS_Init+0x1a0>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002104:	2003      	movs	r0, #3
 8002106:	f002 fe66 	bl	8004dd6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800210a:	4b08      	ldr	r3, [pc, #32]	; (800212c <HW_TS_Init+0x1a0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	22ff      	movs	r2, #255	; 0xff
 8002112:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002114:	2200      	movs	r2, #0
 8002116:	2103      	movs	r1, #3
 8002118:	2003      	movs	r0, #3
 800211a:	f002 fe1a 	bl	8004d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800211e:	2003      	movs	r0, #3
 8002120:	f002 fe31 	bl	8004d86 <HAL_NVIC_EnableIRQ>

  return;
 8002124:	bf00      	nop
}
 8002126:	3720      	adds	r7, #32
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000388 	.word	0x20000388
 8002130:	40002800 	.word	0x40002800
 8002134:	2000038c 	.word	0x2000038c
 8002138:	2000038d 	.word	0x2000038d
 800213c:	2000038e 	.word	0x2000038e
 8002140:	20000390 	.word	0x20000390
 8002144:	20000290 	.word	0x20000290
 8002148:	2000028c 	.word	0x2000028c
 800214c:	200001f8 	.word	0x200001f8
 8002150:	20000288 	.word	0x20000288
 8002154:	58000800 	.word	0x58000800

08002158 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002162:	f3ef 8310 	mrs	r3, PRIMASK
 8002166:	60fb      	str	r3, [r7, #12]
  return(result);
 8002168:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800216a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800216c:	b672      	cpsid	i
}
 800216e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002170:	2003      	movs	r0, #3
 8002172:	f002 fe16 	bl	8004da2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8002176:	4b38      	ldr	r3, [pc, #224]	; (8002258 <HW_TS_Stop+0x100>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	22ca      	movs	r2, #202	; 0xca
 800217e:	625a      	str	r2, [r3, #36]	; 0x24
 8002180:	4b35      	ldr	r3, [pc, #212]	; (8002258 <HW_TS_Stop+0x100>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2253      	movs	r2, #83	; 0x53
 8002188:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800218a:	79fa      	ldrb	r2, [r7, #7]
 800218c:	4933      	ldr	r1, [pc, #204]	; (800225c <HW_TS_Stop+0x104>)
 800218e:	4613      	mov	r3, r2
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	4413      	add	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	440b      	add	r3, r1
 8002198:	330c      	adds	r3, #12
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d148      	bne.n	8002234 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	2100      	movs	r1, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fc5c 	bl	8001a64 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80021ac:	4b2c      	ldr	r3, [pc, #176]	; (8002260 <HW_TS_Stop+0x108>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80021b2:	7cfb      	ldrb	r3, [r7, #19]
 80021b4:	2b06      	cmp	r3, #6
 80021b6:	d135      	bne.n	8002224 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80021b8:	4b2a      	ldr	r3, [pc, #168]	; (8002264 <HW_TS_Stop+0x10c>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c4:	d108      	bne.n	80021d8 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80021c6:	bf00      	nop
 80021c8:	4b23      	ldr	r3, [pc, #140]	; (8002258 <HW_TS_Stop+0x100>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1f7      	bne.n	80021c8 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80021d8:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <HW_TS_Stop+0x100>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <HW_TS_Stop+0x100>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ea:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80021ec:	bf00      	nop
 80021ee:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <HW_TS_Stop+0x100>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f7      	beq.n	80021ee <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80021fe:	4b16      	ldr	r3, [pc, #88]	; (8002258 <HW_TS_Stop+0x100>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	b2da      	uxtb	r2, r3
 8002208:	4b13      	ldr	r3, [pc, #76]	; (8002258 <HW_TS_Stop+0x100>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002212:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002214:	4b14      	ldr	r3, [pc, #80]	; (8002268 <HW_TS_Stop+0x110>)
 8002216:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800221a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800221c:	2003      	movs	r0, #3
 800221e:	f002 fde8 	bl	8004df2 <HAL_NVIC_ClearPendingIRQ>
 8002222:	e007      	b.n	8002234 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002224:	4b11      	ldr	r3, [pc, #68]	; (800226c <HW_TS_Stop+0x114>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	7cfa      	ldrb	r2, [r7, #19]
 800222c:	429a      	cmp	r2, r3
 800222e:	d001      	beq.n	8002234 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 8002230:	f7ff fd3a 	bl	8001ca8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <HW_TS_Stop+0x100>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	22ff      	movs	r2, #255	; 0xff
 800223c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800223e:	2003      	movs	r0, #3
 8002240:	f002 fda1 	bl	8004d86 <HAL_NVIC_EnableIRQ>
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	f383 8810 	msr	PRIMASK, r3
}
 800224e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002250:	bf00      	nop
}
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20000388 	.word	0x20000388
 800225c:	200001f8 	.word	0x200001f8
 8002260:	20000288 	.word	0x20000288
 8002264:	40002800 	.word	0x40002800
 8002268:	58000800 	.word	0x58000800
 800226c:	20000289 	.word	0x20000289

08002270 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	6039      	str	r1, [r7, #0]
 800227a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800227c:	79fa      	ldrb	r2, [r7, #7]
 800227e:	493c      	ldr	r1, [pc, #240]	; (8002370 <HW_TS_Start+0x100>)
 8002280:	4613      	mov	r3, r2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	4413      	add	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	440b      	add	r3, r1
 800228a:	330c      	adds	r3, #12
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d103      	bne.n	800229c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff ff5e 	bl	8002158 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800229c:	f3ef 8310 	mrs	r3, PRIMASK
 80022a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80022a2:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80022a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80022a6:	b672      	cpsid	i
}
 80022a8:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80022aa:	2003      	movs	r0, #3
 80022ac:	f002 fd79 	bl	8004da2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80022b0:	4b30      	ldr	r3, [pc, #192]	; (8002374 <HW_TS_Start+0x104>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	22ca      	movs	r2, #202	; 0xca
 80022b8:	625a      	str	r2, [r3, #36]	; 0x24
 80022ba:	4b2e      	ldr	r3, [pc, #184]	; (8002374 <HW_TS_Start+0x104>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2253      	movs	r2, #83	; 0x53
 80022c2:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80022c4:	79fa      	ldrb	r2, [r7, #7]
 80022c6:	492a      	ldr	r1, [pc, #168]	; (8002370 <HW_TS_Start+0x100>)
 80022c8:	4613      	mov	r3, r2
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	4413      	add	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	440b      	add	r3, r1
 80022d2:	330c      	adds	r3, #12
 80022d4:	2202      	movs	r2, #2
 80022d6:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80022d8:	79fa      	ldrb	r2, [r7, #7]
 80022da:	4925      	ldr	r1, [pc, #148]	; (8002370 <HW_TS_Start+0x100>)
 80022dc:	4613      	mov	r3, r2
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	4413      	add	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	440b      	add	r3, r1
 80022e6:	3308      	adds	r3, #8
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80022ec:	79fa      	ldrb	r2, [r7, #7]
 80022ee:	4920      	ldr	r1, [pc, #128]	; (8002370 <HW_TS_Start+0x100>)
 80022f0:	4613      	mov	r3, r2
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4413      	add	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	440b      	add	r3, r1
 80022fa:	3304      	adds	r3, #4
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff fb04 	bl	8001910 <linkTimer>
 8002308:	4603      	mov	r3, r0
 800230a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800230c:	4b1a      	ldr	r3, [pc, #104]	; (8002378 <HW_TS_Start+0x108>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002312:	4b1a      	ldr	r3, [pc, #104]	; (800237c <HW_TS_Start+0x10c>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	7c7a      	ldrb	r2, [r7, #17]
 800231a:	429a      	cmp	r2, r3
 800231c:	d002      	beq.n	8002324 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 800231e:	f7ff fcc3 	bl	8001ca8 <RescheduleTimerList>
 8002322:	e013      	b.n	800234c <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002324:	79fa      	ldrb	r2, [r7, #7]
 8002326:	4912      	ldr	r1, [pc, #72]	; (8002370 <HW_TS_Start+0x100>)
 8002328:	4613      	mov	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4413      	add	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	440b      	add	r3, r1
 8002332:	3308      	adds	r3, #8
 8002334:	6819      	ldr	r1, [r3, #0]
 8002336:	8a7b      	ldrh	r3, [r7, #18]
 8002338:	79fa      	ldrb	r2, [r7, #7]
 800233a:	1ac9      	subs	r1, r1, r3
 800233c:	480c      	ldr	r0, [pc, #48]	; (8002370 <HW_TS_Start+0x100>)
 800233e:	4613      	mov	r3, r2
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	4413      	add	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4403      	add	r3, r0
 8002348:	3308      	adds	r3, #8
 800234a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800234c:	4b09      	ldr	r3, [pc, #36]	; (8002374 <HW_TS_Start+0x104>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	22ff      	movs	r2, #255	; 0xff
 8002354:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002356:	2003      	movs	r0, #3
 8002358:	f002 fd15 	bl	8004d86 <HAL_NVIC_EnableIRQ>
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	f383 8810 	msr	PRIMASK, r3
}
 8002366:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002368:	bf00      	nop
}
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	200001f8 	.word	0x200001f8
 8002374:	20000388 	.word	0x20000388
 8002378:	20000288 	.word	0x20000288
 800237c:	20000289 	.word	0x20000289

08002380 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	460b      	mov	r3, r1
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4798      	blx	r3

  return;
 8002392:	bf00      	nop
}
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <LL_RCC_LSE_SetDriveCapability>:
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80023a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023aa:	f023 0218 	bic.w	r2, r3, #24
 80023ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <LL_AHB2_GRP1_EnableClock>:
{
 80023c6:	b480      	push	{r7}
 80023c8:	b085      	sub	sp, #20
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80023ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4313      	orrs	r3, r2
 80023dc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80023de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4013      	ands	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023ea:	68fb      	ldr	r3, [r7, #12]
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <drawLogo>:
* 						- Remember to init ssd1306_Init();
* 						- I2C Config - Pull-up, Max output speed = HIGH
* 						- I2C Clock: PCLK1
******************************************************************************************************/

void drawLogo() {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af04      	add	r7, sp, #16

	drawBitmap(7, 20, (uint8_t *)JaktoolLogoBMP, JaktoolLogoWidth, JaktoolLogoHeight, White, Black);
 80023fe:	2300      	movs	r3, #0
 8002400:	9302      	str	r3, [sp, #8]
 8002402:	2301      	movs	r3, #1
 8002404:	9301      	str	r3, [sp, #4]
 8002406:	2315      	movs	r3, #21
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	2373      	movs	r3, #115	; 0x73
 800240c:	4a05      	ldr	r2, [pc, #20]	; (8002424 <drawLogo+0x2c>)
 800240e:	2114      	movs	r1, #20
 8002410:	2007      	movs	r0, #7
 8002412:	f7fe fd73 	bl	8000efc <drawBitmap>
	HAL_Delay(150);
 8002416:	2096      	movs	r0, #150	; 0x96
 8002418:	f7ff f92b 	bl	8001672 <HAL_Delay>

}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	0800eb78 	.word	0x0800eb78

08002428 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	; 0x28
 800242c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	//UART Message Buffer:
	char MSG[35] = {'\0'};
 800242e:	2300      	movs	r3, #0
 8002430:	603b      	str	r3, [r7, #0]
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	221f      	movs	r2, #31
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f009 fbc5 	bl	800bbc8 <memset>

	// Temp Sensor Buffer:
	float ADC_TEMP_F = 0.0;
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002444:	f001 f8d8 	bl	80035f8 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002448:	f7fe ffa4 	bl	8001394 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800244c:	f000 f854 	bl	80024f8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002450:	f000 f8b4 	bl	80025bc <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8002454:	f000 f976 	bl	8002744 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002458:	f000 fa10 	bl	800287c <MX_GPIO_Init>
  MX_RF_Init();
 800245c:	f000 f986 	bl	800276c <MX_RF_Init>
  MX_RTC_Init();
 8002460:	f000 f98c 	bl	800277c <MX_RTC_Init>
  MX_USART1_UART_Init();
 8002464:	f000 f9be 	bl	80027e4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002468:	f000 f92c 	bl	80026c4 <MX_I2C1_Init>
  MX_ADC1_Init();
 800246c:	f000 f8c6 	bl	80025fc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // Initialize OLED
  ssd1306_Init();
 8002470:	f000 fb72 	bl	8002b58 <ssd1306_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002474:	f7fe ff9c 	bl	80013b0 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //Output to Display
  drawLogo();
 8002478:	f7ff ffbe 	bl	80023f8 <drawLogo>
  HAL_Delay(150);
 800247c:	2096      	movs	r0, #150	; 0x96
 800247e:	f7ff f8f8 	bl	8001672 <HAL_Delay>

  //Output to UART and Display
  sprintf(MSG, "Initializing... \r\n");
 8002482:	463b      	mov	r3, r7
 8002484:	491a      	ldr	r1, [pc, #104]	; (80024f0 <main+0xc8>)
 8002486:	4618      	mov	r0, r3
 8002488:	f00a f810 	bl	800c4ac <siprintf>
  UART_Transmit((uint8_t*)MSG, strlen(MSG));
 800248c:	463b      	mov	r3, r7
 800248e:	4618      	mov	r0, r3
 8002490:	f7fd fe76 	bl	8000180 <strlen>
 8002494:	4603      	mov	r3, r0
 8002496:	b29a      	uxth	r2, r3
 8002498:	463b      	mov	r3, r7
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f000 facb 	bl	8002a38 <UART_Transmit>
  clearScreen(Black);
 80024a2:	2000      	movs	r0, #0
 80024a4:	f7fe fdde 	bl	8001064 <clearScreen>
  OLED_Transmit_Line1((uint8_t*)MSG);
 80024a8:	463b      	mov	r3, r7
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 faec 	bl	8002a88 <OLED_Transmit_Line1>

  //Read ADC, print to 2 decimal places
	ADC_TEMP_F = Get_ADC_Temp();
 80024b0:	f000 fa4a 	bl	8002948 <Get_ADC_Temp>
 80024b4:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	sprintf(MSG, "Temp: %0.2f deg F\r\n", ADC_TEMP_F);
 80024b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024ba:	f7fe f81d 	bl	80004f8 <__aeabi_f2d>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4638      	mov	r0, r7
 80024c4:	490b      	ldr	r1, [pc, #44]	; (80024f4 <main+0xcc>)
 80024c6:	f009 fff1 	bl	800c4ac <siprintf>
	UART_Transmit((uint8_t*)MSG, strlen(MSG));
 80024ca:	463b      	mov	r3, r7
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fd fe57 	bl	8000180 <strlen>
 80024d2:	4603      	mov	r3, r0
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	463b      	mov	r3, r7
 80024d8:	4611      	mov	r1, r2
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 faac 	bl	8002a38 <UART_Transmit>
	OLED_Transmit_Line2((uint8_t*)MSG);
 80024e0:	463b      	mov	r3, r7
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 fade 	bl	8002aa4 <OLED_Transmit_Line2>

  while (1)
  {

    /* USER CODE END WHILE */
    MX_APPE_Process();
 80024e8:	f7ff f8e8 	bl	80016bc <MX_APPE_Process>
 80024ec:	e7fc      	b.n	80024e8 <main+0xc0>
 80024ee:	bf00      	nop
 80024f0:	0800e98c 	.word	0x0800e98c
 80024f4:	0800e9a0 	.word	0x0800e9a0

080024f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b09a      	sub	sp, #104	; 0x68
 80024fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024fe:	f107 0320 	add.w	r3, r7, #32
 8002502:	2248      	movs	r2, #72	; 0x48
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f009 fb5e 	bl	800bbc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800250c:	1d3b      	adds	r3, r7, #4
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	605a      	str	r2, [r3, #4]
 8002514:	609a      	str	r2, [r3, #8]
 8002516:	60da      	str	r2, [r3, #12]
 8002518:	611a      	str	r2, [r3, #16]
 800251a:	615a      	str	r2, [r3, #20]
 800251c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800251e:	f003 fb2d 	bl	8005b7c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002522:	2000      	movs	r0, #0
 8002524:	f7ff ff39 	bl	800239a <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002528:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <SystemClock_Config+0xc0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002530:	4a21      	ldr	r2, [pc, #132]	; (80025b8 <SystemClock_Config+0xc0>)
 8002532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	4b1f      	ldr	r3, [pc, #124]	; (80025b8 <SystemClock_Config+0xc0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002540:	603b      	str	r3, [r7, #0]
 8002542:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002544:	2327      	movs	r3, #39	; 0x27
 8002546:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002548:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800254e:	2301      	movs	r3, #1
 8002550:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002552:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002556:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002558:	2301      	movs	r3, #1
 800255a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800255c:	2340      	movs	r3, #64	; 0x40
 800255e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002560:	2300      	movs	r3, #0
 8002562:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8002564:	23a0      	movs	r3, #160	; 0xa0
 8002566:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002568:	2300      	movs	r3, #0
 800256a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800256c:	f107 0320 	add.w	r3, r7, #32
 8002570:	4618      	mov	r0, r3
 8002572:	f003 fe97 	bl	80062a4 <HAL_RCC_OscConfig>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800257c:	f000 faae 	bl	8002adc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002580:	236f      	movs	r3, #111	; 0x6f
 8002582:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002584:	2300      	movs	r3, #0
 8002586:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800258c:	2300      	movs	r3, #0
 800258e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002594:	2300      	movs	r3, #0
 8002596:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002598:	2300      	movs	r3, #0
 800259a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800259c:	1d3b      	adds	r3, r7, #4
 800259e:	2101      	movs	r1, #1
 80025a0:	4618      	mov	r0, r3
 80025a2:	f004 fa0d 	bl	80069c0 <HAL_RCC_ClockConfig>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80025ac:	f000 fa96 	bl	8002adc <Error_Handler>
  }
}
 80025b0:	bf00      	nop
 80025b2:	3768      	adds	r7, #104	; 0x68
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	58000400 	.word	0x58000400

080025bc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b094      	sub	sp, #80	; 0x50
 80025c0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025c2:	463b      	mov	r3, r7
 80025c4:	2250      	movs	r2, #80	; 0x50
 80025c6:	2100      	movs	r1, #0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f009 fafd 	bl	800bbc8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80025ce:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80025d2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80025d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025d8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80025da:	2300      	movs	r3, #0
 80025dc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80025de:	2300      	movs	r3, #0
 80025e0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025e2:	463b      	mov	r3, r7
 80025e4:	4618      	mov	r0, r3
 80025e6:	f004 fe28 	bl	800723a <HAL_RCCEx_PeriphCLKConfig>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80025f0:	f000 fa74 	bl	8002adc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80025f4:	bf00      	nop
 80025f6:	3750      	adds	r7, #80	; 0x50
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002602:	463b      	mov	r3, r7
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
 8002610:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002612:	4b29      	ldr	r3, [pc, #164]	; (80026b8 <MX_ADC1_Init+0xbc>)
 8002614:	4a29      	ldr	r2, [pc, #164]	; (80026bc <MX_ADC1_Init+0xc0>)
 8002616:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002618:	4b27      	ldr	r3, [pc, #156]	; (80026b8 <MX_ADC1_Init+0xbc>)
 800261a:	2200      	movs	r2, #0
 800261c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800261e:	4b26      	ldr	r3, [pc, #152]	; (80026b8 <MX_ADC1_Init+0xbc>)
 8002620:	2200      	movs	r2, #0
 8002622:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002624:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <MX_ADC1_Init+0xbc>)
 8002626:	2200      	movs	r2, #0
 8002628:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800262a:	4b23      	ldr	r3, [pc, #140]	; (80026b8 <MX_ADC1_Init+0xbc>)
 800262c:	2200      	movs	r2, #0
 800262e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002630:	4b21      	ldr	r3, [pc, #132]	; (80026b8 <MX_ADC1_Init+0xbc>)
 8002632:	2204      	movs	r2, #4
 8002634:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002636:	4b20      	ldr	r3, [pc, #128]	; (80026b8 <MX_ADC1_Init+0xbc>)
 8002638:	2200      	movs	r2, #0
 800263a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800263c:	4b1e      	ldr	r3, [pc, #120]	; (80026b8 <MX_ADC1_Init+0xbc>)
 800263e:	2200      	movs	r2, #0
 8002640:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002642:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <MX_ADC1_Init+0xbc>)
 8002644:	2201      	movs	r2, #1
 8002646:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002648:	4b1b      	ldr	r3, [pc, #108]	; (80026b8 <MX_ADC1_Init+0xbc>)
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002650:	4b19      	ldr	r3, [pc, #100]	; (80026b8 <MX_ADC1_Init+0xbc>)
 8002652:	2200      	movs	r2, #0
 8002654:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002656:	4b18      	ldr	r3, [pc, #96]	; (80026b8 <MX_ADC1_Init+0xbc>)
 8002658:	2200      	movs	r2, #0
 800265a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800265c:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <MX_ADC1_Init+0xbc>)
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002664:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <MX_ADC1_Init+0xbc>)
 8002666:	2200      	movs	r2, #0
 8002668:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800266a:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <MX_ADC1_Init+0xbc>)
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002672:	4811      	ldr	r0, [pc, #68]	; (80026b8 <MX_ADC1_Init+0xbc>)
 8002674:	f001 fa68 	bl	8003b48 <HAL_ADC_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800267e:	f000 fa2d 	bl	8002adc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002682:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <MX_ADC1_Init+0xc4>)
 8002684:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002686:	2306      	movs	r3, #6
 8002688:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800268e:	237f      	movs	r3, #127	; 0x7f
 8002690:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002692:	2304      	movs	r3, #4
 8002694:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800269a:	463b      	mov	r3, r7
 800269c:	4619      	mov	r1, r3
 800269e:	4806      	ldr	r0, [pc, #24]	; (80026b8 <MX_ADC1_Init+0xbc>)
 80026a0:	f001 fcc0 	bl	8004024 <HAL_ADC_ConfigChannel>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80026aa:	f000 fa17 	bl	8002adc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80026ae:	bf00      	nop
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000394 	.word	0x20000394
 80026bc:	50040000 	.word	0x50040000
 80026c0:	04300002 	.word	0x04300002

080026c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026c8:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <MX_I2C1_Init+0x74>)
 80026ca:	4a1c      	ldr	r2, [pc, #112]	; (800273c <MX_I2C1_Init+0x78>)
 80026cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80026ce:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <MX_I2C1_Init+0x74>)
 80026d0:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <MX_I2C1_Init+0x7c>)
 80026d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80026d4:	4b18      	ldr	r3, [pc, #96]	; (8002738 <MX_I2C1_Init+0x74>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026da:	4b17      	ldr	r3, [pc, #92]	; (8002738 <MX_I2C1_Init+0x74>)
 80026dc:	2201      	movs	r2, #1
 80026de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026e0:	4b15      	ldr	r3, [pc, #84]	; (8002738 <MX_I2C1_Init+0x74>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80026e6:	4b14      	ldr	r3, [pc, #80]	; (8002738 <MX_I2C1_Init+0x74>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026ec:	4b12      	ldr	r3, [pc, #72]	; (8002738 <MX_I2C1_Init+0x74>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026f2:	4b11      	ldr	r3, [pc, #68]	; (8002738 <MX_I2C1_Init+0x74>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026f8:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <MX_I2C1_Init+0x74>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026fe:	480e      	ldr	r0, [pc, #56]	; (8002738 <MX_I2C1_Init+0x74>)
 8002700:	f002 fd64 	bl	80051cc <HAL_I2C_Init>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800270a:	f000 f9e7 	bl	8002adc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800270e:	2100      	movs	r1, #0
 8002710:	4809      	ldr	r0, [pc, #36]	; (8002738 <MX_I2C1_Init+0x74>)
 8002712:	f003 f915 	bl	8005940 <HAL_I2CEx_ConfigAnalogFilter>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800271c:	f000 f9de 	bl	8002adc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002720:	2100      	movs	r1, #0
 8002722:	4805      	ldr	r0, [pc, #20]	; (8002738 <MX_I2C1_Init+0x74>)
 8002724:	f003 f957 	bl	80059d6 <HAL_I2CEx_ConfigDigitalFilter>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800272e:	f000 f9d5 	bl	8002adc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	200003f8 	.word	0x200003f8
 800273c:	40005400 	.word	0x40005400
 8002740:	00303d5b 	.word	0x00303d5b

08002744 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <MX_IPCC_Init+0x20>)
 800274a:	4a07      	ldr	r2, [pc, #28]	; (8002768 <MX_IPCC_Init+0x24>)
 800274c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800274e:	4805      	ldr	r0, [pc, #20]	; (8002764 <MX_IPCC_Init+0x20>)
 8002750:	f003 f98e 	bl	8005a70 <HAL_IPCC_Init>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800275a:	f000 f9bf 	bl	8002adc <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000444 	.word	0x20000444
 8002768:	58000c00 	.word	0x58000c00

0800276c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002780:	4b16      	ldr	r3, [pc, #88]	; (80027dc <MX_RTC_Init+0x60>)
 8002782:	4a17      	ldr	r2, [pc, #92]	; (80027e0 <MX_RTC_Init+0x64>)
 8002784:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002786:	4b15      	ldr	r3, [pc, #84]	; (80027dc <MX_RTC_Init+0x60>)
 8002788:	2200      	movs	r2, #0
 800278a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 800278c:	4b13      	ldr	r3, [pc, #76]	; (80027dc <MX_RTC_Init+0x60>)
 800278e:	220f      	movs	r2, #15
 8002790:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002792:	4b12      	ldr	r3, [pc, #72]	; (80027dc <MX_RTC_Init+0x60>)
 8002794:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002798:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <MX_RTC_Init+0x60>)
 800279c:	2200      	movs	r2, #0
 800279e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80027a0:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <MX_RTC_Init+0x60>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80027a6:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <MX_RTC_Init+0x60>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <MX_RTC_Init+0x60>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80027b2:	480a      	ldr	r0, [pc, #40]	; (80027dc <MX_RTC_Init+0x60>)
 80027b4:	f004 ffc8 	bl	8007748 <HAL_RTC_Init>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80027be:	f000 f98d 	bl	8002adc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80027c2:	2200      	movs	r2, #0
 80027c4:	2100      	movs	r1, #0
 80027c6:	4805      	ldr	r0, [pc, #20]	; (80027dc <MX_RTC_Init+0x60>)
 80027c8:	f005 f8ac 	bl	8007924 <HAL_RTCEx_SetWakeUpTimer_IT>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80027d2:	f000 f983 	bl	8002adc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000480 	.word	0x20000480
 80027e0:	40002800 	.word	0x40002800

080027e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027e8:	4b22      	ldr	r3, [pc, #136]	; (8002874 <MX_USART1_UART_Init+0x90>)
 80027ea:	4a23      	ldr	r2, [pc, #140]	; (8002878 <MX_USART1_UART_Init+0x94>)
 80027ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027ee:	4b21      	ldr	r3, [pc, #132]	; (8002874 <MX_USART1_UART_Init+0x90>)
 80027f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027f6:	4b1f      	ldr	r3, [pc, #124]	; (8002874 <MX_USART1_UART_Init+0x90>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027fc:	4b1d      	ldr	r3, [pc, #116]	; (8002874 <MX_USART1_UART_Init+0x90>)
 80027fe:	2200      	movs	r2, #0
 8002800:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002802:	4b1c      	ldr	r3, [pc, #112]	; (8002874 <MX_USART1_UART_Init+0x90>)
 8002804:	2200      	movs	r2, #0
 8002806:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002808:	4b1a      	ldr	r3, [pc, #104]	; (8002874 <MX_USART1_UART_Init+0x90>)
 800280a:	220c      	movs	r2, #12
 800280c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800280e:	4b19      	ldr	r3, [pc, #100]	; (8002874 <MX_USART1_UART_Init+0x90>)
 8002810:	2200      	movs	r2, #0
 8002812:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002814:	4b17      	ldr	r3, [pc, #92]	; (8002874 <MX_USART1_UART_Init+0x90>)
 8002816:	2200      	movs	r2, #0
 8002818:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800281a:	4b16      	ldr	r3, [pc, #88]	; (8002874 <MX_USART1_UART_Init+0x90>)
 800281c:	2200      	movs	r2, #0
 800281e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002820:	4b14      	ldr	r3, [pc, #80]	; (8002874 <MX_USART1_UART_Init+0x90>)
 8002822:	2200      	movs	r2, #0
 8002824:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002826:	4b13      	ldr	r3, [pc, #76]	; (8002874 <MX_USART1_UART_Init+0x90>)
 8002828:	2200      	movs	r2, #0
 800282a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800282c:	4811      	ldr	r0, [pc, #68]	; (8002874 <MX_USART1_UART_Init+0x90>)
 800282e:	f005 f955 	bl	8007adc <HAL_UART_Init>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002838:	f000 f950 	bl	8002adc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800283c:	2100      	movs	r1, #0
 800283e:	480d      	ldr	r0, [pc, #52]	; (8002874 <MX_USART1_UART_Init+0x90>)
 8002840:	f005 fe48 	bl	80084d4 <HAL_UARTEx_SetTxFifoThreshold>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800284a:	f000 f947 	bl	8002adc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800284e:	2100      	movs	r1, #0
 8002850:	4808      	ldr	r0, [pc, #32]	; (8002874 <MX_USART1_UART_Init+0x90>)
 8002852:	f005 fe7d 	bl	8008550 <HAL_UARTEx_SetRxFifoThreshold>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800285c:	f000 f93e 	bl	8002adc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002860:	4804      	ldr	r0, [pc, #16]	; (8002874 <MX_USART1_UART_Init+0x90>)
 8002862:	f005 fdfe 	bl	8008462 <HAL_UARTEx_DisableFifoMode>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800286c:	f000 f936 	bl	8002adc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002870:	bf00      	nop
 8002872:	bd80      	pop	{r7, pc}
 8002874:	200004a4 	.word	0x200004a4
 8002878:	40013800 	.word	0x40013800

0800287c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002882:	1d3b      	adds	r3, r7, #4
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	60da      	str	r2, [r3, #12]
 800288e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002890:	2004      	movs	r0, #4
 8002892:	f7ff fd98 	bl	80023c6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002896:	2002      	movs	r0, #2
 8002898:	f7ff fd95 	bl	80023c6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800289c:	2001      	movs	r0, #1
 800289e:	f7ff fd92 	bl	80023c6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028a2:	2008      	movs	r0, #8
 80028a4:	f7ff fd8f 	bl	80023c6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|GPIO_PIN_4|LDExt_Pin, GPIO_PIN_RESET);
 80028a8:	2200      	movs	r2, #0
 80028aa:	2133      	movs	r1, #51	; 0x33
 80028ac:	4823      	ldr	r0, [pc, #140]	; (800293c <MX_GPIO_Init+0xc0>)
 80028ae:	f002 fc37 	bl	8005120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80028b2:	2310      	movs	r3, #16
 80028b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028ba:	2301      	movs	r3, #1
 80028bc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80028be:	1d3b      	adds	r3, r7, #4
 80028c0:	4619      	mov	r1, r3
 80028c2:	481f      	ldr	r0, [pc, #124]	; (8002940 <MX_GPIO_Init+0xc4>)
 80028c4:	f002 faa4 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin PB4 */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|GPIO_PIN_4;
 80028c8:	2313      	movs	r3, #19
 80028ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028cc:	2301      	movs	r3, #1
 80028ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d4:	2300      	movs	r3, #0
 80028d6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d8:	1d3b      	adds	r3, r7, #4
 80028da:	4619      	mov	r1, r3
 80028dc:	4817      	ldr	r0, [pc, #92]	; (800293c <MX_GPIO_Init+0xc0>)
 80028de:	f002 fa97 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80028e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80028e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e8:	2302      	movs	r3, #2
 80028ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f0:	2300      	movs	r3, #0
 80028f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80028f4:	230a      	movs	r3, #10
 80028f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f8:	1d3b      	adds	r3, r7, #4
 80028fa:	4619      	mov	r1, r3
 80028fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002900:	f002 fa86 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8002904:	2303      	movs	r3, #3
 8002906:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002908:	2300      	movs	r3, #0
 800290a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002910:	1d3b      	adds	r3, r7, #4
 8002912:	4619      	mov	r1, r3
 8002914:	480b      	ldr	r0, [pc, #44]	; (8002944 <MX_GPIO_Init+0xc8>)
 8002916:	f002 fa7b 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LDExt_Pin */
  GPIO_InitStruct.Pin = LDExt_Pin;
 800291a:	2320      	movs	r3, #32
 800291c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800291e:	2301      	movs	r3, #1
 8002920:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002922:	2302      	movs	r3, #2
 8002924:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002926:	2300      	movs	r3, #0
 8002928:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LDExt_GPIO_Port, &GPIO_InitStruct);
 800292a:	1d3b      	adds	r3, r7, #4
 800292c:	4619      	mov	r1, r3
 800292e:	4803      	ldr	r0, [pc, #12]	; (800293c <MX_GPIO_Init+0xc0>)
 8002930:	f002 fa6e 	bl	8004e10 <HAL_GPIO_Init>

}
 8002934:	bf00      	nop
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	48000400 	.word	0x48000400
 8002940:	48000800 	.word	0x48000800
 8002944:	48000c00 	.word	0x48000c00

08002948 <Get_ADC_Temp>:
* @return				- Temperature def F
*
* @note					-
******************************************************************************************************/
float Get_ADC_Temp()
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
	// Temp Sensor Buffer:
	uint16_t ADC_VAL = 0;
 800294e:	2300      	movs	r3, #0
 8002950:	80fb      	strh	r3, [r7, #6]
	float ADC_Temp = 0.0;
 8002952:	f04f 0300 	mov.w	r3, #0
 8002956:	603b      	str	r3, [r7, #0]

	HAL_ADC_Start(&hadc1);
 8002958:	4835      	ldr	r0, [pc, #212]	; (8002a30 <Get_ADC_Temp+0xe8>)
 800295a:	f001 fa41 	bl	8003de0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800295e:	f04f 31ff 	mov.w	r1, #4294967295
 8002962:	4833      	ldr	r0, [pc, #204]	; (8002a30 <Get_ADC_Temp+0xe8>)
 8002964:	f001 fac3 	bl	8003eee <HAL_ADC_PollForConversion>
	ADC_VAL = HAL_ADC_GetValue(&hadc1);
 8002968:	4831      	ldr	r0, [pc, #196]	; (8002a30 <Get_ADC_Temp+0xe8>)
 800296a:	f001 fb4d 	bl	8004008 <HAL_ADC_GetValue>
 800296e:	4603      	mov	r3, r0
 8002970:	80fb      	strh	r3, [r7, #6]

	HAL_ADC_Stop(&hadc1);
 8002972:	482f      	ldr	r0, [pc, #188]	; (8002a30 <Get_ADC_Temp+0xe8>)
 8002974:	f001 fa88 	bl	8003e88 <HAL_ADC_Stop>

	//Divide by Scaling Factor to get Voltage
	ADC_Temp = ADC_VAL / ADC_SCALING_FACTOR;
 8002978:	88fb      	ldrh	r3, [r7, #6]
 800297a:	4618      	mov	r0, r3
 800297c:	f7fd fdaa 	bl	80004d4 <__aeabi_i2d>
 8002980:	a323      	add	r3, pc, #140	; (adr r3, 8002a10 <Get_ADC_Temp+0xc8>)
 8002982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002986:	f7fd ff39 	bl	80007fc <__aeabi_ddiv>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4610      	mov	r0, r2
 8002990:	4619      	mov	r1, r3
 8002992:	f7fe f8e1 	bl	8000b58 <__aeabi_d2f>
 8002996:	4603      	mov	r3, r0
 8002998:	603b      	str	r3, [r7, #0]

	//Convert to deg C
	ADC_Temp = ((ADC_Temp - 1.8663)/(-0.01169));
 800299a:	6838      	ldr	r0, [r7, #0]
 800299c:	f7fd fdac 	bl	80004f8 <__aeabi_f2d>
 80029a0:	a31d      	add	r3, pc, #116	; (adr r3, 8002a18 <Get_ADC_Temp+0xd0>)
 80029a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a6:	f7fd fc47 	bl	8000238 <__aeabi_dsub>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	4610      	mov	r0, r2
 80029b0:	4619      	mov	r1, r3
 80029b2:	a31b      	add	r3, pc, #108	; (adr r3, 8002a20 <Get_ADC_Temp+0xd8>)
 80029b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b8:	f7fd ff20 	bl	80007fc <__aeabi_ddiv>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	f7fe f8c8 	bl	8000b58 <__aeabi_d2f>
 80029c8:	4603      	mov	r3, r0
 80029ca:	603b      	str	r3, [r7, #0]

	ADC_Temp = ((ADC_Temp * (9.0 / 5.0)) + 32.0);
 80029cc:	6838      	ldr	r0, [r7, #0]
 80029ce:	f7fd fd93 	bl	80004f8 <__aeabi_f2d>
 80029d2:	a315      	add	r3, pc, #84	; (adr r3, 8002a28 <Get_ADC_Temp+0xe0>)
 80029d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d8:	f7fd fde6 	bl	80005a8 <__aeabi_dmul>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4610      	mov	r0, r2
 80029e2:	4619      	mov	r1, r3
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <Get_ADC_Temp+0xec>)
 80029ea:	f7fd fc27 	bl	800023c <__adddf3>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	4610      	mov	r0, r2
 80029f4:	4619      	mov	r1, r3
 80029f6:	f7fe f8af 	bl	8000b58 <__aeabi_d2f>
 80029fa:	4603      	mov	r3, r0
 80029fc:	603b      	str	r3, [r7, #0]

	return ADC_Temp;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	ee07 3a90 	vmov	s15, r3

}
 8002a04:	eeb0 0a67 	vmov.f32	s0, s15
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	00000000 	.word	0x00000000
 8002a14:	4091c600 	.word	0x4091c600
 8002a18:	63886595 	.word	0x63886595
 8002a1c:	3ffddc5d 	.word	0x3ffddc5d
 8002a20:	3d859c8d 	.word	0x3d859c8d
 8002a24:	bf87f0ed 	.word	0xbf87f0ed
 8002a28:	cccccccd 	.word	0xcccccccd
 8002a2c:	3ffccccc 	.word	0x3ffccccc
 8002a30:	20000394 	.word	0x20000394
 8002a34:	40400000 	.word	0x40400000

08002a38 <UART_Transmit>:
* 						- size: sizeof Message : strlen(MSG)
* @return				- 0 if success, 1 if fail
*
* @note					- Simplifies Write to UART from anywhere that inherits main.h
******************************************************************************************************/
int UART_Transmit(uint8_t* data, uint16_t size){
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	807b      	strh	r3, [r7, #2]

	HAL_GPIO_WritePin(LDExt_GPIO_Port, LDExt_Pin, GPIO_PIN_SET);
 8002a44:	2201      	movs	r2, #1
 8002a46:	2120      	movs	r1, #32
 8002a48:	480d      	ldr	r0, [pc, #52]	; (8002a80 <UART_Transmit+0x48>)
 8002a4a:	f002 fb69 	bl	8005120 <HAL_GPIO_WritePin>

	  HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, data, size, 0xffff);
 8002a4e:	887a      	ldrh	r2, [r7, #2]
 8002a50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	480b      	ldr	r0, [pc, #44]	; (8002a84 <UART_Transmit+0x4c>)
 8002a58:	f005 f890 	bl	8007b7c <HAL_UART_Transmit>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK) {
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <UART_Transmit+0x32>
        //while (1);
        return 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e005      	b.n	8002a76 <UART_Transmit+0x3e>
    }

    HAL_GPIO_WritePin(LDExt_GPIO_Port, LDExt_Pin, GPIO_PIN_RESET);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2120      	movs	r1, #32
 8002a6e:	4804      	ldr	r0, [pc, #16]	; (8002a80 <UART_Transmit+0x48>)
 8002a70:	f002 fb56 	bl	8005120 <HAL_GPIO_WritePin>
    return 1;
 8002a74:	2301      	movs	r3, #1
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	48000400 	.word	0x48000400
 8002a84:	200004a4 	.word	0x200004a4

08002a88 <OLED_Transmit_Line1>:
* @param[in]			- data: Message : char MSG[35] = {'\0'};
* @return				- void
*
* @note					- Simplifies Write to OLED from anywhere that inherits main.h
******************************************************************************************************/
void OLED_Transmit_Line1(uint8_t* data){
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]

	writeSmFont(0, 2, White, data);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	2102      	movs	r1, #2
 8002a96:	2000      	movs	r0, #0
 8002a98:	f7fe fac2 	bl	8001020 <writeSmFont>

}
 8002a9c:	bf00      	nop
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <OLED_Transmit_Line2>:
* @param[in]			- data: Message : char MSG[35] = {'\0'};
* @return				- void
*
* @note					- Simplifies Write to OLED from anywhere that inherits main.h
******************************************************************************************************/
void OLED_Transmit_Line2(uint8_t* data){
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]

	writeSmFont(0, 26, White, data);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	211a      	movs	r1, #26
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f7fe fab4 	bl	8001020 <writeSmFont>

}
 8002ab8:	bf00      	nop
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <OLED_Transmit_Line3>:
* @param[in]			- data: Message : char MSG[35] = {'\0'};
* @return				- void
*
* @note					- Simplifies Write to OLED from anywhere that inherits main.h
******************************************************************************************************/
void OLED_Transmit_Line3(uint8_t* data){
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]

	writeSmFont(0, 50, White, data);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	2132      	movs	r1, #50	; 0x32
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f7fe faa6 	bl	8001020 <writeSmFont>

}
 8002ad4:	bf00      	nop
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002ae0:	b672      	cpsid	i
}
 8002ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ae4:	e7fe      	b.n	8002ae4 <Error_Handler+0x8>

08002ae6 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002ae6:	b480      	push	{r7}
 8002ae8:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002aea:	bf00      	nop
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af04      	add	r7, sp, #16
 8002afa:	4603      	mov	r3, r0
 8002afc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002afe:	f04f 33ff 	mov.w	r3, #4294967295
 8002b02:	9302      	str	r3, [sp, #8]
 8002b04:	2301      	movs	r3, #1
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	1dfb      	adds	r3, r7, #7
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2178      	movs	r1, #120	; 0x78
 8002b12:	4803      	ldr	r0, [pc, #12]	; (8002b20 <ssd1306_WriteCommand+0x2c>)
 8002b14:	f002 fbea 	bl	80052ec <HAL_I2C_Mem_Write>
}
 8002b18:	bf00      	nop
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	200003f8 	.word	0x200003f8

08002b24 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af04      	add	r7, sp, #16
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	f04f 32ff 	mov.w	r2, #4294967295
 8002b36:	9202      	str	r2, [sp, #8]
 8002b38:	9301      	str	r3, [sp, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	2301      	movs	r3, #1
 8002b40:	2240      	movs	r2, #64	; 0x40
 8002b42:	2178      	movs	r1, #120	; 0x78
 8002b44:	4803      	ldr	r0, [pc, #12]	; (8002b54 <ssd1306_WriteData+0x30>)
 8002b46:	f002 fbd1 	bl	80052ec <HAL_I2C_Mem_Write>
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	200003f8 	.word	0x200003f8

08002b58 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002b5c:	f7ff ffc3 	bl	8002ae6 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002b60:	2064      	movs	r0, #100	; 0x64
 8002b62:	f7fe fd86 	bl	8001672 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002b66:	2000      	movs	r0, #0
 8002b68:	f000 f9e6 	bl	8002f38 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002b6c:	2020      	movs	r0, #32
 8002b6e:	f7ff ffc1 	bl	8002af4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002b72:	2000      	movs	r0, #0
 8002b74:	f7ff ffbe 	bl	8002af4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002b78:	20b0      	movs	r0, #176	; 0xb0
 8002b7a:	f7ff ffbb 	bl	8002af4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002b7e:	20c8      	movs	r0, #200	; 0xc8
 8002b80:	f7ff ffb8 	bl	8002af4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002b84:	2000      	movs	r0, #0
 8002b86:	f7ff ffb5 	bl	8002af4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002b8a:	2010      	movs	r0, #16
 8002b8c:	f7ff ffb2 	bl	8002af4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002b90:	2040      	movs	r0, #64	; 0x40
 8002b92:	f7ff ffaf 	bl	8002af4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002b96:	20ff      	movs	r0, #255	; 0xff
 8002b98:	f000 f9ba 	bl	8002f10 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002b9c:	20a1      	movs	r0, #161	; 0xa1
 8002b9e:	f7ff ffa9 	bl	8002af4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002ba2:	20a6      	movs	r0, #166	; 0xa6
 8002ba4:	f7ff ffa6 	bl	8002af4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002ba8:	20a8      	movs	r0, #168	; 0xa8
 8002baa:	f7ff ffa3 	bl	8002af4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002bae:	203f      	movs	r0, #63	; 0x3f
 8002bb0:	f7ff ffa0 	bl	8002af4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002bb4:	20a4      	movs	r0, #164	; 0xa4
 8002bb6:	f7ff ff9d 	bl	8002af4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002bba:	20d3      	movs	r0, #211	; 0xd3
 8002bbc:	f7ff ff9a 	bl	8002af4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	f7ff ff97 	bl	8002af4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002bc6:	20d5      	movs	r0, #213	; 0xd5
 8002bc8:	f7ff ff94 	bl	8002af4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002bcc:	20f0      	movs	r0, #240	; 0xf0
 8002bce:	f7ff ff91 	bl	8002af4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002bd2:	20d9      	movs	r0, #217	; 0xd9
 8002bd4:	f7ff ff8e 	bl	8002af4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002bd8:	2022      	movs	r0, #34	; 0x22
 8002bda:	f7ff ff8b 	bl	8002af4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002bde:	20da      	movs	r0, #218	; 0xda
 8002be0:	f7ff ff88 	bl	8002af4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002be4:	2012      	movs	r0, #18
 8002be6:	f7ff ff85 	bl	8002af4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002bea:	20db      	movs	r0, #219	; 0xdb
 8002bec:	f7ff ff82 	bl	8002af4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002bf0:	2020      	movs	r0, #32
 8002bf2:	f7ff ff7f 	bl	8002af4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002bf6:	208d      	movs	r0, #141	; 0x8d
 8002bf8:	f7ff ff7c 	bl	8002af4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002bfc:	2014      	movs	r0, #20
 8002bfe:	f7ff ff79 	bl	8002af4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002c02:	2001      	movs	r0, #1
 8002c04:	f000 f998 	bl	8002f38 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f000 f80f 	bl	8002c2c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002c0e:	f000 f831 	bl	8002c74 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002c12:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <ssd1306_Init+0xd0>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002c18:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <ssd1306_Init+0xd0>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002c1e:	4b02      	ldr	r3, [pc, #8]	; (8002c28 <ssd1306_Init+0xd0>)
 8002c20:	2201      	movs	r2, #1
 8002c22:	715a      	strb	r2, [r3, #5]
}
 8002c24:	bf00      	nop
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	20000934 	.word	0x20000934

08002c2c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	4603      	mov	r3, r0
 8002c34:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	e00d      	b.n	8002c58 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <ssd1306_Fill+0x1a>
 8002c42:	2100      	movs	r1, #0
 8002c44:	e000      	b.n	8002c48 <ssd1306_Fill+0x1c>
 8002c46:	21ff      	movs	r1, #255	; 0xff
 8002c48:	4a09      	ldr	r2, [pc, #36]	; (8002c70 <ssd1306_Fill+0x44>)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	460a      	mov	r2, r1
 8002c50:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	3301      	adds	r3, #1
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c5e:	d3ed      	bcc.n	8002c3c <ssd1306_Fill+0x10>
    }
}
 8002c60:	bf00      	nop
 8002c62:	bf00      	nop
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	20000534 	.word	0x20000534

08002c74 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	71fb      	strb	r3, [r7, #7]
 8002c7e:	e016      	b.n	8002cae <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	3b50      	subs	r3, #80	; 0x50
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff ff34 	bl	8002af4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	f7ff ff31 	bl	8002af4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8002c92:	2010      	movs	r0, #16
 8002c94:	f7ff ff2e 	bl	8002af4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	01db      	lsls	r3, r3, #7
 8002c9c:	4a08      	ldr	r2, [pc, #32]	; (8002cc0 <ssd1306_UpdateScreen+0x4c>)
 8002c9e:	4413      	add	r3, r2
 8002ca0:	2180      	movs	r1, #128	; 0x80
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff ff3e 	bl	8002b24 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	3301      	adds	r3, #1
 8002cac:	71fb      	strb	r3, [r7, #7]
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	2b07      	cmp	r3, #7
 8002cb2:	d9e5      	bls.n	8002c80 <ssd1306_UpdateScreen+0xc>
    }
}
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000534 	.word	0x20000534

08002cc4 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	71fb      	strb	r3, [r7, #7]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	71bb      	strb	r3, [r7, #6]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	db48      	blt.n	8002d70 <ssd1306_DrawPixel+0xac>
 8002cde:	79bb      	ldrb	r3, [r7, #6]
 8002ce0:	2b3f      	cmp	r3, #63	; 0x3f
 8002ce2:	d845      	bhi.n	8002d70 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8002ce4:	4b25      	ldr	r3, [pc, #148]	; (8002d7c <ssd1306_DrawPixel+0xb8>)
 8002ce6:	791b      	ldrb	r3, [r3, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d006      	beq.n	8002cfa <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8002cec:	797b      	ldrb	r3, [r7, #5]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	bf0c      	ite	eq
 8002cf2:	2301      	moveq	r3, #1
 8002cf4:	2300      	movne	r3, #0
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8002cfa:	797b      	ldrb	r3, [r7, #5]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d11a      	bne.n	8002d36 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002d00:	79fa      	ldrb	r2, [r7, #7]
 8002d02:	79bb      	ldrb	r3, [r7, #6]
 8002d04:	08db      	lsrs	r3, r3, #3
 8002d06:	b2d8      	uxtb	r0, r3
 8002d08:	4603      	mov	r3, r0
 8002d0a:	01db      	lsls	r3, r3, #7
 8002d0c:	4413      	add	r3, r2
 8002d0e:	4a1c      	ldr	r2, [pc, #112]	; (8002d80 <ssd1306_DrawPixel+0xbc>)
 8002d10:	5cd3      	ldrb	r3, [r2, r3]
 8002d12:	b25a      	sxtb	r2, r3
 8002d14:	79bb      	ldrb	r3, [r7, #6]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d20:	b25b      	sxtb	r3, r3
 8002d22:	4313      	orrs	r3, r2
 8002d24:	b259      	sxtb	r1, r3
 8002d26:	79fa      	ldrb	r2, [r7, #7]
 8002d28:	4603      	mov	r3, r0
 8002d2a:	01db      	lsls	r3, r3, #7
 8002d2c:	4413      	add	r3, r2
 8002d2e:	b2c9      	uxtb	r1, r1
 8002d30:	4a13      	ldr	r2, [pc, #76]	; (8002d80 <ssd1306_DrawPixel+0xbc>)
 8002d32:	54d1      	strb	r1, [r2, r3]
 8002d34:	e01d      	b.n	8002d72 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002d36:	79fa      	ldrb	r2, [r7, #7]
 8002d38:	79bb      	ldrb	r3, [r7, #6]
 8002d3a:	08db      	lsrs	r3, r3, #3
 8002d3c:	b2d8      	uxtb	r0, r3
 8002d3e:	4603      	mov	r3, r0
 8002d40:	01db      	lsls	r3, r3, #7
 8002d42:	4413      	add	r3, r2
 8002d44:	4a0e      	ldr	r2, [pc, #56]	; (8002d80 <ssd1306_DrawPixel+0xbc>)
 8002d46:	5cd3      	ldrb	r3, [r2, r3]
 8002d48:	b25a      	sxtb	r2, r3
 8002d4a:	79bb      	ldrb	r3, [r7, #6]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	2101      	movs	r1, #1
 8002d52:	fa01 f303 	lsl.w	r3, r1, r3
 8002d56:	b25b      	sxtb	r3, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	b25b      	sxtb	r3, r3
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	b259      	sxtb	r1, r3
 8002d60:	79fa      	ldrb	r2, [r7, #7]
 8002d62:	4603      	mov	r3, r0
 8002d64:	01db      	lsls	r3, r3, #7
 8002d66:	4413      	add	r3, r2
 8002d68:	b2c9      	uxtb	r1, r1
 8002d6a:	4a05      	ldr	r2, [pc, #20]	; (8002d80 <ssd1306_DrawPixel+0xbc>)
 8002d6c:	54d1      	strb	r1, [r2, r3]
 8002d6e:	e000      	b.n	8002d72 <ssd1306_DrawPixel+0xae>
        return;
 8002d70:	bf00      	nop
    }
}
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	20000934 	.word	0x20000934
 8002d80:	20000534 	.word	0x20000534

08002d84 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002d84:	b590      	push	{r4, r7, lr}
 8002d86:	b089      	sub	sp, #36	; 0x24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4604      	mov	r4, r0
 8002d8c:	1d38      	adds	r0, r7, #4
 8002d8e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002d92:	461a      	mov	r2, r3
 8002d94:	4623      	mov	r3, r4
 8002d96:	73fb      	strb	r3, [r7, #15]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
 8002d9e:	2b1f      	cmp	r3, #31
 8002da0:	d902      	bls.n	8002da8 <ssd1306_WriteChar+0x24>
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
 8002da4:	2b7e      	cmp	r3, #126	; 0x7e
 8002da6:	d901      	bls.n	8002dac <ssd1306_WriteChar+0x28>
        return 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	e06d      	b.n	8002e88 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002dac:	4b38      	ldr	r3, [pc, #224]	; (8002e90 <ssd1306_WriteChar+0x10c>)
 8002dae:	881b      	ldrh	r3, [r3, #0]
 8002db0:	461a      	mov	r2, r3
 8002db2:	793b      	ldrb	r3, [r7, #4]
 8002db4:	4413      	add	r3, r2
 8002db6:	2b80      	cmp	r3, #128	; 0x80
 8002db8:	dc06      	bgt.n	8002dc8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002dba:	4b35      	ldr	r3, [pc, #212]	; (8002e90 <ssd1306_WriteChar+0x10c>)
 8002dbc:	885b      	ldrh	r3, [r3, #2]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	797b      	ldrb	r3, [r7, #5]
 8002dc2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002dc4:	2b40      	cmp	r3, #64	; 0x40
 8002dc6:	dd01      	ble.n	8002dcc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	e05d      	b.n	8002e88 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61fb      	str	r3, [r7, #28]
 8002dd0:	e04c      	b.n	8002e6c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
 8002dd6:	3b20      	subs	r3, #32
 8002dd8:	7979      	ldrb	r1, [r7, #5]
 8002dda:	fb01 f303 	mul.w	r3, r1, r3
 8002dde:	4619      	mov	r1, r3
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	440b      	add	r3, r1
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	4413      	add	r3, r2
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002dec:	2300      	movs	r3, #0
 8002dee:	61bb      	str	r3, [r7, #24]
 8002df0:	e034      	b.n	8002e5c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d012      	beq.n	8002e28 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002e02:	4b23      	ldr	r3, [pc, #140]	; (8002e90 <ssd1306_WriteChar+0x10c>)
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	b2d8      	uxtb	r0, r3
 8002e10:	4b1f      	ldr	r3, [pc, #124]	; (8002e90 <ssd1306_WriteChar+0x10c>)
 8002e12:	885b      	ldrh	r3, [r3, #2]
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	7bba      	ldrb	r2, [r7, #14]
 8002e20:	4619      	mov	r1, r3
 8002e22:	f7ff ff4f 	bl	8002cc4 <ssd1306_DrawPixel>
 8002e26:	e016      	b.n	8002e56 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002e28:	4b19      	ldr	r3, [pc, #100]	; (8002e90 <ssd1306_WriteChar+0x10c>)
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	4413      	add	r3, r2
 8002e34:	b2d8      	uxtb	r0, r3
 8002e36:	4b16      	ldr	r3, [pc, #88]	; (8002e90 <ssd1306_WriteChar+0x10c>)
 8002e38:	885b      	ldrh	r3, [r3, #2]
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	4413      	add	r3, r2
 8002e42:	b2d9      	uxtb	r1, r3
 8002e44:	7bbb      	ldrb	r3, [r7, #14]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	bf0c      	ite	eq
 8002e4a:	2301      	moveq	r3, #1
 8002e4c:	2300      	movne	r3, #0
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	461a      	mov	r2, r3
 8002e52:	f7ff ff37 	bl	8002cc4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	61bb      	str	r3, [r7, #24]
 8002e5c:	793b      	ldrb	r3, [r7, #4]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d3c5      	bcc.n	8002df2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	61fb      	str	r3, [r7, #28]
 8002e6c:	797b      	ldrb	r3, [r7, #5]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d3ad      	bcc.n	8002dd2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002e76:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <ssd1306_WriteChar+0x10c>)
 8002e78:	881a      	ldrh	r2, [r3, #0]
 8002e7a:	793b      	ldrb	r3, [r7, #4]
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	4413      	add	r3, r2
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	4b03      	ldr	r3, [pc, #12]	; (8002e90 <ssd1306_WriteChar+0x10c>)
 8002e84:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3724      	adds	r7, #36	; 0x24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd90      	pop	{r4, r7, pc}
 8002e90:	20000934 	.word	0x20000934

08002e94 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	1d38      	adds	r0, r7, #4
 8002e9e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002ea2:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002ea4:	e012      	b.n	8002ecc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	7818      	ldrb	r0, [r3, #0]
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	1d3a      	adds	r2, r7, #4
 8002eae:	ca06      	ldmia	r2, {r1, r2}
 8002eb0:	f7ff ff68 	bl	8002d84 <ssd1306_WriteChar>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d002      	beq.n	8002ec6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	e008      	b.n	8002ed8 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1e8      	bne.n	8002ea6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	781b      	ldrb	r3, [r3, #0]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	460a      	mov	r2, r1
 8002eea:	71fb      	strb	r3, [r7, #7]
 8002eec:	4613      	mov	r3, r2
 8002eee:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <ssd1306_SetCursor+0x2c>)
 8002ef6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002ef8:	79bb      	ldrb	r3, [r7, #6]
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	4b03      	ldr	r3, [pc, #12]	; (8002f0c <ssd1306_SetCursor+0x2c>)
 8002efe:	805a      	strh	r2, [r3, #2]
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	20000934 	.word	0x20000934

08002f10 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002f1a:	2381      	movs	r3, #129	; 0x81
 8002f1c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff fde7 	bl	8002af4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002f26:	79fb      	ldrb	r3, [r7, #7]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff fde3 	bl	8002af4 <ssd1306_WriteCommand>
}
 8002f2e:	bf00      	nop
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002f48:	23af      	movs	r3, #175	; 0xaf
 8002f4a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002f4c:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <ssd1306_SetDisplayOn+0x38>)
 8002f4e:	2201      	movs	r2, #1
 8002f50:	719a      	strb	r2, [r3, #6]
 8002f52:	e004      	b.n	8002f5e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002f54:	23ae      	movs	r3, #174	; 0xae
 8002f56:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002f58:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <ssd1306_SetDisplayOn+0x38>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fdc7 	bl	8002af4 <ssd1306_WriteCommand>
}
 8002f66:	bf00      	nop
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000934 	.word	0x20000934

08002f74 <LL_RCC_EnableRTC>:
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <LL_AHB2_GRP1_EnableClock>:
{
 8002f96:	b480      	push	{r7}
 8002f98:	b085      	sub	sp, #20
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002fa4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fba:	68fb      	ldr	r3, [r7, #12]
}
 8002fbc:	bf00      	nop
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <LL_AHB3_GRP1_EnableClock>:
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fec:	68fb      	ldr	r3, [r7, #12]
}
 8002fee:	bf00      	nop
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b085      	sub	sp, #20
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003006:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003008:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4313      	orrs	r3, r2
 8003010:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003016:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4013      	ands	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800301e:	68fb      	ldr	r3, [r7, #12]
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003038:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800303a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4313      	orrs	r3, r2
 8003042:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003048:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4013      	ands	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003050:	68fb      	ldr	r3, [r7, #12]
}
 8003052:	bf00      	nop
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003062:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003066:	f7ff ffaf 	bl	8002fc8 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800306a:	2200      	movs	r2, #0
 800306c:	2100      	movs	r1, #0
 800306e:	202e      	movs	r0, #46	; 0x2e
 8003070:	f001 fe6f 	bl	8004d52 <HAL_NVIC_SetPriority>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003074:	202e      	movs	r0, #46	; 0x2e
 8003076:	f001 fe86 	bl	8004d86 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800307a:	bf00      	nop
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b09c      	sub	sp, #112	; 0x70
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003088:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	605a      	str	r2, [r3, #4]
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	60da      	str	r2, [r3, #12]
 8003096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003098:	f107 030c 	add.w	r3, r7, #12
 800309c:	2250      	movs	r2, #80	; 0x50
 800309e:	2100      	movs	r1, #0
 80030a0:	4618      	mov	r0, r3
 80030a2:	f008 fd91 	bl	800bbc8 <memset>
  if(hadc->Instance==ADC1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a15      	ldr	r2, [pc, #84]	; (8003100 <HAL_ADC_MspInit+0x80>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d122      	bne.n	80030f6 <HAL_ADC_MspInit+0x76>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80030b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030b4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80030b6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80030ba:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030bc:	f107 030c 	add.w	r3, r7, #12
 80030c0:	4618      	mov	r0, r3
 80030c2:	f004 f8ba 	bl	800723a <HAL_RCCEx_PeriphCLKConfig>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80030cc:	f7ff fd06 	bl	8002adc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80030d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80030d4:	f7ff ff5f 	bl	8002f96 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030d8:	2004      	movs	r0, #4
 80030da:	f7ff ff5c 	bl	8002f96 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = T1_Pin;
 80030de:	2301      	movs	r3, #1
 80030e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030e2:	2303      	movs	r3, #3
 80030e4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(T1_GPIO_Port, &GPIO_InitStruct);
 80030ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80030ee:	4619      	mov	r1, r3
 80030f0:	4804      	ldr	r0, [pc, #16]	; (8003104 <HAL_ADC_MspInit+0x84>)
 80030f2:	f001 fe8d 	bl	8004e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80030f6:	bf00      	nop
 80030f8:	3770      	adds	r7, #112	; 0x70
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	50040000 	.word	0x50040000
 8003104:	48000800 	.word	0x48000800

08003108 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b09c      	sub	sp, #112	; 0x70
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003110:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	609a      	str	r2, [r3, #8]
 800311c:	60da      	str	r2, [r3, #12]
 800311e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003120:	f107 030c 	add.w	r3, r7, #12
 8003124:	2250      	movs	r2, #80	; 0x50
 8003126:	2100      	movs	r1, #0
 8003128:	4618      	mov	r0, r3
 800312a:	f008 fd4d 	bl	800bbc8 <memset>
  if(hi2c->Instance==I2C1)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a17      	ldr	r2, [pc, #92]	; (8003190 <HAL_I2C_MspInit+0x88>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d126      	bne.n	8003186 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003138:	2304      	movs	r3, #4
 800313a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800313c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003140:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003142:	f107 030c 	add.w	r3, r7, #12
 8003146:	4618      	mov	r0, r3
 8003148:	f004 f877 	bl	800723a <HAL_RCCEx_PeriphCLKConfig>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003152:	f7ff fcc3 	bl	8002adc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003156:	2002      	movs	r0, #2
 8003158:	f7ff ff1d 	bl	8002f96 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800315c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003160:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003162:	2312      	movs	r3, #18
 8003164:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003166:	2301      	movs	r3, #1
 8003168:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800316a:	2302      	movs	r3, #2
 800316c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800316e:	2304      	movs	r3, #4
 8003170:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003172:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003176:	4619      	mov	r1, r3
 8003178:	4806      	ldr	r0, [pc, #24]	; (8003194 <HAL_I2C_MspInit+0x8c>)
 800317a:	f001 fe49 	bl	8004e10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800317e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003182:	f7ff ff3a 	bl	8002ffa <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003186:	bf00      	nop
 8003188:	3770      	adds	r7, #112	; 0x70
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40005400 	.word	0x40005400
 8003194:	48000400 	.word	0x48000400

08003198 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a0d      	ldr	r2, [pc, #52]	; (80031dc <HAL_IPCC_MspInit+0x44>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d113      	bne.n	80031d2 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80031aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80031ae:	f7ff ff0b 	bl	8002fc8 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80031b2:	2200      	movs	r2, #0
 80031b4:	2100      	movs	r1, #0
 80031b6:	202c      	movs	r0, #44	; 0x2c
 80031b8:	f001 fdcb 	bl	8004d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80031bc:	202c      	movs	r0, #44	; 0x2c
 80031be:	f001 fde2 	bl	8004d86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80031c2:	2200      	movs	r2, #0
 80031c4:	2100      	movs	r1, #0
 80031c6:	202d      	movs	r0, #45	; 0x2d
 80031c8:	f001 fdc3 	bl	8004d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80031cc:	202d      	movs	r0, #45	; 0x2d
 80031ce:	f001 fdda 	bl	8004d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	58000c00 	.word	0x58000c00

080031e0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b096      	sub	sp, #88	; 0x58
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031e8:	f107 0308 	add.w	r3, r7, #8
 80031ec:	2250      	movs	r2, #80	; 0x50
 80031ee:	2100      	movs	r1, #0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f008 fce9 	bl	800bbc8 <memset>
  if(hrtc->Instance==RTC)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a12      	ldr	r2, [pc, #72]	; (8003244 <HAL_RTC_MspInit+0x64>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d11d      	bne.n	800323c <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003200:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003204:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003206:	f44f 7380 	mov.w	r3, #256	; 0x100
 800320a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800320c:	f107 0308 	add.w	r3, r7, #8
 8003210:	4618      	mov	r0, r3
 8003212:	f004 f812 	bl	800723a <HAL_RCCEx_PeriphCLKConfig>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800321c:	f7ff fc5e 	bl	8002adc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003220:	f7ff fea8 	bl	8002f74 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003224:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003228:	f7ff fee7 	bl	8002ffa <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800322c:	2200      	movs	r2, #0
 800322e:	2100      	movs	r1, #0
 8003230:	2003      	movs	r0, #3
 8003232:	f001 fd8e 	bl	8004d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003236:	2003      	movs	r0, #3
 8003238:	f001 fda5 	bl	8004d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800323c:	bf00      	nop
 800323e:	3758      	adds	r7, #88	; 0x58
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40002800 	.word	0x40002800

08003248 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b09c      	sub	sp, #112	; 0x70
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003250:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	605a      	str	r2, [r3, #4]
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	60da      	str	r2, [r3, #12]
 800325e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003260:	f107 030c 	add.w	r3, r7, #12
 8003264:	2250      	movs	r2, #80	; 0x50
 8003266:	2100      	movs	r1, #0
 8003268:	4618      	mov	r0, r3
 800326a:	f008 fcad 	bl	800bbc8 <memset>
  if(huart->Instance==USART1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a16      	ldr	r2, [pc, #88]	; (80032cc <HAL_UART_MspInit+0x84>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d124      	bne.n	80032c2 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003278:	2301      	movs	r3, #1
 800327a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800327c:	2300      	movs	r3, #0
 800327e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003280:	f107 030c 	add.w	r3, r7, #12
 8003284:	4618      	mov	r0, r3
 8003286:	f003 ffd8 	bl	800723a <HAL_RCCEx_PeriphCLKConfig>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003290:	f7ff fc24 	bl	8002adc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003294:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003298:	f7ff fec8 	bl	800302c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800329c:	2002      	movs	r0, #2
 800329e:	f7ff fe7a 	bl	8002f96 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80032a2:	23c0      	movs	r3, #192	; 0xc0
 80032a4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a6:	2302      	movs	r3, #2
 80032a8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ae:	2300      	movs	r3, #0
 80032b0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032b2:	2307      	movs	r3, #7
 80032b4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80032ba:	4619      	mov	r1, r3
 80032bc:	4804      	ldr	r0, [pc, #16]	; (80032d0 <HAL_UART_MspInit+0x88>)
 80032be:	f001 fda7 	bl	8004e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80032c2:	bf00      	nop
 80032c4:	3770      	adds	r7, #112	; 0x70
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40013800 	.word	0x40013800
 80032d0:	48000400 	.word	0x48000400

080032d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032d8:	e7fe      	b.n	80032d8 <NMI_Handler+0x4>

080032da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032da:	b480      	push	{r7}
 80032dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032de:	e7fe      	b.n	80032de <HardFault_Handler+0x4>

080032e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032e4:	e7fe      	b.n	80032e4 <MemManage_Handler+0x4>

080032e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032e6:	b480      	push	{r7}
 80032e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032ea:	e7fe      	b.n	80032ea <BusFault_Handler+0x4>

080032ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032f0:	e7fe      	b.n	80032f0 <UsageFault_Handler+0x4>

080032f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032f2:	b480      	push	{r7}
 80032f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032f6:	bf00      	nop
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800330e:	b480      	push	{r7}
 8003310:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003312:	bf00      	nop
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003320:	f000 f9c4 	bl	80036ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003324:	bf00      	nop
 8003326:	bd80      	pop	{r7, pc}

08003328 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800332c:	f7fe fd5a 	bl	8001de4 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003330:	bf00      	nop
 8003332:	bd80      	pop	{r7, pc}

08003334 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003338:	f008 f840 	bl	800b3bc <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800333c:	bf00      	nop
 800333e:	bd80      	pop	{r7, pc}

08003340 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003344:	f008 f872 	bl	800b42c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003348:	bf00      	nop
 800334a:	bd80      	pop	{r7, pc}

0800334c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003350:	f001 ff18 	bl	8005184 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003354:	bf00      	nop
 8003356:	bd80      	pop	{r7, pc}

08003358 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
	return 1;
 800335c:	2301      	movs	r3, #1
}
 800335e:	4618      	mov	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <_kill>:

int _kill(int pid, int sig)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003372:	f008 fbd7 	bl	800bb24 <__errno>
 8003376:	4603      	mov	r3, r0
 8003378:	2216      	movs	r2, #22
 800337a:	601a      	str	r2, [r3, #0]
	return -1;
 800337c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003380:	4618      	mov	r0, r3
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <_exit>:

void _exit (int status)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003390:	f04f 31ff 	mov.w	r1, #4294967295
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff ffe7 	bl	8003368 <_kill>
	while (1) {}		/* Make sure we hang here */
 800339a:	e7fe      	b.n	800339a <_exit+0x12>

0800339c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	e00a      	b.n	80033c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80033ae:	f3af 8000 	nop.w
 80033b2:	4601      	mov	r1, r0
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	1c5a      	adds	r2, r3, #1
 80033b8:	60ba      	str	r2, [r7, #8]
 80033ba:	b2ca      	uxtb	r2, r1
 80033bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	3301      	adds	r3, #1
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	dbf0      	blt.n	80033ae <_read+0x12>
	}

return len;
 80033cc:	687b      	ldr	r3, [r7, #4]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b086      	sub	sp, #24
 80033da:	af00      	add	r7, sp, #0
 80033dc:	60f8      	str	r0, [r7, #12]
 80033de:	60b9      	str	r1, [r7, #8]
 80033e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	e009      	b.n	80033fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	1c5a      	adds	r2, r3, #1
 80033ec:	60ba      	str	r2, [r7, #8]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	3301      	adds	r3, #1
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	429a      	cmp	r2, r3
 8003402:	dbf1      	blt.n	80033e8 <_write+0x12>
	}
	return len;
 8003404:	687b      	ldr	r3, [r7, #4]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <_close>:

int _close(int file)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
	return -1;
 8003416:	f04f 33ff 	mov.w	r3, #4294967295
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003436:	605a      	str	r2, [r3, #4]
	return 0;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <_isatty>:

int _isatty(int file)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
	return 1;
 800344e:	2301      	movs	r3, #1
}
 8003450:	4618      	mov	r0, r3
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
	return 0;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
	...

08003478 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003480:	4a14      	ldr	r2, [pc, #80]	; (80034d4 <_sbrk+0x5c>)
 8003482:	4b15      	ldr	r3, [pc, #84]	; (80034d8 <_sbrk+0x60>)
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800348c:	4b13      	ldr	r3, [pc, #76]	; (80034dc <_sbrk+0x64>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d102      	bne.n	800349a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003494:	4b11      	ldr	r3, [pc, #68]	; (80034dc <_sbrk+0x64>)
 8003496:	4a12      	ldr	r2, [pc, #72]	; (80034e0 <_sbrk+0x68>)
 8003498:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800349a:	4b10      	ldr	r3, [pc, #64]	; (80034dc <_sbrk+0x64>)
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4413      	add	r3, r2
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d207      	bcs.n	80034b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034a8:	f008 fb3c 	bl	800bb24 <__errno>
 80034ac:	4603      	mov	r3, r0
 80034ae:	220c      	movs	r2, #12
 80034b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034b2:	f04f 33ff 	mov.w	r3, #4294967295
 80034b6:	e009      	b.n	80034cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034b8:	4b08      	ldr	r3, [pc, #32]	; (80034dc <_sbrk+0x64>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034be:	4b07      	ldr	r3, [pc, #28]	; (80034dc <_sbrk+0x64>)
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4413      	add	r3, r2
 80034c6:	4a05      	ldr	r2, [pc, #20]	; (80034dc <_sbrk+0x64>)
 80034c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034ca:	68fb      	ldr	r3, [r7, #12]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	20030000 	.word	0x20030000
 80034d8:	00000400 	.word	0x00000400
 80034dc:	2000093c 	.word	0x2000093c
 80034e0:	20000bb8 	.word	0x20000bb8

080034e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80034e8:	4b24      	ldr	r3, [pc, #144]	; (800357c <SystemInit+0x98>)
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ee:	4a23      	ldr	r2, [pc, #140]	; (800357c <SystemInit+0x98>)
 80034f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80034f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003502:	f043 0301 	orr.w	r3, r3, #1
 8003506:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800350c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003510:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800351c:	4b18      	ldr	r3, [pc, #96]	; (8003580 <SystemInit+0x9c>)
 800351e:	4013      	ands	r3, r2
 8003520:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800352a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800352e:	f023 0305 	bic.w	r3, r3, #5
 8003532:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800353a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800353e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003542:	f023 0301 	bic.w	r3, r3, #1
 8003546:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800354a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800354e:	4a0d      	ldr	r2, [pc, #52]	; (8003584 <SystemInit+0xa0>)
 8003550:	60da      	str	r2, [r3, #12]
#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */



  RCC->PLLSAI1CFGR = 0x22041000U;
 8003552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003556:	4a0b      	ldr	r2, [pc, #44]	; (8003584 <SystemInit+0xa0>)
 8003558:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800355a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003564:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003568:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800356a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800356e:	2200      	movs	r2, #0
 8003570:	619a      	str	r2, [r3, #24]
}
 8003572:	bf00      	nop
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	e000ed00 	.word	0xe000ed00
 8003580:	faf6fefb 	.word	0xfaf6fefb
 8003584:	22041000 	.word	0x22041000

08003588 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003588:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800358a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800358c:	3304      	adds	r3, #4

0800358e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800358e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003590:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003592:	d3f9      	bcc.n	8003588 <CopyDataInit>
  bx lr
 8003594:	4770      	bx	lr

08003596 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003596:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003598:	3004      	adds	r0, #4

0800359a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800359a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800359c:	d3fb      	bcc.n	8003596 <FillZerobss>
  bx lr
 800359e:	4770      	bx	lr

080035a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80035a0:	480c      	ldr	r0, [pc, #48]	; (80035d4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80035a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80035a4:	f7ff ff9e 	bl	80034e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80035a8:	480b      	ldr	r0, [pc, #44]	; (80035d8 <LoopForever+0x8>)
 80035aa:	490c      	ldr	r1, [pc, #48]	; (80035dc <LoopForever+0xc>)
 80035ac:	4a0c      	ldr	r2, [pc, #48]	; (80035e0 <LoopForever+0x10>)
 80035ae:	2300      	movs	r3, #0
 80035b0:	f7ff ffed 	bl	800358e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80035b4:	480b      	ldr	r0, [pc, #44]	; (80035e4 <LoopForever+0x14>)
 80035b6:	490c      	ldr	r1, [pc, #48]	; (80035e8 <LoopForever+0x18>)
 80035b8:	2300      	movs	r3, #0
 80035ba:	f7ff ffee 	bl	800359a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80035be:	480b      	ldr	r0, [pc, #44]	; (80035ec <LoopForever+0x1c>)
 80035c0:	490b      	ldr	r1, [pc, #44]	; (80035f0 <LoopForever+0x20>)
 80035c2:	2300      	movs	r3, #0
 80035c4:	f7ff ffe9 	bl	800359a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80035c8:	f008 fab2 	bl	800bb30 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80035cc:	f7fe ff2c 	bl	8002428 <main>

080035d0 <LoopForever>:

LoopForever:
  b LoopForever
 80035d0:	e7fe      	b.n	80035d0 <LoopForever>
 80035d2:	0000      	.short	0x0000
  ldr   r0, =_estack
 80035d4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80035d8:	20000004 	.word	0x20000004
 80035dc:	200001f8 	.word	0x200001f8
 80035e0:	0800f90c 	.word	0x0800f90c
  INIT_BSS _sbss, _ebss
 80035e4:	2000036c 	.word	0x2000036c
 80035e8:	20000bb8 	.word	0x20000bb8
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80035ec:	200301e0 	.word	0x200301e0
 80035f0:	20030a57 	.word	0x20030a57

080035f4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80035f4:	e7fe      	b.n	80035f4 <ADC1_IRQHandler>
	...

080035f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003602:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <HAL_Init+0x3c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a0b      	ldr	r2, [pc, #44]	; (8003634 <HAL_Init+0x3c>)
 8003608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800360c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800360e:	2003      	movs	r0, #3
 8003610:	f001 fb94 	bl	8004d3c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003614:	2000      	movs	r0, #0
 8003616:	f000 f80f 	bl	8003638 <HAL_InitTick>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	71fb      	strb	r3, [r7, #7]
 8003624:	e001      	b.n	800362a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003626:	f7ff fd1a 	bl	800305e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800362a:	79fb      	ldrb	r3, [r7, #7]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	58004000 	.word	0x58004000

08003638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003640:	2300      	movs	r3, #0
 8003642:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003644:	4b17      	ldr	r3, [pc, #92]	; (80036a4 <HAL_InitTick+0x6c>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d024      	beq.n	8003696 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 800364c:	f003 fb64 	bl	8006d18 <HAL_RCC_GetHCLKFreq>
 8003650:	4602      	mov	r2, r0
 8003652:	4b14      	ldr	r3, [pc, #80]	; (80036a4 <HAL_InitTick+0x6c>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	4619      	mov	r1, r3
 8003658:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800365c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003660:	fbb2 f3f3 	udiv	r3, r2, r3
 8003664:	4618      	mov	r0, r3
 8003666:	f001 fbaa 	bl	8004dbe <HAL_SYSTICK_Config>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10f      	bne.n	8003690 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b0f      	cmp	r3, #15
 8003674:	d809      	bhi.n	800368a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003676:	2200      	movs	r2, #0
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	f04f 30ff 	mov.w	r0, #4294967295
 800367e:	f001 fb68 	bl	8004d52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003682:	4a09      	ldr	r2, [pc, #36]	; (80036a8 <HAL_InitTick+0x70>)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6013      	str	r3, [r2, #0]
 8003688:	e007      	b.n	800369a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	73fb      	strb	r3, [r7, #15]
 800368e:	e004      	b.n	800369a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
 8003694:	e001      	b.n	800369a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800369a:	7bfb      	ldrb	r3, [r7, #15]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	20000014 	.word	0x20000014
 80036a8:	20000010 	.word	0x20000010

080036ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036b0:	4b06      	ldr	r3, [pc, #24]	; (80036cc <HAL_IncTick+0x20>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	461a      	mov	r2, r3
 80036b6:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <HAL_IncTick+0x24>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4413      	add	r3, r2
 80036bc:	4a04      	ldr	r2, [pc, #16]	; (80036d0 <HAL_IncTick+0x24>)
 80036be:	6013      	str	r3, [r2, #0]
}
 80036c0:	bf00      	nop
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	20000014 	.word	0x20000014
 80036d0:	20000940 	.word	0x20000940

080036d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  return uwTick;
 80036d8:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <HAL_GetTick+0x14>)
 80036da:	681b      	ldr	r3, [r3, #0]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	20000940 	.word	0x20000940

080036ec <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80036f0:	4b03      	ldr	r3, [pc, #12]	; (8003700 <HAL_GetTickPrio+0x14>)
 80036f2:	681b      	ldr	r3, [r3, #0]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	20000010 	.word	0x20000010

08003704 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003708:	4b03      	ldr	r3, [pc, #12]	; (8003718 <HAL_GetTickFreq+0x14>)
 800370a:	781b      	ldrb	r3, [r3, #0]
}
 800370c:	4618      	mov	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	20000014 	.word	0x20000014

0800371c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	609a      	str	r2, [r3, #8]
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003778:	4618      	mov	r0, r3
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	3360      	adds	r3, #96	; 0x60
 8003796:	461a      	mov	r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <LL_ADC_SetOffset+0x44>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80037bc:	bf00      	nop
 80037be:	371c      	adds	r7, #28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	03fff000 	.word	0x03fff000

080037cc <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	3360      	adds	r3, #96	; 0x60
 80037da:	461a      	mov	r2, r3
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b087      	sub	sp, #28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	3360      	adds	r3, #96	; 0x60
 8003808:	461a      	mov	r2, r3
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	431a      	orrs	r2, r3
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003822:	bf00      	nop
 8003824:	371c      	adds	r7, #28
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003846:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8003848:	4618      	mov	r0, r3
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003854:	b480      	push	{r7}
 8003856:	b087      	sub	sp, #28
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	3330      	adds	r3, #48	; 0x30
 8003864:	461a      	mov	r2, r3
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	0a1b      	lsrs	r3, r3, #8
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	f003 030c 	and.w	r3, r3, #12
 8003870:	4413      	add	r3, r2
 8003872:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f003 031f 	and.w	r3, r3, #31
 800387e:	211f      	movs	r1, #31
 8003880:	fa01 f303 	lsl.w	r3, r1, r3
 8003884:	43db      	mvns	r3, r3
 8003886:	401a      	ands	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	0e9b      	lsrs	r3, r3, #26
 800388c:	f003 011f 	and.w	r1, r3, #31
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f003 031f 	and.w	r3, r3, #31
 8003896:	fa01 f303 	lsl.w	r3, r1, r3
 800389a:	431a      	orrs	r2, r3
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80038a0:	bf00      	nop
 80038a2:	371c      	adds	r7, #28
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3314      	adds	r3, #20
 80038bc:	461a      	mov	r2, r3
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	0e5b      	lsrs	r3, r3, #25
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	4413      	add	r3, r2
 80038ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	0d1b      	lsrs	r3, r3, #20
 80038d4:	f003 031f 	and.w	r3, r3, #31
 80038d8:	2107      	movs	r1, #7
 80038da:	fa01 f303 	lsl.w	r3, r1, r3
 80038de:	43db      	mvns	r3, r3
 80038e0:	401a      	ands	r2, r3
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	0d1b      	lsrs	r3, r3, #20
 80038e6:	f003 031f 	and.w	r3, r3, #31
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	fa01 f303 	lsl.w	r3, r1, r3
 80038f0:	431a      	orrs	r2, r3
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80038f6:	bf00      	nop
 80038f8:	371c      	adds	r7, #28
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
	...

08003904 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800391c:	43db      	mvns	r3, r3
 800391e:	401a      	ands	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f003 0318 	and.w	r3, r3, #24
 8003926:	4908      	ldr	r1, [pc, #32]	; (8003948 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003928:	40d9      	lsrs	r1, r3
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	400b      	ands	r3, r1
 800392e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003932:	431a      	orrs	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800393a:	bf00      	nop
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	0007ffff 	.word	0x0007ffff

0800394c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800395c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6093      	str	r3, [r2, #8]
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003984:	d101      	bne.n	800398a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80039a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039d4:	d101      	bne.n	80039da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039fc:	f043 0201 	orr.w	r2, r3, #1
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a24:	f043 0202 	orr.w	r2, r3, #2
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <LL_ADC_IsEnabled+0x18>
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e000      	b.n	8003a52 <LL_ADC_IsEnabled+0x1a>
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d101      	bne.n	8003a76 <LL_ADC_IsDisableOngoing+0x18>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <LL_ADC_IsDisableOngoing+0x1a>
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a98:	f043 0204 	orr.w	r2, r3, #4
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003abc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ac0:	f043 0210 	orr.w	r2, r3, #16
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d101      	bne.n	8003aec <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b0a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b0e:	f043 0220 	orr.w	r2, r3, #32
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d101      	bne.n	8003b3a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8003b54:	2300      	movs	r3, #0
 8003b56:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e12e      	b.n	8003dc4 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d109      	bne.n	8003b88 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff fa83 	bl	8003080 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff feef 	bl	8003970 <LL_ADC_IsDeepPowerDownEnabled>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d004      	beq.n	8003ba2 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff fed5 	bl	800394c <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff ff0a 	bl	80039c0 <LL_ADC_IsInternalRegulatorEnabled>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d115      	bne.n	8003bde <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff feee 	bl	8003998 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bbc:	4b83      	ldr	r3, [pc, #524]	; (8003dcc <HAL_ADC_Init+0x284>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	099b      	lsrs	r3, r3, #6
 8003bc2:	4a83      	ldr	r2, [pc, #524]	; (8003dd0 <HAL_ADC_Init+0x288>)
 8003bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc8:	099b      	lsrs	r3, r3, #6
 8003bca:	3301      	adds	r3, #1
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003bd0:	e002      	b.n	8003bd8 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1f9      	bne.n	8003bd2 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7ff feec 	bl	80039c0 <LL_ADC_IsInternalRegulatorEnabled>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10d      	bne.n	8003c0a <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf2:	f043 0210 	orr.w	r2, r3, #16
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfe:	f043 0201 	orr.w	r2, r3, #1
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff ff60 	bl	8003ad4 <LL_ADC_REG_IsConversionOngoing>
 8003c14:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1a:	f003 0310 	and.w	r3, r3, #16
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f040 80c7 	bne.w	8003db2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f040 80c3 	bne.w	8003db2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c30:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003c34:	f043 0202 	orr.w	r2, r3, #2
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff fef9 	bl	8003a38 <LL_ADC_IsEnabled>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10b      	bne.n	8003c64 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c4c:	4861      	ldr	r0, [pc, #388]	; (8003dd4 <HAL_ADC_Init+0x28c>)
 8003c4e:	f7ff fef3 	bl	8003a38 <LL_ADC_IsEnabled>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d105      	bne.n	8003c64 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	485e      	ldr	r0, [pc, #376]	; (8003dd8 <HAL_ADC_Init+0x290>)
 8003c60:	f7ff fd5c 	bl	800371c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	7e5b      	ldrb	r3, [r3, #25]
 8003c68:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c6e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003c74:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003c7a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c82:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8003c84:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d106      	bne.n	8003ca4 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	045b      	lsls	r3, r3, #17
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d009      	beq.n	8003cc0 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	4b45      	ldr	r3, [pc, #276]	; (8003ddc <HAL_ADC_Init+0x294>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6812      	ldr	r2, [r2, #0]
 8003cce:	69b9      	ldr	r1, [r7, #24]
 8003cd0:	430b      	orrs	r3, r1
 8003cd2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff fefb 	bl	8003ad4 <LL_ADC_REG_IsConversionOngoing>
 8003cde:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff ff1c 	bl	8003b22 <LL_ADC_INJ_IsConversionOngoing>
 8003cea:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d13d      	bne.n	8003d6e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d13a      	bne.n	8003d6e <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003cfc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d04:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d06:	4313      	orrs	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d14:	f023 0302 	bic.w	r3, r3, #2
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	69b9      	ldr	r1, [r7, #24]
 8003d1e:	430b      	orrs	r3, r1
 8003d20:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d118      	bne.n	8003d5e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003d36:	f023 0304 	bic.w	r3, r3, #4
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d42:	4311      	orrs	r1, r2
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003d48:	4311      	orrs	r1, r2
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0201 	orr.w	r2, r2, #1
 8003d5a:	611a      	str	r2, [r3, #16]
 8003d5c:	e007      	b.n	8003d6e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0201 	bic.w	r2, r2, #1
 8003d6c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d10c      	bne.n	8003d90 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7c:	f023 010f 	bic.w	r1, r3, #15
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	1e5a      	subs	r2, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	631a      	str	r2, [r3, #48]	; 0x30
 8003d8e:	e007      	b.n	8003da0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 020f 	bic.w	r2, r2, #15
 8003d9e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da4:	f023 0303 	bic.w	r3, r3, #3
 8003da8:	f043 0201 	orr.w	r2, r3, #1
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	655a      	str	r2, [r3, #84]	; 0x54
 8003db0:	e007      	b.n	8003dc2 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db6:	f043 0210 	orr.w	r2, r3, #16
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003dc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3720      	adds	r7, #32
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	2000000c 	.word	0x2000000c
 8003dd0:	053e2d63 	.word	0x053e2d63
 8003dd4:	50040000 	.word	0x50040000
 8003dd8:	50040300 	.word	0x50040300
 8003ddc:	fff0c007 	.word	0xfff0c007

08003de0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff fe71 	bl	8003ad4 <LL_ADC_REG_IsConversionOngoing>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d140      	bne.n	8003e7a <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <HAL_ADC_Start+0x26>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e03c      	b.n	8003e80 <HAL_ADC_Start+0xa0>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fd8a 	bl	8004928 <ADC_Enable>
 8003e14:	4603      	mov	r3, r0
 8003e16:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003e18:	7bfb      	ldrb	r3, [r7, #15]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d128      	bne.n	8003e70 <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e22:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e26:	f023 0301 	bic.w	r3, r3, #1
 8003e2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	655a      	str	r2, [r3, #84]	; 0x54
#if defined (ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e3e:	d106      	bne.n	8003e4e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e44:	f023 0206 	bic.w	r2, r3, #6
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	659a      	str	r2, [r3, #88]	; 0x58
 8003e4c:	e002      	b.n	8003e54 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	221c      	movs	r2, #28
 8003e5a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff fe0b 	bl	8003a84 <LL_ADC_REG_StartConversion>
 8003e6e:	e006      	b.n	8003e7e <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003e78:	e001      	b.n	8003e7e <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d101      	bne.n	8003e9e <HAL_ADC_Stop+0x16>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e023      	b.n	8003ee6 <HAL_ADC_Stop+0x5e>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003ea6:	2103      	movs	r1, #3
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 fc81 	bl	80047b0 <ADC_ConversionStop>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d111      	bne.n	8003edc <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 fdaf 	bl	8004a1c <ADC_Disable>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d109      	bne.n	8003edc <HAL_ADC_Stop+0x54>
#if defined (ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ecc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ed0:	f023 0301 	bic.w	r3, r3, #1
 8003ed4:	f043 0201 	orr.w	r2, r3, #1
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b084      	sub	sp, #16
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
 8003ef6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d102      	bne.n	8003f06 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003f00:	2308      	movs	r3, #8
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	e010      	b.n	8003f28 <HAL_ADC_PollForConversion+0x3a>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d007      	beq.n	8003f24 <HAL_ADC_PollForConversion+0x36>
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f18:	f043 0220 	orr.w	r2, r3, #32
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	655a      	str	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e06d      	b.n	8004000 <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8003f24:	2304      	movs	r3, #4
 8003f26:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003f28:	f7ff fbd4 	bl	80036d4 <HAL_GetTick>
 8003f2c:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003f2e:	e021      	b.n	8003f74 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f36:	d01d      	beq.n	8003f74 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003f38:	f7ff fbcc 	bl	80036d4 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d302      	bcc.n	8003f4e <HAL_ADC_PollForConversion+0x60>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d112      	bne.n	8003f74 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4013      	ands	r3, r2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10b      	bne.n	8003f74 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f60:	f043 0204 	orr.w	r2, r3, #4
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e045      	b.n	8004000 <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0d6      	beq.n	8003f30 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f86:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff fc4b 	bl	800382e <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d01c      	beq.n	8003fd8 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	7e5b      	ldrb	r3, [r3, #25]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d118      	bne.n	8003fd8 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0308 	and.w	r3, r3, #8
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d111      	bne.n	8003fd8 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d105      	bne.n	8003fd8 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd0:	f043 0201 	orr.w	r2, r3, #1
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2b08      	cmp	r3, #8
 8003fdc:	d104      	bne.n	8003fe8 <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2208      	movs	r2, #8
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	e00a      	b.n	8003ffe <HAL_ADC_PollForConversion+0x110>
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d103      	bne.n	8003ffe <HAL_ADC_PollForConversion+0x110>
#endif
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	220c      	movs	r2, #12
 8003ffc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004016:	4618      	mov	r0, r3
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
	...

08004024 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b0b6      	sub	sp, #216	; 0xd8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800402e:	2300      	movs	r3, #0
 8004030:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004034:	2300      	movs	r3, #0
 8004036:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800403e:	2b01      	cmp	r3, #1
 8004040:	d101      	bne.n	8004046 <HAL_ADC_ConfigChannel+0x22>
 8004042:	2302      	movs	r3, #2
 8004044:	e39f      	b.n	8004786 <HAL_ADC_ConfigChannel+0x762>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff fd3e 	bl	8003ad4 <LL_ADC_REG_IsConversionOngoing>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	f040 8384 	bne.w	8004768 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6818      	ldr	r0, [r3, #0]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	6859      	ldr	r1, [r3, #4]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	461a      	mov	r2, r3
 800406e:	f7ff fbf1 	bl	8003854 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f7ff fd2c 	bl	8003ad4 <LL_ADC_REG_IsConversionOngoing>
 800407c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff fd4c 	bl	8003b22 <LL_ADC_INJ_IsConversionOngoing>
 800408a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800408e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004092:	2b00      	cmp	r3, #0
 8004094:	f040 81a6 	bne.w	80043e4 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004098:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800409c:	2b00      	cmp	r3, #0
 800409e:	f040 81a1 	bne.w	80043e4 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	6819      	ldr	r1, [r3, #0]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	461a      	mov	r2, r3
 80040b0:	f7ff fbfc 	bl	80038ac <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	695a      	ldr	r2, [r3, #20]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	08db      	lsrs	r3, r3, #3
 80040c0:	f003 0303 	and.w	r3, r3, #3
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d00a      	beq.n	80040ec <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	6919      	ldr	r1, [r3, #16]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040e6:	f7ff fb4d 	bl	8003784 <LL_ADC_SetOffset>
 80040ea:	e17b      	b.n	80043e4 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2100      	movs	r1, #0
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff fb6a 	bl	80037cc <LL_ADC_GetOffsetChannel>
 80040f8:	4603      	mov	r3, r0
 80040fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10a      	bne.n	8004118 <HAL_ADC_ConfigChannel+0xf4>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2100      	movs	r1, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff fb5f 	bl	80037cc <LL_ADC_GetOffsetChannel>
 800410e:	4603      	mov	r3, r0
 8004110:	0e9b      	lsrs	r3, r3, #26
 8004112:	f003 021f 	and.w	r2, r3, #31
 8004116:	e01e      	b.n	8004156 <HAL_ADC_ConfigChannel+0x132>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2100      	movs	r1, #0
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff fb54 	bl	80037cc <LL_ADC_GetOffsetChannel>
 8004124:	4603      	mov	r3, r0
 8004126:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800412e:	fa93 f3a3 	rbit	r3, r3
 8004132:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8004136:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800413a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 800413e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8004146:	2320      	movs	r3, #32
 8004148:	e004      	b.n	8004154 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 800414a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800414e:	fab3 f383 	clz	r3, r3
 8004152:	b2db      	uxtb	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800415e:	2b00      	cmp	r3, #0
 8004160:	d105      	bne.n	800416e <HAL_ADC_ConfigChannel+0x14a>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	0e9b      	lsrs	r3, r3, #26
 8004168:	f003 031f 	and.w	r3, r3, #31
 800416c:	e018      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x17c>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004176:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800417a:	fa93 f3a3 	rbit	r3, r3
 800417e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004182:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004186:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800418a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8004192:	2320      	movs	r3, #32
 8004194:	e004      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8004196:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800419a:	fab3 f383 	clz	r3, r3
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d106      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2200      	movs	r2, #0
 80041aa:	2100      	movs	r1, #0
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7ff fb23 	bl	80037f8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2101      	movs	r1, #1
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff fb07 	bl	80037cc <LL_ADC_GetOffsetChannel>
 80041be:	4603      	mov	r3, r0
 80041c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10a      	bne.n	80041de <HAL_ADC_ConfigChannel+0x1ba>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2101      	movs	r1, #1
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff fafc 	bl	80037cc <LL_ADC_GetOffsetChannel>
 80041d4:	4603      	mov	r3, r0
 80041d6:	0e9b      	lsrs	r3, r3, #26
 80041d8:	f003 021f 	and.w	r2, r3, #31
 80041dc:	e01e      	b.n	800421c <HAL_ADC_ConfigChannel+0x1f8>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2101      	movs	r1, #1
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff faf1 	bl	80037cc <LL_ADC_GetOffsetChannel>
 80041ea:	4603      	mov	r3, r0
 80041ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80041f4:	fa93 f3a3 	rbit	r3, r3
 80041f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80041fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004200:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004204:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 800420c:	2320      	movs	r3, #32
 800420e:	e004      	b.n	800421a <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8004210:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004214:	fab3 f383 	clz	r3, r3
 8004218:	b2db      	uxtb	r3, r3
 800421a:	461a      	mov	r2, r3
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004224:	2b00      	cmp	r3, #0
 8004226:	d105      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x210>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	0e9b      	lsrs	r3, r3, #26
 800422e:	f003 031f 	and.w	r3, r3, #31
 8004232:	e018      	b.n	8004266 <HAL_ADC_ConfigChannel+0x242>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004240:	fa93 f3a3 	rbit	r3, r3
 8004244:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004248:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800424c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004250:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8004258:	2320      	movs	r3, #32
 800425a:	e004      	b.n	8004266 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 800425c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004260:	fab3 f383 	clz	r3, r3
 8004264:	b2db      	uxtb	r3, r3
 8004266:	429a      	cmp	r2, r3
 8004268:	d106      	bne.n	8004278 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2200      	movs	r2, #0
 8004270:	2101      	movs	r1, #1
 8004272:	4618      	mov	r0, r3
 8004274:	f7ff fac0 	bl	80037f8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2102      	movs	r1, #2
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff faa4 	bl	80037cc <LL_ADC_GetOffsetChannel>
 8004284:	4603      	mov	r3, r0
 8004286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10a      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x280>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2102      	movs	r1, #2
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff fa99 	bl	80037cc <LL_ADC_GetOffsetChannel>
 800429a:	4603      	mov	r3, r0
 800429c:	0e9b      	lsrs	r3, r3, #26
 800429e:	f003 021f 	and.w	r2, r3, #31
 80042a2:	e01e      	b.n	80042e2 <HAL_ADC_ConfigChannel+0x2be>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2102      	movs	r1, #2
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff fa8e 	bl	80037cc <LL_ADC_GetOffsetChannel>
 80042b0:	4603      	mov	r3, r0
 80042b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042ba:	fa93 f3a3 	rbit	r3, r3
 80042be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80042c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80042ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80042d2:	2320      	movs	r3, #32
 80042d4:	e004      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80042d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042da:	fab3 f383 	clz	r3, r3
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	461a      	mov	r2, r3
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d105      	bne.n	80042fa <HAL_ADC_ConfigChannel+0x2d6>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	0e9b      	lsrs	r3, r3, #26
 80042f4:	f003 031f 	and.w	r3, r3, #31
 80042f8:	e016      	b.n	8004328 <HAL_ADC_ConfigChannel+0x304>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004302:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004306:	fa93 f3a3 	rbit	r3, r3
 800430a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800430c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800430e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004312:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800431a:	2320      	movs	r3, #32
 800431c:	e004      	b.n	8004328 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800431e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004322:	fab3 f383 	clz	r3, r3
 8004326:	b2db      	uxtb	r3, r3
 8004328:	429a      	cmp	r2, r3
 800432a:	d106      	bne.n	800433a <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2200      	movs	r2, #0
 8004332:	2102      	movs	r1, #2
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff fa5f 	bl	80037f8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2103      	movs	r1, #3
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff fa43 	bl	80037cc <LL_ADC_GetOffsetChannel>
 8004346:	4603      	mov	r3, r0
 8004348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10a      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x342>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2103      	movs	r1, #3
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff fa38 	bl	80037cc <LL_ADC_GetOffsetChannel>
 800435c:	4603      	mov	r3, r0
 800435e:	0e9b      	lsrs	r3, r3, #26
 8004360:	f003 021f 	and.w	r2, r3, #31
 8004364:	e017      	b.n	8004396 <HAL_ADC_ConfigChannel+0x372>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2103      	movs	r1, #3
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff fa2d 	bl	80037cc <LL_ADC_GetOffsetChannel>
 8004372:	4603      	mov	r3, r0
 8004374:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004378:	fa93 f3a3 	rbit	r3, r3
 800437c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800437e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004380:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004382:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8004388:	2320      	movs	r3, #32
 800438a:	e003      	b.n	8004394 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 800438c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800438e:	fab3 f383 	clz	r3, r3
 8004392:	b2db      	uxtb	r3, r3
 8004394:	461a      	mov	r2, r3
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d105      	bne.n	80043ae <HAL_ADC_ConfigChannel+0x38a>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	0e9b      	lsrs	r3, r3, #26
 80043a8:	f003 031f 	and.w	r3, r3, #31
 80043ac:	e011      	b.n	80043d2 <HAL_ADC_ConfigChannel+0x3ae>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043b6:	fa93 f3a3 	rbit	r3, r3
 80043ba:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80043bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043be:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80043c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80043c6:	2320      	movs	r3, #32
 80043c8:	e003      	b.n	80043d2 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80043ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043cc:	fab3 f383 	clz	r3, r3
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d106      	bne.n	80043e4 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2200      	movs	r2, #0
 80043dc:	2103      	movs	r1, #3
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff fa0a 	bl	80037f8 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff fb25 	bl	8003a38 <LL_ADC_IsEnabled>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f040 81c2 	bne.w	800477a <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6818      	ldr	r0, [r3, #0]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	6819      	ldr	r1, [r3, #0]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	461a      	mov	r2, r3
 8004404:	f7ff fa7e 	bl	8003904 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	4a8e      	ldr	r2, [pc, #568]	; (8004648 <HAL_ADC_ConfigChannel+0x624>)
 800440e:	4293      	cmp	r3, r2
 8004410:	f040 8130 	bne.w	8004674 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10b      	bne.n	800443c <HAL_ADC_ConfigChannel+0x418>
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	0e9b      	lsrs	r3, r3, #26
 800442a:	3301      	adds	r3, #1
 800442c:	f003 031f 	and.w	r3, r3, #31
 8004430:	2b09      	cmp	r3, #9
 8004432:	bf94      	ite	ls
 8004434:	2301      	movls	r3, #1
 8004436:	2300      	movhi	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	e019      	b.n	8004470 <HAL_ADC_ConfigChannel+0x44c>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004444:	fa93 f3a3 	rbit	r3, r3
 8004448:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800444a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800444c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800444e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8004454:	2320      	movs	r3, #32
 8004456:	e003      	b.n	8004460 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8004458:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800445a:	fab3 f383 	clz	r3, r3
 800445e:	b2db      	uxtb	r3, r3
 8004460:	3301      	adds	r3, #1
 8004462:	f003 031f 	and.w	r3, r3, #31
 8004466:	2b09      	cmp	r3, #9
 8004468:	bf94      	ite	ls
 800446a:	2301      	movls	r3, #1
 800446c:	2300      	movhi	r3, #0
 800446e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004470:	2b00      	cmp	r3, #0
 8004472:	d079      	beq.n	8004568 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800447c:	2b00      	cmp	r3, #0
 800447e:	d107      	bne.n	8004490 <HAL_ADC_ConfigChannel+0x46c>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	0e9b      	lsrs	r3, r3, #26
 8004486:	3301      	adds	r3, #1
 8004488:	069b      	lsls	r3, r3, #26
 800448a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800448e:	e015      	b.n	80044bc <HAL_ADC_ConfigChannel+0x498>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004498:	fa93 f3a3 	rbit	r3, r3
 800449c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800449e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80044a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80044a8:	2320      	movs	r3, #32
 80044aa:	e003      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80044ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044ae:	fab3 f383 	clz	r3, r3
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	3301      	adds	r3, #1
 80044b6:	069b      	lsls	r3, r3, #26
 80044b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d109      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x4b8>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	0e9b      	lsrs	r3, r3, #26
 80044ce:	3301      	adds	r3, #1
 80044d0:	f003 031f 	and.w	r3, r3, #31
 80044d4:	2101      	movs	r1, #1
 80044d6:	fa01 f303 	lsl.w	r3, r1, r3
 80044da:	e017      	b.n	800450c <HAL_ADC_ConfigChannel+0x4e8>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044e4:	fa93 f3a3 	rbit	r3, r3
 80044e8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80044ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80044ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 80044f4:	2320      	movs	r3, #32
 80044f6:	e003      	b.n	8004500 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 80044f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044fa:	fab3 f383 	clz	r3, r3
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	3301      	adds	r3, #1
 8004502:	f003 031f 	and.w	r3, r3, #31
 8004506:	2101      	movs	r1, #1
 8004508:	fa01 f303 	lsl.w	r3, r1, r3
 800450c:	ea42 0103 	orr.w	r1, r2, r3
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10a      	bne.n	8004532 <HAL_ADC_ConfigChannel+0x50e>
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	0e9b      	lsrs	r3, r3, #26
 8004522:	3301      	adds	r3, #1
 8004524:	f003 021f 	and.w	r2, r3, #31
 8004528:	4613      	mov	r3, r2
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	4413      	add	r3, r2
 800452e:	051b      	lsls	r3, r3, #20
 8004530:	e018      	b.n	8004564 <HAL_ADC_ConfigChannel+0x540>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453a:	fa93 f3a3 	rbit	r3, r3
 800453e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004542:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800454a:	2320      	movs	r3, #32
 800454c:	e003      	b.n	8004556 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800454e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004550:	fab3 f383 	clz	r3, r3
 8004554:	b2db      	uxtb	r3, r3
 8004556:	3301      	adds	r3, #1
 8004558:	f003 021f 	and.w	r2, r3, #31
 800455c:	4613      	mov	r3, r2
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	4413      	add	r3, r2
 8004562:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004564:	430b      	orrs	r3, r1
 8004566:	e080      	b.n	800466a <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004570:	2b00      	cmp	r3, #0
 8004572:	d107      	bne.n	8004584 <HAL_ADC_ConfigChannel+0x560>
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	0e9b      	lsrs	r3, r3, #26
 800457a:	3301      	adds	r3, #1
 800457c:	069b      	lsls	r3, r3, #26
 800457e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004582:	e015      	b.n	80045b0 <HAL_ADC_ConfigChannel+0x58c>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458c:	fa93 f3a3 	rbit	r3, r3
 8004590:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004594:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 800459c:	2320      	movs	r3, #32
 800459e:	e003      	b.n	80045a8 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80045a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a2:	fab3 f383 	clz	r3, r3
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	3301      	adds	r3, #1
 80045aa:	069b      	lsls	r3, r3, #26
 80045ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d109      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x5ac>
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	0e9b      	lsrs	r3, r3, #26
 80045c2:	3301      	adds	r3, #1
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	2101      	movs	r1, #1
 80045ca:	fa01 f303 	lsl.w	r3, r1, r3
 80045ce:	e017      	b.n	8004600 <HAL_ADC_ConfigChannel+0x5dc>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	fa93 f3a3 	rbit	r3, r3
 80045dc:	61fb      	str	r3, [r7, #28]
  return result;
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 80045e8:	2320      	movs	r3, #32
 80045ea:	e003      	b.n	80045f4 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	fab3 f383 	clz	r3, r3
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	3301      	adds	r3, #1
 80045f6:	f003 031f 	and.w	r3, r3, #31
 80045fa:	2101      	movs	r1, #1
 80045fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004600:	ea42 0103 	orr.w	r1, r2, r3
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10d      	bne.n	800462c <HAL_ADC_ConfigChannel+0x608>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	0e9b      	lsrs	r3, r3, #26
 8004616:	3301      	adds	r3, #1
 8004618:	f003 021f 	and.w	r2, r3, #31
 800461c:	4613      	mov	r3, r2
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	4413      	add	r3, r2
 8004622:	3b1e      	subs	r3, #30
 8004624:	051b      	lsls	r3, r3, #20
 8004626:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800462a:	e01d      	b.n	8004668 <HAL_ADC_ConfigChannel+0x644>
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	fa93 f3a3 	rbit	r3, r3
 8004638:	613b      	str	r3, [r7, #16]
  return result;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d103      	bne.n	800464c <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8004644:	2320      	movs	r3, #32
 8004646:	e005      	b.n	8004654 <HAL_ADC_ConfigChannel+0x630>
 8004648:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	fab3 f383 	clz	r3, r3
 8004652:	b2db      	uxtb	r3, r3
 8004654:	3301      	adds	r3, #1
 8004656:	f003 021f 	and.w	r2, r3, #31
 800465a:	4613      	mov	r3, r2
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	4413      	add	r3, r2
 8004660:	3b1e      	subs	r3, #30
 8004662:	051b      	lsls	r3, r3, #20
 8004664:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004668:	430b      	orrs	r3, r1
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	6892      	ldr	r2, [r2, #8]
 800466e:	4619      	mov	r1, r3
 8004670:	f7ff f91c 	bl	80038ac <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	4b45      	ldr	r3, [pc, #276]	; (8004790 <HAL_ADC_ConfigChannel+0x76c>)
 800467a:	4013      	ands	r3, r2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d07c      	beq.n	800477a <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004680:	4844      	ldr	r0, [pc, #272]	; (8004794 <HAL_ADC_ConfigChannel+0x770>)
 8004682:	f7ff f871 	bl	8003768 <LL_ADC_GetCommonPathInternalCh>
 8004686:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800468a:	4843      	ldr	r0, [pc, #268]	; (8004798 <HAL_ADC_ConfigChannel+0x774>)
 800468c:	f7ff f9d4 	bl	8003a38 <LL_ADC_IsEnabled>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d15e      	bne.n	8004754 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a40      	ldr	r2, [pc, #256]	; (800479c <HAL_ADC_ConfigChannel+0x778>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d127      	bne.n	80046f0 <HAL_ADC_ConfigChannel+0x6cc>
 80046a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d121      	bne.n	80046f0 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a39      	ldr	r2, [pc, #228]	; (8004798 <HAL_ADC_ConfigChannel+0x774>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d161      	bne.n	800477a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80046b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80046be:	4619      	mov	r1, r3
 80046c0:	4834      	ldr	r0, [pc, #208]	; (8004794 <HAL_ADC_ConfigChannel+0x770>)
 80046c2:	f7ff f83e 	bl	8003742 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046c6:	4b36      	ldr	r3, [pc, #216]	; (80047a0 <HAL_ADC_ConfigChannel+0x77c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	099b      	lsrs	r3, r3, #6
 80046cc:	4a35      	ldr	r2, [pc, #212]	; (80047a4 <HAL_ADC_ConfigChannel+0x780>)
 80046ce:	fba2 2303 	umull	r2, r3, r2, r3
 80046d2:	099b      	lsrs	r3, r3, #6
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	4613      	mov	r3, r2
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	4413      	add	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80046e0:	e002      	b.n	80046e8 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	3b01      	subs	r3, #1
 80046e6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1f9      	bne.n	80046e2 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046ee:	e044      	b.n	800477a <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a2c      	ldr	r2, [pc, #176]	; (80047a8 <HAL_ADC_ConfigChannel+0x784>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d113      	bne.n	8004722 <HAL_ADC_ConfigChannel+0x6fe>
 80046fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10d      	bne.n	8004722 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a23      	ldr	r2, [pc, #140]	; (8004798 <HAL_ADC_ConfigChannel+0x774>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d134      	bne.n	800477a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004710:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004714:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004718:	4619      	mov	r1, r3
 800471a:	481e      	ldr	r0, [pc, #120]	; (8004794 <HAL_ADC_ConfigChannel+0x770>)
 800471c:	f7ff f811 	bl	8003742 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004720:	e02b      	b.n	800477a <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a21      	ldr	r2, [pc, #132]	; (80047ac <HAL_ADC_ConfigChannel+0x788>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d126      	bne.n	800477a <HAL_ADC_ConfigChannel+0x756>
 800472c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004730:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d120      	bne.n	800477a <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a16      	ldr	r2, [pc, #88]	; (8004798 <HAL_ADC_ConfigChannel+0x774>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d11b      	bne.n	800477a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004742:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004746:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800474a:	4619      	mov	r1, r3
 800474c:	4811      	ldr	r0, [pc, #68]	; (8004794 <HAL_ADC_ConfigChannel+0x770>)
 800474e:	f7fe fff8 	bl	8003742 <LL_ADC_SetCommonPathInternalCh>
 8004752:	e012      	b.n	800477a <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004758:	f043 0220 	orr.w	r2, r3, #32
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004766:	e008      	b.n	800477a <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476c:	f043 0220 	orr.w	r2, r3, #32
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8004782:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004786:	4618      	mov	r0, r3
 8004788:	37d8      	adds	r7, #216	; 0xd8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	80080000 	.word	0x80080000
 8004794:	50040300 	.word	0x50040300
 8004798:	50040000 	.word	0x50040000
 800479c:	c7520000 	.word	0xc7520000
 80047a0:	2000000c 	.word	0x2000000c
 80047a4:	053e2d63 	.word	0x053e2d63
 80047a8:	cb840000 	.word	0xcb840000
 80047ac:	80000001 	.word	0x80000001

080047b0 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB serie, parameter not available on devices: STM32WB10xx, STM32WB15xx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80047ba:	2300      	movs	r3, #0
 80047bc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7ff f984 	bl	8003ad4 <LL_ADC_REG_IsConversionOngoing>
 80047cc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7ff f9a5 	bl	8003b22 <LL_ADC_INJ_IsConversionOngoing>
 80047d8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d103      	bne.n	80047e8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 8098 	beq.w	8004918 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d02a      	beq.n	800484c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	7e5b      	ldrb	r3, [r3, #25]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d126      	bne.n	800484c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	7e1b      	ldrb	r3, [r3, #24]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d122      	bne.n	800484c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004806:	2301      	movs	r3, #1
 8004808:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800480a:	e014      	b.n	8004836 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	4a45      	ldr	r2, [pc, #276]	; (8004924 <ADC_ConversionStop+0x174>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d90d      	bls.n	8004830 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004818:	f043 0210 	orr.w	r2, r3, #16
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004824:	f043 0201 	orr.w	r2, r3, #1
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e074      	b.n	800491a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	3301      	adds	r3, #1
 8004834:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004840:	2b40      	cmp	r3, #64	; 0x40
 8004842:	d1e3      	bne.n	800480c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2240      	movs	r2, #64	; 0x40
 800484a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d014      	beq.n	800487c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff f93c 	bl	8003ad4 <LL_ADC_REG_IsConversionOngoing>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00c      	beq.n	800487c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff f8f9 	bl	8003a5e <LL_ADC_IsDisableOngoing>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d104      	bne.n	800487c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff f918 	bl	8003aac <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d014      	beq.n	80048ac <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff f94b 	bl	8003b22 <LL_ADC_INJ_IsConversionOngoing>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00c      	beq.n	80048ac <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff f8e1 	bl	8003a5e <LL_ADC_IsDisableOngoing>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d104      	bne.n	80048ac <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff f927 	bl	8003afa <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d005      	beq.n	80048be <ADC_ConversionStop+0x10e>
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	d105      	bne.n	80048c4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80048b8:	230c      	movs	r3, #12
 80048ba:	617b      	str	r3, [r7, #20]
        break;
 80048bc:	e005      	b.n	80048ca <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80048be:	2308      	movs	r3, #8
 80048c0:	617b      	str	r3, [r7, #20]
        break;
 80048c2:	e002      	b.n	80048ca <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80048c4:	2304      	movs	r3, #4
 80048c6:	617b      	str	r3, [r7, #20]
        break;
 80048c8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80048ca:	f7fe ff03 	bl	80036d4 <HAL_GetTick>
 80048ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80048d0:	e01b      	b.n	800490a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80048d2:	f7fe feff 	bl	80036d4 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b05      	cmp	r3, #5
 80048de:	d914      	bls.n	800490a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	4013      	ands	r3, r2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00d      	beq.n	800490a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f2:	f043 0210 	orr.w	r2, r3, #16
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fe:	f043 0201 	orr.w	r2, r3, #1
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e007      	b.n	800491a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	4013      	ands	r3, r2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1dc      	bne.n	80048d2 <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3720      	adds	r7, #32
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	a33fffff 	.word	0xa33fffff

08004928 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004930:	2300      	movs	r3, #0
 8004932:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff f87d 	bl	8003a38 <LL_ADC_IsEnabled>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d15e      	bne.n	8004a02 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689a      	ldr	r2, [r3, #8]
 800494a:	4b30      	ldr	r3, [pc, #192]	; (8004a0c <ADC_Enable+0xe4>)
 800494c:	4013      	ands	r3, r2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00d      	beq.n	800496e <ADC_Enable+0x46>
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004956:	f043 0210 	orr.w	r2, r3, #16
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004962:	f043 0201 	orr.w	r2, r3, #1
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e04a      	b.n	8004a04 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	f7ff f838 	bl	80039e8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004978:	4825      	ldr	r0, [pc, #148]	; (8004a10 <ADC_Enable+0xe8>)
 800497a:	f7fe fef5 	bl	8003768 <LL_ADC_GetCommonPathInternalCh>
 800497e:	4603      	mov	r3, r0
 8004980:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00f      	beq.n	80049a8 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004988:	4b22      	ldr	r3, [pc, #136]	; (8004a14 <ADC_Enable+0xec>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	099b      	lsrs	r3, r3, #6
 800498e:	4a22      	ldr	r2, [pc, #136]	; (8004a18 <ADC_Enable+0xf0>)
 8004990:	fba2 2303 	umull	r2, r3, r2, r3
 8004994:	099b      	lsrs	r3, r3, #6
 8004996:	3301      	adds	r3, #1
 8004998:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800499a:	e002      	b.n	80049a2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	3b01      	subs	r3, #1
 80049a0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1f9      	bne.n	800499c <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80049a8:	f7fe fe94 	bl	80036d4 <HAL_GetTick>
 80049ac:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049ae:	e021      	b.n	80049f4 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff f83f 	bl	8003a38 <LL_ADC_IsEnabled>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d104      	bne.n	80049ca <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7ff f80f 	bl	80039e8 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80049ca:	f7fe fe83 	bl	80036d4 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d90d      	bls.n	80049f4 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049dc:	f043 0210 	orr.w	r2, r3, #16
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e8:	f043 0201 	orr.w	r2, r3, #1
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e007      	b.n	8004a04 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d1d6      	bne.n	80049b0 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	8000003f 	.word	0x8000003f
 8004a10:	50040300 	.word	0x50040300
 8004a14:	2000000c 	.word	0x2000000c
 8004a18:	053e2d63 	.word	0x053e2d63

08004a1c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7ff f818 	bl	8003a5e <LL_ADC_IsDisableOngoing>
 8004a2e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fe ffff 	bl	8003a38 <LL_ADC_IsEnabled>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d047      	beq.n	8004ad0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d144      	bne.n	8004ad0 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 030d 	and.w	r3, r3, #13
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d10c      	bne.n	8004a6e <ADC_Disable+0x52>
#endif
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7fe ffd9 	bl	8003a10 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2203      	movs	r2, #3
 8004a64:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004a66:	f7fe fe35 	bl	80036d4 <HAL_GetTick>
 8004a6a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004a6c:	e029      	b.n	8004ac2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a72:	f043 0210 	orr.w	r2, r3, #16
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7e:	f043 0201 	orr.w	r2, r3, #1
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e023      	b.n	8004ad2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004a8a:	f7fe fe23 	bl	80036d4 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d914      	bls.n	8004ac2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00d      	beq.n	8004ac2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aaa:	f043 0210 	orr.w	r2, r3, #16
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab6:	f043 0201 	orr.w	r2, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e007      	b.n	8004ad2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1dc      	bne.n	8004a8a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f003 0307 	and.w	r3, r3, #7
 8004aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004aec:	4b0c      	ldr	r3, [pc, #48]	; (8004b20 <__NVIC_SetPriorityGrouping+0x44>)
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004af8:	4013      	ands	r3, r2
 8004afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b0e:	4a04      	ldr	r2, [pc, #16]	; (8004b20 <__NVIC_SetPriorityGrouping+0x44>)
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	60d3      	str	r3, [r2, #12]
}
 8004b14:	bf00      	nop
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	e000ed00 	.word	0xe000ed00

08004b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b28:	4b04      	ldr	r3, [pc, #16]	; (8004b3c <__NVIC_GetPriorityGrouping+0x18>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	0a1b      	lsrs	r3, r3, #8
 8004b2e:	f003 0307 	and.w	r3, r3, #7
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	e000ed00 	.word	0xe000ed00

08004b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	4603      	mov	r3, r0
 8004b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	db0b      	blt.n	8004b6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b52:	79fb      	ldrb	r3, [r7, #7]
 8004b54:	f003 021f 	and.w	r2, r3, #31
 8004b58:	4907      	ldr	r1, [pc, #28]	; (8004b78 <__NVIC_EnableIRQ+0x38>)
 8004b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b5e:	095b      	lsrs	r3, r3, #5
 8004b60:	2001      	movs	r0, #1
 8004b62:	fa00 f202 	lsl.w	r2, r0, r2
 8004b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b6a:	bf00      	nop
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	e000e100 	.word	0xe000e100

08004b7c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	4603      	mov	r3, r0
 8004b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	db12      	blt.n	8004bb4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b8e:	79fb      	ldrb	r3, [r7, #7]
 8004b90:	f003 021f 	and.w	r2, r3, #31
 8004b94:	490a      	ldr	r1, [pc, #40]	; (8004bc0 <__NVIC_DisableIRQ+0x44>)
 8004b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9a:	095b      	lsrs	r3, r3, #5
 8004b9c:	2001      	movs	r0, #1
 8004b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8004ba2:	3320      	adds	r3, #32
 8004ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ba8:	f3bf 8f4f 	dsb	sy
}
 8004bac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004bae:	f3bf 8f6f 	isb	sy
}
 8004bb2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	e000e100 	.word	0xe000e100

08004bc4 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	4603      	mov	r3, r0
 8004bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	db0c      	blt.n	8004bf0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	f003 021f 	and.w	r2, r3, #31
 8004bdc:	4907      	ldr	r1, [pc, #28]	; (8004bfc <__NVIC_SetPendingIRQ+0x38>)
 8004bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be2:	095b      	lsrs	r3, r3, #5
 8004be4:	2001      	movs	r0, #1
 8004be6:	fa00 f202 	lsl.w	r2, r0, r2
 8004bea:	3340      	adds	r3, #64	; 0x40
 8004bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	e000e100 	.word	0xe000e100

08004c00 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	4603      	mov	r3, r0
 8004c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	db0c      	blt.n	8004c2c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c12:	79fb      	ldrb	r3, [r7, #7]
 8004c14:	f003 021f 	and.w	r2, r3, #31
 8004c18:	4907      	ldr	r1, [pc, #28]	; (8004c38 <__NVIC_ClearPendingIRQ+0x38>)
 8004c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c1e:	095b      	lsrs	r3, r3, #5
 8004c20:	2001      	movs	r0, #1
 8004c22:	fa00 f202 	lsl.w	r2, r0, r2
 8004c26:	3360      	adds	r3, #96	; 0x60
 8004c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	e000e100 	.word	0xe000e100

08004c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	4603      	mov	r3, r0
 8004c44:	6039      	str	r1, [r7, #0]
 8004c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	db0a      	blt.n	8004c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	490c      	ldr	r1, [pc, #48]	; (8004c88 <__NVIC_SetPriority+0x4c>)
 8004c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c5a:	0112      	lsls	r2, r2, #4
 8004c5c:	b2d2      	uxtb	r2, r2
 8004c5e:	440b      	add	r3, r1
 8004c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c64:	e00a      	b.n	8004c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	4908      	ldr	r1, [pc, #32]	; (8004c8c <__NVIC_SetPriority+0x50>)
 8004c6c:	79fb      	ldrb	r3, [r7, #7]
 8004c6e:	f003 030f 	and.w	r3, r3, #15
 8004c72:	3b04      	subs	r3, #4
 8004c74:	0112      	lsls	r2, r2, #4
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	440b      	add	r3, r1
 8004c7a:	761a      	strb	r2, [r3, #24]
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	e000e100 	.word	0xe000e100
 8004c8c:	e000ed00 	.word	0xe000ed00

08004c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b089      	sub	sp, #36	; 0x24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	f1c3 0307 	rsb	r3, r3, #7
 8004caa:	2b04      	cmp	r3, #4
 8004cac:	bf28      	it	cs
 8004cae:	2304      	movcs	r3, #4
 8004cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	2b06      	cmp	r3, #6
 8004cb8:	d902      	bls.n	8004cc0 <NVIC_EncodePriority+0x30>
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	3b03      	subs	r3, #3
 8004cbe:	e000      	b.n	8004cc2 <NVIC_EncodePriority+0x32>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	fa02 f303 	lsl.w	r3, r2, r3
 8004cce:	43da      	mvns	r2, r3
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	401a      	ands	r2, r3
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce2:	43d9      	mvns	r1, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ce8:	4313      	orrs	r3, r2
         );
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3724      	adds	r7, #36	; 0x24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
	...

08004cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3b01      	subs	r3, #1
 8004d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d08:	d301      	bcc.n	8004d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e00f      	b.n	8004d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d0e:	4a0a      	ldr	r2, [pc, #40]	; (8004d38 <SysTick_Config+0x40>)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d16:	210f      	movs	r1, #15
 8004d18:	f04f 30ff 	mov.w	r0, #4294967295
 8004d1c:	f7ff ff8e 	bl	8004c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d20:	4b05      	ldr	r3, [pc, #20]	; (8004d38 <SysTick_Config+0x40>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d26:	4b04      	ldr	r3, [pc, #16]	; (8004d38 <SysTick_Config+0x40>)
 8004d28:	2207      	movs	r2, #7
 8004d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	e000e010 	.word	0xe000e010

08004d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f7ff fec9 	bl	8004adc <__NVIC_SetPriorityGrouping>
}
 8004d4a:	bf00      	nop
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b086      	sub	sp, #24
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	4603      	mov	r3, r0
 8004d5a:	60b9      	str	r1, [r7, #8]
 8004d5c:	607a      	str	r2, [r7, #4]
 8004d5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d60:	f7ff fee0 	bl	8004b24 <__NVIC_GetPriorityGrouping>
 8004d64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	68b9      	ldr	r1, [r7, #8]
 8004d6a:	6978      	ldr	r0, [r7, #20]
 8004d6c:	f7ff ff90 	bl	8004c90 <NVIC_EncodePriority>
 8004d70:	4602      	mov	r2, r0
 8004d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d76:	4611      	mov	r1, r2
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff ff5f 	bl	8004c3c <__NVIC_SetPriority>
}
 8004d7e:	bf00      	nop
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b082      	sub	sp, #8
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff fed3 	bl	8004b40 <__NVIC_EnableIRQ>
}
 8004d9a:	bf00      	nop
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b082      	sub	sp, #8
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	4603      	mov	r3, r0
 8004daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff fee3 	bl	8004b7c <__NVIC_DisableIRQ>
}
 8004db6:	bf00      	nop
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b082      	sub	sp, #8
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7ff ff96 	bl	8004cf8 <SysTick_Config>
 8004dcc:	4603      	mov	r3, r0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b082      	sub	sp, #8
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	4603      	mov	r3, r0
 8004dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff feed 	bl	8004bc4 <__NVIC_SetPendingIRQ>
}
 8004dea:	bf00      	nop
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b082      	sub	sp, #8
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	4603      	mov	r3, r0
 8004dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7ff fefd 	bl	8004c00 <__NVIC_ClearPendingIRQ>
}
 8004e06:	bf00      	nop
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
	...

08004e10 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e1e:	e14c      	b.n	80050ba <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	2101      	movs	r1, #1
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 813e 	beq.w	80050b4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f003 0303 	and.w	r3, r3, #3
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d005      	beq.n	8004e50 <HAL_GPIO_Init+0x40>
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f003 0303 	and.w	r3, r3, #3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d130      	bne.n	8004eb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	2203      	movs	r2, #3
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	43db      	mvns	r3, r3
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	4013      	ands	r3, r2
 8004e66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	68da      	ldr	r2, [r3, #12]
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e86:	2201      	movs	r2, #1
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8e:	43db      	mvns	r3, r3
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	4013      	ands	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	091b      	lsrs	r3, r3, #4
 8004e9c:	f003 0201 	and.w	r2, r3, #1
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	2b03      	cmp	r3, #3
 8004ebc:	d017      	beq.n	8004eee <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	2203      	movs	r2, #3
 8004eca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d123      	bne.n	8004f42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	08da      	lsrs	r2, r3, #3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	3208      	adds	r2, #8
 8004f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f003 0307 	and.w	r3, r3, #7
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	220f      	movs	r2, #15
 8004f12:	fa02 f303 	lsl.w	r3, r2, r3
 8004f16:	43db      	mvns	r3, r3
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	691a      	ldr	r2, [r3, #16]
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	08da      	lsrs	r2, r3, #3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3208      	adds	r2, #8
 8004f3c:	6939      	ldr	r1, [r7, #16]
 8004f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	2203      	movs	r2, #3
 8004f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f52:	43db      	mvns	r3, r3
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	4013      	ands	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f003 0203 	and.w	r2, r3, #3
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 8098 	beq.w	80050b4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004f84:	4a54      	ldr	r2, [pc, #336]	; (80050d8 <HAL_GPIO_Init+0x2c8>)
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	089b      	lsrs	r3, r3, #2
 8004f8a:	3302      	adds	r3, #2
 8004f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f003 0303 	and.w	r3, r3, #3
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	220f      	movs	r2, #15
 8004f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa0:	43db      	mvns	r3, r3
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004fae:	d019      	beq.n	8004fe4 <HAL_GPIO_Init+0x1d4>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a4a      	ldr	r2, [pc, #296]	; (80050dc <HAL_GPIO_Init+0x2cc>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d013      	beq.n	8004fe0 <HAL_GPIO_Init+0x1d0>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a49      	ldr	r2, [pc, #292]	; (80050e0 <HAL_GPIO_Init+0x2d0>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00d      	beq.n	8004fdc <HAL_GPIO_Init+0x1cc>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a48      	ldr	r2, [pc, #288]	; (80050e4 <HAL_GPIO_Init+0x2d4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d007      	beq.n	8004fd8 <HAL_GPIO_Init+0x1c8>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a47      	ldr	r2, [pc, #284]	; (80050e8 <HAL_GPIO_Init+0x2d8>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d101      	bne.n	8004fd4 <HAL_GPIO_Init+0x1c4>
 8004fd0:	2304      	movs	r3, #4
 8004fd2:	e008      	b.n	8004fe6 <HAL_GPIO_Init+0x1d6>
 8004fd4:	2307      	movs	r3, #7
 8004fd6:	e006      	b.n	8004fe6 <HAL_GPIO_Init+0x1d6>
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e004      	b.n	8004fe6 <HAL_GPIO_Init+0x1d6>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e002      	b.n	8004fe6 <HAL_GPIO_Init+0x1d6>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e000      	b.n	8004fe6 <HAL_GPIO_Init+0x1d6>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	f002 0203 	and.w	r2, r2, #3
 8004fec:	0092      	lsls	r2, r2, #2
 8004fee:	4093      	lsls	r3, r2
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ff6:	4938      	ldr	r1, [pc, #224]	; (80050d8 <HAL_GPIO_Init+0x2c8>)
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	089b      	lsrs	r3, r3, #2
 8004ffc:	3302      	adds	r3, #2
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005004:	4b39      	ldr	r3, [pc, #228]	; (80050ec <HAL_GPIO_Init+0x2dc>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	43db      	mvns	r3, r3
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	4013      	ands	r3, r2
 8005012:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4313      	orrs	r3, r2
 8005026:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005028:	4a30      	ldr	r2, [pc, #192]	; (80050ec <HAL_GPIO_Init+0x2dc>)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800502e:	4b2f      	ldr	r3, [pc, #188]	; (80050ec <HAL_GPIO_Init+0x2dc>)
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	43db      	mvns	r3, r3
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4013      	ands	r3, r2
 800503c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d003      	beq.n	8005052 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4313      	orrs	r3, r2
 8005050:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005052:	4a26      	ldr	r2, [pc, #152]	; (80050ec <HAL_GPIO_Init+0x2dc>)
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005058:	4b24      	ldr	r3, [pc, #144]	; (80050ec <HAL_GPIO_Init+0x2dc>)
 800505a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800505e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	43db      	mvns	r3, r3
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	4013      	ands	r3, r2
 8005068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4313      	orrs	r3, r2
 800507c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800507e:	4a1b      	ldr	r2, [pc, #108]	; (80050ec <HAL_GPIO_Init+0x2dc>)
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8005086:	4b19      	ldr	r3, [pc, #100]	; (80050ec <HAL_GPIO_Init+0x2dc>)
 8005088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800508c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	43db      	mvns	r3, r3
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4013      	ands	r3, r2
 8005096:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d003      	beq.n	80050ac <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80050ac:	4a0f      	ldr	r2, [pc, #60]	; (80050ec <HAL_GPIO_Init+0x2dc>)
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	3301      	adds	r3, #1
 80050b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	fa22 f303 	lsr.w	r3, r2, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f47f aeab 	bne.w	8004e20 <HAL_GPIO_Init+0x10>
  }
}
 80050ca:	bf00      	nop
 80050cc:	bf00      	nop
 80050ce:	371c      	adds	r7, #28
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	40010000 	.word	0x40010000
 80050dc:	48000400 	.word	0x48000400
 80050e0:	48000800 	.word	0x48000800
 80050e4:	48000c00 	.word	0x48000c00
 80050e8:	48001000 	.word	0x48001000
 80050ec:	58000800 	.word	0x58000800

080050f0 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	460b      	mov	r3, r1
 80050fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691a      	ldr	r2, [r3, #16]
 8005100:	887b      	ldrh	r3, [r7, #2]
 8005102:	4013      	ands	r3, r2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d002      	beq.n	800510e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005108:	2301      	movs	r3, #1
 800510a:	73fb      	strb	r3, [r7, #15]
 800510c:	e001      	b.n	8005112 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800510e:	2300      	movs	r3, #0
 8005110:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005112:	7bfb      	ldrb	r3, [r7, #15]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	460b      	mov	r3, r1
 800512a:	807b      	strh	r3, [r7, #2]
 800512c:	4613      	mov	r3, r2
 800512e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005130:	787b      	ldrb	r3, [r7, #1]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005136:	887a      	ldrh	r2, [r7, #2]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800513c:	e002      	b.n	8005144 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800513e:	887a      	ldrh	r2, [r7, #2]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	460b      	mov	r3, r1
 800515a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005162:	887a      	ldrh	r2, [r7, #2]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4013      	ands	r3, r2
 8005168:	041a      	lsls	r2, r3, #16
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	43d9      	mvns	r1, r3
 800516e:	887b      	ldrh	r3, [r7, #2]
 8005170:	400b      	ands	r3, r1
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	619a      	str	r2, [r3, #24]
}
 8005178:	bf00      	nop
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800518a:	4b0a      	ldr	r3, [pc, #40]	; (80051b4 <HAL_HSEM_IRQHandler+0x30>)
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005190:	4b08      	ldr	r3, [pc, #32]	; (80051b4 <HAL_HSEM_IRQHandler+0x30>)
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	43db      	mvns	r3, r3
 8005198:	4906      	ldr	r1, [pc, #24]	; (80051b4 <HAL_HSEM_IRQHandler+0x30>)
 800519a:	4013      	ands	r3, r2
 800519c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800519e:	4a05      	ldr	r2, [pc, #20]	; (80051b4 <HAL_HSEM_IRQHandler+0x30>)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f807 	bl	80051b8 <HAL_HSEM_FreeCallback>
}
 80051aa:	bf00      	nop
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	58001500 	.word	0x58001500

080051b8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e081      	b.n	80052e2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d106      	bne.n	80051f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f7fd ff88 	bl	8003108 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2224      	movs	r2, #36	; 0x24
 80051fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0201 	bic.w	r2, r2, #1
 800520e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800521c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800522c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d107      	bne.n	8005246 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005242:	609a      	str	r2, [r3, #8]
 8005244:	e006      	b.n	8005254 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689a      	ldr	r2, [r3, #8]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005252:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	2b02      	cmp	r3, #2
 800525a:	d104      	bne.n	8005266 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005264:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6812      	ldr	r2, [r2, #0]
 8005270:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005278:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005288:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691a      	ldr	r2, [r3, #16]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	69d9      	ldr	r1, [r3, #28]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a1a      	ldr	r2, [r3, #32]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0201 	orr.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af02      	add	r7, sp, #8
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	4608      	mov	r0, r1
 80052f6:	4611      	mov	r1, r2
 80052f8:	461a      	mov	r2, r3
 80052fa:	4603      	mov	r3, r0
 80052fc:	817b      	strh	r3, [r7, #10]
 80052fe:	460b      	mov	r3, r1
 8005300:	813b      	strh	r3, [r7, #8]
 8005302:	4613      	mov	r3, r2
 8005304:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b20      	cmp	r3, #32
 8005310:	f040 80f9 	bne.w	8005506 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d002      	beq.n	8005320 <HAL_I2C_Mem_Write+0x34>
 800531a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800531c:	2b00      	cmp	r3, #0
 800531e:	d105      	bne.n	800532c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005326:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e0ed      	b.n	8005508 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005332:	2b01      	cmp	r3, #1
 8005334:	d101      	bne.n	800533a <HAL_I2C_Mem_Write+0x4e>
 8005336:	2302      	movs	r3, #2
 8005338:	e0e6      	b.n	8005508 <HAL_I2C_Mem_Write+0x21c>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005342:	f7fe f9c7 	bl	80036d4 <HAL_GetTick>
 8005346:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	2319      	movs	r3, #25
 800534e:	2201      	movs	r2, #1
 8005350:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 f955 	bl	8005604 <I2C_WaitOnFlagUntilTimeout>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e0d1      	b.n	8005508 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2221      	movs	r2, #33	; 0x21
 8005368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2240      	movs	r2, #64	; 0x40
 8005370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6a3a      	ldr	r2, [r7, #32]
 800537e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005384:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800538c:	88f8      	ldrh	r0, [r7, #6]
 800538e:	893a      	ldrh	r2, [r7, #8]
 8005390:	8979      	ldrh	r1, [r7, #10]
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	9301      	str	r3, [sp, #4]
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	4603      	mov	r3, r0
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 f8b9 	bl	8005514 <I2C_RequestMemoryWrite>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d005      	beq.n	80053b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e0a9      	b.n	8005508 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2bff      	cmp	r3, #255	; 0xff
 80053bc:	d90e      	bls.n	80053dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	22ff      	movs	r2, #255	; 0xff
 80053c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	8979      	ldrh	r1, [r7, #10]
 80053cc:	2300      	movs	r3, #0
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 fa81 	bl	80058dc <I2C_TransferConfig>
 80053da:	e00f      	b.n	80053fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ea:	b2da      	uxtb	r2, r3
 80053ec:	8979      	ldrh	r1, [r7, #10]
 80053ee:	2300      	movs	r3, #0
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f000 fa70 	bl	80058dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 f93f 	bl	8005684 <I2C_WaitOnTXISFlagUntilTimeout>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e07b      	b.n	8005508 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	781a      	ldrb	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800542a:	b29b      	uxth	r3, r3
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005438:	3b01      	subs	r3, #1
 800543a:	b29a      	uxth	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005444:	b29b      	uxth	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d034      	beq.n	80054b4 <HAL_I2C_Mem_Write+0x1c8>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800544e:	2b00      	cmp	r3, #0
 8005450:	d130      	bne.n	80054b4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005458:	2200      	movs	r2, #0
 800545a:	2180      	movs	r1, #128	; 0x80
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 f8d1 	bl	8005604 <I2C_WaitOnFlagUntilTimeout>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e04d      	b.n	8005508 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005470:	b29b      	uxth	r3, r3
 8005472:	2bff      	cmp	r3, #255	; 0xff
 8005474:	d90e      	bls.n	8005494 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	22ff      	movs	r2, #255	; 0xff
 800547a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005480:	b2da      	uxtb	r2, r3
 8005482:	8979      	ldrh	r1, [r7, #10]
 8005484:	2300      	movs	r3, #0
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 fa25 	bl	80058dc <I2C_TransferConfig>
 8005492:	e00f      	b.n	80054b4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005498:	b29a      	uxth	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	8979      	ldrh	r1, [r7, #10]
 80054a6:	2300      	movs	r3, #0
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 fa14 	bl	80058dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d19e      	bne.n	80053fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f000 f91e 	bl	8005704 <I2C_WaitOnSTOPFlagUntilTimeout>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e01a      	b.n	8005508 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2220      	movs	r2, #32
 80054d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6859      	ldr	r1, [r3, #4]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	4b0a      	ldr	r3, [pc, #40]	; (8005510 <HAL_I2C_Mem_Write+0x224>)
 80054e6:	400b      	ands	r3, r1
 80054e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	e000      	b.n	8005508 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005506:	2302      	movs	r3, #2
  }
}
 8005508:	4618      	mov	r0, r3
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	fe00e800 	.word	0xfe00e800

08005514 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af02      	add	r7, sp, #8
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	4608      	mov	r0, r1
 800551e:	4611      	mov	r1, r2
 8005520:	461a      	mov	r2, r3
 8005522:	4603      	mov	r3, r0
 8005524:	817b      	strh	r3, [r7, #10]
 8005526:	460b      	mov	r3, r1
 8005528:	813b      	strh	r3, [r7, #8]
 800552a:	4613      	mov	r3, r2
 800552c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800552e:	88fb      	ldrh	r3, [r7, #6]
 8005530:	b2da      	uxtb	r2, r3
 8005532:	8979      	ldrh	r1, [r7, #10]
 8005534:	4b20      	ldr	r3, [pc, #128]	; (80055b8 <I2C_RequestMemoryWrite+0xa4>)
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 f9cd 	bl	80058dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005542:	69fa      	ldr	r2, [r7, #28]
 8005544:	69b9      	ldr	r1, [r7, #24]
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 f89c 	bl	8005684 <I2C_WaitOnTXISFlagUntilTimeout>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e02c      	b.n	80055b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005556:	88fb      	ldrh	r3, [r7, #6]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d105      	bne.n	8005568 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800555c:	893b      	ldrh	r3, [r7, #8]
 800555e:	b2da      	uxtb	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	629a      	str	r2, [r3, #40]	; 0x28
 8005566:	e015      	b.n	8005594 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005568:	893b      	ldrh	r3, [r7, #8]
 800556a:	0a1b      	lsrs	r3, r3, #8
 800556c:	b29b      	uxth	r3, r3
 800556e:	b2da      	uxtb	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005576:	69fa      	ldr	r2, [r7, #28]
 8005578:	69b9      	ldr	r1, [r7, #24]
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 f882 	bl	8005684 <I2C_WaitOnTXISFlagUntilTimeout>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e012      	b.n	80055b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800558a:	893b      	ldrh	r3, [r7, #8]
 800558c:	b2da      	uxtb	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	2200      	movs	r2, #0
 800559c:	2180      	movs	r1, #128	; 0x80
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 f830 	bl	8005604 <I2C_WaitOnFlagUntilTimeout>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e000      	b.n	80055b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	80002000 	.word	0x80002000

080055bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d103      	bne.n	80055da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2200      	movs	r2, #0
 80055d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d007      	beq.n	80055f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699a      	ldr	r2, [r3, #24]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f042 0201 	orr.w	r2, r2, #1
 80055f6:	619a      	str	r2, [r3, #24]
  }
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	4613      	mov	r3, r2
 8005612:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005614:	e022      	b.n	800565c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561c:	d01e      	beq.n	800565c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800561e:	f7fe f859 	bl	80036d4 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	429a      	cmp	r2, r3
 800562c:	d302      	bcc.n	8005634 <I2C_WaitOnFlagUntilTimeout+0x30>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d113      	bne.n	800565c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005638:	f043 0220 	orr.w	r2, r3, #32
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2220      	movs	r2, #32
 8005644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e00f      	b.n	800567c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699a      	ldr	r2, [r3, #24]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	4013      	ands	r3, r2
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	429a      	cmp	r2, r3
 800566a:	bf0c      	ite	eq
 800566c:	2301      	moveq	r3, #1
 800566e:	2300      	movne	r3, #0
 8005670:	b2db      	uxtb	r3, r3
 8005672:	461a      	mov	r2, r3
 8005674:	79fb      	ldrb	r3, [r7, #7]
 8005676:	429a      	cmp	r2, r3
 8005678:	d0cd      	beq.n	8005616 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005690:	e02c      	b.n	80056ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	68b9      	ldr	r1, [r7, #8]
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 f870 	bl	800577c <I2C_IsErrorOccurred>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e02a      	b.n	80056fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ac:	d01e      	beq.n	80056ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ae:	f7fe f811 	bl	80036d4 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d302      	bcc.n	80056c4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d113      	bne.n	80056ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c8:	f043 0220 	orr.w	r2, r3, #32
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e007      	b.n	80056fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d1cb      	bne.n	8005692 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005710:	e028      	b.n	8005764 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	68b9      	ldr	r1, [r7, #8]
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f000 f830 	bl	800577c <I2C_IsErrorOccurred>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e026      	b.n	8005774 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005726:	f7fd ffd5 	bl	80036d4 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	429a      	cmp	r2, r3
 8005734:	d302      	bcc.n	800573c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d113      	bne.n	8005764 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005740:	f043 0220 	orr.w	r2, r3, #32
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2220      	movs	r2, #32
 800574c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e007      	b.n	8005774 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	f003 0320 	and.w	r3, r3, #32
 800576e:	2b20      	cmp	r3, #32
 8005770:	d1cf      	bne.n	8005712 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b088      	sub	sp, #32
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005788:	2300      	movs	r3, #0
 800578a:	77fb      	strb	r3, [r7, #31]
  uint32_t itflag   = hi2c->Instance->ISR;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	617b      	str	r3, [r7, #20]
  uint32_t error_code = 0;
 8005794:	2300      	movs	r3, #0
 8005796:	61bb      	str	r3, [r7, #24]

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f003 0310 	and.w	r3, r3, #16
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d040      	beq.n	8005824 <I2C_IsErrorOccurred+0xa8>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057b0:	d01d      	beq.n	80057ee <I2C_IsErrorOccurred+0x72>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057c0:	605a      	str	r2, [r3, #4]
    }

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80057c2:	e014      	b.n	80057ee <I2C_IsErrorOccurred+0x72>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ca:	d010      	beq.n	80057ee <I2C_IsErrorOccurred+0x72>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057cc:	f7fd ff82 	bl	80036d4 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d302      	bcc.n	80057e2 <I2C_IsErrorOccurred+0x66>
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d105      	bne.n	80057ee <I2C_IsErrorOccurred+0x72>
        {
          error_code |= HAL_I2C_ERROR_TIMEOUT;
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	f043 0320 	orr.w	r3, r3, #32
 80057e8:	61bb      	str	r3, [r7, #24]

          status = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	77fb      	strb	r3, [r7, #31]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	f003 0320 	and.w	r3, r3, #32
 80057f8:	2b20      	cmp	r3, #32
 80057fa:	d002      	beq.n	8005802 <I2C_IsErrorOccurred+0x86>
 80057fc:	7ffb      	ldrb	r3, [r7, #31]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d0e0      	beq.n	80057c4 <I2C_IsErrorOccurred+0x48>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005802:	7ffb      	ldrb	r3, [r7, #31]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d103      	bne.n	8005810 <I2C_IsErrorOccurred+0x94>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2220      	movs	r2, #32
 800580e:	61da      	str	r2, [r3, #28]
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2210      	movs	r2, #16
 8005816:	61da      	str	r2, [r3, #28]

    error_code |= HAL_I2C_ERROR_AF;
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	f043 0304 	orr.w	r3, r3, #4
 800581e:	61bb      	str	r3, [r7, #24]

    status = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	77fb      	strb	r3, [r7, #31]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	617b      	str	r3, [r7, #20]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <I2C_IsErrorOccurred+0xd0>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	f043 0301 	orr.w	r3, r3, #1
 800583c:	61bb      	str	r3, [r7, #24]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005846:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <I2C_IsErrorOccurred+0xf0>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	f043 0308 	orr.w	r3, r3, #8
 800585c:	61bb      	str	r3, [r7, #24]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005866:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00a      	beq.n	800588c <I2C_IsErrorOccurred+0x110>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	f043 0302 	orr.w	r3, r3, #2
 800587c:	61bb      	str	r3, [r7, #24]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005886:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	77fb      	strb	r3, [r7, #31]
  }

  if (status != HAL_OK)
 800588c:	7ffb      	ldrb	r3, [r7, #31]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d01c      	beq.n	80058cc <I2C_IsErrorOccurred+0x150>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f7ff fe92 	bl	80055bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6859      	ldr	r1, [r3, #4]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	4b0d      	ldr	r3, [pc, #52]	; (80058d8 <I2C_IsErrorOccurred+0x15c>)
 80058a4:	400b      	ands	r3, r1
 80058a6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	431a      	orrs	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80058cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3720      	adds	r7, #32
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	fe00e800 	.word	0xfe00e800

080058dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80058dc:	b480      	push	{r7}
 80058de:	b087      	sub	sp, #28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	607b      	str	r3, [r7, #4]
 80058e6:	460b      	mov	r3, r1
 80058e8:	817b      	strh	r3, [r7, #10]
 80058ea:	4613      	mov	r3, r2
 80058ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058ee:	897b      	ldrh	r3, [r7, #10]
 80058f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80058f4:	7a7b      	ldrb	r3, [r7, #9]
 80058f6:	041b      	lsls	r3, r3, #16
 80058f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058fc:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	4313      	orrs	r3, r2
 8005906:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800590a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	0d5b      	lsrs	r3, r3, #21
 8005916:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800591a:	4b08      	ldr	r3, [pc, #32]	; (800593c <I2C_TransferConfig+0x60>)
 800591c:	430b      	orrs	r3, r1
 800591e:	43db      	mvns	r3, r3
 8005920:	ea02 0103 	and.w	r1, r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	430a      	orrs	r2, r1
 800592c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800592e:	bf00      	nop
 8005930:	371c      	adds	r7, #28
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	03ff63ff 	.word	0x03ff63ff

08005940 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b20      	cmp	r3, #32
 8005954:	d138      	bne.n	80059c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800595c:	2b01      	cmp	r3, #1
 800595e:	d101      	bne.n	8005964 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005960:	2302      	movs	r3, #2
 8005962:	e032      	b.n	80059ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2224      	movs	r2, #36	; 0x24
 8005970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0201 	bic.w	r2, r2, #1
 8005982:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005992:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6819      	ldr	r1, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f042 0201 	orr.w	r2, r2, #1
 80059b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2220      	movs	r2, #32
 80059b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80059c4:	2300      	movs	r3, #0
 80059c6:	e000      	b.n	80059ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80059c8:	2302      	movs	r3, #2
  }
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b085      	sub	sp, #20
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
 80059de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b20      	cmp	r3, #32
 80059ea:	d139      	bne.n	8005a60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d101      	bne.n	80059fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80059f6:	2302      	movs	r3, #2
 80059f8:	e033      	b.n	8005a62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2224      	movs	r2, #36	; 0x24
 8005a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 0201 	bic.w	r2, r2, #1
 8005a18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005a28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	021b      	lsls	r3, r3, #8
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0201 	orr.w	r2, r2, #1
 8005a4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	e000      	b.n	8005a62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a60:	2302      	movs	r3, #2
  }
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
	...

08005a70 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d01e      	beq.n	8005ac0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005a82:	4b13      	ldr	r3, [pc, #76]	; (8005ad0 <HAL_IPCC_Init+0x60>)
 8005a84:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d102      	bne.n	8005a98 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7fd fb80 	bl	8003198 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8005a98:	68b8      	ldr	r0, [r7, #8]
 8005a9a:	f000 f85b 	bl	8005b54 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f82c 	bl	8005b08 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005abe:	e001      	b.n	8005ac4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	58000c00 	.word	0x58000c00

08005ad4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8005ae2:	bf00      	nop
 8005ae4:	3714      	adds	r7, #20
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b085      	sub	sp, #20
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	60f8      	str	r0, [r7, #12]
 8005af6:	60b9      	str	r1, [r7, #8]
 8005af8:	4613      	mov	r3, r2
 8005afa:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005b10:	2300      	movs	r3, #0
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	e00f      	b.n	8005b36 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	4a0b      	ldr	r2, [pc, #44]	; (8005b4c <IPCC_SetDefaultCallbacks+0x44>)
 8005b20:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	3306      	adds	r3, #6
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	4a08      	ldr	r2, [pc, #32]	; (8005b50 <IPCC_SetDefaultCallbacks+0x48>)
 8005b2e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	3301      	adds	r3, #1
 8005b34:	60fb      	str	r3, [r7, #12]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2b05      	cmp	r3, #5
 8005b3a:	d9ec      	bls.n	8005b16 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005b3c:	bf00      	nop
 8005b3e:	bf00      	nop
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	08005ad5 	.word	0x08005ad5
 8005b50:	08005aef 	.word	0x08005aef

08005b54 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8005b68:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	223f      	movs	r2, #63	; 0x3f
 8005b6e:	609a      	str	r2, [r3, #8]
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b80:	4b05      	ldr	r3, [pc, #20]	; (8005b98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a04      	ldr	r2, [pc, #16]	; (8005b98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b8a:	6013      	str	r3, [r2, #0]
}
 8005b8c:	bf00      	nop
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	58000400 	.word	0x58000400

08005b9c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005ba0:	4b04      	ldr	r3, [pc, #16]	; (8005bb4 <HAL_PWREx_GetVoltageRange+0x18>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	58000400 	.word	0x58000400

08005bb8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005bb8:	b480      	push	{r7}
 8005bba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bca:	d101      	bne.n	8005bd0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e000      	b.n	8005bd2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <LL_RCC_HSE_Enable>:
{
 8005bdc:	b480      	push	{r7}
 8005bde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bee:	6013      	str	r3, [r2, #0]
}
 8005bf0:	bf00      	nop
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <LL_RCC_HSE_Disable>:
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c0c:	6013      	str	r3, [r2, #0]
}
 8005c0e:	bf00      	nop
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <LL_RCC_HSE_IsReady>:
{
 8005c18:	b480      	push	{r7}
 8005c1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c2a:	d101      	bne.n	8005c30 <LL_RCC_HSE_IsReady+0x18>
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e000      	b.n	8005c32 <LL_RCC_HSE_IsReady+0x1a>
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <LL_RCC_HSI_Enable>:
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c4e:	6013      	str	r3, [r2, #0]
}
 8005c50:	bf00      	nop
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <LL_RCC_HSI_Disable>:
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c6c:	6013      	str	r3, [r2, #0]
}
 8005c6e:	bf00      	nop
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <LL_RCC_HSI_IsReady>:
{
 8005c78:	b480      	push	{r7}
 8005c7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c8a:	d101      	bne.n	8005c90 <LL_RCC_HSI_IsReady+0x18>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e000      	b.n	8005c92 <LL_RCC_HSI_IsReady+0x1a>
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <LL_RCC_HSI_SetCalibTrimming>:
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	061b      	lsls	r3, r3, #24
 8005cb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	604b      	str	r3, [r1, #4]
}
 8005cba:	bf00      	nop
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <LL_RCC_HSI48_Enable>:
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cd6:	f043 0301 	orr.w	r3, r3, #1
 8005cda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005cde:	bf00      	nop
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <LL_RCC_HSI48_Disable>:
{
 8005ce8:	b480      	push	{r7}
 8005cea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cf8:	f023 0301 	bic.w	r3, r3, #1
 8005cfc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005d00:	bf00      	nop
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <LL_RCC_HSI48_IsReady>:
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d101      	bne.n	8005d22 <LL_RCC_HSI48_IsReady+0x18>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e000      	b.n	8005d24 <LL_RCC_HSI48_IsReady+0x1a>
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <LL_RCC_LSE_Enable>:
{
 8005d2e:	b480      	push	{r7}
 8005d30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d3e:	f043 0301 	orr.w	r3, r3, #1
 8005d42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005d46:	bf00      	nop
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <LL_RCC_LSE_Disable>:
{
 8005d50:	b480      	push	{r7}
 8005d52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d60:	f023 0301 	bic.w	r3, r3, #1
 8005d64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005d68:	bf00      	nop
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <LL_RCC_LSE_EnableBypass>:
{
 8005d72:	b480      	push	{r7}
 8005d74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d82:	f043 0304 	orr.w	r3, r3, #4
 8005d86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005d8a:	bf00      	nop
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <LL_RCC_LSE_DisableBypass>:
{
 8005d94:	b480      	push	{r7}
 8005d96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005da4:	f023 0304 	bic.w	r3, r3, #4
 8005da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005dac:	bf00      	nop
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <LL_RCC_LSE_IsReady>:
{
 8005db6:	b480      	push	{r7}
 8005db8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d101      	bne.n	8005dce <LL_RCC_LSE_IsReady+0x18>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e000      	b.n	8005dd0 <LL_RCC_LSE_IsReady+0x1a>
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <LL_RCC_LSI1_Enable>:
{
 8005dda:	b480      	push	{r7}
 8005ddc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005de6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dea:	f043 0301 	orr.w	r3, r3, #1
 8005dee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005df2:	bf00      	nop
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <LL_RCC_LSI1_Disable>:
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e0c:	f023 0301 	bic.w	r3, r3, #1
 8005e10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005e14:	bf00      	nop
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <LL_RCC_LSI1_IsReady>:
{
 8005e1e:	b480      	push	{r7}
 8005e20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d101      	bne.n	8005e36 <LL_RCC_LSI1_IsReady+0x18>
 8005e32:	2301      	movs	r3, #1
 8005e34:	e000      	b.n	8005e38 <LL_RCC_LSI1_IsReady+0x1a>
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr

08005e42 <LL_RCC_LSI2_Enable>:
{
 8005e42:	b480      	push	{r7}
 8005e44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e52:	f043 0304 	orr.w	r3, r3, #4
 8005e56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005e5a:	bf00      	nop
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <LL_RCC_LSI2_Disable>:
{
 8005e64:	b480      	push	{r7}
 8005e66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e74:	f023 0304 	bic.w	r3, r3, #4
 8005e78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005e7c:	bf00      	nop
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <LL_RCC_LSI2_IsReady>:
{
 8005e86:	b480      	push	{r7}
 8005e88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e92:	f003 0308 	and.w	r3, r3, #8
 8005e96:	2b08      	cmp	r3, #8
 8005e98:	d101      	bne.n	8005e9e <LL_RCC_LSI2_IsReady+0x18>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e000      	b.n	8005ea0 <LL_RCC_LSI2_IsReady+0x1a>
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <LL_RCC_LSI2_SetTrimming>:
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b083      	sub	sp, #12
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	021b      	lsls	r3, r3, #8
 8005ec2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <LL_RCC_MSI_Enable>:
{
 8005ed8:	b480      	push	{r7}
 8005eda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ee6:	f043 0301 	orr.w	r3, r3, #1
 8005eea:	6013      	str	r3, [r2, #0]
}
 8005eec:	bf00      	nop
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <LL_RCC_MSI_Disable>:
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f04:	f023 0301 	bic.w	r3, r3, #1
 8005f08:	6013      	str	r3, [r2, #0]
}
 8005f0a:	bf00      	nop
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <LL_RCC_MSI_IsReady>:
{
 8005f14:	b480      	push	{r7}
 8005f16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d101      	bne.n	8005f2a <LL_RCC_MSI_IsReady+0x16>
 8005f26:	2301      	movs	r3, #1
 8005f28:	e000      	b.n	8005f2c <LL_RCC_MSI_IsReady+0x18>
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <LL_RCC_MSI_SetRange>:
{
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	600b      	str	r3, [r1, #0]
}
 8005f52:	bf00      	nop
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <LL_RCC_MSI_GetRange>:
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b083      	sub	sp, #12
 8005f62:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f6e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2bb0      	cmp	r3, #176	; 0xb0
 8005f74:	d901      	bls.n	8005f7a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005f76:	23b0      	movs	r3, #176	; 0xb0
 8005f78:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005f7a:	687b      	ldr	r3, [r7, #4]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	021b      	lsls	r3, r3, #8
 8005f9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	604b      	str	r3, [r1, #4]
}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <LL_RCC_SetSysClkSource>:
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f023 0203 	bic.w	r2, r3, #3
 8005fc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	608b      	str	r3, [r1, #8]
}
 8005fce:	bf00      	nop
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <LL_RCC_GetSysClkSource>:
{
 8005fda:	b480      	push	{r7}
 8005fdc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f003 030c 	and.w	r3, r3, #12
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <LL_RCC_SetAHBPrescaler>:
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b083      	sub	sp, #12
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006004:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4313      	orrs	r3, r2
 800600c:	608b      	str	r3, [r1, #8]
}
 800600e:	bf00      	nop
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <LL_C2_RCC_SetAHBPrescaler>:
{
 800601a:	b480      	push	{r7}
 800601c:	b083      	sub	sp, #12
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006026:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800602a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800602e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4313      	orrs	r3, r2
 8006036:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800603a:	bf00      	nop
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <LL_RCC_SetAHB4Prescaler>:
{
 8006046:	b480      	push	{r7}
 8006048:	b083      	sub	sp, #12
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800604e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006052:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006056:	f023 020f 	bic.w	r2, r3, #15
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	091b      	lsrs	r3, r3, #4
 800605e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006062:	4313      	orrs	r3, r2
 8006064:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <LL_RCC_SetAPB1Prescaler>:
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800607c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006086:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4313      	orrs	r3, r2
 800608e:	608b      	str	r3, [r1, #8]
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <LL_RCC_SetAPB2Prescaler>:
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80060a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80060ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	608b      	str	r3, [r1, #8]
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <LL_RCC_GetAHBPrescaler>:
{
 80060c4:	b480      	push	{r7}
 80060c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80060c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <LL_RCC_GetAHB4Prescaler>:
{
 80060dc:	b480      	push	{r7}
 80060de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80060e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80060e8:	011b      	lsls	r3, r3, #4
 80060ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <LL_RCC_GetAPB1Prescaler>:
{
 80060f8:	b480      	push	{r7}
 80060fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80060fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006106:	4618      	mov	r0, r3
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <LL_RCC_GetAPB2Prescaler>:
{
 8006110:	b480      	push	{r7}
 8006112:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800611e:	4618      	mov	r0, r3
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <LL_RCC_PLL_Enable>:
{
 8006128:	b480      	push	{r7}
 800612a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800612c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006136:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800613a:	6013      	str	r3, [r2, #0]
}
 800613c:	bf00      	nop
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <LL_RCC_PLL_Disable>:
{
 8006146:	b480      	push	{r7}
 8006148:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800614a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006154:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006158:	6013      	str	r3, [r2, #0]
}
 800615a:	bf00      	nop
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <LL_RCC_PLL_IsReady>:
{
 8006164:	b480      	push	{r7}
 8006166:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006172:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006176:	d101      	bne.n	800617c <LL_RCC_PLL_IsReady+0x18>
 8006178:	2301      	movs	r3, #1
 800617a:	e000      	b.n	800617e <LL_RCC_PLL_IsReady+0x1a>
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <LL_RCC_PLL_GetN>:
{
 8006188:	b480      	push	{r7}
 800618a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800618c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	0a1b      	lsrs	r3, r3, #8
 8006194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006198:	4618      	mov	r0, r3
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <LL_RCC_PLL_GetR>:
{
 80061a2:	b480      	push	{r7}
 80061a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80061a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <LL_RCC_PLL_GetDivider>:
{
 80061ba:	b480      	push	{r7}
 80061bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80061be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <LL_RCC_PLL_GetMainSource>:
{
 80061d2:	b480      	push	{r7}
 80061d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80061d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f003 0303 	and.w	r3, r3, #3
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <LL_RCC_IsActiveFlag_HPRE>:
{
 80061ea:	b480      	push	{r7}
 80061ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80061ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061fc:	d101      	bne.n	8006202 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80061fe:	2301      	movs	r3, #1
 8006200:	e000      	b.n	8006204 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800620e:	b480      	push	{r7}
 8006210:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006216:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800621a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800621e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006222:	d101      	bne.n	8006228 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006224:	2301      	movs	r3, #1
 8006226:	e000      	b.n	800622a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8006234:	b480      	push	{r7}
 8006236:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800623c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006248:	d101      	bne.n	800624e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800624a:	2301      	movs	r3, #1
 800624c:	e000      	b.n	8006250 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <LL_RCC_IsActiveFlag_PPRE1>:
{
 800625a:	b480      	push	{r7}
 800625c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800625e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006268:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800626c:	d101      	bne.n	8006272 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800626e:	2301      	movs	r3, #1
 8006270:	e000      	b.n	8006274 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <LL_RCC_IsActiveFlag_PPRE2>:
{
 800627e:	b480      	push	{r7}
 8006280:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800628c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006290:	d101      	bne.n	8006296 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006292:	2301      	movs	r3, #1
 8006294:	e000      	b.n	8006298 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
	...

080062a4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062a4:	b590      	push	{r4, r7, lr}
 80062a6:	b08d      	sub	sp, #52	; 0x34
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e37f      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0320 	and.w	r3, r3, #32
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 8092 	beq.w	80063e8 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062c4:	f7ff fe89 	bl	8005fda <LL_RCC_GetSysClkSource>
 80062c8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062ca:	f7ff ff82 	bl	80061d2 <LL_RCC_PLL_GetMainSource>
 80062ce:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80062d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d005      	beq.n	80062e2 <HAL_RCC_OscConfig+0x3e>
 80062d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d8:	2b0c      	cmp	r3, #12
 80062da:	d14c      	bne.n	8006376 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80062dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d149      	bne.n	8006376 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80062e2:	f7ff fe17 	bl	8005f14 <LL_RCC_MSI_IsReady>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d005      	beq.n	80062f8 <HAL_RCC_OscConfig+0x54>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	69db      	ldr	r3, [r3, #28]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d101      	bne.n	80062f8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e35e      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80062fc:	f7ff fe2f 	bl	8005f5e <LL_RCC_MSI_GetRange>
 8006300:	4603      	mov	r3, r0
 8006302:	429c      	cmp	r4, r3
 8006304:	d914      	bls.n	8006330 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	4618      	mov	r0, r3
 800630c:	f000 fd44 	bl	8006d98 <RCC_SetFlashLatencyFromMSIRange>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e34d      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631e:	4618      	mov	r0, r3
 8006320:	f7ff fe09 	bl	8005f36 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	4618      	mov	r0, r3
 800632a:	f7ff fe2d 	bl	8005f88 <LL_RCC_MSI_SetCalibTrimming>
 800632e:	e013      	b.n	8006358 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006334:	4618      	mov	r0, r3
 8006336:	f7ff fdfe 	bl	8005f36 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	4618      	mov	r0, r3
 8006340:	f7ff fe22 	bl	8005f88 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	4618      	mov	r0, r3
 800634a:	f000 fd25 	bl	8006d98 <RCC_SetFlashLatencyFromMSIRange>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e32e      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006358:	f000 fcde 	bl	8006d18 <HAL_RCC_GetHCLKFreq>
 800635c:	4603      	mov	r3, r0
 800635e:	4aa5      	ldr	r2, [pc, #660]	; (80065f4 <HAL_RCC_OscConfig+0x350>)
 8006360:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006362:	4ba5      	ldr	r3, [pc, #660]	; (80065f8 <HAL_RCC_OscConfig+0x354>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4618      	mov	r0, r3
 8006368:	f7fd f966 	bl	8003638 <HAL_InitTick>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d039      	beq.n	80063e6 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e31f      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d01e      	beq.n	80063bc <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800637e:	f7ff fdab 	bl	8005ed8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006382:	f7fd f9a7 	bl	80036d4 <HAL_GetTick>
 8006386:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006388:	e008      	b.n	800639c <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800638a:	f7fd f9a3 	bl	80036d4 <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	2b02      	cmp	r3, #2
 8006396:	d901      	bls.n	800639c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e30c      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() == 0U)
 800639c:	f7ff fdba 	bl	8005f14 <LL_RCC_MSI_IsReady>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d0f1      	beq.n	800638a <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7ff fdc3 	bl	8005f36 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a1b      	ldr	r3, [r3, #32]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7ff fde7 	bl	8005f88 <LL_RCC_MSI_SetCalibTrimming>
 80063ba:	e015      	b.n	80063e8 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80063bc:	f7ff fd9b 	bl	8005ef6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80063c0:	f7fd f988 	bl	80036d4 <HAL_GetTick>
 80063c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80063c6:	e008      	b.n	80063da <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80063c8:	f7fd f984 	bl	80036d4 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d901      	bls.n	80063da <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e2ed      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() != 0U)
 80063da:	f7ff fd9b 	bl	8005f14 <LL_RCC_MSI_IsReady>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1f1      	bne.n	80063c8 <HAL_RCC_OscConfig+0x124>
 80063e4:	e000      	b.n	80063e8 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80063e6:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d04e      	beq.n	8006492 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063f4:	f7ff fdf1 	bl	8005fda <LL_RCC_GetSysClkSource>
 80063f8:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063fa:	f7ff feea 	bl	80061d2 <LL_RCC_PLL_GetMainSource>
 80063fe:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006400:	6a3b      	ldr	r3, [r7, #32]
 8006402:	2b08      	cmp	r3, #8
 8006404:	d005      	beq.n	8006412 <HAL_RCC_OscConfig+0x16e>
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	2b0c      	cmp	r3, #12
 800640a:	d10d      	bne.n	8006428 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	2b03      	cmp	r3, #3
 8006410:	d10a      	bne.n	8006428 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006412:	f7ff fc01 	bl	8005c18 <LL_RCC_HSE_IsReady>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d039      	beq.n	8006490 <HAL_RCC_OscConfig+0x1ec>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d135      	bne.n	8006490 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e2c6      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006430:	d102      	bne.n	8006438 <HAL_RCC_OscConfig+0x194>
 8006432:	f7ff fbd3 	bl	8005bdc <LL_RCC_HSE_Enable>
 8006436:	e001      	b.n	800643c <HAL_RCC_OscConfig+0x198>
 8006438:	f7ff fbdf 	bl	8005bfa <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d012      	beq.n	800646a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006444:	f7fd f946 	bl	80036d4 <HAL_GetTick>
 8006448:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800644a:	e008      	b.n	800645e <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800644c:	f7fd f942 	bl	80036d4 <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	2b64      	cmp	r3, #100	; 0x64
 8006458:	d901      	bls.n	800645e <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e2ab      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() == 0U)
 800645e:	f7ff fbdb 	bl	8005c18 <LL_RCC_HSE_IsReady>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d0f1      	beq.n	800644c <HAL_RCC_OscConfig+0x1a8>
 8006468:	e013      	b.n	8006492 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800646a:	f7fd f933 	bl	80036d4 <HAL_GetTick>
 800646e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006470:	e008      	b.n	8006484 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006472:	f7fd f92f 	bl	80036d4 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	2b64      	cmp	r3, #100	; 0x64
 800647e:	d901      	bls.n	8006484 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e298      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006484:	f7ff fbc8 	bl	8005c18 <LL_RCC_HSE_IsReady>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1f1      	bne.n	8006472 <HAL_RCC_OscConfig+0x1ce>
 800648e:	e000      	b.n	8006492 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006490:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d051      	beq.n	8006542 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800649e:	f7ff fd9c 	bl	8005fda <LL_RCC_GetSysClkSource>
 80064a2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064a4:	f7ff fe95 	bl	80061d2 <LL_RCC_PLL_GetMainSource>
 80064a8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	2b04      	cmp	r3, #4
 80064ae:	d005      	beq.n	80064bc <HAL_RCC_OscConfig+0x218>
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	2b0c      	cmp	r3, #12
 80064b4:	d113      	bne.n	80064de <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d110      	bne.n	80064de <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064bc:	f7ff fbdc 	bl	8005c78 <LL_RCC_HSI_IsReady>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d005      	beq.n	80064d2 <HAL_RCC_OscConfig+0x22e>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e271      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7ff fbe0 	bl	8005c9c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064dc:	e031      	b.n	8006542 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d019      	beq.n	800651a <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064e6:	f7ff fba9 	bl	8005c3c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ea:	f7fd f8f3 	bl	80036d4 <HAL_GetTick>
 80064ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80064f0:	e008      	b.n	8006504 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064f2:	f7fd f8ef 	bl	80036d4 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d901      	bls.n	8006504 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e258      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006504:	f7ff fbb8 	bl	8005c78 <LL_RCC_HSI_IsReady>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d0f1      	beq.n	80064f2 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	4618      	mov	r0, r3
 8006514:	f7ff fbc2 	bl	8005c9c <LL_RCC_HSI_SetCalibTrimming>
 8006518:	e013      	b.n	8006542 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800651a:	f7ff fb9e 	bl	8005c5a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800651e:	f7fd f8d9 	bl	80036d4 <HAL_GetTick>
 8006522:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006524:	e008      	b.n	8006538 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006526:	f7fd f8d5 	bl	80036d4 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	2b02      	cmp	r3, #2
 8006532:	d901      	bls.n	8006538 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e23e      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006538:	f7ff fb9e 	bl	8005c78 <LL_RCC_HSI_IsReady>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1f1      	bne.n	8006526 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0308 	and.w	r3, r3, #8
 800654a:	2b00      	cmp	r3, #0
 800654c:	d106      	bne.n	800655c <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 80a4 	beq.w	80066a4 <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d077      	beq.n	8006654 <HAL_RCC_OscConfig+0x3b0>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0310 	and.w	r3, r3, #16
 800656c:	2b00      	cmp	r3, #0
 800656e:	d04b      	beq.n	8006608 <HAL_RCC_OscConfig+0x364>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006570:	f7ff fc55 	bl	8005e1e <LL_RCC_LSI1_IsReady>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d113      	bne.n	80065a2 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800657a:	f7ff fc2e 	bl	8005dda <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800657e:	f7fd f8a9 	bl	80036d4 <HAL_GetTick>
 8006582:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006584:	e008      	b.n	8006598 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006586:	f7fd f8a5 	bl	80036d4 <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	2b02      	cmp	r3, #2
 8006592:	d901      	bls.n	8006598 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e20e      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006598:	f7ff fc41 	bl	8005e1e <LL_RCC_LSI1_IsReady>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d0f1      	beq.n	8006586 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80065a2:	f7ff fc4e 	bl	8005e42 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065a6:	f7fd f895 	bl	80036d4 <HAL_GetTick>
 80065aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80065ac:	e008      	b.n	80065c0 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80065ae:	f7fd f891 	bl	80036d4 <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	2b03      	cmp	r3, #3
 80065ba:	d901      	bls.n	80065c0 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e1fa      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80065c0:	f7ff fc61 	bl	8005e86 <LL_RCC_LSI2_IsReady>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d0f1      	beq.n	80065ae <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7ff fc6b 	bl	8005eaa <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80065d4:	f7ff fc12 	bl	8005dfc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d8:	f7fd f87c 	bl	80036d4 <HAL_GetTick>
 80065dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80065de:	e00d      	b.n	80065fc <HAL_RCC_OscConfig+0x358>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80065e0:	f7fd f878 	bl	80036d4 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d906      	bls.n	80065fc <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e1e1      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
 80065f2:	bf00      	nop
 80065f4:	2000000c 	.word	0x2000000c
 80065f8:	20000010 	.word	0x20000010
        while (LL_RCC_LSI1_IsReady() != 0U)
 80065fc:	f7ff fc0f 	bl	8005e1e <LL_RCC_LSI1_IsReady>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1ec      	bne.n	80065e0 <HAL_RCC_OscConfig+0x33c>
 8006606:	e04d      	b.n	80066a4 <HAL_RCC_OscConfig+0x400>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006608:	f7ff fbe7 	bl	8005dda <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800660c:	f7fd f862 	bl	80036d4 <HAL_GetTick>
 8006610:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006612:	e008      	b.n	8006626 <HAL_RCC_OscConfig+0x382>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006614:	f7fd f85e 	bl	80036d4 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e1c7      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006626:	f7ff fbfa 	bl	8005e1e <LL_RCC_LSI1_IsReady>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d0f1      	beq.n	8006614 <HAL_RCC_OscConfig+0x370>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006630:	f7ff fc18 	bl	8005e64 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006634:	e008      	b.n	8006648 <HAL_RCC_OscConfig+0x3a4>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006636:	f7fd f84d 	bl	80036d4 <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	2b03      	cmp	r3, #3
 8006642:	d901      	bls.n	8006648 <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e1b6      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006648:	f7ff fc1d 	bl	8005e86 <LL_RCC_LSI2_IsReady>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1f1      	bne.n	8006636 <HAL_RCC_OscConfig+0x392>
 8006652:	e027      	b.n	80066a4 <HAL_RCC_OscConfig+0x400>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006654:	f7ff fc06 	bl	8005e64 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006658:	f7fd f83c 	bl	80036d4 <HAL_GetTick>
 800665c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800665e:	e008      	b.n	8006672 <HAL_RCC_OscConfig+0x3ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006660:	f7fd f838 	bl	80036d4 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	2b03      	cmp	r3, #3
 800666c:	d901      	bls.n	8006672 <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e1a1      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006672:	f7ff fc08 	bl	8005e86 <LL_RCC_LSI2_IsReady>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1f1      	bne.n	8006660 <HAL_RCC_OscConfig+0x3bc>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800667c:	f7ff fbbe 	bl	8005dfc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006680:	f7fd f828 	bl	80036d4 <HAL_GetTick>
 8006684:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006686:	e008      	b.n	800669a <HAL_RCC_OscConfig+0x3f6>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006688:	f7fd f824 	bl	80036d4 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	2b02      	cmp	r3, #2
 8006694:	d901      	bls.n	800669a <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e18d      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800669a:	f7ff fbc0 	bl	8005e1e <LL_RCC_LSI1_IsReady>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1f1      	bne.n	8006688 <HAL_RCC_OscConfig+0x3e4>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0304 	and.w	r3, r3, #4
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d05b      	beq.n	8006768 <HAL_RCC_OscConfig+0x4c4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066b0:	4ba7      	ldr	r3, [pc, #668]	; (8006950 <HAL_RCC_OscConfig+0x6ac>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d114      	bne.n	80066e6 <HAL_RCC_OscConfig+0x442>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80066bc:	f7ff fa5e 	bl	8005b7c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066c0:	f7fd f808 	bl	80036d4 <HAL_GetTick>
 80066c4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066c6:	e008      	b.n	80066da <HAL_RCC_OscConfig+0x436>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066c8:	f7fd f804 	bl	80036d4 <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d901      	bls.n	80066da <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e16d      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066da:	4b9d      	ldr	r3, [pc, #628]	; (8006950 <HAL_RCC_OscConfig+0x6ac>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d0f0      	beq.n	80066c8 <HAL_RCC_OscConfig+0x424>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d102      	bne.n	80066f4 <HAL_RCC_OscConfig+0x450>
 80066ee:	f7ff fb1e 	bl	8005d2e <LL_RCC_LSE_Enable>
 80066f2:	e00c      	b.n	800670e <HAL_RCC_OscConfig+0x46a>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	2b05      	cmp	r3, #5
 80066fa:	d104      	bne.n	8006706 <HAL_RCC_OscConfig+0x462>
 80066fc:	f7ff fb39 	bl	8005d72 <LL_RCC_LSE_EnableBypass>
 8006700:	f7ff fb15 	bl	8005d2e <LL_RCC_LSE_Enable>
 8006704:	e003      	b.n	800670e <HAL_RCC_OscConfig+0x46a>
 8006706:	f7ff fb23 	bl	8005d50 <LL_RCC_LSE_Disable>
 800670a:	f7ff fb43 	bl	8005d94 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d014      	beq.n	8006740 <HAL_RCC_OscConfig+0x49c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006716:	f7fc ffdd 	bl	80036d4 <HAL_GetTick>
 800671a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800671c:	e00a      	b.n	8006734 <HAL_RCC_OscConfig+0x490>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800671e:	f7fc ffd9 	bl	80036d4 <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	f241 3288 	movw	r2, #5000	; 0x1388
 800672c:	4293      	cmp	r3, r2
 800672e:	d901      	bls.n	8006734 <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e140      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006734:	f7ff fb3f 	bl	8005db6 <LL_RCC_LSE_IsReady>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d0ef      	beq.n	800671e <HAL_RCC_OscConfig+0x47a>
 800673e:	e013      	b.n	8006768 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006740:	f7fc ffc8 	bl	80036d4 <HAL_GetTick>
 8006744:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006746:	e00a      	b.n	800675e <HAL_RCC_OscConfig+0x4ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006748:	f7fc ffc4 	bl	80036d4 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	f241 3288 	movw	r2, #5000	; 0x1388
 8006756:	4293      	cmp	r3, r2
 8006758:	d901      	bls.n	800675e <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e12b      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() != 0U)
 800675e:	f7ff fb2a 	bl	8005db6 <LL_RCC_LSE_IsReady>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1ef      	bne.n	8006748 <HAL_RCC_OscConfig+0x4a4>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006770:	2b00      	cmp	r3, #0
 8006772:	d02c      	beq.n	80067ce <HAL_RCC_OscConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006778:	2b00      	cmp	r3, #0
 800677a:	d014      	beq.n	80067a6 <HAL_RCC_OscConfig+0x502>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800677c:	f7ff faa3 	bl	8005cc6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006780:	f7fc ffa8 	bl	80036d4 <HAL_GetTick>
 8006784:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006786:	e008      	b.n	800679a <HAL_RCC_OscConfig+0x4f6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006788:	f7fc ffa4 	bl	80036d4 <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	2b02      	cmp	r3, #2
 8006794:	d901      	bls.n	800679a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e10d      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800679a:	f7ff fab6 	bl	8005d0a <LL_RCC_HSI48_IsReady>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d0f1      	beq.n	8006788 <HAL_RCC_OscConfig+0x4e4>
 80067a4:	e013      	b.n	80067ce <HAL_RCC_OscConfig+0x52a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80067a6:	f7ff fa9f 	bl	8005ce8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067aa:	f7fc ff93 	bl	80036d4 <HAL_GetTick>
 80067ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80067b0:	e008      	b.n	80067c4 <HAL_RCC_OscConfig+0x520>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067b2:	f7fc ff8f 	bl	80036d4 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d901      	bls.n	80067c4 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e0f8      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80067c4:	f7ff faa1 	bl	8005d0a <LL_RCC_HSI48_IsReady>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1f1      	bne.n	80067b2 <HAL_RCC_OscConfig+0x50e>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f000 80ee 	beq.w	80069b4 <HAL_RCC_OscConfig+0x710>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067d8:	f7ff fbff 	bl	8005fda <LL_RCC_GetSysClkSource>
 80067dc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80067de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	f040 80b4 	bne.w	8006958 <HAL_RCC_OscConfig+0x6b4>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f003 0203 	and.w	r2, r3, #3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d123      	bne.n	8006846 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006808:	429a      	cmp	r2, r3
 800680a:	d11c      	bne.n	8006846 <HAL_RCC_OscConfig+0x5a2>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	0a1b      	lsrs	r3, r3, #8
 8006810:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006818:	429a      	cmp	r2, r3
 800681a:	d114      	bne.n	8006846 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006826:	429a      	cmp	r2, r3
 8006828:	d10d      	bne.n	8006846 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006834:	429a      	cmp	r2, r3
 8006836:	d106      	bne.n	8006846 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006842:	429a      	cmp	r2, r3
 8006844:	d05d      	beq.n	8006902 <HAL_RCC_OscConfig+0x65e>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	2b0c      	cmp	r3, #12
 800684a:	d058      	beq.n	80068fe <HAL_RCC_OscConfig+0x65a>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800684c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d001      	beq.n	800685e <HAL_RCC_OscConfig+0x5ba>

          {
            return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e0ab      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800685e:	f7ff fc72 	bl	8006146 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006862:	f7fc ff37 	bl	80036d4 <HAL_GetTick>
 8006866:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006868:	e008      	b.n	800687c <HAL_RCC_OscConfig+0x5d8>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800686a:	f7fc ff33 	bl	80036d4 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	2b02      	cmp	r3, #2
 8006876:	d901      	bls.n	800687c <HAL_RCC_OscConfig+0x5d8>
              {
                return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e09c      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800687c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1ef      	bne.n	800686a <HAL_RCC_OscConfig+0x5c6>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800688a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800688e:	68da      	ldr	r2, [r3, #12]
 8006890:	4b30      	ldr	r3, [pc, #192]	; (8006954 <HAL_RCC_OscConfig+0x6b0>)
 8006892:	4013      	ands	r3, r2
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800689c:	4311      	orrs	r1, r2
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80068a2:	0212      	lsls	r2, r2, #8
 80068a4:	4311      	orrs	r1, r2
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80068aa:	4311      	orrs	r1, r2
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80068b0:	4311      	orrs	r1, r2
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80068b6:	430a      	orrs	r2, r1
 80068b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068bc:	4313      	orrs	r3, r2
 80068be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80068c0:	f7ff fc32 	bl	8006128 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80068c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068d2:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80068d4:	f7fc fefe 	bl	80036d4 <HAL_GetTick>
 80068d8:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068da:	e008      	b.n	80068ee <HAL_RCC_OscConfig+0x64a>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068dc:	f7fc fefa 	bl	80036d4 <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d901      	bls.n	80068ee <HAL_RCC_OscConfig+0x64a>
              {
                return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e063      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d0ef      	beq.n	80068dc <HAL_RCC_OscConfig+0x638>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068fc:	e05a      	b.n	80069b4 <HAL_RCC_OscConfig+0x710>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e059      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d151      	bne.n	80069b4 <HAL_RCC_OscConfig+0x710>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006910:	f7ff fc0a 	bl	8006128 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800691e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006922:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006924:	f7fc fed6 	bl	80036d4 <HAL_GetTick>
 8006928:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800692a:	e008      	b.n	800693e <HAL_RCC_OscConfig+0x69a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800692c:	f7fc fed2 	bl	80036d4 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	2b02      	cmp	r3, #2
 8006938:	d901      	bls.n	800693e <HAL_RCC_OscConfig+0x69a>
            {
              return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e03b      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800693e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d0ef      	beq.n	800692c <HAL_RCC_OscConfig+0x688>
 800694c:	e032      	b.n	80069b4 <HAL_RCC_OscConfig+0x710>
 800694e:	bf00      	nop
 8006950:	58000400 	.word	0x58000400
 8006954:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	2b0c      	cmp	r3, #12
 800695c:	d028      	beq.n	80069b0 <HAL_RCC_OscConfig+0x70c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800695e:	f7ff fbf2 	bl	8006146 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8006962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800696c:	f023 0303 	bic.w	r3, r3, #3
 8006970:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8006972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800697c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8006980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006984:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006986:	f7fc fea5 	bl	80036d4 <HAL_GetTick>
 800698a:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800698c:	e008      	b.n	80069a0 <HAL_RCC_OscConfig+0x6fc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800698e:	f7fc fea1 	bl	80036d4 <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	2b02      	cmp	r3, #2
 800699a:	d901      	bls.n	80069a0 <HAL_RCC_OscConfig+0x6fc>
          {
            return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e00a      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1ef      	bne.n	800698e <HAL_RCC_OscConfig+0x6ea>
 80069ae:	e001      	b.n	80069b4 <HAL_RCC_OscConfig+0x710>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e000      	b.n	80069b6 <HAL_RCC_OscConfig+0x712>
      }
    }
  }
  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3734      	adds	r7, #52	; 0x34
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd90      	pop	{r4, r7, pc}
 80069be:	bf00      	nop

080069c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d101      	bne.n	80069d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e12d      	b.n	8006c30 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069d4:	4b98      	ldr	r3, [pc, #608]	; (8006c38 <HAL_RCC_ClockConfig+0x278>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0307 	and.w	r3, r3, #7
 80069dc:	683a      	ldr	r2, [r7, #0]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d91b      	bls.n	8006a1a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069e2:	4b95      	ldr	r3, [pc, #596]	; (8006c38 <HAL_RCC_ClockConfig+0x278>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f023 0207 	bic.w	r2, r3, #7
 80069ea:	4993      	ldr	r1, [pc, #588]	; (8006c38 <HAL_RCC_ClockConfig+0x278>)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069f2:	f7fc fe6f 	bl	80036d4 <HAL_GetTick>
 80069f6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069f8:	e008      	b.n	8006a0c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80069fa:	f7fc fe6b 	bl	80036d4 <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d901      	bls.n	8006a0c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e111      	b.n	8006c30 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a0c:	4b8a      	ldr	r3, [pc, #552]	; (8006c38 <HAL_RCC_ClockConfig+0x278>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0307 	and.w	r3, r3, #7
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d1ef      	bne.n	80069fa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d016      	beq.n	8006a54 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7ff fae1 	bl	8005ff2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006a30:	f7fc fe50 	bl	80036d4 <HAL_GetTick>
 8006a34:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006a36:	e008      	b.n	8006a4a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006a38:	f7fc fe4c 	bl	80036d4 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d901      	bls.n	8006a4a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e0f2      	b.n	8006c30 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006a4a:	f7ff fbce 	bl	80061ea <LL_RCC_IsActiveFlag_HPRE>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d0f1      	beq.n	8006a38 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0320 	and.w	r3, r3, #32
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d016      	beq.n	8006a8e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7ff fad8 	bl	800601a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006a6a:	f7fc fe33 	bl	80036d4 <HAL_GetTick>
 8006a6e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006a70:	e008      	b.n	8006a84 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006a72:	f7fc fe2f 	bl	80036d4 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d901      	bls.n	8006a84 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e0d5      	b.n	8006c30 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006a84:	f7ff fbc3 	bl	800620e <LL_RCC_IsActiveFlag_C2HPRE>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d0f1      	beq.n	8006a72 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d016      	beq.n	8006ac8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7ff fad1 	bl	8006046 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006aa4:	f7fc fe16 	bl	80036d4 <HAL_GetTick>
 8006aa8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006aaa:	e008      	b.n	8006abe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006aac:	f7fc fe12 	bl	80036d4 <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e0b8      	b.n	8006c30 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006abe:	f7ff fbb9 	bl	8006234 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d0f1      	beq.n	8006aac <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0304 	and.w	r3, r3, #4
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d016      	beq.n	8006b02 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7ff facb 	bl	8006074 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006ade:	f7fc fdf9 	bl	80036d4 <HAL_GetTick>
 8006ae2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006ae4:	e008      	b.n	8006af8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006ae6:	f7fc fdf5 	bl	80036d4 <HAL_GetTick>
 8006aea:	4602      	mov	r2, r0
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d901      	bls.n	8006af8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e09b      	b.n	8006c30 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006af8:	f7ff fbaf 	bl	800625a <LL_RCC_IsActiveFlag_PPRE1>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d0f1      	beq.n	8006ae6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0308 	and.w	r3, r3, #8
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d017      	beq.n	8006b3e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	00db      	lsls	r3, r3, #3
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7ff fac1 	bl	800609c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006b1a:	f7fc fddb 	bl	80036d4 <HAL_GetTick>
 8006b1e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006b20:	e008      	b.n	8006b34 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006b22:	f7fc fdd7 	bl	80036d4 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d901      	bls.n	8006b34 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e07d      	b.n	8006c30 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006b34:	f7ff fba3 	bl	800627e <LL_RCC_IsActiveFlag_PPRE2>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d0f1      	beq.n	8006b22 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d043      	beq.n	8006bd2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d106      	bne.n	8006b60 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006b52:	f7ff f861 	bl	8005c18 <LL_RCC_HSE_IsReady>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d11e      	bne.n	8006b9a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e067      	b.n	8006c30 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	2b03      	cmp	r3, #3
 8006b66:	d106      	bne.n	8006b76 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006b68:	f7ff fafc 	bl	8006164 <LL_RCC_PLL_IsReady>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d113      	bne.n	8006b9a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e05c      	b.n	8006c30 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d106      	bne.n	8006b8c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006b7e:	f7ff f9c9 	bl	8005f14 <LL_RCC_MSI_IsReady>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d108      	bne.n	8006b9a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e051      	b.n	8006c30 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006b8c:	f7ff f874 	bl	8005c78 <LL_RCC_HSI_IsReady>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e04a      	b.n	8006c30 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7ff fa07 	bl	8005fb2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ba4:	f7fc fd96 	bl	80036d4 <HAL_GetTick>
 8006ba8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006baa:	e00a      	b.n	8006bc2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bac:	f7fc fd92 	bl	80036d4 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d901      	bls.n	8006bc2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e036      	b.n	8006c30 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bc2:	f7ff fa0a 	bl	8005fda <LL_RCC_GetSysClkSource>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d1ec      	bne.n	8006bac <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bd2:	4b19      	ldr	r3, [pc, #100]	; (8006c38 <HAL_RCC_ClockConfig+0x278>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0307 	and.w	r3, r3, #7
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d21b      	bcs.n	8006c18 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006be0:	4b15      	ldr	r3, [pc, #84]	; (8006c38 <HAL_RCC_ClockConfig+0x278>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f023 0207 	bic.w	r2, r3, #7
 8006be8:	4913      	ldr	r1, [pc, #76]	; (8006c38 <HAL_RCC_ClockConfig+0x278>)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bf0:	f7fc fd70 	bl	80036d4 <HAL_GetTick>
 8006bf4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bf6:	e008      	b.n	8006c0a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006bf8:	f7fc fd6c 	bl	80036d4 <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d901      	bls.n	8006c0a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e012      	b.n	8006c30 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c0a:	4b0b      	ldr	r3, [pc, #44]	; (8006c38 <HAL_RCC_ClockConfig+0x278>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0307 	and.w	r3, r3, #7
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d1ef      	bne.n	8006bf8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006c18:	f000 f87e 	bl	8006d18 <HAL_RCC_GetHCLKFreq>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	4a07      	ldr	r2, [pc, #28]	; (8006c3c <HAL_RCC_ClockConfig+0x27c>)
 8006c20:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006c22:	f7fc fd63 	bl	80036ec <HAL_GetTickPrio>
 8006c26:	4603      	mov	r3, r0
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7fc fd05 	bl	8003638 <HAL_InitTick>
 8006c2e:	4603      	mov	r3, r0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	58004000 	.word	0x58004000
 8006c3c:	2000000c 	.word	0x2000000c

08006c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c40:	b590      	push	{r4, r7, lr}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c46:	f7ff f9c8 	bl	8005fda <LL_RCC_GetSysClkSource>
 8006c4a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10a      	bne.n	8006c68 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006c52:	f7ff f984 	bl	8005f5e <LL_RCC_MSI_GetRange>
 8006c56:	4603      	mov	r3, r0
 8006c58:	091b      	lsrs	r3, r3, #4
 8006c5a:	f003 030f 	and.w	r3, r3, #15
 8006c5e:	4a2b      	ldr	r2, [pc, #172]	; (8006d0c <HAL_RCC_GetSysClockFreq+0xcc>)
 8006c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	e04b      	b.n	8006d00 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b04      	cmp	r3, #4
 8006c6c:	d102      	bne.n	8006c74 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006c6e:	4b28      	ldr	r3, [pc, #160]	; (8006d10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006c70:	60fb      	str	r3, [r7, #12]
 8006c72:	e045      	b.n	8006d00 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b08      	cmp	r3, #8
 8006c78:	d10a      	bne.n	8006c90 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006c7a:	f7fe ff9d 	bl	8005bb8 <LL_RCC_HSE_IsEnabledDiv2>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d102      	bne.n	8006c8a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006c84:	4b22      	ldr	r3, [pc, #136]	; (8006d10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006c86:	60fb      	str	r3, [r7, #12]
 8006c88:	e03a      	b.n	8006d00 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006c8a:	4b22      	ldr	r3, [pc, #136]	; (8006d14 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006c8c:	60fb      	str	r3, [r7, #12]
 8006c8e:	e037      	b.n	8006d00 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006c90:	f7ff fa9f 	bl	80061d2 <LL_RCC_PLL_GetMainSource>
 8006c94:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d003      	beq.n	8006ca4 <HAL_RCC_GetSysClockFreq+0x64>
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d003      	beq.n	8006caa <HAL_RCC_GetSysClockFreq+0x6a>
 8006ca2:	e00d      	b.n	8006cc0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006ca4:	4b1a      	ldr	r3, [pc, #104]	; (8006d10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006ca6:	60bb      	str	r3, [r7, #8]
        break;
 8006ca8:	e015      	b.n	8006cd6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006caa:	f7fe ff85 	bl	8005bb8 <LL_RCC_HSE_IsEnabledDiv2>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d102      	bne.n	8006cba <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006cb4:	4b16      	ldr	r3, [pc, #88]	; (8006d10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006cb6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006cb8:	e00d      	b.n	8006cd6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006cba:	4b16      	ldr	r3, [pc, #88]	; (8006d14 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006cbc:	60bb      	str	r3, [r7, #8]
        break;
 8006cbe:	e00a      	b.n	8006cd6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006cc0:	f7ff f94d 	bl	8005f5e <LL_RCC_MSI_GetRange>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	091b      	lsrs	r3, r3, #4
 8006cc8:	f003 030f 	and.w	r3, r3, #15
 8006ccc:	4a0f      	ldr	r2, [pc, #60]	; (8006d0c <HAL_RCC_GetSysClockFreq+0xcc>)
 8006cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cd2:	60bb      	str	r3, [r7, #8]
        break;
 8006cd4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8006cd6:	f7ff fa57 	bl	8006188 <LL_RCC_PLL_GetN>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	fb03 f402 	mul.w	r4, r3, r2
 8006ce2:	f7ff fa6a 	bl	80061ba <LL_RCC_PLL_GetDivider>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	091b      	lsrs	r3, r3, #4
 8006cea:	3301      	adds	r3, #1
 8006cec:	fbb4 f4f3 	udiv	r4, r4, r3
 8006cf0:	f7ff fa57 	bl	80061a2 <LL_RCC_PLL_GetR>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	0f5b      	lsrs	r3, r3, #29
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	fbb4 f3f3 	udiv	r3, r4, r3
 8006cfe:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8006d00:	68fb      	ldr	r3, [r7, #12]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd90      	pop	{r4, r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	0800f480 	.word	0x0800f480
 8006d10:	00f42400 	.word	0x00f42400
 8006d14:	01e84800 	.word	0x01e84800

08006d18 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d18:	b598      	push	{r3, r4, r7, lr}
 8006d1a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006d1c:	f7ff ff90 	bl	8006c40 <HAL_RCC_GetSysClockFreq>
 8006d20:	4604      	mov	r4, r0
 8006d22:	f7ff f9cf 	bl	80060c4 <LL_RCC_GetAHBPrescaler>
 8006d26:	4603      	mov	r3, r0
 8006d28:	091b      	lsrs	r3, r3, #4
 8006d2a:	f003 030f 	and.w	r3, r3, #15
 8006d2e:	4a03      	ldr	r2, [pc, #12]	; (8006d3c <HAL_RCC_GetHCLKFreq+0x24>)
 8006d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d34:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	bd98      	pop	{r3, r4, r7, pc}
 8006d3c:	0800f420 	.word	0x0800f420

08006d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d40:	b598      	push	{r3, r4, r7, lr}
 8006d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006d44:	f7ff ffe8 	bl	8006d18 <HAL_RCC_GetHCLKFreq>
 8006d48:	4604      	mov	r4, r0
 8006d4a:	f7ff f9d5 	bl	80060f8 <LL_RCC_GetAPB1Prescaler>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	0a1b      	lsrs	r3, r3, #8
 8006d52:	f003 0307 	and.w	r3, r3, #7
 8006d56:	4a04      	ldr	r2, [pc, #16]	; (8006d68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d5c:	f003 031f 	and.w	r3, r3, #31
 8006d60:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	bd98      	pop	{r3, r4, r7, pc}
 8006d68:	0800f460 	.word	0x0800f460

08006d6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d6c:	b598      	push	{r3, r4, r7, lr}
 8006d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006d70:	f7ff ffd2 	bl	8006d18 <HAL_RCC_GetHCLKFreq>
 8006d74:	4604      	mov	r4, r0
 8006d76:	f7ff f9cb 	bl	8006110 <LL_RCC_GetAPB2Prescaler>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	0adb      	lsrs	r3, r3, #11
 8006d7e:	f003 0307 	and.w	r3, r3, #7
 8006d82:	4a04      	ldr	r2, [pc, #16]	; (8006d94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d88:	f003 031f 	and.w	r3, r3, #31
 8006d8c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	bd98      	pop	{r3, r4, r7, pc}
 8006d94:	0800f460 	.word	0x0800f460

08006d98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006d98:	b590      	push	{r4, r7, lr}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2bb0      	cmp	r3, #176	; 0xb0
 8006da4:	d903      	bls.n	8006dae <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006da6:	4b15      	ldr	r3, [pc, #84]	; (8006dfc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006daa:	60fb      	str	r3, [r7, #12]
 8006dac:	e007      	b.n	8006dbe <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	091b      	lsrs	r3, r3, #4
 8006db2:	f003 030f 	and.w	r3, r3, #15
 8006db6:	4a11      	ldr	r2, [pc, #68]	; (8006dfc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dbc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006dbe:	f7ff f98d 	bl	80060dc <LL_RCC_GetAHB4Prescaler>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	091b      	lsrs	r3, r3, #4
 8006dc6:	f003 030f 	and.w	r3, r3, #15
 8006dca:	4a0d      	ldr	r2, [pc, #52]	; (8006e00 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	4a0a      	ldr	r2, [pc, #40]	; (8006e04 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8006de0:	0c9c      	lsrs	r4, r3, #18
 8006de2:	f7fe fedb 	bl	8005b9c <HAL_PWREx_GetVoltageRange>
 8006de6:	4603      	mov	r3, r0
 8006de8:	4619      	mov	r1, r3
 8006dea:	4620      	mov	r0, r4
 8006dec:	f000 f80c 	bl	8006e08 <RCC_SetFlashLatency>
 8006df0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3714      	adds	r7, #20
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd90      	pop	{r4, r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	0800f480 	.word	0x0800f480
 8006e00:	0800f420 	.word	0x0800f420
 8006e04:	431bde83 	.word	0x431bde83

08006e08 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006e08:	b590      	push	{r4, r7, lr}
 8006e0a:	b093      	sub	sp, #76	; 0x4c
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006e12:	4b37      	ldr	r3, [pc, #220]	; (8006ef0 <RCC_SetFlashLatency+0xe8>)
 8006e14:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006e18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006e1e:	4a35      	ldr	r2, [pc, #212]	; (8006ef4 <RCC_SetFlashLatency+0xec>)
 8006e20:	f107 031c 	add.w	r3, r7, #28
 8006e24:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e26:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006e2a:	4b33      	ldr	r3, [pc, #204]	; (8006ef8 <RCC_SetFlashLatency+0xf0>)
 8006e2c:	f107 040c 	add.w	r4, r7, #12
 8006e30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006e36:	2300      	movs	r3, #0
 8006e38:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e40:	d11a      	bne.n	8006e78 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006e42:	2300      	movs	r3, #0
 8006e44:	643b      	str	r3, [r7, #64]	; 0x40
 8006e46:	e013      	b.n	8006e70 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	3348      	adds	r3, #72	; 0x48
 8006e4e:	443b      	add	r3, r7
 8006e50:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d807      	bhi.n	8006e6a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	3348      	adds	r3, #72	; 0x48
 8006e60:	443b      	add	r3, r7
 8006e62:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006e66:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006e68:	e020      	b.n	8006eac <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	643b      	str	r3, [r7, #64]	; 0x40
 8006e70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d9e8      	bls.n	8006e48 <RCC_SetFlashLatency+0x40>
 8006e76:	e019      	b.n	8006eac <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006e78:	2300      	movs	r3, #0
 8006e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e7c:	e013      	b.n	8006ea6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	3348      	adds	r3, #72	; 0x48
 8006e84:	443b      	add	r3, r7
 8006e86:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d807      	bhi.n	8006ea0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	3348      	adds	r3, #72	; 0x48
 8006e96:	443b      	add	r3, r7
 8006e98:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006e9c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006e9e:	e005      	b.n	8006eac <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d9e8      	bls.n	8006e7e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8006eac:	4b13      	ldr	r3, [pc, #76]	; (8006efc <RCC_SetFlashLatency+0xf4>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f023 0207 	bic.w	r2, r3, #7
 8006eb4:	4911      	ldr	r1, [pc, #68]	; (8006efc <RCC_SetFlashLatency+0xf4>)
 8006eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006ebc:	f7fc fc0a 	bl	80036d4 <HAL_GetTick>
 8006ec0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006ec2:	e008      	b.n	8006ed6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006ec4:	f7fc fc06 	bl	80036d4 <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d901      	bls.n	8006ed6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e007      	b.n	8006ee6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006ed6:	4b09      	ldr	r3, [pc, #36]	; (8006efc <RCC_SetFlashLatency+0xf4>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0307 	and.w	r3, r3, #7
 8006ede:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d1ef      	bne.n	8006ec4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	374c      	adds	r7, #76	; 0x4c
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd90      	pop	{r4, r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	0800e9b4 	.word	0x0800e9b4
 8006ef4:	0800e9c4 	.word	0x0800e9c4
 8006ef8:	0800e9d0 	.word	0x0800e9d0
 8006efc:	58004000 	.word	0x58004000

08006f00 <LL_RCC_LSE_IsEnabled>:
{
 8006f00:	b480      	push	{r7}
 8006f02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d101      	bne.n	8006f18 <LL_RCC_LSE_IsEnabled+0x18>
 8006f14:	2301      	movs	r3, #1
 8006f16:	e000      	b.n	8006f1a <LL_RCC_LSE_IsEnabled+0x1a>
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <LL_RCC_LSE_IsReady>:
{
 8006f24:	b480      	push	{r7}
 8006f26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f30:	f003 0302 	and.w	r3, r3, #2
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d101      	bne.n	8006f3c <LL_RCC_LSE_IsReady+0x18>
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e000      	b.n	8006f3e <LL_RCC_LSE_IsReady+0x1a>
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <LL_RCC_SetRFWKPClockSource>:
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006f5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <LL_RCC_SetSMPSClockSource>:
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f82:	f023 0203 	bic.w	r2, r3, #3
 8006f86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006f90:	bf00      	nop
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <LL_RCC_SetSMPSPrescaler>:
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006faa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006fae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <LL_RCC_SetUSARTClockSource>:
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd4:	f023 0203 	bic.w	r2, r3, #3
 8006fd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <LL_RCC_SetLPUARTClockSource>:
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007000:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007004:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4313      	orrs	r3, r2
 800700c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <LL_RCC_SetI2CClockSource>:
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007028:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	091b      	lsrs	r3, r3, #4
 8007030:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007034:	43db      	mvns	r3, r3
 8007036:	401a      	ands	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	011b      	lsls	r3, r3, #4
 800703c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007040:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007044:	4313      	orrs	r3, r2
 8007046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800704a:	bf00      	nop
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <LL_RCC_SetLPTIMClockSource>:
{
 8007056:	b480      	push	{r7}
 8007058:	b083      	sub	sp, #12
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800705e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007062:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	0c1b      	lsrs	r3, r3, #16
 800706a:	041b      	lsls	r3, r3, #16
 800706c:	43db      	mvns	r3, r3
 800706e:	401a      	ands	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	041b      	lsls	r3, r3, #16
 8007074:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007078:	4313      	orrs	r3, r2
 800707a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800707e:	bf00      	nop
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <LL_RCC_SetSAIClockSource>:
{
 800708a:	b480      	push	{r7}
 800708c:	b083      	sub	sp, #12
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8007092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800709a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800709e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80070aa:	bf00      	nop
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <LL_RCC_SetRNGClockSource>:
{
 80070b6:	b480      	push	{r7}
 80070b8:	b083      	sub	sp, #12
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80070be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070c6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80070ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80070d6:	bf00      	nop
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <LL_RCC_SetCLK48ClockSource>:
{
 80070e2:	b480      	push	{r7}
 80070e4:	b083      	sub	sp, #12
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80070ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80070f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007102:	bf00      	nop
 8007104:	370c      	adds	r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <LL_RCC_SetUSBClockSource>:
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b082      	sub	sp, #8
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7ff ffe3 	bl	80070e2 <LL_RCC_SetCLK48ClockSource>
}
 800711c:	bf00      	nop
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <LL_RCC_SetADCClockSource>:
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800712c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007134:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007138:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4313      	orrs	r3, r2
 8007140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <LL_RCC_SetRTCClockSource>:
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800715c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007160:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007164:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4313      	orrs	r3, r2
 800716c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <LL_RCC_GetRTCClockSource>:
{
 800717c:	b480      	push	{r7}
 800717e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007188:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800718c:	4618      	mov	r0, r3
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <LL_RCC_ForceBackupDomainReset>:
{
 8007196:	b480      	push	{r7}
 8007198:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800719a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800719e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80071ae:	bf00      	nop
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <LL_RCC_ReleaseBackupDomainReset>:
{
 80071b8:	b480      	push	{r7}
 80071ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80071bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80071d0:	bf00      	nop
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <LL_RCC_PLLSAI1_Enable>:
{
 80071da:	b480      	push	{r7}
 80071dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80071de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80071ec:	6013      	str	r3, [r2, #0]
}
 80071ee:	bf00      	nop
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <LL_RCC_PLLSAI1_Disable>:
{
 80071f8:	b480      	push	{r7}
 80071fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80071fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007206:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800720a:	6013      	str	r3, [r2, #0]
}
 800720c:	bf00      	nop
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <LL_RCC_PLLSAI1_IsReady>:
{
 8007216:	b480      	push	{r7}
 8007218:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800721a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007224:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007228:	d101      	bne.n	800722e <LL_RCC_PLLSAI1_IsReady+0x18>
 800722a:	2301      	movs	r3, #1
 800722c:	e000      	b.n	8007230 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr

0800723a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b088      	sub	sp, #32
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007242:	2300      	movs	r3, #0
 8007244:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007246:	2300      	movs	r3, #0
 8007248:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007252:	2b00      	cmp	r3, #0
 8007254:	d034      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800725e:	d021      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007260:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007264:	d81b      	bhi.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007266:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800726a:	d01d      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800726c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007270:	d815      	bhi.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00b      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007276:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800727a:	d110      	bne.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800727c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800728a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800728c:	e00d      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	3304      	adds	r3, #4
 8007292:	4618      	mov	r0, r3
 8007294:	f000 f947 	bl	8007526 <RCCEx_PLLSAI1_ConfigNP>
 8007298:	4603      	mov	r3, r0
 800729a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800729c:	e005      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	77fb      	strb	r3, [r7, #31]
        break;
 80072a2:	e002      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80072a4:	bf00      	nop
 80072a6:	e000      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80072a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072aa:	7ffb      	ldrb	r3, [r7, #31]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d105      	bne.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7ff fee8 	bl	800708a <LL_RCC_SetSAIClockSource>
 80072ba:	e001      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072bc:	7ffb      	ldrb	r3, [r7, #31]
 80072be:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d046      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80072cc:	f7ff ff56 	bl	800717c <LL_RCC_GetRTCClockSource>
 80072d0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d6:	69ba      	ldr	r2, [r7, #24]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d03c      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80072dc:	f7fe fc4e 	bl	8005b7c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d105      	bne.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7ff ff30 	bl	8007150 <LL_RCC_SetRTCClockSource>
 80072f0:	e02e      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80072f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072fa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80072fc:	f7ff ff4b 	bl	8007196 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007300:	f7ff ff5a 	bl	80071b8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730e:	4313      	orrs	r3, r2
 8007310:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007312:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800731c:	f7ff fdf0 	bl	8006f00 <LL_RCC_LSE_IsEnabled>
 8007320:	4603      	mov	r3, r0
 8007322:	2b01      	cmp	r3, #1
 8007324:	d114      	bne.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007326:	f7fc f9d5 	bl	80036d4 <HAL_GetTick>
 800732a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800732c:	e00b      	b.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800732e:	f7fc f9d1 	bl	80036d4 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	f241 3288 	movw	r2, #5000	; 0x1388
 800733c:	4293      	cmp	r3, r2
 800733e:	d902      	bls.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	77fb      	strb	r3, [r7, #31]
              break;
 8007344:	e004      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8007346:	f7ff fded 	bl	8006f24 <LL_RCC_LSE_IsReady>
 800734a:	4603      	mov	r3, r0
 800734c:	2b01      	cmp	r3, #1
 800734e:	d1ee      	bne.n	800732e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007350:	7ffb      	ldrb	r3, [r7, #31]
 8007352:	77bb      	strb	r3, [r7, #30]
 8007354:	e001      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007356:	7ffb      	ldrb	r3, [r7, #31]
 8007358:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 0301 	and.w	r3, r3, #1
 8007362:	2b00      	cmp	r3, #0
 8007364:	d004      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	4618      	mov	r0, r3
 800736c:	f7ff fe2a 	bl	8006fc4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0302 	and.w	r3, r3, #2
 8007378:	2b00      	cmp	r3, #0
 800737a:	d004      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	69db      	ldr	r3, [r3, #28]
 8007380:	4618      	mov	r0, r3
 8007382:	f7ff fe35 	bl	8006ff0 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0310 	and.w	r3, r3, #16
 800738e:	2b00      	cmp	r3, #0
 8007390:	d004      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007396:	4618      	mov	r0, r3
 8007398:	f7ff fe5d 	bl	8007056 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0320 	and.w	r3, r3, #32
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d004      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7ff fe52 	bl	8007056 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 0304 	and.w	r3, r3, #4
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d004      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7ff fe2a 	bl	800701c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0308 	and.w	r3, r3, #8
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d004      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d8:	4618      	mov	r0, r3
 80073da:	f7ff fe1f 	bl	800701c <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d022      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7ff fe8d 	bl	800710e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073fc:	d107      	bne.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80073fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007408:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800740c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007412:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007416:	d10b      	bne.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	3304      	adds	r3, #4
 800741c:	4618      	mov	r0, r3
 800741e:	f000 f8dd 	bl	80075dc <RCCEx_PLLSAI1_ConfigNQ>
 8007422:	4603      	mov	r3, r0
 8007424:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8007426:	7ffb      	ldrb	r3, [r7, #31]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d001      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 800742c:	7ffb      	ldrb	r3, [r7, #31]
 800742e:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007438:	2b00      	cmp	r3, #0
 800743a:	d02b      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007444:	d008      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800744e:	d003      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007454:	2b00      	cmp	r3, #0
 8007456:	d105      	bne.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745c:	4618      	mov	r0, r3
 800745e:	f7ff fe2a 	bl	80070b6 <LL_RCC_SetRNGClockSource>
 8007462:	e00a      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800746c:	60fb      	str	r3, [r7, #12]
 800746e:	2000      	movs	r0, #0
 8007470:	f7ff fe21 	bl	80070b6 <LL_RCC_SetRNGClockSource>
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f7ff fe34 	bl	80070e2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007482:	d107      	bne.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800748e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007492:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800749c:	2b00      	cmp	r3, #0
 800749e:	d022      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7ff fe3d 	bl	8007124 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074b2:	d107      	bne.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80074b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074c2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074cc:	d10b      	bne.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	3304      	adds	r3, #4
 80074d2:	4618      	mov	r0, r3
 80074d4:	f000 f8dd 	bl	8007692 <RCCEx_PLLSAI1_ConfigNR>
 80074d8:	4603      	mov	r3, r0
 80074da:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80074dc:	7ffb      	ldrb	r3, [r7, #31]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 80074e2:	7ffb      	ldrb	r3, [r7, #31]
 80074e4:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d004      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7ff fd26 	bl	8006f48 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d009      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800750c:	4618      	mov	r0, r3
 800750e:	f7ff fd45 	bl	8006f9c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007516:	4618      	mov	r0, r3
 8007518:	f7ff fd2c 	bl	8006f74 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800751c:	7fbb      	ldrb	r3, [r7, #30]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3720      	adds	r7, #32
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b084      	sub	sp, #16
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800752e:	2300      	movs	r3, #0
 8007530:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007532:	f7ff fe61 	bl	80071f8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007536:	f7fc f8cd 	bl	80036d4 <HAL_GetTick>
 800753a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800753c:	e009      	b.n	8007552 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800753e:	f7fc f8c9 	bl	80036d4 <HAL_GetTick>
 8007542:	4602      	mov	r2, r0
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	2b02      	cmp	r3, #2
 800754a:	d902      	bls.n	8007552 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	73fb      	strb	r3, [r7, #15]
      break;
 8007550:	e004      	b.n	800755c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007552:	f7ff fe60 	bl	8007216 <LL_RCC_PLLSAI1_IsReady>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1f0      	bne.n	800753e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800755c:	7bfb      	ldrb	r3, [r7, #15]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d137      	bne.n	80075d2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	021b      	lsls	r3, r3, #8
 8007572:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007576:	4313      	orrs	r3, r2
 8007578:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800757a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800758c:	4313      	orrs	r3, r2
 800758e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007590:	f7ff fe23 	bl	80071da <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007594:	f7fc f89e 	bl	80036d4 <HAL_GetTick>
 8007598:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800759a:	e009      	b.n	80075b0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800759c:	f7fc f89a 	bl	80036d4 <HAL_GetTick>
 80075a0:	4602      	mov	r2, r0
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d902      	bls.n	80075b0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	73fb      	strb	r3, [r7, #15]
        break;
 80075ae:	e004      	b.n	80075ba <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80075b0:	f7ff fe31 	bl	8007216 <LL_RCC_PLLSAI1_IsReady>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d1f0      	bne.n	800759c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80075ba:	7bfb      	ldrb	r3, [r7, #15]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d108      	bne.n	80075d2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80075c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075c4:	691a      	ldr	r2, [r3, #16]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075ce:	4313      	orrs	r3, r2
 80075d0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80075d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80075e8:	f7ff fe06 	bl	80071f8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80075ec:	f7fc f872 	bl	80036d4 <HAL_GetTick>
 80075f0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80075f2:	e009      	b.n	8007608 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80075f4:	f7fc f86e 	bl	80036d4 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d902      	bls.n	8007608 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	73fb      	strb	r3, [r7, #15]
      break;
 8007606:	e004      	b.n	8007612 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007608:	f7ff fe05 	bl	8007216 <LL_RCC_PLLSAI1_IsReady>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1f0      	bne.n	80075f4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007612:	7bfb      	ldrb	r3, [r7, #15]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d137      	bne.n	8007688 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	021b      	lsls	r3, r3, #8
 8007628:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800762c:	4313      	orrs	r3, r2
 800762e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007642:	4313      	orrs	r3, r2
 8007644:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007646:	f7ff fdc8 	bl	80071da <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800764a:	f7fc f843 	bl	80036d4 <HAL_GetTick>
 800764e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007650:	e009      	b.n	8007666 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007652:	f7fc f83f 	bl	80036d4 <HAL_GetTick>
 8007656:	4602      	mov	r2, r0
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	2b02      	cmp	r3, #2
 800765e:	d902      	bls.n	8007666 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	73fb      	strb	r3, [r7, #15]
        break;
 8007664:	e004      	b.n	8007670 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007666:	f7ff fdd6 	bl	8007216 <LL_RCC_PLLSAI1_IsReady>
 800766a:	4603      	mov	r3, r0
 800766c:	2b01      	cmp	r3, #1
 800766e:	d1f0      	bne.n	8007652 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007670:	7bfb      	ldrb	r3, [r7, #15]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d108      	bne.n	8007688 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800767a:	691a      	ldr	r2, [r3, #16]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007684:	4313      	orrs	r3, r2
 8007686:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007688:	7bfb      	ldrb	r3, [r7, #15]
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b084      	sub	sp, #16
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800769a:	2300      	movs	r3, #0
 800769c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800769e:	f7ff fdab 	bl	80071f8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80076a2:	f7fc f817 	bl	80036d4 <HAL_GetTick>
 80076a6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80076a8:	e009      	b.n	80076be <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80076aa:	f7fc f813 	bl	80036d4 <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d902      	bls.n	80076be <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	73fb      	strb	r3, [r7, #15]
      break;
 80076bc:	e004      	b.n	80076c8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80076be:	f7ff fdaa 	bl	8007216 <LL_RCC_PLLSAI1_IsReady>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1f0      	bne.n	80076aa <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d137      	bne.n	800773e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80076ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	021b      	lsls	r3, r3, #8
 80076de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076e2:	4313      	orrs	r3, r2
 80076e4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80076e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076f8:	4313      	orrs	r3, r2
 80076fa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80076fc:	f7ff fd6d 	bl	80071da <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007700:	f7fb ffe8 	bl	80036d4 <HAL_GetTick>
 8007704:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007706:	e009      	b.n	800771c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007708:	f7fb ffe4 	bl	80036d4 <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	2b02      	cmp	r3, #2
 8007714:	d902      	bls.n	800771c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	73fb      	strb	r3, [r7, #15]
        break;
 800771a:	e004      	b.n	8007726 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800771c:	f7ff fd7b 	bl	8007216 <LL_RCC_PLLSAI1_IsReady>
 8007720:	4603      	mov	r3, r0
 8007722:	2b01      	cmp	r3, #1
 8007724:	d1f0      	bne.n	8007708 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007726:	7bfb      	ldrb	r3, [r7, #15]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d108      	bne.n	800773e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800772c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007730:	691a      	ldr	r2, [r3, #16]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800773a:	4313      	orrs	r3, r2
 800773c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800773e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d101      	bne.n	800775a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e090      	b.n	800787c <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007760:	b2db      	uxtb	r3, r3
 8007762:	2b00      	cmp	r3, #0
 8007764:	d106      	bne.n	8007774 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7fb fd36 	bl	80031e0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2202      	movs	r2, #2
 8007778:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	22ca      	movs	r2, #202	; 0xca
 8007782:	625a      	str	r2, [r3, #36]	; 0x24
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2253      	movs	r2, #83	; 0x53
 800778a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 f89f 	bl	80078d0 <RTC_EnterInitMode>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d009      	beq.n	80077ac <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	22ff      	movs	r2, #255	; 0xff
 800779e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2204      	movs	r2, #4
 80077a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e067      	b.n	800787c <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	6812      	ldr	r2, [r2, #0]
 80077b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80077ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077be:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	6899      	ldr	r1, [r3, #8]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	685a      	ldr	r2, [r3, #4]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	431a      	orrs	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	699b      	ldr	r3, [r3, #24]
 80077d4:	431a      	orrs	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	430a      	orrs	r2, r1
 80077dc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	68d2      	ldr	r2, [r2, #12]
 80077e6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6919      	ldr	r1, [r3, #16]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	041a      	lsls	r2, r3, #16
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68da      	ldr	r2, [r3, #12]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800780a:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f022 0203 	bic.w	r2, r2, #3
 800781a:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	69da      	ldr	r2, [r3, #28]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	431a      	orrs	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	430a      	orrs	r2, r1
 8007832:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f003 0320 	and.w	r3, r3, #32
 800783e:	2b00      	cmp	r3, #0
 8007840:	d113      	bne.n	800786a <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f81e 	bl	8007884 <HAL_RTC_WaitForSynchro>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00d      	beq.n	800786a <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	22ff      	movs	r2, #255	; 0xff
 8007854:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2204      	movs	r2, #4
 800785a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e008      	b.n	800787c <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	22ff      	movs	r2, #255	; 0xff
 8007870:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2201      	movs	r2, #1
 8007876:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800787a:	2300      	movs	r3, #0
  }
}
 800787c:	4618      	mov	r0, r3
 800787e:	3708      	adds	r7, #8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68da      	ldr	r2, [r3, #12]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800789a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800789c:	f7fb ff1a 	bl	80036d4 <HAL_GetTick>
 80078a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80078a2:	e009      	b.n	80078b8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80078a4:	f7fb ff16 	bl	80036d4 <HAL_GetTick>
 80078a8:	4602      	mov	r2, r0
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078b2:	d901      	bls.n	80078b8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80078b4:	2303      	movs	r3, #3
 80078b6:	e007      	b.n	80078c8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	f003 0320 	and.w	r3, r3, #32
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d0ee      	beq.n	80078a4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d119      	bne.n	800791a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f04f 32ff 	mov.w	r2, #4294967295
 80078ee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80078f0:	f7fb fef0 	bl	80036d4 <HAL_GetTick>
 80078f4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80078f6:	e009      	b.n	800790c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80078f8:	f7fb feec 	bl	80036d4 <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007906:	d901      	bls.n	800790c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007908:	2303      	movs	r3, #3
 800790a:	e007      	b.n	800791c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007916:	2b00      	cmp	r3, #0
 8007918:	d0ee      	beq.n	80078f8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b086      	sub	sp, #24
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d101      	bne.n	800793e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800793a:	2302      	movs	r3, #2
 800793c:	e0a8      	b.n	8007a90 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2201      	movs	r2, #1
 8007942:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2202      	movs	r2, #2
 800794a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	22ca      	movs	r2, #202	; 0xca
 8007954:	625a      	str	r2, [r3, #36]	; 0x24
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2253      	movs	r2, #83	; 0x53
 800795c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007968:	2b00      	cmp	r3, #0
 800796a:	d020      	beq.n	80079ae <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800796c:	f7fb feb2 	bl	80036d4 <HAL_GetTick>
 8007970:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007972:	e015      	b.n	80079a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007974:	f7fb feae 	bl	80036d4 <HAL_GetTick>
 8007978:	4602      	mov	r2, r0
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007982:	d90d      	bls.n	80079a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	22ff      	movs	r2, #255	; 0xff
 800798a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2203      	movs	r2, #3
 8007990:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800799c:	2303      	movs	r3, #3
 800799e:	e077      	b.n	8007a90 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	f003 0304 	and.w	r3, r3, #4
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d1e2      	bne.n	8007974 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	689a      	ldr	r2, [r3, #8]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079bc:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80079ce:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80079d0:	f7fb fe80 	bl	80036d4 <HAL_GetTick>
 80079d4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80079d6:	e015      	b.n	8007a04 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80079d8:	f7fb fe7c 	bl	80036d4 <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079e6:	d90d      	bls.n	8007a04 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	22ff      	movs	r2, #255	; 0xff
 80079ee:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2203      	movs	r2, #3
 80079f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e045      	b.n	8007a90 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	f003 0304 	and.w	r3, r3, #4
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d0e2      	beq.n	80079d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	689a      	ldr	r2, [r3, #8]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f022 0207 	bic.w	r2, r2, #7
 8007a28:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	6899      	ldr	r1, [r3, #8]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	430a      	orrs	r2, r1
 8007a38:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007a3a:	4b17      	ldr	r3, [pc, #92]	; (8007a98 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a40:	4a15      	ldr	r2, [pc, #84]	; (8007a98 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007a42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a46:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007a4a:	4b13      	ldr	r3, [pc, #76]	; (8007a98 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a12      	ldr	r2, [pc, #72]	; (8007a98 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007a50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a54:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	689a      	ldr	r2, [r3, #8]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a64:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	689a      	ldr	r2, [r3, #8]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a74:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	22ff      	movs	r2, #255	; 0xff
 8007a7c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3718      	adds	r7, #24
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	58000800 	.word	0x58000800

08007a9c <LL_RCC_GetUSARTClockSource>:
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aa8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4013      	ands	r3, r2
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <LL_RCC_GetLPUARTClockSource>:
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ac8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4013      	ands	r3, r2
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d101      	bne.n	8007aee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e042      	b.n	8007b74 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d106      	bne.n	8007b06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f7fb fba1 	bl	8003248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2224      	movs	r2, #36	; 0x24
 8007b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f022 0201 	bic.w	r2, r2, #1
 8007b1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f8c2 	bl	8007ca8 <UART_SetConfig>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d101      	bne.n	8007b2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e022      	b.n	8007b74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d002      	beq.n	8007b3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fade 	bl	80080f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	685a      	ldr	r2, [r3, #4]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	689a      	ldr	r2, [r3, #8]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f042 0201 	orr.w	r2, r2, #1
 8007b6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fb65 	bl	800823c <UART_CheckIdleState>
 8007b72:	4603      	mov	r3, r0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3708      	adds	r7, #8
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b08a      	sub	sp, #40	; 0x28
 8007b80:	af02      	add	r7, sp, #8
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	603b      	str	r3, [r7, #0]
 8007b88:	4613      	mov	r3, r2
 8007b8a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b92:	2b20      	cmp	r3, #32
 8007b94:	f040 8083 	bne.w	8007c9e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d002      	beq.n	8007ba4 <HAL_UART_Transmit+0x28>
 8007b9e:	88fb      	ldrh	r3, [r7, #6]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d101      	bne.n	8007ba8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e07b      	b.n	8007ca0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d101      	bne.n	8007bb6 <HAL_UART_Transmit+0x3a>
 8007bb2:	2302      	movs	r3, #2
 8007bb4:	e074      	b.n	8007ca0 <HAL_UART_Transmit+0x124>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2221      	movs	r2, #33	; 0x21
 8007bca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007bce:	f7fb fd81 	bl	80036d4 <HAL_GetTick>
 8007bd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	88fa      	ldrh	r2, [r7, #6]
 8007bd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	88fa      	ldrh	r2, [r7, #6]
 8007be0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bec:	d108      	bne.n	8007c00 <HAL_UART_Transmit+0x84>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d104      	bne.n	8007c00 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	61bb      	str	r3, [r7, #24]
 8007bfe:	e003      	b.n	8007c08 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c04:	2300      	movs	r3, #0
 8007c06:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007c10:	e02c      	b.n	8007c6c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	2180      	movs	r1, #128	; 0x80
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f000 fb58 	bl	80082d2 <UART_WaitOnFlagUntilTimeout>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d001      	beq.n	8007c2c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e039      	b.n	8007ca0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d10b      	bne.n	8007c4a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	461a      	mov	r2, r3
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	3302      	adds	r3, #2
 8007c46:	61bb      	str	r3, [r7, #24]
 8007c48:	e007      	b.n	8007c5a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	781a      	ldrb	r2, [r3, #0]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	3301      	adds	r3, #1
 8007c58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	3b01      	subs	r3, #1
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1cc      	bne.n	8007c12 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	2140      	movs	r1, #64	; 0x40
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f000 fb25 	bl	80082d2 <UART_WaitOnFlagUntilTimeout>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e006      	b.n	8007ca0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2220      	movs	r2, #32
 8007c96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	e000      	b.n	8007ca0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007c9e:	2302      	movs	r3, #2
  }
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3720      	adds	r7, #32
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cac:	b08c      	sub	sp, #48	; 0x30
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	689a      	ldr	r2, [r3, #8]
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	431a      	orrs	r2, r3
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	431a      	orrs	r2, r3
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	69db      	ldr	r3, [r3, #28]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	4baf      	ldr	r3, [pc, #700]	; (8007f94 <UART_SetConfig+0x2ec>)
 8007cd8:	4013      	ands	r3, r2
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	6812      	ldr	r2, [r2, #0]
 8007cde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ce0:	430b      	orrs	r3, r1
 8007ce2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	68da      	ldr	r2, [r3, #12]
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4aa4      	ldr	r2, [pc, #656]	; (8007f98 <UART_SetConfig+0x2f0>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d004      	beq.n	8007d14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d10:	4313      	orrs	r3, r2
 8007d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007d1e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007d22:	697a      	ldr	r2, [r7, #20]
 8007d24:	6812      	ldr	r2, [r2, #0]
 8007d26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d28:	430b      	orrs	r3, r1
 8007d2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d32:	f023 010f 	bic.w	r1, r3, #15
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	430a      	orrs	r2, r1
 8007d40:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a95      	ldr	r2, [pc, #596]	; (8007f9c <UART_SetConfig+0x2f4>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d125      	bne.n	8007d98 <UART_SetConfig+0xf0>
 8007d4c:	2003      	movs	r0, #3
 8007d4e:	f7ff fea5 	bl	8007a9c <LL_RCC_GetUSARTClockSource>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b03      	cmp	r3, #3
 8007d56:	d81b      	bhi.n	8007d90 <UART_SetConfig+0xe8>
 8007d58:	a201      	add	r2, pc, #4	; (adr r2, 8007d60 <UART_SetConfig+0xb8>)
 8007d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5e:	bf00      	nop
 8007d60:	08007d71 	.word	0x08007d71
 8007d64:	08007d81 	.word	0x08007d81
 8007d68:	08007d79 	.word	0x08007d79
 8007d6c:	08007d89 	.word	0x08007d89
 8007d70:	2301      	movs	r3, #1
 8007d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d76:	e042      	b.n	8007dfe <UART_SetConfig+0x156>
 8007d78:	2302      	movs	r3, #2
 8007d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d7e:	e03e      	b.n	8007dfe <UART_SetConfig+0x156>
 8007d80:	2304      	movs	r3, #4
 8007d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d86:	e03a      	b.n	8007dfe <UART_SetConfig+0x156>
 8007d88:	2308      	movs	r3, #8
 8007d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d8e:	e036      	b.n	8007dfe <UART_SetConfig+0x156>
 8007d90:	2310      	movs	r3, #16
 8007d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d96:	e032      	b.n	8007dfe <UART_SetConfig+0x156>
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a7e      	ldr	r2, [pc, #504]	; (8007f98 <UART_SetConfig+0x2f0>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d12a      	bne.n	8007df8 <UART_SetConfig+0x150>
 8007da2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007da6:	f7ff fe89 	bl	8007abc <LL_RCC_GetLPUARTClockSource>
 8007daa:	4603      	mov	r3, r0
 8007dac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007db0:	d01a      	beq.n	8007de8 <UART_SetConfig+0x140>
 8007db2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007db6:	d81b      	bhi.n	8007df0 <UART_SetConfig+0x148>
 8007db8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dbc:	d00c      	beq.n	8007dd8 <UART_SetConfig+0x130>
 8007dbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dc2:	d815      	bhi.n	8007df0 <UART_SetConfig+0x148>
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d003      	beq.n	8007dd0 <UART_SetConfig+0x128>
 8007dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dcc:	d008      	beq.n	8007de0 <UART_SetConfig+0x138>
 8007dce:	e00f      	b.n	8007df0 <UART_SetConfig+0x148>
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dd6:	e012      	b.n	8007dfe <UART_SetConfig+0x156>
 8007dd8:	2302      	movs	r3, #2
 8007dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dde:	e00e      	b.n	8007dfe <UART_SetConfig+0x156>
 8007de0:	2304      	movs	r3, #4
 8007de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007de6:	e00a      	b.n	8007dfe <UART_SetConfig+0x156>
 8007de8:	2308      	movs	r3, #8
 8007dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dee:	e006      	b.n	8007dfe <UART_SetConfig+0x156>
 8007df0:	2310      	movs	r3, #16
 8007df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007df6:	e002      	b.n	8007dfe <UART_SetConfig+0x156>
 8007df8:	2310      	movs	r3, #16
 8007dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a65      	ldr	r2, [pc, #404]	; (8007f98 <UART_SetConfig+0x2f0>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	f040 8097 	bne.w	8007f38 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e0e:	2b08      	cmp	r3, #8
 8007e10:	d823      	bhi.n	8007e5a <UART_SetConfig+0x1b2>
 8007e12:	a201      	add	r2, pc, #4	; (adr r2, 8007e18 <UART_SetConfig+0x170>)
 8007e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e18:	08007e3d 	.word	0x08007e3d
 8007e1c:	08007e5b 	.word	0x08007e5b
 8007e20:	08007e45 	.word	0x08007e45
 8007e24:	08007e5b 	.word	0x08007e5b
 8007e28:	08007e4b 	.word	0x08007e4b
 8007e2c:	08007e5b 	.word	0x08007e5b
 8007e30:	08007e5b 	.word	0x08007e5b
 8007e34:	08007e5b 	.word	0x08007e5b
 8007e38:	08007e53 	.word	0x08007e53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e3c:	f7fe ff80 	bl	8006d40 <HAL_RCC_GetPCLK1Freq>
 8007e40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e42:	e010      	b.n	8007e66 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e44:	4b56      	ldr	r3, [pc, #344]	; (8007fa0 <UART_SetConfig+0x2f8>)
 8007e46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e48:	e00d      	b.n	8007e66 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e4a:	f7fe fef9 	bl	8006c40 <HAL_RCC_GetSysClockFreq>
 8007e4e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e50:	e009      	b.n	8007e66 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e58:	e005      	b.n	8007e66 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007e64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f000 812b 	beq.w	80080c4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e72:	4a4c      	ldr	r2, [pc, #304]	; (8007fa4 <UART_SetConfig+0x2fc>)
 8007e74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e78:	461a      	mov	r2, r3
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e80:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	685a      	ldr	r2, [r3, #4]
 8007e86:	4613      	mov	r3, r2
 8007e88:	005b      	lsls	r3, r3, #1
 8007e8a:	4413      	add	r3, r2
 8007e8c:	69ba      	ldr	r2, [r7, #24]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d305      	bcc.n	8007e9e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e98:	69ba      	ldr	r2, [r7, #24]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d903      	bls.n	8007ea6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007ea4:	e10e      	b.n	80080c4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	60bb      	str	r3, [r7, #8]
 8007eac:	60fa      	str	r2, [r7, #12]
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb2:	4a3c      	ldr	r2, [pc, #240]	; (8007fa4 <UART_SetConfig+0x2fc>)
 8007eb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	2200      	movs	r2, #0
 8007ebc:	603b      	str	r3, [r7, #0]
 8007ebe:	607a      	str	r2, [r7, #4]
 8007ec0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ec4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ec8:	f7f8 fe96 	bl	8000bf8 <__aeabi_uldivmod>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	460b      	mov	r3, r1
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	f04f 0200 	mov.w	r2, #0
 8007ed8:	f04f 0300 	mov.w	r3, #0
 8007edc:	020b      	lsls	r3, r1, #8
 8007ede:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ee2:	0202      	lsls	r2, r0, #8
 8007ee4:	6979      	ldr	r1, [r7, #20]
 8007ee6:	6849      	ldr	r1, [r1, #4]
 8007ee8:	0849      	lsrs	r1, r1, #1
 8007eea:	2000      	movs	r0, #0
 8007eec:	460c      	mov	r4, r1
 8007eee:	4605      	mov	r5, r0
 8007ef0:	eb12 0804 	adds.w	r8, r2, r4
 8007ef4:	eb43 0905 	adc.w	r9, r3, r5
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	469a      	mov	sl, r3
 8007f00:	4693      	mov	fp, r2
 8007f02:	4652      	mov	r2, sl
 8007f04:	465b      	mov	r3, fp
 8007f06:	4640      	mov	r0, r8
 8007f08:	4649      	mov	r1, r9
 8007f0a:	f7f8 fe75 	bl	8000bf8 <__aeabi_uldivmod>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
 8007f12:	4613      	mov	r3, r2
 8007f14:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f16:	6a3b      	ldr	r3, [r7, #32]
 8007f18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f1c:	d308      	bcc.n	8007f30 <UART_SetConfig+0x288>
 8007f1e:	6a3b      	ldr	r3, [r7, #32]
 8007f20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f24:	d204      	bcs.n	8007f30 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	6a3a      	ldr	r2, [r7, #32]
 8007f2c:	60da      	str	r2, [r3, #12]
 8007f2e:	e0c9      	b.n	80080c4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007f36:	e0c5      	b.n	80080c4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	69db      	ldr	r3, [r3, #28]
 8007f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f40:	d16e      	bne.n	8008020 <UART_SetConfig+0x378>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007f42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f46:	3b01      	subs	r3, #1
 8007f48:	2b07      	cmp	r3, #7
 8007f4a:	d82d      	bhi.n	8007fa8 <UART_SetConfig+0x300>
 8007f4c:	a201      	add	r2, pc, #4	; (adr r2, 8007f54 <UART_SetConfig+0x2ac>)
 8007f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f52:	bf00      	nop
 8007f54:	08007f75 	.word	0x08007f75
 8007f58:	08007f7d 	.word	0x08007f7d
 8007f5c:	08007fa9 	.word	0x08007fa9
 8007f60:	08007f83 	.word	0x08007f83
 8007f64:	08007fa9 	.word	0x08007fa9
 8007f68:	08007fa9 	.word	0x08007fa9
 8007f6c:	08007fa9 	.word	0x08007fa9
 8007f70:	08007f8b 	.word	0x08007f8b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f74:	f7fe fefa 	bl	8006d6c <HAL_RCC_GetPCLK2Freq>
 8007f78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f7a:	e01b      	b.n	8007fb4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f7c:	4b08      	ldr	r3, [pc, #32]	; (8007fa0 <UART_SetConfig+0x2f8>)
 8007f7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f80:	e018      	b.n	8007fb4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f82:	f7fe fe5d 	bl	8006c40 <HAL_RCC_GetSysClockFreq>
 8007f86:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f88:	e014      	b.n	8007fb4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f90:	e010      	b.n	8007fb4 <UART_SetConfig+0x30c>
 8007f92:	bf00      	nop
 8007f94:	cfff69f3 	.word	0xcfff69f3
 8007f98:	40008000 	.word	0x40008000
 8007f9c:	40013800 	.word	0x40013800
 8007fa0:	00f42400 	.word	0x00f42400
 8007fa4:	0800f4c0 	.word	0x0800f4c0
      default:
        pclk = 0U;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007fb2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f000 8084 	beq.w	80080c4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc0:	4a4b      	ldr	r2, [pc, #300]	; (80080f0 <UART_SetConfig+0x448>)
 8007fc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fca:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fce:	005a      	lsls	r2, r3, #1
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	085b      	lsrs	r3, r3, #1
 8007fd6:	441a      	add	r2, r3
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fe4:	6a3b      	ldr	r3, [r7, #32]
 8007fe6:	2b0f      	cmp	r3, #15
 8007fe8:	d916      	bls.n	8008018 <UART_SetConfig+0x370>
 8007fea:	6a3b      	ldr	r3, [r7, #32]
 8007fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ff0:	d212      	bcs.n	8008018 <UART_SetConfig+0x370>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ff2:	6a3b      	ldr	r3, [r7, #32]
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	f023 030f 	bic.w	r3, r3, #15
 8007ffa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ffc:	6a3b      	ldr	r3, [r7, #32]
 8007ffe:	085b      	lsrs	r3, r3, #1
 8008000:	b29b      	uxth	r3, r3
 8008002:	f003 0307 	and.w	r3, r3, #7
 8008006:	b29a      	uxth	r2, r3
 8008008:	8bfb      	ldrh	r3, [r7, #30]
 800800a:	4313      	orrs	r3, r2
 800800c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	8bfa      	ldrh	r2, [r7, #30]
 8008014:	60da      	str	r2, [r3, #12]
 8008016:	e055      	b.n	80080c4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800801e:	e051      	b.n	80080c4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008020:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008024:	3b01      	subs	r3, #1
 8008026:	2b07      	cmp	r3, #7
 8008028:	d821      	bhi.n	800806e <UART_SetConfig+0x3c6>
 800802a:	a201      	add	r2, pc, #4	; (adr r2, 8008030 <UART_SetConfig+0x388>)
 800802c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008030:	08008051 	.word	0x08008051
 8008034:	08008059 	.word	0x08008059
 8008038:	0800806f 	.word	0x0800806f
 800803c:	0800805f 	.word	0x0800805f
 8008040:	0800806f 	.word	0x0800806f
 8008044:	0800806f 	.word	0x0800806f
 8008048:	0800806f 	.word	0x0800806f
 800804c:	08008067 	.word	0x08008067
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008050:	f7fe fe8c 	bl	8006d6c <HAL_RCC_GetPCLK2Freq>
 8008054:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008056:	e010      	b.n	800807a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008058:	4b26      	ldr	r3, [pc, #152]	; (80080f4 <UART_SetConfig+0x44c>)
 800805a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800805c:	e00d      	b.n	800807a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800805e:	f7fe fdef 	bl	8006c40 <HAL_RCC_GetSysClockFreq>
 8008062:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008064:	e009      	b.n	800807a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800806a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800806c:	e005      	b.n	800807a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800806e:	2300      	movs	r3, #0
 8008070:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008078:	bf00      	nop
    }

    if (pclk != 0U)
 800807a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807c:	2b00      	cmp	r3, #0
 800807e:	d021      	beq.n	80080c4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008084:	4a1a      	ldr	r2, [pc, #104]	; (80080f0 <UART_SetConfig+0x448>)
 8008086:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800808a:	461a      	mov	r2, r3
 800808c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	085b      	lsrs	r3, r3, #1
 8008098:	441a      	add	r2, r3
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080a6:	6a3b      	ldr	r3, [r7, #32]
 80080a8:	2b0f      	cmp	r3, #15
 80080aa:	d908      	bls.n	80080be <UART_SetConfig+0x416>
 80080ac:	6a3b      	ldr	r3, [r7, #32]
 80080ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080b2:	d204      	bcs.n	80080be <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = usartdiv;
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	6a3a      	ldr	r2, [r7, #32]
 80080ba:	60da      	str	r2, [r3, #12]
 80080bc:	e002      	b.n	80080c4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	2200      	movs	r2, #0
 80080d8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	2200      	movs	r2, #0
 80080de:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80080e0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3730      	adds	r7, #48	; 0x30
 80080e8:	46bd      	mov	sp, r7
 80080ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080ee:	bf00      	nop
 80080f0:	0800f4c0 	.word	0x0800f4c0
 80080f4:	00f42400 	.word	0x00f42400

080080f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008104:	f003 0301 	and.w	r3, r3, #1
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00a      	beq.n	8008122 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	430a      	orrs	r2, r1
 8008120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00a      	beq.n	8008144 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	430a      	orrs	r2, r1
 8008142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008148:	f003 0304 	and.w	r3, r3, #4
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00a      	beq.n	8008166 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	430a      	orrs	r2, r1
 8008164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816a:	f003 0308 	and.w	r3, r3, #8
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00a      	beq.n	8008188 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	430a      	orrs	r2, r1
 8008186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818c:	f003 0310 	and.w	r3, r3, #16
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00a      	beq.n	80081aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ae:	f003 0320 	and.w	r3, r3, #32
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00a      	beq.n	80081cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	430a      	orrs	r2, r1
 80081ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d01a      	beq.n	800820e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	430a      	orrs	r2, r1
 80081ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081f6:	d10a      	bne.n	800820e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	430a      	orrs	r2, r1
 800820c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00a      	beq.n	8008230 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	430a      	orrs	r2, r1
 800822e:	605a      	str	r2, [r3, #4]
  }
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b086      	sub	sp, #24
 8008240:	af02      	add	r7, sp, #8
 8008242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800824c:	f7fb fa42 	bl	80036d4 <HAL_GetTick>
 8008250:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0308 	and.w	r3, r3, #8
 800825c:	2b08      	cmp	r3, #8
 800825e:	d10e      	bne.n	800827e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008260:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2200      	movs	r2, #0
 800826a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 f82f 	bl	80082d2 <UART_WaitOnFlagUntilTimeout>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d001      	beq.n	800827e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	e025      	b.n	80082ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 0304 	and.w	r3, r3, #4
 8008288:	2b04      	cmp	r3, #4
 800828a:	d10e      	bne.n	80082aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800828c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008290:	9300      	str	r3, [sp, #0]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f819 	bl	80082d2 <UART_WaitOnFlagUntilTimeout>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d001      	beq.n	80082aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082a6:	2303      	movs	r3, #3
 80082a8:	e00f      	b.n	80082ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2220      	movs	r2, #32
 80082ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2220      	movs	r2, #32
 80082b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b09c      	sub	sp, #112	; 0x70
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	60f8      	str	r0, [r7, #12]
 80082da:	60b9      	str	r1, [r7, #8]
 80082dc:	603b      	str	r3, [r7, #0]
 80082de:	4613      	mov	r3, r2
 80082e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082e2:	e0a9      	b.n	8008438 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ea:	f000 80a5 	beq.w	8008438 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ee:	f7fb f9f1 	bl	80036d4 <HAL_GetTick>
 80082f2:	4602      	mov	r2, r0
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	1ad3      	subs	r3, r2, r3
 80082f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d302      	bcc.n	8008304 <UART_WaitOnFlagUntilTimeout+0x32>
 80082fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008300:	2b00      	cmp	r3, #0
 8008302:	d140      	bne.n	8008386 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800830c:	e853 3f00 	ldrex	r3, [r3]
 8008310:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008314:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008318:	667b      	str	r3, [r7, #100]	; 0x64
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	461a      	mov	r2, r3
 8008320:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008322:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008324:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008326:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008328:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800832a:	e841 2300 	strex	r3, r2, [r1]
 800832e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1e6      	bne.n	8008304 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	3308      	adds	r3, #8
 800833c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008340:	e853 3f00 	ldrex	r3, [r3]
 8008344:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008348:	f023 0301 	bic.w	r3, r3, #1
 800834c:	663b      	str	r3, [r7, #96]	; 0x60
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	3308      	adds	r3, #8
 8008354:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008356:	64ba      	str	r2, [r7, #72]	; 0x48
 8008358:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800835c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800835e:	e841 2300 	strex	r3, r2, [r1]
 8008362:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1e5      	bne.n	8008336 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2220      	movs	r2, #32
 800836e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2220      	movs	r2, #32
 8008376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	e069      	b.n	800845a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 0304 	and.w	r3, r3, #4
 8008390:	2b00      	cmp	r3, #0
 8008392:	d051      	beq.n	8008438 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	69db      	ldr	r3, [r3, #28]
 800839a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800839e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083a2:	d149      	bne.n	8008438 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b6:	e853 3f00 	ldrex	r3, [r3]
 80083ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	461a      	mov	r2, r3
 80083ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083cc:	637b      	str	r3, [r7, #52]	; 0x34
 80083ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083d4:	e841 2300 	strex	r3, r2, [r1]
 80083d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80083da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1e6      	bne.n	80083ae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	3308      	adds	r3, #8
 80083e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	e853 3f00 	ldrex	r3, [r3]
 80083ee:	613b      	str	r3, [r7, #16]
   return(result);
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	f023 0301 	bic.w	r3, r3, #1
 80083f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	3308      	adds	r3, #8
 80083fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008400:	623a      	str	r2, [r7, #32]
 8008402:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008404:	69f9      	ldr	r1, [r7, #28]
 8008406:	6a3a      	ldr	r2, [r7, #32]
 8008408:	e841 2300 	strex	r3, r2, [r1]
 800840c:	61bb      	str	r3, [r7, #24]
   return(result);
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d1e5      	bne.n	80083e0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2220      	movs	r2, #32
 8008418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2220      	movs	r2, #32
 8008420:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2220      	movs	r2, #32
 8008428:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2200      	movs	r2, #0
 8008430:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008434:	2303      	movs	r3, #3
 8008436:	e010      	b.n	800845a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	69da      	ldr	r2, [r3, #28]
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	4013      	ands	r3, r2
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	429a      	cmp	r2, r3
 8008446:	bf0c      	ite	eq
 8008448:	2301      	moveq	r3, #1
 800844a:	2300      	movne	r3, #0
 800844c:	b2db      	uxtb	r3, r3
 800844e:	461a      	mov	r2, r3
 8008450:	79fb      	ldrb	r3, [r7, #7]
 8008452:	429a      	cmp	r2, r3
 8008454:	f43f af46 	beq.w	80082e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3770      	adds	r7, #112	; 0x70
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008462:	b480      	push	{r7}
 8008464:	b085      	sub	sp, #20
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008470:	2b01      	cmp	r3, #1
 8008472:	d101      	bne.n	8008478 <HAL_UARTEx_DisableFifoMode+0x16>
 8008474:	2302      	movs	r3, #2
 8008476:	e027      	b.n	80084c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2224      	movs	r2, #36	; 0x24
 8008484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f022 0201 	bic.w	r2, r2, #1
 800849e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80084a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2220      	movs	r2, #32
 80084ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d101      	bne.n	80084ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80084e8:	2302      	movs	r3, #2
 80084ea:	e02d      	b.n	8008548 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2224      	movs	r2, #36	; 0x24
 80084f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f022 0201 	bic.w	r2, r2, #1
 8008512:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	683a      	ldr	r2, [r7, #0]
 8008524:	430a      	orrs	r2, r1
 8008526:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 f84f 	bl	80085cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2220      	movs	r2, #32
 800853a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008560:	2b01      	cmp	r3, #1
 8008562:	d101      	bne.n	8008568 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008564:	2302      	movs	r3, #2
 8008566:	e02d      	b.n	80085c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2224      	movs	r2, #36	; 0x24
 8008574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f022 0201 	bic.w	r2, r2, #1
 800858e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	683a      	ldr	r2, [r7, #0]
 80085a0:	430a      	orrs	r2, r1
 80085a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f811 	bl	80085cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2220      	movs	r2, #32
 80085b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d108      	bne.n	80085ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80085ec:	e031      	b.n	8008652 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80085ee:	2308      	movs	r3, #8
 80085f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80085f2:	2308      	movs	r3, #8
 80085f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	0e5b      	lsrs	r3, r3, #25
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	f003 0307 	and.w	r3, r3, #7
 8008604:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	0f5b      	lsrs	r3, r3, #29
 800860e:	b2db      	uxtb	r3, r3
 8008610:	f003 0307 	and.w	r3, r3, #7
 8008614:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008616:	7bbb      	ldrb	r3, [r7, #14]
 8008618:	7b3a      	ldrb	r2, [r7, #12]
 800861a:	4911      	ldr	r1, [pc, #68]	; (8008660 <UARTEx_SetNbDataToProcess+0x94>)
 800861c:	5c8a      	ldrb	r2, [r1, r2]
 800861e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008622:	7b3a      	ldrb	r2, [r7, #12]
 8008624:	490f      	ldr	r1, [pc, #60]	; (8008664 <UARTEx_SetNbDataToProcess+0x98>)
 8008626:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008628:	fb93 f3f2 	sdiv	r3, r3, r2
 800862c:	b29a      	uxth	r2, r3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008634:	7bfb      	ldrb	r3, [r7, #15]
 8008636:	7b7a      	ldrb	r2, [r7, #13]
 8008638:	4909      	ldr	r1, [pc, #36]	; (8008660 <UARTEx_SetNbDataToProcess+0x94>)
 800863a:	5c8a      	ldrb	r2, [r1, r2]
 800863c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008640:	7b7a      	ldrb	r2, [r7, #13]
 8008642:	4908      	ldr	r1, [pc, #32]	; (8008664 <UARTEx_SetNbDataToProcess+0x98>)
 8008644:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008646:	fb93 f3f2 	sdiv	r3, r3, r2
 800864a:	b29a      	uxth	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008652:	bf00      	nop
 8008654:	3714      	adds	r7, #20
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	0800f4d8 	.word	0x0800f4d8
 8008664:	0800f4e0 	.word	0x0800f4e0

08008668 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b088      	sub	sp, #32
 800866c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800866e:	2300      	movs	r3, #0
 8008670:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008672:	f107 0308 	add.w	r3, r7, #8
 8008676:	2218      	movs	r2, #24
 8008678:	2100      	movs	r1, #0
 800867a:	4618      	mov	r0, r3
 800867c:	f001 f8d8 	bl	8009830 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008680:	233f      	movs	r3, #63	; 0x3f
 8008682:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8008684:	2381      	movs	r3, #129	; 0x81
 8008686:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008688:	1dfb      	adds	r3, r7, #7
 800868a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800868c:	2301      	movs	r3, #1
 800868e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008690:	f107 0308 	add.w	r3, r7, #8
 8008694:	2100      	movs	r1, #0
 8008696:	4618      	mov	r0, r3
 8008698:	f001 fb54 	bl	8009d44 <hci_send_req>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	da01      	bge.n	80086a6 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80086a2:	23ff      	movs	r3, #255	; 0xff
 80086a4:	e000      	b.n	80086a8 <aci_gap_set_non_discoverable+0x40>
  return status;
 80086a6:	79fb      	ldrb	r3, [r7, #7]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3720      	adds	r7, #32
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80086b0:	b5b0      	push	{r4, r5, r7, lr}
 80086b2:	b0ce      	sub	sp, #312	; 0x138
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	4605      	mov	r5, r0
 80086b8:	460c      	mov	r4, r1
 80086ba:	4610      	mov	r0, r2
 80086bc:	4619      	mov	r1, r3
 80086be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80086c2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80086c6:	462a      	mov	r2, r5
 80086c8:	701a      	strb	r2, [r3, #0]
 80086ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80086ce:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80086d2:	4622      	mov	r2, r4
 80086d4:	801a      	strh	r2, [r3, #0]
 80086d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80086da:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80086de:	4602      	mov	r2, r0
 80086e0:	801a      	strh	r2, [r3, #0]
 80086e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80086e6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80086ea:	460a      	mov	r2, r1
 80086ec:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80086ee:	f107 0310 	add.w	r3, r7, #16
 80086f2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80086f6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80086fa:	3308      	adds	r3, #8
 80086fc:	f107 0210 	add.w	r2, r7, #16
 8008700:	4413      	add	r3, r2
 8008702:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8008706:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800870a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800870e:	4413      	add	r3, r2
 8008710:	3309      	adds	r3, #9
 8008712:	f107 0210 	add.w	r2, r7, #16
 8008716:	4413      	add	r3, r2
 8008718:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800871c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008720:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008724:	2200      	movs	r2, #0
 8008726:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008728:	2300      	movs	r3, #0
 800872a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800872e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008732:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008736:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800873a:	7812      	ldrb	r2, [r2, #0]
 800873c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800873e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008742:	3301      	adds	r3, #1
 8008744:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8008748:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800874c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008750:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8008754:	8812      	ldrh	r2, [r2, #0]
 8008756:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800875a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800875e:	3302      	adds	r3, #2
 8008760:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8008764:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008768:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800876c:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8008770:	8812      	ldrh	r2, [r2, #0]
 8008772:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8008776:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800877a:	3302      	adds	r3, #2
 800877c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8008780:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008784:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008788:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800878c:	7812      	ldrb	r2, [r2, #0]
 800878e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008790:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008794:	3301      	adds	r3, #1
 8008796:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800879a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800879e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80087a2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80087a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087a8:	3301      	adds	r3, #1
 80087aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80087ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80087b2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80087b6:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80087b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087bc:	3301      	adds	r3, #1
 80087be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80087c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80087c6:	3308      	adds	r3, #8
 80087c8:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80087cc:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80087d0:	4618      	mov	r0, r3
 80087d2:	f001 f81d 	bl	8009810 <Osal_MemCpy>
    index_input += Local_Name_Length;
 80087d6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80087da:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80087de:	4413      	add	r3, r2
 80087e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80087e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80087e8:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80087ec:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80087ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087f2:	3301      	adds	r3, #1
 80087f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80087f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80087fc:	3301      	adds	r3, #1
 80087fe:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008802:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8008806:	4618      	mov	r0, r3
 8008808:	f001 f802 	bl	8009810 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800880c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008810:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008814:	4413      	add	r3, r2
 8008816:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800881a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800881e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8008822:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008824:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008828:	3302      	adds	r3, #2
 800882a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800882e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008832:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8008836:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8008838:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800883c:	3302      	adds	r3, #2
 800883e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008842:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008846:	2218      	movs	r2, #24
 8008848:	2100      	movs	r1, #0
 800884a:	4618      	mov	r0, r3
 800884c:	f000 fff0 	bl	8009830 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008850:	233f      	movs	r3, #63	; 0x3f
 8008852:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8008856:	2383      	movs	r3, #131	; 0x83
 8008858:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800885c:	f107 0310 	add.w	r3, r7, #16
 8008860:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008864:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008868:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800886c:	f107 030f 	add.w	r3, r7, #15
 8008870:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008874:	2301      	movs	r3, #1
 8008876:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800887a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800887e:	2100      	movs	r1, #0
 8008880:	4618      	mov	r0, r3
 8008882:	f001 fa5f 	bl	8009d44 <hci_send_req>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	da01      	bge.n	8008890 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800888c:	23ff      	movs	r3, #255	; 0xff
 800888e:	e004      	b.n	800889a <aci_gap_set_discoverable+0x1ea>
  return status;
 8008890:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008894:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008898:	781b      	ldrb	r3, [r3, #0]
}
 800889a:	4618      	mov	r0, r3
 800889c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bdb0      	pop	{r4, r5, r7, pc}

080088a4 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b0cc      	sub	sp, #304	; 0x130
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	4602      	mov	r2, r0
 80088ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088b0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80088b4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80088b6:	f107 0310 	add.w	r3, r7, #16
 80088ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80088be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088c2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80088c6:	2200      	movs	r2, #0
 80088c8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80088ca:	2300      	movs	r3, #0
 80088cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80088d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80088d8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80088dc:	7812      	ldrb	r2, [r2, #0]
 80088de:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80088e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088e4:	3301      	adds	r3, #1
 80088e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80088ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80088ee:	2218      	movs	r2, #24
 80088f0:	2100      	movs	r1, #0
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 ff9c 	bl	8009830 <Osal_MemSet>
  rq.ogf = 0x3f;
 80088f8:	233f      	movs	r3, #63	; 0x3f
 80088fa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80088fe:	2385      	movs	r3, #133	; 0x85
 8008900:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008904:	f107 0310 	add.w	r3, r7, #16
 8008908:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800890c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008910:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008914:	f107 030f 	add.w	r3, r7, #15
 8008918:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800891c:	2301      	movs	r3, #1
 800891e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008922:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008926:	2100      	movs	r1, #0
 8008928:	4618      	mov	r0, r3
 800892a:	f001 fa0b 	bl	8009d44 <hci_send_req>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	da01      	bge.n	8008938 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8008934:	23ff      	movs	r3, #255	; 0xff
 8008936:	e004      	b.n	8008942 <aci_gap_set_io_capability+0x9e>
  return status;
 8008938:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800893c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008940:	781b      	ldrb	r3, [r3, #0]
}
 8008942:	4618      	mov	r0, r3
 8008944:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800894c:	b5b0      	push	{r4, r5, r7, lr}
 800894e:	b0cc      	sub	sp, #304	; 0x130
 8008950:	af00      	add	r7, sp, #0
 8008952:	4605      	mov	r5, r0
 8008954:	460c      	mov	r4, r1
 8008956:	4610      	mov	r0, r2
 8008958:	4619      	mov	r1, r3
 800895a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800895e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008962:	462a      	mov	r2, r5
 8008964:	701a      	strb	r2, [r3, #0]
 8008966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800896a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800896e:	4622      	mov	r2, r4
 8008970:	701a      	strb	r2, [r3, #0]
 8008972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008976:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800897a:	4602      	mov	r2, r0
 800897c:	701a      	strb	r2, [r3, #0]
 800897e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008982:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008986:	460a      	mov	r2, r1
 8008988:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800898a:	f107 0310 	add.w	r3, r7, #16
 800898e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008996:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800899a:	2200      	movs	r2, #0
 800899c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800899e:	2300      	movs	r3, #0
 80089a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80089a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80089ac:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80089b0:	7812      	ldrb	r2, [r2, #0]
 80089b2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80089b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089b8:	3301      	adds	r3, #1
 80089ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 80089be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80089c6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80089ca:	7812      	ldrb	r2, [r2, #0]
 80089cc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80089ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089d2:	3301      	adds	r3, #1
 80089d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80089d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80089e0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80089e4:	7812      	ldrb	r2, [r2, #0]
 80089e6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80089e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089ec:	3301      	adds	r3, #1
 80089ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80089f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80089fa:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80089fe:	7812      	ldrb	r2, [r2, #0]
 8008a00:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008a02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a06:	3301      	adds	r3, #1
 8008a08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8008a0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a10:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8008a14:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008a16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8008a20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a24:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8008a28:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008a2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a2e:	3301      	adds	r3, #1
 8008a30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8008a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a38:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008a3c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008a3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a42:	3301      	adds	r3, #1
 8008a44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8008a48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a4c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008a50:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008a54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a58:	3304      	adds	r3, #4
 8008a5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8008a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a62:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008a66:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008a68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008a72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a76:	2218      	movs	r2, #24
 8008a78:	2100      	movs	r1, #0
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f000 fed8 	bl	8009830 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008a80:	233f      	movs	r3, #63	; 0x3f
 8008a82:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8008a86:	2386      	movs	r3, #134	; 0x86
 8008a88:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008a8c:	f107 0310 	add.w	r3, r7, #16
 8008a90:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008a94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a98:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008a9c:	f107 030f 	add.w	r3, r7, #15
 8008aa0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008aaa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008aae:	2100      	movs	r1, #0
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f001 f947 	bl	8009d44 <hci_send_req>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	da01      	bge.n	8008ac0 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8008abc:	23ff      	movs	r3, #255	; 0xff
 8008abe:	e004      	b.n	8008aca <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8008ac0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ac4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008ac8:	781b      	ldrb	r3, [r3, #0]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bdb0      	pop	{r4, r5, r7, pc}

08008ad4 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b0cc      	sub	sp, #304	; 0x130
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	4602      	mov	r2, r0
 8008adc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ae0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ae4:	6019      	str	r1, [r3, #0]
 8008ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aea:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008aee:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8008af0:	f107 0310 	add.w	r3, r7, #16
 8008af4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008afc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008b00:	2200      	movs	r2, #0
 8008b02:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008b04:	2300      	movs	r3, #0
 8008b06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008b0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b0e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b12:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008b16:	8812      	ldrh	r2, [r2, #0]
 8008b18:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008b1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b1e:	3302      	adds	r3, #2
 8008b20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8008b24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b28:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b2c:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8008b30:	6812      	ldr	r2, [r2, #0]
 8008b32:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8008b36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b3a:	3304      	adds	r3, #4
 8008b3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b44:	2218      	movs	r2, #24
 8008b46:	2100      	movs	r1, #0
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f000 fe71 	bl	8009830 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008b4e:	233f      	movs	r3, #63	; 0x3f
 8008b50:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8008b54:	2388      	movs	r3, #136	; 0x88
 8008b56:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008b5a:	f107 0310 	add.w	r3, r7, #16
 8008b5e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008b62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008b6a:	f107 030f 	add.w	r3, r7, #15
 8008b6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008b72:	2301      	movs	r3, #1
 8008b74:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008b78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b7c:	2100      	movs	r1, #0
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f001 f8e0 	bl	8009d44 <hci_send_req>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	da01      	bge.n	8008b8e <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8008b8a:	23ff      	movs	r3, #255	; 0xff
 8008b8c:	e004      	b.n	8008b98 <aci_gap_pass_key_resp+0xc4>
  return status;
 8008b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b92:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008b96:	781b      	ldrb	r3, [r3, #0]
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8008ba2:	b590      	push	{r4, r7, lr}
 8008ba4:	b0cd      	sub	sp, #308	; 0x134
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	4604      	mov	r4, r0
 8008baa:	4608      	mov	r0, r1
 8008bac:	4611      	mov	r1, r2
 8008bae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008bb2:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8008bb6:	6013      	str	r3, [r2, #0]
 8008bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bbc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008bc0:	4622      	mov	r2, r4
 8008bc2:	701a      	strb	r2, [r3, #0]
 8008bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bc8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008bcc:	4602      	mov	r2, r0
 8008bce:	701a      	strb	r2, [r3, #0]
 8008bd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bd4:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008bd8:	460a      	mov	r2, r1
 8008bda:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8008bdc:	f107 0310 	add.w	r3, r7, #16
 8008be0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008be4:	f107 0308 	add.w	r3, r7, #8
 8008be8:	2207      	movs	r2, #7
 8008bea:	2100      	movs	r1, #0
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 fe1f 	bl	8009830 <Osal_MemSet>
  int index_input = 0;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8008bf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bfc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c00:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008c04:	7812      	ldrb	r2, [r2, #0]
 8008c06:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008c08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8008c12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c16:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c1a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008c1e:	7812      	ldrb	r2, [r2, #0]
 8008c20:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008c22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c26:	3301      	adds	r3, #1
 8008c28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8008c2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c30:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c34:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008c38:	7812      	ldrb	r2, [r2, #0]
 8008c3a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008c3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c40:	3301      	adds	r3, #1
 8008c42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008c46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c4a:	2218      	movs	r2, #24
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f000 fdee 	bl	8009830 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008c54:	233f      	movs	r3, #63	; 0x3f
 8008c56:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8008c5a:	238a      	movs	r3, #138	; 0x8a
 8008c5c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008c60:	f107 0310 	add.w	r3, r7, #16
 8008c64:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008c68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c6c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008c70:	f107 0308 	add.w	r3, r7, #8
 8008c74:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008c78:	2307      	movs	r3, #7
 8008c7a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008c7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c82:	2100      	movs	r1, #0
 8008c84:	4618      	mov	r0, r3
 8008c86:	f001 f85d 	bl	8009d44 <hci_send_req>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	da01      	bge.n	8008c94 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8008c90:	23ff      	movs	r3, #255	; 0xff
 8008c92:	e02e      	b.n	8008cf2 <aci_gap_init+0x150>
  if ( resp.Status )
 8008c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c98:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d005      	beq.n	8008cae <aci_gap_init+0x10c>
    return resp.Status;
 8008ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ca6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	e021      	b.n	8008cf2 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8008cae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cb2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008cb6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008cba:	b29a      	uxth	r2, r3
 8008cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8008cc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ccc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008cd0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008cda:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8008cdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ce0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008ce4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008cee:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd90      	pop	{r4, r7, pc}

08008cfc <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b0cc      	sub	sp, #304	; 0x130
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	4602      	mov	r2, r0
 8008d04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d0c:	6019      	str	r1, [r3, #0]
 8008d0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d12:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008d16:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8008d18:	f107 0310 	add.w	r3, r7, #16
 8008d1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008d20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d24:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008d28:	2200      	movs	r2, #0
 8008d2a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8008d32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d36:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d3a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008d3e:	7812      	ldrb	r2, [r2, #0]
 8008d40:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008d42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d46:	3301      	adds	r3, #1
 8008d48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8008d4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d50:	1c58      	adds	r0, r3, #1
 8008d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d56:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008d5a:	781a      	ldrb	r2, [r3, #0]
 8008d5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d64:	6819      	ldr	r1, [r3, #0]
 8008d66:	f000 fd53 	bl	8009810 <Osal_MemCpy>
  index_input += AdvDataLen;
 8008d6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d6e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008d78:	4413      	add	r3, r2
 8008d7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008d7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008d82:	2218      	movs	r2, #24
 8008d84:	2100      	movs	r1, #0
 8008d86:	4618      	mov	r0, r3
 8008d88:	f000 fd52 	bl	8009830 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008d8c:	233f      	movs	r3, #63	; 0x3f
 8008d8e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8008d92:	238e      	movs	r3, #142	; 0x8e
 8008d94:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008d98:	f107 0310 	add.w	r3, r7, #16
 8008d9c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008da0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008da4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008da8:	f107 030f 	add.w	r3, r7, #15
 8008dac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008db0:	2301      	movs	r3, #1
 8008db2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008db6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008dba:	2100      	movs	r1, #0
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f000 ffc1 	bl	8009d44 <hci_send_req>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	da01      	bge.n	8008dcc <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8008dc8:	23ff      	movs	r3, #255	; 0xff
 8008dca:	e004      	b.n	8008dd6 <aci_gap_update_adv_data+0xda>
  return status;
 8008dcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dd0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008dd4:	781b      	ldrb	r3, [r3, #0]
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b088      	sub	sp, #32
 8008de4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008de6:	2300      	movs	r3, #0
 8008de8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008dea:	f107 0308 	add.w	r3, r7, #8
 8008dee:	2218      	movs	r2, #24
 8008df0:	2100      	movs	r1, #0
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 fd1c 	bl	8009830 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008df8:	233f      	movs	r3, #63	; 0x3f
 8008dfa:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8008dfc:	2392      	movs	r3, #146	; 0x92
 8008dfe:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008e00:	1dfb      	adds	r3, r7, #7
 8008e02:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008e04:	2301      	movs	r3, #1
 8008e06:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008e08:	f107 0308 	add.w	r3, r7, #8
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f000 ff98 	bl	8009d44 <hci_send_req>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	da01      	bge.n	8008e1e <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008e1a:	23ff      	movs	r3, #255	; 0xff
 8008e1c:	e000      	b.n	8008e20 <aci_gap_configure_whitelist+0x40>
  return status;
 8008e1e:	79fb      	ldrb	r3, [r7, #7]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3720      	adds	r7, #32
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b0cc      	sub	sp, #304	; 0x130
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	4602      	mov	r2, r0
 8008e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e34:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008e38:	801a      	strh	r2, [r3, #0]
 8008e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e3e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008e42:	460a      	mov	r2, r1
 8008e44:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8008e46:	f107 0310 	add.w	r3, r7, #16
 8008e4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e52:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008e56:	2200      	movs	r2, #0
 8008e58:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008e60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e64:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e68:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008e6c:	8812      	ldrh	r2, [r2, #0]
 8008e6e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008e70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e74:	3302      	adds	r3, #2
 8008e76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8008e7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e7e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e82:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008e86:	7812      	ldrb	r2, [r2, #0]
 8008e88:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008e8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e8e:	3301      	adds	r3, #1
 8008e90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008e94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e98:	2218      	movs	r2, #24
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f000 fcc7 	bl	8009830 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008ea2:	233f      	movs	r3, #63	; 0x3f
 8008ea4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8008ea8:	23a5      	movs	r3, #165	; 0xa5
 8008eaa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008eae:	f107 0310 	add.w	r3, r7, #16
 8008eb2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008eb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008eba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008ebe:	f107 030f 	add.w	r3, r7, #15
 8008ec2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008ecc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f000 ff36 	bl	8009d44 <hci_send_req>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	da01      	bge.n	8008ee2 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8008ede:	23ff      	movs	r3, #255	; 0xff
 8008ee0:	e004      	b.n	8008eec <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8008ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ee6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008eea:	781b      	ldrb	r3, [r3, #0]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b088      	sub	sp, #32
 8008efa:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008efc:	2300      	movs	r3, #0
 8008efe:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008f00:	f107 0308 	add.w	r3, r7, #8
 8008f04:	2218      	movs	r2, #24
 8008f06:	2100      	movs	r1, #0
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f000 fc91 	bl	8009830 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008f0e:	233f      	movs	r3, #63	; 0x3f
 8008f10:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8008f12:	f240 1301 	movw	r3, #257	; 0x101
 8008f16:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008f18:	1dfb      	adds	r3, r7, #7
 8008f1a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008f20:	f107 0308 	add.w	r3, r7, #8
 8008f24:	2100      	movs	r1, #0
 8008f26:	4618      	mov	r0, r3
 8008f28:	f000 ff0c 	bl	8009d44 <hci_send_req>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	da01      	bge.n	8008f36 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8008f32:	23ff      	movs	r3, #255	; 0xff
 8008f34:	e000      	b.n	8008f38 <aci_gatt_init+0x42>
  return status;
 8008f36:	79fb      	ldrb	r3, [r7, #7]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3720      	adds	r7, #32
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8008f40:	b590      	push	{r4, r7, lr}
 8008f42:	b0cf      	sub	sp, #316	; 0x13c
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	4604      	mov	r4, r0
 8008f48:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8008f4c:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8008f50:	6001      	str	r1, [r0, #0]
 8008f52:	4610      	mov	r0, r2
 8008f54:	4619      	mov	r1, r3
 8008f56:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008f5a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008f5e:	4622      	mov	r2, r4
 8008f60:	701a      	strb	r2, [r3, #0]
 8008f62:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008f66:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	701a      	strb	r2, [r3, #0]
 8008f6e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008f72:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008f76:	460a      	mov	r2, r1
 8008f78:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8008f7a:	f107 0310 	add.w	r3, r7, #16
 8008f7e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8008f82:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008f86:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d00a      	beq.n	8008fa6 <aci_gatt_add_service+0x66>
 8008f90:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008f94:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	d101      	bne.n	8008fa2 <aci_gatt_add_service+0x62>
 8008f9e:	2311      	movs	r3, #17
 8008fa0:	e002      	b.n	8008fa8 <aci_gatt_add_service+0x68>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e000      	b.n	8008fa8 <aci_gatt_add_service+0x68>
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	f107 0210 	add.w	r2, r7, #16
 8008fac:	4413      	add	r3, r2
 8008fae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008fb2:	f107 030c 	add.w	r3, r7, #12
 8008fb6:	2203      	movs	r2, #3
 8008fb8:	2100      	movs	r1, #0
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 fc38 	bl	8009830 <Osal_MemSet>
  int index_input = 0;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8008fc6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008fca:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008fce:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8008fd2:	7812      	ldrb	r2, [r2, #0]
 8008fd4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008fd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fda:	3301      	adds	r3, #1
 8008fdc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8008fe0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008fe4:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d002      	beq.n	8008ff4 <aci_gatt_add_service+0xb4>
 8008fee:	2b02      	cmp	r3, #2
 8008ff0:	d004      	beq.n	8008ffc <aci_gatt_add_service+0xbc>
 8008ff2:	e007      	b.n	8009004 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008ffa:	e005      	b.n	8009008 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8008ffc:	2310      	movs	r3, #16
 8008ffe:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009002:	e001      	b.n	8009008 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8009004:	2397      	movs	r3, #151	; 0x97
 8009006:	e06c      	b.n	80090e2 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8009008:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800900c:	1c58      	adds	r0, r3, #1
 800900e:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8009012:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009016:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800901a:	6819      	ldr	r1, [r3, #0]
 800901c:	f000 fbf8 	bl	8009810 <Osal_MemCpy>
    index_input += size;
 8009020:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009024:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009028:	4413      	add	r3, r2
 800902a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800902e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009032:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009036:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800903a:	7812      	ldrb	r2, [r2, #0]
 800903c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800903e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009042:	3301      	adds	r3, #1
 8009044:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8009048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800904c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009050:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8009054:	7812      	ldrb	r2, [r2, #0]
 8009056:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009058:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800905c:	3301      	adds	r3, #1
 800905e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009062:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009066:	2218      	movs	r2, #24
 8009068:	2100      	movs	r1, #0
 800906a:	4618      	mov	r0, r3
 800906c:	f000 fbe0 	bl	8009830 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009070:	233f      	movs	r3, #63	; 0x3f
 8009072:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8009076:	f44f 7381 	mov.w	r3, #258	; 0x102
 800907a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800907e:	f107 0310 	add.w	r3, r7, #16
 8009082:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009086:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800908a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800908e:	f107 030c 	add.w	r3, r7, #12
 8009092:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8009096:	2303      	movs	r3, #3
 8009098:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800909c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80090a0:	2100      	movs	r1, #0
 80090a2:	4618      	mov	r0, r3
 80090a4:	f000 fe4e 	bl	8009d44 <hci_send_req>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	da01      	bge.n	80090b2 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80090ae:	23ff      	movs	r3, #255	; 0xff
 80090b0:	e017      	b.n	80090e2 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80090b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80090b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d005      	beq.n	80090cc <aci_gatt_add_service+0x18c>
    return resp.Status;
 80090c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80090c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	e00a      	b.n	80090e2 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80090cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80090d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090d4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80090d8:	b29a      	uxth	r2, r3
 80090da:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80090de:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd90      	pop	{r4, r7, pc}

080090ec <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80090ec:	b590      	push	{r4, r7, lr}
 80090ee:	b0d1      	sub	sp, #324	; 0x144
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	4604      	mov	r4, r0
 80090f4:	4608      	mov	r0, r1
 80090f6:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80090fa:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 80090fe:	600a      	str	r2, [r1, #0]
 8009100:	4619      	mov	r1, r3
 8009102:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009106:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800910a:	4622      	mov	r2, r4
 800910c:	801a      	strh	r2, [r3, #0]
 800910e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009112:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009116:	4602      	mov	r2, r0
 8009118:	701a      	strb	r2, [r3, #0]
 800911a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800911e:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8009122:	460a      	mov	r2, r1
 8009124:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8009126:	f107 0318 	add.w	r3, r7, #24
 800912a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800912e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009132:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	2b01      	cmp	r3, #1
 800913a:	d00a      	beq.n	8009152 <aci_gatt_add_char+0x66>
 800913c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009140:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	2b02      	cmp	r3, #2
 8009148:	d101      	bne.n	800914e <aci_gatt_add_char+0x62>
 800914a:	2313      	movs	r3, #19
 800914c:	e002      	b.n	8009154 <aci_gatt_add_char+0x68>
 800914e:	2303      	movs	r3, #3
 8009150:	e000      	b.n	8009154 <aci_gatt_add_char+0x68>
 8009152:	2305      	movs	r3, #5
 8009154:	f107 0218 	add.w	r2, r7, #24
 8009158:	4413      	add	r3, r2
 800915a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800915e:	f107 0314 	add.w	r3, r7, #20
 8009162:	2203      	movs	r2, #3
 8009164:	2100      	movs	r1, #0
 8009166:	4618      	mov	r0, r3
 8009168:	f000 fb62 	bl	8009830 <Osal_MemSet>
  int index_input = 0;
 800916c:	2300      	movs	r3, #0
 800916e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8009172:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009176:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800917a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800917e:	8812      	ldrh	r2, [r2, #0]
 8009180:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009182:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009186:	3302      	adds	r3, #2
 8009188:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800918c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009190:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009194:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8009198:	7812      	ldrb	r2, [r2, #0]
 800919a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800919c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80091a0:	3301      	adds	r3, #1
 80091a2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80091a6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80091aa:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d002      	beq.n	80091ba <aci_gatt_add_char+0xce>
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	d004      	beq.n	80091c2 <aci_gatt_add_char+0xd6>
 80091b8:	e007      	b.n	80091ca <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80091ba:	2302      	movs	r3, #2
 80091bc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80091c0:	e005      	b.n	80091ce <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80091c2:	2310      	movs	r3, #16
 80091c4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80091c8:	e001      	b.n	80091ce <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80091ca:	2397      	movs	r3, #151	; 0x97
 80091cc:	e091      	b.n	80092f2 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80091ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80091d2:	1cd8      	adds	r0, r3, #3
 80091d4:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80091d8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80091dc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80091e0:	6819      	ldr	r1, [r3, #0]
 80091e2:	f000 fb15 	bl	8009810 <Osal_MemCpy>
    index_input += size;
 80091e6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80091ea:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80091ee:	4413      	add	r3, r2
 80091f0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80091f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80091f8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80091fc:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8009200:	8812      	ldrh	r2, [r2, #0]
 8009202:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009204:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009208:	3302      	adds	r3, #2
 800920a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800920e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009212:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009216:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8009218:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800921c:	3301      	adds	r3, #1
 800921e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8009222:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009226:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800922a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800922c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009230:	3301      	adds	r3, #1
 8009232:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8009236:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800923a:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800923e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8009240:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009244:	3301      	adds	r3, #1
 8009246:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800924a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800924e:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8009252:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8009254:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009258:	3301      	adds	r3, #1
 800925a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800925e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009262:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8009266:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8009268:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800926c:	3301      	adds	r3, #1
 800926e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009272:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009276:	2218      	movs	r2, #24
 8009278:	2100      	movs	r1, #0
 800927a:	4618      	mov	r0, r3
 800927c:	f000 fad8 	bl	8009830 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009280:	233f      	movs	r3, #63	; 0x3f
 8009282:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8009286:	f44f 7382 	mov.w	r3, #260	; 0x104
 800928a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800928e:	f107 0318 	add.w	r3, r7, #24
 8009292:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009296:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800929a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800929e:	f107 0314 	add.w	r3, r7, #20
 80092a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80092a6:	2303      	movs	r3, #3
 80092a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80092ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80092b0:	2100      	movs	r1, #0
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 fd46 	bl	8009d44 <hci_send_req>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	da01      	bge.n	80092c2 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80092be:	23ff      	movs	r3, #255	; 0xff
 80092c0:	e017      	b.n	80092f2 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80092c2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80092c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d005      	beq.n	80092dc <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80092d0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80092d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	e00a      	b.n	80092f2 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80092dc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80092e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092e4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80092e8:	b29a      	uxth	r2, r3
 80092ea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80092ee:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd90      	pop	{r4, r7, pc}

080092fc <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80092fc:	b5b0      	push	{r4, r5, r7, lr}
 80092fe:	b0cc      	sub	sp, #304	; 0x130
 8009300:	af00      	add	r7, sp, #0
 8009302:	4605      	mov	r5, r0
 8009304:	460c      	mov	r4, r1
 8009306:	4610      	mov	r0, r2
 8009308:	4619      	mov	r1, r3
 800930a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800930e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009312:	462a      	mov	r2, r5
 8009314:	801a      	strh	r2, [r3, #0]
 8009316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800931a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800931e:	4622      	mov	r2, r4
 8009320:	801a      	strh	r2, [r3, #0]
 8009322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009326:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800932a:	4602      	mov	r2, r0
 800932c:	701a      	strb	r2, [r3, #0]
 800932e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009332:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009336:	460a      	mov	r2, r1
 8009338:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800933a:	f107 0310 	add.w	r3, r7, #16
 800933e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009346:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800934a:	2200      	movs	r2, #0
 800934c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800934e:	2300      	movs	r3, #0
 8009350:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8009354:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009358:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800935c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009360:	8812      	ldrh	r2, [r2, #0]
 8009362:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009364:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009368:	3302      	adds	r3, #2
 800936a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800936e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009372:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009376:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800937a:	8812      	ldrh	r2, [r2, #0]
 800937c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800937e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009382:	3302      	adds	r3, #2
 8009384:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8009388:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800938c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009390:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8009394:	7812      	ldrb	r2, [r2, #0]
 8009396:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009398:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800939c:	3301      	adds	r3, #1
 800939e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80093a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80093aa:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80093ae:	7812      	ldrb	r2, [r2, #0]
 80093b0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80093b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093b6:	3301      	adds	r3, #1
 80093b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80093bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093c0:	1d98      	adds	r0, r3, #6
 80093c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093c6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	461a      	mov	r2, r3
 80093ce:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80093d2:	f000 fa1d 	bl	8009810 <Osal_MemCpy>
  index_input += Char_Value_Length;
 80093d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093da:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80093e4:	4413      	add	r3, r2
 80093e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80093ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80093ee:	2218      	movs	r2, #24
 80093f0:	2100      	movs	r1, #0
 80093f2:	4618      	mov	r0, r3
 80093f4:	f000 fa1c 	bl	8009830 <Osal_MemSet>
  rq.ogf = 0x3f;
 80093f8:	233f      	movs	r3, #63	; 0x3f
 80093fa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80093fe:	f44f 7383 	mov.w	r3, #262	; 0x106
 8009402:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009406:	f107 0310 	add.w	r3, r7, #16
 800940a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800940e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009412:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009416:	f107 030f 	add.w	r3, r7, #15
 800941a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800941e:	2301      	movs	r3, #1
 8009420:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009424:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009428:	2100      	movs	r1, #0
 800942a:	4618      	mov	r0, r3
 800942c:	f000 fc8a 	bl	8009d44 <hci_send_req>
 8009430:	4603      	mov	r3, r0
 8009432:	2b00      	cmp	r3, #0
 8009434:	da01      	bge.n	800943a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8009436:	23ff      	movs	r3, #255	; 0xff
 8009438:	e004      	b.n	8009444 <aci_gatt_update_char_value+0x148>
  return status;
 800943a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800943e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009442:	781b      	ldrb	r3, [r3, #0]
}
 8009444:	4618      	mov	r0, r3
 8009446:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800944a:	46bd      	mov	sp, r7
 800944c:	bdb0      	pop	{r4, r5, r7, pc}

0800944e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b0cc      	sub	sp, #304	; 0x130
 8009452:	af00      	add	r7, sp, #0
 8009454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009458:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800945c:	601a      	str	r2, [r3, #0]
 800945e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009462:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009466:	4602      	mov	r2, r0
 8009468:	701a      	strb	r2, [r3, #0]
 800946a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800946e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009472:	460a      	mov	r2, r1
 8009474:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8009476:	f107 0310 	add.w	r3, r7, #16
 800947a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800947e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009482:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009486:	2200      	movs	r2, #0
 8009488:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8009490:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009494:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009498:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800949c:	7812      	ldrb	r2, [r2, #0]
 800949e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80094a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094a4:	3301      	adds	r3, #1
 80094a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 80094aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80094b2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80094b6:	7812      	ldrb	r2, [r2, #0]
 80094b8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80094ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094be:	3301      	adds	r3, #1
 80094c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80094c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094c8:	1c98      	adds	r0, r3, #2
 80094ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094ce:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80094d2:	781a      	ldrb	r2, [r3, #0]
 80094d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094dc:	6819      	ldr	r1, [r3, #0]
 80094de:	f000 f997 	bl	8009810 <Osal_MemCpy>
  index_input += Length;
 80094e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094e6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80094f0:	4413      	add	r3, r2
 80094f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80094f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80094fa:	2218      	movs	r2, #24
 80094fc:	2100      	movs	r1, #0
 80094fe:	4618      	mov	r0, r3
 8009500:	f000 f996 	bl	8009830 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009504:	233f      	movs	r3, #63	; 0x3f
 8009506:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800950a:	230c      	movs	r3, #12
 800950c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009510:	f107 0310 	add.w	r3, r7, #16
 8009514:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009518:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800951c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009520:	f107 030f 	add.w	r3, r7, #15
 8009524:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009528:	2301      	movs	r3, #1
 800952a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800952e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009532:	2100      	movs	r1, #0
 8009534:	4618      	mov	r0, r3
 8009536:	f000 fc05 	bl	8009d44 <hci_send_req>
 800953a:	4603      	mov	r3, r0
 800953c:	2b00      	cmp	r3, #0
 800953e:	da01      	bge.n	8009544 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8009540:	23ff      	movs	r3, #255	; 0xff
 8009542:	e004      	b.n	800954e <aci_hal_write_config_data+0x100>
  return status;
 8009544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009548:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800954c:	781b      	ldrb	r3, [r3, #0]
}
 800954e:	4618      	mov	r0, r3
 8009550:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b0cc      	sub	sp, #304	; 0x130
 800955c:	af00      	add	r7, sp, #0
 800955e:	4602      	mov	r2, r0
 8009560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009564:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009568:	701a      	strb	r2, [r3, #0]
 800956a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800956e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009572:	460a      	mov	r2, r1
 8009574:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8009576:	f107 0310 	add.w	r3, r7, #16
 800957a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800957e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009582:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009586:	2200      	movs	r2, #0
 8009588:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800958a:	2300      	movs	r3, #0
 800958c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8009590:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009594:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009598:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800959c:	7812      	ldrb	r2, [r2, #0]
 800959e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80095a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095a4:	3301      	adds	r3, #1
 80095a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80095aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80095b2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80095b6:	7812      	ldrb	r2, [r2, #0]
 80095b8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80095ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095be:	3301      	adds	r3, #1
 80095c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80095c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80095c8:	2218      	movs	r2, #24
 80095ca:	2100      	movs	r1, #0
 80095cc:	4618      	mov	r0, r3
 80095ce:	f000 f92f 	bl	8009830 <Osal_MemSet>
  rq.ogf = 0x3f;
 80095d2:	233f      	movs	r3, #63	; 0x3f
 80095d4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80095d8:	230f      	movs	r3, #15
 80095da:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80095de:	f107 0310 	add.w	r3, r7, #16
 80095e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80095e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80095ee:	f107 030f 	add.w	r3, r7, #15
 80095f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80095f6:	2301      	movs	r3, #1
 80095f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80095fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009600:	2100      	movs	r1, #0
 8009602:	4618      	mov	r0, r3
 8009604:	f000 fb9e 	bl	8009d44 <hci_send_req>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	da01      	bge.n	8009612 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800960e:	23ff      	movs	r3, #255	; 0xff
 8009610:	e004      	b.n	800961c <aci_hal_set_tx_power_level+0xc4>
  return status;
 8009612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009616:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800961a:	781b      	ldrb	r3, [r3, #0]
}
 800961c:	4618      	mov	r0, r3
 800961e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8009626:	b580      	push	{r7, lr}
 8009628:	b0cc      	sub	sp, #304	; 0x130
 800962a:	af00      	add	r7, sp, #0
 800962c:	4602      	mov	r2, r0
 800962e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009632:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009636:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8009638:	f107 0310 	add.w	r3, r7, #16
 800963c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009640:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009644:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009648:	2200      	movs	r2, #0
 800964a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800964c:	2300      	movs	r3, #0
 800964e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8009652:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009656:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800965a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800965e:	8812      	ldrh	r2, [r2, #0]
 8009660:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009662:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009666:	3302      	adds	r3, #2
 8009668:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800966c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009670:	2218      	movs	r2, #24
 8009672:	2100      	movs	r1, #0
 8009674:	4618      	mov	r0, r3
 8009676:	f000 f8db 	bl	8009830 <Osal_MemSet>
  rq.ogf = 0x3f;
 800967a:	233f      	movs	r3, #63	; 0x3f
 800967c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8009680:	2318      	movs	r3, #24
 8009682:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009686:	f107 0310 	add.w	r3, r7, #16
 800968a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800968e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009692:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009696:	f107 030f 	add.w	r3, r7, #15
 800969a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800969e:	2301      	movs	r3, #1
 80096a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80096a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096a8:	2100      	movs	r1, #0
 80096aa:	4618      	mov	r0, r3
 80096ac:	f000 fb4a 	bl	8009d44 <hci_send_req>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	da01      	bge.n	80096ba <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80096b6:	23ff      	movs	r3, #255	; 0xff
 80096b8:	e004      	b.n	80096c4 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80096ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096be:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80096c2:	781b      	ldrb	r3, [r3, #0]
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b088      	sub	sp, #32
 80096d2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80096d4:	2300      	movs	r3, #0
 80096d6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80096d8:	f107 0308 	add.w	r3, r7, #8
 80096dc:	2218      	movs	r2, #24
 80096de:	2100      	movs	r1, #0
 80096e0:	4618      	mov	r0, r3
 80096e2:	f000 f8a5 	bl	8009830 <Osal_MemSet>
  rq.ogf = 0x03;
 80096e6:	2303      	movs	r3, #3
 80096e8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80096ea:	2303      	movs	r3, #3
 80096ec:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80096ee:	1dfb      	adds	r3, r7, #7
 80096f0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80096f2:	2301      	movs	r3, #1
 80096f4:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80096f6:	f107 0308 	add.w	r3, r7, #8
 80096fa:	2100      	movs	r1, #0
 80096fc:	4618      	mov	r0, r3
 80096fe:	f000 fb21 	bl	8009d44 <hci_send_req>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	da01      	bge.n	800970c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009708:	23ff      	movs	r3, #255	; 0xff
 800970a:	e000      	b.n	800970e <hci_reset+0x40>
  return status;
 800970c:	79fb      	ldrb	r3, [r7, #7]
}
 800970e:	4618      	mov	r0, r3
 8009710:	3720      	adds	r7, #32
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8009716:	b590      	push	{r4, r7, lr}
 8009718:	b0cd      	sub	sp, #308	; 0x134
 800971a:	af00      	add	r7, sp, #0
 800971c:	4604      	mov	r4, r0
 800971e:	4608      	mov	r0, r1
 8009720:	4611      	mov	r1, r2
 8009722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009726:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800972a:	4622      	mov	r2, r4
 800972c:	701a      	strb	r2, [r3, #0]
 800972e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009732:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009736:	4602      	mov	r2, r0
 8009738:	701a      	strb	r2, [r3, #0]
 800973a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800973e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009742:	460a      	mov	r2, r1
 8009744:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8009746:	f107 0310 	add.w	r3, r7, #16
 800974a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800974e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009752:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009756:	2200      	movs	r2, #0
 8009758:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800975a:	2300      	movs	r3, #0
 800975c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8009760:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009764:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009768:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800976c:	7812      	ldrb	r2, [r2, #0]
 800976e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009770:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009774:	3301      	adds	r3, #1
 8009776:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800977a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800977e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009782:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009786:	7812      	ldrb	r2, [r2, #0]
 8009788:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800978a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800978e:	3301      	adds	r3, #1
 8009790:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8009794:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009798:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800979c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80097a0:	7812      	ldrb	r2, [r2, #0]
 80097a2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80097a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097a8:	3301      	adds	r3, #1
 80097aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80097ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80097b2:	2218      	movs	r2, #24
 80097b4:	2100      	movs	r1, #0
 80097b6:	4618      	mov	r0, r3
 80097b8:	f000 f83a 	bl	8009830 <Osal_MemSet>
  rq.ogf = 0x08;
 80097bc:	2308      	movs	r3, #8
 80097be:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 80097c2:	2331      	movs	r3, #49	; 0x31
 80097c4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80097c8:	f107 0310 	add.w	r3, r7, #16
 80097cc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80097d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80097d8:	f107 030f 	add.w	r3, r7, #15
 80097dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80097e0:	2301      	movs	r3, #1
 80097e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80097e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80097ea:	2100      	movs	r1, #0
 80097ec:	4618      	mov	r0, r3
 80097ee:	f000 faa9 	bl	8009d44 <hci_send_req>
 80097f2:	4603      	mov	r3, r0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	da01      	bge.n	80097fc <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80097f8:	23ff      	movs	r3, #255	; 0xff
 80097fa:	e004      	b.n	8009806 <hci_le_set_default_phy+0xf0>
  return status;
 80097fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009800:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009804:	781b      	ldrb	r3, [r3, #0]
}
 8009806:	4618      	mov	r0, r3
 8009808:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800980c:	46bd      	mov	sp, r7
 800980e:	bd90      	pop	{r4, r7, pc}

08009810 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	68b9      	ldr	r1, [r7, #8]
 8009820:	68f8      	ldr	r0, [r7, #12]
 8009822:	f002 f9a9 	bl	800bb78 <memcpy>
 8009826:	4603      	mov	r3, r0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3710      	adds	r7, #16
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	68b9      	ldr	r1, [r7, #8]
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f002 f9c1 	bl	800bbc8 <memset>
 8009846:	4603      	mov	r3, r0
}
 8009848:	4618      	mov	r0, r3
 800984a:	3710      	adds	r7, #16
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8009850:	b480      	push	{r7}
 8009852:	af00      	add	r7, sp, #0
  return;
 8009854:	bf00      	nop
}
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr

0800985e <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800985e:	b480      	push	{r7}
 8009860:	af00      	add	r7, sp, #0
  return;
 8009862:	bf00      	nop
}
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800986c:	b480      	push	{r7}
 800986e:	af00      	add	r7, sp, #0
  return;
 8009870:	bf00      	nop
}
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr

0800987a <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800987a:	b480      	push	{r7}
 800987c:	af00      	add	r7, sp, #0
  return;
 800987e:	bf00      	nop
}
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8009888:	b480      	push	{r7}
 800988a:	af00      	add	r7, sp, #0
  return;
 800988c:	bf00      	nop
}
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr

08009896 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8009896:	b480      	push	{r7}
 8009898:	af00      	add	r7, sp, #0
  return;
 800989a:	bf00      	nop
}
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80098a4:	b480      	push	{r7}
 80098a6:	af00      	add	r7, sp, #0
  return;
 80098a8:	bf00      	nop
}
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr

080098b2 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80098b2:	b480      	push	{r7}
 80098b4:	af00      	add	r7, sp, #0
  return;
 80098b6:	bf00      	nop
}
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80098c0:	b480      	push	{r7}
 80098c2:	af00      	add	r7, sp, #0
  return;
 80098c4:	bf00      	nop
}
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr

080098ce <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80098ce:	b480      	push	{r7}
 80098d0:	af00      	add	r7, sp, #0
  return;
 80098d2:	bf00      	nop
}
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80098dc:	b480      	push	{r7}
 80098de:	af00      	add	r7, sp, #0
  return;
 80098e0:	bf00      	nop
}
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr

080098ea <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80098ea:	b480      	push	{r7}
 80098ec:	af00      	add	r7, sp, #0
  return;
 80098ee:	bf00      	nop
}
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 80098f8:	b480      	push	{r7}
 80098fa:	af00      	add	r7, sp, #0
  return;
 80098fc:	bf00      	nop
}
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr

08009906 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8009906:	b480      	push	{r7}
 8009908:	af00      	add	r7, sp, #0
  return;
 800990a:	bf00      	nop
}
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8009914:	b480      	push	{r7}
 8009916:	af00      	add	r7, sp, #0
  return;
 8009918:	bf00      	nop
}
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr

08009922 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8009922:	b480      	push	{r7}
 8009924:	af00      	add	r7, sp, #0
  return;
 8009926:	bf00      	nop
}
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8009930:	b480      	push	{r7}
 8009932:	af00      	add	r7, sp, #0
  return;
 8009934:	bf00      	nop
}
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr
	...

08009940 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8009940:	b580      	push	{r7, lr}
 8009942:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8009944:	4b04      	ldr	r3, [pc, #16]	; (8009958 <SVCCTL_Init+0x18>)
 8009946:	2200      	movs	r2, #0
 8009948:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800994a:	4b04      	ldr	r3, [pc, #16]	; (800995c <SVCCTL_Init+0x1c>)
 800994c:	2200      	movs	r2, #0
 800994e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8009950:	f000 f806 	bl	8009960 <SVCCTL_SvcInit>

  return;
 8009954:	bf00      	nop
}
 8009956:	bd80      	pop	{r7, pc}
 8009958:	20000294 	.word	0x20000294
 800995c:	200002b4 	.word	0x200002b4

08009960 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	af00      	add	r7, sp, #0
  BAS_Init();
 8009964:	f7ff ff74 	bl	8009850 <BAS_Init>

  BLS_Init();
 8009968:	f7ff ff79 	bl	800985e <BLS_Init>

  CRS_STM_Init();
 800996c:	f7ff ff7e 	bl	800986c <CRS_STM_Init>

  DIS_Init();
 8009970:	f7ff ff83 	bl	800987a <DIS_Init>

  EDS_STM_Init();
 8009974:	f7ff ff88 	bl	8009888 <EDS_STM_Init>

  HIDS_Init();
 8009978:	f7ff ff8d 	bl	8009896 <HIDS_Init>

  HRS_Init();
 800997c:	f7ff ff92 	bl	80098a4 <HRS_Init>

  HTS_Init();
 8009980:	f7ff ff97 	bl	80098b2 <HTS_Init>

  IAS_Init();
 8009984:	f7ff ff9c 	bl	80098c0 <IAS_Init>

  LLS_Init();
 8009988:	f7ff ffa1 	bl	80098ce <LLS_Init>

  TPS_Init();
 800998c:	f7ff ffa6 	bl	80098dc <TPS_Init>

  MOTENV_STM_Init();
 8009990:	f7ff ffab 	bl	80098ea <MOTENV_STM_Init>

  P2PS_STM_Init();
 8009994:	f7ff ffb0 	bl	80098f8 <P2PS_STM_Init>

  ZDD_STM_Init();
 8009998:	f7ff ffb5 	bl	8009906 <ZDD_STM_Init>

  OTAS_STM_Init();
 800999c:	f7ff ffba 	bl	8009914 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80099a0:	f7ff ffc6 	bl	8009930 <BVOPUS_STM_Init>

  MESH_Init();
 80099a4:	f7ff ffbd 	bl	8009922 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80099a8:	f001 fb2a 	bl	800b000 <SVCCTL_InitCustomSvc>
  
  return;
 80099ac:	bf00      	nop
}
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80099b8:	4b09      	ldr	r3, [pc, #36]	; (80099e0 <SVCCTL_RegisterSvcHandler+0x30>)
 80099ba:	7f1b      	ldrb	r3, [r3, #28]
 80099bc:	4619      	mov	r1, r3
 80099be:	4a08      	ldr	r2, [pc, #32]	; (80099e0 <SVCCTL_RegisterSvcHandler+0x30>)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80099c6:	4b06      	ldr	r3, [pc, #24]	; (80099e0 <SVCCTL_RegisterSvcHandler+0x30>)
 80099c8:	7f1b      	ldrb	r3, [r3, #28]
 80099ca:	3301      	adds	r3, #1
 80099cc:	b2da      	uxtb	r2, r3
 80099ce:	4b04      	ldr	r3, [pc, #16]	; (80099e0 <SVCCTL_RegisterSvcHandler+0x30>)
 80099d0:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80099d2:	bf00      	nop
}
 80099d4:	370c      	adds	r7, #12
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop
 80099e0:	20000294 	.word	0x20000294

080099e4 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	3301      	adds	r3, #1
 80099f0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80099f2:	2300      	movs	r3, #0
 80099f4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	2bff      	cmp	r3, #255	; 0xff
 80099fc:	d125      	bne.n	8009a4a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	3302      	adds	r3, #2
 8009a02:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	881b      	ldrh	r3, [r3, #0]
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009a0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a12:	d118      	bne.n	8009a46 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009a14:	2300      	movs	r3, #0
 8009a16:	757b      	strb	r3, [r7, #21]
 8009a18:	e00d      	b.n	8009a36 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8009a1a:	7d7b      	ldrb	r3, [r7, #21]
 8009a1c:	4a1a      	ldr	r2, [pc, #104]	; (8009a88 <SVCCTL_UserEvtRx+0xa4>)
 8009a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	4798      	blx	r3
 8009a26:	4603      	mov	r3, r0
 8009a28:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8009a2a:	7dfb      	ldrb	r3, [r7, #23]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d108      	bne.n	8009a42 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009a30:	7d7b      	ldrb	r3, [r7, #21]
 8009a32:	3301      	adds	r3, #1
 8009a34:	757b      	strb	r3, [r7, #21]
 8009a36:	4b14      	ldr	r3, [pc, #80]	; (8009a88 <SVCCTL_UserEvtRx+0xa4>)
 8009a38:	7f1b      	ldrb	r3, [r3, #28]
 8009a3a:	7d7a      	ldrb	r2, [r7, #21]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d3ec      	bcc.n	8009a1a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8009a40:	e002      	b.n	8009a48 <SVCCTL_UserEvtRx+0x64>
              break;
 8009a42:	bf00      	nop
          break;
 8009a44:	e000      	b.n	8009a48 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8009a46:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8009a48:	e000      	b.n	8009a4c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8009a4a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8009a4c:	7dfb      	ldrb	r3, [r7, #23]
 8009a4e:	2b02      	cmp	r3, #2
 8009a50:	d00f      	beq.n	8009a72 <SVCCTL_UserEvtRx+0x8e>
 8009a52:	2b02      	cmp	r3, #2
 8009a54:	dc10      	bgt.n	8009a78 <SVCCTL_UserEvtRx+0x94>
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d002      	beq.n	8009a60 <SVCCTL_UserEvtRx+0x7c>
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d006      	beq.n	8009a6c <SVCCTL_UserEvtRx+0x88>
 8009a5e:	e00b      	b.n	8009a78 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 ff79 	bl	800a958 <SVCCTL_App_Notification>
 8009a66:	4603      	mov	r3, r0
 8009a68:	75bb      	strb	r3, [r7, #22]
      break;
 8009a6a:	e008      	b.n	8009a7e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	75bb      	strb	r3, [r7, #22]
      break;
 8009a70:	e005      	b.n	8009a7e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8009a72:	2300      	movs	r3, #0
 8009a74:	75bb      	strb	r3, [r7, #22]
      break;
 8009a76:	e002      	b.n	8009a7e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	75bb      	strb	r3, [r7, #22]
      break;
 8009a7c:	bf00      	nop
  }

  return (return_status);
 8009a7e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3718      	adds	r7, #24
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	20000294 	.word	0x20000294

08009a8c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b088      	sub	sp, #32
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009a94:	f107 030c 	add.w	r3, r7, #12
 8009a98:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	2125      	movs	r1, #37	; 0x25
 8009aa4:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8009aa8:	f000 fae2 	bl	800a070 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	330b      	adds	r3, #11
 8009ab0:	78db      	ldrb	r3, [r3, #3]
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3720      	adds	r7, #32
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b088      	sub	sp, #32
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009ac2:	f107 030c 	add.w	r3, r7, #12
 8009ac6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8009ace:	69fb      	ldr	r3, [r7, #28]
 8009ad0:	210f      	movs	r1, #15
 8009ad2:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8009ad6:	f000 facb 	bl	800a070 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009ada:	69fb      	ldr	r3, [r7, #28]
 8009adc:	330b      	adds	r3, #11
 8009ade:	78db      	ldrb	r3, [r3, #3]
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3720      	adds	r7, #32
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b088      	sub	sp, #32
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009af0:	f107 030c 	add.w	r3, r7, #12
 8009af4:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	210e      	movs	r1, #14
 8009afc:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8009b00:	f000 fab6 	bl	800a070 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	330b      	adds	r3, #11
 8009b08:	78db      	ldrb	r3, [r3, #3]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3720      	adds	r7, #32
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
	...

08009b14 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8009b14:	b480      	push	{r7}
 8009b16:	b08b      	sub	sp, #44	; 0x2c
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8009b20:	2300      	movs	r3, #0
 8009b22:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8009b24:	2300      	movs	r3, #0
 8009b26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8009b30:	2300      	movs	r3, #0
 8009b32:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8009b34:	2300      	movs	r3, #0
 8009b36:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8009b3c:	4b4a      	ldr	r3, [pc, #296]	; (8009c68 <SHCI_GetWirelessFwInfo+0x154>)
 8009b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b40:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009b44:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009b4e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a44      	ldr	r2, [pc, #272]	; (8009c6c <SHCI_GetWirelessFwInfo+0x158>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d10f      	bne.n	8009b80 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	695b      	ldr	r3, [r3, #20]
 8009b64:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	699b      	ldr	r3, [r3, #24]
 8009b6a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	69db      	ldr	r3, [r3, #28]
 8009b70:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	617b      	str	r3, [r7, #20]
 8009b7e:	e01a      	b.n	8009bb6 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009b88:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009b8c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	691b      	ldr	r3, [r3, #16]
 8009b94:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	695b      	ldr	r3, [r3, #20]
 8009b9c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	699b      	ldr	r3, [r3, #24]
 8009ba4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb8:	0e1b      	lsrs	r3, r3, #24
 8009bba:	b2da      	uxtb	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc2:	0c1b      	lsrs	r3, r3, #16
 8009bc4:	b2da      	uxtb	r2, r3
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bcc:	0a1b      	lsrs	r3, r3, #8
 8009bce:	b2da      	uxtb	r2, r3
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8009bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd6:	091b      	lsrs	r3, r3, #4
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	f003 030f 	and.w	r3, r3, #15
 8009bde:	b2da      	uxtb	r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8009be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	f003 030f 	and.w	r3, r3, #15
 8009bec:	b2da      	uxtb	r2, r3
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009bf2:	6a3b      	ldr	r3, [r7, #32]
 8009bf4:	0e1b      	lsrs	r3, r3, #24
 8009bf6:	b2da      	uxtb	r2, r3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009bfc:	6a3b      	ldr	r3, [r7, #32]
 8009bfe:	0c1b      	lsrs	r3, r3, #16
 8009c00:	b2da      	uxtb	r2, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8009c06:	6a3b      	ldr	r3, [r7, #32]
 8009c08:	0a1b      	lsrs	r3, r3, #8
 8009c0a:	b2da      	uxtb	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009c10:	6a3b      	ldr	r3, [r7, #32]
 8009c12:	b2da      	uxtb	r2, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	b2da      	uxtb	r2, r3
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	0e1b      	lsrs	r3, r3, #24
 8009c24:	b2da      	uxtb	r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	0c1b      	lsrs	r3, r3, #16
 8009c2e:	b2da      	uxtb	r2, r3
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009c34:	69bb      	ldr	r3, [r7, #24]
 8009c36:	0a1b      	lsrs	r3, r3, #8
 8009c38:	b2da      	uxtb	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	0e1b      	lsrs	r3, r3, #24
 8009c42:	b2da      	uxtb	r2, r3
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	0c1b      	lsrs	r3, r3, #16
 8009c4c:	b2da      	uxtb	r2, r3
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	b2da      	uxtb	r2, r3
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	372c      	adds	r7, #44	; 0x2c
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr
 8009c68:	58004000 	.word	0x58004000
 8009c6c:	a94656b9 	.word	0xa94656b9

08009c70 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	4a08      	ldr	r2, [pc, #32]	; (8009ca0 <hci_init+0x30>)
 8009c80:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8009c82:	4a08      	ldr	r2, [pc, #32]	; (8009ca4 <hci_init+0x34>)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8009c88:	4806      	ldr	r0, [pc, #24]	; (8009ca4 <hci_init+0x34>)
 8009c8a:	f000 f973 	bl	8009f74 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4618      	mov	r0, r3
 8009c94:	f000 f8d4 	bl	8009e40 <TlInit>

  return;
 8009c98:	bf00      	nop
}
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	2000096c 	.word	0x2000096c
 8009ca4:	20000944 	.word	0x20000944

08009ca8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009cae:	4822      	ldr	r0, [pc, #136]	; (8009d38 <hci_user_evt_proc+0x90>)
 8009cb0:	f000 fd28 	bl	800a704 <LST_is_empty>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d12b      	bne.n	8009d12 <hci_user_evt_proc+0x6a>
 8009cba:	4b20      	ldr	r3, [pc, #128]	; (8009d3c <hci_user_evt_proc+0x94>)
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d027      	beq.n	8009d12 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009cc2:	f107 030c 	add.w	r3, r7, #12
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	481b      	ldr	r0, [pc, #108]	; (8009d38 <hci_user_evt_proc+0x90>)
 8009cca:	f000 fdaa 	bl	800a822 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8009cce:	4b1c      	ldr	r3, [pc, #112]	; (8009d40 <hci_user_evt_proc+0x98>)
 8009cd0:	69db      	ldr	r3, [r3, #28]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d00c      	beq.n	8009cf0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009cde:	4b18      	ldr	r3, [pc, #96]	; (8009d40 <hci_user_evt_proc+0x98>)
 8009ce0:	69db      	ldr	r3, [r3, #28]
 8009ce2:	1d3a      	adds	r2, r7, #4
 8009ce4:	4610      	mov	r0, r2
 8009ce6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8009ce8:	793a      	ldrb	r2, [r7, #4]
 8009cea:	4b14      	ldr	r3, [pc, #80]	; (8009d3c <hci_user_evt_proc+0x94>)
 8009cec:	701a      	strb	r2, [r3, #0]
 8009cee:	e002      	b.n	8009cf6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009cf0:	4b12      	ldr	r3, [pc, #72]	; (8009d3c <hci_user_evt_proc+0x94>)
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8009cf6:	4b11      	ldr	r3, [pc, #68]	; (8009d3c <hci_user_evt_proc+0x94>)
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d004      	beq.n	8009d08 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	4618      	mov	r0, r3
 8009d02:	f000 fc03 	bl	800a50c <TL_MM_EvtDone>
 8009d06:	e004      	b.n	8009d12 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	480a      	ldr	r0, [pc, #40]	; (8009d38 <hci_user_evt_proc+0x90>)
 8009d0e:	f000 fd1b 	bl	800a748 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009d12:	4809      	ldr	r0, [pc, #36]	; (8009d38 <hci_user_evt_proc+0x90>)
 8009d14:	f000 fcf6 	bl	800a704 <LST_is_empty>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d107      	bne.n	8009d2e <hci_user_evt_proc+0x86>
 8009d1e:	4b07      	ldr	r3, [pc, #28]	; (8009d3c <hci_user_evt_proc+0x94>)
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d003      	beq.n	8009d2e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8009d26:	4804      	ldr	r0, [pc, #16]	; (8009d38 <hci_user_evt_proc+0x90>)
 8009d28:	f001 f814 	bl	800ad54 <hci_notify_asynch_evt>
  }


  return;
 8009d2c:	bf00      	nop
 8009d2e:	bf00      	nop
}
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	200002bc 	.word	0x200002bc
 8009d3c:	200002c8 	.word	0x200002c8
 8009d40:	20000944 	.word	0x20000944

08009d44 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b088      	sub	sp, #32
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8009d50:	2000      	movs	r0, #0
 8009d52:	f000 f8cb 	bl	8009eec <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8009d56:	2300      	movs	r3, #0
 8009d58:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	885b      	ldrh	r3, [r3, #2]
 8009d5e:	b21b      	sxth	r3, r3
 8009d60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d64:	b21a      	sxth	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	881b      	ldrh	r3, [r3, #0]
 8009d6a:	029b      	lsls	r3, r3, #10
 8009d6c:	b21b      	sxth	r3, r3
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	b21b      	sxth	r3, r3
 8009d72:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	b2d9      	uxtb	r1, r3
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	689a      	ldr	r2, [r3, #8]
 8009d7e:	8bbb      	ldrh	r3, [r7, #28]
 8009d80:	4618      	mov	r0, r3
 8009d82:	f000 f88d 	bl	8009ea0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8009d86:	e04e      	b.n	8009e26 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8009d88:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009d8c:	f000 fff9 	bl	800ad82 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009d90:	e043      	b.n	8009e1a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8009d92:	f107 030c 	add.w	r3, r7, #12
 8009d96:	4619      	mov	r1, r3
 8009d98:	4828      	ldr	r0, [pc, #160]	; (8009e3c <hci_send_req+0xf8>)
 8009d9a:	f000 fd42 	bl	800a822 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	7a5b      	ldrb	r3, [r3, #9]
 8009da2:	2b0f      	cmp	r3, #15
 8009da4:	d114      	bne.n	8009dd0 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	330b      	adds	r3, #11
 8009daa:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	885b      	ldrh	r3, [r3, #2]
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	8bba      	ldrh	r2, [r7, #28]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d104      	bne.n	8009dc2 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	693a      	ldr	r2, [r7, #16]
 8009dbe:	7812      	ldrb	r2, [r2, #0]
 8009dc0:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	785b      	ldrb	r3, [r3, #1]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d027      	beq.n	8009e1a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	77fb      	strb	r3, [r7, #31]
 8009dce:	e024      	b.n	8009e1a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	330b      	adds	r3, #11
 8009dd4:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	8bba      	ldrh	r2, [r7, #28]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d114      	bne.n	8009e0e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	7a9b      	ldrb	r3, [r3, #10]
 8009de8:	3b03      	subs	r3, #3
 8009dea:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	695a      	ldr	r2, [r3, #20]
 8009df0:	7dfb      	ldrb	r3, [r7, #23]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	bfa8      	it	ge
 8009df6:	461a      	movge	r2, r3
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6918      	ldr	r0, [r3, #16]
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	1cd9      	adds	r1, r3, #3
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	695b      	ldr	r3, [r3, #20]
 8009e08:	461a      	mov	r2, r3
 8009e0a:	f001 feb5 	bl	800bb78 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8009e0e:	69bb      	ldr	r3, [r7, #24]
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d001      	beq.n	8009e1a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009e16:	2301      	movs	r3, #1
 8009e18:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009e1a:	4808      	ldr	r0, [pc, #32]	; (8009e3c <hci_send_req+0xf8>)
 8009e1c:	f000 fc72 	bl	800a704 <LST_is_empty>
 8009e20:	4603      	mov	r3, r0
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d0b5      	beq.n	8009d92 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8009e26:	7ffb      	ldrb	r3, [r7, #31]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d0ad      	beq.n	8009d88 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8009e2c:	2001      	movs	r0, #1
 8009e2e:	f000 f85d 	bl	8009eec <NotifyCmdStatus>

  return 0;
 8009e32:	2300      	movs	r3, #0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3720      	adds	r7, #32
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	20000964 	.word	0x20000964

08009e40 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b086      	sub	sp, #24
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8009e48:	480f      	ldr	r0, [pc, #60]	; (8009e88 <TlInit+0x48>)
 8009e4a:	f000 fc4b 	bl	800a6e4 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8009e4e:	4a0f      	ldr	r2, [pc, #60]	; (8009e8c <TlInit+0x4c>)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8009e54:	480e      	ldr	r0, [pc, #56]	; (8009e90 <TlInit+0x50>)
 8009e56:	f000 fc45 	bl	800a6e4 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009e5a:	4b0e      	ldr	r3, [pc, #56]	; (8009e94 <TlInit+0x54>)
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8009e60:	4b0d      	ldr	r3, [pc, #52]	; (8009e98 <TlInit+0x58>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d00a      	beq.n	8009e7e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8009e6c:	4b0b      	ldr	r3, [pc, #44]	; (8009e9c <TlInit+0x5c>)
 8009e6e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8009e70:	4b09      	ldr	r3, [pc, #36]	; (8009e98 <TlInit+0x58>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f107 0208 	add.w	r2, r7, #8
 8009e78:	4610      	mov	r0, r2
 8009e7a:	4798      	blx	r3
  }

  return;
 8009e7c:	bf00      	nop
 8009e7e:	bf00      	nop
}
 8009e80:	3718      	adds	r7, #24
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	20000964 	.word	0x20000964
 8009e8c:	200002c4 	.word	0x200002c4
 8009e90:	200002bc 	.word	0x200002bc
 8009e94:	200002c8 	.word	0x200002c8
 8009e98:	20000944 	.word	0x20000944
 8009e9c:	08009f2d 	.word	0x08009f2d

08009ea0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	603a      	str	r2, [r7, #0]
 8009eaa:	80fb      	strh	r3, [r7, #6]
 8009eac:	460b      	mov	r3, r1
 8009eae:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009eb0:	4b0c      	ldr	r3, [pc, #48]	; (8009ee4 <SendCmd+0x44>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	88fa      	ldrh	r2, [r7, #6]
 8009eb6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8009eba:	4b0a      	ldr	r3, [pc, #40]	; (8009ee4 <SendCmd+0x44>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	797a      	ldrb	r2, [r7, #5]
 8009ec0:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009ec2:	4b08      	ldr	r3, [pc, #32]	; (8009ee4 <SendCmd+0x44>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	330c      	adds	r3, #12
 8009ec8:	797a      	ldrb	r2, [r7, #5]
 8009eca:	6839      	ldr	r1, [r7, #0]
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f001 fe53 	bl	800bb78 <memcpy>

  hciContext.io.Send(0,0);
 8009ed2:	4b05      	ldr	r3, [pc, #20]	; (8009ee8 <SendCmd+0x48>)
 8009ed4:	691b      	ldr	r3, [r3, #16]
 8009ed6:	2100      	movs	r1, #0
 8009ed8:	2000      	movs	r0, #0
 8009eda:	4798      	blx	r3

  return;
 8009edc:	bf00      	nop
}
 8009ede:	3708      	adds	r7, #8
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	200002c4 	.word	0x200002c4
 8009ee8:	20000944 	.word	0x20000944

08009eec <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8009ef6:	79fb      	ldrb	r3, [r7, #7]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d108      	bne.n	8009f0e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8009efc:	4b0a      	ldr	r3, [pc, #40]	; (8009f28 <NotifyCmdStatus+0x3c>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d00d      	beq.n	8009f20 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009f04:	4b08      	ldr	r3, [pc, #32]	; (8009f28 <NotifyCmdStatus+0x3c>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	2000      	movs	r0, #0
 8009f0a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8009f0c:	e008      	b.n	8009f20 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8009f0e:	4b06      	ldr	r3, [pc, #24]	; (8009f28 <NotifyCmdStatus+0x3c>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d004      	beq.n	8009f20 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8009f16:	4b04      	ldr	r3, [pc, #16]	; (8009f28 <NotifyCmdStatus+0x3c>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2001      	movs	r0, #1
 8009f1c:	4798      	blx	r3
  return;
 8009f1e:	bf00      	nop
 8009f20:	bf00      	nop
}
 8009f22:	3708      	adds	r7, #8
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	2000096c 	.word	0x2000096c

08009f2c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	7a5b      	ldrb	r3, [r3, #9]
 8009f38:	2b0f      	cmp	r3, #15
 8009f3a:	d003      	beq.n	8009f44 <TlEvtReceived+0x18>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	7a5b      	ldrb	r3, [r3, #9]
 8009f40:	2b0e      	cmp	r3, #14
 8009f42:	d107      	bne.n	8009f54 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009f44:	6879      	ldr	r1, [r7, #4]
 8009f46:	4809      	ldr	r0, [pc, #36]	; (8009f6c <TlEvtReceived+0x40>)
 8009f48:	f000 fc24 	bl	800a794 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8009f4c:	2000      	movs	r0, #0
 8009f4e:	f000 ff0d 	bl	800ad6c <hci_cmd_resp_release>
 8009f52:	e006      	b.n	8009f62 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8009f54:	6879      	ldr	r1, [r7, #4]
 8009f56:	4806      	ldr	r0, [pc, #24]	; (8009f70 <TlEvtReceived+0x44>)
 8009f58:	f000 fc1c 	bl	800a794 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009f5c:	4804      	ldr	r0, [pc, #16]	; (8009f70 <TlEvtReceived+0x44>)
 8009f5e:	f000 fef9 	bl	800ad54 <hci_notify_asynch_evt>
  }

  return;
 8009f62:	bf00      	nop
}
 8009f64:	3708      	adds	r7, #8
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	20000964 	.word	0x20000964
 8009f70:	200002bc 	.word	0x200002bc

08009f74 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4a05      	ldr	r2, [pc, #20]	; (8009f94 <hci_register_io_bus+0x20>)
 8009f80:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4a04      	ldr	r2, [pc, #16]	; (8009f98 <hci_register_io_bus+0x24>)
 8009f86:	611a      	str	r2, [r3, #16]

  return;
 8009f88:	bf00      	nop
}
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr
 8009f94:	0800a285 	.word	0x0800a285
 8009f98:	0800a2ed 	.word	0x0800a2ed

08009f9c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	4a08      	ldr	r2, [pc, #32]	; (8009fcc <shci_init+0x30>)
 8009fac:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8009fae:	4a08      	ldr	r2, [pc, #32]	; (8009fd0 <shci_init+0x34>)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8009fb4:	4806      	ldr	r0, [pc, #24]	; (8009fd0 <shci_init+0x34>)
 8009fb6:	f000 f911 	bl	800a1dc <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f000 f894 	bl	800a0ec <TlInit>

  return;
 8009fc4:	bf00      	nop
}
 8009fc6:	3708      	adds	r7, #8
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	20000990 	.word	0x20000990
 8009fd0:	20000970 	.word	0x20000970

08009fd4 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009fda:	4822      	ldr	r0, [pc, #136]	; (800a064 <shci_user_evt_proc+0x90>)
 8009fdc:	f000 fb92 	bl	800a704 <LST_is_empty>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d12b      	bne.n	800a03e <shci_user_evt_proc+0x6a>
 8009fe6:	4b20      	ldr	r3, [pc, #128]	; (800a068 <shci_user_evt_proc+0x94>)
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d027      	beq.n	800a03e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009fee:	f107 030c 	add.w	r3, r7, #12
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	481b      	ldr	r0, [pc, #108]	; (800a064 <shci_user_evt_proc+0x90>)
 8009ff6:	f000 fc14 	bl	800a822 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8009ffa:	4b1c      	ldr	r3, [pc, #112]	; (800a06c <shci_user_evt_proc+0x98>)
 8009ffc:	69db      	ldr	r3, [r3, #28]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00c      	beq.n	800a01c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800a006:	2301      	movs	r3, #1
 800a008:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a00a:	4b18      	ldr	r3, [pc, #96]	; (800a06c <shci_user_evt_proc+0x98>)
 800a00c:	69db      	ldr	r3, [r3, #28]
 800a00e:	1d3a      	adds	r2, r7, #4
 800a010:	4610      	mov	r0, r2
 800a012:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800a014:	793a      	ldrb	r2, [r7, #4]
 800a016:	4b14      	ldr	r3, [pc, #80]	; (800a068 <shci_user_evt_proc+0x94>)
 800a018:	701a      	strb	r2, [r3, #0]
 800a01a:	e002      	b.n	800a022 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a01c:	4b12      	ldr	r3, [pc, #72]	; (800a068 <shci_user_evt_proc+0x94>)
 800a01e:	2201      	movs	r2, #1
 800a020:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800a022:	4b11      	ldr	r3, [pc, #68]	; (800a068 <shci_user_evt_proc+0x94>)
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d004      	beq.n	800a034 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f000 fa6d 	bl	800a50c <TL_MM_EvtDone>
 800a032:	e004      	b.n	800a03e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	4619      	mov	r1, r3
 800a038:	480a      	ldr	r0, [pc, #40]	; (800a064 <shci_user_evt_proc+0x90>)
 800a03a:	f000 fb85 	bl	800a748 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a03e:	4809      	ldr	r0, [pc, #36]	; (800a064 <shci_user_evt_proc+0x90>)
 800a040:	f000 fb60 	bl	800a704 <LST_is_empty>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d107      	bne.n	800a05a <shci_user_evt_proc+0x86>
 800a04a:	4b07      	ldr	r3, [pc, #28]	; (800a068 <shci_user_evt_proc+0x94>)
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d003      	beq.n	800a05a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800a052:	4804      	ldr	r0, [pc, #16]	; (800a064 <shci_user_evt_proc+0x90>)
 800a054:	f7f7 fb4e 	bl	80016f4 <shci_notify_asynch_evt>
  }


  return;
 800a058:	bf00      	nop
 800a05a:	bf00      	nop
}
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	200002d4 	.word	0x200002d4
 800a068:	200002e4 	.word	0x200002e4
 800a06c:	20000970 	.word	0x20000970

0800a070 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	60ba      	str	r2, [r7, #8]
 800a078:	607b      	str	r3, [r7, #4]
 800a07a:	4603      	mov	r3, r0
 800a07c:	81fb      	strh	r3, [r7, #14]
 800a07e:	460b      	mov	r3, r1
 800a080:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800a082:	2000      	movs	r0, #0
 800a084:	f000 f864 	bl	800a150 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800a088:	4b16      	ldr	r3, [pc, #88]	; (800a0e4 <shci_send+0x74>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	89fa      	ldrh	r2, [r7, #14]
 800a08e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800a092:	4b14      	ldr	r3, [pc, #80]	; (800a0e4 <shci_send+0x74>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	7b7a      	ldrb	r2, [r7, #13]
 800a098:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800a09a:	4b12      	ldr	r3, [pc, #72]	; (800a0e4 <shci_send+0x74>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	330c      	adds	r3, #12
 800a0a0:	7b7a      	ldrb	r2, [r7, #13]
 800a0a2:	68b9      	ldr	r1, [r7, #8]
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f001 fd67 	bl	800bb78 <memcpy>

  shciContext.io.Send(0,0);
 800a0aa:	4b0f      	ldr	r3, [pc, #60]	; (800a0e8 <shci_send+0x78>)
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	2100      	movs	r1, #0
 800a0b0:	2000      	movs	r0, #0
 800a0b2:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800a0b4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a0b8:	f7f7 fb33 	bl	8001722 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f103 0008 	add.w	r0, r3, #8
 800a0c2:	4b08      	ldr	r3, [pc, #32]	; (800a0e4 <shci_send+0x74>)
 800a0c4:	6819      	ldr	r1, [r3, #0]
 800a0c6:	4b07      	ldr	r3, [pc, #28]	; (800a0e4 <shci_send+0x74>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	789b      	ldrb	r3, [r3, #2]
 800a0cc:	3303      	adds	r3, #3
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	f001 fd52 	bl	800bb78 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a0d4:	2001      	movs	r0, #1
 800a0d6:	f000 f83b 	bl	800a150 <Cmd_SetStatus>

  return;
 800a0da:	bf00      	nop
}
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	200002e0 	.word	0x200002e0
 800a0e8:	20000970 	.word	0x20000970

0800a0ec <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800a0f4:	4a10      	ldr	r2, [pc, #64]	; (800a138 <TlInit+0x4c>)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800a0fa:	4810      	ldr	r0, [pc, #64]	; (800a13c <TlInit+0x50>)
 800a0fc:	f000 faf2 	bl	800a6e4 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a100:	2001      	movs	r0, #1
 800a102:	f000 f825 	bl	800a150 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a106:	4b0e      	ldr	r3, [pc, #56]	; (800a140 <TlInit+0x54>)
 800a108:	2201      	movs	r2, #1
 800a10a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800a10c:	4b0d      	ldr	r3, [pc, #52]	; (800a144 <TlInit+0x58>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d00c      	beq.n	800a12e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800a118:	4b0b      	ldr	r3, [pc, #44]	; (800a148 <TlInit+0x5c>)
 800a11a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800a11c:	4b0b      	ldr	r3, [pc, #44]	; (800a14c <TlInit+0x60>)
 800a11e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800a120:	4b08      	ldr	r3, [pc, #32]	; (800a144 <TlInit+0x58>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f107 020c 	add.w	r2, r7, #12
 800a128:	4610      	mov	r0, r2
 800a12a:	4798      	blx	r3
  }

  return;
 800a12c:	bf00      	nop
 800a12e:	bf00      	nop
}
 800a130:	3718      	adds	r7, #24
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	200002e0 	.word	0x200002e0
 800a13c:	200002d4 	.word	0x200002d4
 800a140:	200002e4 	.word	0x200002e4
 800a144:	20000970 	.word	0x20000970
 800a148:	0800a1a1 	.word	0x0800a1a1
 800a14c:	0800a1b9 	.word	0x0800a1b9

0800a150 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	4603      	mov	r3, r0
 800a158:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800a15a:	79fb      	ldrb	r3, [r7, #7]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d10b      	bne.n	800a178 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800a160:	4b0d      	ldr	r3, [pc, #52]	; (800a198 <Cmd_SetStatus+0x48>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d003      	beq.n	800a170 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800a168:	4b0b      	ldr	r3, [pc, #44]	; (800a198 <Cmd_SetStatus+0x48>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2000      	movs	r0, #0
 800a16e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800a170:	4b0a      	ldr	r3, [pc, #40]	; (800a19c <Cmd_SetStatus+0x4c>)
 800a172:	2200      	movs	r2, #0
 800a174:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800a176:	e00b      	b.n	800a190 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800a178:	4b08      	ldr	r3, [pc, #32]	; (800a19c <Cmd_SetStatus+0x4c>)
 800a17a:	2201      	movs	r2, #1
 800a17c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800a17e:	4b06      	ldr	r3, [pc, #24]	; (800a198 <Cmd_SetStatus+0x48>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d004      	beq.n	800a190 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800a186:	4b04      	ldr	r3, [pc, #16]	; (800a198 <Cmd_SetStatus+0x48>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2001      	movs	r0, #1
 800a18c:	4798      	blx	r3
  return;
 800a18e:	bf00      	nop
 800a190:	bf00      	nop
}
 800a192:	3708      	adds	r7, #8
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}
 800a198:	20000990 	.word	0x20000990
 800a19c:	200002dc 	.word	0x200002dc

0800a1a0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800a1a8:	2000      	movs	r0, #0
 800a1aa:	f7f7 faaf 	bl	800170c <shci_cmd_resp_release>

  return;
 800a1ae:	bf00      	nop
}
 800a1b0:	3708      	adds	r7, #8
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
	...

0800a1b8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800a1c0:	6879      	ldr	r1, [r7, #4]
 800a1c2:	4805      	ldr	r0, [pc, #20]	; (800a1d8 <TlUserEvtReceived+0x20>)
 800a1c4:	f000 fae6 	bl	800a794 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a1c8:	4803      	ldr	r0, [pc, #12]	; (800a1d8 <TlUserEvtReceived+0x20>)
 800a1ca:	f7f7 fa93 	bl	80016f4 <shci_notify_asynch_evt>

  return;
 800a1ce:	bf00      	nop
}
 800a1d0:	3708      	adds	r7, #8
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	200002d4 	.word	0x200002d4

0800a1dc <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	4a05      	ldr	r2, [pc, #20]	; (800a1fc <shci_register_io_bus+0x20>)
 800a1e8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	4a04      	ldr	r2, [pc, #16]	; (800a200 <shci_register_io_bus+0x24>)
 800a1ee:	611a      	str	r2, [r3, #16]

  return;
 800a1f0:	bf00      	nop
}
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr
 800a1fc:	0800a399 	.word	0x0800a399
 800a200:	0800a3ed 	.word	0x0800a3ed

0800a204 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800a204:	b580      	push	{r7, lr}
 800a206:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800a208:	f001 f94a 	bl	800b4a0 <HW_IPCC_Enable>

  return;
 800a20c:	bf00      	nop
}
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <TL_Init>:


void TL_Init( void )
{
 800a210:	b580      	push	{r7, lr}
 800a212:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800a214:	4b10      	ldr	r3, [pc, #64]	; (800a258 <TL_Init+0x48>)
 800a216:	4a11      	ldr	r2, [pc, #68]	; (800a25c <TL_Init+0x4c>)
 800a218:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800a21a:	4b0f      	ldr	r3, [pc, #60]	; (800a258 <TL_Init+0x48>)
 800a21c:	4a10      	ldr	r2, [pc, #64]	; (800a260 <TL_Init+0x50>)
 800a21e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800a220:	4b0d      	ldr	r3, [pc, #52]	; (800a258 <TL_Init+0x48>)
 800a222:	4a10      	ldr	r2, [pc, #64]	; (800a264 <TL_Init+0x54>)
 800a224:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800a226:	4b0c      	ldr	r3, [pc, #48]	; (800a258 <TL_Init+0x48>)
 800a228:	4a0f      	ldr	r2, [pc, #60]	; (800a268 <TL_Init+0x58>)
 800a22a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800a22c:	4b0a      	ldr	r3, [pc, #40]	; (800a258 <TL_Init+0x48>)
 800a22e:	4a0f      	ldr	r2, [pc, #60]	; (800a26c <TL_Init+0x5c>)
 800a230:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800a232:	4b09      	ldr	r3, [pc, #36]	; (800a258 <TL_Init+0x48>)
 800a234:	4a0e      	ldr	r2, [pc, #56]	; (800a270 <TL_Init+0x60>)
 800a236:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800a238:	4b07      	ldr	r3, [pc, #28]	; (800a258 <TL_Init+0x48>)
 800a23a:	4a0e      	ldr	r2, [pc, #56]	; (800a274 <TL_Init+0x64>)
 800a23c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800a23e:	4b06      	ldr	r3, [pc, #24]	; (800a258 <TL_Init+0x48>)
 800a240:	4a0d      	ldr	r2, [pc, #52]	; (800a278 <TL_Init+0x68>)
 800a242:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800a244:	4b04      	ldr	r3, [pc, #16]	; (800a258 <TL_Init+0x48>)
 800a246:	4a0d      	ldr	r2, [pc, #52]	; (800a27c <TL_Init+0x6c>)
 800a248:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800a24a:	4b03      	ldr	r3, [pc, #12]	; (800a258 <TL_Init+0x48>)
 800a24c:	4a0c      	ldr	r2, [pc, #48]	; (800a280 <TL_Init+0x70>)
 800a24e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800a250:	f001 f93a 	bl	800b4c8 <HW_IPCC_Init>

  return;
 800a254:	bf00      	nop
}
 800a256:	bd80      	pop	{r7, pc}
 800a258:	20030000 	.word	0x20030000
 800a25c:	20030028 	.word	0x20030028
 800a260:	20030048 	.word	0x20030048
 800a264:	20030058 	.word	0x20030058
 800a268:	20030064 	.word	0x20030064
 800a26c:	2003006c 	.word	0x2003006c
 800a270:	20030074 	.word	0x20030074
 800a274:	2003007c 	.word	0x2003007c
 800a278:	20030098 	.word	0x20030098
 800a27c:	2003009c 	.word	0x2003009c
 800a280:	200300a8 	.word	0x200300a8

0800a284 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800a290:	4811      	ldr	r0, [pc, #68]	; (800a2d8 <TL_BLE_Init+0x54>)
 800a292:	f000 fa27 	bl	800a6e4 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800a296:	4b11      	ldr	r3, [pc, #68]	; (800a2dc <TL_BLE_Init+0x58>)
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	689a      	ldr	r2, [r3, #8]
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	68da      	ldr	r2, [r3, #12]
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	4a0c      	ldr	r2, [pc, #48]	; (800a2e0 <TL_BLE_Init+0x5c>)
 800a2b0:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	4a08      	ldr	r2, [pc, #32]	; (800a2d8 <TL_BLE_Init+0x54>)
 800a2b6:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800a2b8:	f001 f91c 	bl	800b4f4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a08      	ldr	r2, [pc, #32]	; (800a2e4 <TL_BLE_Init+0x60>)
 800a2c2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	4a07      	ldr	r2, [pc, #28]	; (800a2e8 <TL_BLE_Init+0x64>)
 800a2ca:	6013      	str	r3, [r2, #0]

  return 0;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	200300c4 	.word	0x200300c4
 800a2dc:	20030000 	.word	0x20030000
 800a2e0:	20030a48 	.word	0x20030a48
 800a2e4:	2000099c 	.word	0x2000099c
 800a2e8:	200009a0 	.word	0x200009a0

0800a2ec <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800a2f8:	4b09      	ldr	r3, [pc, #36]	; (800a320 <TL_BLE_SendCmd+0x34>)
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2201      	movs	r2, #1
 800a300:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800a302:	4b07      	ldr	r3, [pc, #28]	; (800a320 <TL_BLE_SendCmd+0x34>)
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4619      	mov	r1, r3
 800a30a:	2001      	movs	r0, #1
 800a30c:	f000 f96c 	bl	800a5e8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800a310:	f001 f8fa 	bl	800b508 <HW_IPCC_BLE_SendCmd>

  return 0;
 800a314:	2300      	movs	r3, #0
}
 800a316:	4618      	mov	r0, r3
 800a318:	3708      	adds	r7, #8
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	20030000 	.word	0x20030000

0800a324 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800a32a:	e01c      	b.n	800a366 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800a32c:	1d3b      	adds	r3, r7, #4
 800a32e:	4619      	mov	r1, r3
 800a330:	4812      	ldr	r0, [pc, #72]	; (800a37c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a332:	f000 fa76 	bl	800a822 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	7a5b      	ldrb	r3, [r3, #9]
 800a33a:	2b0f      	cmp	r3, #15
 800a33c:	d003      	beq.n	800a346 <HW_IPCC_BLE_RxEvtNot+0x22>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	7a5b      	ldrb	r3, [r3, #9]
 800a342:	2b0e      	cmp	r3, #14
 800a344:	d105      	bne.n	800a352 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	4619      	mov	r1, r3
 800a34a:	2002      	movs	r0, #2
 800a34c:	f000 f94c 	bl	800a5e8 <OutputDbgTrace>
 800a350:	e004      	b.n	800a35c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	4619      	mov	r1, r3
 800a356:	2003      	movs	r0, #3
 800a358:	f000 f946 	bl	800a5e8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800a35c:	4b08      	ldr	r3, [pc, #32]	; (800a380 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	4610      	mov	r0, r2
 800a364:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800a366:	4805      	ldr	r0, [pc, #20]	; (800a37c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a368:	f000 f9cc 	bl	800a704 <LST_is_empty>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d0dc      	beq.n	800a32c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800a372:	bf00      	nop
}
 800a374:	3708      	adds	r7, #8
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	bf00      	nop
 800a37c:	200300c4 	.word	0x200300c4
 800a380:	2000099c 	.word	0x2000099c

0800a384 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800a388:	4b02      	ldr	r3, [pc, #8]	; (800a394 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4798      	blx	r3

  return;
 800a38e:	bf00      	nop
}
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	200009a0 	.word	0x200009a0

0800a398 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800a3a4:	480d      	ldr	r0, [pc, #52]	; (800a3dc <TL_SYS_Init+0x44>)
 800a3a6:	f000 f99d 	bl	800a6e4 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800a3aa:	4b0d      	ldr	r3, [pc, #52]	; (800a3e0 <TL_SYS_Init+0x48>)
 800a3ac:	68db      	ldr	r3, [r3, #12]
 800a3ae:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	689a      	ldr	r2, [r3, #8]
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	4a08      	ldr	r2, [pc, #32]	; (800a3dc <TL_SYS_Init+0x44>)
 800a3bc:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800a3be:	f001 f8c5 	bl	800b54c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a07      	ldr	r2, [pc, #28]	; (800a3e4 <TL_SYS_Init+0x4c>)
 800a3c8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	4a06      	ldr	r2, [pc, #24]	; (800a3e8 <TL_SYS_Init+0x50>)
 800a3d0:	6013      	str	r3, [r2, #0]

  return 0;
 800a3d2:	2300      	movs	r3, #0
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3710      	adds	r7, #16
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	200300cc 	.word	0x200300cc
 800a3e0:	20030000 	.word	0x20030000
 800a3e4:	200009a4 	.word	0x200009a4
 800a3e8:	200009a8 	.word	0x200009a8

0800a3ec <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b082      	sub	sp, #8
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800a3f8:	4b09      	ldr	r3, [pc, #36]	; (800a420 <TL_SYS_SendCmd+0x34>)
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	2210      	movs	r2, #16
 800a400:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800a402:	4b07      	ldr	r3, [pc, #28]	; (800a420 <TL_SYS_SendCmd+0x34>)
 800a404:	68db      	ldr	r3, [r3, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4619      	mov	r1, r3
 800a40a:	2004      	movs	r0, #4
 800a40c:	f000 f8ec 	bl	800a5e8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800a410:	f001 f8a6 	bl	800b560 <HW_IPCC_SYS_SendCmd>

  return 0;
 800a414:	2300      	movs	r3, #0
}
 800a416:	4618      	mov	r0, r3
 800a418:	3708      	adds	r7, #8
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	20030000 	.word	0x20030000

0800a424 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a428:	4b07      	ldr	r3, [pc, #28]	; (800a448 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4619      	mov	r1, r3
 800a430:	2005      	movs	r0, #5
 800a432:	f000 f8d9 	bl	800a5e8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a436:	4b05      	ldr	r3, [pc, #20]	; (800a44c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4a03      	ldr	r2, [pc, #12]	; (800a448 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a43c:	68d2      	ldr	r2, [r2, #12]
 800a43e:	6812      	ldr	r2, [r2, #0]
 800a440:	4610      	mov	r0, r2
 800a442:	4798      	blx	r3

  return;
 800a444:	bf00      	nop
}
 800a446:	bd80      	pop	{r7, pc}
 800a448:	20030000 	.word	0x20030000
 800a44c:	200009a4 	.word	0x200009a4

0800a450 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a456:	e00e      	b.n	800a476 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800a458:	1d3b      	adds	r3, r7, #4
 800a45a:	4619      	mov	r1, r3
 800a45c:	480b      	ldr	r0, [pc, #44]	; (800a48c <HW_IPCC_SYS_EvtNot+0x3c>)
 800a45e:	f000 f9e0 	bl	800a822 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	4619      	mov	r1, r3
 800a466:	2006      	movs	r0, #6
 800a468:	f000 f8be 	bl	800a5e8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800a46c:	4b08      	ldr	r3, [pc, #32]	; (800a490 <HW_IPCC_SYS_EvtNot+0x40>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	4610      	mov	r0, r2
 800a474:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a476:	4805      	ldr	r0, [pc, #20]	; (800a48c <HW_IPCC_SYS_EvtNot+0x3c>)
 800a478:	f000 f944 	bl	800a704 <LST_is_empty>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d0ea      	beq.n	800a458 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800a482:	bf00      	nop
}
 800a484:	3708      	adds	r7, #8
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
 800a48a:	bf00      	nop
 800a48c:	200300cc 	.word	0x200300cc
 800a490:	200009a8 	.word	0x200009a8

0800a494 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800a49c:	4817      	ldr	r0, [pc, #92]	; (800a4fc <TL_MM_Init+0x68>)
 800a49e:	f000 f921 	bl	800a6e4 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800a4a2:	4817      	ldr	r0, [pc, #92]	; (800a500 <TL_MM_Init+0x6c>)
 800a4a4:	f000 f91e 	bl	800a6e4 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800a4a8:	4b16      	ldr	r3, [pc, #88]	; (800a504 <TL_MM_Init+0x70>)
 800a4aa:	691b      	ldr	r3, [r3, #16]
 800a4ac:	4a16      	ldr	r2, [pc, #88]	; (800a508 <TL_MM_Init+0x74>)
 800a4ae:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800a4b0:	4b15      	ldr	r3, [pc, #84]	; (800a508 <TL_MM_Init+0x74>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	687a      	ldr	r2, [r7, #4]
 800a4b6:	6892      	ldr	r2, [r2, #8]
 800a4b8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800a4ba:	4b13      	ldr	r3, [pc, #76]	; (800a508 <TL_MM_Init+0x74>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	68d2      	ldr	r2, [r2, #12]
 800a4c2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800a4c4:	4b10      	ldr	r3, [pc, #64]	; (800a508 <TL_MM_Init+0x74>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a0c      	ldr	r2, [pc, #48]	; (800a4fc <TL_MM_Init+0x68>)
 800a4ca:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800a4cc:	4b0e      	ldr	r3, [pc, #56]	; (800a508 <TL_MM_Init+0x74>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	687a      	ldr	r2, [r7, #4]
 800a4d2:	6812      	ldr	r2, [r2, #0]
 800a4d4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800a4d6:	4b0c      	ldr	r3, [pc, #48]	; (800a508 <TL_MM_Init+0x74>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	6852      	ldr	r2, [r2, #4]
 800a4de:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800a4e0:	4b09      	ldr	r3, [pc, #36]	; (800a508 <TL_MM_Init+0x74>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	6912      	ldr	r2, [r2, #16]
 800a4e8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800a4ea:	4b07      	ldr	r3, [pc, #28]	; (800a508 <TL_MM_Init+0x74>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	6952      	ldr	r2, [r2, #20]
 800a4f2:	619a      	str	r2, [r3, #24]

  return;
 800a4f4:	bf00      	nop
}
 800a4f6:	3708      	adds	r7, #8
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	200300b4 	.word	0x200300b4
 800a500:	20000994 	.word	0x20000994
 800a504:	20030000 	.word	0x20030000
 800a508:	200009ac 	.word	0x200009ac

0800a50c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800a514:	6879      	ldr	r1, [r7, #4]
 800a516:	4807      	ldr	r0, [pc, #28]	; (800a534 <TL_MM_EvtDone+0x28>)
 800a518:	f000 f93c 	bl	800a794 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800a51c:	6879      	ldr	r1, [r7, #4]
 800a51e:	2000      	movs	r0, #0
 800a520:	f000 f862 	bl	800a5e8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800a524:	4804      	ldr	r0, [pc, #16]	; (800a538 <TL_MM_EvtDone+0x2c>)
 800a526:	f001 f841 	bl	800b5ac <HW_IPCC_MM_SendFreeBuf>

  return;
 800a52a:	bf00      	nop
}
 800a52c:	3708      	adds	r7, #8
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	20000994 	.word	0x20000994
 800a538:	0800a53d 	.word	0x0800a53d

0800a53c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a542:	e00c      	b.n	800a55e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800a544:	1d3b      	adds	r3, r7, #4
 800a546:	4619      	mov	r1, r3
 800a548:	480a      	ldr	r0, [pc, #40]	; (800a574 <SendFreeBuf+0x38>)
 800a54a:	f000 f96a 	bl	800a822 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800a54e:	4b0a      	ldr	r3, [pc, #40]	; (800a578 <SendFreeBuf+0x3c>)
 800a550:	691b      	ldr	r3, [r3, #16]
 800a552:	691b      	ldr	r3, [r3, #16]
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	4611      	mov	r1, r2
 800a558:	4618      	mov	r0, r3
 800a55a:	f000 f91b 	bl	800a794 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a55e:	4805      	ldr	r0, [pc, #20]	; (800a574 <SendFreeBuf+0x38>)
 800a560:	f000 f8d0 	bl	800a704 <LST_is_empty>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	d0ec      	beq.n	800a544 <SendFreeBuf+0x8>
  }

  return;
 800a56a:	bf00      	nop
}
 800a56c:	3708      	adds	r7, #8
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop
 800a574:	20000994 	.word	0x20000994
 800a578:	20030000 	.word	0x20030000

0800a57c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800a580:	4805      	ldr	r0, [pc, #20]	; (800a598 <TL_TRACES_Init+0x1c>)
 800a582:	f000 f8af 	bl	800a6e4 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800a586:	4b05      	ldr	r3, [pc, #20]	; (800a59c <TL_TRACES_Init+0x20>)
 800a588:	695b      	ldr	r3, [r3, #20]
 800a58a:	4a03      	ldr	r2, [pc, #12]	; (800a598 <TL_TRACES_Init+0x1c>)
 800a58c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800a58e:	f001 f843 	bl	800b618 <HW_IPCC_TRACES_Init>

  return;
 800a592:	bf00      	nop
}
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	200300bc 	.word	0x200300bc
 800a59c:	20030000 	.word	0x20030000

0800a5a0 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a5a6:	e008      	b.n	800a5ba <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800a5a8:	1d3b      	adds	r3, r7, #4
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	4808      	ldr	r0, [pc, #32]	; (800a5d0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a5ae:	f000 f938 	bl	800a822 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f000 f80d 	bl	800a5d4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a5ba:	4805      	ldr	r0, [pc, #20]	; (800a5d0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a5bc:	f000 f8a2 	bl	800a704 <LST_is_empty>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d0f0      	beq.n	800a5a8 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800a5c6:	bf00      	nop
}
 800a5c8:	3708      	adds	r7, #8
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	200300bc 	.word	0x200300bc

0800a5d4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800a5dc:	bf00      	nop
 800a5de:	370c      	adds	r7, #12
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr

0800a5e8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b085      	sub	sp, #20
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	6039      	str	r1, [r7, #0]
 800a5f2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800a5f4:	79fb      	ldrb	r3, [r7, #7]
 800a5f6:	2b06      	cmp	r3, #6
 800a5f8:	d845      	bhi.n	800a686 <OutputDbgTrace+0x9e>
 800a5fa:	a201      	add	r2, pc, #4	; (adr r2, 800a600 <OutputDbgTrace+0x18>)
 800a5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a600:	0800a61d 	.word	0x0800a61d
 800a604:	0800a641 	.word	0x0800a641
 800a608:	0800a647 	.word	0x0800a647
 800a60c:	0800a65b 	.word	0x0800a65b
 800a610:	0800a667 	.word	0x0800a667
 800a614:	0800a66d 	.word	0x0800a66d
 800a618:	0800a67b 	.word	0x0800a67b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	7a5b      	ldrb	r3, [r3, #9]
 800a624:	2bff      	cmp	r3, #255	; 0xff
 800a626:	d005      	beq.n	800a634 <OutputDbgTrace+0x4c>
 800a628:	2bff      	cmp	r3, #255	; 0xff
 800a62a:	dc05      	bgt.n	800a638 <OutputDbgTrace+0x50>
 800a62c:	2b0e      	cmp	r3, #14
 800a62e:	d005      	beq.n	800a63c <OutputDbgTrace+0x54>
 800a630:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800a632:	e001      	b.n	800a638 <OutputDbgTrace+0x50>
          break;
 800a634:	bf00      	nop
 800a636:	e027      	b.n	800a688 <OutputDbgTrace+0xa0>
          break;
 800a638:	bf00      	nop
 800a63a:	e025      	b.n	800a688 <OutputDbgTrace+0xa0>
          break;
 800a63c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800a63e:	e023      	b.n	800a688 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a644:	e020      	b.n	800a688 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	7a5b      	ldrb	r3, [r3, #9]
 800a64e:	2b0e      	cmp	r3, #14
 800a650:	d001      	beq.n	800a656 <OutputDbgTrace+0x6e>
 800a652:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a654:	e000      	b.n	800a658 <OutputDbgTrace+0x70>
          break;
 800a656:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a658:	e016      	b.n	800a688 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	7a5b      	ldrb	r3, [r3, #9]
 800a662:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a664:	e010      	b.n	800a688 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a66a:	e00d      	b.n	800a688 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	7a5b      	ldrb	r3, [r3, #9]
 800a674:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a676:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a678:	e006      	b.n	800a688 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	7a5b      	ldrb	r3, [r3, #9]
 800a682:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a684:	e000      	b.n	800a688 <OutputDbgTrace+0xa0>

    default:
      break;
 800a686:	bf00      	nop
  }

  return;
 800a688:	bf00      	nop
}
 800a68a:	3714      	adds	r7, #20
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800a694:	b480      	push	{r7}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
 800a69a:	4603      	mov	r3, r0
 800a69c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800a69e:	4b0f      	ldr	r3, [pc, #60]	; (800a6dc <OTP_Read+0x48>)
 800a6a0:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a6a2:	e002      	b.n	800a6aa <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	3b08      	subs	r3, #8
 800a6a8:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	3307      	adds	r3, #7
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	79fa      	ldrb	r2, [r7, #7]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d003      	beq.n	800a6be <OTP_Read+0x2a>
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	4a09      	ldr	r2, [pc, #36]	; (800a6e0 <OTP_Read+0x4c>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d1f2      	bne.n	800a6a4 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	3307      	adds	r3, #7
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	79fa      	ldrb	r2, [r7, #7]
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d001      	beq.n	800a6ce <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3714      	adds	r7, #20
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr
 800a6dc:	1fff73f8 	.word	0x1fff73f8
 800a6e0:	1fff7000 	.word	0x1fff7000

0800a6e4 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	605a      	str	r2, [r3, #4]
}
 800a6f8:	bf00      	nop
 800a6fa:	370c      	adds	r7, #12
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a704:	b480      	push	{r7}
 800a706:	b087      	sub	sp, #28
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a70c:	f3ef 8310 	mrs	r3, PRIMASK
 800a710:	60fb      	str	r3, [r7, #12]
  return(result);
 800a712:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a714:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a716:	b672      	cpsid	i
}
 800a718:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	429a      	cmp	r2, r3
 800a722:	d102      	bne.n	800a72a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800a724:	2301      	movs	r3, #1
 800a726:	75fb      	strb	r3, [r7, #23]
 800a728:	e001      	b.n	800a72e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800a72a:	2300      	movs	r3, #0
 800a72c:	75fb      	strb	r3, [r7, #23]
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	f383 8810 	msr	PRIMASK, r3
}
 800a738:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a73a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	371c      	adds	r7, #28
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a748:	b480      	push	{r7}
 800a74a:	b087      	sub	sp, #28
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a752:	f3ef 8310 	mrs	r3, PRIMASK
 800a756:	60fb      	str	r3, [r7, #12]
  return(result);
 800a758:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a75a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a75c:	b672      	cpsid	i
}
 800a75e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	683a      	ldr	r2, [r7, #0]
 800a772:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	683a      	ldr	r2, [r7, #0]
 800a77a:	605a      	str	r2, [r3, #4]
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	f383 8810 	msr	PRIMASK, r3
}
 800a786:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a788:	bf00      	nop
 800a78a:	371c      	adds	r7, #28
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a794:	b480      	push	{r7}
 800a796:	b087      	sub	sp, #28
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a79e:	f3ef 8310 	mrs	r3, PRIMASK
 800a7a2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a7a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7a8:	b672      	cpsid	i
}
 800a7aa:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	685a      	ldr	r2, [r3, #4]
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	683a      	ldr	r2, [r7, #0]
 800a7be:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	683a      	ldr	r2, [r7, #0]
 800a7c6:	601a      	str	r2, [r3, #0]
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	f383 8810 	msr	PRIMASK, r3
}
 800a7d2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a7d4:	bf00      	nop
 800a7d6:	371c      	adds	r7, #28
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b087      	sub	sp, #28
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7e8:	f3ef 8310 	mrs	r3, PRIMASK
 800a7ec:	60fb      	str	r3, [r7, #12]
  return(result);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a7f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7f2:	b672      	cpsid	i
}
 800a7f4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	6812      	ldr	r2, [r2, #0]
 800a7fe:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	6852      	ldr	r2, [r2, #4]
 800a808:	605a      	str	r2, [r3, #4]
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	f383 8810 	msr	PRIMASK, r3
}
 800a814:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a816:	bf00      	nop
 800a818:	371c      	adds	r7, #28
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr

0800a822 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800a822:	b580      	push	{r7, lr}
 800a824:	b086      	sub	sp, #24
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
 800a82a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a82c:	f3ef 8310 	mrs	r3, PRIMASK
 800a830:	60fb      	str	r3, [r7, #12]
  return(result);
 800a832:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a834:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a836:	b672      	cpsid	i
}
 800a838:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4618      	mov	r0, r3
 800a848:	f7ff ffca 	bl	800a7e0 <LST_remove_node>
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	f383 8810 	msr	PRIMASK, r3
}
 800a856:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a858:	bf00      	nop
 800a85a:	3718      	adds	r7, #24
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800a860:	b480      	push	{r7}
 800a862:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800a864:	4b03      	ldr	r3, [pc, #12]	; (800a874 <LL_FLASH_GetUDN+0x14>)
 800a866:	681b      	ldr	r3, [r3, #0]
}
 800a868:	4618      	mov	r0, r3
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr
 800a872:	bf00      	nop
 800a874:	1fff7580 	.word	0x1fff7580

0800a878 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800a878:	b480      	push	{r7}
 800a87a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800a87c:	4b03      	ldr	r3, [pc, #12]	; (800a88c <LL_FLASH_GetDeviceID+0x14>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	b2db      	uxtb	r3, r3
}
 800a882:	4618      	mov	r0, r3
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr
 800a88c:	1fff7584 	.word	0x1fff7584

0800a890 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800a890:	b480      	push	{r7}
 800a892:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800a894:	4b03      	ldr	r3, [pc, #12]	; (800a8a4 <LL_FLASH_GetSTCompanyID+0x14>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	0a1b      	lsrs	r3, r3, #8
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr
 800a8a4:	1fff7584 	.word	0x1fff7584

0800a8a8 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800a8a8:	b5b0      	push	{r4, r5, r7, lr}
 800a8aa:	b08e      	sub	sp, #56	; 0x38
 800a8ac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

	UTIL_SEQ_RegTask(1 << CFG_TASK_MY_TASK, UTIL_SEQ_RFU, myTask);
 800a8ae:	4a25      	ldr	r2, [pc, #148]	; (800a944 <APP_BLE_Init+0x9c>)
 800a8b0:	2100      	movs	r1, #0
 800a8b2:	2004      	movs	r0, #4
 800a8b4:	f000 fff2 	bl	800b89c <UTIL_SEQ_RegTask>
	UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	2004      	movs	r0, #4
 800a8bc:	f001 f810 	bl	800b8e0 <UTIL_SEQ_SetTask>

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800a8c0:	4b21      	ldr	r3, [pc, #132]	; (800a948 <APP_BLE_Init+0xa0>)
 800a8c2:	1d3c      	adds	r4, r7, #4
 800a8c4:	461d      	mov	r5, r3
 800a8c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a8c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a8ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a8cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a8ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a8d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a8d2:	682b      	ldr	r3, [r5, #0]
 800a8d4:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800a8d6:	f000 f8ff 	bl	800aad8 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800a8da:	2101      	movs	r1, #1
 800a8dc:	2002      	movs	r0, #2
 800a8de:	f000 fec3 	bl	800b668 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800a8e2:	4a1a      	ldr	r2, [pc, #104]	; (800a94c <APP_BLE_Init+0xa4>)
 800a8e4:	2100      	movs	r1, #0
 800a8e6:	2002      	movs	r0, #2
 800a8e8:	f000 ffd8 	bl	800b89c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 800a8ec:	1d3b      	adds	r3, r7, #4
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7ff f8cc 	bl	8009a8c <SHCI_C2_BLE_Init>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d001      	beq.n	800a8fe <APP_BLE_Init+0x56>
  {
    Error_Handler();
 800a8fa:	f7f8 f8ef 	bl	8002adc <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800a8fe:	f000 f901 	bl	800ab04 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800a902:	f7ff f81d 	bl	8009940 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a906:	4b12      	ldr	r3, [pc, #72]	; (800a950 <APP_BLE_Init+0xa8>)
 800a908:	2200      	movs	r2, #0
 800a90a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800a90e:	4b10      	ldr	r3, [pc, #64]	; (800a950 <APP_BLE_Init+0xa8>)
 800a910:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a914:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800a916:	4a0f      	ldr	r2, [pc, #60]	; (800a954 <APP_BLE_Init+0xac>)
 800a918:	2100      	movs	r1, #0
 800a91a:	2001      	movs	r0, #1
 800a91c:	f000 ffbe 	bl	800b89c <UTIL_SEQ_RegTask>
  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 800a920:	2006      	movs	r0, #6
 800a922:	f7fe fe80 	bl	8009626 <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800a926:	f000 facf 	bl	800aec8 <Custom_APP_Init>
/* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800a92a:	4b09      	ldr	r3, [pc, #36]	; (800a950 <APP_BLE_Init+0xa8>)
 800a92c:	2200      	movs	r2, #0
 800a92e:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800a930:	4b07      	ldr	r3, [pc, #28]	; (800a950 <APP_BLE_Init+0xa8>)
 800a932:	2200      	movs	r2, #0
 800a934:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 800a936:	2001      	movs	r0, #1
 800a938:	f000 f97e 	bl	800ac38 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 800a93c:	bf00      	nop
}
 800a93e:	3738      	adds	r7, #56	; 0x38
 800a940:	46bd      	mov	sp, r7
 800a942:	bdb0      	pop	{r4, r5, r7, pc}
 800a944:	0800ae09 	.word	0x0800ae09
 800a948:	0800e9e0 	.word	0x0800e9e0
 800a94c:	08009ca9 	.word	0x08009ca9
 800a950:	200002e8 	.word	0x200002e8
 800a954:	0800ad21 	.word	0x0800ad21

0800a958 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b08a      	sub	sp, #40	; 0x28
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	3301      	adds	r3, #1
 800a964:	627b      	str	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 800a966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	2bff      	cmp	r3, #255	; 0xff
 800a96c:	d053      	beq.n	800aa16 <SVCCTL_App_Notification+0xbe>
 800a96e:	2bff      	cmp	r3, #255	; 0xff
 800a970:	f300 80a3 	bgt.w	800aaba <SVCCTL_App_Notification+0x162>
 800a974:	2b05      	cmp	r3, #5
 800a976:	d002      	beq.n	800a97e <SVCCTL_App_Notification+0x26>
 800a978:	2b3e      	cmp	r3, #62	; 0x3e
 800a97a:	d020      	beq.n	800a9be <SVCCTL_App_Notification+0x66>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800a97c:	e09d      	b.n	800aaba <SVCCTL_App_Notification+0x162>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800a97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a980:	3302      	adds	r3, #2
 800a982:	60bb      	str	r3, [r7, #8]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a98a:	b29a      	uxth	r2, r3
 800a98c:	4b4f      	ldr	r3, [pc, #316]	; (800aacc <SVCCTL_App_Notification+0x174>)
 800a98e:	8adb      	ldrh	r3, [r3, #22]
 800a990:	429a      	cmp	r2, r3
 800a992:	d106      	bne.n	800a9a2 <SVCCTL_App_Notification+0x4a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800a994:	4b4d      	ldr	r3, [pc, #308]	; (800aacc <SVCCTL_App_Notification+0x174>)
 800a996:	2200      	movs	r2, #0
 800a998:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a99a:	4b4c      	ldr	r3, [pc, #304]	; (800aacc <SVCCTL_App_Notification+0x174>)
 800a99c:	2200      	movs	r2, #0
 800a99e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800a9a2:	2001      	movs	r0, #1
 800a9a4:	f000 f948 	bl	800ac38 <Adv_Request>
      handleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800a9a8:	4b49      	ldr	r3, [pc, #292]	; (800aad0 <SVCCTL_App_Notification+0x178>)
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800a9ae:	4b47      	ldr	r3, [pc, #284]	; (800aacc <SVCCTL_App_Notification+0x174>)
 800a9b0:	8ada      	ldrh	r2, [r3, #22]
 800a9b2:	4b47      	ldr	r3, [pc, #284]	; (800aad0 <SVCCTL_App_Notification+0x178>)
 800a9b4:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&handleNotification);
 800a9b6:	4846      	ldr	r0, [pc, #280]	; (800aad0 <SVCCTL_App_Notification+0x178>)
 800a9b8:	f000 fa72 	bl	800aea0 <Custom_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800a9bc:	e080      	b.n	800aac0 <SVCCTL_App_Notification+0x168>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800a9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c0:	3302      	adds	r3, #2
 800a9c2:	613b      	str	r3, [r7, #16]
      switch (meta_evt->subevent)
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d001      	beq.n	800a9d0 <SVCCTL_App_Notification+0x78>
 800a9cc:	2b03      	cmp	r3, #3
          break;
 800a9ce:	e021      	b.n	800aa14 <SVCCTL_App_Notification+0xbc>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	60fb      	str	r3, [r7, #12]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800a9d6:	4b3d      	ldr	r3, [pc, #244]	; (800aacc <SVCCTL_App_Notification+0x174>)
 800a9d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a9dc:	2b04      	cmp	r3, #4
 800a9de:	d104      	bne.n	800a9ea <SVCCTL_App_Notification+0x92>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800a9e0:	4b3a      	ldr	r3, [pc, #232]	; (800aacc <SVCCTL_App_Notification+0x174>)
 800a9e2:	2206      	movs	r2, #6
 800a9e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800a9e8:	e003      	b.n	800a9f2 <SVCCTL_App_Notification+0x9a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800a9ea:	4b38      	ldr	r3, [pc, #224]	; (800aacc <SVCCTL_App_Notification+0x174>)
 800a9ec:	2205      	movs	r2, #5
 800a9ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a9f8:	b29a      	uxth	r2, r3
 800a9fa:	4b34      	ldr	r3, [pc, #208]	; (800aacc <SVCCTL_App_Notification+0x174>)
 800a9fc:	82da      	strh	r2, [r3, #22]
          handleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800a9fe:	4b34      	ldr	r3, [pc, #208]	; (800aad0 <SVCCTL_App_Notification+0x178>)
 800aa00:	2200      	movs	r2, #0
 800aa02:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800aa04:	4b31      	ldr	r3, [pc, #196]	; (800aacc <SVCCTL_App_Notification+0x174>)
 800aa06:	8ada      	ldrh	r2, [r3, #22]
 800aa08:	4b31      	ldr	r3, [pc, #196]	; (800aad0 <SVCCTL_App_Notification+0x178>)
 800aa0a:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&handleNotification);
 800aa0c:	4830      	ldr	r0, [pc, #192]	; (800aad0 <SVCCTL_App_Notification+0x178>)
 800aa0e:	f000 fa47 	bl	800aea0 <Custom_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800aa12:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 800aa14:	e054      	b.n	800aac0 <SVCCTL_App_Notification+0x168>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800aa16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa18:	3302      	adds	r3, #2
 800aa1a:	623b      	str	r3, [r7, #32]
      switch (blecore_evt->ecode)
 800aa1c:	6a3b      	ldr	r3, [r7, #32]
 800aa1e:	881b      	ldrh	r3, [r3, #0]
 800aa20:	b29b      	uxth	r3, r3
 800aa22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa26:	d042      	beq.n	800aaae <SVCCTL_App_Notification+0x156>
 800aa28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa2c:	dc47      	bgt.n	800aabe <SVCCTL_App_Notification+0x166>
 800aa2e:	2b04      	cmp	r3, #4
 800aa30:	d03f      	beq.n	800aab2 <SVCCTL_App_Notification+0x15a>
 800aa32:	2b04      	cmp	r3, #4
 800aa34:	db43      	blt.n	800aabe <SVCCTL_App_Notification+0x166>
 800aa36:	f240 420a 	movw	r2, #1034	; 0x40a
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	dc3f      	bgt.n	800aabe <SVCCTL_App_Notification+0x166>
 800aa3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa42:	dd3c      	ble.n	800aabe <SVCCTL_App_Notification+0x166>
 800aa44:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800aa48:	2b09      	cmp	r3, #9
 800aa4a:	d838      	bhi.n	800aabe <SVCCTL_App_Notification+0x166>
 800aa4c:	a201      	add	r2, pc, #4	; (adr r2, 800aa54 <SVCCTL_App_Notification+0xfc>)
 800aa4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa52:	bf00      	nop
 800aa54:	0800aaa7 	.word	0x0800aaa7
 800aa58:	0800aa7d 	.word	0x0800aa7d
 800aa5c:	0800aabf 	.word	0x0800aabf
 800aa60:	0800aabf 	.word	0x0800aabf
 800aa64:	0800aabf 	.word	0x0800aabf
 800aa68:	0800aabf 	.word	0x0800aabf
 800aa6c:	0800aab7 	.word	0x0800aab7
 800aa70:	0800aabf 	.word	0x0800aabf
 800aa74:	0800aa8b 	.word	0x0800aa8b
 800aa78:	0800aab7 	.word	0x0800aab7
            aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800aa7c:	4b13      	ldr	r3, [pc, #76]	; (800aacc <SVCCTL_App_Notification+0x174>)
 800aa7e:	8adb      	ldrh	r3, [r3, #22]
 800aa80:	4914      	ldr	r1, [pc, #80]	; (800aad4 <SVCCTL_App_Notification+0x17c>)
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7fe f826 	bl	8008ad4 <aci_gap_pass_key_resp>
        break;
 800aa88:	e016      	b.n	800aab8 <SVCCTL_App_Notification+0x160>
            evt_numeric_value = (aci_gap_numeric_comparison_value_event_rp0 *)blecore_evt->data;
 800aa8a:	6a3b      	ldr	r3, [r7, #32]
 800aa8c:	3302      	adds	r3, #2
 800aa8e:	61fb      	str	r3, [r7, #28]
            numeric_value = evt_numeric_value->Numeric_Value;
 800aa90:	69fb      	ldr	r3, [r7, #28]
 800aa92:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800aa96:	61bb      	str	r3, [r7, #24]
            aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800aa98:	4b0c      	ldr	r3, [pc, #48]	; (800aacc <SVCCTL_App_Notification+0x174>)
 800aa9a:	8adb      	ldrh	r3, [r3, #22]
 800aa9c:	2101      	movs	r1, #1
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7fe f9c2 	bl	8008e28 <aci_gap_numeric_comparison_value_confirm_yesno>
        break;
 800aaa4:	e008      	b.n	800aab8 <SVCCTL_App_Notification+0x160>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 800aaa6:	6a3b      	ldr	r3, [r7, #32]
 800aaa8:	3302      	adds	r3, #2
 800aaaa:	617b      	str	r3, [r7, #20]
        break;
 800aaac:	e004      	b.n	800aab8 <SVCCTL_App_Notification+0x160>
      break;
 800aaae:	bf00      	nop
 800aab0:	e005      	b.n	800aabe <SVCCTL_App_Notification+0x166>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800aab2:	bf00      	nop
 800aab4:	e003      	b.n	800aabe <SVCCTL_App_Notification+0x166>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800aab6:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800aab8:	e001      	b.n	800aabe <SVCCTL_App_Notification+0x166>
      break;
 800aaba:	bf00      	nop
 800aabc:	e000      	b.n	800aac0 <SVCCTL_App_Notification+0x168>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800aabe:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800aac0:	2301      	movs	r3, #1
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3728      	adds	r7, #40	; 0x28
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
 800aaca:	bf00      	nop
 800aacc:	200002e8 	.word	0x200002e8
 800aad0:	200009b8 	.word	0x200009b8
 800aad4:	0001b207 	.word	0x0001b207

0800aad8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800aade:	4b06      	ldr	r3, [pc, #24]	; (800aaf8 <Ble_Tl_Init+0x20>)
 800aae0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800aae2:	4b06      	ldr	r3, [pc, #24]	; (800aafc <Ble_Tl_Init+0x24>)
 800aae4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800aae6:	463b      	mov	r3, r7
 800aae8:	4619      	mov	r1, r3
 800aaea:	4805      	ldr	r0, [pc, #20]	; (800ab00 <Ble_Tl_Init+0x28>)
 800aaec:	f7ff f8c0 	bl	8009c70 <hci_init>

  return;
 800aaf0:	bf00      	nop
}
 800aaf2:	3708      	adds	r7, #8
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}
 800aaf8:	200300d4 	.word	0x200300d4
 800aafc:	0800add1 	.word	0x0800add1
 800ab00:	0800ad99 	.word	0x0800ad99

0800ab04 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 800ab04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab06:	b08d      	sub	sp, #52	; 0x34
 800ab08:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800ab0e:	f7fe fdde 	bl	80096ce <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800ab12:	f000 f8c1 	bl	800ac98 <BleGetBdAddress>
 800ab16:	6178      	str	r0, [r7, #20]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800ab18:	697a      	ldr	r2, [r7, #20]
 800ab1a:	2106      	movs	r1, #6
 800ab1c:	2000      	movs	r0, #0
 800ab1e:	f7fe fc96 	bl	800944e <aci_hal_write_config_data>
#endif

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800ab22:	4a40      	ldr	r2, [pc, #256]	; (800ac24 <Ble_Hci_Gap_Gatt_Init+0x120>)
 800ab24:	2110      	movs	r1, #16
 800ab26:	2018      	movs	r0, #24
 800ab28:	f7fe fc91 	bl	800944e <aci_hal_write_config_data>

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800ab2c:	4a3e      	ldr	r2, [pc, #248]	; (800ac28 <Ble_Hci_Gap_Gatt_Init+0x124>)
 800ab2e:	2110      	movs	r1, #16
 800ab30:	2008      	movs	r0, #8
 800ab32:	f7fe fc8c 	bl	800944e <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800ab36:	2118      	movs	r1, #24
 800ab38:	2001      	movs	r0, #1
 800ab3a:	f7fe fd0d 	bl	8009558 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800ab3e:	f7fe f9da 	bl	8008ef6 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800ab42:	2300      	movs	r3, #0
 800ab44:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800ab46:	7cfb      	ldrb	r3, [r7, #19]
 800ab48:	f043 0301 	orr.w	r3, r3, #1
 800ab4c:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800ab4e:	7cfb      	ldrb	r3, [r7, #19]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d01d      	beq.n	800ab90 <Ble_Hci_Gap_Gatt_Init+0x8c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800ab54:	4b35      	ldr	r3, [pc, #212]	; (800ac2c <Ble_Hci_Gap_Gatt_Init+0x128>)
 800ab56:	60fb      	str	r3, [r7, #12]
    aci_gap_init(role,
 800ab58:	f107 020a 	add.w	r2, r7, #10
 800ab5c:	7cf8      	ldrb	r0, [r7, #19]
 800ab5e:	1dbb      	adds	r3, r7, #6
 800ab60:	9301      	str	r3, [sp, #4]
 800ab62:	f107 0308 	add.w	r3, r7, #8
 800ab66:	9300      	str	r3, [sp, #0]
 800ab68:	4613      	mov	r3, r2
 800ab6a:	2208      	movs	r2, #8
 800ab6c:	2100      	movs	r1, #0
 800ab6e:	f7fe f818 	bl	8008ba2 <aci_gap_init>
                 CFG_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle,
                 &gap_dev_name_char_handle,
                 &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800ab72:	897c      	ldrh	r4, [r7, #10]
 800ab74:	893d      	ldrh	r5, [r7, #8]
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	f7f5 fb02 	bl	8000180 <strlen>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	b2da      	uxtb	r2, r3
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	9300      	str	r3, [sp, #0]
 800ab84:	4613      	mov	r3, r2
 800ab86:	2200      	movs	r2, #0
 800ab88:	4629      	mov	r1, r5
 800ab8a:	4620      	mov	r0, r4
 800ab8c:	f7fe fbb6 	bl	80092fc <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800ab90:	8978      	ldrh	r0, [r7, #10]
 800ab92:	88f9      	ldrh	r1, [r7, #6]
 800ab94:	1d3b      	adds	r3, r7, #4
 800ab96:	9300      	str	r3, [sp, #0]
 800ab98:	2302      	movs	r3, #2
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f7fe fbae 	bl	80092fc <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800aba0:	2202      	movs	r2, #2
 800aba2:	2102      	movs	r1, #2
 800aba4:	2000      	movs	r0, #0
 800aba6:	f7fe fdb6 	bl	8009716 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800abaa:	4b21      	ldr	r3, [pc, #132]	; (800ac30 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800abac:	2201      	movs	r2, #1
 800abae:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800abb0:	4b1f      	ldr	r3, [pc, #124]	; (800ac30 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7fd fe75 	bl	80088a4 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800abba:	4b1d      	ldr	r3, [pc, #116]	; (800ac30 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800abbc:	2201      	movs	r2, #1
 800abbe:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800abc0:	4b1b      	ldr	r3, [pc, #108]	; (800ac30 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800abc2:	2208      	movs	r2, #8
 800abc4:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800abc6:	4b1a      	ldr	r3, [pc, #104]	; (800ac30 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800abc8:	2210      	movs	r2, #16
 800abca:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800abcc:	4b18      	ldr	r3, [pc, #96]	; (800ac30 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800abce:	2200      	movs	r2, #0
 800abd0:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800abd2:	4b17      	ldr	r3, [pc, #92]	; (800ac30 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800abd4:	4a17      	ldr	r2, [pc, #92]	; (800ac34 <Ble_Hci_Gap_Gatt_Init+0x130>)
 800abd6:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800abd8:	4b15      	ldr	r3, [pc, #84]	; (800ac30 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800abda:	2200      	movs	r2, #0
 800abdc:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800abde:	4b14      	ldr	r3, [pc, #80]	; (800ac30 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800abe0:	789c      	ldrb	r4, [r3, #2]
 800abe2:	4b13      	ldr	r3, [pc, #76]	; (800ac30 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800abe4:	785d      	ldrb	r5, [r3, #1]
 800abe6:	4b12      	ldr	r3, [pc, #72]	; (800ac30 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800abe8:	791b      	ldrb	r3, [r3, #4]
 800abea:	4a11      	ldr	r2, [pc, #68]	; (800ac30 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800abec:	7952      	ldrb	r2, [r2, #5]
 800abee:	4910      	ldr	r1, [pc, #64]	; (800ac30 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800abf0:	78c9      	ldrb	r1, [r1, #3]
 800abf2:	480f      	ldr	r0, [pc, #60]	; (800ac30 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800abf4:	6880      	ldr	r0, [r0, #8]
 800abf6:	2600      	movs	r6, #0
 800abf8:	9604      	str	r6, [sp, #16]
 800abfa:	9003      	str	r0, [sp, #12]
 800abfc:	9102      	str	r1, [sp, #8]
 800abfe:	9201      	str	r2, [sp, #4]
 800ac00:	9300      	str	r3, [sp, #0]
 800ac02:	2300      	movs	r3, #0
 800ac04:	2201      	movs	r2, #1
 800ac06:	4629      	mov	r1, r5
 800ac08:	4620      	mov	r0, r4
 800ac0a:	f7fd fe9f 	bl	800894c <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800ac0e:	4b08      	ldr	r3, [pc, #32]	; (800ac30 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800ac10:	789b      	ldrb	r3, [r3, #2]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d001      	beq.n	800ac1a <Ble_Hci_Gap_Gatt_Init+0x116>
   {
     aci_gap_configure_whitelist();
 800ac16:	f7fe f8e3 	bl	8008de0 <aci_gap_configure_whitelist>
   }
}
 800ac1a:	bf00      	nop
 800ac1c:	371c      	adds	r7, #28
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac22:	bf00      	nop
 800ac24:	0800f4f0 	.word	0x0800f4f0
 800ac28:	0800f500 	.word	0x0800f500
 800ac2c:	0800ea14 	.word	0x0800ea14
 800ac30:	200002e8 	.word	0x200002e8
 800ac34:	0001b207 	.word	0x0001b207

0800ac38 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b08c      	sub	sp, #48	; 0x30
 800ac3c:	af08      	add	r7, sp, #32
 800ac3e:	4603      	mov	r3, r0
 800ac40:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ac42:	2392      	movs	r3, #146	; 0x92
 800ac44:	73fb      	strb	r3, [r7, #15]

    BleApplicationContext.Device_Connection_Status = New_Status;
 800ac46:	4a12      	ldr	r2, [pc, #72]	; (800ac90 <Adv_Request+0x58>)
 800ac48:	79fb      	ldrb	r3, [r7, #7]
 800ac4a:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800ac4e:	2300      	movs	r3, #0
 800ac50:	9306      	str	r3, [sp, #24]
 800ac52:	2300      	movs	r3, #0
 800ac54:	9305      	str	r3, [sp, #20]
 800ac56:	2300      	movs	r3, #0
 800ac58:	9304      	str	r3, [sp, #16]
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	9303      	str	r3, [sp, #12]
 800ac5e:	2300      	movs	r3, #0
 800ac60:	9302      	str	r3, [sp, #8]
 800ac62:	2300      	movs	r3, #0
 800ac64:	9301      	str	r3, [sp, #4]
 800ac66:	2300      	movs	r3, #0
 800ac68:	9300      	str	r3, [sp, #0]
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	22a0      	movs	r2, #160	; 0xa0
 800ac6e:	2180      	movs	r1, #128	; 0x80
 800ac70:	2000      	movs	r0, #0
 800ac72:	f7fd fd1d 	bl	80086b0 <aci_gap_set_discoverable>
 800ac76:	4603      	mov	r3, r0
 800ac78:	73fb      	strb	r3, [r7, #15]
        0,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(ad_data), (uint8_t*) ad_data);
 800ac7a:	4906      	ldr	r1, [pc, #24]	; (800ac94 <Adv_Request+0x5c>)
 800ac7c:	2008      	movs	r0, #8
 800ac7e:	f7fe f83d 	bl	8008cfc <aci_gap_update_adv_data>
 800ac82:	4603      	mov	r3, r0
 800ac84:	73fb      	strb	r3, [r7, #15]
    else
    {
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
    }

  return;
 800ac86:	bf00      	nop
}
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	200002e8 	.word	0x200002e8
 800ac94:	20000018 	.word	0x20000018

0800ac98 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b086      	sub	sp, #24
 800ac9c:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800ac9e:	f7ff fddf 	bl	800a860 <LL_FLASH_GetUDN>
 800aca2:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acaa:	d023      	beq.n	800acf4 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800acac:	f7ff fdf0 	bl	800a890 <LL_FLASH_GetSTCompanyID>
 800acb0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800acb2:	f7ff fde1 	bl	800a878 <LL_FLASH_GetDeviceID>
 800acb6:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	b2da      	uxtb	r2, r3
 800acbc:	4b16      	ldr	r3, [pc, #88]	; (800ad18 <BleGetBdAddress+0x80>)
 800acbe:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	0a1b      	lsrs	r3, r3, #8
 800acc4:	b2da      	uxtb	r2, r3
 800acc6:	4b14      	ldr	r3, [pc, #80]	; (800ad18 <BleGetBdAddress+0x80>)
 800acc8:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	b2da      	uxtb	r2, r3
 800acce:	4b12      	ldr	r3, [pc, #72]	; (800ad18 <BleGetBdAddress+0x80>)
 800acd0:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	b2da      	uxtb	r2, r3
 800acd6:	4b10      	ldr	r3, [pc, #64]	; (800ad18 <BleGetBdAddress+0x80>)
 800acd8:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	0a1b      	lsrs	r3, r3, #8
 800acde:	b2da      	uxtb	r2, r3
 800ace0:	4b0d      	ldr	r3, [pc, #52]	; (800ad18 <BleGetBdAddress+0x80>)
 800ace2:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	0c1b      	lsrs	r3, r3, #16
 800ace8:	b2da      	uxtb	r2, r3
 800acea:	4b0b      	ldr	r3, [pc, #44]	; (800ad18 <BleGetBdAddress+0x80>)
 800acec:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800acee:	4b0a      	ldr	r3, [pc, #40]	; (800ad18 <BleGetBdAddress+0x80>)
 800acf0:	617b      	str	r3, [r7, #20]
 800acf2:	e00b      	b.n	800ad0c <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800acf4:	2000      	movs	r0, #0
 800acf6:	f7ff fccd 	bl	800a694 <OTP_Read>
 800acfa:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d002      	beq.n	800ad08 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	617b      	str	r3, [r7, #20]
 800ad06:	e001      	b.n	800ad0c <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800ad08:	4b04      	ldr	r3, [pc, #16]	; (800ad1c <BleGetBdAddress+0x84>)
 800ad0a:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 800ad0c:	697b      	ldr	r3, [r7, #20]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3718      	adds	r7, #24
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	200009b0 	.word	0x200009b0
 800ad1c:	0800f4e8 	.word	0x0800f4e8

0800ad20 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800ad26:	4b0a      	ldr	r3, [pc, #40]	; (800ad50 <Adv_Cancel+0x30>)
 800ad28:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ad2c:	2b05      	cmp	r3, #5
 800ad2e:	d00a      	beq.n	800ad46 <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 800ad30:	2300      	movs	r3, #0
 800ad32:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 800ad34:	f7fd fc98 	bl	8008668 <aci_gap_set_non_discoverable>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ad3c:	4b04      	ldr	r3, [pc, #16]	; (800ad50 <Adv_Cancel+0x30>)
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 800ad44:	bf00      	nop
 800ad46:	bf00      	nop
}
 800ad48:	3708      	adds	r7, #8
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	200002e8 	.word	0x200002e8

0800ad54 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800ad5c:	2100      	movs	r1, #0
 800ad5e:	2002      	movs	r0, #2
 800ad60:	f000 fdbe 	bl	800b8e0 <UTIL_SEQ_SetTask>
  return;
 800ad64:	bf00      	nop
}
 800ad66:	3708      	adds	r7, #8
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800ad74:	2001      	movs	r0, #1
 800ad76:	f000 fe1f 	bl	800b9b8 <UTIL_SEQ_SetEvt>
  return;
 800ad7a:	bf00      	nop
}
 800ad7c:	3708      	adds	r7, #8
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}

0800ad82 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800ad82:	b580      	push	{r7, lr}
 800ad84:	b082      	sub	sp, #8
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800ad8a:	2001      	movs	r0, #1
 800ad8c:	f000 fe34 	bl	800b9f8 <UTIL_SEQ_WaitEvt>
  return;
 800ad90:	bf00      	nop
}
 800ad92:	3708      	adds	r7, #8
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	3308      	adds	r3, #8
 800adaa:	4618      	mov	r0, r3
 800adac:	f7fe fe1a 	bl	80099e4 <SVCCTL_UserEvtRx>
 800adb0:	4603      	mov	r3, r0
 800adb2:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800adb4:	7afb      	ldrb	r3, [r7, #11]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d003      	beq.n	800adc2 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2201      	movs	r2, #1
 800adbe:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800adc0:	e003      	b.n	800adca <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2200      	movs	r2, #0
 800adc6:	701a      	strb	r2, [r3, #0]
  return;
 800adc8:	bf00      	nop
}
 800adca:	3710      	adds	r7, #16
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	4603      	mov	r3, r0
 800add8:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800adda:	79fb      	ldrb	r3, [r7, #7]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d002      	beq.n	800ade6 <BLE_StatusNot+0x16>
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d006      	beq.n	800adf2 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800ade4:	e00b      	b.n	800adfe <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800ade6:	2307      	movs	r3, #7
 800ade8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	f000 fda4 	bl	800b938 <UTIL_SEQ_PauseTask>
      break;
 800adf0:	e005      	b.n	800adfe <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800adf2:	2307      	movs	r3, #7
 800adf4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800adf6:	68f8      	ldr	r0, [r7, #12]
 800adf8:	f000 fdbe 	bl	800b978 <UTIL_SEQ_ResumeTask>
      break;
 800adfc:	bf00      	nop
  }
  return;
 800adfe:	bf00      	nop
}
 800ae00:	3710      	adds	r7, #16
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
	...

0800ae08 <myTask>:
static void Custom_Mycharnotify_Update_Char(void);
static void Custom_Mycharnotify_Send_Notification(void);

/* USER CODE BEGIN PFP */
	void myTask(void)
	{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	af00      	add	r7, sp, #0

		sprintf(NOTIFY_MSG, "Button Pressed!\r\n");
 800ae0c:	4912      	ldr	r1, [pc, #72]	; (800ae58 <myTask+0x50>)
 800ae0e:	4813      	ldr	r0, [pc, #76]	; (800ae5c <myTask+0x54>)
 800ae10:	f001 fb4c 	bl	800c4ac <siprintf>

		//Read the Button State
		if(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 800ae14:	2110      	movs	r1, #16
 800ae16:	4812      	ldr	r0, [pc, #72]	; (800ae60 <myTask+0x58>)
 800ae18:	f7fa f96a 	bl	80050f0 <HAL_GPIO_ReadPin>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d114      	bne.n	800ae4c <myTask+0x44>
		{

			UART_Transmit((uint8_t*)NOTIFY_MSG, strlen(NOTIFY_MSG));
 800ae22:	480e      	ldr	r0, [pc, #56]	; (800ae5c <myTask+0x54>)
 800ae24:	f7f5 f9ac 	bl	8000180 <strlen>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	480b      	ldr	r0, [pc, #44]	; (800ae5c <myTask+0x54>)
 800ae30:	f7f7 fe02 	bl	8002a38 <UART_Transmit>

			OLED_Transmit_Line2((uint8_t*)NOTIFY_MSG);
 800ae34:	4809      	ldr	r0, [pc, #36]	; (800ae5c <myTask+0x54>)
 800ae36:	f7f7 fe35 	bl	8002aa4 <OLED_Transmit_Line2>

			UpdateCharData[0] ^= 0x1;
 800ae3a:	4b0a      	ldr	r3, [pc, #40]	; (800ae64 <myTask+0x5c>)
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	f083 0301 	eor.w	r3, r3, #1
 800ae42:	b2da      	uxtb	r2, r3
 800ae44:	4b07      	ldr	r3, [pc, #28]	; (800ae64 <myTask+0x5c>)
 800ae46:	701a      	strb	r2, [r3, #0]
			Custom_Mycharnotify_Update_Char();		//Depends on Characteristic long name from CubeMX
 800ae48:	f000 f846 	bl	800aed8 <Custom_Mycharnotify_Update_Char>
		}
		UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 800ae4c:	2100      	movs	r1, #0
 800ae4e:	2004      	movs	r0, #4
 800ae50:	f000 fd46 	bl	800b8e0 <UTIL_SEQ_SetTask>
	}
 800ae54:	bf00      	nop
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	0800ea20 	.word	0x0800ea20
 800ae5c:	200009bc 	.word	0x200009bc
 800ae60:	48000800 	.word	0x48000800
 800ae64:	200009e0 	.word	0x200009e0

0800ae68 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b083      	sub	sp, #12
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch(pNotification->Custom_Evt_Opcode)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	2b02      	cmp	r3, #2
 800ae76:	d006      	beq.n	800ae86 <Custom_STM_App_Notification+0x1e>
 800ae78:	2b02      	cmp	r3, #2
 800ae7a:	dc06      	bgt.n	800ae8a <Custom_STM_App_Notification+0x22>
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d006      	beq.n	800ae8e <Custom_STM_App_Notification+0x26>
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d006      	beq.n	800ae92 <Custom_STM_App_Notification+0x2a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800ae84:	e001      	b.n	800ae8a <Custom_STM_App_Notification+0x22>
      break;
 800ae86:	bf00      	nop
 800ae88:	e004      	b.n	800ae94 <Custom_STM_App_Notification+0x2c>
      break;
 800ae8a:	bf00      	nop
 800ae8c:	e002      	b.n	800ae94 <Custom_STM_App_Notification+0x2c>
      break;
 800ae8e:	bf00      	nop
 800ae90:	e000      	b.n	800ae94 <Custom_STM_App_Notification+0x2c>
      break;
 800ae92:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800ae94:	bf00      	nop
}
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch(pNotification->Custom_Evt_Opcode)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d002      	beq.n	800aeb6 <Custom_APP_Notification+0x16>
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d002      	beq.n	800aeba <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800aeb4:	e002      	b.n	800aebc <Custom_APP_Notification+0x1c>
      break;
 800aeb6:	bf00      	nop
 800aeb8:	e000      	b.n	800aebc <Custom_APP_Notification+0x1c>
      break;
 800aeba:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800aebc:	bf00      	nop
}
 800aebe:	370c      	adds	r7, #12
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr

0800aec8 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800aec8:	b480      	push	{r7}
 800aeca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800aecc:	bf00      	nop
}
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr
	...

0800aed8 <Custom_Mycharnotify_Update_Char>:
 *
 *************************************************************/

  /* LED_SVC */
void Custom_Mycharnotify_Update_Char(void) /* Property Read */
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	af00      	add	r7, sp, #0
  Custom_STM_App_Update_Char(CUSTOM_STM_MYCHARNOTIFY, (uint8_t *)UpdateCharData);
 800aedc:	4902      	ldr	r1, [pc, #8]	; (800aee8 <Custom_Mycharnotify_Update_Char+0x10>)
 800aede:	2001      	movs	r0, #1
 800aee0:	f000 f930 	bl	800b144 <Custom_STM_App_Update_Char>
  /* USER CODE BEGIN Mycharnotify_UC*/

  /* USER CODE END Mycharnotify_UC*/
  return;
 800aee4:	bf00      	nop
}
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	200009e0 	.word	0x200009e0

0800aeec <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b08c      	sub	sp, #48	; 0x30
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800aef4:	2300      	movs	r3, #0
 800aef6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	3301      	adds	r3, #1
 800aefe:	62bb      	str	r3, [r7, #40]	; 0x28

  switch(event_pckt->evt)
 800af00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	2bff      	cmp	r3, #255	; 0xff
 800af06:	d16c      	bne.n	800afe2 <Custom_STM_Event_Handler+0xf6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800af08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0a:	3302      	adds	r3, #2
 800af0c:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blecore_evt->ecode)
 800af0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af10:	881b      	ldrh	r3, [r3, #0]
 800af12:	b29b      	uxth	r3, r3
 800af14:	f640 4214 	movw	r2, #3092	; 0xc14
 800af18:	4293      	cmp	r3, r2
 800af1a:	d05c      	beq.n	800afd6 <Custom_STM_Event_Handler+0xea>
 800af1c:	f640 4214 	movw	r2, #3092	; 0xc14
 800af20:	4293      	cmp	r3, r2
 800af22:	dc5a      	bgt.n	800afda <Custom_STM_Event_Handler+0xee>
 800af24:	f640 4201 	movw	r2, #3073	; 0xc01
 800af28:	4293      	cmp	r3, r2
 800af2a:	d003      	beq.n	800af34 <Custom_STM_Event_Handler+0x48>
 800af2c:	f640 4213 	movw	r2, #3091	; 0xc13
 800af30:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800af32:	e055      	b.n	800afe0 <Custom_STM_Event_Handler+0xf4>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800af34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af36:	3302      	adds	r3, #2
 800af38:	623b      	str	r3, [r7, #32]
          if(attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800af3a:	6a3b      	ldr	r3, [r7, #32]
 800af3c:	885b      	ldrh	r3, [r3, #2]
 800af3e:	b29b      	uxth	r3, r3
 800af40:	461a      	mov	r2, r3
 800af42:	4b2b      	ldr	r3, [pc, #172]	; (800aff0 <Custom_STM_Event_Handler+0x104>)
 800af44:	889b      	ldrh	r3, [r3, #4]
 800af46:	3302      	adds	r3, #2
 800af48:	429a      	cmp	r2, r3
 800af4a:	d119      	bne.n	800af80 <Custom_STM_Event_Handler+0x94>
            return_value = SVCCTL_EvtAckFlowEnable;
 800af4c:	2301      	movs	r3, #1
 800af4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch(attribute_modified->Attr_Data[0])
 800af52:	6a3b      	ldr	r3, [r7, #32]
 800af54:	7a1b      	ldrb	r3, [r3, #8]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d002      	beq.n	800af60 <Custom_STM_Event_Handler+0x74>
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d008      	beq.n	800af70 <Custom_STM_Event_Handler+0x84>
              break;
 800af5e:	e039      	b.n	800afd4 <Custom_STM_Event_Handler+0xe8>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT;
 800af60:	2302      	movs	r3, #2
 800af62:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800af64:	f107 030c 	add.w	r3, r7, #12
 800af68:	4618      	mov	r0, r3
 800af6a:	f7ff ff7d 	bl	800ae68 <Custom_STM_App_Notification>
                break;
 800af6e:	e031      	b.n	800afd4 <Custom_STM_Event_Handler+0xe8>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT;
 800af70:	2301      	movs	r3, #1
 800af72:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800af74:	f107 030c 	add.w	r3, r7, #12
 800af78:	4618      	mov	r0, r3
 800af7a:	f7ff ff75 	bl	800ae68 <Custom_STM_App_Notification>
                break;
 800af7e:	e029      	b.n	800afd4 <Custom_STM_Event_Handler+0xe8>
          else if(attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800af80:	6a3b      	ldr	r3, [r7, #32]
 800af82:	885b      	ldrh	r3, [r3, #2]
 800af84:	b29b      	uxth	r3, r3
 800af86:	461a      	mov	r2, r3
 800af88:	4b19      	ldr	r3, [pc, #100]	; (800aff0 <Custom_STM_Event_Handler+0x104>)
 800af8a:	885b      	ldrh	r3, [r3, #2]
 800af8c:	3301      	adds	r3, #1
 800af8e:	429a      	cmp	r2, r3
 800af90:	d125      	bne.n	800afde <Custom_STM_Event_Handler+0xf2>
            return_value = SVCCTL_EvtAckFlowEnable;
 800af92:	2301      	movs	r3, #1
 800af94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            uint8_t x = attribute_modified->Attr_Data[0];
 800af98:	6a3b      	ldr	r3, [r7, #32]
 800af9a:	7a1b      	ldrb	r3, [r3, #8]
 800af9c:	77fb      	strb	r3, [r7, #31]
            sprintf(BLE_MSG, "Write Value: %x\r\n", x);
 800af9e:	7ffb      	ldrb	r3, [r7, #31]
 800afa0:	461a      	mov	r2, r3
 800afa2:	4914      	ldr	r1, [pc, #80]	; (800aff4 <Custom_STM_Event_Handler+0x108>)
 800afa4:	4814      	ldr	r0, [pc, #80]	; (800aff8 <Custom_STM_Event_Handler+0x10c>)
 800afa6:	f001 fa81 	bl	800c4ac <siprintf>
            UART_Transmit((uint8_t*)BLE_MSG, strlen(BLE_MSG));
 800afaa:	4813      	ldr	r0, [pc, #76]	; (800aff8 <Custom_STM_Event_Handler+0x10c>)
 800afac:	f7f5 f8e8 	bl	8000180 <strlen>
 800afb0:	4603      	mov	r3, r0
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	4619      	mov	r1, r3
 800afb6:	4810      	ldr	r0, [pc, #64]	; (800aff8 <Custom_STM_Event_Handler+0x10c>)
 800afb8:	f7f7 fd3e 	bl	8002a38 <UART_Transmit>
            OLED_Transmit_Line3((uint8_t*)BLE_MSG);
 800afbc:	480e      	ldr	r0, [pc, #56]	; (800aff8 <Custom_STM_Event_Handler+0x10c>)
 800afbe:	f7f7 fd7f 	bl	8002ac0 <OLED_Transmit_Line3>
			if (attribute_modified->Attr_Data[0] == 0x22)
 800afc2:	6a3b      	ldr	r3, [r7, #32]
 800afc4:	7a1b      	ldrb	r3, [r3, #8]
 800afc6:	2b22      	cmp	r3, #34	; 0x22
 800afc8:	d109      	bne.n	800afde <Custom_STM_Event_Handler+0xf2>
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800afca:	2101      	movs	r1, #1
 800afcc:	480b      	ldr	r0, [pc, #44]	; (800affc <Custom_STM_Event_Handler+0x110>)
 800afce:	f7fa f8bf 	bl	8005150 <HAL_GPIO_TogglePin>
          break;
 800afd2:	e004      	b.n	800afde <Custom_STM_Event_Handler+0xf2>
 800afd4:	e003      	b.n	800afde <Custom_STM_Event_Handler+0xf2>
          break;
 800afd6:	bf00      	nop
 800afd8:	e004      	b.n	800afe4 <Custom_STM_Event_Handler+0xf8>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800afda:	bf00      	nop
 800afdc:	e002      	b.n	800afe4 <Custom_STM_Event_Handler+0xf8>
          break;
 800afde:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800afe0:	e000      	b.n	800afe4 <Custom_STM_Event_Handler+0xf8>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800afe2:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800afe4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}/* end Custom_STM_Event_Handler */
 800afe8:	4618      	mov	r0, r3
 800afea:	3730      	adds	r7, #48	; 0x30
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	200002cc 	.word	0x200002cc
 800aff4:	0800ea34 	.word	0x0800ea34
 800aff8:	20000ad8 	.word	0x20000ad8
 800affc:	48000400 	.word	0x48000400

0800b000 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b08a      	sub	sp, #40	; 0x28
 800b004:	af06      	add	r7, sp, #24
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800b006:	484b      	ldr	r0, [pc, #300]	; (800b134 <SVCCTL_InitCustomSvc+0x134>)
 800b008:	f7fe fcd2 	bl	80099b0 <SVCCTL_RegisterSvcHandler>
   *                                2 for myCharNotify +
   *                                1 for myCharNotify configuration descriptor +
   *                              = 6
   */

  COPY_LED_SVC_UUID(uuid.Char_UUID_128);
 800b00c:	238f      	movs	r3, #143	; 0x8f
 800b00e:	703b      	strb	r3, [r7, #0]
 800b010:	23e5      	movs	r3, #229	; 0xe5
 800b012:	707b      	strb	r3, [r7, #1]
 800b014:	23b3      	movs	r3, #179	; 0xb3
 800b016:	70bb      	strb	r3, [r7, #2]
 800b018:	23d5      	movs	r3, #213	; 0xd5
 800b01a:	70fb      	strb	r3, [r7, #3]
 800b01c:	232e      	movs	r3, #46	; 0x2e
 800b01e:	713b      	strb	r3, [r7, #4]
 800b020:	237f      	movs	r3, #127	; 0x7f
 800b022:	717b      	strb	r3, [r7, #5]
 800b024:	234a      	movs	r3, #74	; 0x4a
 800b026:	71bb      	strb	r3, [r7, #6]
 800b028:	2398      	movs	r3, #152	; 0x98
 800b02a:	71fb      	strb	r3, [r7, #7]
 800b02c:	232a      	movs	r3, #42	; 0x2a
 800b02e:	723b      	strb	r3, [r7, #8]
 800b030:	2348      	movs	r3, #72	; 0x48
 800b032:	727b      	strb	r3, [r7, #9]
 800b034:	237a      	movs	r3, #122	; 0x7a
 800b036:	72bb      	strb	r3, [r7, #10]
 800b038:	23cc      	movs	r3, #204	; 0xcc
 800b03a:	72fb      	strb	r3, [r7, #11]
 800b03c:	2300      	movs	r3, #0
 800b03e:	733b      	strb	r3, [r7, #12]
 800b040:	2300      	movs	r3, #0
 800b042:	737b      	strb	r3, [r7, #13]
 800b044:	2300      	movs	r3, #0
 800b046:	73bb      	strb	r3, [r7, #14]
 800b048:	2300      	movs	r3, #0
 800b04a:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_service(UUID_TYPE_128,
 800b04c:	4639      	mov	r1, r7
 800b04e:	4b3a      	ldr	r3, [pc, #232]	; (800b138 <SVCCTL_InitCustomSvc+0x138>)
 800b050:	9300      	str	r3, [sp, #0]
 800b052:	2306      	movs	r3, #6
 800b054:	2201      	movs	r2, #1
 800b056:	2002      	movs	r0, #2
 800b058:	f7fd ff72 	bl	8008f40 <aci_gatt_add_service>
                       &(CustomContext.CustomLed_SvcHdle));

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 800b05c:	2319      	movs	r3, #25
 800b05e:	703b      	strb	r3, [r7, #0]
 800b060:	23ed      	movs	r3, #237	; 0xed
 800b062:	707b      	strb	r3, [r7, #1]
 800b064:	2382      	movs	r3, #130	; 0x82
 800b066:	70bb      	strb	r3, [r7, #2]
 800b068:	23ae      	movs	r3, #174	; 0xae
 800b06a:	70fb      	strb	r3, [r7, #3]
 800b06c:	23ed      	movs	r3, #237	; 0xed
 800b06e:	713b      	strb	r3, [r7, #4]
 800b070:	2321      	movs	r3, #33	; 0x21
 800b072:	717b      	strb	r3, [r7, #5]
 800b074:	234c      	movs	r3, #76	; 0x4c
 800b076:	71bb      	strb	r3, [r7, #6]
 800b078:	239d      	movs	r3, #157	; 0x9d
 800b07a:	71fb      	strb	r3, [r7, #7]
 800b07c:	2341      	movs	r3, #65	; 0x41
 800b07e:	723b      	strb	r3, [r7, #8]
 800b080:	2345      	movs	r3, #69	; 0x45
 800b082:	727b      	strb	r3, [r7, #9]
 800b084:	2322      	movs	r3, #34	; 0x22
 800b086:	72bb      	strb	r3, [r7, #10]
 800b088:	238e      	movs	r3, #142	; 0x8e
 800b08a:	72fb      	strb	r3, [r7, #11]
 800b08c:	2300      	movs	r3, #0
 800b08e:	733b      	strb	r3, [r7, #12]
 800b090:	2300      	movs	r3, #0
 800b092:	737b      	strb	r3, [r7, #13]
 800b094:	2300      	movs	r3, #0
 800b096:	73bb      	strb	r3, [r7, #14]
 800b098:	2300      	movs	r3, #0
 800b09a:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomLed_SvcHdle,
 800b09c:	4b26      	ldr	r3, [pc, #152]	; (800b138 <SVCCTL_InitCustomSvc+0x138>)
 800b09e:	8818      	ldrh	r0, [r3, #0]
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	463a      	mov	r2, r7
 800b0a6:	4925      	ldr	r1, [pc, #148]	; (800b13c <SVCCTL_InitCustomSvc+0x13c>)
 800b0a8:	9105      	str	r1, [sp, #20]
 800b0aa:	2100      	movs	r1, #0
 800b0ac:	9104      	str	r1, [sp, #16]
 800b0ae:	2110      	movs	r1, #16
 800b0b0:	9103      	str	r1, [sp, #12]
 800b0b2:	2101      	movs	r1, #1
 800b0b4:	9102      	str	r1, [sp, #8]
 800b0b6:	2100      	movs	r1, #0
 800b0b8:	9101      	str	r1, [sp, #4]
 800b0ba:	2108      	movs	r1, #8
 800b0bc:	9100      	str	r1, [sp, #0]
 800b0be:	2102      	movs	r1, #2
 800b0c0:	f7fe f814 	bl	80090ec <aci_gatt_add_char>
                    CHAR_VALUE_LEN_CONSTANT,
                    &(CustomContext.CustomMycharwriteHdle));
  /**
   *  myCharNotify
   */
  COPY_MYCHARNOTIFY_UUID(uuid.Char_UUID_128);
 800b0c4:	2319      	movs	r3, #25
 800b0c6:	703b      	strb	r3, [r7, #0]
 800b0c8:	23ed      	movs	r3, #237	; 0xed
 800b0ca:	707b      	strb	r3, [r7, #1]
 800b0cc:	2382      	movs	r3, #130	; 0x82
 800b0ce:	70bb      	strb	r3, [r7, #2]
 800b0d0:	23ae      	movs	r3, #174	; 0xae
 800b0d2:	70fb      	strb	r3, [r7, #3]
 800b0d4:	23ed      	movs	r3, #237	; 0xed
 800b0d6:	713b      	strb	r3, [r7, #4]
 800b0d8:	2321      	movs	r3, #33	; 0x21
 800b0da:	717b      	strb	r3, [r7, #5]
 800b0dc:	234c      	movs	r3, #76	; 0x4c
 800b0de:	71bb      	strb	r3, [r7, #6]
 800b0e0:	239d      	movs	r3, #157	; 0x9d
 800b0e2:	71fb      	strb	r3, [r7, #7]
 800b0e4:	2341      	movs	r3, #65	; 0x41
 800b0e6:	723b      	strb	r3, [r7, #8]
 800b0e8:	2345      	movs	r3, #69	; 0x45
 800b0ea:	727b      	strb	r3, [r7, #9]
 800b0ec:	2322      	movs	r3, #34	; 0x22
 800b0ee:	72bb      	strb	r3, [r7, #10]
 800b0f0:	238e      	movs	r3, #142	; 0x8e
 800b0f2:	72fb      	strb	r3, [r7, #11]
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	733b      	strb	r3, [r7, #12]
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	737b      	strb	r3, [r7, #13]
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	73bb      	strb	r3, [r7, #14]
 800b100:	2300      	movs	r3, #0
 800b102:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomLed_SvcHdle,
 800b104:	4b0c      	ldr	r3, [pc, #48]	; (800b138 <SVCCTL_InitCustomSvc+0x138>)
 800b106:	8818      	ldrh	r0, [r3, #0]
 800b108:	2301      	movs	r3, #1
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	463a      	mov	r2, r7
 800b10e:	490c      	ldr	r1, [pc, #48]	; (800b140 <SVCCTL_InitCustomSvc+0x140>)
 800b110:	9105      	str	r1, [sp, #20]
 800b112:	2100      	movs	r1, #0
 800b114:	9104      	str	r1, [sp, #16]
 800b116:	2110      	movs	r1, #16
 800b118:	9103      	str	r1, [sp, #12]
 800b11a:	2107      	movs	r1, #7
 800b11c:	9102      	str	r1, [sp, #8]
 800b11e:	2100      	movs	r1, #0
 800b120:	9101      	str	r1, [sp, #4]
 800b122:	2110      	movs	r1, #16
 800b124:	9100      	str	r1, [sp, #0]
 800b126:	2102      	movs	r1, #2
 800b128:	f7fd ffe0 	bl	80090ec <aci_gatt_add_char>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800b12c:	bf00      	nop
}
 800b12e:	3710      	adds	r7, #16
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}
 800b134:	0800aeed 	.word	0x0800aeed
 800b138:	200002cc 	.word	0x200002cc
 800b13c:	200002ce 	.word	0x200002ce
 800b140:	200002d0 	.word	0x200002d0

0800b144 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b086      	sub	sp, #24
 800b148:	af02      	add	r7, sp, #8
 800b14a:	4603      	mov	r3, r0
 800b14c:	6039      	str	r1, [r7, #0]
 800b14e:	71fb      	strb	r3, [r7, #7]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800b150:	2392      	movs	r3, #146	; 0x92
 800b152:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch(CharOpcode)
 800b154:	79fb      	ldrb	r3, [r7, #7]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d002      	beq.n	800b160 <Custom_STM_App_Update_Char+0x1c>
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d00e      	beq.n	800b17c <Custom_STM_App_Update_Char+0x38>

      /* USER CODE END CUSTOM_STM_Service_1_Char_2*/
      break;

    default:
      break;
 800b15e:	e01b      	b.n	800b198 <Custom_STM_App_Update_Char+0x54>
      result = aci_gatt_update_char_value(CustomContext.CustomLed_SvcHdle,
 800b160:	4b10      	ldr	r3, [pc, #64]	; (800b1a4 <Custom_STM_App_Update_Char+0x60>)
 800b162:	8818      	ldrh	r0, [r3, #0]
 800b164:	4b0f      	ldr	r3, [pc, #60]	; (800b1a4 <Custom_STM_App_Update_Char+0x60>)
 800b166:	8859      	ldrh	r1, [r3, #2]
 800b168:	2201      	movs	r2, #1
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	9300      	str	r3, [sp, #0]
 800b16e:	4613      	mov	r3, r2
 800b170:	2200      	movs	r2, #0
 800b172:	f7fe f8c3 	bl	80092fc <aci_gatt_update_char_value>
 800b176:	4603      	mov	r3, r0
 800b178:	73fb      	strb	r3, [r7, #15]
      break;
 800b17a:	e00d      	b.n	800b198 <Custom_STM_App_Update_Char+0x54>
      result = aci_gatt_update_char_value(CustomContext.CustomLed_SvcHdle,
 800b17c:	4b09      	ldr	r3, [pc, #36]	; (800b1a4 <Custom_STM_App_Update_Char+0x60>)
 800b17e:	8818      	ldrh	r0, [r3, #0]
 800b180:	4b08      	ldr	r3, [pc, #32]	; (800b1a4 <Custom_STM_App_Update_Char+0x60>)
 800b182:	8899      	ldrh	r1, [r3, #4]
 800b184:	2201      	movs	r2, #1
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	9300      	str	r3, [sp, #0]
 800b18a:	4613      	mov	r3, r2
 800b18c:	2200      	movs	r2, #0
 800b18e:	f7fe f8b5 	bl	80092fc <aci_gatt_update_char_value>
 800b192:	4603      	mov	r3, r0
 800b194:	73fb      	strb	r3, [r7, #15]
      break;
 800b196:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return result;
 800b198:	7bfb      	ldrb	r3, [r7, #15]
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	200002cc 	.word	0x200002cc

0800b1a8 <LL_PWR_EnableBootC2>:
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800b1ac:	4b05      	ldr	r3, [pc, #20]	; (800b1c4 <LL_PWR_EnableBootC2+0x1c>)
 800b1ae:	68db      	ldr	r3, [r3, #12]
 800b1b0:	4a04      	ldr	r2, [pc, #16]	; (800b1c4 <LL_PWR_EnableBootC2+0x1c>)
 800b1b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1b6:	60d3      	str	r3, [r2, #12]
}
 800b1b8:	bf00      	nop
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c0:	4770      	bx	lr
 800b1c2:	bf00      	nop
 800b1c4:	58000400 	.word	0x58000400

0800b1c8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b083      	sub	sp, #12
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800b1d0:	4b06      	ldr	r3, [pc, #24]	; (800b1ec <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b1d2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800b1d6:	4905      	ldr	r1, [pc, #20]	; (800b1ec <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800b1e0:	bf00      	nop
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr
 800b1ec:	58000800 	.word	0x58000800

0800b1f0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800b1f8:	4b05      	ldr	r3, [pc, #20]	; (800b210 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b1fa:	6a1a      	ldr	r2, [r3, #32]
 800b1fc:	4904      	ldr	r1, [pc, #16]	; (800b210 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	4313      	orrs	r3, r2
 800b202:	620b      	str	r3, [r1, #32]
}
 800b204:	bf00      	nop
 800b206:	370c      	adds	r7, #12
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr
 800b210:	58000800 	.word	0x58000800

0800b214 <LL_AHB3_GRP1_EnableClock>:
{
 800b214:	b480      	push	{r7}
 800b216:	b085      	sub	sp, #20
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800b21c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b220:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b222:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	4313      	orrs	r3, r2
 800b22a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800b22c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b230:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	4013      	ands	r3, r2
 800b236:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b238:	68fb      	ldr	r3, [r7, #12]
}
 800b23a:	bf00      	nop
 800b23c:	3714      	adds	r7, #20
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr

0800b246 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800b246:	b480      	push	{r7}
 800b248:	b085      	sub	sp, #20
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800b24e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b252:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800b256:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	4313      	orrs	r3, r2
 800b25e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800b262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b266:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	4013      	ands	r3, r2
 800b26e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b270:	68fb      	ldr	r3, [r7, #12]
}
 800b272:	bf00      	nop
 800b274:	3714      	adds	r7, #20
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr

0800b27e <LL_C1_IPCC_EnableIT_TXF>:
{
 800b27e:	b480      	push	{r7}
 800b280:	b083      	sub	sp, #12
 800b282:	af00      	add	r7, sp, #0
 800b284:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	601a      	str	r2, [r3, #0]
}
 800b292:	bf00      	nop
 800b294:	370c      	adds	r7, #12
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr

0800b29e <LL_C1_IPCC_EnableIT_RXO>:
{
 800b29e:	b480      	push	{r7}
 800b2a0:	b083      	sub	sp, #12
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f043 0201 	orr.w	r2, r3, #1
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	601a      	str	r2, [r3, #0]
}
 800b2b2:	bf00      	nop
 800b2b4:	370c      	adds	r7, #12
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr

0800b2be <LL_C1_IPCC_EnableTransmitChannel>:
{
 800b2be:	b480      	push	{r7}
 800b2c0:	b083      	sub	sp, #12
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
 800b2c6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	685a      	ldr	r2, [r3, #4]
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	041b      	lsls	r3, r3, #16
 800b2d0:	43db      	mvns	r3, r3
 800b2d2:	401a      	ands	r2, r3
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	605a      	str	r2, [r3, #4]
}
 800b2d8:	bf00      	nop
 800b2da:	370c      	adds	r7, #12
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr

0800b2e4 <LL_C1_IPCC_DisableTransmitChannel>:
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b083      	sub	sp, #12
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	685a      	ldr	r2, [r3, #4]
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	041b      	lsls	r3, r3, #16
 800b2f6:	431a      	orrs	r2, r3
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	605a      	str	r2, [r3, #4]
}
 800b2fc:	bf00      	nop
 800b2fe:	370c      	adds	r7, #12
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr

0800b308 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800b308:	b480      	push	{r7}
 800b30a:	b083      	sub	sp, #12
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	685a      	ldr	r2, [r3, #4]
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	43db      	mvns	r3, r3
 800b31a:	401a      	ands	r2, r3
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	605a      	str	r2, [r3, #4]
}
 800b320:	bf00      	nop
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <LL_C1_IPCC_ClearFlag_CHx>:
{
 800b32c:	b480      	push	{r7}
 800b32e:	b083      	sub	sp, #12
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	683a      	ldr	r2, [r7, #0]
 800b33a:	609a      	str	r2, [r3, #8]
}
 800b33c:	bf00      	nop
 800b33e:	370c      	adds	r7, #12
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr

0800b348 <LL_C1_IPCC_SetFlag_CHx>:
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	041a      	lsls	r2, r3, #16
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	609a      	str	r2, [r3, #8]
}
 800b35a:	bf00      	nop
 800b35c:	370c      	adds	r7, #12
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr

0800b366 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800b366:	b480      	push	{r7}
 800b368:	b083      	sub	sp, #12
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
 800b36e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	68da      	ldr	r2, [r3, #12]
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	4013      	ands	r3, r2
 800b378:	683a      	ldr	r2, [r7, #0]
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d101      	bne.n	800b382 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800b37e:	2301      	movs	r3, #1
 800b380:	e000      	b.n	800b384 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800b382:	2300      	movs	r3, #0
}
 800b384:	4618      	mov	r0, r3
 800b386:	370c      	adds	r7, #12
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	69da      	ldr	r2, [r3, #28]
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	4013      	ands	r3, r2
 800b3a2:	683a      	ldr	r2, [r7, #0]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d101      	bne.n	800b3ac <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	e000      	b.n	800b3ae <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800b3ac:	2300      	movs	r3, #0
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	370c      	adds	r7, #12
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr
	...

0800b3bc <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800b3c0:	2102      	movs	r1, #2
 800b3c2:	4819      	ldr	r0, [pc, #100]	; (800b428 <HW_IPCC_Rx_Handler+0x6c>)
 800b3c4:	f7ff ffe4 	bl	800b390 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d009      	beq.n	800b3e2 <HW_IPCC_Rx_Handler+0x26>
 800b3ce:	4b16      	ldr	r3, [pc, #88]	; (800b428 <HW_IPCC_Rx_Handler+0x6c>)
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	43db      	mvns	r3, r3
 800b3d4:	f003 0302 	and.w	r3, r3, #2
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d002      	beq.n	800b3e2 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800b3dc:	f000 f8da 	bl	800b594 <HW_IPCC_SYS_EvtHandler>
 800b3e0:	e01f      	b.n	800b422 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800b3e2:	2101      	movs	r1, #1
 800b3e4:	4810      	ldr	r0, [pc, #64]	; (800b428 <HW_IPCC_Rx_Handler+0x6c>)
 800b3e6:	f7ff ffd3 	bl	800b390 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d008      	beq.n	800b402 <HW_IPCC_Rx_Handler+0x46>
 800b3f0:	4b0d      	ldr	r3, [pc, #52]	; (800b428 <HW_IPCC_Rx_Handler+0x6c>)
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	f003 0301 	and.w	r3, r3, #1
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d102      	bne.n	800b402 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800b3fc:	f000 f88e 	bl	800b51c <HW_IPCC_BLE_EvtHandler>
 800b400:	e00f      	b.n	800b422 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800b402:	2108      	movs	r1, #8
 800b404:	4808      	ldr	r0, [pc, #32]	; (800b428 <HW_IPCC_Rx_Handler+0x6c>)
 800b406:	f7ff ffc3 	bl	800b390 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b40a:	4603      	mov	r3, r0
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d009      	beq.n	800b424 <HW_IPCC_Rx_Handler+0x68>
 800b410:	4b05      	ldr	r3, [pc, #20]	; (800b428 <HW_IPCC_Rx_Handler+0x6c>)
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	43db      	mvns	r3, r3
 800b416:	f003 0308 	and.w	r3, r3, #8
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d002      	beq.n	800b424 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800b41e:	f000 f905 	bl	800b62c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800b422:	bf00      	nop
 800b424:	bf00      	nop
}
 800b426:	bd80      	pop	{r7, pc}
 800b428:	58000c00 	.word	0x58000c00

0800b42c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800b430:	2102      	movs	r1, #2
 800b432:	481a      	ldr	r0, [pc, #104]	; (800b49c <HW_IPCC_Tx_Handler+0x70>)
 800b434:	f7ff ff97 	bl	800b366 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b438:	4603      	mov	r3, r0
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d109      	bne.n	800b452 <HW_IPCC_Tx_Handler+0x26>
 800b43e:	4b17      	ldr	r3, [pc, #92]	; (800b49c <HW_IPCC_Tx_Handler+0x70>)
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	43db      	mvns	r3, r3
 800b444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d002      	beq.n	800b452 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800b44c:	f000 f896 	bl	800b57c <HW_IPCC_SYS_CmdEvtHandler>
 800b450:	e020      	b.n	800b494 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800b452:	2108      	movs	r1, #8
 800b454:	4811      	ldr	r0, [pc, #68]	; (800b49c <HW_IPCC_Tx_Handler+0x70>)
 800b456:	f7ff ff86 	bl	800b366 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b45a:	4603      	mov	r3, r0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d109      	bne.n	800b474 <HW_IPCC_Tx_Handler+0x48>
 800b460:	4b0e      	ldr	r3, [pc, #56]	; (800b49c <HW_IPCC_Tx_Handler+0x70>)
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	43db      	mvns	r3, r3
 800b466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d002      	beq.n	800b474 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 800b46e:	f000 f8bf 	bl	800b5f0 <HW_IPCC_MM_FreeBufHandler>
 800b472:	e00f      	b.n	800b494 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800b474:	2120      	movs	r1, #32
 800b476:	4809      	ldr	r0, [pc, #36]	; (800b49c <HW_IPCC_Tx_Handler+0x70>)
 800b478:	f7ff ff75 	bl	800b366 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d109      	bne.n	800b496 <HW_IPCC_Tx_Handler+0x6a>
 800b482:	4b06      	ldr	r3, [pc, #24]	; (800b49c <HW_IPCC_Tx_Handler+0x70>)
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	43db      	mvns	r3, r3
 800b488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d002      	beq.n	800b496 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800b490:	f000 f850 	bl	800b534 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800b494:	bf00      	nop
 800b496:	bf00      	nop
}
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	58000c00 	.word	0x58000c00

0800b4a0 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800b4a4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b4a8:	f7ff fecd 	bl	800b246 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800b4ac:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b4b0:	f7ff fe8a 	bl	800b1c8 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800b4b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b4b8:	f7ff fe9a 	bl	800b1f0 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800b4bc:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800b4be:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800b4c0:	f7ff fe72 	bl	800b1a8 <LL_PWR_EnableBootC2>

  return;
 800b4c4:	bf00      	nop
}
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800b4cc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b4d0:	f7ff fea0 	bl	800b214 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800b4d4:	4806      	ldr	r0, [pc, #24]	; (800b4f0 <HW_IPCC_Init+0x28>)
 800b4d6:	f7ff fee2 	bl	800b29e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800b4da:	4805      	ldr	r0, [pc, #20]	; (800b4f0 <HW_IPCC_Init+0x28>)
 800b4dc:	f7ff fecf 	bl	800b27e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800b4e0:	202c      	movs	r0, #44	; 0x2c
 800b4e2:	f7f9 fc50 	bl	8004d86 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800b4e6:	202d      	movs	r0, #45	; 0x2d
 800b4e8:	f7f9 fc4d 	bl	8004d86 <HAL_NVIC_EnableIRQ>

  return;
 800b4ec:	bf00      	nop
}
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	58000c00 	.word	0x58000c00

0800b4f4 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800b4f8:	2101      	movs	r1, #1
 800b4fa:	4802      	ldr	r0, [pc, #8]	; (800b504 <HW_IPCC_BLE_Init+0x10>)
 800b4fc:	f7ff ff04 	bl	800b308 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b500:	bf00      	nop
}
 800b502:	bd80      	pop	{r7, pc}
 800b504:	58000c00 	.word	0x58000c00

0800b508 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800b50c:	2101      	movs	r1, #1
 800b50e:	4802      	ldr	r0, [pc, #8]	; (800b518 <HW_IPCC_BLE_SendCmd+0x10>)
 800b510:	f7ff ff1a 	bl	800b348 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800b514:	bf00      	nop
}
 800b516:	bd80      	pop	{r7, pc}
 800b518:	58000c00 	.word	0x58000c00

0800b51c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800b520:	f7fe ff00 	bl	800a324 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800b524:	2101      	movs	r1, #1
 800b526:	4802      	ldr	r0, [pc, #8]	; (800b530 <HW_IPCC_BLE_EvtHandler+0x14>)
 800b528:	f7ff ff00 	bl	800b32c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b52c:	bf00      	nop
}
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	58000c00 	.word	0x58000c00

0800b534 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800b534:	b580      	push	{r7, lr}
 800b536:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800b538:	2120      	movs	r1, #32
 800b53a:	4803      	ldr	r0, [pc, #12]	; (800b548 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800b53c:	f7ff fed2 	bl	800b2e4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800b540:	f7fe ff20 	bl	800a384 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800b544:	bf00      	nop
}
 800b546:	bd80      	pop	{r7, pc}
 800b548:	58000c00 	.word	0x58000c00

0800b54c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800b550:	2102      	movs	r1, #2
 800b552:	4802      	ldr	r0, [pc, #8]	; (800b55c <HW_IPCC_SYS_Init+0x10>)
 800b554:	f7ff fed8 	bl	800b308 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b558:	bf00      	nop
}
 800b55a:	bd80      	pop	{r7, pc}
 800b55c:	58000c00 	.word	0x58000c00

0800b560 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800b560:	b580      	push	{r7, lr}
 800b562:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b564:	2102      	movs	r1, #2
 800b566:	4804      	ldr	r0, [pc, #16]	; (800b578 <HW_IPCC_SYS_SendCmd+0x18>)
 800b568:	f7ff feee 	bl	800b348 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b56c:	2102      	movs	r1, #2
 800b56e:	4802      	ldr	r0, [pc, #8]	; (800b578 <HW_IPCC_SYS_SendCmd+0x18>)
 800b570:	f7ff fea5 	bl	800b2be <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800b574:	bf00      	nop
}
 800b576:	bd80      	pop	{r7, pc}
 800b578:	58000c00 	.word	0x58000c00

0800b57c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b580:	2102      	movs	r1, #2
 800b582:	4803      	ldr	r0, [pc, #12]	; (800b590 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800b584:	f7ff feae 	bl	800b2e4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800b588:	f7fe ff4c 	bl	800a424 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800b58c:	bf00      	nop
}
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	58000c00 	.word	0x58000c00

0800b594 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800b594:	b580      	push	{r7, lr}
 800b596:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800b598:	f7fe ff5a 	bl	800a450 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800b59c:	2102      	movs	r1, #2
 800b59e:	4802      	ldr	r0, [pc, #8]	; (800b5a8 <HW_IPCC_SYS_EvtHandler+0x14>)
 800b5a0:	f7ff fec4 	bl	800b32c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b5a4:	bf00      	nop
}
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	58000c00 	.word	0x58000c00

0800b5ac <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800b5b4:	2108      	movs	r1, #8
 800b5b6:	480c      	ldr	r0, [pc, #48]	; (800b5e8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b5b8:	f7ff fed5 	bl	800b366 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d007      	beq.n	800b5d2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800b5c2:	4a0a      	ldr	r2, [pc, #40]	; (800b5ec <HW_IPCC_MM_SendFreeBuf+0x40>)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b5c8:	2108      	movs	r1, #8
 800b5ca:	4807      	ldr	r0, [pc, #28]	; (800b5e8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b5cc:	f7ff fe77 	bl	800b2be <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800b5d0:	e006      	b.n	800b5e0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b5d6:	2108      	movs	r1, #8
 800b5d8:	4803      	ldr	r0, [pc, #12]	; (800b5e8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b5da:	f7ff feb5 	bl	800b348 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800b5de:	bf00      	nop
}
 800b5e0:	3708      	adds	r7, #8
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	58000c00 	.word	0x58000c00
 800b5ec:	20000afc 	.word	0x20000afc

0800b5f0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b5f4:	2108      	movs	r1, #8
 800b5f6:	4806      	ldr	r0, [pc, #24]	; (800b610 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800b5f8:	f7ff fe74 	bl	800b2e4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800b5fc:	4b05      	ldr	r3, [pc, #20]	; (800b614 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b602:	2108      	movs	r1, #8
 800b604:	4802      	ldr	r0, [pc, #8]	; (800b610 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800b606:	f7ff fe9f 	bl	800b348 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800b60a:	bf00      	nop
}
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	58000c00 	.word	0x58000c00
 800b614:	20000afc 	.word	0x20000afc

0800b618 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800b61c:	2108      	movs	r1, #8
 800b61e:	4802      	ldr	r0, [pc, #8]	; (800b628 <HW_IPCC_TRACES_Init+0x10>)
 800b620:	f7ff fe72 	bl	800b308 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b624:	bf00      	nop
}
 800b626:	bd80      	pop	{r7, pc}
 800b628:	58000c00 	.word	0x58000c00

0800b62c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800b630:	f7fe ffb6 	bl	800a5a0 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800b634:	2108      	movs	r1, #8
 800b636:	4802      	ldr	r0, [pc, #8]	; (800b640 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800b638:	f7ff fe78 	bl	800b32c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b63c:	bf00      	nop
}
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	58000c00 	.word	0x58000c00

0800b644 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800b644:	b480      	push	{r7}
 800b646:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800b648:	4b05      	ldr	r3, [pc, #20]	; (800b660 <UTIL_LPM_Init+0x1c>)
 800b64a:	2200      	movs	r2, #0
 800b64c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800b64e:	4b05      	ldr	r3, [pc, #20]	; (800b664 <UTIL_LPM_Init+0x20>)
 800b650:	2200      	movs	r2, #0
 800b652:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800b654:	bf00      	nop
 800b656:	46bd      	mov	sp, r7
 800b658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65c:	4770      	bx	lr
 800b65e:	bf00      	nop
 800b660:	20000b00 	.word	0x20000b00
 800b664:	20000b04 	.word	0x20000b04

0800b668 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800b668:	b480      	push	{r7}
 800b66a:	b087      	sub	sp, #28
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	460b      	mov	r3, r1
 800b672:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b674:	f3ef 8310 	mrs	r3, PRIMASK
 800b678:	613b      	str	r3, [r7, #16]
  return(result);
 800b67a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800b67c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b67e:	b672      	cpsid	i
}
 800b680:	bf00      	nop
  
  switch(state)
 800b682:	78fb      	ldrb	r3, [r7, #3]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d008      	beq.n	800b69a <UTIL_LPM_SetOffMode+0x32>
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d10e      	bne.n	800b6aa <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800b68c:	4b0d      	ldr	r3, [pc, #52]	; (800b6c4 <UTIL_LPM_SetOffMode+0x5c>)
 800b68e:	681a      	ldr	r2, [r3, #0]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	4313      	orrs	r3, r2
 800b694:	4a0b      	ldr	r2, [pc, #44]	; (800b6c4 <UTIL_LPM_SetOffMode+0x5c>)
 800b696:	6013      	str	r3, [r2, #0]
      break;
 800b698:	e008      	b.n	800b6ac <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	43da      	mvns	r2, r3
 800b69e:	4b09      	ldr	r3, [pc, #36]	; (800b6c4 <UTIL_LPM_SetOffMode+0x5c>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4013      	ands	r3, r2
 800b6a4:	4a07      	ldr	r2, [pc, #28]	; (800b6c4 <UTIL_LPM_SetOffMode+0x5c>)
 800b6a6:	6013      	str	r3, [r2, #0]
      break;
 800b6a8:	e000      	b.n	800b6ac <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800b6aa:	bf00      	nop
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f383 8810 	msr	PRIMASK, r3
}
 800b6b6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b6b8:	bf00      	nop
 800b6ba:	371c      	adds	r7, #28
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr
 800b6c4:	20000b04 	.word	0x20000b04

0800b6c8 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b08c      	sub	sp, #48	; 0x30
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800b6d0:	4b6a      	ldr	r3, [pc, #424]	; (800b87c <UTIL_SEQ_Run+0x1b4>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	627b      	str	r3, [r7, #36]	; 0x24
  SuperMask &= Mask_bm;
 800b6d6:	4b69      	ldr	r3, [pc, #420]	; (800b87c <UTIL_SEQ_Run+0x1b4>)
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	4013      	ands	r3, r2
 800b6de:	4a67      	ldr	r2, [pc, #412]	; (800b87c <UTIL_SEQ_Run+0x1b4>)
 800b6e0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800b6e2:	4b67      	ldr	r3, [pc, #412]	; (800b880 <UTIL_SEQ_Run+0x1b8>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800b6e8:	e086      	b.n	800b7f8 <UTIL_SEQ_Run+0x130>
  {
    counter = 0U;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800b6ee:	e002      	b.n	800b6f6 <UTIL_SEQ_Run+0x2e>
    {
      counter++;
 800b6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800b6f6:	4a63      	ldr	r2, [pc, #396]	; (800b884 <UTIL_SEQ_Run+0x1bc>)
 800b6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6fa:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b6fe:	4b62      	ldr	r3, [pc, #392]	; (800b888 <UTIL_SEQ_Run+0x1c0>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	401a      	ands	r2, r3
 800b704:	4b5d      	ldr	r3, [pc, #372]	; (800b87c <UTIL_SEQ_Run+0x1b4>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	4013      	ands	r3, r2
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d0f0      	beq.n	800b6f0 <UTIL_SEQ_Run+0x28>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800b70e:	4a5d      	ldr	r2, [pc, #372]	; (800b884 <UTIL_SEQ_Run+0x1bc>)
 800b710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b712:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b716:	4b5c      	ldr	r3, [pc, #368]	; (800b888 <UTIL_SEQ_Run+0x1c0>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	401a      	ands	r2, r3
 800b71c:	4b57      	ldr	r3, [pc, #348]	; (800b87c <UTIL_SEQ_Run+0x1b4>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4013      	ands	r3, r2
 800b722:	623b      	str	r3, [r7, #32]
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800b724:	4a57      	ldr	r2, [pc, #348]	; (800b884 <UTIL_SEQ_Run+0x1bc>)
 800b726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b728:	00db      	lsls	r3, r3, #3
 800b72a:	4413      	add	r3, r2
 800b72c:	685a      	ldr	r2, [r3, #4]
 800b72e:	6a3b      	ldr	r3, [r7, #32]
 800b730:	4013      	ands	r3, r2
 800b732:	2b00      	cmp	r3, #0
 800b734:	d106      	bne.n	800b744 <UTIL_SEQ_Run+0x7c>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800b736:	4a53      	ldr	r2, [pc, #332]	; (800b884 <UTIL_SEQ_Run+0x1bc>)
 800b738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b73a:	00db      	lsls	r3, r3, #3
 800b73c:	4413      	add	r3, r2
 800b73e:	f04f 32ff 	mov.w	r2, #4294967295
 800b742:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800b744:	4a4f      	ldr	r2, [pc, #316]	; (800b884 <UTIL_SEQ_Run+0x1bc>)
 800b746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b748:	00db      	lsls	r3, r3, #3
 800b74a:	4413      	add	r3, r2
 800b74c:	685a      	ldr	r2, [r3, #4]
 800b74e:	6a3b      	ldr	r3, [r7, #32]
 800b750:	4013      	ands	r3, r2
 800b752:	4618      	mov	r0, r3
 800b754:	f000 f9ac 	bl	800bab0 <SEQ_BitPosition>
 800b758:	4603      	mov	r3, r0
 800b75a:	461a      	mov	r2, r3
 800b75c:	4b4b      	ldr	r3, [pc, #300]	; (800b88c <UTIL_SEQ_Run+0x1c4>)
 800b75e:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800b760:	4a48      	ldr	r2, [pc, #288]	; (800b884 <UTIL_SEQ_Run+0x1bc>)
 800b762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b764:	00db      	lsls	r3, r3, #3
 800b766:	4413      	add	r3, r2
 800b768:	685a      	ldr	r2, [r3, #4]
 800b76a:	4b48      	ldr	r3, [pc, #288]	; (800b88c <UTIL_SEQ_Run+0x1c4>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2101      	movs	r1, #1
 800b770:	fa01 f303 	lsl.w	r3, r1, r3
 800b774:	43db      	mvns	r3, r3
 800b776:	401a      	ands	r2, r3
 800b778:	4942      	ldr	r1, [pc, #264]	; (800b884 <UTIL_SEQ_Run+0x1bc>)
 800b77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77c:	00db      	lsls	r3, r3, #3
 800b77e:	440b      	add	r3, r1
 800b780:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b782:	f3ef 8310 	mrs	r3, PRIMASK
 800b786:	617b      	str	r3, [r7, #20]
  return(result);
 800b788:	697b      	ldr	r3, [r7, #20]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b78a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b78c:	b672      	cpsid	i
}
 800b78e:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800b790:	4b3e      	ldr	r3, [pc, #248]	; (800b88c <UTIL_SEQ_Run+0x1c4>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	2201      	movs	r2, #1
 800b796:	fa02 f303 	lsl.w	r3, r2, r3
 800b79a:	43da      	mvns	r2, r3
 800b79c:	4b38      	ldr	r3, [pc, #224]	; (800b880 <UTIL_SEQ_Run+0x1b8>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4013      	ands	r3, r2
 800b7a2:	4a37      	ldr	r2, [pc, #220]	; (800b880 <UTIL_SEQ_Run+0x1b8>)
 800b7a4:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b7a6:	2302      	movs	r3, #2
 800b7a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7aa:	e013      	b.n	800b7d4 <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800b7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ae:	3b01      	subs	r3, #1
 800b7b0:	4a34      	ldr	r2, [pc, #208]	; (800b884 <UTIL_SEQ_Run+0x1bc>)
 800b7b2:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800b7b6:	4b35      	ldr	r3, [pc, #212]	; (800b88c <UTIL_SEQ_Run+0x1c4>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b7c0:	43da      	mvns	r2, r3
 800b7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c4:	3b01      	subs	r3, #1
 800b7c6:	400a      	ands	r2, r1
 800b7c8:	492e      	ldr	r1, [pc, #184]	; (800b884 <UTIL_SEQ_Run+0x1bc>)
 800b7ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d0:	3b01      	subs	r3, #1
 800b7d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d1e8      	bne.n	800b7ac <UTIL_SEQ_Run+0xe4>
 800b7da:	69fb      	ldr	r3, [r7, #28]
 800b7dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	f383 8810 	msr	PRIMASK, r3
}
 800b7e4:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800b7e6:	4b29      	ldr	r3, [pc, #164]	; (800b88c <UTIL_SEQ_Run+0x1c4>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	4a29      	ldr	r2, [pc, #164]	; (800b890 <UTIL_SEQ_Run+0x1c8>)
 800b7ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7f0:	4798      	blx	r3
    
    local_taskset = TaskSet;
 800b7f2:	4b23      	ldr	r3, [pc, #140]	; (800b880 <UTIL_SEQ_Run+0x1b8>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800b7f8:	4b23      	ldr	r3, [pc, #140]	; (800b888 <UTIL_SEQ_Run+0x1c0>)
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fe:	401a      	ands	r2, r3
 800b800:	4b1e      	ldr	r3, [pc, #120]	; (800b87c <UTIL_SEQ_Run+0x1b4>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4013      	ands	r3, r2
 800b806:	2b00      	cmp	r3, #0
 800b808:	d007      	beq.n	800b81a <UTIL_SEQ_Run+0x152>
 800b80a:	4b22      	ldr	r3, [pc, #136]	; (800b894 <UTIL_SEQ_Run+0x1cc>)
 800b80c:	681a      	ldr	r2, [r3, #0]
 800b80e:	4b22      	ldr	r3, [pc, #136]	; (800b898 <UTIL_SEQ_Run+0x1d0>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4013      	ands	r3, r2
 800b814:	2b00      	cmp	r3, #0
 800b816:	f43f af68 	beq.w	800b6ea <UTIL_SEQ_Run+0x22>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800b81a:	4b1c      	ldr	r3, [pc, #112]	; (800b88c <UTIL_SEQ_Run+0x1c4>)
 800b81c:	f04f 32ff 	mov.w	r2, #4294967295
 800b820:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800b822:	f000 f937 	bl	800ba94 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b826:	f3ef 8310 	mrs	r3, PRIMASK
 800b82a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b82c:	68fb      	ldr	r3, [r7, #12]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800b82e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800b830:	b672      	cpsid	i
}
 800b832:	bf00      	nop
  local_taskset = TaskSet;
 800b834:	4b12      	ldr	r3, [pc, #72]	; (800b880 <UTIL_SEQ_Run+0x1b8>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	62bb      	str	r3, [r7, #40]	; 0x28
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800b83a:	4b13      	ldr	r3, [pc, #76]	; (800b888 <UTIL_SEQ_Run+0x1c0>)
 800b83c:	681a      	ldr	r2, [r3, #0]
 800b83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b840:	401a      	ands	r2, r3
 800b842:	4b0e      	ldr	r3, [pc, #56]	; (800b87c <UTIL_SEQ_Run+0x1b4>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4013      	ands	r3, r2
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d108      	bne.n	800b85e <UTIL_SEQ_Run+0x196>
 800b84c:	4b11      	ldr	r3, [pc, #68]	; (800b894 <UTIL_SEQ_Run+0x1cc>)
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	4b11      	ldr	r3, [pc, #68]	; (800b898 <UTIL_SEQ_Run+0x1d0>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4013      	ands	r3, r2
 800b856:	2b00      	cmp	r3, #0
 800b858:	d101      	bne.n	800b85e <UTIL_SEQ_Run+0x196>
  {
	UTIL_SEQ_Idle( );
 800b85a:	f7f5 ff37 	bl	80016cc <UTIL_SEQ_Idle>
 800b85e:	69bb      	ldr	r3, [r7, #24]
 800b860:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	f383 8810 	msr	PRIMASK, r3
}
 800b868:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800b86a:	f000 f91a 	bl	800baa2 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800b86e:	4a03      	ldr	r2, [pc, #12]	; (800b87c <UTIL_SEQ_Run+0x1b4>)
 800b870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b872:	6013      	str	r3, [r2, #0]

  return;
 800b874:	bf00      	nop
}
 800b876:	3730      	adds	r7, #48	; 0x30
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}
 800b87c:	20000024 	.word	0x20000024
 800b880:	20000b08 	.word	0x20000b08
 800b884:	20000b98 	.word	0x20000b98
 800b888:	20000020 	.word	0x20000020
 800b88c:	20000b14 	.word	0x20000b14
 800b890:	20000b18 	.word	0x20000b18
 800b894:	20000b0c 	.word	0x20000b0c
 800b898:	20000b10 	.word	0x20000b10

0800b89c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b088      	sub	sp, #32
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8a8:	f3ef 8310 	mrs	r3, PRIMASK
 800b8ac:	617b      	str	r3, [r7, #20]
  return(result);
 800b8ae:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800b8b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b8b2:	b672      	cpsid	i
}
 800b8b4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800b8b6:	68f8      	ldr	r0, [r7, #12]
 800b8b8:	f000 f8fa 	bl	800bab0 <SEQ_BitPosition>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	4619      	mov	r1, r3
 800b8c0:	4a06      	ldr	r2, [pc, #24]	; (800b8dc <UTIL_SEQ_RegTask+0x40>)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b8c8:	69fb      	ldr	r3, [r7, #28]
 800b8ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8cc:	69bb      	ldr	r3, [r7, #24]
 800b8ce:	f383 8810 	msr	PRIMASK, r3
}
 800b8d2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800b8d4:	bf00      	nop
}
 800b8d6:	3720      	adds	r7, #32
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}
 800b8dc:	20000b18 	.word	0x20000b18

0800b8e0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b087      	sub	sp, #28
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8ea:	f3ef 8310 	mrs	r3, PRIMASK
 800b8ee:	60fb      	str	r3, [r7, #12]
  return(result);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b8f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b8f4:	b672      	cpsid	i
}
 800b8f6:	bf00      	nop

  TaskSet |= TaskId_bm;
 800b8f8:	4b0d      	ldr	r3, [pc, #52]	; (800b930 <UTIL_SEQ_SetTask+0x50>)
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	4313      	orrs	r3, r2
 800b900:	4a0b      	ldr	r2, [pc, #44]	; (800b930 <UTIL_SEQ_SetTask+0x50>)
 800b902:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800b904:	4a0b      	ldr	r2, [pc, #44]	; (800b934 <UTIL_SEQ_SetTask+0x54>)
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	431a      	orrs	r2, r3
 800b910:	4908      	ldr	r1, [pc, #32]	; (800b934 <UTIL_SEQ_SetTask+0x54>)
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	f383 8810 	msr	PRIMASK, r3
}
 800b922:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b924:	bf00      	nop
}
 800b926:	371c      	adds	r7, #28
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr
 800b930:	20000b08 	.word	0x20000b08
 800b934:	20000b98 	.word	0x20000b98

0800b938 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800b938:	b480      	push	{r7}
 800b93a:	b087      	sub	sp, #28
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b940:	f3ef 8310 	mrs	r3, PRIMASK
 800b944:	60fb      	str	r3, [r7, #12]
  return(result);
 800b946:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b948:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b94a:	b672      	cpsid	i
}
 800b94c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	43da      	mvns	r2, r3
 800b952:	4b08      	ldr	r3, [pc, #32]	; (800b974 <UTIL_SEQ_PauseTask+0x3c>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	4013      	ands	r3, r2
 800b958:	4a06      	ldr	r2, [pc, #24]	; (800b974 <UTIL_SEQ_PauseTask+0x3c>)
 800b95a:	6013      	str	r3, [r2, #0]
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	f383 8810 	msr	PRIMASK, r3
}
 800b966:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b968:	bf00      	nop
}
 800b96a:	371c      	adds	r7, #28
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr
 800b974:	20000020 	.word	0x20000020

0800b978 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800b978:	b480      	push	{r7}
 800b97a:	b087      	sub	sp, #28
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b980:	f3ef 8310 	mrs	r3, PRIMASK
 800b984:	60fb      	str	r3, [r7, #12]
  return(result);
 800b986:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b988:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b98a:	b672      	cpsid	i
}
 800b98c:	bf00      	nop

  TaskMask |= TaskId_bm;
 800b98e:	4b09      	ldr	r3, [pc, #36]	; (800b9b4 <UTIL_SEQ_ResumeTask+0x3c>)
 800b990:	681a      	ldr	r2, [r3, #0]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	4313      	orrs	r3, r2
 800b996:	4a07      	ldr	r2, [pc, #28]	; (800b9b4 <UTIL_SEQ_ResumeTask+0x3c>)
 800b998:	6013      	str	r3, [r2, #0]
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	f383 8810 	msr	PRIMASK, r3
}
 800b9a4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b9a6:	bf00      	nop
}
 800b9a8:	371c      	adds	r7, #28
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr
 800b9b2:	bf00      	nop
 800b9b4:	20000020 	.word	0x20000020

0800b9b8 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b087      	sub	sp, #28
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9c0:	f3ef 8310 	mrs	r3, PRIMASK
 800b9c4:	60fb      	str	r3, [r7, #12]
  return(result);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b9c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b9ca:	b672      	cpsid	i
}
 800b9cc:	bf00      	nop

  EvtSet |= EvtId_bm;
 800b9ce:	4b09      	ldr	r3, [pc, #36]	; (800b9f4 <UTIL_SEQ_SetEvt+0x3c>)
 800b9d0:	681a      	ldr	r2, [r3, #0]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	4a07      	ldr	r2, [pc, #28]	; (800b9f4 <UTIL_SEQ_SetEvt+0x3c>)
 800b9d8:	6013      	str	r3, [r2, #0]
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	f383 8810 	msr	PRIMASK, r3
}
 800b9e4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b9e6:	bf00      	nop
}
 800b9e8:	371c      	adds	r7, #28
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr
 800b9f2:	bf00      	nop
 800b9f4:	20000b0c 	.word	0x20000b0c

0800b9f8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b088      	sub	sp, #32
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800ba00:	4b21      	ldr	r3, [pc, #132]	; (800ba88 <UTIL_SEQ_WaitEvt+0x90>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800ba06:	4b20      	ldr	r3, [pc, #128]	; (800ba88 <UTIL_SEQ_WaitEvt+0x90>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba0e:	d102      	bne.n	800ba16 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 800ba10:	2300      	movs	r3, #0
 800ba12:	61fb      	str	r3, [r7, #28]
 800ba14:	e005      	b.n	800ba22 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 800ba16:	4b1c      	ldr	r3, [pc, #112]	; (800ba88 <UTIL_SEQ_WaitEvt+0x90>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	fa02 f303 	lsl.w	r3, r2, r3
 800ba20:	61fb      	str	r3, [r7, #28]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800ba22:	4b1a      	ldr	r3, [pc, #104]	; (800ba8c <UTIL_SEQ_WaitEvt+0x94>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800ba28:	4a18      	ldr	r2, [pc, #96]	; (800ba8c <UTIL_SEQ_WaitEvt+0x94>)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800ba2e:	e005      	b.n	800ba3c <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800ba30:	4b16      	ldr	r3, [pc, #88]	; (800ba8c <UTIL_SEQ_WaitEvt+0x94>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4619      	mov	r1, r3
 800ba36:	69f8      	ldr	r0, [r7, #28]
 800ba38:	f7f5 fe4f 	bl	80016da <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 800ba3c:	4b14      	ldr	r3, [pc, #80]	; (800ba90 <UTIL_SEQ_WaitEvt+0x98>)
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	4b12      	ldr	r3, [pc, #72]	; (800ba8c <UTIL_SEQ_WaitEvt+0x94>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4013      	ands	r3, r2
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d0f2      	beq.n	800ba30 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800ba4a:	4a0f      	ldr	r2, [pc, #60]	; (800ba88 <UTIL_SEQ_WaitEvt+0x90>)
 800ba4c:	69bb      	ldr	r3, [r7, #24]
 800ba4e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba50:	f3ef 8310 	mrs	r3, PRIMASK
 800ba54:	60bb      	str	r3, [r7, #8]
  return(result);
 800ba56:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ba58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba5a:	b672      	cpsid	i
}
 800ba5c:	bf00      	nop

  EvtSet &= (~EvtWaited);
 800ba5e:	4b0b      	ldr	r3, [pc, #44]	; (800ba8c <UTIL_SEQ_WaitEvt+0x94>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	43da      	mvns	r2, r3
 800ba64:	4b0a      	ldr	r3, [pc, #40]	; (800ba90 <UTIL_SEQ_WaitEvt+0x98>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4013      	ands	r3, r2
 800ba6a:	4a09      	ldr	r2, [pc, #36]	; (800ba90 <UTIL_SEQ_WaitEvt+0x98>)
 800ba6c:	6013      	str	r3, [r2, #0]
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	f383 8810 	msr	PRIMASK, r3
}
 800ba78:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800ba7a:	4a04      	ldr	r2, [pc, #16]	; (800ba8c <UTIL_SEQ_WaitEvt+0x94>)
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	6013      	str	r3, [r2, #0]

  return;
 800ba80:	bf00      	nop
}
 800ba82:	3720      	adds	r7, #32
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}
 800ba88:	20000b14 	.word	0x20000b14
 800ba8c:	20000b10 	.word	0x20000b10
 800ba90:	20000b0c 	.word	0x20000b0c

0800ba94 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800ba94:	b480      	push	{r7}
 800ba96:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800ba98:	bf00      	nop
}
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa0:	4770      	bx	lr

0800baa2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800baa2:	b480      	push	{r7}
 800baa4:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800baa6:	bf00      	nop
}
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr

0800bab0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b085      	sub	sp, #20
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800bab8:	2300      	movs	r3, #0
 800baba:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	0c1b      	lsrs	r3, r3, #16
 800bac0:	041b      	lsls	r3, r3, #16
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d104      	bne.n	800bad0 <SEQ_BitPosition+0x20>
 800bac6:	2310      	movs	r3, #16
 800bac8:	73fb      	strb	r3, [r7, #15]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	041b      	lsls	r3, r3, #16
 800bace:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d105      	bne.n	800bae6 <SEQ_BitPosition+0x36>
 800bada:	7bfb      	ldrb	r3, [r7, #15]
 800badc:	3308      	adds	r3, #8
 800bade:	73fb      	strb	r3, [r7, #15]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	021b      	lsls	r3, r3, #8
 800bae4:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800baec:	2b00      	cmp	r3, #0
 800baee:	d105      	bne.n	800bafc <SEQ_BitPosition+0x4c>
 800baf0:	7bfb      	ldrb	r3, [r7, #15]
 800baf2:	3304      	adds	r3, #4
 800baf4:	73fb      	strb	r3, [r7, #15]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	011b      	lsls	r3, r3, #4
 800bafa:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	0f1b      	lsrs	r3, r3, #28
 800bb00:	4a07      	ldr	r2, [pc, #28]	; (800bb20 <SEQ_BitPosition+0x70>)
 800bb02:	5cd2      	ldrb	r2, [r2, r3]
 800bb04:	7bfb      	ldrb	r3, [r7, #15]
 800bb06:	4413      	add	r3, r2
 800bb08:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800bb0a:	7bfb      	ldrb	r3, [r7, #15]
 800bb0c:	f1c3 031f 	rsb	r3, r3, #31
 800bb10:	b2db      	uxtb	r3, r3
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3714      	adds	r7, #20
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr
 800bb1e:	bf00      	nop
 800bb20:	0800f510 	.word	0x0800f510

0800bb24 <__errno>:
 800bb24:	4b01      	ldr	r3, [pc, #4]	; (800bb2c <__errno+0x8>)
 800bb26:	6818      	ldr	r0, [r3, #0]
 800bb28:	4770      	bx	lr
 800bb2a:	bf00      	nop
 800bb2c:	20000028 	.word	0x20000028

0800bb30 <__libc_init_array>:
 800bb30:	b570      	push	{r4, r5, r6, lr}
 800bb32:	4d0d      	ldr	r5, [pc, #52]	; (800bb68 <__libc_init_array+0x38>)
 800bb34:	4c0d      	ldr	r4, [pc, #52]	; (800bb6c <__libc_init_array+0x3c>)
 800bb36:	1b64      	subs	r4, r4, r5
 800bb38:	10a4      	asrs	r4, r4, #2
 800bb3a:	2600      	movs	r6, #0
 800bb3c:	42a6      	cmp	r6, r4
 800bb3e:	d109      	bne.n	800bb54 <__libc_init_array+0x24>
 800bb40:	4d0b      	ldr	r5, [pc, #44]	; (800bb70 <__libc_init_array+0x40>)
 800bb42:	4c0c      	ldr	r4, [pc, #48]	; (800bb74 <__libc_init_array+0x44>)
 800bb44:	f002 ff06 	bl	800e954 <_init>
 800bb48:	1b64      	subs	r4, r4, r5
 800bb4a:	10a4      	asrs	r4, r4, #2
 800bb4c:	2600      	movs	r6, #0
 800bb4e:	42a6      	cmp	r6, r4
 800bb50:	d105      	bne.n	800bb5e <__libc_init_array+0x2e>
 800bb52:	bd70      	pop	{r4, r5, r6, pc}
 800bb54:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb58:	4798      	blx	r3
 800bb5a:	3601      	adds	r6, #1
 800bb5c:	e7ee      	b.n	800bb3c <__libc_init_array+0xc>
 800bb5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb62:	4798      	blx	r3
 800bb64:	3601      	adds	r6, #1
 800bb66:	e7f2      	b.n	800bb4e <__libc_init_array+0x1e>
 800bb68:	0800f904 	.word	0x0800f904
 800bb6c:	0800f904 	.word	0x0800f904
 800bb70:	0800f904 	.word	0x0800f904
 800bb74:	0800f908 	.word	0x0800f908

0800bb78 <memcpy>:
 800bb78:	440a      	add	r2, r1
 800bb7a:	4291      	cmp	r1, r2
 800bb7c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb80:	d100      	bne.n	800bb84 <memcpy+0xc>
 800bb82:	4770      	bx	lr
 800bb84:	b510      	push	{r4, lr}
 800bb86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb8e:	4291      	cmp	r1, r2
 800bb90:	d1f9      	bne.n	800bb86 <memcpy+0xe>
 800bb92:	bd10      	pop	{r4, pc}

0800bb94 <memmove>:
 800bb94:	4288      	cmp	r0, r1
 800bb96:	b510      	push	{r4, lr}
 800bb98:	eb01 0402 	add.w	r4, r1, r2
 800bb9c:	d902      	bls.n	800bba4 <memmove+0x10>
 800bb9e:	4284      	cmp	r4, r0
 800bba0:	4623      	mov	r3, r4
 800bba2:	d807      	bhi.n	800bbb4 <memmove+0x20>
 800bba4:	1e43      	subs	r3, r0, #1
 800bba6:	42a1      	cmp	r1, r4
 800bba8:	d008      	beq.n	800bbbc <memmove+0x28>
 800bbaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bbb2:	e7f8      	b.n	800bba6 <memmove+0x12>
 800bbb4:	4402      	add	r2, r0
 800bbb6:	4601      	mov	r1, r0
 800bbb8:	428a      	cmp	r2, r1
 800bbba:	d100      	bne.n	800bbbe <memmove+0x2a>
 800bbbc:	bd10      	pop	{r4, pc}
 800bbbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bbc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bbc6:	e7f7      	b.n	800bbb8 <memmove+0x24>

0800bbc8 <memset>:
 800bbc8:	4402      	add	r2, r0
 800bbca:	4603      	mov	r3, r0
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d100      	bne.n	800bbd2 <memset+0xa>
 800bbd0:	4770      	bx	lr
 800bbd2:	f803 1b01 	strb.w	r1, [r3], #1
 800bbd6:	e7f9      	b.n	800bbcc <memset+0x4>

0800bbd8 <__cvt>:
 800bbd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbdc:	ec55 4b10 	vmov	r4, r5, d0
 800bbe0:	2d00      	cmp	r5, #0
 800bbe2:	460e      	mov	r6, r1
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	462b      	mov	r3, r5
 800bbe8:	bfbb      	ittet	lt
 800bbea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bbee:	461d      	movlt	r5, r3
 800bbf0:	2300      	movge	r3, #0
 800bbf2:	232d      	movlt	r3, #45	; 0x2d
 800bbf4:	700b      	strb	r3, [r1, #0]
 800bbf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbf8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bbfc:	4691      	mov	r9, r2
 800bbfe:	f023 0820 	bic.w	r8, r3, #32
 800bc02:	bfbc      	itt	lt
 800bc04:	4622      	movlt	r2, r4
 800bc06:	4614      	movlt	r4, r2
 800bc08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bc0c:	d005      	beq.n	800bc1a <__cvt+0x42>
 800bc0e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bc12:	d100      	bne.n	800bc16 <__cvt+0x3e>
 800bc14:	3601      	adds	r6, #1
 800bc16:	2102      	movs	r1, #2
 800bc18:	e000      	b.n	800bc1c <__cvt+0x44>
 800bc1a:	2103      	movs	r1, #3
 800bc1c:	ab03      	add	r3, sp, #12
 800bc1e:	9301      	str	r3, [sp, #4]
 800bc20:	ab02      	add	r3, sp, #8
 800bc22:	9300      	str	r3, [sp, #0]
 800bc24:	ec45 4b10 	vmov	d0, r4, r5
 800bc28:	4653      	mov	r3, sl
 800bc2a:	4632      	mov	r2, r6
 800bc2c:	f000 fcec 	bl	800c608 <_dtoa_r>
 800bc30:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bc34:	4607      	mov	r7, r0
 800bc36:	d102      	bne.n	800bc3e <__cvt+0x66>
 800bc38:	f019 0f01 	tst.w	r9, #1
 800bc3c:	d022      	beq.n	800bc84 <__cvt+0xac>
 800bc3e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bc42:	eb07 0906 	add.w	r9, r7, r6
 800bc46:	d110      	bne.n	800bc6a <__cvt+0x92>
 800bc48:	783b      	ldrb	r3, [r7, #0]
 800bc4a:	2b30      	cmp	r3, #48	; 0x30
 800bc4c:	d10a      	bne.n	800bc64 <__cvt+0x8c>
 800bc4e:	2200      	movs	r2, #0
 800bc50:	2300      	movs	r3, #0
 800bc52:	4620      	mov	r0, r4
 800bc54:	4629      	mov	r1, r5
 800bc56:	f7f4 ff0f 	bl	8000a78 <__aeabi_dcmpeq>
 800bc5a:	b918      	cbnz	r0, 800bc64 <__cvt+0x8c>
 800bc5c:	f1c6 0601 	rsb	r6, r6, #1
 800bc60:	f8ca 6000 	str.w	r6, [sl]
 800bc64:	f8da 3000 	ldr.w	r3, [sl]
 800bc68:	4499      	add	r9, r3
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	4620      	mov	r0, r4
 800bc70:	4629      	mov	r1, r5
 800bc72:	f7f4 ff01 	bl	8000a78 <__aeabi_dcmpeq>
 800bc76:	b108      	cbz	r0, 800bc7c <__cvt+0xa4>
 800bc78:	f8cd 900c 	str.w	r9, [sp, #12]
 800bc7c:	2230      	movs	r2, #48	; 0x30
 800bc7e:	9b03      	ldr	r3, [sp, #12]
 800bc80:	454b      	cmp	r3, r9
 800bc82:	d307      	bcc.n	800bc94 <__cvt+0xbc>
 800bc84:	9b03      	ldr	r3, [sp, #12]
 800bc86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc88:	1bdb      	subs	r3, r3, r7
 800bc8a:	4638      	mov	r0, r7
 800bc8c:	6013      	str	r3, [r2, #0]
 800bc8e:	b004      	add	sp, #16
 800bc90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc94:	1c59      	adds	r1, r3, #1
 800bc96:	9103      	str	r1, [sp, #12]
 800bc98:	701a      	strb	r2, [r3, #0]
 800bc9a:	e7f0      	b.n	800bc7e <__cvt+0xa6>

0800bc9c <__exponent>:
 800bc9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2900      	cmp	r1, #0
 800bca2:	bfb8      	it	lt
 800bca4:	4249      	neglt	r1, r1
 800bca6:	f803 2b02 	strb.w	r2, [r3], #2
 800bcaa:	bfb4      	ite	lt
 800bcac:	222d      	movlt	r2, #45	; 0x2d
 800bcae:	222b      	movge	r2, #43	; 0x2b
 800bcb0:	2909      	cmp	r1, #9
 800bcb2:	7042      	strb	r2, [r0, #1]
 800bcb4:	dd2a      	ble.n	800bd0c <__exponent+0x70>
 800bcb6:	f10d 0407 	add.w	r4, sp, #7
 800bcba:	46a4      	mov	ip, r4
 800bcbc:	270a      	movs	r7, #10
 800bcbe:	46a6      	mov	lr, r4
 800bcc0:	460a      	mov	r2, r1
 800bcc2:	fb91 f6f7 	sdiv	r6, r1, r7
 800bcc6:	fb07 1516 	mls	r5, r7, r6, r1
 800bcca:	3530      	adds	r5, #48	; 0x30
 800bccc:	2a63      	cmp	r2, #99	; 0x63
 800bcce:	f104 34ff 	add.w	r4, r4, #4294967295
 800bcd2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bcd6:	4631      	mov	r1, r6
 800bcd8:	dcf1      	bgt.n	800bcbe <__exponent+0x22>
 800bcda:	3130      	adds	r1, #48	; 0x30
 800bcdc:	f1ae 0502 	sub.w	r5, lr, #2
 800bce0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bce4:	1c44      	adds	r4, r0, #1
 800bce6:	4629      	mov	r1, r5
 800bce8:	4561      	cmp	r1, ip
 800bcea:	d30a      	bcc.n	800bd02 <__exponent+0x66>
 800bcec:	f10d 0209 	add.w	r2, sp, #9
 800bcf0:	eba2 020e 	sub.w	r2, r2, lr
 800bcf4:	4565      	cmp	r5, ip
 800bcf6:	bf88      	it	hi
 800bcf8:	2200      	movhi	r2, #0
 800bcfa:	4413      	add	r3, r2
 800bcfc:	1a18      	subs	r0, r3, r0
 800bcfe:	b003      	add	sp, #12
 800bd00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd06:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bd0a:	e7ed      	b.n	800bce8 <__exponent+0x4c>
 800bd0c:	2330      	movs	r3, #48	; 0x30
 800bd0e:	3130      	adds	r1, #48	; 0x30
 800bd10:	7083      	strb	r3, [r0, #2]
 800bd12:	70c1      	strb	r1, [r0, #3]
 800bd14:	1d03      	adds	r3, r0, #4
 800bd16:	e7f1      	b.n	800bcfc <__exponent+0x60>

0800bd18 <_printf_float>:
 800bd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd1c:	ed2d 8b02 	vpush	{d8}
 800bd20:	b08d      	sub	sp, #52	; 0x34
 800bd22:	460c      	mov	r4, r1
 800bd24:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bd28:	4616      	mov	r6, r2
 800bd2a:	461f      	mov	r7, r3
 800bd2c:	4605      	mov	r5, r0
 800bd2e:	f001 fb4f 	bl	800d3d0 <_localeconv_r>
 800bd32:	f8d0 a000 	ldr.w	sl, [r0]
 800bd36:	4650      	mov	r0, sl
 800bd38:	f7f4 fa22 	bl	8000180 <strlen>
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	930a      	str	r3, [sp, #40]	; 0x28
 800bd40:	6823      	ldr	r3, [r4, #0]
 800bd42:	9305      	str	r3, [sp, #20]
 800bd44:	f8d8 3000 	ldr.w	r3, [r8]
 800bd48:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bd4c:	3307      	adds	r3, #7
 800bd4e:	f023 0307 	bic.w	r3, r3, #7
 800bd52:	f103 0208 	add.w	r2, r3, #8
 800bd56:	f8c8 2000 	str.w	r2, [r8]
 800bd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bd62:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bd66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bd6a:	9307      	str	r3, [sp, #28]
 800bd6c:	f8cd 8018 	str.w	r8, [sp, #24]
 800bd70:	ee08 0a10 	vmov	s16, r0
 800bd74:	4b9f      	ldr	r3, [pc, #636]	; (800bff4 <_printf_float+0x2dc>)
 800bd76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd7a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd7e:	f7f4 fead 	bl	8000adc <__aeabi_dcmpun>
 800bd82:	bb88      	cbnz	r0, 800bde8 <_printf_float+0xd0>
 800bd84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd88:	4b9a      	ldr	r3, [pc, #616]	; (800bff4 <_printf_float+0x2dc>)
 800bd8a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd8e:	f7f4 fe87 	bl	8000aa0 <__aeabi_dcmple>
 800bd92:	bb48      	cbnz	r0, 800bde8 <_printf_float+0xd0>
 800bd94:	2200      	movs	r2, #0
 800bd96:	2300      	movs	r3, #0
 800bd98:	4640      	mov	r0, r8
 800bd9a:	4649      	mov	r1, r9
 800bd9c:	f7f4 fe76 	bl	8000a8c <__aeabi_dcmplt>
 800bda0:	b110      	cbz	r0, 800bda8 <_printf_float+0x90>
 800bda2:	232d      	movs	r3, #45	; 0x2d
 800bda4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bda8:	4b93      	ldr	r3, [pc, #588]	; (800bff8 <_printf_float+0x2e0>)
 800bdaa:	4894      	ldr	r0, [pc, #592]	; (800bffc <_printf_float+0x2e4>)
 800bdac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bdb0:	bf94      	ite	ls
 800bdb2:	4698      	movls	r8, r3
 800bdb4:	4680      	movhi	r8, r0
 800bdb6:	2303      	movs	r3, #3
 800bdb8:	6123      	str	r3, [r4, #16]
 800bdba:	9b05      	ldr	r3, [sp, #20]
 800bdbc:	f023 0204 	bic.w	r2, r3, #4
 800bdc0:	6022      	str	r2, [r4, #0]
 800bdc2:	f04f 0900 	mov.w	r9, #0
 800bdc6:	9700      	str	r7, [sp, #0]
 800bdc8:	4633      	mov	r3, r6
 800bdca:	aa0b      	add	r2, sp, #44	; 0x2c
 800bdcc:	4621      	mov	r1, r4
 800bdce:	4628      	mov	r0, r5
 800bdd0:	f000 f9d8 	bl	800c184 <_printf_common>
 800bdd4:	3001      	adds	r0, #1
 800bdd6:	f040 8090 	bne.w	800befa <_printf_float+0x1e2>
 800bdda:	f04f 30ff 	mov.w	r0, #4294967295
 800bdde:	b00d      	add	sp, #52	; 0x34
 800bde0:	ecbd 8b02 	vpop	{d8}
 800bde4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bde8:	4642      	mov	r2, r8
 800bdea:	464b      	mov	r3, r9
 800bdec:	4640      	mov	r0, r8
 800bdee:	4649      	mov	r1, r9
 800bdf0:	f7f4 fe74 	bl	8000adc <__aeabi_dcmpun>
 800bdf4:	b140      	cbz	r0, 800be08 <_printf_float+0xf0>
 800bdf6:	464b      	mov	r3, r9
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	bfbc      	itt	lt
 800bdfc:	232d      	movlt	r3, #45	; 0x2d
 800bdfe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800be02:	487f      	ldr	r0, [pc, #508]	; (800c000 <_printf_float+0x2e8>)
 800be04:	4b7f      	ldr	r3, [pc, #508]	; (800c004 <_printf_float+0x2ec>)
 800be06:	e7d1      	b.n	800bdac <_printf_float+0x94>
 800be08:	6863      	ldr	r3, [r4, #4]
 800be0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800be0e:	9206      	str	r2, [sp, #24]
 800be10:	1c5a      	adds	r2, r3, #1
 800be12:	d13f      	bne.n	800be94 <_printf_float+0x17c>
 800be14:	2306      	movs	r3, #6
 800be16:	6063      	str	r3, [r4, #4]
 800be18:	9b05      	ldr	r3, [sp, #20]
 800be1a:	6861      	ldr	r1, [r4, #4]
 800be1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800be20:	2300      	movs	r3, #0
 800be22:	9303      	str	r3, [sp, #12]
 800be24:	ab0a      	add	r3, sp, #40	; 0x28
 800be26:	e9cd b301 	strd	fp, r3, [sp, #4]
 800be2a:	ab09      	add	r3, sp, #36	; 0x24
 800be2c:	ec49 8b10 	vmov	d0, r8, r9
 800be30:	9300      	str	r3, [sp, #0]
 800be32:	6022      	str	r2, [r4, #0]
 800be34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800be38:	4628      	mov	r0, r5
 800be3a:	f7ff fecd 	bl	800bbd8 <__cvt>
 800be3e:	9b06      	ldr	r3, [sp, #24]
 800be40:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be42:	2b47      	cmp	r3, #71	; 0x47
 800be44:	4680      	mov	r8, r0
 800be46:	d108      	bne.n	800be5a <_printf_float+0x142>
 800be48:	1cc8      	adds	r0, r1, #3
 800be4a:	db02      	blt.n	800be52 <_printf_float+0x13a>
 800be4c:	6863      	ldr	r3, [r4, #4]
 800be4e:	4299      	cmp	r1, r3
 800be50:	dd41      	ble.n	800bed6 <_printf_float+0x1be>
 800be52:	f1ab 0b02 	sub.w	fp, fp, #2
 800be56:	fa5f fb8b 	uxtb.w	fp, fp
 800be5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800be5e:	d820      	bhi.n	800bea2 <_printf_float+0x18a>
 800be60:	3901      	subs	r1, #1
 800be62:	465a      	mov	r2, fp
 800be64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800be68:	9109      	str	r1, [sp, #36]	; 0x24
 800be6a:	f7ff ff17 	bl	800bc9c <__exponent>
 800be6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be70:	1813      	adds	r3, r2, r0
 800be72:	2a01      	cmp	r2, #1
 800be74:	4681      	mov	r9, r0
 800be76:	6123      	str	r3, [r4, #16]
 800be78:	dc02      	bgt.n	800be80 <_printf_float+0x168>
 800be7a:	6822      	ldr	r2, [r4, #0]
 800be7c:	07d2      	lsls	r2, r2, #31
 800be7e:	d501      	bpl.n	800be84 <_printf_float+0x16c>
 800be80:	3301      	adds	r3, #1
 800be82:	6123      	str	r3, [r4, #16]
 800be84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d09c      	beq.n	800bdc6 <_printf_float+0xae>
 800be8c:	232d      	movs	r3, #45	; 0x2d
 800be8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be92:	e798      	b.n	800bdc6 <_printf_float+0xae>
 800be94:	9a06      	ldr	r2, [sp, #24]
 800be96:	2a47      	cmp	r2, #71	; 0x47
 800be98:	d1be      	bne.n	800be18 <_printf_float+0x100>
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d1bc      	bne.n	800be18 <_printf_float+0x100>
 800be9e:	2301      	movs	r3, #1
 800bea0:	e7b9      	b.n	800be16 <_printf_float+0xfe>
 800bea2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bea6:	d118      	bne.n	800beda <_printf_float+0x1c2>
 800bea8:	2900      	cmp	r1, #0
 800beaa:	6863      	ldr	r3, [r4, #4]
 800beac:	dd0b      	ble.n	800bec6 <_printf_float+0x1ae>
 800beae:	6121      	str	r1, [r4, #16]
 800beb0:	b913      	cbnz	r3, 800beb8 <_printf_float+0x1a0>
 800beb2:	6822      	ldr	r2, [r4, #0]
 800beb4:	07d0      	lsls	r0, r2, #31
 800beb6:	d502      	bpl.n	800bebe <_printf_float+0x1a6>
 800beb8:	3301      	adds	r3, #1
 800beba:	440b      	add	r3, r1
 800bebc:	6123      	str	r3, [r4, #16]
 800bebe:	65a1      	str	r1, [r4, #88]	; 0x58
 800bec0:	f04f 0900 	mov.w	r9, #0
 800bec4:	e7de      	b.n	800be84 <_printf_float+0x16c>
 800bec6:	b913      	cbnz	r3, 800bece <_printf_float+0x1b6>
 800bec8:	6822      	ldr	r2, [r4, #0]
 800beca:	07d2      	lsls	r2, r2, #31
 800becc:	d501      	bpl.n	800bed2 <_printf_float+0x1ba>
 800bece:	3302      	adds	r3, #2
 800bed0:	e7f4      	b.n	800bebc <_printf_float+0x1a4>
 800bed2:	2301      	movs	r3, #1
 800bed4:	e7f2      	b.n	800bebc <_printf_float+0x1a4>
 800bed6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800beda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bedc:	4299      	cmp	r1, r3
 800bede:	db05      	blt.n	800beec <_printf_float+0x1d4>
 800bee0:	6823      	ldr	r3, [r4, #0]
 800bee2:	6121      	str	r1, [r4, #16]
 800bee4:	07d8      	lsls	r0, r3, #31
 800bee6:	d5ea      	bpl.n	800bebe <_printf_float+0x1a6>
 800bee8:	1c4b      	adds	r3, r1, #1
 800beea:	e7e7      	b.n	800bebc <_printf_float+0x1a4>
 800beec:	2900      	cmp	r1, #0
 800beee:	bfd4      	ite	le
 800bef0:	f1c1 0202 	rsble	r2, r1, #2
 800bef4:	2201      	movgt	r2, #1
 800bef6:	4413      	add	r3, r2
 800bef8:	e7e0      	b.n	800bebc <_printf_float+0x1a4>
 800befa:	6823      	ldr	r3, [r4, #0]
 800befc:	055a      	lsls	r2, r3, #21
 800befe:	d407      	bmi.n	800bf10 <_printf_float+0x1f8>
 800bf00:	6923      	ldr	r3, [r4, #16]
 800bf02:	4642      	mov	r2, r8
 800bf04:	4631      	mov	r1, r6
 800bf06:	4628      	mov	r0, r5
 800bf08:	47b8      	blx	r7
 800bf0a:	3001      	adds	r0, #1
 800bf0c:	d12c      	bne.n	800bf68 <_printf_float+0x250>
 800bf0e:	e764      	b.n	800bdda <_printf_float+0xc2>
 800bf10:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bf14:	f240 80e0 	bls.w	800c0d8 <_printf_float+0x3c0>
 800bf18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	2300      	movs	r3, #0
 800bf20:	f7f4 fdaa 	bl	8000a78 <__aeabi_dcmpeq>
 800bf24:	2800      	cmp	r0, #0
 800bf26:	d034      	beq.n	800bf92 <_printf_float+0x27a>
 800bf28:	4a37      	ldr	r2, [pc, #220]	; (800c008 <_printf_float+0x2f0>)
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	4631      	mov	r1, r6
 800bf2e:	4628      	mov	r0, r5
 800bf30:	47b8      	blx	r7
 800bf32:	3001      	adds	r0, #1
 800bf34:	f43f af51 	beq.w	800bdda <_printf_float+0xc2>
 800bf38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	db02      	blt.n	800bf46 <_printf_float+0x22e>
 800bf40:	6823      	ldr	r3, [r4, #0]
 800bf42:	07d8      	lsls	r0, r3, #31
 800bf44:	d510      	bpl.n	800bf68 <_printf_float+0x250>
 800bf46:	ee18 3a10 	vmov	r3, s16
 800bf4a:	4652      	mov	r2, sl
 800bf4c:	4631      	mov	r1, r6
 800bf4e:	4628      	mov	r0, r5
 800bf50:	47b8      	blx	r7
 800bf52:	3001      	adds	r0, #1
 800bf54:	f43f af41 	beq.w	800bdda <_printf_float+0xc2>
 800bf58:	f04f 0800 	mov.w	r8, #0
 800bf5c:	f104 091a 	add.w	r9, r4, #26
 800bf60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf62:	3b01      	subs	r3, #1
 800bf64:	4543      	cmp	r3, r8
 800bf66:	dc09      	bgt.n	800bf7c <_printf_float+0x264>
 800bf68:	6823      	ldr	r3, [r4, #0]
 800bf6a:	079b      	lsls	r3, r3, #30
 800bf6c:	f100 8105 	bmi.w	800c17a <_printf_float+0x462>
 800bf70:	68e0      	ldr	r0, [r4, #12]
 800bf72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf74:	4298      	cmp	r0, r3
 800bf76:	bfb8      	it	lt
 800bf78:	4618      	movlt	r0, r3
 800bf7a:	e730      	b.n	800bdde <_printf_float+0xc6>
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	464a      	mov	r2, r9
 800bf80:	4631      	mov	r1, r6
 800bf82:	4628      	mov	r0, r5
 800bf84:	47b8      	blx	r7
 800bf86:	3001      	adds	r0, #1
 800bf88:	f43f af27 	beq.w	800bdda <_printf_float+0xc2>
 800bf8c:	f108 0801 	add.w	r8, r8, #1
 800bf90:	e7e6      	b.n	800bf60 <_printf_float+0x248>
 800bf92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	dc39      	bgt.n	800c00c <_printf_float+0x2f4>
 800bf98:	4a1b      	ldr	r2, [pc, #108]	; (800c008 <_printf_float+0x2f0>)
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	4631      	mov	r1, r6
 800bf9e:	4628      	mov	r0, r5
 800bfa0:	47b8      	blx	r7
 800bfa2:	3001      	adds	r0, #1
 800bfa4:	f43f af19 	beq.w	800bdda <_printf_float+0xc2>
 800bfa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bfac:	4313      	orrs	r3, r2
 800bfae:	d102      	bne.n	800bfb6 <_printf_float+0x29e>
 800bfb0:	6823      	ldr	r3, [r4, #0]
 800bfb2:	07d9      	lsls	r1, r3, #31
 800bfb4:	d5d8      	bpl.n	800bf68 <_printf_float+0x250>
 800bfb6:	ee18 3a10 	vmov	r3, s16
 800bfba:	4652      	mov	r2, sl
 800bfbc:	4631      	mov	r1, r6
 800bfbe:	4628      	mov	r0, r5
 800bfc0:	47b8      	blx	r7
 800bfc2:	3001      	adds	r0, #1
 800bfc4:	f43f af09 	beq.w	800bdda <_printf_float+0xc2>
 800bfc8:	f04f 0900 	mov.w	r9, #0
 800bfcc:	f104 0a1a 	add.w	sl, r4, #26
 800bfd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfd2:	425b      	negs	r3, r3
 800bfd4:	454b      	cmp	r3, r9
 800bfd6:	dc01      	bgt.n	800bfdc <_printf_float+0x2c4>
 800bfd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfda:	e792      	b.n	800bf02 <_printf_float+0x1ea>
 800bfdc:	2301      	movs	r3, #1
 800bfde:	4652      	mov	r2, sl
 800bfe0:	4631      	mov	r1, r6
 800bfe2:	4628      	mov	r0, r5
 800bfe4:	47b8      	blx	r7
 800bfe6:	3001      	adds	r0, #1
 800bfe8:	f43f aef7 	beq.w	800bdda <_printf_float+0xc2>
 800bfec:	f109 0901 	add.w	r9, r9, #1
 800bff0:	e7ee      	b.n	800bfd0 <_printf_float+0x2b8>
 800bff2:	bf00      	nop
 800bff4:	7fefffff 	.word	0x7fefffff
 800bff8:	0800f524 	.word	0x0800f524
 800bffc:	0800f528 	.word	0x0800f528
 800c000:	0800f530 	.word	0x0800f530
 800c004:	0800f52c 	.word	0x0800f52c
 800c008:	0800f534 	.word	0x0800f534
 800c00c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c00e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c010:	429a      	cmp	r2, r3
 800c012:	bfa8      	it	ge
 800c014:	461a      	movge	r2, r3
 800c016:	2a00      	cmp	r2, #0
 800c018:	4691      	mov	r9, r2
 800c01a:	dc37      	bgt.n	800c08c <_printf_float+0x374>
 800c01c:	f04f 0b00 	mov.w	fp, #0
 800c020:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c024:	f104 021a 	add.w	r2, r4, #26
 800c028:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c02a:	9305      	str	r3, [sp, #20]
 800c02c:	eba3 0309 	sub.w	r3, r3, r9
 800c030:	455b      	cmp	r3, fp
 800c032:	dc33      	bgt.n	800c09c <_printf_float+0x384>
 800c034:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c038:	429a      	cmp	r2, r3
 800c03a:	db3b      	blt.n	800c0b4 <_printf_float+0x39c>
 800c03c:	6823      	ldr	r3, [r4, #0]
 800c03e:	07da      	lsls	r2, r3, #31
 800c040:	d438      	bmi.n	800c0b4 <_printf_float+0x39c>
 800c042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c044:	9a05      	ldr	r2, [sp, #20]
 800c046:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c048:	1a9a      	subs	r2, r3, r2
 800c04a:	eba3 0901 	sub.w	r9, r3, r1
 800c04e:	4591      	cmp	r9, r2
 800c050:	bfa8      	it	ge
 800c052:	4691      	movge	r9, r2
 800c054:	f1b9 0f00 	cmp.w	r9, #0
 800c058:	dc35      	bgt.n	800c0c6 <_printf_float+0x3ae>
 800c05a:	f04f 0800 	mov.w	r8, #0
 800c05e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c062:	f104 0a1a 	add.w	sl, r4, #26
 800c066:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c06a:	1a9b      	subs	r3, r3, r2
 800c06c:	eba3 0309 	sub.w	r3, r3, r9
 800c070:	4543      	cmp	r3, r8
 800c072:	f77f af79 	ble.w	800bf68 <_printf_float+0x250>
 800c076:	2301      	movs	r3, #1
 800c078:	4652      	mov	r2, sl
 800c07a:	4631      	mov	r1, r6
 800c07c:	4628      	mov	r0, r5
 800c07e:	47b8      	blx	r7
 800c080:	3001      	adds	r0, #1
 800c082:	f43f aeaa 	beq.w	800bdda <_printf_float+0xc2>
 800c086:	f108 0801 	add.w	r8, r8, #1
 800c08a:	e7ec      	b.n	800c066 <_printf_float+0x34e>
 800c08c:	4613      	mov	r3, r2
 800c08e:	4631      	mov	r1, r6
 800c090:	4642      	mov	r2, r8
 800c092:	4628      	mov	r0, r5
 800c094:	47b8      	blx	r7
 800c096:	3001      	adds	r0, #1
 800c098:	d1c0      	bne.n	800c01c <_printf_float+0x304>
 800c09a:	e69e      	b.n	800bdda <_printf_float+0xc2>
 800c09c:	2301      	movs	r3, #1
 800c09e:	4631      	mov	r1, r6
 800c0a0:	4628      	mov	r0, r5
 800c0a2:	9205      	str	r2, [sp, #20]
 800c0a4:	47b8      	blx	r7
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	f43f ae97 	beq.w	800bdda <_printf_float+0xc2>
 800c0ac:	9a05      	ldr	r2, [sp, #20]
 800c0ae:	f10b 0b01 	add.w	fp, fp, #1
 800c0b2:	e7b9      	b.n	800c028 <_printf_float+0x310>
 800c0b4:	ee18 3a10 	vmov	r3, s16
 800c0b8:	4652      	mov	r2, sl
 800c0ba:	4631      	mov	r1, r6
 800c0bc:	4628      	mov	r0, r5
 800c0be:	47b8      	blx	r7
 800c0c0:	3001      	adds	r0, #1
 800c0c2:	d1be      	bne.n	800c042 <_printf_float+0x32a>
 800c0c4:	e689      	b.n	800bdda <_printf_float+0xc2>
 800c0c6:	9a05      	ldr	r2, [sp, #20]
 800c0c8:	464b      	mov	r3, r9
 800c0ca:	4442      	add	r2, r8
 800c0cc:	4631      	mov	r1, r6
 800c0ce:	4628      	mov	r0, r5
 800c0d0:	47b8      	blx	r7
 800c0d2:	3001      	adds	r0, #1
 800c0d4:	d1c1      	bne.n	800c05a <_printf_float+0x342>
 800c0d6:	e680      	b.n	800bdda <_printf_float+0xc2>
 800c0d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0da:	2a01      	cmp	r2, #1
 800c0dc:	dc01      	bgt.n	800c0e2 <_printf_float+0x3ca>
 800c0de:	07db      	lsls	r3, r3, #31
 800c0e0:	d538      	bpl.n	800c154 <_printf_float+0x43c>
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	4642      	mov	r2, r8
 800c0e6:	4631      	mov	r1, r6
 800c0e8:	4628      	mov	r0, r5
 800c0ea:	47b8      	blx	r7
 800c0ec:	3001      	adds	r0, #1
 800c0ee:	f43f ae74 	beq.w	800bdda <_printf_float+0xc2>
 800c0f2:	ee18 3a10 	vmov	r3, s16
 800c0f6:	4652      	mov	r2, sl
 800c0f8:	4631      	mov	r1, r6
 800c0fa:	4628      	mov	r0, r5
 800c0fc:	47b8      	blx	r7
 800c0fe:	3001      	adds	r0, #1
 800c100:	f43f ae6b 	beq.w	800bdda <_printf_float+0xc2>
 800c104:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c108:	2200      	movs	r2, #0
 800c10a:	2300      	movs	r3, #0
 800c10c:	f7f4 fcb4 	bl	8000a78 <__aeabi_dcmpeq>
 800c110:	b9d8      	cbnz	r0, 800c14a <_printf_float+0x432>
 800c112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c114:	f108 0201 	add.w	r2, r8, #1
 800c118:	3b01      	subs	r3, #1
 800c11a:	4631      	mov	r1, r6
 800c11c:	4628      	mov	r0, r5
 800c11e:	47b8      	blx	r7
 800c120:	3001      	adds	r0, #1
 800c122:	d10e      	bne.n	800c142 <_printf_float+0x42a>
 800c124:	e659      	b.n	800bdda <_printf_float+0xc2>
 800c126:	2301      	movs	r3, #1
 800c128:	4652      	mov	r2, sl
 800c12a:	4631      	mov	r1, r6
 800c12c:	4628      	mov	r0, r5
 800c12e:	47b8      	blx	r7
 800c130:	3001      	adds	r0, #1
 800c132:	f43f ae52 	beq.w	800bdda <_printf_float+0xc2>
 800c136:	f108 0801 	add.w	r8, r8, #1
 800c13a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c13c:	3b01      	subs	r3, #1
 800c13e:	4543      	cmp	r3, r8
 800c140:	dcf1      	bgt.n	800c126 <_printf_float+0x40e>
 800c142:	464b      	mov	r3, r9
 800c144:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c148:	e6dc      	b.n	800bf04 <_printf_float+0x1ec>
 800c14a:	f04f 0800 	mov.w	r8, #0
 800c14e:	f104 0a1a 	add.w	sl, r4, #26
 800c152:	e7f2      	b.n	800c13a <_printf_float+0x422>
 800c154:	2301      	movs	r3, #1
 800c156:	4642      	mov	r2, r8
 800c158:	e7df      	b.n	800c11a <_printf_float+0x402>
 800c15a:	2301      	movs	r3, #1
 800c15c:	464a      	mov	r2, r9
 800c15e:	4631      	mov	r1, r6
 800c160:	4628      	mov	r0, r5
 800c162:	47b8      	blx	r7
 800c164:	3001      	adds	r0, #1
 800c166:	f43f ae38 	beq.w	800bdda <_printf_float+0xc2>
 800c16a:	f108 0801 	add.w	r8, r8, #1
 800c16e:	68e3      	ldr	r3, [r4, #12]
 800c170:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c172:	1a5b      	subs	r3, r3, r1
 800c174:	4543      	cmp	r3, r8
 800c176:	dcf0      	bgt.n	800c15a <_printf_float+0x442>
 800c178:	e6fa      	b.n	800bf70 <_printf_float+0x258>
 800c17a:	f04f 0800 	mov.w	r8, #0
 800c17e:	f104 0919 	add.w	r9, r4, #25
 800c182:	e7f4      	b.n	800c16e <_printf_float+0x456>

0800c184 <_printf_common>:
 800c184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c188:	4616      	mov	r6, r2
 800c18a:	4699      	mov	r9, r3
 800c18c:	688a      	ldr	r2, [r1, #8]
 800c18e:	690b      	ldr	r3, [r1, #16]
 800c190:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c194:	4293      	cmp	r3, r2
 800c196:	bfb8      	it	lt
 800c198:	4613      	movlt	r3, r2
 800c19a:	6033      	str	r3, [r6, #0]
 800c19c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c1a0:	4607      	mov	r7, r0
 800c1a2:	460c      	mov	r4, r1
 800c1a4:	b10a      	cbz	r2, 800c1aa <_printf_common+0x26>
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	6033      	str	r3, [r6, #0]
 800c1aa:	6823      	ldr	r3, [r4, #0]
 800c1ac:	0699      	lsls	r1, r3, #26
 800c1ae:	bf42      	ittt	mi
 800c1b0:	6833      	ldrmi	r3, [r6, #0]
 800c1b2:	3302      	addmi	r3, #2
 800c1b4:	6033      	strmi	r3, [r6, #0]
 800c1b6:	6825      	ldr	r5, [r4, #0]
 800c1b8:	f015 0506 	ands.w	r5, r5, #6
 800c1bc:	d106      	bne.n	800c1cc <_printf_common+0x48>
 800c1be:	f104 0a19 	add.w	sl, r4, #25
 800c1c2:	68e3      	ldr	r3, [r4, #12]
 800c1c4:	6832      	ldr	r2, [r6, #0]
 800c1c6:	1a9b      	subs	r3, r3, r2
 800c1c8:	42ab      	cmp	r3, r5
 800c1ca:	dc26      	bgt.n	800c21a <_printf_common+0x96>
 800c1cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c1d0:	1e13      	subs	r3, r2, #0
 800c1d2:	6822      	ldr	r2, [r4, #0]
 800c1d4:	bf18      	it	ne
 800c1d6:	2301      	movne	r3, #1
 800c1d8:	0692      	lsls	r2, r2, #26
 800c1da:	d42b      	bmi.n	800c234 <_printf_common+0xb0>
 800c1dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c1e0:	4649      	mov	r1, r9
 800c1e2:	4638      	mov	r0, r7
 800c1e4:	47c0      	blx	r8
 800c1e6:	3001      	adds	r0, #1
 800c1e8:	d01e      	beq.n	800c228 <_printf_common+0xa4>
 800c1ea:	6823      	ldr	r3, [r4, #0]
 800c1ec:	68e5      	ldr	r5, [r4, #12]
 800c1ee:	6832      	ldr	r2, [r6, #0]
 800c1f0:	f003 0306 	and.w	r3, r3, #6
 800c1f4:	2b04      	cmp	r3, #4
 800c1f6:	bf08      	it	eq
 800c1f8:	1aad      	subeq	r5, r5, r2
 800c1fa:	68a3      	ldr	r3, [r4, #8]
 800c1fc:	6922      	ldr	r2, [r4, #16]
 800c1fe:	bf0c      	ite	eq
 800c200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c204:	2500      	movne	r5, #0
 800c206:	4293      	cmp	r3, r2
 800c208:	bfc4      	itt	gt
 800c20a:	1a9b      	subgt	r3, r3, r2
 800c20c:	18ed      	addgt	r5, r5, r3
 800c20e:	2600      	movs	r6, #0
 800c210:	341a      	adds	r4, #26
 800c212:	42b5      	cmp	r5, r6
 800c214:	d11a      	bne.n	800c24c <_printf_common+0xc8>
 800c216:	2000      	movs	r0, #0
 800c218:	e008      	b.n	800c22c <_printf_common+0xa8>
 800c21a:	2301      	movs	r3, #1
 800c21c:	4652      	mov	r2, sl
 800c21e:	4649      	mov	r1, r9
 800c220:	4638      	mov	r0, r7
 800c222:	47c0      	blx	r8
 800c224:	3001      	adds	r0, #1
 800c226:	d103      	bne.n	800c230 <_printf_common+0xac>
 800c228:	f04f 30ff 	mov.w	r0, #4294967295
 800c22c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c230:	3501      	adds	r5, #1
 800c232:	e7c6      	b.n	800c1c2 <_printf_common+0x3e>
 800c234:	18e1      	adds	r1, r4, r3
 800c236:	1c5a      	adds	r2, r3, #1
 800c238:	2030      	movs	r0, #48	; 0x30
 800c23a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c23e:	4422      	add	r2, r4
 800c240:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c244:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c248:	3302      	adds	r3, #2
 800c24a:	e7c7      	b.n	800c1dc <_printf_common+0x58>
 800c24c:	2301      	movs	r3, #1
 800c24e:	4622      	mov	r2, r4
 800c250:	4649      	mov	r1, r9
 800c252:	4638      	mov	r0, r7
 800c254:	47c0      	blx	r8
 800c256:	3001      	adds	r0, #1
 800c258:	d0e6      	beq.n	800c228 <_printf_common+0xa4>
 800c25a:	3601      	adds	r6, #1
 800c25c:	e7d9      	b.n	800c212 <_printf_common+0x8e>
	...

0800c260 <_printf_i>:
 800c260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c264:	7e0f      	ldrb	r7, [r1, #24]
 800c266:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c268:	2f78      	cmp	r7, #120	; 0x78
 800c26a:	4691      	mov	r9, r2
 800c26c:	4680      	mov	r8, r0
 800c26e:	460c      	mov	r4, r1
 800c270:	469a      	mov	sl, r3
 800c272:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c276:	d807      	bhi.n	800c288 <_printf_i+0x28>
 800c278:	2f62      	cmp	r7, #98	; 0x62
 800c27a:	d80a      	bhi.n	800c292 <_printf_i+0x32>
 800c27c:	2f00      	cmp	r7, #0
 800c27e:	f000 80d8 	beq.w	800c432 <_printf_i+0x1d2>
 800c282:	2f58      	cmp	r7, #88	; 0x58
 800c284:	f000 80a3 	beq.w	800c3ce <_printf_i+0x16e>
 800c288:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c28c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c290:	e03a      	b.n	800c308 <_printf_i+0xa8>
 800c292:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c296:	2b15      	cmp	r3, #21
 800c298:	d8f6      	bhi.n	800c288 <_printf_i+0x28>
 800c29a:	a101      	add	r1, pc, #4	; (adr r1, 800c2a0 <_printf_i+0x40>)
 800c29c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c2a0:	0800c2f9 	.word	0x0800c2f9
 800c2a4:	0800c30d 	.word	0x0800c30d
 800c2a8:	0800c289 	.word	0x0800c289
 800c2ac:	0800c289 	.word	0x0800c289
 800c2b0:	0800c289 	.word	0x0800c289
 800c2b4:	0800c289 	.word	0x0800c289
 800c2b8:	0800c30d 	.word	0x0800c30d
 800c2bc:	0800c289 	.word	0x0800c289
 800c2c0:	0800c289 	.word	0x0800c289
 800c2c4:	0800c289 	.word	0x0800c289
 800c2c8:	0800c289 	.word	0x0800c289
 800c2cc:	0800c419 	.word	0x0800c419
 800c2d0:	0800c33d 	.word	0x0800c33d
 800c2d4:	0800c3fb 	.word	0x0800c3fb
 800c2d8:	0800c289 	.word	0x0800c289
 800c2dc:	0800c289 	.word	0x0800c289
 800c2e0:	0800c43b 	.word	0x0800c43b
 800c2e4:	0800c289 	.word	0x0800c289
 800c2e8:	0800c33d 	.word	0x0800c33d
 800c2ec:	0800c289 	.word	0x0800c289
 800c2f0:	0800c289 	.word	0x0800c289
 800c2f4:	0800c403 	.word	0x0800c403
 800c2f8:	682b      	ldr	r3, [r5, #0]
 800c2fa:	1d1a      	adds	r2, r3, #4
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	602a      	str	r2, [r5, #0]
 800c300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c304:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c308:	2301      	movs	r3, #1
 800c30a:	e0a3      	b.n	800c454 <_printf_i+0x1f4>
 800c30c:	6820      	ldr	r0, [r4, #0]
 800c30e:	6829      	ldr	r1, [r5, #0]
 800c310:	0606      	lsls	r6, r0, #24
 800c312:	f101 0304 	add.w	r3, r1, #4
 800c316:	d50a      	bpl.n	800c32e <_printf_i+0xce>
 800c318:	680e      	ldr	r6, [r1, #0]
 800c31a:	602b      	str	r3, [r5, #0]
 800c31c:	2e00      	cmp	r6, #0
 800c31e:	da03      	bge.n	800c328 <_printf_i+0xc8>
 800c320:	232d      	movs	r3, #45	; 0x2d
 800c322:	4276      	negs	r6, r6
 800c324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c328:	485e      	ldr	r0, [pc, #376]	; (800c4a4 <_printf_i+0x244>)
 800c32a:	230a      	movs	r3, #10
 800c32c:	e019      	b.n	800c362 <_printf_i+0x102>
 800c32e:	680e      	ldr	r6, [r1, #0]
 800c330:	602b      	str	r3, [r5, #0]
 800c332:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c336:	bf18      	it	ne
 800c338:	b236      	sxthne	r6, r6
 800c33a:	e7ef      	b.n	800c31c <_printf_i+0xbc>
 800c33c:	682b      	ldr	r3, [r5, #0]
 800c33e:	6820      	ldr	r0, [r4, #0]
 800c340:	1d19      	adds	r1, r3, #4
 800c342:	6029      	str	r1, [r5, #0]
 800c344:	0601      	lsls	r1, r0, #24
 800c346:	d501      	bpl.n	800c34c <_printf_i+0xec>
 800c348:	681e      	ldr	r6, [r3, #0]
 800c34a:	e002      	b.n	800c352 <_printf_i+0xf2>
 800c34c:	0646      	lsls	r6, r0, #25
 800c34e:	d5fb      	bpl.n	800c348 <_printf_i+0xe8>
 800c350:	881e      	ldrh	r6, [r3, #0]
 800c352:	4854      	ldr	r0, [pc, #336]	; (800c4a4 <_printf_i+0x244>)
 800c354:	2f6f      	cmp	r7, #111	; 0x6f
 800c356:	bf0c      	ite	eq
 800c358:	2308      	moveq	r3, #8
 800c35a:	230a      	movne	r3, #10
 800c35c:	2100      	movs	r1, #0
 800c35e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c362:	6865      	ldr	r5, [r4, #4]
 800c364:	60a5      	str	r5, [r4, #8]
 800c366:	2d00      	cmp	r5, #0
 800c368:	bfa2      	ittt	ge
 800c36a:	6821      	ldrge	r1, [r4, #0]
 800c36c:	f021 0104 	bicge.w	r1, r1, #4
 800c370:	6021      	strge	r1, [r4, #0]
 800c372:	b90e      	cbnz	r6, 800c378 <_printf_i+0x118>
 800c374:	2d00      	cmp	r5, #0
 800c376:	d04d      	beq.n	800c414 <_printf_i+0x1b4>
 800c378:	4615      	mov	r5, r2
 800c37a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c37e:	fb03 6711 	mls	r7, r3, r1, r6
 800c382:	5dc7      	ldrb	r7, [r0, r7]
 800c384:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c388:	4637      	mov	r7, r6
 800c38a:	42bb      	cmp	r3, r7
 800c38c:	460e      	mov	r6, r1
 800c38e:	d9f4      	bls.n	800c37a <_printf_i+0x11a>
 800c390:	2b08      	cmp	r3, #8
 800c392:	d10b      	bne.n	800c3ac <_printf_i+0x14c>
 800c394:	6823      	ldr	r3, [r4, #0]
 800c396:	07de      	lsls	r6, r3, #31
 800c398:	d508      	bpl.n	800c3ac <_printf_i+0x14c>
 800c39a:	6923      	ldr	r3, [r4, #16]
 800c39c:	6861      	ldr	r1, [r4, #4]
 800c39e:	4299      	cmp	r1, r3
 800c3a0:	bfde      	ittt	le
 800c3a2:	2330      	movle	r3, #48	; 0x30
 800c3a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c3a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c3ac:	1b52      	subs	r2, r2, r5
 800c3ae:	6122      	str	r2, [r4, #16]
 800c3b0:	f8cd a000 	str.w	sl, [sp]
 800c3b4:	464b      	mov	r3, r9
 800c3b6:	aa03      	add	r2, sp, #12
 800c3b8:	4621      	mov	r1, r4
 800c3ba:	4640      	mov	r0, r8
 800c3bc:	f7ff fee2 	bl	800c184 <_printf_common>
 800c3c0:	3001      	adds	r0, #1
 800c3c2:	d14c      	bne.n	800c45e <_printf_i+0x1fe>
 800c3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3c8:	b004      	add	sp, #16
 800c3ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3ce:	4835      	ldr	r0, [pc, #212]	; (800c4a4 <_printf_i+0x244>)
 800c3d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c3d4:	6829      	ldr	r1, [r5, #0]
 800c3d6:	6823      	ldr	r3, [r4, #0]
 800c3d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800c3dc:	6029      	str	r1, [r5, #0]
 800c3de:	061d      	lsls	r5, r3, #24
 800c3e0:	d514      	bpl.n	800c40c <_printf_i+0x1ac>
 800c3e2:	07df      	lsls	r7, r3, #31
 800c3e4:	bf44      	itt	mi
 800c3e6:	f043 0320 	orrmi.w	r3, r3, #32
 800c3ea:	6023      	strmi	r3, [r4, #0]
 800c3ec:	b91e      	cbnz	r6, 800c3f6 <_printf_i+0x196>
 800c3ee:	6823      	ldr	r3, [r4, #0]
 800c3f0:	f023 0320 	bic.w	r3, r3, #32
 800c3f4:	6023      	str	r3, [r4, #0]
 800c3f6:	2310      	movs	r3, #16
 800c3f8:	e7b0      	b.n	800c35c <_printf_i+0xfc>
 800c3fa:	6823      	ldr	r3, [r4, #0]
 800c3fc:	f043 0320 	orr.w	r3, r3, #32
 800c400:	6023      	str	r3, [r4, #0]
 800c402:	2378      	movs	r3, #120	; 0x78
 800c404:	4828      	ldr	r0, [pc, #160]	; (800c4a8 <_printf_i+0x248>)
 800c406:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c40a:	e7e3      	b.n	800c3d4 <_printf_i+0x174>
 800c40c:	0659      	lsls	r1, r3, #25
 800c40e:	bf48      	it	mi
 800c410:	b2b6      	uxthmi	r6, r6
 800c412:	e7e6      	b.n	800c3e2 <_printf_i+0x182>
 800c414:	4615      	mov	r5, r2
 800c416:	e7bb      	b.n	800c390 <_printf_i+0x130>
 800c418:	682b      	ldr	r3, [r5, #0]
 800c41a:	6826      	ldr	r6, [r4, #0]
 800c41c:	6961      	ldr	r1, [r4, #20]
 800c41e:	1d18      	adds	r0, r3, #4
 800c420:	6028      	str	r0, [r5, #0]
 800c422:	0635      	lsls	r5, r6, #24
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	d501      	bpl.n	800c42c <_printf_i+0x1cc>
 800c428:	6019      	str	r1, [r3, #0]
 800c42a:	e002      	b.n	800c432 <_printf_i+0x1d2>
 800c42c:	0670      	lsls	r0, r6, #25
 800c42e:	d5fb      	bpl.n	800c428 <_printf_i+0x1c8>
 800c430:	8019      	strh	r1, [r3, #0]
 800c432:	2300      	movs	r3, #0
 800c434:	6123      	str	r3, [r4, #16]
 800c436:	4615      	mov	r5, r2
 800c438:	e7ba      	b.n	800c3b0 <_printf_i+0x150>
 800c43a:	682b      	ldr	r3, [r5, #0]
 800c43c:	1d1a      	adds	r2, r3, #4
 800c43e:	602a      	str	r2, [r5, #0]
 800c440:	681d      	ldr	r5, [r3, #0]
 800c442:	6862      	ldr	r2, [r4, #4]
 800c444:	2100      	movs	r1, #0
 800c446:	4628      	mov	r0, r5
 800c448:	f7f3 fea2 	bl	8000190 <memchr>
 800c44c:	b108      	cbz	r0, 800c452 <_printf_i+0x1f2>
 800c44e:	1b40      	subs	r0, r0, r5
 800c450:	6060      	str	r0, [r4, #4]
 800c452:	6863      	ldr	r3, [r4, #4]
 800c454:	6123      	str	r3, [r4, #16]
 800c456:	2300      	movs	r3, #0
 800c458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c45c:	e7a8      	b.n	800c3b0 <_printf_i+0x150>
 800c45e:	6923      	ldr	r3, [r4, #16]
 800c460:	462a      	mov	r2, r5
 800c462:	4649      	mov	r1, r9
 800c464:	4640      	mov	r0, r8
 800c466:	47d0      	blx	sl
 800c468:	3001      	adds	r0, #1
 800c46a:	d0ab      	beq.n	800c3c4 <_printf_i+0x164>
 800c46c:	6823      	ldr	r3, [r4, #0]
 800c46e:	079b      	lsls	r3, r3, #30
 800c470:	d413      	bmi.n	800c49a <_printf_i+0x23a>
 800c472:	68e0      	ldr	r0, [r4, #12]
 800c474:	9b03      	ldr	r3, [sp, #12]
 800c476:	4298      	cmp	r0, r3
 800c478:	bfb8      	it	lt
 800c47a:	4618      	movlt	r0, r3
 800c47c:	e7a4      	b.n	800c3c8 <_printf_i+0x168>
 800c47e:	2301      	movs	r3, #1
 800c480:	4632      	mov	r2, r6
 800c482:	4649      	mov	r1, r9
 800c484:	4640      	mov	r0, r8
 800c486:	47d0      	blx	sl
 800c488:	3001      	adds	r0, #1
 800c48a:	d09b      	beq.n	800c3c4 <_printf_i+0x164>
 800c48c:	3501      	adds	r5, #1
 800c48e:	68e3      	ldr	r3, [r4, #12]
 800c490:	9903      	ldr	r1, [sp, #12]
 800c492:	1a5b      	subs	r3, r3, r1
 800c494:	42ab      	cmp	r3, r5
 800c496:	dcf2      	bgt.n	800c47e <_printf_i+0x21e>
 800c498:	e7eb      	b.n	800c472 <_printf_i+0x212>
 800c49a:	2500      	movs	r5, #0
 800c49c:	f104 0619 	add.w	r6, r4, #25
 800c4a0:	e7f5      	b.n	800c48e <_printf_i+0x22e>
 800c4a2:	bf00      	nop
 800c4a4:	0800f536 	.word	0x0800f536
 800c4a8:	0800f547 	.word	0x0800f547

0800c4ac <siprintf>:
 800c4ac:	b40e      	push	{r1, r2, r3}
 800c4ae:	b500      	push	{lr}
 800c4b0:	b09c      	sub	sp, #112	; 0x70
 800c4b2:	ab1d      	add	r3, sp, #116	; 0x74
 800c4b4:	9002      	str	r0, [sp, #8]
 800c4b6:	9006      	str	r0, [sp, #24]
 800c4b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c4bc:	4809      	ldr	r0, [pc, #36]	; (800c4e4 <siprintf+0x38>)
 800c4be:	9107      	str	r1, [sp, #28]
 800c4c0:	9104      	str	r1, [sp, #16]
 800c4c2:	4909      	ldr	r1, [pc, #36]	; (800c4e8 <siprintf+0x3c>)
 800c4c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4c8:	9105      	str	r1, [sp, #20]
 800c4ca:	6800      	ldr	r0, [r0, #0]
 800c4cc:	9301      	str	r3, [sp, #4]
 800c4ce:	a902      	add	r1, sp, #8
 800c4d0:	f001 fc64 	bl	800dd9c <_svfiprintf_r>
 800c4d4:	9b02      	ldr	r3, [sp, #8]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	701a      	strb	r2, [r3, #0]
 800c4da:	b01c      	add	sp, #112	; 0x70
 800c4dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4e0:	b003      	add	sp, #12
 800c4e2:	4770      	bx	lr
 800c4e4:	20000028 	.word	0x20000028
 800c4e8:	ffff0208 	.word	0xffff0208

0800c4ec <quorem>:
 800c4ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4f0:	6903      	ldr	r3, [r0, #16]
 800c4f2:	690c      	ldr	r4, [r1, #16]
 800c4f4:	42a3      	cmp	r3, r4
 800c4f6:	4607      	mov	r7, r0
 800c4f8:	f2c0 8081 	blt.w	800c5fe <quorem+0x112>
 800c4fc:	3c01      	subs	r4, #1
 800c4fe:	f101 0814 	add.w	r8, r1, #20
 800c502:	f100 0514 	add.w	r5, r0, #20
 800c506:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c50a:	9301      	str	r3, [sp, #4]
 800c50c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c510:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c514:	3301      	adds	r3, #1
 800c516:	429a      	cmp	r2, r3
 800c518:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c51c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c520:	fbb2 f6f3 	udiv	r6, r2, r3
 800c524:	d331      	bcc.n	800c58a <quorem+0x9e>
 800c526:	f04f 0e00 	mov.w	lr, #0
 800c52a:	4640      	mov	r0, r8
 800c52c:	46ac      	mov	ip, r5
 800c52e:	46f2      	mov	sl, lr
 800c530:	f850 2b04 	ldr.w	r2, [r0], #4
 800c534:	b293      	uxth	r3, r2
 800c536:	fb06 e303 	mla	r3, r6, r3, lr
 800c53a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c53e:	b29b      	uxth	r3, r3
 800c540:	ebaa 0303 	sub.w	r3, sl, r3
 800c544:	f8dc a000 	ldr.w	sl, [ip]
 800c548:	0c12      	lsrs	r2, r2, #16
 800c54a:	fa13 f38a 	uxtah	r3, r3, sl
 800c54e:	fb06 e202 	mla	r2, r6, r2, lr
 800c552:	9300      	str	r3, [sp, #0]
 800c554:	9b00      	ldr	r3, [sp, #0]
 800c556:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c55a:	b292      	uxth	r2, r2
 800c55c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c560:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c564:	f8bd 3000 	ldrh.w	r3, [sp]
 800c568:	4581      	cmp	r9, r0
 800c56a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c56e:	f84c 3b04 	str.w	r3, [ip], #4
 800c572:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c576:	d2db      	bcs.n	800c530 <quorem+0x44>
 800c578:	f855 300b 	ldr.w	r3, [r5, fp]
 800c57c:	b92b      	cbnz	r3, 800c58a <quorem+0x9e>
 800c57e:	9b01      	ldr	r3, [sp, #4]
 800c580:	3b04      	subs	r3, #4
 800c582:	429d      	cmp	r5, r3
 800c584:	461a      	mov	r2, r3
 800c586:	d32e      	bcc.n	800c5e6 <quorem+0xfa>
 800c588:	613c      	str	r4, [r7, #16]
 800c58a:	4638      	mov	r0, r7
 800c58c:	f001 f9b2 	bl	800d8f4 <__mcmp>
 800c590:	2800      	cmp	r0, #0
 800c592:	db24      	blt.n	800c5de <quorem+0xf2>
 800c594:	3601      	adds	r6, #1
 800c596:	4628      	mov	r0, r5
 800c598:	f04f 0c00 	mov.w	ip, #0
 800c59c:	f858 2b04 	ldr.w	r2, [r8], #4
 800c5a0:	f8d0 e000 	ldr.w	lr, [r0]
 800c5a4:	b293      	uxth	r3, r2
 800c5a6:	ebac 0303 	sub.w	r3, ip, r3
 800c5aa:	0c12      	lsrs	r2, r2, #16
 800c5ac:	fa13 f38e 	uxtah	r3, r3, lr
 800c5b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c5b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c5b8:	b29b      	uxth	r3, r3
 800c5ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5be:	45c1      	cmp	r9, r8
 800c5c0:	f840 3b04 	str.w	r3, [r0], #4
 800c5c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c5c8:	d2e8      	bcs.n	800c59c <quorem+0xb0>
 800c5ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5d2:	b922      	cbnz	r2, 800c5de <quorem+0xf2>
 800c5d4:	3b04      	subs	r3, #4
 800c5d6:	429d      	cmp	r5, r3
 800c5d8:	461a      	mov	r2, r3
 800c5da:	d30a      	bcc.n	800c5f2 <quorem+0x106>
 800c5dc:	613c      	str	r4, [r7, #16]
 800c5de:	4630      	mov	r0, r6
 800c5e0:	b003      	add	sp, #12
 800c5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e6:	6812      	ldr	r2, [r2, #0]
 800c5e8:	3b04      	subs	r3, #4
 800c5ea:	2a00      	cmp	r2, #0
 800c5ec:	d1cc      	bne.n	800c588 <quorem+0x9c>
 800c5ee:	3c01      	subs	r4, #1
 800c5f0:	e7c7      	b.n	800c582 <quorem+0x96>
 800c5f2:	6812      	ldr	r2, [r2, #0]
 800c5f4:	3b04      	subs	r3, #4
 800c5f6:	2a00      	cmp	r2, #0
 800c5f8:	d1f0      	bne.n	800c5dc <quorem+0xf0>
 800c5fa:	3c01      	subs	r4, #1
 800c5fc:	e7eb      	b.n	800c5d6 <quorem+0xea>
 800c5fe:	2000      	movs	r0, #0
 800c600:	e7ee      	b.n	800c5e0 <quorem+0xf4>
 800c602:	0000      	movs	r0, r0
 800c604:	0000      	movs	r0, r0
	...

0800c608 <_dtoa_r>:
 800c608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c60c:	ed2d 8b04 	vpush	{d8-d9}
 800c610:	ec57 6b10 	vmov	r6, r7, d0
 800c614:	b093      	sub	sp, #76	; 0x4c
 800c616:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c618:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c61c:	9106      	str	r1, [sp, #24]
 800c61e:	ee10 aa10 	vmov	sl, s0
 800c622:	4604      	mov	r4, r0
 800c624:	9209      	str	r2, [sp, #36]	; 0x24
 800c626:	930c      	str	r3, [sp, #48]	; 0x30
 800c628:	46bb      	mov	fp, r7
 800c62a:	b975      	cbnz	r5, 800c64a <_dtoa_r+0x42>
 800c62c:	2010      	movs	r0, #16
 800c62e:	f000 fed7 	bl	800d3e0 <malloc>
 800c632:	4602      	mov	r2, r0
 800c634:	6260      	str	r0, [r4, #36]	; 0x24
 800c636:	b920      	cbnz	r0, 800c642 <_dtoa_r+0x3a>
 800c638:	4ba7      	ldr	r3, [pc, #668]	; (800c8d8 <_dtoa_r+0x2d0>)
 800c63a:	21ea      	movs	r1, #234	; 0xea
 800c63c:	48a7      	ldr	r0, [pc, #668]	; (800c8dc <_dtoa_r+0x2d4>)
 800c63e:	f001 ff2d 	bl	800e49c <__assert_func>
 800c642:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c646:	6005      	str	r5, [r0, #0]
 800c648:	60c5      	str	r5, [r0, #12]
 800c64a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c64c:	6819      	ldr	r1, [r3, #0]
 800c64e:	b151      	cbz	r1, 800c666 <_dtoa_r+0x5e>
 800c650:	685a      	ldr	r2, [r3, #4]
 800c652:	604a      	str	r2, [r1, #4]
 800c654:	2301      	movs	r3, #1
 800c656:	4093      	lsls	r3, r2
 800c658:	608b      	str	r3, [r1, #8]
 800c65a:	4620      	mov	r0, r4
 800c65c:	f000 ff08 	bl	800d470 <_Bfree>
 800c660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c662:	2200      	movs	r2, #0
 800c664:	601a      	str	r2, [r3, #0]
 800c666:	1e3b      	subs	r3, r7, #0
 800c668:	bfaa      	itet	ge
 800c66a:	2300      	movge	r3, #0
 800c66c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c670:	f8c8 3000 	strge.w	r3, [r8]
 800c674:	4b9a      	ldr	r3, [pc, #616]	; (800c8e0 <_dtoa_r+0x2d8>)
 800c676:	bfbc      	itt	lt
 800c678:	2201      	movlt	r2, #1
 800c67a:	f8c8 2000 	strlt.w	r2, [r8]
 800c67e:	ea33 030b 	bics.w	r3, r3, fp
 800c682:	d11b      	bne.n	800c6bc <_dtoa_r+0xb4>
 800c684:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c686:	f242 730f 	movw	r3, #9999	; 0x270f
 800c68a:	6013      	str	r3, [r2, #0]
 800c68c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c690:	4333      	orrs	r3, r6
 800c692:	f000 8592 	beq.w	800d1ba <_dtoa_r+0xbb2>
 800c696:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c698:	b963      	cbnz	r3, 800c6b4 <_dtoa_r+0xac>
 800c69a:	4b92      	ldr	r3, [pc, #584]	; (800c8e4 <_dtoa_r+0x2dc>)
 800c69c:	e022      	b.n	800c6e4 <_dtoa_r+0xdc>
 800c69e:	4b92      	ldr	r3, [pc, #584]	; (800c8e8 <_dtoa_r+0x2e0>)
 800c6a0:	9301      	str	r3, [sp, #4]
 800c6a2:	3308      	adds	r3, #8
 800c6a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c6a6:	6013      	str	r3, [r2, #0]
 800c6a8:	9801      	ldr	r0, [sp, #4]
 800c6aa:	b013      	add	sp, #76	; 0x4c
 800c6ac:	ecbd 8b04 	vpop	{d8-d9}
 800c6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6b4:	4b8b      	ldr	r3, [pc, #556]	; (800c8e4 <_dtoa_r+0x2dc>)
 800c6b6:	9301      	str	r3, [sp, #4]
 800c6b8:	3303      	adds	r3, #3
 800c6ba:	e7f3      	b.n	800c6a4 <_dtoa_r+0x9c>
 800c6bc:	2200      	movs	r2, #0
 800c6be:	2300      	movs	r3, #0
 800c6c0:	4650      	mov	r0, sl
 800c6c2:	4659      	mov	r1, fp
 800c6c4:	f7f4 f9d8 	bl	8000a78 <__aeabi_dcmpeq>
 800c6c8:	ec4b ab19 	vmov	d9, sl, fp
 800c6cc:	4680      	mov	r8, r0
 800c6ce:	b158      	cbz	r0, 800c6e8 <_dtoa_r+0xe0>
 800c6d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	6013      	str	r3, [r2, #0]
 800c6d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	f000 856b 	beq.w	800d1b4 <_dtoa_r+0xbac>
 800c6de:	4883      	ldr	r0, [pc, #524]	; (800c8ec <_dtoa_r+0x2e4>)
 800c6e0:	6018      	str	r0, [r3, #0]
 800c6e2:	1e43      	subs	r3, r0, #1
 800c6e4:	9301      	str	r3, [sp, #4]
 800c6e6:	e7df      	b.n	800c6a8 <_dtoa_r+0xa0>
 800c6e8:	ec4b ab10 	vmov	d0, sl, fp
 800c6ec:	aa10      	add	r2, sp, #64	; 0x40
 800c6ee:	a911      	add	r1, sp, #68	; 0x44
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	f001 f9a5 	bl	800da40 <__d2b>
 800c6f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c6fa:	ee08 0a10 	vmov	s16, r0
 800c6fe:	2d00      	cmp	r5, #0
 800c700:	f000 8084 	beq.w	800c80c <_dtoa_r+0x204>
 800c704:	ee19 3a90 	vmov	r3, s19
 800c708:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c70c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c710:	4656      	mov	r6, sl
 800c712:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c716:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c71a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c71e:	4b74      	ldr	r3, [pc, #464]	; (800c8f0 <_dtoa_r+0x2e8>)
 800c720:	2200      	movs	r2, #0
 800c722:	4630      	mov	r0, r6
 800c724:	4639      	mov	r1, r7
 800c726:	f7f3 fd87 	bl	8000238 <__aeabi_dsub>
 800c72a:	a365      	add	r3, pc, #404	; (adr r3, 800c8c0 <_dtoa_r+0x2b8>)
 800c72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c730:	f7f3 ff3a 	bl	80005a8 <__aeabi_dmul>
 800c734:	a364      	add	r3, pc, #400	; (adr r3, 800c8c8 <_dtoa_r+0x2c0>)
 800c736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c73a:	f7f3 fd7f 	bl	800023c <__adddf3>
 800c73e:	4606      	mov	r6, r0
 800c740:	4628      	mov	r0, r5
 800c742:	460f      	mov	r7, r1
 800c744:	f7f3 fec6 	bl	80004d4 <__aeabi_i2d>
 800c748:	a361      	add	r3, pc, #388	; (adr r3, 800c8d0 <_dtoa_r+0x2c8>)
 800c74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74e:	f7f3 ff2b 	bl	80005a8 <__aeabi_dmul>
 800c752:	4602      	mov	r2, r0
 800c754:	460b      	mov	r3, r1
 800c756:	4630      	mov	r0, r6
 800c758:	4639      	mov	r1, r7
 800c75a:	f7f3 fd6f 	bl	800023c <__adddf3>
 800c75e:	4606      	mov	r6, r0
 800c760:	460f      	mov	r7, r1
 800c762:	f7f4 f9d1 	bl	8000b08 <__aeabi_d2iz>
 800c766:	2200      	movs	r2, #0
 800c768:	9000      	str	r0, [sp, #0]
 800c76a:	2300      	movs	r3, #0
 800c76c:	4630      	mov	r0, r6
 800c76e:	4639      	mov	r1, r7
 800c770:	f7f4 f98c 	bl	8000a8c <__aeabi_dcmplt>
 800c774:	b150      	cbz	r0, 800c78c <_dtoa_r+0x184>
 800c776:	9800      	ldr	r0, [sp, #0]
 800c778:	f7f3 feac 	bl	80004d4 <__aeabi_i2d>
 800c77c:	4632      	mov	r2, r6
 800c77e:	463b      	mov	r3, r7
 800c780:	f7f4 f97a 	bl	8000a78 <__aeabi_dcmpeq>
 800c784:	b910      	cbnz	r0, 800c78c <_dtoa_r+0x184>
 800c786:	9b00      	ldr	r3, [sp, #0]
 800c788:	3b01      	subs	r3, #1
 800c78a:	9300      	str	r3, [sp, #0]
 800c78c:	9b00      	ldr	r3, [sp, #0]
 800c78e:	2b16      	cmp	r3, #22
 800c790:	d85a      	bhi.n	800c848 <_dtoa_r+0x240>
 800c792:	9a00      	ldr	r2, [sp, #0]
 800c794:	4b57      	ldr	r3, [pc, #348]	; (800c8f4 <_dtoa_r+0x2ec>)
 800c796:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79e:	ec51 0b19 	vmov	r0, r1, d9
 800c7a2:	f7f4 f973 	bl	8000a8c <__aeabi_dcmplt>
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	d050      	beq.n	800c84c <_dtoa_r+0x244>
 800c7aa:	9b00      	ldr	r3, [sp, #0]
 800c7ac:	3b01      	subs	r3, #1
 800c7ae:	9300      	str	r3, [sp, #0]
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c7b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c7b6:	1b5d      	subs	r5, r3, r5
 800c7b8:	1e6b      	subs	r3, r5, #1
 800c7ba:	9305      	str	r3, [sp, #20]
 800c7bc:	bf45      	ittet	mi
 800c7be:	f1c5 0301 	rsbmi	r3, r5, #1
 800c7c2:	9304      	strmi	r3, [sp, #16]
 800c7c4:	2300      	movpl	r3, #0
 800c7c6:	2300      	movmi	r3, #0
 800c7c8:	bf4c      	ite	mi
 800c7ca:	9305      	strmi	r3, [sp, #20]
 800c7cc:	9304      	strpl	r3, [sp, #16]
 800c7ce:	9b00      	ldr	r3, [sp, #0]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	db3d      	blt.n	800c850 <_dtoa_r+0x248>
 800c7d4:	9b05      	ldr	r3, [sp, #20]
 800c7d6:	9a00      	ldr	r2, [sp, #0]
 800c7d8:	920a      	str	r2, [sp, #40]	; 0x28
 800c7da:	4413      	add	r3, r2
 800c7dc:	9305      	str	r3, [sp, #20]
 800c7de:	2300      	movs	r3, #0
 800c7e0:	9307      	str	r3, [sp, #28]
 800c7e2:	9b06      	ldr	r3, [sp, #24]
 800c7e4:	2b09      	cmp	r3, #9
 800c7e6:	f200 8089 	bhi.w	800c8fc <_dtoa_r+0x2f4>
 800c7ea:	2b05      	cmp	r3, #5
 800c7ec:	bfc4      	itt	gt
 800c7ee:	3b04      	subgt	r3, #4
 800c7f0:	9306      	strgt	r3, [sp, #24]
 800c7f2:	9b06      	ldr	r3, [sp, #24]
 800c7f4:	f1a3 0302 	sub.w	r3, r3, #2
 800c7f8:	bfcc      	ite	gt
 800c7fa:	2500      	movgt	r5, #0
 800c7fc:	2501      	movle	r5, #1
 800c7fe:	2b03      	cmp	r3, #3
 800c800:	f200 8087 	bhi.w	800c912 <_dtoa_r+0x30a>
 800c804:	e8df f003 	tbb	[pc, r3]
 800c808:	59383a2d 	.word	0x59383a2d
 800c80c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c810:	441d      	add	r5, r3
 800c812:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c816:	2b20      	cmp	r3, #32
 800c818:	bfc1      	itttt	gt
 800c81a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c81e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c822:	fa0b f303 	lslgt.w	r3, fp, r3
 800c826:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c82a:	bfda      	itte	le
 800c82c:	f1c3 0320 	rsble	r3, r3, #32
 800c830:	fa06 f003 	lslle.w	r0, r6, r3
 800c834:	4318      	orrgt	r0, r3
 800c836:	f7f3 fe3d 	bl	80004b4 <__aeabi_ui2d>
 800c83a:	2301      	movs	r3, #1
 800c83c:	4606      	mov	r6, r0
 800c83e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c842:	3d01      	subs	r5, #1
 800c844:	930e      	str	r3, [sp, #56]	; 0x38
 800c846:	e76a      	b.n	800c71e <_dtoa_r+0x116>
 800c848:	2301      	movs	r3, #1
 800c84a:	e7b2      	b.n	800c7b2 <_dtoa_r+0x1aa>
 800c84c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c84e:	e7b1      	b.n	800c7b4 <_dtoa_r+0x1ac>
 800c850:	9b04      	ldr	r3, [sp, #16]
 800c852:	9a00      	ldr	r2, [sp, #0]
 800c854:	1a9b      	subs	r3, r3, r2
 800c856:	9304      	str	r3, [sp, #16]
 800c858:	4253      	negs	r3, r2
 800c85a:	9307      	str	r3, [sp, #28]
 800c85c:	2300      	movs	r3, #0
 800c85e:	930a      	str	r3, [sp, #40]	; 0x28
 800c860:	e7bf      	b.n	800c7e2 <_dtoa_r+0x1da>
 800c862:	2300      	movs	r3, #0
 800c864:	9308      	str	r3, [sp, #32]
 800c866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c868:	2b00      	cmp	r3, #0
 800c86a:	dc55      	bgt.n	800c918 <_dtoa_r+0x310>
 800c86c:	2301      	movs	r3, #1
 800c86e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c872:	461a      	mov	r2, r3
 800c874:	9209      	str	r2, [sp, #36]	; 0x24
 800c876:	e00c      	b.n	800c892 <_dtoa_r+0x28a>
 800c878:	2301      	movs	r3, #1
 800c87a:	e7f3      	b.n	800c864 <_dtoa_r+0x25c>
 800c87c:	2300      	movs	r3, #0
 800c87e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c880:	9308      	str	r3, [sp, #32]
 800c882:	9b00      	ldr	r3, [sp, #0]
 800c884:	4413      	add	r3, r2
 800c886:	9302      	str	r3, [sp, #8]
 800c888:	3301      	adds	r3, #1
 800c88a:	2b01      	cmp	r3, #1
 800c88c:	9303      	str	r3, [sp, #12]
 800c88e:	bfb8      	it	lt
 800c890:	2301      	movlt	r3, #1
 800c892:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c894:	2200      	movs	r2, #0
 800c896:	6042      	str	r2, [r0, #4]
 800c898:	2204      	movs	r2, #4
 800c89a:	f102 0614 	add.w	r6, r2, #20
 800c89e:	429e      	cmp	r6, r3
 800c8a0:	6841      	ldr	r1, [r0, #4]
 800c8a2:	d93d      	bls.n	800c920 <_dtoa_r+0x318>
 800c8a4:	4620      	mov	r0, r4
 800c8a6:	f000 fda3 	bl	800d3f0 <_Balloc>
 800c8aa:	9001      	str	r0, [sp, #4]
 800c8ac:	2800      	cmp	r0, #0
 800c8ae:	d13b      	bne.n	800c928 <_dtoa_r+0x320>
 800c8b0:	4b11      	ldr	r3, [pc, #68]	; (800c8f8 <_dtoa_r+0x2f0>)
 800c8b2:	4602      	mov	r2, r0
 800c8b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c8b8:	e6c0      	b.n	800c63c <_dtoa_r+0x34>
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	e7df      	b.n	800c87e <_dtoa_r+0x276>
 800c8be:	bf00      	nop
 800c8c0:	636f4361 	.word	0x636f4361
 800c8c4:	3fd287a7 	.word	0x3fd287a7
 800c8c8:	8b60c8b3 	.word	0x8b60c8b3
 800c8cc:	3fc68a28 	.word	0x3fc68a28
 800c8d0:	509f79fb 	.word	0x509f79fb
 800c8d4:	3fd34413 	.word	0x3fd34413
 800c8d8:	0800f565 	.word	0x0800f565
 800c8dc:	0800f57c 	.word	0x0800f57c
 800c8e0:	7ff00000 	.word	0x7ff00000
 800c8e4:	0800f561 	.word	0x0800f561
 800c8e8:	0800f558 	.word	0x0800f558
 800c8ec:	0800f535 	.word	0x0800f535
 800c8f0:	3ff80000 	.word	0x3ff80000
 800c8f4:	0800f6d0 	.word	0x0800f6d0
 800c8f8:	0800f5d7 	.word	0x0800f5d7
 800c8fc:	2501      	movs	r5, #1
 800c8fe:	2300      	movs	r3, #0
 800c900:	9306      	str	r3, [sp, #24]
 800c902:	9508      	str	r5, [sp, #32]
 800c904:	f04f 33ff 	mov.w	r3, #4294967295
 800c908:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c90c:	2200      	movs	r2, #0
 800c90e:	2312      	movs	r3, #18
 800c910:	e7b0      	b.n	800c874 <_dtoa_r+0x26c>
 800c912:	2301      	movs	r3, #1
 800c914:	9308      	str	r3, [sp, #32]
 800c916:	e7f5      	b.n	800c904 <_dtoa_r+0x2fc>
 800c918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c91a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c91e:	e7b8      	b.n	800c892 <_dtoa_r+0x28a>
 800c920:	3101      	adds	r1, #1
 800c922:	6041      	str	r1, [r0, #4]
 800c924:	0052      	lsls	r2, r2, #1
 800c926:	e7b8      	b.n	800c89a <_dtoa_r+0x292>
 800c928:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c92a:	9a01      	ldr	r2, [sp, #4]
 800c92c:	601a      	str	r2, [r3, #0]
 800c92e:	9b03      	ldr	r3, [sp, #12]
 800c930:	2b0e      	cmp	r3, #14
 800c932:	f200 809d 	bhi.w	800ca70 <_dtoa_r+0x468>
 800c936:	2d00      	cmp	r5, #0
 800c938:	f000 809a 	beq.w	800ca70 <_dtoa_r+0x468>
 800c93c:	9b00      	ldr	r3, [sp, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	dd32      	ble.n	800c9a8 <_dtoa_r+0x3a0>
 800c942:	4ab7      	ldr	r2, [pc, #732]	; (800cc20 <_dtoa_r+0x618>)
 800c944:	f003 030f 	and.w	r3, r3, #15
 800c948:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c94c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c950:	9b00      	ldr	r3, [sp, #0]
 800c952:	05d8      	lsls	r0, r3, #23
 800c954:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c958:	d516      	bpl.n	800c988 <_dtoa_r+0x380>
 800c95a:	4bb2      	ldr	r3, [pc, #712]	; (800cc24 <_dtoa_r+0x61c>)
 800c95c:	ec51 0b19 	vmov	r0, r1, d9
 800c960:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c964:	f7f3 ff4a 	bl	80007fc <__aeabi_ddiv>
 800c968:	f007 070f 	and.w	r7, r7, #15
 800c96c:	4682      	mov	sl, r0
 800c96e:	468b      	mov	fp, r1
 800c970:	2503      	movs	r5, #3
 800c972:	4eac      	ldr	r6, [pc, #688]	; (800cc24 <_dtoa_r+0x61c>)
 800c974:	b957      	cbnz	r7, 800c98c <_dtoa_r+0x384>
 800c976:	4642      	mov	r2, r8
 800c978:	464b      	mov	r3, r9
 800c97a:	4650      	mov	r0, sl
 800c97c:	4659      	mov	r1, fp
 800c97e:	f7f3 ff3d 	bl	80007fc <__aeabi_ddiv>
 800c982:	4682      	mov	sl, r0
 800c984:	468b      	mov	fp, r1
 800c986:	e028      	b.n	800c9da <_dtoa_r+0x3d2>
 800c988:	2502      	movs	r5, #2
 800c98a:	e7f2      	b.n	800c972 <_dtoa_r+0x36a>
 800c98c:	07f9      	lsls	r1, r7, #31
 800c98e:	d508      	bpl.n	800c9a2 <_dtoa_r+0x39a>
 800c990:	4640      	mov	r0, r8
 800c992:	4649      	mov	r1, r9
 800c994:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c998:	f7f3 fe06 	bl	80005a8 <__aeabi_dmul>
 800c99c:	3501      	adds	r5, #1
 800c99e:	4680      	mov	r8, r0
 800c9a0:	4689      	mov	r9, r1
 800c9a2:	107f      	asrs	r7, r7, #1
 800c9a4:	3608      	adds	r6, #8
 800c9a6:	e7e5      	b.n	800c974 <_dtoa_r+0x36c>
 800c9a8:	f000 809b 	beq.w	800cae2 <_dtoa_r+0x4da>
 800c9ac:	9b00      	ldr	r3, [sp, #0]
 800c9ae:	4f9d      	ldr	r7, [pc, #628]	; (800cc24 <_dtoa_r+0x61c>)
 800c9b0:	425e      	negs	r6, r3
 800c9b2:	4b9b      	ldr	r3, [pc, #620]	; (800cc20 <_dtoa_r+0x618>)
 800c9b4:	f006 020f 	and.w	r2, r6, #15
 800c9b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c0:	ec51 0b19 	vmov	r0, r1, d9
 800c9c4:	f7f3 fdf0 	bl	80005a8 <__aeabi_dmul>
 800c9c8:	1136      	asrs	r6, r6, #4
 800c9ca:	4682      	mov	sl, r0
 800c9cc:	468b      	mov	fp, r1
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	2502      	movs	r5, #2
 800c9d2:	2e00      	cmp	r6, #0
 800c9d4:	d17a      	bne.n	800cacc <_dtoa_r+0x4c4>
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d1d3      	bne.n	800c982 <_dtoa_r+0x37a>
 800c9da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	f000 8082 	beq.w	800cae6 <_dtoa_r+0x4de>
 800c9e2:	4b91      	ldr	r3, [pc, #580]	; (800cc28 <_dtoa_r+0x620>)
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	4650      	mov	r0, sl
 800c9e8:	4659      	mov	r1, fp
 800c9ea:	f7f4 f84f 	bl	8000a8c <__aeabi_dcmplt>
 800c9ee:	2800      	cmp	r0, #0
 800c9f0:	d079      	beq.n	800cae6 <_dtoa_r+0x4de>
 800c9f2:	9b03      	ldr	r3, [sp, #12]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d076      	beq.n	800cae6 <_dtoa_r+0x4de>
 800c9f8:	9b02      	ldr	r3, [sp, #8]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	dd36      	ble.n	800ca6c <_dtoa_r+0x464>
 800c9fe:	9b00      	ldr	r3, [sp, #0]
 800ca00:	4650      	mov	r0, sl
 800ca02:	4659      	mov	r1, fp
 800ca04:	1e5f      	subs	r7, r3, #1
 800ca06:	2200      	movs	r2, #0
 800ca08:	4b88      	ldr	r3, [pc, #544]	; (800cc2c <_dtoa_r+0x624>)
 800ca0a:	f7f3 fdcd 	bl	80005a8 <__aeabi_dmul>
 800ca0e:	9e02      	ldr	r6, [sp, #8]
 800ca10:	4682      	mov	sl, r0
 800ca12:	468b      	mov	fp, r1
 800ca14:	3501      	adds	r5, #1
 800ca16:	4628      	mov	r0, r5
 800ca18:	f7f3 fd5c 	bl	80004d4 <__aeabi_i2d>
 800ca1c:	4652      	mov	r2, sl
 800ca1e:	465b      	mov	r3, fp
 800ca20:	f7f3 fdc2 	bl	80005a8 <__aeabi_dmul>
 800ca24:	4b82      	ldr	r3, [pc, #520]	; (800cc30 <_dtoa_r+0x628>)
 800ca26:	2200      	movs	r2, #0
 800ca28:	f7f3 fc08 	bl	800023c <__adddf3>
 800ca2c:	46d0      	mov	r8, sl
 800ca2e:	46d9      	mov	r9, fp
 800ca30:	4682      	mov	sl, r0
 800ca32:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ca36:	2e00      	cmp	r6, #0
 800ca38:	d158      	bne.n	800caec <_dtoa_r+0x4e4>
 800ca3a:	4b7e      	ldr	r3, [pc, #504]	; (800cc34 <_dtoa_r+0x62c>)
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	4640      	mov	r0, r8
 800ca40:	4649      	mov	r1, r9
 800ca42:	f7f3 fbf9 	bl	8000238 <__aeabi_dsub>
 800ca46:	4652      	mov	r2, sl
 800ca48:	465b      	mov	r3, fp
 800ca4a:	4680      	mov	r8, r0
 800ca4c:	4689      	mov	r9, r1
 800ca4e:	f7f4 f83b 	bl	8000ac8 <__aeabi_dcmpgt>
 800ca52:	2800      	cmp	r0, #0
 800ca54:	f040 8295 	bne.w	800cf82 <_dtoa_r+0x97a>
 800ca58:	4652      	mov	r2, sl
 800ca5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ca5e:	4640      	mov	r0, r8
 800ca60:	4649      	mov	r1, r9
 800ca62:	f7f4 f813 	bl	8000a8c <__aeabi_dcmplt>
 800ca66:	2800      	cmp	r0, #0
 800ca68:	f040 8289 	bne.w	800cf7e <_dtoa_r+0x976>
 800ca6c:	ec5b ab19 	vmov	sl, fp, d9
 800ca70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	f2c0 8148 	blt.w	800cd08 <_dtoa_r+0x700>
 800ca78:	9a00      	ldr	r2, [sp, #0]
 800ca7a:	2a0e      	cmp	r2, #14
 800ca7c:	f300 8144 	bgt.w	800cd08 <_dtoa_r+0x700>
 800ca80:	4b67      	ldr	r3, [pc, #412]	; (800cc20 <_dtoa_r+0x618>)
 800ca82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca86:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ca8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	f280 80d5 	bge.w	800cc3c <_dtoa_r+0x634>
 800ca92:	9b03      	ldr	r3, [sp, #12]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	f300 80d1 	bgt.w	800cc3c <_dtoa_r+0x634>
 800ca9a:	f040 826f 	bne.w	800cf7c <_dtoa_r+0x974>
 800ca9e:	4b65      	ldr	r3, [pc, #404]	; (800cc34 <_dtoa_r+0x62c>)
 800caa0:	2200      	movs	r2, #0
 800caa2:	4640      	mov	r0, r8
 800caa4:	4649      	mov	r1, r9
 800caa6:	f7f3 fd7f 	bl	80005a8 <__aeabi_dmul>
 800caaa:	4652      	mov	r2, sl
 800caac:	465b      	mov	r3, fp
 800caae:	f7f4 f801 	bl	8000ab4 <__aeabi_dcmpge>
 800cab2:	9e03      	ldr	r6, [sp, #12]
 800cab4:	4637      	mov	r7, r6
 800cab6:	2800      	cmp	r0, #0
 800cab8:	f040 8245 	bne.w	800cf46 <_dtoa_r+0x93e>
 800cabc:	9d01      	ldr	r5, [sp, #4]
 800cabe:	2331      	movs	r3, #49	; 0x31
 800cac0:	f805 3b01 	strb.w	r3, [r5], #1
 800cac4:	9b00      	ldr	r3, [sp, #0]
 800cac6:	3301      	adds	r3, #1
 800cac8:	9300      	str	r3, [sp, #0]
 800caca:	e240      	b.n	800cf4e <_dtoa_r+0x946>
 800cacc:	07f2      	lsls	r2, r6, #31
 800cace:	d505      	bpl.n	800cadc <_dtoa_r+0x4d4>
 800cad0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cad4:	f7f3 fd68 	bl	80005a8 <__aeabi_dmul>
 800cad8:	3501      	adds	r5, #1
 800cada:	2301      	movs	r3, #1
 800cadc:	1076      	asrs	r6, r6, #1
 800cade:	3708      	adds	r7, #8
 800cae0:	e777      	b.n	800c9d2 <_dtoa_r+0x3ca>
 800cae2:	2502      	movs	r5, #2
 800cae4:	e779      	b.n	800c9da <_dtoa_r+0x3d2>
 800cae6:	9f00      	ldr	r7, [sp, #0]
 800cae8:	9e03      	ldr	r6, [sp, #12]
 800caea:	e794      	b.n	800ca16 <_dtoa_r+0x40e>
 800caec:	9901      	ldr	r1, [sp, #4]
 800caee:	4b4c      	ldr	r3, [pc, #304]	; (800cc20 <_dtoa_r+0x618>)
 800caf0:	4431      	add	r1, r6
 800caf2:	910d      	str	r1, [sp, #52]	; 0x34
 800caf4:	9908      	ldr	r1, [sp, #32]
 800caf6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cafa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cafe:	2900      	cmp	r1, #0
 800cb00:	d043      	beq.n	800cb8a <_dtoa_r+0x582>
 800cb02:	494d      	ldr	r1, [pc, #308]	; (800cc38 <_dtoa_r+0x630>)
 800cb04:	2000      	movs	r0, #0
 800cb06:	f7f3 fe79 	bl	80007fc <__aeabi_ddiv>
 800cb0a:	4652      	mov	r2, sl
 800cb0c:	465b      	mov	r3, fp
 800cb0e:	f7f3 fb93 	bl	8000238 <__aeabi_dsub>
 800cb12:	9d01      	ldr	r5, [sp, #4]
 800cb14:	4682      	mov	sl, r0
 800cb16:	468b      	mov	fp, r1
 800cb18:	4649      	mov	r1, r9
 800cb1a:	4640      	mov	r0, r8
 800cb1c:	f7f3 fff4 	bl	8000b08 <__aeabi_d2iz>
 800cb20:	4606      	mov	r6, r0
 800cb22:	f7f3 fcd7 	bl	80004d4 <__aeabi_i2d>
 800cb26:	4602      	mov	r2, r0
 800cb28:	460b      	mov	r3, r1
 800cb2a:	4640      	mov	r0, r8
 800cb2c:	4649      	mov	r1, r9
 800cb2e:	f7f3 fb83 	bl	8000238 <__aeabi_dsub>
 800cb32:	3630      	adds	r6, #48	; 0x30
 800cb34:	f805 6b01 	strb.w	r6, [r5], #1
 800cb38:	4652      	mov	r2, sl
 800cb3a:	465b      	mov	r3, fp
 800cb3c:	4680      	mov	r8, r0
 800cb3e:	4689      	mov	r9, r1
 800cb40:	f7f3 ffa4 	bl	8000a8c <__aeabi_dcmplt>
 800cb44:	2800      	cmp	r0, #0
 800cb46:	d163      	bne.n	800cc10 <_dtoa_r+0x608>
 800cb48:	4642      	mov	r2, r8
 800cb4a:	464b      	mov	r3, r9
 800cb4c:	4936      	ldr	r1, [pc, #216]	; (800cc28 <_dtoa_r+0x620>)
 800cb4e:	2000      	movs	r0, #0
 800cb50:	f7f3 fb72 	bl	8000238 <__aeabi_dsub>
 800cb54:	4652      	mov	r2, sl
 800cb56:	465b      	mov	r3, fp
 800cb58:	f7f3 ff98 	bl	8000a8c <__aeabi_dcmplt>
 800cb5c:	2800      	cmp	r0, #0
 800cb5e:	f040 80b5 	bne.w	800cccc <_dtoa_r+0x6c4>
 800cb62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb64:	429d      	cmp	r5, r3
 800cb66:	d081      	beq.n	800ca6c <_dtoa_r+0x464>
 800cb68:	4b30      	ldr	r3, [pc, #192]	; (800cc2c <_dtoa_r+0x624>)
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	4650      	mov	r0, sl
 800cb6e:	4659      	mov	r1, fp
 800cb70:	f7f3 fd1a 	bl	80005a8 <__aeabi_dmul>
 800cb74:	4b2d      	ldr	r3, [pc, #180]	; (800cc2c <_dtoa_r+0x624>)
 800cb76:	4682      	mov	sl, r0
 800cb78:	468b      	mov	fp, r1
 800cb7a:	4640      	mov	r0, r8
 800cb7c:	4649      	mov	r1, r9
 800cb7e:	2200      	movs	r2, #0
 800cb80:	f7f3 fd12 	bl	80005a8 <__aeabi_dmul>
 800cb84:	4680      	mov	r8, r0
 800cb86:	4689      	mov	r9, r1
 800cb88:	e7c6      	b.n	800cb18 <_dtoa_r+0x510>
 800cb8a:	4650      	mov	r0, sl
 800cb8c:	4659      	mov	r1, fp
 800cb8e:	f7f3 fd0b 	bl	80005a8 <__aeabi_dmul>
 800cb92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb94:	9d01      	ldr	r5, [sp, #4]
 800cb96:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb98:	4682      	mov	sl, r0
 800cb9a:	468b      	mov	fp, r1
 800cb9c:	4649      	mov	r1, r9
 800cb9e:	4640      	mov	r0, r8
 800cba0:	f7f3 ffb2 	bl	8000b08 <__aeabi_d2iz>
 800cba4:	4606      	mov	r6, r0
 800cba6:	f7f3 fc95 	bl	80004d4 <__aeabi_i2d>
 800cbaa:	3630      	adds	r6, #48	; 0x30
 800cbac:	4602      	mov	r2, r0
 800cbae:	460b      	mov	r3, r1
 800cbb0:	4640      	mov	r0, r8
 800cbb2:	4649      	mov	r1, r9
 800cbb4:	f7f3 fb40 	bl	8000238 <__aeabi_dsub>
 800cbb8:	f805 6b01 	strb.w	r6, [r5], #1
 800cbbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbbe:	429d      	cmp	r5, r3
 800cbc0:	4680      	mov	r8, r0
 800cbc2:	4689      	mov	r9, r1
 800cbc4:	f04f 0200 	mov.w	r2, #0
 800cbc8:	d124      	bne.n	800cc14 <_dtoa_r+0x60c>
 800cbca:	4b1b      	ldr	r3, [pc, #108]	; (800cc38 <_dtoa_r+0x630>)
 800cbcc:	4650      	mov	r0, sl
 800cbce:	4659      	mov	r1, fp
 800cbd0:	f7f3 fb34 	bl	800023c <__adddf3>
 800cbd4:	4602      	mov	r2, r0
 800cbd6:	460b      	mov	r3, r1
 800cbd8:	4640      	mov	r0, r8
 800cbda:	4649      	mov	r1, r9
 800cbdc:	f7f3 ff74 	bl	8000ac8 <__aeabi_dcmpgt>
 800cbe0:	2800      	cmp	r0, #0
 800cbe2:	d173      	bne.n	800cccc <_dtoa_r+0x6c4>
 800cbe4:	4652      	mov	r2, sl
 800cbe6:	465b      	mov	r3, fp
 800cbe8:	4913      	ldr	r1, [pc, #76]	; (800cc38 <_dtoa_r+0x630>)
 800cbea:	2000      	movs	r0, #0
 800cbec:	f7f3 fb24 	bl	8000238 <__aeabi_dsub>
 800cbf0:	4602      	mov	r2, r0
 800cbf2:	460b      	mov	r3, r1
 800cbf4:	4640      	mov	r0, r8
 800cbf6:	4649      	mov	r1, r9
 800cbf8:	f7f3 ff48 	bl	8000a8c <__aeabi_dcmplt>
 800cbfc:	2800      	cmp	r0, #0
 800cbfe:	f43f af35 	beq.w	800ca6c <_dtoa_r+0x464>
 800cc02:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cc04:	1e6b      	subs	r3, r5, #1
 800cc06:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc08:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cc0c:	2b30      	cmp	r3, #48	; 0x30
 800cc0e:	d0f8      	beq.n	800cc02 <_dtoa_r+0x5fa>
 800cc10:	9700      	str	r7, [sp, #0]
 800cc12:	e049      	b.n	800cca8 <_dtoa_r+0x6a0>
 800cc14:	4b05      	ldr	r3, [pc, #20]	; (800cc2c <_dtoa_r+0x624>)
 800cc16:	f7f3 fcc7 	bl	80005a8 <__aeabi_dmul>
 800cc1a:	4680      	mov	r8, r0
 800cc1c:	4689      	mov	r9, r1
 800cc1e:	e7bd      	b.n	800cb9c <_dtoa_r+0x594>
 800cc20:	0800f6d0 	.word	0x0800f6d0
 800cc24:	0800f6a8 	.word	0x0800f6a8
 800cc28:	3ff00000 	.word	0x3ff00000
 800cc2c:	40240000 	.word	0x40240000
 800cc30:	401c0000 	.word	0x401c0000
 800cc34:	40140000 	.word	0x40140000
 800cc38:	3fe00000 	.word	0x3fe00000
 800cc3c:	9d01      	ldr	r5, [sp, #4]
 800cc3e:	4656      	mov	r6, sl
 800cc40:	465f      	mov	r7, fp
 800cc42:	4642      	mov	r2, r8
 800cc44:	464b      	mov	r3, r9
 800cc46:	4630      	mov	r0, r6
 800cc48:	4639      	mov	r1, r7
 800cc4a:	f7f3 fdd7 	bl	80007fc <__aeabi_ddiv>
 800cc4e:	f7f3 ff5b 	bl	8000b08 <__aeabi_d2iz>
 800cc52:	4682      	mov	sl, r0
 800cc54:	f7f3 fc3e 	bl	80004d4 <__aeabi_i2d>
 800cc58:	4642      	mov	r2, r8
 800cc5a:	464b      	mov	r3, r9
 800cc5c:	f7f3 fca4 	bl	80005a8 <__aeabi_dmul>
 800cc60:	4602      	mov	r2, r0
 800cc62:	460b      	mov	r3, r1
 800cc64:	4630      	mov	r0, r6
 800cc66:	4639      	mov	r1, r7
 800cc68:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cc6c:	f7f3 fae4 	bl	8000238 <__aeabi_dsub>
 800cc70:	f805 6b01 	strb.w	r6, [r5], #1
 800cc74:	9e01      	ldr	r6, [sp, #4]
 800cc76:	9f03      	ldr	r7, [sp, #12]
 800cc78:	1bae      	subs	r6, r5, r6
 800cc7a:	42b7      	cmp	r7, r6
 800cc7c:	4602      	mov	r2, r0
 800cc7e:	460b      	mov	r3, r1
 800cc80:	d135      	bne.n	800ccee <_dtoa_r+0x6e6>
 800cc82:	f7f3 fadb 	bl	800023c <__adddf3>
 800cc86:	4642      	mov	r2, r8
 800cc88:	464b      	mov	r3, r9
 800cc8a:	4606      	mov	r6, r0
 800cc8c:	460f      	mov	r7, r1
 800cc8e:	f7f3 ff1b 	bl	8000ac8 <__aeabi_dcmpgt>
 800cc92:	b9d0      	cbnz	r0, 800ccca <_dtoa_r+0x6c2>
 800cc94:	4642      	mov	r2, r8
 800cc96:	464b      	mov	r3, r9
 800cc98:	4630      	mov	r0, r6
 800cc9a:	4639      	mov	r1, r7
 800cc9c:	f7f3 feec 	bl	8000a78 <__aeabi_dcmpeq>
 800cca0:	b110      	cbz	r0, 800cca8 <_dtoa_r+0x6a0>
 800cca2:	f01a 0f01 	tst.w	sl, #1
 800cca6:	d110      	bne.n	800ccca <_dtoa_r+0x6c2>
 800cca8:	4620      	mov	r0, r4
 800ccaa:	ee18 1a10 	vmov	r1, s16
 800ccae:	f000 fbdf 	bl	800d470 <_Bfree>
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	9800      	ldr	r0, [sp, #0]
 800ccb6:	702b      	strb	r3, [r5, #0]
 800ccb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccba:	3001      	adds	r0, #1
 800ccbc:	6018      	str	r0, [r3, #0]
 800ccbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	f43f acf1 	beq.w	800c6a8 <_dtoa_r+0xa0>
 800ccc6:	601d      	str	r5, [r3, #0]
 800ccc8:	e4ee      	b.n	800c6a8 <_dtoa_r+0xa0>
 800ccca:	9f00      	ldr	r7, [sp, #0]
 800cccc:	462b      	mov	r3, r5
 800ccce:	461d      	mov	r5, r3
 800ccd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ccd4:	2a39      	cmp	r2, #57	; 0x39
 800ccd6:	d106      	bne.n	800cce6 <_dtoa_r+0x6de>
 800ccd8:	9a01      	ldr	r2, [sp, #4]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d1f7      	bne.n	800ccce <_dtoa_r+0x6c6>
 800ccde:	9901      	ldr	r1, [sp, #4]
 800cce0:	2230      	movs	r2, #48	; 0x30
 800cce2:	3701      	adds	r7, #1
 800cce4:	700a      	strb	r2, [r1, #0]
 800cce6:	781a      	ldrb	r2, [r3, #0]
 800cce8:	3201      	adds	r2, #1
 800ccea:	701a      	strb	r2, [r3, #0]
 800ccec:	e790      	b.n	800cc10 <_dtoa_r+0x608>
 800ccee:	4ba6      	ldr	r3, [pc, #664]	; (800cf88 <_dtoa_r+0x980>)
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	f7f3 fc59 	bl	80005a8 <__aeabi_dmul>
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	4606      	mov	r6, r0
 800ccfc:	460f      	mov	r7, r1
 800ccfe:	f7f3 febb 	bl	8000a78 <__aeabi_dcmpeq>
 800cd02:	2800      	cmp	r0, #0
 800cd04:	d09d      	beq.n	800cc42 <_dtoa_r+0x63a>
 800cd06:	e7cf      	b.n	800cca8 <_dtoa_r+0x6a0>
 800cd08:	9a08      	ldr	r2, [sp, #32]
 800cd0a:	2a00      	cmp	r2, #0
 800cd0c:	f000 80d7 	beq.w	800cebe <_dtoa_r+0x8b6>
 800cd10:	9a06      	ldr	r2, [sp, #24]
 800cd12:	2a01      	cmp	r2, #1
 800cd14:	f300 80ba 	bgt.w	800ce8c <_dtoa_r+0x884>
 800cd18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd1a:	2a00      	cmp	r2, #0
 800cd1c:	f000 80b2 	beq.w	800ce84 <_dtoa_r+0x87c>
 800cd20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cd24:	9e07      	ldr	r6, [sp, #28]
 800cd26:	9d04      	ldr	r5, [sp, #16]
 800cd28:	9a04      	ldr	r2, [sp, #16]
 800cd2a:	441a      	add	r2, r3
 800cd2c:	9204      	str	r2, [sp, #16]
 800cd2e:	9a05      	ldr	r2, [sp, #20]
 800cd30:	2101      	movs	r1, #1
 800cd32:	441a      	add	r2, r3
 800cd34:	4620      	mov	r0, r4
 800cd36:	9205      	str	r2, [sp, #20]
 800cd38:	f000 fc52 	bl	800d5e0 <__i2b>
 800cd3c:	4607      	mov	r7, r0
 800cd3e:	2d00      	cmp	r5, #0
 800cd40:	dd0c      	ble.n	800cd5c <_dtoa_r+0x754>
 800cd42:	9b05      	ldr	r3, [sp, #20]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	dd09      	ble.n	800cd5c <_dtoa_r+0x754>
 800cd48:	42ab      	cmp	r3, r5
 800cd4a:	9a04      	ldr	r2, [sp, #16]
 800cd4c:	bfa8      	it	ge
 800cd4e:	462b      	movge	r3, r5
 800cd50:	1ad2      	subs	r2, r2, r3
 800cd52:	9204      	str	r2, [sp, #16]
 800cd54:	9a05      	ldr	r2, [sp, #20]
 800cd56:	1aed      	subs	r5, r5, r3
 800cd58:	1ad3      	subs	r3, r2, r3
 800cd5a:	9305      	str	r3, [sp, #20]
 800cd5c:	9b07      	ldr	r3, [sp, #28]
 800cd5e:	b31b      	cbz	r3, 800cda8 <_dtoa_r+0x7a0>
 800cd60:	9b08      	ldr	r3, [sp, #32]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	f000 80af 	beq.w	800cec6 <_dtoa_r+0x8be>
 800cd68:	2e00      	cmp	r6, #0
 800cd6a:	dd13      	ble.n	800cd94 <_dtoa_r+0x78c>
 800cd6c:	4639      	mov	r1, r7
 800cd6e:	4632      	mov	r2, r6
 800cd70:	4620      	mov	r0, r4
 800cd72:	f000 fcf5 	bl	800d760 <__pow5mult>
 800cd76:	ee18 2a10 	vmov	r2, s16
 800cd7a:	4601      	mov	r1, r0
 800cd7c:	4607      	mov	r7, r0
 800cd7e:	4620      	mov	r0, r4
 800cd80:	f000 fc44 	bl	800d60c <__multiply>
 800cd84:	ee18 1a10 	vmov	r1, s16
 800cd88:	4680      	mov	r8, r0
 800cd8a:	4620      	mov	r0, r4
 800cd8c:	f000 fb70 	bl	800d470 <_Bfree>
 800cd90:	ee08 8a10 	vmov	s16, r8
 800cd94:	9b07      	ldr	r3, [sp, #28]
 800cd96:	1b9a      	subs	r2, r3, r6
 800cd98:	d006      	beq.n	800cda8 <_dtoa_r+0x7a0>
 800cd9a:	ee18 1a10 	vmov	r1, s16
 800cd9e:	4620      	mov	r0, r4
 800cda0:	f000 fcde 	bl	800d760 <__pow5mult>
 800cda4:	ee08 0a10 	vmov	s16, r0
 800cda8:	2101      	movs	r1, #1
 800cdaa:	4620      	mov	r0, r4
 800cdac:	f000 fc18 	bl	800d5e0 <__i2b>
 800cdb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	4606      	mov	r6, r0
 800cdb6:	f340 8088 	ble.w	800ceca <_dtoa_r+0x8c2>
 800cdba:	461a      	mov	r2, r3
 800cdbc:	4601      	mov	r1, r0
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	f000 fcce 	bl	800d760 <__pow5mult>
 800cdc4:	9b06      	ldr	r3, [sp, #24]
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	4606      	mov	r6, r0
 800cdca:	f340 8081 	ble.w	800ced0 <_dtoa_r+0x8c8>
 800cdce:	f04f 0800 	mov.w	r8, #0
 800cdd2:	6933      	ldr	r3, [r6, #16]
 800cdd4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cdd8:	6918      	ldr	r0, [r3, #16]
 800cdda:	f000 fbb1 	bl	800d540 <__hi0bits>
 800cdde:	f1c0 0020 	rsb	r0, r0, #32
 800cde2:	9b05      	ldr	r3, [sp, #20]
 800cde4:	4418      	add	r0, r3
 800cde6:	f010 001f 	ands.w	r0, r0, #31
 800cdea:	f000 8092 	beq.w	800cf12 <_dtoa_r+0x90a>
 800cdee:	f1c0 0320 	rsb	r3, r0, #32
 800cdf2:	2b04      	cmp	r3, #4
 800cdf4:	f340 808a 	ble.w	800cf0c <_dtoa_r+0x904>
 800cdf8:	f1c0 001c 	rsb	r0, r0, #28
 800cdfc:	9b04      	ldr	r3, [sp, #16]
 800cdfe:	4403      	add	r3, r0
 800ce00:	9304      	str	r3, [sp, #16]
 800ce02:	9b05      	ldr	r3, [sp, #20]
 800ce04:	4403      	add	r3, r0
 800ce06:	4405      	add	r5, r0
 800ce08:	9305      	str	r3, [sp, #20]
 800ce0a:	9b04      	ldr	r3, [sp, #16]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	dd07      	ble.n	800ce20 <_dtoa_r+0x818>
 800ce10:	ee18 1a10 	vmov	r1, s16
 800ce14:	461a      	mov	r2, r3
 800ce16:	4620      	mov	r0, r4
 800ce18:	f000 fcfc 	bl	800d814 <__lshift>
 800ce1c:	ee08 0a10 	vmov	s16, r0
 800ce20:	9b05      	ldr	r3, [sp, #20]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	dd05      	ble.n	800ce32 <_dtoa_r+0x82a>
 800ce26:	4631      	mov	r1, r6
 800ce28:	461a      	mov	r2, r3
 800ce2a:	4620      	mov	r0, r4
 800ce2c:	f000 fcf2 	bl	800d814 <__lshift>
 800ce30:	4606      	mov	r6, r0
 800ce32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d06e      	beq.n	800cf16 <_dtoa_r+0x90e>
 800ce38:	ee18 0a10 	vmov	r0, s16
 800ce3c:	4631      	mov	r1, r6
 800ce3e:	f000 fd59 	bl	800d8f4 <__mcmp>
 800ce42:	2800      	cmp	r0, #0
 800ce44:	da67      	bge.n	800cf16 <_dtoa_r+0x90e>
 800ce46:	9b00      	ldr	r3, [sp, #0]
 800ce48:	3b01      	subs	r3, #1
 800ce4a:	ee18 1a10 	vmov	r1, s16
 800ce4e:	9300      	str	r3, [sp, #0]
 800ce50:	220a      	movs	r2, #10
 800ce52:	2300      	movs	r3, #0
 800ce54:	4620      	mov	r0, r4
 800ce56:	f000 fb2d 	bl	800d4b4 <__multadd>
 800ce5a:	9b08      	ldr	r3, [sp, #32]
 800ce5c:	ee08 0a10 	vmov	s16, r0
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	f000 81b1 	beq.w	800d1c8 <_dtoa_r+0xbc0>
 800ce66:	2300      	movs	r3, #0
 800ce68:	4639      	mov	r1, r7
 800ce6a:	220a      	movs	r2, #10
 800ce6c:	4620      	mov	r0, r4
 800ce6e:	f000 fb21 	bl	800d4b4 <__multadd>
 800ce72:	9b02      	ldr	r3, [sp, #8]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	4607      	mov	r7, r0
 800ce78:	f300 808e 	bgt.w	800cf98 <_dtoa_r+0x990>
 800ce7c:	9b06      	ldr	r3, [sp, #24]
 800ce7e:	2b02      	cmp	r3, #2
 800ce80:	dc51      	bgt.n	800cf26 <_dtoa_r+0x91e>
 800ce82:	e089      	b.n	800cf98 <_dtoa_r+0x990>
 800ce84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ce8a:	e74b      	b.n	800cd24 <_dtoa_r+0x71c>
 800ce8c:	9b03      	ldr	r3, [sp, #12]
 800ce8e:	1e5e      	subs	r6, r3, #1
 800ce90:	9b07      	ldr	r3, [sp, #28]
 800ce92:	42b3      	cmp	r3, r6
 800ce94:	bfbf      	itttt	lt
 800ce96:	9b07      	ldrlt	r3, [sp, #28]
 800ce98:	9607      	strlt	r6, [sp, #28]
 800ce9a:	1af2      	sublt	r2, r6, r3
 800ce9c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ce9e:	bfb6      	itet	lt
 800cea0:	189b      	addlt	r3, r3, r2
 800cea2:	1b9e      	subge	r6, r3, r6
 800cea4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cea6:	9b03      	ldr	r3, [sp, #12]
 800cea8:	bfb8      	it	lt
 800ceaa:	2600      	movlt	r6, #0
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	bfb7      	itett	lt
 800ceb0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ceb4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ceb8:	1a9d      	sublt	r5, r3, r2
 800ceba:	2300      	movlt	r3, #0
 800cebc:	e734      	b.n	800cd28 <_dtoa_r+0x720>
 800cebe:	9e07      	ldr	r6, [sp, #28]
 800cec0:	9d04      	ldr	r5, [sp, #16]
 800cec2:	9f08      	ldr	r7, [sp, #32]
 800cec4:	e73b      	b.n	800cd3e <_dtoa_r+0x736>
 800cec6:	9a07      	ldr	r2, [sp, #28]
 800cec8:	e767      	b.n	800cd9a <_dtoa_r+0x792>
 800ceca:	9b06      	ldr	r3, [sp, #24]
 800cecc:	2b01      	cmp	r3, #1
 800cece:	dc18      	bgt.n	800cf02 <_dtoa_r+0x8fa>
 800ced0:	f1ba 0f00 	cmp.w	sl, #0
 800ced4:	d115      	bne.n	800cf02 <_dtoa_r+0x8fa>
 800ced6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ceda:	b993      	cbnz	r3, 800cf02 <_dtoa_r+0x8fa>
 800cedc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cee0:	0d1b      	lsrs	r3, r3, #20
 800cee2:	051b      	lsls	r3, r3, #20
 800cee4:	b183      	cbz	r3, 800cf08 <_dtoa_r+0x900>
 800cee6:	9b04      	ldr	r3, [sp, #16]
 800cee8:	3301      	adds	r3, #1
 800ceea:	9304      	str	r3, [sp, #16]
 800ceec:	9b05      	ldr	r3, [sp, #20]
 800ceee:	3301      	adds	r3, #1
 800cef0:	9305      	str	r3, [sp, #20]
 800cef2:	f04f 0801 	mov.w	r8, #1
 800cef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	f47f af6a 	bne.w	800cdd2 <_dtoa_r+0x7ca>
 800cefe:	2001      	movs	r0, #1
 800cf00:	e76f      	b.n	800cde2 <_dtoa_r+0x7da>
 800cf02:	f04f 0800 	mov.w	r8, #0
 800cf06:	e7f6      	b.n	800cef6 <_dtoa_r+0x8ee>
 800cf08:	4698      	mov	r8, r3
 800cf0a:	e7f4      	b.n	800cef6 <_dtoa_r+0x8ee>
 800cf0c:	f43f af7d 	beq.w	800ce0a <_dtoa_r+0x802>
 800cf10:	4618      	mov	r0, r3
 800cf12:	301c      	adds	r0, #28
 800cf14:	e772      	b.n	800cdfc <_dtoa_r+0x7f4>
 800cf16:	9b03      	ldr	r3, [sp, #12]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	dc37      	bgt.n	800cf8c <_dtoa_r+0x984>
 800cf1c:	9b06      	ldr	r3, [sp, #24]
 800cf1e:	2b02      	cmp	r3, #2
 800cf20:	dd34      	ble.n	800cf8c <_dtoa_r+0x984>
 800cf22:	9b03      	ldr	r3, [sp, #12]
 800cf24:	9302      	str	r3, [sp, #8]
 800cf26:	9b02      	ldr	r3, [sp, #8]
 800cf28:	b96b      	cbnz	r3, 800cf46 <_dtoa_r+0x93e>
 800cf2a:	4631      	mov	r1, r6
 800cf2c:	2205      	movs	r2, #5
 800cf2e:	4620      	mov	r0, r4
 800cf30:	f000 fac0 	bl	800d4b4 <__multadd>
 800cf34:	4601      	mov	r1, r0
 800cf36:	4606      	mov	r6, r0
 800cf38:	ee18 0a10 	vmov	r0, s16
 800cf3c:	f000 fcda 	bl	800d8f4 <__mcmp>
 800cf40:	2800      	cmp	r0, #0
 800cf42:	f73f adbb 	bgt.w	800cabc <_dtoa_r+0x4b4>
 800cf46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf48:	9d01      	ldr	r5, [sp, #4]
 800cf4a:	43db      	mvns	r3, r3
 800cf4c:	9300      	str	r3, [sp, #0]
 800cf4e:	f04f 0800 	mov.w	r8, #0
 800cf52:	4631      	mov	r1, r6
 800cf54:	4620      	mov	r0, r4
 800cf56:	f000 fa8b 	bl	800d470 <_Bfree>
 800cf5a:	2f00      	cmp	r7, #0
 800cf5c:	f43f aea4 	beq.w	800cca8 <_dtoa_r+0x6a0>
 800cf60:	f1b8 0f00 	cmp.w	r8, #0
 800cf64:	d005      	beq.n	800cf72 <_dtoa_r+0x96a>
 800cf66:	45b8      	cmp	r8, r7
 800cf68:	d003      	beq.n	800cf72 <_dtoa_r+0x96a>
 800cf6a:	4641      	mov	r1, r8
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	f000 fa7f 	bl	800d470 <_Bfree>
 800cf72:	4639      	mov	r1, r7
 800cf74:	4620      	mov	r0, r4
 800cf76:	f000 fa7b 	bl	800d470 <_Bfree>
 800cf7a:	e695      	b.n	800cca8 <_dtoa_r+0x6a0>
 800cf7c:	2600      	movs	r6, #0
 800cf7e:	4637      	mov	r7, r6
 800cf80:	e7e1      	b.n	800cf46 <_dtoa_r+0x93e>
 800cf82:	9700      	str	r7, [sp, #0]
 800cf84:	4637      	mov	r7, r6
 800cf86:	e599      	b.n	800cabc <_dtoa_r+0x4b4>
 800cf88:	40240000 	.word	0x40240000
 800cf8c:	9b08      	ldr	r3, [sp, #32]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	f000 80ca 	beq.w	800d128 <_dtoa_r+0xb20>
 800cf94:	9b03      	ldr	r3, [sp, #12]
 800cf96:	9302      	str	r3, [sp, #8]
 800cf98:	2d00      	cmp	r5, #0
 800cf9a:	dd05      	ble.n	800cfa8 <_dtoa_r+0x9a0>
 800cf9c:	4639      	mov	r1, r7
 800cf9e:	462a      	mov	r2, r5
 800cfa0:	4620      	mov	r0, r4
 800cfa2:	f000 fc37 	bl	800d814 <__lshift>
 800cfa6:	4607      	mov	r7, r0
 800cfa8:	f1b8 0f00 	cmp.w	r8, #0
 800cfac:	d05b      	beq.n	800d066 <_dtoa_r+0xa5e>
 800cfae:	6879      	ldr	r1, [r7, #4]
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	f000 fa1d 	bl	800d3f0 <_Balloc>
 800cfb6:	4605      	mov	r5, r0
 800cfb8:	b928      	cbnz	r0, 800cfc6 <_dtoa_r+0x9be>
 800cfba:	4b87      	ldr	r3, [pc, #540]	; (800d1d8 <_dtoa_r+0xbd0>)
 800cfbc:	4602      	mov	r2, r0
 800cfbe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cfc2:	f7ff bb3b 	b.w	800c63c <_dtoa_r+0x34>
 800cfc6:	693a      	ldr	r2, [r7, #16]
 800cfc8:	3202      	adds	r2, #2
 800cfca:	0092      	lsls	r2, r2, #2
 800cfcc:	f107 010c 	add.w	r1, r7, #12
 800cfd0:	300c      	adds	r0, #12
 800cfd2:	f7fe fdd1 	bl	800bb78 <memcpy>
 800cfd6:	2201      	movs	r2, #1
 800cfd8:	4629      	mov	r1, r5
 800cfda:	4620      	mov	r0, r4
 800cfdc:	f000 fc1a 	bl	800d814 <__lshift>
 800cfe0:	9b01      	ldr	r3, [sp, #4]
 800cfe2:	f103 0901 	add.w	r9, r3, #1
 800cfe6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cfea:	4413      	add	r3, r2
 800cfec:	9305      	str	r3, [sp, #20]
 800cfee:	f00a 0301 	and.w	r3, sl, #1
 800cff2:	46b8      	mov	r8, r7
 800cff4:	9304      	str	r3, [sp, #16]
 800cff6:	4607      	mov	r7, r0
 800cff8:	4631      	mov	r1, r6
 800cffa:	ee18 0a10 	vmov	r0, s16
 800cffe:	f7ff fa75 	bl	800c4ec <quorem>
 800d002:	4641      	mov	r1, r8
 800d004:	9002      	str	r0, [sp, #8]
 800d006:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d00a:	ee18 0a10 	vmov	r0, s16
 800d00e:	f000 fc71 	bl	800d8f4 <__mcmp>
 800d012:	463a      	mov	r2, r7
 800d014:	9003      	str	r0, [sp, #12]
 800d016:	4631      	mov	r1, r6
 800d018:	4620      	mov	r0, r4
 800d01a:	f000 fc87 	bl	800d92c <__mdiff>
 800d01e:	68c2      	ldr	r2, [r0, #12]
 800d020:	f109 3bff 	add.w	fp, r9, #4294967295
 800d024:	4605      	mov	r5, r0
 800d026:	bb02      	cbnz	r2, 800d06a <_dtoa_r+0xa62>
 800d028:	4601      	mov	r1, r0
 800d02a:	ee18 0a10 	vmov	r0, s16
 800d02e:	f000 fc61 	bl	800d8f4 <__mcmp>
 800d032:	4602      	mov	r2, r0
 800d034:	4629      	mov	r1, r5
 800d036:	4620      	mov	r0, r4
 800d038:	9207      	str	r2, [sp, #28]
 800d03a:	f000 fa19 	bl	800d470 <_Bfree>
 800d03e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d042:	ea43 0102 	orr.w	r1, r3, r2
 800d046:	9b04      	ldr	r3, [sp, #16]
 800d048:	430b      	orrs	r3, r1
 800d04a:	464d      	mov	r5, r9
 800d04c:	d10f      	bne.n	800d06e <_dtoa_r+0xa66>
 800d04e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d052:	d02a      	beq.n	800d0aa <_dtoa_r+0xaa2>
 800d054:	9b03      	ldr	r3, [sp, #12]
 800d056:	2b00      	cmp	r3, #0
 800d058:	dd02      	ble.n	800d060 <_dtoa_r+0xa58>
 800d05a:	9b02      	ldr	r3, [sp, #8]
 800d05c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d060:	f88b a000 	strb.w	sl, [fp]
 800d064:	e775      	b.n	800cf52 <_dtoa_r+0x94a>
 800d066:	4638      	mov	r0, r7
 800d068:	e7ba      	b.n	800cfe0 <_dtoa_r+0x9d8>
 800d06a:	2201      	movs	r2, #1
 800d06c:	e7e2      	b.n	800d034 <_dtoa_r+0xa2c>
 800d06e:	9b03      	ldr	r3, [sp, #12]
 800d070:	2b00      	cmp	r3, #0
 800d072:	db04      	blt.n	800d07e <_dtoa_r+0xa76>
 800d074:	9906      	ldr	r1, [sp, #24]
 800d076:	430b      	orrs	r3, r1
 800d078:	9904      	ldr	r1, [sp, #16]
 800d07a:	430b      	orrs	r3, r1
 800d07c:	d122      	bne.n	800d0c4 <_dtoa_r+0xabc>
 800d07e:	2a00      	cmp	r2, #0
 800d080:	ddee      	ble.n	800d060 <_dtoa_r+0xa58>
 800d082:	ee18 1a10 	vmov	r1, s16
 800d086:	2201      	movs	r2, #1
 800d088:	4620      	mov	r0, r4
 800d08a:	f000 fbc3 	bl	800d814 <__lshift>
 800d08e:	4631      	mov	r1, r6
 800d090:	ee08 0a10 	vmov	s16, r0
 800d094:	f000 fc2e 	bl	800d8f4 <__mcmp>
 800d098:	2800      	cmp	r0, #0
 800d09a:	dc03      	bgt.n	800d0a4 <_dtoa_r+0xa9c>
 800d09c:	d1e0      	bne.n	800d060 <_dtoa_r+0xa58>
 800d09e:	f01a 0f01 	tst.w	sl, #1
 800d0a2:	d0dd      	beq.n	800d060 <_dtoa_r+0xa58>
 800d0a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d0a8:	d1d7      	bne.n	800d05a <_dtoa_r+0xa52>
 800d0aa:	2339      	movs	r3, #57	; 0x39
 800d0ac:	f88b 3000 	strb.w	r3, [fp]
 800d0b0:	462b      	mov	r3, r5
 800d0b2:	461d      	mov	r5, r3
 800d0b4:	3b01      	subs	r3, #1
 800d0b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d0ba:	2a39      	cmp	r2, #57	; 0x39
 800d0bc:	d071      	beq.n	800d1a2 <_dtoa_r+0xb9a>
 800d0be:	3201      	adds	r2, #1
 800d0c0:	701a      	strb	r2, [r3, #0]
 800d0c2:	e746      	b.n	800cf52 <_dtoa_r+0x94a>
 800d0c4:	2a00      	cmp	r2, #0
 800d0c6:	dd07      	ble.n	800d0d8 <_dtoa_r+0xad0>
 800d0c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d0cc:	d0ed      	beq.n	800d0aa <_dtoa_r+0xaa2>
 800d0ce:	f10a 0301 	add.w	r3, sl, #1
 800d0d2:	f88b 3000 	strb.w	r3, [fp]
 800d0d6:	e73c      	b.n	800cf52 <_dtoa_r+0x94a>
 800d0d8:	9b05      	ldr	r3, [sp, #20]
 800d0da:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d0de:	4599      	cmp	r9, r3
 800d0e0:	d047      	beq.n	800d172 <_dtoa_r+0xb6a>
 800d0e2:	ee18 1a10 	vmov	r1, s16
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	220a      	movs	r2, #10
 800d0ea:	4620      	mov	r0, r4
 800d0ec:	f000 f9e2 	bl	800d4b4 <__multadd>
 800d0f0:	45b8      	cmp	r8, r7
 800d0f2:	ee08 0a10 	vmov	s16, r0
 800d0f6:	f04f 0300 	mov.w	r3, #0
 800d0fa:	f04f 020a 	mov.w	r2, #10
 800d0fe:	4641      	mov	r1, r8
 800d100:	4620      	mov	r0, r4
 800d102:	d106      	bne.n	800d112 <_dtoa_r+0xb0a>
 800d104:	f000 f9d6 	bl	800d4b4 <__multadd>
 800d108:	4680      	mov	r8, r0
 800d10a:	4607      	mov	r7, r0
 800d10c:	f109 0901 	add.w	r9, r9, #1
 800d110:	e772      	b.n	800cff8 <_dtoa_r+0x9f0>
 800d112:	f000 f9cf 	bl	800d4b4 <__multadd>
 800d116:	4639      	mov	r1, r7
 800d118:	4680      	mov	r8, r0
 800d11a:	2300      	movs	r3, #0
 800d11c:	220a      	movs	r2, #10
 800d11e:	4620      	mov	r0, r4
 800d120:	f000 f9c8 	bl	800d4b4 <__multadd>
 800d124:	4607      	mov	r7, r0
 800d126:	e7f1      	b.n	800d10c <_dtoa_r+0xb04>
 800d128:	9b03      	ldr	r3, [sp, #12]
 800d12a:	9302      	str	r3, [sp, #8]
 800d12c:	9d01      	ldr	r5, [sp, #4]
 800d12e:	ee18 0a10 	vmov	r0, s16
 800d132:	4631      	mov	r1, r6
 800d134:	f7ff f9da 	bl	800c4ec <quorem>
 800d138:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d13c:	9b01      	ldr	r3, [sp, #4]
 800d13e:	f805 ab01 	strb.w	sl, [r5], #1
 800d142:	1aea      	subs	r2, r5, r3
 800d144:	9b02      	ldr	r3, [sp, #8]
 800d146:	4293      	cmp	r3, r2
 800d148:	dd09      	ble.n	800d15e <_dtoa_r+0xb56>
 800d14a:	ee18 1a10 	vmov	r1, s16
 800d14e:	2300      	movs	r3, #0
 800d150:	220a      	movs	r2, #10
 800d152:	4620      	mov	r0, r4
 800d154:	f000 f9ae 	bl	800d4b4 <__multadd>
 800d158:	ee08 0a10 	vmov	s16, r0
 800d15c:	e7e7      	b.n	800d12e <_dtoa_r+0xb26>
 800d15e:	9b02      	ldr	r3, [sp, #8]
 800d160:	2b00      	cmp	r3, #0
 800d162:	bfc8      	it	gt
 800d164:	461d      	movgt	r5, r3
 800d166:	9b01      	ldr	r3, [sp, #4]
 800d168:	bfd8      	it	le
 800d16a:	2501      	movle	r5, #1
 800d16c:	441d      	add	r5, r3
 800d16e:	f04f 0800 	mov.w	r8, #0
 800d172:	ee18 1a10 	vmov	r1, s16
 800d176:	2201      	movs	r2, #1
 800d178:	4620      	mov	r0, r4
 800d17a:	f000 fb4b 	bl	800d814 <__lshift>
 800d17e:	4631      	mov	r1, r6
 800d180:	ee08 0a10 	vmov	s16, r0
 800d184:	f000 fbb6 	bl	800d8f4 <__mcmp>
 800d188:	2800      	cmp	r0, #0
 800d18a:	dc91      	bgt.n	800d0b0 <_dtoa_r+0xaa8>
 800d18c:	d102      	bne.n	800d194 <_dtoa_r+0xb8c>
 800d18e:	f01a 0f01 	tst.w	sl, #1
 800d192:	d18d      	bne.n	800d0b0 <_dtoa_r+0xaa8>
 800d194:	462b      	mov	r3, r5
 800d196:	461d      	mov	r5, r3
 800d198:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d19c:	2a30      	cmp	r2, #48	; 0x30
 800d19e:	d0fa      	beq.n	800d196 <_dtoa_r+0xb8e>
 800d1a0:	e6d7      	b.n	800cf52 <_dtoa_r+0x94a>
 800d1a2:	9a01      	ldr	r2, [sp, #4]
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d184      	bne.n	800d0b2 <_dtoa_r+0xaaa>
 800d1a8:	9b00      	ldr	r3, [sp, #0]
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	9300      	str	r3, [sp, #0]
 800d1ae:	2331      	movs	r3, #49	; 0x31
 800d1b0:	7013      	strb	r3, [r2, #0]
 800d1b2:	e6ce      	b.n	800cf52 <_dtoa_r+0x94a>
 800d1b4:	4b09      	ldr	r3, [pc, #36]	; (800d1dc <_dtoa_r+0xbd4>)
 800d1b6:	f7ff ba95 	b.w	800c6e4 <_dtoa_r+0xdc>
 800d1ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	f47f aa6e 	bne.w	800c69e <_dtoa_r+0x96>
 800d1c2:	4b07      	ldr	r3, [pc, #28]	; (800d1e0 <_dtoa_r+0xbd8>)
 800d1c4:	f7ff ba8e 	b.w	800c6e4 <_dtoa_r+0xdc>
 800d1c8:	9b02      	ldr	r3, [sp, #8]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	dcae      	bgt.n	800d12c <_dtoa_r+0xb24>
 800d1ce:	9b06      	ldr	r3, [sp, #24]
 800d1d0:	2b02      	cmp	r3, #2
 800d1d2:	f73f aea8 	bgt.w	800cf26 <_dtoa_r+0x91e>
 800d1d6:	e7a9      	b.n	800d12c <_dtoa_r+0xb24>
 800d1d8:	0800f5d7 	.word	0x0800f5d7
 800d1dc:	0800f534 	.word	0x0800f534
 800d1e0:	0800f558 	.word	0x0800f558

0800d1e4 <std>:
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	b510      	push	{r4, lr}
 800d1e8:	4604      	mov	r4, r0
 800d1ea:	e9c0 3300 	strd	r3, r3, [r0]
 800d1ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d1f2:	6083      	str	r3, [r0, #8]
 800d1f4:	8181      	strh	r1, [r0, #12]
 800d1f6:	6643      	str	r3, [r0, #100]	; 0x64
 800d1f8:	81c2      	strh	r2, [r0, #14]
 800d1fa:	6183      	str	r3, [r0, #24]
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	2208      	movs	r2, #8
 800d200:	305c      	adds	r0, #92	; 0x5c
 800d202:	f7fe fce1 	bl	800bbc8 <memset>
 800d206:	4b05      	ldr	r3, [pc, #20]	; (800d21c <std+0x38>)
 800d208:	6263      	str	r3, [r4, #36]	; 0x24
 800d20a:	4b05      	ldr	r3, [pc, #20]	; (800d220 <std+0x3c>)
 800d20c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d20e:	4b05      	ldr	r3, [pc, #20]	; (800d224 <std+0x40>)
 800d210:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d212:	4b05      	ldr	r3, [pc, #20]	; (800d228 <std+0x44>)
 800d214:	6224      	str	r4, [r4, #32]
 800d216:	6323      	str	r3, [r4, #48]	; 0x30
 800d218:	bd10      	pop	{r4, pc}
 800d21a:	bf00      	nop
 800d21c:	0800e271 	.word	0x0800e271
 800d220:	0800e293 	.word	0x0800e293
 800d224:	0800e2cb 	.word	0x0800e2cb
 800d228:	0800e2ef 	.word	0x0800e2ef

0800d22c <_cleanup_r>:
 800d22c:	4901      	ldr	r1, [pc, #4]	; (800d234 <_cleanup_r+0x8>)
 800d22e:	f000 b8af 	b.w	800d390 <_fwalk_reent>
 800d232:	bf00      	nop
 800d234:	0800e605 	.word	0x0800e605

0800d238 <__sfmoreglue>:
 800d238:	b570      	push	{r4, r5, r6, lr}
 800d23a:	2268      	movs	r2, #104	; 0x68
 800d23c:	1e4d      	subs	r5, r1, #1
 800d23e:	4355      	muls	r5, r2
 800d240:	460e      	mov	r6, r1
 800d242:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d246:	f000 fcd9 	bl	800dbfc <_malloc_r>
 800d24a:	4604      	mov	r4, r0
 800d24c:	b140      	cbz	r0, 800d260 <__sfmoreglue+0x28>
 800d24e:	2100      	movs	r1, #0
 800d250:	e9c0 1600 	strd	r1, r6, [r0]
 800d254:	300c      	adds	r0, #12
 800d256:	60a0      	str	r0, [r4, #8]
 800d258:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d25c:	f7fe fcb4 	bl	800bbc8 <memset>
 800d260:	4620      	mov	r0, r4
 800d262:	bd70      	pop	{r4, r5, r6, pc}

0800d264 <__sfp_lock_acquire>:
 800d264:	4801      	ldr	r0, [pc, #4]	; (800d26c <__sfp_lock_acquire+0x8>)
 800d266:	f000 b8b8 	b.w	800d3da <__retarget_lock_acquire_recursive>
 800d26a:	bf00      	nop
 800d26c:	20000ba9 	.word	0x20000ba9

0800d270 <__sfp_lock_release>:
 800d270:	4801      	ldr	r0, [pc, #4]	; (800d278 <__sfp_lock_release+0x8>)
 800d272:	f000 b8b3 	b.w	800d3dc <__retarget_lock_release_recursive>
 800d276:	bf00      	nop
 800d278:	20000ba9 	.word	0x20000ba9

0800d27c <__sinit_lock_acquire>:
 800d27c:	4801      	ldr	r0, [pc, #4]	; (800d284 <__sinit_lock_acquire+0x8>)
 800d27e:	f000 b8ac 	b.w	800d3da <__retarget_lock_acquire_recursive>
 800d282:	bf00      	nop
 800d284:	20000baa 	.word	0x20000baa

0800d288 <__sinit_lock_release>:
 800d288:	4801      	ldr	r0, [pc, #4]	; (800d290 <__sinit_lock_release+0x8>)
 800d28a:	f000 b8a7 	b.w	800d3dc <__retarget_lock_release_recursive>
 800d28e:	bf00      	nop
 800d290:	20000baa 	.word	0x20000baa

0800d294 <__sinit>:
 800d294:	b510      	push	{r4, lr}
 800d296:	4604      	mov	r4, r0
 800d298:	f7ff fff0 	bl	800d27c <__sinit_lock_acquire>
 800d29c:	69a3      	ldr	r3, [r4, #24]
 800d29e:	b11b      	cbz	r3, 800d2a8 <__sinit+0x14>
 800d2a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2a4:	f7ff bff0 	b.w	800d288 <__sinit_lock_release>
 800d2a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d2ac:	6523      	str	r3, [r4, #80]	; 0x50
 800d2ae:	4b13      	ldr	r3, [pc, #76]	; (800d2fc <__sinit+0x68>)
 800d2b0:	4a13      	ldr	r2, [pc, #76]	; (800d300 <__sinit+0x6c>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800d2b6:	42a3      	cmp	r3, r4
 800d2b8:	bf04      	itt	eq
 800d2ba:	2301      	moveq	r3, #1
 800d2bc:	61a3      	streq	r3, [r4, #24]
 800d2be:	4620      	mov	r0, r4
 800d2c0:	f000 f820 	bl	800d304 <__sfp>
 800d2c4:	6060      	str	r0, [r4, #4]
 800d2c6:	4620      	mov	r0, r4
 800d2c8:	f000 f81c 	bl	800d304 <__sfp>
 800d2cc:	60a0      	str	r0, [r4, #8]
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	f000 f818 	bl	800d304 <__sfp>
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	60e0      	str	r0, [r4, #12]
 800d2d8:	2104      	movs	r1, #4
 800d2da:	6860      	ldr	r0, [r4, #4]
 800d2dc:	f7ff ff82 	bl	800d1e4 <std>
 800d2e0:	68a0      	ldr	r0, [r4, #8]
 800d2e2:	2201      	movs	r2, #1
 800d2e4:	2109      	movs	r1, #9
 800d2e6:	f7ff ff7d 	bl	800d1e4 <std>
 800d2ea:	68e0      	ldr	r0, [r4, #12]
 800d2ec:	2202      	movs	r2, #2
 800d2ee:	2112      	movs	r1, #18
 800d2f0:	f7ff ff78 	bl	800d1e4 <std>
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	61a3      	str	r3, [r4, #24]
 800d2f8:	e7d2      	b.n	800d2a0 <__sinit+0xc>
 800d2fa:	bf00      	nop
 800d2fc:	0800f520 	.word	0x0800f520
 800d300:	0800d22d 	.word	0x0800d22d

0800d304 <__sfp>:
 800d304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d306:	4607      	mov	r7, r0
 800d308:	f7ff ffac 	bl	800d264 <__sfp_lock_acquire>
 800d30c:	4b1e      	ldr	r3, [pc, #120]	; (800d388 <__sfp+0x84>)
 800d30e:	681e      	ldr	r6, [r3, #0]
 800d310:	69b3      	ldr	r3, [r6, #24]
 800d312:	b913      	cbnz	r3, 800d31a <__sfp+0x16>
 800d314:	4630      	mov	r0, r6
 800d316:	f7ff ffbd 	bl	800d294 <__sinit>
 800d31a:	3648      	adds	r6, #72	; 0x48
 800d31c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d320:	3b01      	subs	r3, #1
 800d322:	d503      	bpl.n	800d32c <__sfp+0x28>
 800d324:	6833      	ldr	r3, [r6, #0]
 800d326:	b30b      	cbz	r3, 800d36c <__sfp+0x68>
 800d328:	6836      	ldr	r6, [r6, #0]
 800d32a:	e7f7      	b.n	800d31c <__sfp+0x18>
 800d32c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d330:	b9d5      	cbnz	r5, 800d368 <__sfp+0x64>
 800d332:	4b16      	ldr	r3, [pc, #88]	; (800d38c <__sfp+0x88>)
 800d334:	60e3      	str	r3, [r4, #12]
 800d336:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d33a:	6665      	str	r5, [r4, #100]	; 0x64
 800d33c:	f000 f84c 	bl	800d3d8 <__retarget_lock_init_recursive>
 800d340:	f7ff ff96 	bl	800d270 <__sfp_lock_release>
 800d344:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d348:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d34c:	6025      	str	r5, [r4, #0]
 800d34e:	61a5      	str	r5, [r4, #24]
 800d350:	2208      	movs	r2, #8
 800d352:	4629      	mov	r1, r5
 800d354:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d358:	f7fe fc36 	bl	800bbc8 <memset>
 800d35c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d360:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d364:	4620      	mov	r0, r4
 800d366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d368:	3468      	adds	r4, #104	; 0x68
 800d36a:	e7d9      	b.n	800d320 <__sfp+0x1c>
 800d36c:	2104      	movs	r1, #4
 800d36e:	4638      	mov	r0, r7
 800d370:	f7ff ff62 	bl	800d238 <__sfmoreglue>
 800d374:	4604      	mov	r4, r0
 800d376:	6030      	str	r0, [r6, #0]
 800d378:	2800      	cmp	r0, #0
 800d37a:	d1d5      	bne.n	800d328 <__sfp+0x24>
 800d37c:	f7ff ff78 	bl	800d270 <__sfp_lock_release>
 800d380:	230c      	movs	r3, #12
 800d382:	603b      	str	r3, [r7, #0]
 800d384:	e7ee      	b.n	800d364 <__sfp+0x60>
 800d386:	bf00      	nop
 800d388:	0800f520 	.word	0x0800f520
 800d38c:	ffff0001 	.word	0xffff0001

0800d390 <_fwalk_reent>:
 800d390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d394:	4606      	mov	r6, r0
 800d396:	4688      	mov	r8, r1
 800d398:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d39c:	2700      	movs	r7, #0
 800d39e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d3a2:	f1b9 0901 	subs.w	r9, r9, #1
 800d3a6:	d505      	bpl.n	800d3b4 <_fwalk_reent+0x24>
 800d3a8:	6824      	ldr	r4, [r4, #0]
 800d3aa:	2c00      	cmp	r4, #0
 800d3ac:	d1f7      	bne.n	800d39e <_fwalk_reent+0xe>
 800d3ae:	4638      	mov	r0, r7
 800d3b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3b4:	89ab      	ldrh	r3, [r5, #12]
 800d3b6:	2b01      	cmp	r3, #1
 800d3b8:	d907      	bls.n	800d3ca <_fwalk_reent+0x3a>
 800d3ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d3be:	3301      	adds	r3, #1
 800d3c0:	d003      	beq.n	800d3ca <_fwalk_reent+0x3a>
 800d3c2:	4629      	mov	r1, r5
 800d3c4:	4630      	mov	r0, r6
 800d3c6:	47c0      	blx	r8
 800d3c8:	4307      	orrs	r7, r0
 800d3ca:	3568      	adds	r5, #104	; 0x68
 800d3cc:	e7e9      	b.n	800d3a2 <_fwalk_reent+0x12>
	...

0800d3d0 <_localeconv_r>:
 800d3d0:	4800      	ldr	r0, [pc, #0]	; (800d3d4 <_localeconv_r+0x4>)
 800d3d2:	4770      	bx	lr
 800d3d4:	2000017c 	.word	0x2000017c

0800d3d8 <__retarget_lock_init_recursive>:
 800d3d8:	4770      	bx	lr

0800d3da <__retarget_lock_acquire_recursive>:
 800d3da:	4770      	bx	lr

0800d3dc <__retarget_lock_release_recursive>:
 800d3dc:	4770      	bx	lr
	...

0800d3e0 <malloc>:
 800d3e0:	4b02      	ldr	r3, [pc, #8]	; (800d3ec <malloc+0xc>)
 800d3e2:	4601      	mov	r1, r0
 800d3e4:	6818      	ldr	r0, [r3, #0]
 800d3e6:	f000 bc09 	b.w	800dbfc <_malloc_r>
 800d3ea:	bf00      	nop
 800d3ec:	20000028 	.word	0x20000028

0800d3f0 <_Balloc>:
 800d3f0:	b570      	push	{r4, r5, r6, lr}
 800d3f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d3f4:	4604      	mov	r4, r0
 800d3f6:	460d      	mov	r5, r1
 800d3f8:	b976      	cbnz	r6, 800d418 <_Balloc+0x28>
 800d3fa:	2010      	movs	r0, #16
 800d3fc:	f7ff fff0 	bl	800d3e0 <malloc>
 800d400:	4602      	mov	r2, r0
 800d402:	6260      	str	r0, [r4, #36]	; 0x24
 800d404:	b920      	cbnz	r0, 800d410 <_Balloc+0x20>
 800d406:	4b18      	ldr	r3, [pc, #96]	; (800d468 <_Balloc+0x78>)
 800d408:	4818      	ldr	r0, [pc, #96]	; (800d46c <_Balloc+0x7c>)
 800d40a:	2166      	movs	r1, #102	; 0x66
 800d40c:	f001 f846 	bl	800e49c <__assert_func>
 800d410:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d414:	6006      	str	r6, [r0, #0]
 800d416:	60c6      	str	r6, [r0, #12]
 800d418:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d41a:	68f3      	ldr	r3, [r6, #12]
 800d41c:	b183      	cbz	r3, 800d440 <_Balloc+0x50>
 800d41e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d420:	68db      	ldr	r3, [r3, #12]
 800d422:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d426:	b9b8      	cbnz	r0, 800d458 <_Balloc+0x68>
 800d428:	2101      	movs	r1, #1
 800d42a:	fa01 f605 	lsl.w	r6, r1, r5
 800d42e:	1d72      	adds	r2, r6, #5
 800d430:	0092      	lsls	r2, r2, #2
 800d432:	4620      	mov	r0, r4
 800d434:	f000 fb60 	bl	800daf8 <_calloc_r>
 800d438:	b160      	cbz	r0, 800d454 <_Balloc+0x64>
 800d43a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d43e:	e00e      	b.n	800d45e <_Balloc+0x6e>
 800d440:	2221      	movs	r2, #33	; 0x21
 800d442:	2104      	movs	r1, #4
 800d444:	4620      	mov	r0, r4
 800d446:	f000 fb57 	bl	800daf8 <_calloc_r>
 800d44a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d44c:	60f0      	str	r0, [r6, #12]
 800d44e:	68db      	ldr	r3, [r3, #12]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d1e4      	bne.n	800d41e <_Balloc+0x2e>
 800d454:	2000      	movs	r0, #0
 800d456:	bd70      	pop	{r4, r5, r6, pc}
 800d458:	6802      	ldr	r2, [r0, #0]
 800d45a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d45e:	2300      	movs	r3, #0
 800d460:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d464:	e7f7      	b.n	800d456 <_Balloc+0x66>
 800d466:	bf00      	nop
 800d468:	0800f565 	.word	0x0800f565
 800d46c:	0800f648 	.word	0x0800f648

0800d470 <_Bfree>:
 800d470:	b570      	push	{r4, r5, r6, lr}
 800d472:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d474:	4605      	mov	r5, r0
 800d476:	460c      	mov	r4, r1
 800d478:	b976      	cbnz	r6, 800d498 <_Bfree+0x28>
 800d47a:	2010      	movs	r0, #16
 800d47c:	f7ff ffb0 	bl	800d3e0 <malloc>
 800d480:	4602      	mov	r2, r0
 800d482:	6268      	str	r0, [r5, #36]	; 0x24
 800d484:	b920      	cbnz	r0, 800d490 <_Bfree+0x20>
 800d486:	4b09      	ldr	r3, [pc, #36]	; (800d4ac <_Bfree+0x3c>)
 800d488:	4809      	ldr	r0, [pc, #36]	; (800d4b0 <_Bfree+0x40>)
 800d48a:	218a      	movs	r1, #138	; 0x8a
 800d48c:	f001 f806 	bl	800e49c <__assert_func>
 800d490:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d494:	6006      	str	r6, [r0, #0]
 800d496:	60c6      	str	r6, [r0, #12]
 800d498:	b13c      	cbz	r4, 800d4aa <_Bfree+0x3a>
 800d49a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d49c:	6862      	ldr	r2, [r4, #4]
 800d49e:	68db      	ldr	r3, [r3, #12]
 800d4a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d4a4:	6021      	str	r1, [r4, #0]
 800d4a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d4aa:	bd70      	pop	{r4, r5, r6, pc}
 800d4ac:	0800f565 	.word	0x0800f565
 800d4b0:	0800f648 	.word	0x0800f648

0800d4b4 <__multadd>:
 800d4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4b8:	690d      	ldr	r5, [r1, #16]
 800d4ba:	4607      	mov	r7, r0
 800d4bc:	460c      	mov	r4, r1
 800d4be:	461e      	mov	r6, r3
 800d4c0:	f101 0c14 	add.w	ip, r1, #20
 800d4c4:	2000      	movs	r0, #0
 800d4c6:	f8dc 3000 	ldr.w	r3, [ip]
 800d4ca:	b299      	uxth	r1, r3
 800d4cc:	fb02 6101 	mla	r1, r2, r1, r6
 800d4d0:	0c1e      	lsrs	r6, r3, #16
 800d4d2:	0c0b      	lsrs	r3, r1, #16
 800d4d4:	fb02 3306 	mla	r3, r2, r6, r3
 800d4d8:	b289      	uxth	r1, r1
 800d4da:	3001      	adds	r0, #1
 800d4dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d4e0:	4285      	cmp	r5, r0
 800d4e2:	f84c 1b04 	str.w	r1, [ip], #4
 800d4e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d4ea:	dcec      	bgt.n	800d4c6 <__multadd+0x12>
 800d4ec:	b30e      	cbz	r6, 800d532 <__multadd+0x7e>
 800d4ee:	68a3      	ldr	r3, [r4, #8]
 800d4f0:	42ab      	cmp	r3, r5
 800d4f2:	dc19      	bgt.n	800d528 <__multadd+0x74>
 800d4f4:	6861      	ldr	r1, [r4, #4]
 800d4f6:	4638      	mov	r0, r7
 800d4f8:	3101      	adds	r1, #1
 800d4fa:	f7ff ff79 	bl	800d3f0 <_Balloc>
 800d4fe:	4680      	mov	r8, r0
 800d500:	b928      	cbnz	r0, 800d50e <__multadd+0x5a>
 800d502:	4602      	mov	r2, r0
 800d504:	4b0c      	ldr	r3, [pc, #48]	; (800d538 <__multadd+0x84>)
 800d506:	480d      	ldr	r0, [pc, #52]	; (800d53c <__multadd+0x88>)
 800d508:	21b5      	movs	r1, #181	; 0xb5
 800d50a:	f000 ffc7 	bl	800e49c <__assert_func>
 800d50e:	6922      	ldr	r2, [r4, #16]
 800d510:	3202      	adds	r2, #2
 800d512:	f104 010c 	add.w	r1, r4, #12
 800d516:	0092      	lsls	r2, r2, #2
 800d518:	300c      	adds	r0, #12
 800d51a:	f7fe fb2d 	bl	800bb78 <memcpy>
 800d51e:	4621      	mov	r1, r4
 800d520:	4638      	mov	r0, r7
 800d522:	f7ff ffa5 	bl	800d470 <_Bfree>
 800d526:	4644      	mov	r4, r8
 800d528:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d52c:	3501      	adds	r5, #1
 800d52e:	615e      	str	r6, [r3, #20]
 800d530:	6125      	str	r5, [r4, #16]
 800d532:	4620      	mov	r0, r4
 800d534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d538:	0800f5d7 	.word	0x0800f5d7
 800d53c:	0800f648 	.word	0x0800f648

0800d540 <__hi0bits>:
 800d540:	0c03      	lsrs	r3, r0, #16
 800d542:	041b      	lsls	r3, r3, #16
 800d544:	b9d3      	cbnz	r3, 800d57c <__hi0bits+0x3c>
 800d546:	0400      	lsls	r0, r0, #16
 800d548:	2310      	movs	r3, #16
 800d54a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d54e:	bf04      	itt	eq
 800d550:	0200      	lsleq	r0, r0, #8
 800d552:	3308      	addeq	r3, #8
 800d554:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d558:	bf04      	itt	eq
 800d55a:	0100      	lsleq	r0, r0, #4
 800d55c:	3304      	addeq	r3, #4
 800d55e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d562:	bf04      	itt	eq
 800d564:	0080      	lsleq	r0, r0, #2
 800d566:	3302      	addeq	r3, #2
 800d568:	2800      	cmp	r0, #0
 800d56a:	db05      	blt.n	800d578 <__hi0bits+0x38>
 800d56c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d570:	f103 0301 	add.w	r3, r3, #1
 800d574:	bf08      	it	eq
 800d576:	2320      	moveq	r3, #32
 800d578:	4618      	mov	r0, r3
 800d57a:	4770      	bx	lr
 800d57c:	2300      	movs	r3, #0
 800d57e:	e7e4      	b.n	800d54a <__hi0bits+0xa>

0800d580 <__lo0bits>:
 800d580:	6803      	ldr	r3, [r0, #0]
 800d582:	f013 0207 	ands.w	r2, r3, #7
 800d586:	4601      	mov	r1, r0
 800d588:	d00b      	beq.n	800d5a2 <__lo0bits+0x22>
 800d58a:	07da      	lsls	r2, r3, #31
 800d58c:	d423      	bmi.n	800d5d6 <__lo0bits+0x56>
 800d58e:	0798      	lsls	r0, r3, #30
 800d590:	bf49      	itett	mi
 800d592:	085b      	lsrmi	r3, r3, #1
 800d594:	089b      	lsrpl	r3, r3, #2
 800d596:	2001      	movmi	r0, #1
 800d598:	600b      	strmi	r3, [r1, #0]
 800d59a:	bf5c      	itt	pl
 800d59c:	600b      	strpl	r3, [r1, #0]
 800d59e:	2002      	movpl	r0, #2
 800d5a0:	4770      	bx	lr
 800d5a2:	b298      	uxth	r0, r3
 800d5a4:	b9a8      	cbnz	r0, 800d5d2 <__lo0bits+0x52>
 800d5a6:	0c1b      	lsrs	r3, r3, #16
 800d5a8:	2010      	movs	r0, #16
 800d5aa:	b2da      	uxtb	r2, r3
 800d5ac:	b90a      	cbnz	r2, 800d5b2 <__lo0bits+0x32>
 800d5ae:	3008      	adds	r0, #8
 800d5b0:	0a1b      	lsrs	r3, r3, #8
 800d5b2:	071a      	lsls	r2, r3, #28
 800d5b4:	bf04      	itt	eq
 800d5b6:	091b      	lsreq	r3, r3, #4
 800d5b8:	3004      	addeq	r0, #4
 800d5ba:	079a      	lsls	r2, r3, #30
 800d5bc:	bf04      	itt	eq
 800d5be:	089b      	lsreq	r3, r3, #2
 800d5c0:	3002      	addeq	r0, #2
 800d5c2:	07da      	lsls	r2, r3, #31
 800d5c4:	d403      	bmi.n	800d5ce <__lo0bits+0x4e>
 800d5c6:	085b      	lsrs	r3, r3, #1
 800d5c8:	f100 0001 	add.w	r0, r0, #1
 800d5cc:	d005      	beq.n	800d5da <__lo0bits+0x5a>
 800d5ce:	600b      	str	r3, [r1, #0]
 800d5d0:	4770      	bx	lr
 800d5d2:	4610      	mov	r0, r2
 800d5d4:	e7e9      	b.n	800d5aa <__lo0bits+0x2a>
 800d5d6:	2000      	movs	r0, #0
 800d5d8:	4770      	bx	lr
 800d5da:	2020      	movs	r0, #32
 800d5dc:	4770      	bx	lr
	...

0800d5e0 <__i2b>:
 800d5e0:	b510      	push	{r4, lr}
 800d5e2:	460c      	mov	r4, r1
 800d5e4:	2101      	movs	r1, #1
 800d5e6:	f7ff ff03 	bl	800d3f0 <_Balloc>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	b928      	cbnz	r0, 800d5fa <__i2b+0x1a>
 800d5ee:	4b05      	ldr	r3, [pc, #20]	; (800d604 <__i2b+0x24>)
 800d5f0:	4805      	ldr	r0, [pc, #20]	; (800d608 <__i2b+0x28>)
 800d5f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d5f6:	f000 ff51 	bl	800e49c <__assert_func>
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	6144      	str	r4, [r0, #20]
 800d5fe:	6103      	str	r3, [r0, #16]
 800d600:	bd10      	pop	{r4, pc}
 800d602:	bf00      	nop
 800d604:	0800f5d7 	.word	0x0800f5d7
 800d608:	0800f648 	.word	0x0800f648

0800d60c <__multiply>:
 800d60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d610:	4691      	mov	r9, r2
 800d612:	690a      	ldr	r2, [r1, #16]
 800d614:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d618:	429a      	cmp	r2, r3
 800d61a:	bfb8      	it	lt
 800d61c:	460b      	movlt	r3, r1
 800d61e:	460c      	mov	r4, r1
 800d620:	bfbc      	itt	lt
 800d622:	464c      	movlt	r4, r9
 800d624:	4699      	movlt	r9, r3
 800d626:	6927      	ldr	r7, [r4, #16]
 800d628:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d62c:	68a3      	ldr	r3, [r4, #8]
 800d62e:	6861      	ldr	r1, [r4, #4]
 800d630:	eb07 060a 	add.w	r6, r7, sl
 800d634:	42b3      	cmp	r3, r6
 800d636:	b085      	sub	sp, #20
 800d638:	bfb8      	it	lt
 800d63a:	3101      	addlt	r1, #1
 800d63c:	f7ff fed8 	bl	800d3f0 <_Balloc>
 800d640:	b930      	cbnz	r0, 800d650 <__multiply+0x44>
 800d642:	4602      	mov	r2, r0
 800d644:	4b44      	ldr	r3, [pc, #272]	; (800d758 <__multiply+0x14c>)
 800d646:	4845      	ldr	r0, [pc, #276]	; (800d75c <__multiply+0x150>)
 800d648:	f240 115d 	movw	r1, #349	; 0x15d
 800d64c:	f000 ff26 	bl	800e49c <__assert_func>
 800d650:	f100 0514 	add.w	r5, r0, #20
 800d654:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d658:	462b      	mov	r3, r5
 800d65a:	2200      	movs	r2, #0
 800d65c:	4543      	cmp	r3, r8
 800d65e:	d321      	bcc.n	800d6a4 <__multiply+0x98>
 800d660:	f104 0314 	add.w	r3, r4, #20
 800d664:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d668:	f109 0314 	add.w	r3, r9, #20
 800d66c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d670:	9202      	str	r2, [sp, #8]
 800d672:	1b3a      	subs	r2, r7, r4
 800d674:	3a15      	subs	r2, #21
 800d676:	f022 0203 	bic.w	r2, r2, #3
 800d67a:	3204      	adds	r2, #4
 800d67c:	f104 0115 	add.w	r1, r4, #21
 800d680:	428f      	cmp	r7, r1
 800d682:	bf38      	it	cc
 800d684:	2204      	movcc	r2, #4
 800d686:	9201      	str	r2, [sp, #4]
 800d688:	9a02      	ldr	r2, [sp, #8]
 800d68a:	9303      	str	r3, [sp, #12]
 800d68c:	429a      	cmp	r2, r3
 800d68e:	d80c      	bhi.n	800d6aa <__multiply+0x9e>
 800d690:	2e00      	cmp	r6, #0
 800d692:	dd03      	ble.n	800d69c <__multiply+0x90>
 800d694:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d05a      	beq.n	800d752 <__multiply+0x146>
 800d69c:	6106      	str	r6, [r0, #16]
 800d69e:	b005      	add	sp, #20
 800d6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6a4:	f843 2b04 	str.w	r2, [r3], #4
 800d6a8:	e7d8      	b.n	800d65c <__multiply+0x50>
 800d6aa:	f8b3 a000 	ldrh.w	sl, [r3]
 800d6ae:	f1ba 0f00 	cmp.w	sl, #0
 800d6b2:	d024      	beq.n	800d6fe <__multiply+0xf2>
 800d6b4:	f104 0e14 	add.w	lr, r4, #20
 800d6b8:	46a9      	mov	r9, r5
 800d6ba:	f04f 0c00 	mov.w	ip, #0
 800d6be:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d6c2:	f8d9 1000 	ldr.w	r1, [r9]
 800d6c6:	fa1f fb82 	uxth.w	fp, r2
 800d6ca:	b289      	uxth	r1, r1
 800d6cc:	fb0a 110b 	mla	r1, sl, fp, r1
 800d6d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d6d4:	f8d9 2000 	ldr.w	r2, [r9]
 800d6d8:	4461      	add	r1, ip
 800d6da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d6de:	fb0a c20b 	mla	r2, sl, fp, ip
 800d6e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d6e6:	b289      	uxth	r1, r1
 800d6e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d6ec:	4577      	cmp	r7, lr
 800d6ee:	f849 1b04 	str.w	r1, [r9], #4
 800d6f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d6f6:	d8e2      	bhi.n	800d6be <__multiply+0xb2>
 800d6f8:	9a01      	ldr	r2, [sp, #4]
 800d6fa:	f845 c002 	str.w	ip, [r5, r2]
 800d6fe:	9a03      	ldr	r2, [sp, #12]
 800d700:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d704:	3304      	adds	r3, #4
 800d706:	f1b9 0f00 	cmp.w	r9, #0
 800d70a:	d020      	beq.n	800d74e <__multiply+0x142>
 800d70c:	6829      	ldr	r1, [r5, #0]
 800d70e:	f104 0c14 	add.w	ip, r4, #20
 800d712:	46ae      	mov	lr, r5
 800d714:	f04f 0a00 	mov.w	sl, #0
 800d718:	f8bc b000 	ldrh.w	fp, [ip]
 800d71c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d720:	fb09 220b 	mla	r2, r9, fp, r2
 800d724:	4492      	add	sl, r2
 800d726:	b289      	uxth	r1, r1
 800d728:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d72c:	f84e 1b04 	str.w	r1, [lr], #4
 800d730:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d734:	f8be 1000 	ldrh.w	r1, [lr]
 800d738:	0c12      	lsrs	r2, r2, #16
 800d73a:	fb09 1102 	mla	r1, r9, r2, r1
 800d73e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d742:	4567      	cmp	r7, ip
 800d744:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d748:	d8e6      	bhi.n	800d718 <__multiply+0x10c>
 800d74a:	9a01      	ldr	r2, [sp, #4]
 800d74c:	50a9      	str	r1, [r5, r2]
 800d74e:	3504      	adds	r5, #4
 800d750:	e79a      	b.n	800d688 <__multiply+0x7c>
 800d752:	3e01      	subs	r6, #1
 800d754:	e79c      	b.n	800d690 <__multiply+0x84>
 800d756:	bf00      	nop
 800d758:	0800f5d7 	.word	0x0800f5d7
 800d75c:	0800f648 	.word	0x0800f648

0800d760 <__pow5mult>:
 800d760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d764:	4615      	mov	r5, r2
 800d766:	f012 0203 	ands.w	r2, r2, #3
 800d76a:	4606      	mov	r6, r0
 800d76c:	460f      	mov	r7, r1
 800d76e:	d007      	beq.n	800d780 <__pow5mult+0x20>
 800d770:	4c25      	ldr	r4, [pc, #148]	; (800d808 <__pow5mult+0xa8>)
 800d772:	3a01      	subs	r2, #1
 800d774:	2300      	movs	r3, #0
 800d776:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d77a:	f7ff fe9b 	bl	800d4b4 <__multadd>
 800d77e:	4607      	mov	r7, r0
 800d780:	10ad      	asrs	r5, r5, #2
 800d782:	d03d      	beq.n	800d800 <__pow5mult+0xa0>
 800d784:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d786:	b97c      	cbnz	r4, 800d7a8 <__pow5mult+0x48>
 800d788:	2010      	movs	r0, #16
 800d78a:	f7ff fe29 	bl	800d3e0 <malloc>
 800d78e:	4602      	mov	r2, r0
 800d790:	6270      	str	r0, [r6, #36]	; 0x24
 800d792:	b928      	cbnz	r0, 800d7a0 <__pow5mult+0x40>
 800d794:	4b1d      	ldr	r3, [pc, #116]	; (800d80c <__pow5mult+0xac>)
 800d796:	481e      	ldr	r0, [pc, #120]	; (800d810 <__pow5mult+0xb0>)
 800d798:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d79c:	f000 fe7e 	bl	800e49c <__assert_func>
 800d7a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d7a4:	6004      	str	r4, [r0, #0]
 800d7a6:	60c4      	str	r4, [r0, #12]
 800d7a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d7ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d7b0:	b94c      	cbnz	r4, 800d7c6 <__pow5mult+0x66>
 800d7b2:	f240 2171 	movw	r1, #625	; 0x271
 800d7b6:	4630      	mov	r0, r6
 800d7b8:	f7ff ff12 	bl	800d5e0 <__i2b>
 800d7bc:	2300      	movs	r3, #0
 800d7be:	f8c8 0008 	str.w	r0, [r8, #8]
 800d7c2:	4604      	mov	r4, r0
 800d7c4:	6003      	str	r3, [r0, #0]
 800d7c6:	f04f 0900 	mov.w	r9, #0
 800d7ca:	07eb      	lsls	r3, r5, #31
 800d7cc:	d50a      	bpl.n	800d7e4 <__pow5mult+0x84>
 800d7ce:	4639      	mov	r1, r7
 800d7d0:	4622      	mov	r2, r4
 800d7d2:	4630      	mov	r0, r6
 800d7d4:	f7ff ff1a 	bl	800d60c <__multiply>
 800d7d8:	4639      	mov	r1, r7
 800d7da:	4680      	mov	r8, r0
 800d7dc:	4630      	mov	r0, r6
 800d7de:	f7ff fe47 	bl	800d470 <_Bfree>
 800d7e2:	4647      	mov	r7, r8
 800d7e4:	106d      	asrs	r5, r5, #1
 800d7e6:	d00b      	beq.n	800d800 <__pow5mult+0xa0>
 800d7e8:	6820      	ldr	r0, [r4, #0]
 800d7ea:	b938      	cbnz	r0, 800d7fc <__pow5mult+0x9c>
 800d7ec:	4622      	mov	r2, r4
 800d7ee:	4621      	mov	r1, r4
 800d7f0:	4630      	mov	r0, r6
 800d7f2:	f7ff ff0b 	bl	800d60c <__multiply>
 800d7f6:	6020      	str	r0, [r4, #0]
 800d7f8:	f8c0 9000 	str.w	r9, [r0]
 800d7fc:	4604      	mov	r4, r0
 800d7fe:	e7e4      	b.n	800d7ca <__pow5mult+0x6a>
 800d800:	4638      	mov	r0, r7
 800d802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d806:	bf00      	nop
 800d808:	0800f798 	.word	0x0800f798
 800d80c:	0800f565 	.word	0x0800f565
 800d810:	0800f648 	.word	0x0800f648

0800d814 <__lshift>:
 800d814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d818:	460c      	mov	r4, r1
 800d81a:	6849      	ldr	r1, [r1, #4]
 800d81c:	6923      	ldr	r3, [r4, #16]
 800d81e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d822:	68a3      	ldr	r3, [r4, #8]
 800d824:	4607      	mov	r7, r0
 800d826:	4691      	mov	r9, r2
 800d828:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d82c:	f108 0601 	add.w	r6, r8, #1
 800d830:	42b3      	cmp	r3, r6
 800d832:	db0b      	blt.n	800d84c <__lshift+0x38>
 800d834:	4638      	mov	r0, r7
 800d836:	f7ff fddb 	bl	800d3f0 <_Balloc>
 800d83a:	4605      	mov	r5, r0
 800d83c:	b948      	cbnz	r0, 800d852 <__lshift+0x3e>
 800d83e:	4602      	mov	r2, r0
 800d840:	4b2a      	ldr	r3, [pc, #168]	; (800d8ec <__lshift+0xd8>)
 800d842:	482b      	ldr	r0, [pc, #172]	; (800d8f0 <__lshift+0xdc>)
 800d844:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d848:	f000 fe28 	bl	800e49c <__assert_func>
 800d84c:	3101      	adds	r1, #1
 800d84e:	005b      	lsls	r3, r3, #1
 800d850:	e7ee      	b.n	800d830 <__lshift+0x1c>
 800d852:	2300      	movs	r3, #0
 800d854:	f100 0114 	add.w	r1, r0, #20
 800d858:	f100 0210 	add.w	r2, r0, #16
 800d85c:	4618      	mov	r0, r3
 800d85e:	4553      	cmp	r3, sl
 800d860:	db37      	blt.n	800d8d2 <__lshift+0xbe>
 800d862:	6920      	ldr	r0, [r4, #16]
 800d864:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d868:	f104 0314 	add.w	r3, r4, #20
 800d86c:	f019 091f 	ands.w	r9, r9, #31
 800d870:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d874:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d878:	d02f      	beq.n	800d8da <__lshift+0xc6>
 800d87a:	f1c9 0e20 	rsb	lr, r9, #32
 800d87e:	468a      	mov	sl, r1
 800d880:	f04f 0c00 	mov.w	ip, #0
 800d884:	681a      	ldr	r2, [r3, #0]
 800d886:	fa02 f209 	lsl.w	r2, r2, r9
 800d88a:	ea42 020c 	orr.w	r2, r2, ip
 800d88e:	f84a 2b04 	str.w	r2, [sl], #4
 800d892:	f853 2b04 	ldr.w	r2, [r3], #4
 800d896:	4298      	cmp	r0, r3
 800d898:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d89c:	d8f2      	bhi.n	800d884 <__lshift+0x70>
 800d89e:	1b03      	subs	r3, r0, r4
 800d8a0:	3b15      	subs	r3, #21
 800d8a2:	f023 0303 	bic.w	r3, r3, #3
 800d8a6:	3304      	adds	r3, #4
 800d8a8:	f104 0215 	add.w	r2, r4, #21
 800d8ac:	4290      	cmp	r0, r2
 800d8ae:	bf38      	it	cc
 800d8b0:	2304      	movcc	r3, #4
 800d8b2:	f841 c003 	str.w	ip, [r1, r3]
 800d8b6:	f1bc 0f00 	cmp.w	ip, #0
 800d8ba:	d001      	beq.n	800d8c0 <__lshift+0xac>
 800d8bc:	f108 0602 	add.w	r6, r8, #2
 800d8c0:	3e01      	subs	r6, #1
 800d8c2:	4638      	mov	r0, r7
 800d8c4:	612e      	str	r6, [r5, #16]
 800d8c6:	4621      	mov	r1, r4
 800d8c8:	f7ff fdd2 	bl	800d470 <_Bfree>
 800d8cc:	4628      	mov	r0, r5
 800d8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d8d6:	3301      	adds	r3, #1
 800d8d8:	e7c1      	b.n	800d85e <__lshift+0x4a>
 800d8da:	3904      	subs	r1, #4
 800d8dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d8e4:	4298      	cmp	r0, r3
 800d8e6:	d8f9      	bhi.n	800d8dc <__lshift+0xc8>
 800d8e8:	e7ea      	b.n	800d8c0 <__lshift+0xac>
 800d8ea:	bf00      	nop
 800d8ec:	0800f5d7 	.word	0x0800f5d7
 800d8f0:	0800f648 	.word	0x0800f648

0800d8f4 <__mcmp>:
 800d8f4:	b530      	push	{r4, r5, lr}
 800d8f6:	6902      	ldr	r2, [r0, #16]
 800d8f8:	690c      	ldr	r4, [r1, #16]
 800d8fa:	1b12      	subs	r2, r2, r4
 800d8fc:	d10e      	bne.n	800d91c <__mcmp+0x28>
 800d8fe:	f100 0314 	add.w	r3, r0, #20
 800d902:	3114      	adds	r1, #20
 800d904:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d908:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d90c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d910:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d914:	42a5      	cmp	r5, r4
 800d916:	d003      	beq.n	800d920 <__mcmp+0x2c>
 800d918:	d305      	bcc.n	800d926 <__mcmp+0x32>
 800d91a:	2201      	movs	r2, #1
 800d91c:	4610      	mov	r0, r2
 800d91e:	bd30      	pop	{r4, r5, pc}
 800d920:	4283      	cmp	r3, r0
 800d922:	d3f3      	bcc.n	800d90c <__mcmp+0x18>
 800d924:	e7fa      	b.n	800d91c <__mcmp+0x28>
 800d926:	f04f 32ff 	mov.w	r2, #4294967295
 800d92a:	e7f7      	b.n	800d91c <__mcmp+0x28>

0800d92c <__mdiff>:
 800d92c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d930:	460c      	mov	r4, r1
 800d932:	4606      	mov	r6, r0
 800d934:	4611      	mov	r1, r2
 800d936:	4620      	mov	r0, r4
 800d938:	4690      	mov	r8, r2
 800d93a:	f7ff ffdb 	bl	800d8f4 <__mcmp>
 800d93e:	1e05      	subs	r5, r0, #0
 800d940:	d110      	bne.n	800d964 <__mdiff+0x38>
 800d942:	4629      	mov	r1, r5
 800d944:	4630      	mov	r0, r6
 800d946:	f7ff fd53 	bl	800d3f0 <_Balloc>
 800d94a:	b930      	cbnz	r0, 800d95a <__mdiff+0x2e>
 800d94c:	4b3a      	ldr	r3, [pc, #232]	; (800da38 <__mdiff+0x10c>)
 800d94e:	4602      	mov	r2, r0
 800d950:	f240 2132 	movw	r1, #562	; 0x232
 800d954:	4839      	ldr	r0, [pc, #228]	; (800da3c <__mdiff+0x110>)
 800d956:	f000 fda1 	bl	800e49c <__assert_func>
 800d95a:	2301      	movs	r3, #1
 800d95c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d960:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d964:	bfa4      	itt	ge
 800d966:	4643      	movge	r3, r8
 800d968:	46a0      	movge	r8, r4
 800d96a:	4630      	mov	r0, r6
 800d96c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d970:	bfa6      	itte	ge
 800d972:	461c      	movge	r4, r3
 800d974:	2500      	movge	r5, #0
 800d976:	2501      	movlt	r5, #1
 800d978:	f7ff fd3a 	bl	800d3f0 <_Balloc>
 800d97c:	b920      	cbnz	r0, 800d988 <__mdiff+0x5c>
 800d97e:	4b2e      	ldr	r3, [pc, #184]	; (800da38 <__mdiff+0x10c>)
 800d980:	4602      	mov	r2, r0
 800d982:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d986:	e7e5      	b.n	800d954 <__mdiff+0x28>
 800d988:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d98c:	6926      	ldr	r6, [r4, #16]
 800d98e:	60c5      	str	r5, [r0, #12]
 800d990:	f104 0914 	add.w	r9, r4, #20
 800d994:	f108 0514 	add.w	r5, r8, #20
 800d998:	f100 0e14 	add.w	lr, r0, #20
 800d99c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d9a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d9a4:	f108 0210 	add.w	r2, r8, #16
 800d9a8:	46f2      	mov	sl, lr
 800d9aa:	2100      	movs	r1, #0
 800d9ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800d9b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d9b4:	fa1f f883 	uxth.w	r8, r3
 800d9b8:	fa11 f18b 	uxtah	r1, r1, fp
 800d9bc:	0c1b      	lsrs	r3, r3, #16
 800d9be:	eba1 0808 	sub.w	r8, r1, r8
 800d9c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d9c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d9ca:	fa1f f888 	uxth.w	r8, r8
 800d9ce:	1419      	asrs	r1, r3, #16
 800d9d0:	454e      	cmp	r6, r9
 800d9d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d9d6:	f84a 3b04 	str.w	r3, [sl], #4
 800d9da:	d8e7      	bhi.n	800d9ac <__mdiff+0x80>
 800d9dc:	1b33      	subs	r3, r6, r4
 800d9de:	3b15      	subs	r3, #21
 800d9e0:	f023 0303 	bic.w	r3, r3, #3
 800d9e4:	3304      	adds	r3, #4
 800d9e6:	3415      	adds	r4, #21
 800d9e8:	42a6      	cmp	r6, r4
 800d9ea:	bf38      	it	cc
 800d9ec:	2304      	movcc	r3, #4
 800d9ee:	441d      	add	r5, r3
 800d9f0:	4473      	add	r3, lr
 800d9f2:	469e      	mov	lr, r3
 800d9f4:	462e      	mov	r6, r5
 800d9f6:	4566      	cmp	r6, ip
 800d9f8:	d30e      	bcc.n	800da18 <__mdiff+0xec>
 800d9fa:	f10c 0203 	add.w	r2, ip, #3
 800d9fe:	1b52      	subs	r2, r2, r5
 800da00:	f022 0203 	bic.w	r2, r2, #3
 800da04:	3d03      	subs	r5, #3
 800da06:	45ac      	cmp	ip, r5
 800da08:	bf38      	it	cc
 800da0a:	2200      	movcc	r2, #0
 800da0c:	441a      	add	r2, r3
 800da0e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800da12:	b17b      	cbz	r3, 800da34 <__mdiff+0x108>
 800da14:	6107      	str	r7, [r0, #16]
 800da16:	e7a3      	b.n	800d960 <__mdiff+0x34>
 800da18:	f856 8b04 	ldr.w	r8, [r6], #4
 800da1c:	fa11 f288 	uxtah	r2, r1, r8
 800da20:	1414      	asrs	r4, r2, #16
 800da22:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800da26:	b292      	uxth	r2, r2
 800da28:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800da2c:	f84e 2b04 	str.w	r2, [lr], #4
 800da30:	1421      	asrs	r1, r4, #16
 800da32:	e7e0      	b.n	800d9f6 <__mdiff+0xca>
 800da34:	3f01      	subs	r7, #1
 800da36:	e7ea      	b.n	800da0e <__mdiff+0xe2>
 800da38:	0800f5d7 	.word	0x0800f5d7
 800da3c:	0800f648 	.word	0x0800f648

0800da40 <__d2b>:
 800da40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800da44:	4689      	mov	r9, r1
 800da46:	2101      	movs	r1, #1
 800da48:	ec57 6b10 	vmov	r6, r7, d0
 800da4c:	4690      	mov	r8, r2
 800da4e:	f7ff fccf 	bl	800d3f0 <_Balloc>
 800da52:	4604      	mov	r4, r0
 800da54:	b930      	cbnz	r0, 800da64 <__d2b+0x24>
 800da56:	4602      	mov	r2, r0
 800da58:	4b25      	ldr	r3, [pc, #148]	; (800daf0 <__d2b+0xb0>)
 800da5a:	4826      	ldr	r0, [pc, #152]	; (800daf4 <__d2b+0xb4>)
 800da5c:	f240 310a 	movw	r1, #778	; 0x30a
 800da60:	f000 fd1c 	bl	800e49c <__assert_func>
 800da64:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800da68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800da6c:	bb35      	cbnz	r5, 800dabc <__d2b+0x7c>
 800da6e:	2e00      	cmp	r6, #0
 800da70:	9301      	str	r3, [sp, #4]
 800da72:	d028      	beq.n	800dac6 <__d2b+0x86>
 800da74:	4668      	mov	r0, sp
 800da76:	9600      	str	r6, [sp, #0]
 800da78:	f7ff fd82 	bl	800d580 <__lo0bits>
 800da7c:	9900      	ldr	r1, [sp, #0]
 800da7e:	b300      	cbz	r0, 800dac2 <__d2b+0x82>
 800da80:	9a01      	ldr	r2, [sp, #4]
 800da82:	f1c0 0320 	rsb	r3, r0, #32
 800da86:	fa02 f303 	lsl.w	r3, r2, r3
 800da8a:	430b      	orrs	r3, r1
 800da8c:	40c2      	lsrs	r2, r0
 800da8e:	6163      	str	r3, [r4, #20]
 800da90:	9201      	str	r2, [sp, #4]
 800da92:	9b01      	ldr	r3, [sp, #4]
 800da94:	61a3      	str	r3, [r4, #24]
 800da96:	2b00      	cmp	r3, #0
 800da98:	bf14      	ite	ne
 800da9a:	2202      	movne	r2, #2
 800da9c:	2201      	moveq	r2, #1
 800da9e:	6122      	str	r2, [r4, #16]
 800daa0:	b1d5      	cbz	r5, 800dad8 <__d2b+0x98>
 800daa2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800daa6:	4405      	add	r5, r0
 800daa8:	f8c9 5000 	str.w	r5, [r9]
 800daac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dab0:	f8c8 0000 	str.w	r0, [r8]
 800dab4:	4620      	mov	r0, r4
 800dab6:	b003      	add	sp, #12
 800dab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dabc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dac0:	e7d5      	b.n	800da6e <__d2b+0x2e>
 800dac2:	6161      	str	r1, [r4, #20]
 800dac4:	e7e5      	b.n	800da92 <__d2b+0x52>
 800dac6:	a801      	add	r0, sp, #4
 800dac8:	f7ff fd5a 	bl	800d580 <__lo0bits>
 800dacc:	9b01      	ldr	r3, [sp, #4]
 800dace:	6163      	str	r3, [r4, #20]
 800dad0:	2201      	movs	r2, #1
 800dad2:	6122      	str	r2, [r4, #16]
 800dad4:	3020      	adds	r0, #32
 800dad6:	e7e3      	b.n	800daa0 <__d2b+0x60>
 800dad8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dadc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dae0:	f8c9 0000 	str.w	r0, [r9]
 800dae4:	6918      	ldr	r0, [r3, #16]
 800dae6:	f7ff fd2b 	bl	800d540 <__hi0bits>
 800daea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800daee:	e7df      	b.n	800dab0 <__d2b+0x70>
 800daf0:	0800f5d7 	.word	0x0800f5d7
 800daf4:	0800f648 	.word	0x0800f648

0800daf8 <_calloc_r>:
 800daf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dafa:	fba1 2402 	umull	r2, r4, r1, r2
 800dafe:	b94c      	cbnz	r4, 800db14 <_calloc_r+0x1c>
 800db00:	4611      	mov	r1, r2
 800db02:	9201      	str	r2, [sp, #4]
 800db04:	f000 f87a 	bl	800dbfc <_malloc_r>
 800db08:	9a01      	ldr	r2, [sp, #4]
 800db0a:	4605      	mov	r5, r0
 800db0c:	b930      	cbnz	r0, 800db1c <_calloc_r+0x24>
 800db0e:	4628      	mov	r0, r5
 800db10:	b003      	add	sp, #12
 800db12:	bd30      	pop	{r4, r5, pc}
 800db14:	220c      	movs	r2, #12
 800db16:	6002      	str	r2, [r0, #0]
 800db18:	2500      	movs	r5, #0
 800db1a:	e7f8      	b.n	800db0e <_calloc_r+0x16>
 800db1c:	4621      	mov	r1, r4
 800db1e:	f7fe f853 	bl	800bbc8 <memset>
 800db22:	e7f4      	b.n	800db0e <_calloc_r+0x16>

0800db24 <_free_r>:
 800db24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db26:	2900      	cmp	r1, #0
 800db28:	d044      	beq.n	800dbb4 <_free_r+0x90>
 800db2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db2e:	9001      	str	r0, [sp, #4]
 800db30:	2b00      	cmp	r3, #0
 800db32:	f1a1 0404 	sub.w	r4, r1, #4
 800db36:	bfb8      	it	lt
 800db38:	18e4      	addlt	r4, r4, r3
 800db3a:	f000 fe3b 	bl	800e7b4 <__malloc_lock>
 800db3e:	4a1e      	ldr	r2, [pc, #120]	; (800dbb8 <_free_r+0x94>)
 800db40:	9801      	ldr	r0, [sp, #4]
 800db42:	6813      	ldr	r3, [r2, #0]
 800db44:	b933      	cbnz	r3, 800db54 <_free_r+0x30>
 800db46:	6063      	str	r3, [r4, #4]
 800db48:	6014      	str	r4, [r2, #0]
 800db4a:	b003      	add	sp, #12
 800db4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db50:	f000 be36 	b.w	800e7c0 <__malloc_unlock>
 800db54:	42a3      	cmp	r3, r4
 800db56:	d908      	bls.n	800db6a <_free_r+0x46>
 800db58:	6825      	ldr	r5, [r4, #0]
 800db5a:	1961      	adds	r1, r4, r5
 800db5c:	428b      	cmp	r3, r1
 800db5e:	bf01      	itttt	eq
 800db60:	6819      	ldreq	r1, [r3, #0]
 800db62:	685b      	ldreq	r3, [r3, #4]
 800db64:	1949      	addeq	r1, r1, r5
 800db66:	6021      	streq	r1, [r4, #0]
 800db68:	e7ed      	b.n	800db46 <_free_r+0x22>
 800db6a:	461a      	mov	r2, r3
 800db6c:	685b      	ldr	r3, [r3, #4]
 800db6e:	b10b      	cbz	r3, 800db74 <_free_r+0x50>
 800db70:	42a3      	cmp	r3, r4
 800db72:	d9fa      	bls.n	800db6a <_free_r+0x46>
 800db74:	6811      	ldr	r1, [r2, #0]
 800db76:	1855      	adds	r5, r2, r1
 800db78:	42a5      	cmp	r5, r4
 800db7a:	d10b      	bne.n	800db94 <_free_r+0x70>
 800db7c:	6824      	ldr	r4, [r4, #0]
 800db7e:	4421      	add	r1, r4
 800db80:	1854      	adds	r4, r2, r1
 800db82:	42a3      	cmp	r3, r4
 800db84:	6011      	str	r1, [r2, #0]
 800db86:	d1e0      	bne.n	800db4a <_free_r+0x26>
 800db88:	681c      	ldr	r4, [r3, #0]
 800db8a:	685b      	ldr	r3, [r3, #4]
 800db8c:	6053      	str	r3, [r2, #4]
 800db8e:	4421      	add	r1, r4
 800db90:	6011      	str	r1, [r2, #0]
 800db92:	e7da      	b.n	800db4a <_free_r+0x26>
 800db94:	d902      	bls.n	800db9c <_free_r+0x78>
 800db96:	230c      	movs	r3, #12
 800db98:	6003      	str	r3, [r0, #0]
 800db9a:	e7d6      	b.n	800db4a <_free_r+0x26>
 800db9c:	6825      	ldr	r5, [r4, #0]
 800db9e:	1961      	adds	r1, r4, r5
 800dba0:	428b      	cmp	r3, r1
 800dba2:	bf04      	itt	eq
 800dba4:	6819      	ldreq	r1, [r3, #0]
 800dba6:	685b      	ldreq	r3, [r3, #4]
 800dba8:	6063      	str	r3, [r4, #4]
 800dbaa:	bf04      	itt	eq
 800dbac:	1949      	addeq	r1, r1, r5
 800dbae:	6021      	streq	r1, [r4, #0]
 800dbb0:	6054      	str	r4, [r2, #4]
 800dbb2:	e7ca      	b.n	800db4a <_free_r+0x26>
 800dbb4:	b003      	add	sp, #12
 800dbb6:	bd30      	pop	{r4, r5, pc}
 800dbb8:	20000bac 	.word	0x20000bac

0800dbbc <sbrk_aligned>:
 800dbbc:	b570      	push	{r4, r5, r6, lr}
 800dbbe:	4e0e      	ldr	r6, [pc, #56]	; (800dbf8 <sbrk_aligned+0x3c>)
 800dbc0:	460c      	mov	r4, r1
 800dbc2:	6831      	ldr	r1, [r6, #0]
 800dbc4:	4605      	mov	r5, r0
 800dbc6:	b911      	cbnz	r1, 800dbce <sbrk_aligned+0x12>
 800dbc8:	f000 fb42 	bl	800e250 <_sbrk_r>
 800dbcc:	6030      	str	r0, [r6, #0]
 800dbce:	4621      	mov	r1, r4
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	f000 fb3d 	bl	800e250 <_sbrk_r>
 800dbd6:	1c43      	adds	r3, r0, #1
 800dbd8:	d00a      	beq.n	800dbf0 <sbrk_aligned+0x34>
 800dbda:	1cc4      	adds	r4, r0, #3
 800dbdc:	f024 0403 	bic.w	r4, r4, #3
 800dbe0:	42a0      	cmp	r0, r4
 800dbe2:	d007      	beq.n	800dbf4 <sbrk_aligned+0x38>
 800dbe4:	1a21      	subs	r1, r4, r0
 800dbe6:	4628      	mov	r0, r5
 800dbe8:	f000 fb32 	bl	800e250 <_sbrk_r>
 800dbec:	3001      	adds	r0, #1
 800dbee:	d101      	bne.n	800dbf4 <sbrk_aligned+0x38>
 800dbf0:	f04f 34ff 	mov.w	r4, #4294967295
 800dbf4:	4620      	mov	r0, r4
 800dbf6:	bd70      	pop	{r4, r5, r6, pc}
 800dbf8:	20000bb0 	.word	0x20000bb0

0800dbfc <_malloc_r>:
 800dbfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc00:	1ccd      	adds	r5, r1, #3
 800dc02:	f025 0503 	bic.w	r5, r5, #3
 800dc06:	3508      	adds	r5, #8
 800dc08:	2d0c      	cmp	r5, #12
 800dc0a:	bf38      	it	cc
 800dc0c:	250c      	movcc	r5, #12
 800dc0e:	2d00      	cmp	r5, #0
 800dc10:	4607      	mov	r7, r0
 800dc12:	db01      	blt.n	800dc18 <_malloc_r+0x1c>
 800dc14:	42a9      	cmp	r1, r5
 800dc16:	d905      	bls.n	800dc24 <_malloc_r+0x28>
 800dc18:	230c      	movs	r3, #12
 800dc1a:	603b      	str	r3, [r7, #0]
 800dc1c:	2600      	movs	r6, #0
 800dc1e:	4630      	mov	r0, r6
 800dc20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc24:	4e2e      	ldr	r6, [pc, #184]	; (800dce0 <_malloc_r+0xe4>)
 800dc26:	f000 fdc5 	bl	800e7b4 <__malloc_lock>
 800dc2a:	6833      	ldr	r3, [r6, #0]
 800dc2c:	461c      	mov	r4, r3
 800dc2e:	bb34      	cbnz	r4, 800dc7e <_malloc_r+0x82>
 800dc30:	4629      	mov	r1, r5
 800dc32:	4638      	mov	r0, r7
 800dc34:	f7ff ffc2 	bl	800dbbc <sbrk_aligned>
 800dc38:	1c43      	adds	r3, r0, #1
 800dc3a:	4604      	mov	r4, r0
 800dc3c:	d14d      	bne.n	800dcda <_malloc_r+0xde>
 800dc3e:	6834      	ldr	r4, [r6, #0]
 800dc40:	4626      	mov	r6, r4
 800dc42:	2e00      	cmp	r6, #0
 800dc44:	d140      	bne.n	800dcc8 <_malloc_r+0xcc>
 800dc46:	6823      	ldr	r3, [r4, #0]
 800dc48:	4631      	mov	r1, r6
 800dc4a:	4638      	mov	r0, r7
 800dc4c:	eb04 0803 	add.w	r8, r4, r3
 800dc50:	f000 fafe 	bl	800e250 <_sbrk_r>
 800dc54:	4580      	cmp	r8, r0
 800dc56:	d13a      	bne.n	800dcce <_malloc_r+0xd2>
 800dc58:	6821      	ldr	r1, [r4, #0]
 800dc5a:	3503      	adds	r5, #3
 800dc5c:	1a6d      	subs	r5, r5, r1
 800dc5e:	f025 0503 	bic.w	r5, r5, #3
 800dc62:	3508      	adds	r5, #8
 800dc64:	2d0c      	cmp	r5, #12
 800dc66:	bf38      	it	cc
 800dc68:	250c      	movcc	r5, #12
 800dc6a:	4629      	mov	r1, r5
 800dc6c:	4638      	mov	r0, r7
 800dc6e:	f7ff ffa5 	bl	800dbbc <sbrk_aligned>
 800dc72:	3001      	adds	r0, #1
 800dc74:	d02b      	beq.n	800dcce <_malloc_r+0xd2>
 800dc76:	6823      	ldr	r3, [r4, #0]
 800dc78:	442b      	add	r3, r5
 800dc7a:	6023      	str	r3, [r4, #0]
 800dc7c:	e00e      	b.n	800dc9c <_malloc_r+0xa0>
 800dc7e:	6822      	ldr	r2, [r4, #0]
 800dc80:	1b52      	subs	r2, r2, r5
 800dc82:	d41e      	bmi.n	800dcc2 <_malloc_r+0xc6>
 800dc84:	2a0b      	cmp	r2, #11
 800dc86:	d916      	bls.n	800dcb6 <_malloc_r+0xba>
 800dc88:	1961      	adds	r1, r4, r5
 800dc8a:	42a3      	cmp	r3, r4
 800dc8c:	6025      	str	r5, [r4, #0]
 800dc8e:	bf18      	it	ne
 800dc90:	6059      	strne	r1, [r3, #4]
 800dc92:	6863      	ldr	r3, [r4, #4]
 800dc94:	bf08      	it	eq
 800dc96:	6031      	streq	r1, [r6, #0]
 800dc98:	5162      	str	r2, [r4, r5]
 800dc9a:	604b      	str	r3, [r1, #4]
 800dc9c:	4638      	mov	r0, r7
 800dc9e:	f104 060b 	add.w	r6, r4, #11
 800dca2:	f000 fd8d 	bl	800e7c0 <__malloc_unlock>
 800dca6:	f026 0607 	bic.w	r6, r6, #7
 800dcaa:	1d23      	adds	r3, r4, #4
 800dcac:	1af2      	subs	r2, r6, r3
 800dcae:	d0b6      	beq.n	800dc1e <_malloc_r+0x22>
 800dcb0:	1b9b      	subs	r3, r3, r6
 800dcb2:	50a3      	str	r3, [r4, r2]
 800dcb4:	e7b3      	b.n	800dc1e <_malloc_r+0x22>
 800dcb6:	6862      	ldr	r2, [r4, #4]
 800dcb8:	42a3      	cmp	r3, r4
 800dcba:	bf0c      	ite	eq
 800dcbc:	6032      	streq	r2, [r6, #0]
 800dcbe:	605a      	strne	r2, [r3, #4]
 800dcc0:	e7ec      	b.n	800dc9c <_malloc_r+0xa0>
 800dcc2:	4623      	mov	r3, r4
 800dcc4:	6864      	ldr	r4, [r4, #4]
 800dcc6:	e7b2      	b.n	800dc2e <_malloc_r+0x32>
 800dcc8:	4634      	mov	r4, r6
 800dcca:	6876      	ldr	r6, [r6, #4]
 800dccc:	e7b9      	b.n	800dc42 <_malloc_r+0x46>
 800dcce:	230c      	movs	r3, #12
 800dcd0:	603b      	str	r3, [r7, #0]
 800dcd2:	4638      	mov	r0, r7
 800dcd4:	f000 fd74 	bl	800e7c0 <__malloc_unlock>
 800dcd8:	e7a1      	b.n	800dc1e <_malloc_r+0x22>
 800dcda:	6025      	str	r5, [r4, #0]
 800dcdc:	e7de      	b.n	800dc9c <_malloc_r+0xa0>
 800dcde:	bf00      	nop
 800dce0:	20000bac 	.word	0x20000bac

0800dce4 <__ssputs_r>:
 800dce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dce8:	688e      	ldr	r6, [r1, #8]
 800dcea:	429e      	cmp	r6, r3
 800dcec:	4682      	mov	sl, r0
 800dcee:	460c      	mov	r4, r1
 800dcf0:	4690      	mov	r8, r2
 800dcf2:	461f      	mov	r7, r3
 800dcf4:	d838      	bhi.n	800dd68 <__ssputs_r+0x84>
 800dcf6:	898a      	ldrh	r2, [r1, #12]
 800dcf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dcfc:	d032      	beq.n	800dd64 <__ssputs_r+0x80>
 800dcfe:	6825      	ldr	r5, [r4, #0]
 800dd00:	6909      	ldr	r1, [r1, #16]
 800dd02:	eba5 0901 	sub.w	r9, r5, r1
 800dd06:	6965      	ldr	r5, [r4, #20]
 800dd08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd10:	3301      	adds	r3, #1
 800dd12:	444b      	add	r3, r9
 800dd14:	106d      	asrs	r5, r5, #1
 800dd16:	429d      	cmp	r5, r3
 800dd18:	bf38      	it	cc
 800dd1a:	461d      	movcc	r5, r3
 800dd1c:	0553      	lsls	r3, r2, #21
 800dd1e:	d531      	bpl.n	800dd84 <__ssputs_r+0xa0>
 800dd20:	4629      	mov	r1, r5
 800dd22:	f7ff ff6b 	bl	800dbfc <_malloc_r>
 800dd26:	4606      	mov	r6, r0
 800dd28:	b950      	cbnz	r0, 800dd40 <__ssputs_r+0x5c>
 800dd2a:	230c      	movs	r3, #12
 800dd2c:	f8ca 3000 	str.w	r3, [sl]
 800dd30:	89a3      	ldrh	r3, [r4, #12]
 800dd32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd36:	81a3      	strh	r3, [r4, #12]
 800dd38:	f04f 30ff 	mov.w	r0, #4294967295
 800dd3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd40:	6921      	ldr	r1, [r4, #16]
 800dd42:	464a      	mov	r2, r9
 800dd44:	f7fd ff18 	bl	800bb78 <memcpy>
 800dd48:	89a3      	ldrh	r3, [r4, #12]
 800dd4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dd4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd52:	81a3      	strh	r3, [r4, #12]
 800dd54:	6126      	str	r6, [r4, #16]
 800dd56:	6165      	str	r5, [r4, #20]
 800dd58:	444e      	add	r6, r9
 800dd5a:	eba5 0509 	sub.w	r5, r5, r9
 800dd5e:	6026      	str	r6, [r4, #0]
 800dd60:	60a5      	str	r5, [r4, #8]
 800dd62:	463e      	mov	r6, r7
 800dd64:	42be      	cmp	r6, r7
 800dd66:	d900      	bls.n	800dd6a <__ssputs_r+0x86>
 800dd68:	463e      	mov	r6, r7
 800dd6a:	6820      	ldr	r0, [r4, #0]
 800dd6c:	4632      	mov	r2, r6
 800dd6e:	4641      	mov	r1, r8
 800dd70:	f7fd ff10 	bl	800bb94 <memmove>
 800dd74:	68a3      	ldr	r3, [r4, #8]
 800dd76:	1b9b      	subs	r3, r3, r6
 800dd78:	60a3      	str	r3, [r4, #8]
 800dd7a:	6823      	ldr	r3, [r4, #0]
 800dd7c:	4433      	add	r3, r6
 800dd7e:	6023      	str	r3, [r4, #0]
 800dd80:	2000      	movs	r0, #0
 800dd82:	e7db      	b.n	800dd3c <__ssputs_r+0x58>
 800dd84:	462a      	mov	r2, r5
 800dd86:	f000 fd21 	bl	800e7cc <_realloc_r>
 800dd8a:	4606      	mov	r6, r0
 800dd8c:	2800      	cmp	r0, #0
 800dd8e:	d1e1      	bne.n	800dd54 <__ssputs_r+0x70>
 800dd90:	6921      	ldr	r1, [r4, #16]
 800dd92:	4650      	mov	r0, sl
 800dd94:	f7ff fec6 	bl	800db24 <_free_r>
 800dd98:	e7c7      	b.n	800dd2a <__ssputs_r+0x46>
	...

0800dd9c <_svfiprintf_r>:
 800dd9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dda0:	4698      	mov	r8, r3
 800dda2:	898b      	ldrh	r3, [r1, #12]
 800dda4:	061b      	lsls	r3, r3, #24
 800dda6:	b09d      	sub	sp, #116	; 0x74
 800dda8:	4607      	mov	r7, r0
 800ddaa:	460d      	mov	r5, r1
 800ddac:	4614      	mov	r4, r2
 800ddae:	d50e      	bpl.n	800ddce <_svfiprintf_r+0x32>
 800ddb0:	690b      	ldr	r3, [r1, #16]
 800ddb2:	b963      	cbnz	r3, 800ddce <_svfiprintf_r+0x32>
 800ddb4:	2140      	movs	r1, #64	; 0x40
 800ddb6:	f7ff ff21 	bl	800dbfc <_malloc_r>
 800ddba:	6028      	str	r0, [r5, #0]
 800ddbc:	6128      	str	r0, [r5, #16]
 800ddbe:	b920      	cbnz	r0, 800ddca <_svfiprintf_r+0x2e>
 800ddc0:	230c      	movs	r3, #12
 800ddc2:	603b      	str	r3, [r7, #0]
 800ddc4:	f04f 30ff 	mov.w	r0, #4294967295
 800ddc8:	e0d1      	b.n	800df6e <_svfiprintf_r+0x1d2>
 800ddca:	2340      	movs	r3, #64	; 0x40
 800ddcc:	616b      	str	r3, [r5, #20]
 800ddce:	2300      	movs	r3, #0
 800ddd0:	9309      	str	r3, [sp, #36]	; 0x24
 800ddd2:	2320      	movs	r3, #32
 800ddd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ddd8:	f8cd 800c 	str.w	r8, [sp, #12]
 800dddc:	2330      	movs	r3, #48	; 0x30
 800ddde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800df88 <_svfiprintf_r+0x1ec>
 800dde2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dde6:	f04f 0901 	mov.w	r9, #1
 800ddea:	4623      	mov	r3, r4
 800ddec:	469a      	mov	sl, r3
 800ddee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddf2:	b10a      	cbz	r2, 800ddf8 <_svfiprintf_r+0x5c>
 800ddf4:	2a25      	cmp	r2, #37	; 0x25
 800ddf6:	d1f9      	bne.n	800ddec <_svfiprintf_r+0x50>
 800ddf8:	ebba 0b04 	subs.w	fp, sl, r4
 800ddfc:	d00b      	beq.n	800de16 <_svfiprintf_r+0x7a>
 800ddfe:	465b      	mov	r3, fp
 800de00:	4622      	mov	r2, r4
 800de02:	4629      	mov	r1, r5
 800de04:	4638      	mov	r0, r7
 800de06:	f7ff ff6d 	bl	800dce4 <__ssputs_r>
 800de0a:	3001      	adds	r0, #1
 800de0c:	f000 80aa 	beq.w	800df64 <_svfiprintf_r+0x1c8>
 800de10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de12:	445a      	add	r2, fp
 800de14:	9209      	str	r2, [sp, #36]	; 0x24
 800de16:	f89a 3000 	ldrb.w	r3, [sl]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	f000 80a2 	beq.w	800df64 <_svfiprintf_r+0x1c8>
 800de20:	2300      	movs	r3, #0
 800de22:	f04f 32ff 	mov.w	r2, #4294967295
 800de26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de2a:	f10a 0a01 	add.w	sl, sl, #1
 800de2e:	9304      	str	r3, [sp, #16]
 800de30:	9307      	str	r3, [sp, #28]
 800de32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de36:	931a      	str	r3, [sp, #104]	; 0x68
 800de38:	4654      	mov	r4, sl
 800de3a:	2205      	movs	r2, #5
 800de3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de40:	4851      	ldr	r0, [pc, #324]	; (800df88 <_svfiprintf_r+0x1ec>)
 800de42:	f7f2 f9a5 	bl	8000190 <memchr>
 800de46:	9a04      	ldr	r2, [sp, #16]
 800de48:	b9d8      	cbnz	r0, 800de82 <_svfiprintf_r+0xe6>
 800de4a:	06d0      	lsls	r0, r2, #27
 800de4c:	bf44      	itt	mi
 800de4e:	2320      	movmi	r3, #32
 800de50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de54:	0711      	lsls	r1, r2, #28
 800de56:	bf44      	itt	mi
 800de58:	232b      	movmi	r3, #43	; 0x2b
 800de5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de5e:	f89a 3000 	ldrb.w	r3, [sl]
 800de62:	2b2a      	cmp	r3, #42	; 0x2a
 800de64:	d015      	beq.n	800de92 <_svfiprintf_r+0xf6>
 800de66:	9a07      	ldr	r2, [sp, #28]
 800de68:	4654      	mov	r4, sl
 800de6a:	2000      	movs	r0, #0
 800de6c:	f04f 0c0a 	mov.w	ip, #10
 800de70:	4621      	mov	r1, r4
 800de72:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de76:	3b30      	subs	r3, #48	; 0x30
 800de78:	2b09      	cmp	r3, #9
 800de7a:	d94e      	bls.n	800df1a <_svfiprintf_r+0x17e>
 800de7c:	b1b0      	cbz	r0, 800deac <_svfiprintf_r+0x110>
 800de7e:	9207      	str	r2, [sp, #28]
 800de80:	e014      	b.n	800deac <_svfiprintf_r+0x110>
 800de82:	eba0 0308 	sub.w	r3, r0, r8
 800de86:	fa09 f303 	lsl.w	r3, r9, r3
 800de8a:	4313      	orrs	r3, r2
 800de8c:	9304      	str	r3, [sp, #16]
 800de8e:	46a2      	mov	sl, r4
 800de90:	e7d2      	b.n	800de38 <_svfiprintf_r+0x9c>
 800de92:	9b03      	ldr	r3, [sp, #12]
 800de94:	1d19      	adds	r1, r3, #4
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	9103      	str	r1, [sp, #12]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	bfbb      	ittet	lt
 800de9e:	425b      	neglt	r3, r3
 800dea0:	f042 0202 	orrlt.w	r2, r2, #2
 800dea4:	9307      	strge	r3, [sp, #28]
 800dea6:	9307      	strlt	r3, [sp, #28]
 800dea8:	bfb8      	it	lt
 800deaa:	9204      	strlt	r2, [sp, #16]
 800deac:	7823      	ldrb	r3, [r4, #0]
 800deae:	2b2e      	cmp	r3, #46	; 0x2e
 800deb0:	d10c      	bne.n	800decc <_svfiprintf_r+0x130>
 800deb2:	7863      	ldrb	r3, [r4, #1]
 800deb4:	2b2a      	cmp	r3, #42	; 0x2a
 800deb6:	d135      	bne.n	800df24 <_svfiprintf_r+0x188>
 800deb8:	9b03      	ldr	r3, [sp, #12]
 800deba:	1d1a      	adds	r2, r3, #4
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	9203      	str	r2, [sp, #12]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	bfb8      	it	lt
 800dec4:	f04f 33ff 	movlt.w	r3, #4294967295
 800dec8:	3402      	adds	r4, #2
 800deca:	9305      	str	r3, [sp, #20]
 800decc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800df98 <_svfiprintf_r+0x1fc>
 800ded0:	7821      	ldrb	r1, [r4, #0]
 800ded2:	2203      	movs	r2, #3
 800ded4:	4650      	mov	r0, sl
 800ded6:	f7f2 f95b 	bl	8000190 <memchr>
 800deda:	b140      	cbz	r0, 800deee <_svfiprintf_r+0x152>
 800dedc:	2340      	movs	r3, #64	; 0x40
 800dede:	eba0 000a 	sub.w	r0, r0, sl
 800dee2:	fa03 f000 	lsl.w	r0, r3, r0
 800dee6:	9b04      	ldr	r3, [sp, #16]
 800dee8:	4303      	orrs	r3, r0
 800deea:	3401      	adds	r4, #1
 800deec:	9304      	str	r3, [sp, #16]
 800deee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800def2:	4826      	ldr	r0, [pc, #152]	; (800df8c <_svfiprintf_r+0x1f0>)
 800def4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800def8:	2206      	movs	r2, #6
 800defa:	f7f2 f949 	bl	8000190 <memchr>
 800defe:	2800      	cmp	r0, #0
 800df00:	d038      	beq.n	800df74 <_svfiprintf_r+0x1d8>
 800df02:	4b23      	ldr	r3, [pc, #140]	; (800df90 <_svfiprintf_r+0x1f4>)
 800df04:	bb1b      	cbnz	r3, 800df4e <_svfiprintf_r+0x1b2>
 800df06:	9b03      	ldr	r3, [sp, #12]
 800df08:	3307      	adds	r3, #7
 800df0a:	f023 0307 	bic.w	r3, r3, #7
 800df0e:	3308      	adds	r3, #8
 800df10:	9303      	str	r3, [sp, #12]
 800df12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df14:	4433      	add	r3, r6
 800df16:	9309      	str	r3, [sp, #36]	; 0x24
 800df18:	e767      	b.n	800ddea <_svfiprintf_r+0x4e>
 800df1a:	fb0c 3202 	mla	r2, ip, r2, r3
 800df1e:	460c      	mov	r4, r1
 800df20:	2001      	movs	r0, #1
 800df22:	e7a5      	b.n	800de70 <_svfiprintf_r+0xd4>
 800df24:	2300      	movs	r3, #0
 800df26:	3401      	adds	r4, #1
 800df28:	9305      	str	r3, [sp, #20]
 800df2a:	4619      	mov	r1, r3
 800df2c:	f04f 0c0a 	mov.w	ip, #10
 800df30:	4620      	mov	r0, r4
 800df32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df36:	3a30      	subs	r2, #48	; 0x30
 800df38:	2a09      	cmp	r2, #9
 800df3a:	d903      	bls.n	800df44 <_svfiprintf_r+0x1a8>
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d0c5      	beq.n	800decc <_svfiprintf_r+0x130>
 800df40:	9105      	str	r1, [sp, #20]
 800df42:	e7c3      	b.n	800decc <_svfiprintf_r+0x130>
 800df44:	fb0c 2101 	mla	r1, ip, r1, r2
 800df48:	4604      	mov	r4, r0
 800df4a:	2301      	movs	r3, #1
 800df4c:	e7f0      	b.n	800df30 <_svfiprintf_r+0x194>
 800df4e:	ab03      	add	r3, sp, #12
 800df50:	9300      	str	r3, [sp, #0]
 800df52:	462a      	mov	r2, r5
 800df54:	4b0f      	ldr	r3, [pc, #60]	; (800df94 <_svfiprintf_r+0x1f8>)
 800df56:	a904      	add	r1, sp, #16
 800df58:	4638      	mov	r0, r7
 800df5a:	f7fd fedd 	bl	800bd18 <_printf_float>
 800df5e:	1c42      	adds	r2, r0, #1
 800df60:	4606      	mov	r6, r0
 800df62:	d1d6      	bne.n	800df12 <_svfiprintf_r+0x176>
 800df64:	89ab      	ldrh	r3, [r5, #12]
 800df66:	065b      	lsls	r3, r3, #25
 800df68:	f53f af2c 	bmi.w	800ddc4 <_svfiprintf_r+0x28>
 800df6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df6e:	b01d      	add	sp, #116	; 0x74
 800df70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df74:	ab03      	add	r3, sp, #12
 800df76:	9300      	str	r3, [sp, #0]
 800df78:	462a      	mov	r2, r5
 800df7a:	4b06      	ldr	r3, [pc, #24]	; (800df94 <_svfiprintf_r+0x1f8>)
 800df7c:	a904      	add	r1, sp, #16
 800df7e:	4638      	mov	r0, r7
 800df80:	f7fe f96e 	bl	800c260 <_printf_i>
 800df84:	e7eb      	b.n	800df5e <_svfiprintf_r+0x1c2>
 800df86:	bf00      	nop
 800df88:	0800f7a4 	.word	0x0800f7a4
 800df8c:	0800f7ae 	.word	0x0800f7ae
 800df90:	0800bd19 	.word	0x0800bd19
 800df94:	0800dce5 	.word	0x0800dce5
 800df98:	0800f7aa 	.word	0x0800f7aa

0800df9c <__sfputc_r>:
 800df9c:	6893      	ldr	r3, [r2, #8]
 800df9e:	3b01      	subs	r3, #1
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	b410      	push	{r4}
 800dfa4:	6093      	str	r3, [r2, #8]
 800dfa6:	da08      	bge.n	800dfba <__sfputc_r+0x1e>
 800dfa8:	6994      	ldr	r4, [r2, #24]
 800dfaa:	42a3      	cmp	r3, r4
 800dfac:	db01      	blt.n	800dfb2 <__sfputc_r+0x16>
 800dfae:	290a      	cmp	r1, #10
 800dfb0:	d103      	bne.n	800dfba <__sfputc_r+0x1e>
 800dfb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfb6:	f000 b99f 	b.w	800e2f8 <__swbuf_r>
 800dfba:	6813      	ldr	r3, [r2, #0]
 800dfbc:	1c58      	adds	r0, r3, #1
 800dfbe:	6010      	str	r0, [r2, #0]
 800dfc0:	7019      	strb	r1, [r3, #0]
 800dfc2:	4608      	mov	r0, r1
 800dfc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfc8:	4770      	bx	lr

0800dfca <__sfputs_r>:
 800dfca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfcc:	4606      	mov	r6, r0
 800dfce:	460f      	mov	r7, r1
 800dfd0:	4614      	mov	r4, r2
 800dfd2:	18d5      	adds	r5, r2, r3
 800dfd4:	42ac      	cmp	r4, r5
 800dfd6:	d101      	bne.n	800dfdc <__sfputs_r+0x12>
 800dfd8:	2000      	movs	r0, #0
 800dfda:	e007      	b.n	800dfec <__sfputs_r+0x22>
 800dfdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfe0:	463a      	mov	r2, r7
 800dfe2:	4630      	mov	r0, r6
 800dfe4:	f7ff ffda 	bl	800df9c <__sfputc_r>
 800dfe8:	1c43      	adds	r3, r0, #1
 800dfea:	d1f3      	bne.n	800dfd4 <__sfputs_r+0xa>
 800dfec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dff0 <_vfiprintf_r>:
 800dff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dff4:	460d      	mov	r5, r1
 800dff6:	b09d      	sub	sp, #116	; 0x74
 800dff8:	4614      	mov	r4, r2
 800dffa:	4698      	mov	r8, r3
 800dffc:	4606      	mov	r6, r0
 800dffe:	b118      	cbz	r0, 800e008 <_vfiprintf_r+0x18>
 800e000:	6983      	ldr	r3, [r0, #24]
 800e002:	b90b      	cbnz	r3, 800e008 <_vfiprintf_r+0x18>
 800e004:	f7ff f946 	bl	800d294 <__sinit>
 800e008:	4b89      	ldr	r3, [pc, #548]	; (800e230 <_vfiprintf_r+0x240>)
 800e00a:	429d      	cmp	r5, r3
 800e00c:	d11b      	bne.n	800e046 <_vfiprintf_r+0x56>
 800e00e:	6875      	ldr	r5, [r6, #4]
 800e010:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e012:	07d9      	lsls	r1, r3, #31
 800e014:	d405      	bmi.n	800e022 <_vfiprintf_r+0x32>
 800e016:	89ab      	ldrh	r3, [r5, #12]
 800e018:	059a      	lsls	r2, r3, #22
 800e01a:	d402      	bmi.n	800e022 <_vfiprintf_r+0x32>
 800e01c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e01e:	f7ff f9dc 	bl	800d3da <__retarget_lock_acquire_recursive>
 800e022:	89ab      	ldrh	r3, [r5, #12]
 800e024:	071b      	lsls	r3, r3, #28
 800e026:	d501      	bpl.n	800e02c <_vfiprintf_r+0x3c>
 800e028:	692b      	ldr	r3, [r5, #16]
 800e02a:	b9eb      	cbnz	r3, 800e068 <_vfiprintf_r+0x78>
 800e02c:	4629      	mov	r1, r5
 800e02e:	4630      	mov	r0, r6
 800e030:	f000 f9c6 	bl	800e3c0 <__swsetup_r>
 800e034:	b1c0      	cbz	r0, 800e068 <_vfiprintf_r+0x78>
 800e036:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e038:	07dc      	lsls	r4, r3, #31
 800e03a:	d50e      	bpl.n	800e05a <_vfiprintf_r+0x6a>
 800e03c:	f04f 30ff 	mov.w	r0, #4294967295
 800e040:	b01d      	add	sp, #116	; 0x74
 800e042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e046:	4b7b      	ldr	r3, [pc, #492]	; (800e234 <_vfiprintf_r+0x244>)
 800e048:	429d      	cmp	r5, r3
 800e04a:	d101      	bne.n	800e050 <_vfiprintf_r+0x60>
 800e04c:	68b5      	ldr	r5, [r6, #8]
 800e04e:	e7df      	b.n	800e010 <_vfiprintf_r+0x20>
 800e050:	4b79      	ldr	r3, [pc, #484]	; (800e238 <_vfiprintf_r+0x248>)
 800e052:	429d      	cmp	r5, r3
 800e054:	bf08      	it	eq
 800e056:	68f5      	ldreq	r5, [r6, #12]
 800e058:	e7da      	b.n	800e010 <_vfiprintf_r+0x20>
 800e05a:	89ab      	ldrh	r3, [r5, #12]
 800e05c:	0598      	lsls	r0, r3, #22
 800e05e:	d4ed      	bmi.n	800e03c <_vfiprintf_r+0x4c>
 800e060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e062:	f7ff f9bb 	bl	800d3dc <__retarget_lock_release_recursive>
 800e066:	e7e9      	b.n	800e03c <_vfiprintf_r+0x4c>
 800e068:	2300      	movs	r3, #0
 800e06a:	9309      	str	r3, [sp, #36]	; 0x24
 800e06c:	2320      	movs	r3, #32
 800e06e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e072:	f8cd 800c 	str.w	r8, [sp, #12]
 800e076:	2330      	movs	r3, #48	; 0x30
 800e078:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e23c <_vfiprintf_r+0x24c>
 800e07c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e080:	f04f 0901 	mov.w	r9, #1
 800e084:	4623      	mov	r3, r4
 800e086:	469a      	mov	sl, r3
 800e088:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e08c:	b10a      	cbz	r2, 800e092 <_vfiprintf_r+0xa2>
 800e08e:	2a25      	cmp	r2, #37	; 0x25
 800e090:	d1f9      	bne.n	800e086 <_vfiprintf_r+0x96>
 800e092:	ebba 0b04 	subs.w	fp, sl, r4
 800e096:	d00b      	beq.n	800e0b0 <_vfiprintf_r+0xc0>
 800e098:	465b      	mov	r3, fp
 800e09a:	4622      	mov	r2, r4
 800e09c:	4629      	mov	r1, r5
 800e09e:	4630      	mov	r0, r6
 800e0a0:	f7ff ff93 	bl	800dfca <__sfputs_r>
 800e0a4:	3001      	adds	r0, #1
 800e0a6:	f000 80aa 	beq.w	800e1fe <_vfiprintf_r+0x20e>
 800e0aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0ac:	445a      	add	r2, fp
 800e0ae:	9209      	str	r2, [sp, #36]	; 0x24
 800e0b0:	f89a 3000 	ldrb.w	r3, [sl]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	f000 80a2 	beq.w	800e1fe <_vfiprintf_r+0x20e>
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e0c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0c4:	f10a 0a01 	add.w	sl, sl, #1
 800e0c8:	9304      	str	r3, [sp, #16]
 800e0ca:	9307      	str	r3, [sp, #28]
 800e0cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e0d0:	931a      	str	r3, [sp, #104]	; 0x68
 800e0d2:	4654      	mov	r4, sl
 800e0d4:	2205      	movs	r2, #5
 800e0d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0da:	4858      	ldr	r0, [pc, #352]	; (800e23c <_vfiprintf_r+0x24c>)
 800e0dc:	f7f2 f858 	bl	8000190 <memchr>
 800e0e0:	9a04      	ldr	r2, [sp, #16]
 800e0e2:	b9d8      	cbnz	r0, 800e11c <_vfiprintf_r+0x12c>
 800e0e4:	06d1      	lsls	r1, r2, #27
 800e0e6:	bf44      	itt	mi
 800e0e8:	2320      	movmi	r3, #32
 800e0ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0ee:	0713      	lsls	r3, r2, #28
 800e0f0:	bf44      	itt	mi
 800e0f2:	232b      	movmi	r3, #43	; 0x2b
 800e0f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0f8:	f89a 3000 	ldrb.w	r3, [sl]
 800e0fc:	2b2a      	cmp	r3, #42	; 0x2a
 800e0fe:	d015      	beq.n	800e12c <_vfiprintf_r+0x13c>
 800e100:	9a07      	ldr	r2, [sp, #28]
 800e102:	4654      	mov	r4, sl
 800e104:	2000      	movs	r0, #0
 800e106:	f04f 0c0a 	mov.w	ip, #10
 800e10a:	4621      	mov	r1, r4
 800e10c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e110:	3b30      	subs	r3, #48	; 0x30
 800e112:	2b09      	cmp	r3, #9
 800e114:	d94e      	bls.n	800e1b4 <_vfiprintf_r+0x1c4>
 800e116:	b1b0      	cbz	r0, 800e146 <_vfiprintf_r+0x156>
 800e118:	9207      	str	r2, [sp, #28]
 800e11a:	e014      	b.n	800e146 <_vfiprintf_r+0x156>
 800e11c:	eba0 0308 	sub.w	r3, r0, r8
 800e120:	fa09 f303 	lsl.w	r3, r9, r3
 800e124:	4313      	orrs	r3, r2
 800e126:	9304      	str	r3, [sp, #16]
 800e128:	46a2      	mov	sl, r4
 800e12a:	e7d2      	b.n	800e0d2 <_vfiprintf_r+0xe2>
 800e12c:	9b03      	ldr	r3, [sp, #12]
 800e12e:	1d19      	adds	r1, r3, #4
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	9103      	str	r1, [sp, #12]
 800e134:	2b00      	cmp	r3, #0
 800e136:	bfbb      	ittet	lt
 800e138:	425b      	neglt	r3, r3
 800e13a:	f042 0202 	orrlt.w	r2, r2, #2
 800e13e:	9307      	strge	r3, [sp, #28]
 800e140:	9307      	strlt	r3, [sp, #28]
 800e142:	bfb8      	it	lt
 800e144:	9204      	strlt	r2, [sp, #16]
 800e146:	7823      	ldrb	r3, [r4, #0]
 800e148:	2b2e      	cmp	r3, #46	; 0x2e
 800e14a:	d10c      	bne.n	800e166 <_vfiprintf_r+0x176>
 800e14c:	7863      	ldrb	r3, [r4, #1]
 800e14e:	2b2a      	cmp	r3, #42	; 0x2a
 800e150:	d135      	bne.n	800e1be <_vfiprintf_r+0x1ce>
 800e152:	9b03      	ldr	r3, [sp, #12]
 800e154:	1d1a      	adds	r2, r3, #4
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	9203      	str	r2, [sp, #12]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	bfb8      	it	lt
 800e15e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e162:	3402      	adds	r4, #2
 800e164:	9305      	str	r3, [sp, #20]
 800e166:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e24c <_vfiprintf_r+0x25c>
 800e16a:	7821      	ldrb	r1, [r4, #0]
 800e16c:	2203      	movs	r2, #3
 800e16e:	4650      	mov	r0, sl
 800e170:	f7f2 f80e 	bl	8000190 <memchr>
 800e174:	b140      	cbz	r0, 800e188 <_vfiprintf_r+0x198>
 800e176:	2340      	movs	r3, #64	; 0x40
 800e178:	eba0 000a 	sub.w	r0, r0, sl
 800e17c:	fa03 f000 	lsl.w	r0, r3, r0
 800e180:	9b04      	ldr	r3, [sp, #16]
 800e182:	4303      	orrs	r3, r0
 800e184:	3401      	adds	r4, #1
 800e186:	9304      	str	r3, [sp, #16]
 800e188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e18c:	482c      	ldr	r0, [pc, #176]	; (800e240 <_vfiprintf_r+0x250>)
 800e18e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e192:	2206      	movs	r2, #6
 800e194:	f7f1 fffc 	bl	8000190 <memchr>
 800e198:	2800      	cmp	r0, #0
 800e19a:	d03f      	beq.n	800e21c <_vfiprintf_r+0x22c>
 800e19c:	4b29      	ldr	r3, [pc, #164]	; (800e244 <_vfiprintf_r+0x254>)
 800e19e:	bb1b      	cbnz	r3, 800e1e8 <_vfiprintf_r+0x1f8>
 800e1a0:	9b03      	ldr	r3, [sp, #12]
 800e1a2:	3307      	adds	r3, #7
 800e1a4:	f023 0307 	bic.w	r3, r3, #7
 800e1a8:	3308      	adds	r3, #8
 800e1aa:	9303      	str	r3, [sp, #12]
 800e1ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1ae:	443b      	add	r3, r7
 800e1b0:	9309      	str	r3, [sp, #36]	; 0x24
 800e1b2:	e767      	b.n	800e084 <_vfiprintf_r+0x94>
 800e1b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1b8:	460c      	mov	r4, r1
 800e1ba:	2001      	movs	r0, #1
 800e1bc:	e7a5      	b.n	800e10a <_vfiprintf_r+0x11a>
 800e1be:	2300      	movs	r3, #0
 800e1c0:	3401      	adds	r4, #1
 800e1c2:	9305      	str	r3, [sp, #20]
 800e1c4:	4619      	mov	r1, r3
 800e1c6:	f04f 0c0a 	mov.w	ip, #10
 800e1ca:	4620      	mov	r0, r4
 800e1cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1d0:	3a30      	subs	r2, #48	; 0x30
 800e1d2:	2a09      	cmp	r2, #9
 800e1d4:	d903      	bls.n	800e1de <_vfiprintf_r+0x1ee>
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d0c5      	beq.n	800e166 <_vfiprintf_r+0x176>
 800e1da:	9105      	str	r1, [sp, #20]
 800e1dc:	e7c3      	b.n	800e166 <_vfiprintf_r+0x176>
 800e1de:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1e2:	4604      	mov	r4, r0
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	e7f0      	b.n	800e1ca <_vfiprintf_r+0x1da>
 800e1e8:	ab03      	add	r3, sp, #12
 800e1ea:	9300      	str	r3, [sp, #0]
 800e1ec:	462a      	mov	r2, r5
 800e1ee:	4b16      	ldr	r3, [pc, #88]	; (800e248 <_vfiprintf_r+0x258>)
 800e1f0:	a904      	add	r1, sp, #16
 800e1f2:	4630      	mov	r0, r6
 800e1f4:	f7fd fd90 	bl	800bd18 <_printf_float>
 800e1f8:	4607      	mov	r7, r0
 800e1fa:	1c78      	adds	r0, r7, #1
 800e1fc:	d1d6      	bne.n	800e1ac <_vfiprintf_r+0x1bc>
 800e1fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e200:	07d9      	lsls	r1, r3, #31
 800e202:	d405      	bmi.n	800e210 <_vfiprintf_r+0x220>
 800e204:	89ab      	ldrh	r3, [r5, #12]
 800e206:	059a      	lsls	r2, r3, #22
 800e208:	d402      	bmi.n	800e210 <_vfiprintf_r+0x220>
 800e20a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e20c:	f7ff f8e6 	bl	800d3dc <__retarget_lock_release_recursive>
 800e210:	89ab      	ldrh	r3, [r5, #12]
 800e212:	065b      	lsls	r3, r3, #25
 800e214:	f53f af12 	bmi.w	800e03c <_vfiprintf_r+0x4c>
 800e218:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e21a:	e711      	b.n	800e040 <_vfiprintf_r+0x50>
 800e21c:	ab03      	add	r3, sp, #12
 800e21e:	9300      	str	r3, [sp, #0]
 800e220:	462a      	mov	r2, r5
 800e222:	4b09      	ldr	r3, [pc, #36]	; (800e248 <_vfiprintf_r+0x258>)
 800e224:	a904      	add	r1, sp, #16
 800e226:	4630      	mov	r0, r6
 800e228:	f7fe f81a 	bl	800c260 <_printf_i>
 800e22c:	e7e4      	b.n	800e1f8 <_vfiprintf_r+0x208>
 800e22e:	bf00      	nop
 800e230:	0800f608 	.word	0x0800f608
 800e234:	0800f628 	.word	0x0800f628
 800e238:	0800f5e8 	.word	0x0800f5e8
 800e23c:	0800f7a4 	.word	0x0800f7a4
 800e240:	0800f7ae 	.word	0x0800f7ae
 800e244:	0800bd19 	.word	0x0800bd19
 800e248:	0800dfcb 	.word	0x0800dfcb
 800e24c:	0800f7aa 	.word	0x0800f7aa

0800e250 <_sbrk_r>:
 800e250:	b538      	push	{r3, r4, r5, lr}
 800e252:	4d06      	ldr	r5, [pc, #24]	; (800e26c <_sbrk_r+0x1c>)
 800e254:	2300      	movs	r3, #0
 800e256:	4604      	mov	r4, r0
 800e258:	4608      	mov	r0, r1
 800e25a:	602b      	str	r3, [r5, #0]
 800e25c:	f7f5 f90c 	bl	8003478 <_sbrk>
 800e260:	1c43      	adds	r3, r0, #1
 800e262:	d102      	bne.n	800e26a <_sbrk_r+0x1a>
 800e264:	682b      	ldr	r3, [r5, #0]
 800e266:	b103      	cbz	r3, 800e26a <_sbrk_r+0x1a>
 800e268:	6023      	str	r3, [r4, #0]
 800e26a:	bd38      	pop	{r3, r4, r5, pc}
 800e26c:	20000bb4 	.word	0x20000bb4

0800e270 <__sread>:
 800e270:	b510      	push	{r4, lr}
 800e272:	460c      	mov	r4, r1
 800e274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e278:	f000 fad8 	bl	800e82c <_read_r>
 800e27c:	2800      	cmp	r0, #0
 800e27e:	bfab      	itete	ge
 800e280:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e282:	89a3      	ldrhlt	r3, [r4, #12]
 800e284:	181b      	addge	r3, r3, r0
 800e286:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e28a:	bfac      	ite	ge
 800e28c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e28e:	81a3      	strhlt	r3, [r4, #12]
 800e290:	bd10      	pop	{r4, pc}

0800e292 <__swrite>:
 800e292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e296:	461f      	mov	r7, r3
 800e298:	898b      	ldrh	r3, [r1, #12]
 800e29a:	05db      	lsls	r3, r3, #23
 800e29c:	4605      	mov	r5, r0
 800e29e:	460c      	mov	r4, r1
 800e2a0:	4616      	mov	r6, r2
 800e2a2:	d505      	bpl.n	800e2b0 <__swrite+0x1e>
 800e2a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2a8:	2302      	movs	r3, #2
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	f000 f9f8 	bl	800e6a0 <_lseek_r>
 800e2b0:	89a3      	ldrh	r3, [r4, #12]
 800e2b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e2ba:	81a3      	strh	r3, [r4, #12]
 800e2bc:	4632      	mov	r2, r6
 800e2be:	463b      	mov	r3, r7
 800e2c0:	4628      	mov	r0, r5
 800e2c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2c6:	f000 b869 	b.w	800e39c <_write_r>

0800e2ca <__sseek>:
 800e2ca:	b510      	push	{r4, lr}
 800e2cc:	460c      	mov	r4, r1
 800e2ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2d2:	f000 f9e5 	bl	800e6a0 <_lseek_r>
 800e2d6:	1c43      	adds	r3, r0, #1
 800e2d8:	89a3      	ldrh	r3, [r4, #12]
 800e2da:	bf15      	itete	ne
 800e2dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800e2de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e2e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e2e6:	81a3      	strheq	r3, [r4, #12]
 800e2e8:	bf18      	it	ne
 800e2ea:	81a3      	strhne	r3, [r4, #12]
 800e2ec:	bd10      	pop	{r4, pc}

0800e2ee <__sclose>:
 800e2ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2f2:	f000 b8f1 	b.w	800e4d8 <_close_r>
	...

0800e2f8 <__swbuf_r>:
 800e2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2fa:	460e      	mov	r6, r1
 800e2fc:	4614      	mov	r4, r2
 800e2fe:	4605      	mov	r5, r0
 800e300:	b118      	cbz	r0, 800e30a <__swbuf_r+0x12>
 800e302:	6983      	ldr	r3, [r0, #24]
 800e304:	b90b      	cbnz	r3, 800e30a <__swbuf_r+0x12>
 800e306:	f7fe ffc5 	bl	800d294 <__sinit>
 800e30a:	4b21      	ldr	r3, [pc, #132]	; (800e390 <__swbuf_r+0x98>)
 800e30c:	429c      	cmp	r4, r3
 800e30e:	d12b      	bne.n	800e368 <__swbuf_r+0x70>
 800e310:	686c      	ldr	r4, [r5, #4]
 800e312:	69a3      	ldr	r3, [r4, #24]
 800e314:	60a3      	str	r3, [r4, #8]
 800e316:	89a3      	ldrh	r3, [r4, #12]
 800e318:	071a      	lsls	r2, r3, #28
 800e31a:	d52f      	bpl.n	800e37c <__swbuf_r+0x84>
 800e31c:	6923      	ldr	r3, [r4, #16]
 800e31e:	b36b      	cbz	r3, 800e37c <__swbuf_r+0x84>
 800e320:	6923      	ldr	r3, [r4, #16]
 800e322:	6820      	ldr	r0, [r4, #0]
 800e324:	1ac0      	subs	r0, r0, r3
 800e326:	6963      	ldr	r3, [r4, #20]
 800e328:	b2f6      	uxtb	r6, r6
 800e32a:	4283      	cmp	r3, r0
 800e32c:	4637      	mov	r7, r6
 800e32e:	dc04      	bgt.n	800e33a <__swbuf_r+0x42>
 800e330:	4621      	mov	r1, r4
 800e332:	4628      	mov	r0, r5
 800e334:	f000 f966 	bl	800e604 <_fflush_r>
 800e338:	bb30      	cbnz	r0, 800e388 <__swbuf_r+0x90>
 800e33a:	68a3      	ldr	r3, [r4, #8]
 800e33c:	3b01      	subs	r3, #1
 800e33e:	60a3      	str	r3, [r4, #8]
 800e340:	6823      	ldr	r3, [r4, #0]
 800e342:	1c5a      	adds	r2, r3, #1
 800e344:	6022      	str	r2, [r4, #0]
 800e346:	701e      	strb	r6, [r3, #0]
 800e348:	6963      	ldr	r3, [r4, #20]
 800e34a:	3001      	adds	r0, #1
 800e34c:	4283      	cmp	r3, r0
 800e34e:	d004      	beq.n	800e35a <__swbuf_r+0x62>
 800e350:	89a3      	ldrh	r3, [r4, #12]
 800e352:	07db      	lsls	r3, r3, #31
 800e354:	d506      	bpl.n	800e364 <__swbuf_r+0x6c>
 800e356:	2e0a      	cmp	r6, #10
 800e358:	d104      	bne.n	800e364 <__swbuf_r+0x6c>
 800e35a:	4621      	mov	r1, r4
 800e35c:	4628      	mov	r0, r5
 800e35e:	f000 f951 	bl	800e604 <_fflush_r>
 800e362:	b988      	cbnz	r0, 800e388 <__swbuf_r+0x90>
 800e364:	4638      	mov	r0, r7
 800e366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e368:	4b0a      	ldr	r3, [pc, #40]	; (800e394 <__swbuf_r+0x9c>)
 800e36a:	429c      	cmp	r4, r3
 800e36c:	d101      	bne.n	800e372 <__swbuf_r+0x7a>
 800e36e:	68ac      	ldr	r4, [r5, #8]
 800e370:	e7cf      	b.n	800e312 <__swbuf_r+0x1a>
 800e372:	4b09      	ldr	r3, [pc, #36]	; (800e398 <__swbuf_r+0xa0>)
 800e374:	429c      	cmp	r4, r3
 800e376:	bf08      	it	eq
 800e378:	68ec      	ldreq	r4, [r5, #12]
 800e37a:	e7ca      	b.n	800e312 <__swbuf_r+0x1a>
 800e37c:	4621      	mov	r1, r4
 800e37e:	4628      	mov	r0, r5
 800e380:	f000 f81e 	bl	800e3c0 <__swsetup_r>
 800e384:	2800      	cmp	r0, #0
 800e386:	d0cb      	beq.n	800e320 <__swbuf_r+0x28>
 800e388:	f04f 37ff 	mov.w	r7, #4294967295
 800e38c:	e7ea      	b.n	800e364 <__swbuf_r+0x6c>
 800e38e:	bf00      	nop
 800e390:	0800f608 	.word	0x0800f608
 800e394:	0800f628 	.word	0x0800f628
 800e398:	0800f5e8 	.word	0x0800f5e8

0800e39c <_write_r>:
 800e39c:	b538      	push	{r3, r4, r5, lr}
 800e39e:	4d07      	ldr	r5, [pc, #28]	; (800e3bc <_write_r+0x20>)
 800e3a0:	4604      	mov	r4, r0
 800e3a2:	4608      	mov	r0, r1
 800e3a4:	4611      	mov	r1, r2
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	602a      	str	r2, [r5, #0]
 800e3aa:	461a      	mov	r2, r3
 800e3ac:	f7f5 f813 	bl	80033d6 <_write>
 800e3b0:	1c43      	adds	r3, r0, #1
 800e3b2:	d102      	bne.n	800e3ba <_write_r+0x1e>
 800e3b4:	682b      	ldr	r3, [r5, #0]
 800e3b6:	b103      	cbz	r3, 800e3ba <_write_r+0x1e>
 800e3b8:	6023      	str	r3, [r4, #0]
 800e3ba:	bd38      	pop	{r3, r4, r5, pc}
 800e3bc:	20000bb4 	.word	0x20000bb4

0800e3c0 <__swsetup_r>:
 800e3c0:	4b32      	ldr	r3, [pc, #200]	; (800e48c <__swsetup_r+0xcc>)
 800e3c2:	b570      	push	{r4, r5, r6, lr}
 800e3c4:	681d      	ldr	r5, [r3, #0]
 800e3c6:	4606      	mov	r6, r0
 800e3c8:	460c      	mov	r4, r1
 800e3ca:	b125      	cbz	r5, 800e3d6 <__swsetup_r+0x16>
 800e3cc:	69ab      	ldr	r3, [r5, #24]
 800e3ce:	b913      	cbnz	r3, 800e3d6 <__swsetup_r+0x16>
 800e3d0:	4628      	mov	r0, r5
 800e3d2:	f7fe ff5f 	bl	800d294 <__sinit>
 800e3d6:	4b2e      	ldr	r3, [pc, #184]	; (800e490 <__swsetup_r+0xd0>)
 800e3d8:	429c      	cmp	r4, r3
 800e3da:	d10f      	bne.n	800e3fc <__swsetup_r+0x3c>
 800e3dc:	686c      	ldr	r4, [r5, #4]
 800e3de:	89a3      	ldrh	r3, [r4, #12]
 800e3e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3e4:	0719      	lsls	r1, r3, #28
 800e3e6:	d42c      	bmi.n	800e442 <__swsetup_r+0x82>
 800e3e8:	06dd      	lsls	r5, r3, #27
 800e3ea:	d411      	bmi.n	800e410 <__swsetup_r+0x50>
 800e3ec:	2309      	movs	r3, #9
 800e3ee:	6033      	str	r3, [r6, #0]
 800e3f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e3f4:	81a3      	strh	r3, [r4, #12]
 800e3f6:	f04f 30ff 	mov.w	r0, #4294967295
 800e3fa:	e03e      	b.n	800e47a <__swsetup_r+0xba>
 800e3fc:	4b25      	ldr	r3, [pc, #148]	; (800e494 <__swsetup_r+0xd4>)
 800e3fe:	429c      	cmp	r4, r3
 800e400:	d101      	bne.n	800e406 <__swsetup_r+0x46>
 800e402:	68ac      	ldr	r4, [r5, #8]
 800e404:	e7eb      	b.n	800e3de <__swsetup_r+0x1e>
 800e406:	4b24      	ldr	r3, [pc, #144]	; (800e498 <__swsetup_r+0xd8>)
 800e408:	429c      	cmp	r4, r3
 800e40a:	bf08      	it	eq
 800e40c:	68ec      	ldreq	r4, [r5, #12]
 800e40e:	e7e6      	b.n	800e3de <__swsetup_r+0x1e>
 800e410:	0758      	lsls	r0, r3, #29
 800e412:	d512      	bpl.n	800e43a <__swsetup_r+0x7a>
 800e414:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e416:	b141      	cbz	r1, 800e42a <__swsetup_r+0x6a>
 800e418:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e41c:	4299      	cmp	r1, r3
 800e41e:	d002      	beq.n	800e426 <__swsetup_r+0x66>
 800e420:	4630      	mov	r0, r6
 800e422:	f7ff fb7f 	bl	800db24 <_free_r>
 800e426:	2300      	movs	r3, #0
 800e428:	6363      	str	r3, [r4, #52]	; 0x34
 800e42a:	89a3      	ldrh	r3, [r4, #12]
 800e42c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e430:	81a3      	strh	r3, [r4, #12]
 800e432:	2300      	movs	r3, #0
 800e434:	6063      	str	r3, [r4, #4]
 800e436:	6923      	ldr	r3, [r4, #16]
 800e438:	6023      	str	r3, [r4, #0]
 800e43a:	89a3      	ldrh	r3, [r4, #12]
 800e43c:	f043 0308 	orr.w	r3, r3, #8
 800e440:	81a3      	strh	r3, [r4, #12]
 800e442:	6923      	ldr	r3, [r4, #16]
 800e444:	b94b      	cbnz	r3, 800e45a <__swsetup_r+0x9a>
 800e446:	89a3      	ldrh	r3, [r4, #12]
 800e448:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e44c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e450:	d003      	beq.n	800e45a <__swsetup_r+0x9a>
 800e452:	4621      	mov	r1, r4
 800e454:	4630      	mov	r0, r6
 800e456:	f000 f95b 	bl	800e710 <__smakebuf_r>
 800e45a:	89a0      	ldrh	r0, [r4, #12]
 800e45c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e460:	f010 0301 	ands.w	r3, r0, #1
 800e464:	d00a      	beq.n	800e47c <__swsetup_r+0xbc>
 800e466:	2300      	movs	r3, #0
 800e468:	60a3      	str	r3, [r4, #8]
 800e46a:	6963      	ldr	r3, [r4, #20]
 800e46c:	425b      	negs	r3, r3
 800e46e:	61a3      	str	r3, [r4, #24]
 800e470:	6923      	ldr	r3, [r4, #16]
 800e472:	b943      	cbnz	r3, 800e486 <__swsetup_r+0xc6>
 800e474:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e478:	d1ba      	bne.n	800e3f0 <__swsetup_r+0x30>
 800e47a:	bd70      	pop	{r4, r5, r6, pc}
 800e47c:	0781      	lsls	r1, r0, #30
 800e47e:	bf58      	it	pl
 800e480:	6963      	ldrpl	r3, [r4, #20]
 800e482:	60a3      	str	r3, [r4, #8]
 800e484:	e7f4      	b.n	800e470 <__swsetup_r+0xb0>
 800e486:	2000      	movs	r0, #0
 800e488:	e7f7      	b.n	800e47a <__swsetup_r+0xba>
 800e48a:	bf00      	nop
 800e48c:	20000028 	.word	0x20000028
 800e490:	0800f608 	.word	0x0800f608
 800e494:	0800f628 	.word	0x0800f628
 800e498:	0800f5e8 	.word	0x0800f5e8

0800e49c <__assert_func>:
 800e49c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e49e:	4614      	mov	r4, r2
 800e4a0:	461a      	mov	r2, r3
 800e4a2:	4b09      	ldr	r3, [pc, #36]	; (800e4c8 <__assert_func+0x2c>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	4605      	mov	r5, r0
 800e4a8:	68d8      	ldr	r0, [r3, #12]
 800e4aa:	b14c      	cbz	r4, 800e4c0 <__assert_func+0x24>
 800e4ac:	4b07      	ldr	r3, [pc, #28]	; (800e4cc <__assert_func+0x30>)
 800e4ae:	9100      	str	r1, [sp, #0]
 800e4b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e4b4:	4906      	ldr	r1, [pc, #24]	; (800e4d0 <__assert_func+0x34>)
 800e4b6:	462b      	mov	r3, r5
 800e4b8:	f000 f8e0 	bl	800e67c <fiprintf>
 800e4bc:	f000 f9d5 	bl	800e86a <abort>
 800e4c0:	4b04      	ldr	r3, [pc, #16]	; (800e4d4 <__assert_func+0x38>)
 800e4c2:	461c      	mov	r4, r3
 800e4c4:	e7f3      	b.n	800e4ae <__assert_func+0x12>
 800e4c6:	bf00      	nop
 800e4c8:	20000028 	.word	0x20000028
 800e4cc:	0800f7b5 	.word	0x0800f7b5
 800e4d0:	0800f7c2 	.word	0x0800f7c2
 800e4d4:	0800f7f0 	.word	0x0800f7f0

0800e4d8 <_close_r>:
 800e4d8:	b538      	push	{r3, r4, r5, lr}
 800e4da:	4d06      	ldr	r5, [pc, #24]	; (800e4f4 <_close_r+0x1c>)
 800e4dc:	2300      	movs	r3, #0
 800e4de:	4604      	mov	r4, r0
 800e4e0:	4608      	mov	r0, r1
 800e4e2:	602b      	str	r3, [r5, #0]
 800e4e4:	f7f4 ff93 	bl	800340e <_close>
 800e4e8:	1c43      	adds	r3, r0, #1
 800e4ea:	d102      	bne.n	800e4f2 <_close_r+0x1a>
 800e4ec:	682b      	ldr	r3, [r5, #0]
 800e4ee:	b103      	cbz	r3, 800e4f2 <_close_r+0x1a>
 800e4f0:	6023      	str	r3, [r4, #0]
 800e4f2:	bd38      	pop	{r3, r4, r5, pc}
 800e4f4:	20000bb4 	.word	0x20000bb4

0800e4f8 <__sflush_r>:
 800e4f8:	898a      	ldrh	r2, [r1, #12]
 800e4fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4fe:	4605      	mov	r5, r0
 800e500:	0710      	lsls	r0, r2, #28
 800e502:	460c      	mov	r4, r1
 800e504:	d458      	bmi.n	800e5b8 <__sflush_r+0xc0>
 800e506:	684b      	ldr	r3, [r1, #4]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	dc05      	bgt.n	800e518 <__sflush_r+0x20>
 800e50c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e50e:	2b00      	cmp	r3, #0
 800e510:	dc02      	bgt.n	800e518 <__sflush_r+0x20>
 800e512:	2000      	movs	r0, #0
 800e514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e518:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e51a:	2e00      	cmp	r6, #0
 800e51c:	d0f9      	beq.n	800e512 <__sflush_r+0x1a>
 800e51e:	2300      	movs	r3, #0
 800e520:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e524:	682f      	ldr	r7, [r5, #0]
 800e526:	602b      	str	r3, [r5, #0]
 800e528:	d032      	beq.n	800e590 <__sflush_r+0x98>
 800e52a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e52c:	89a3      	ldrh	r3, [r4, #12]
 800e52e:	075a      	lsls	r2, r3, #29
 800e530:	d505      	bpl.n	800e53e <__sflush_r+0x46>
 800e532:	6863      	ldr	r3, [r4, #4]
 800e534:	1ac0      	subs	r0, r0, r3
 800e536:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e538:	b10b      	cbz	r3, 800e53e <__sflush_r+0x46>
 800e53a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e53c:	1ac0      	subs	r0, r0, r3
 800e53e:	2300      	movs	r3, #0
 800e540:	4602      	mov	r2, r0
 800e542:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e544:	6a21      	ldr	r1, [r4, #32]
 800e546:	4628      	mov	r0, r5
 800e548:	47b0      	blx	r6
 800e54a:	1c43      	adds	r3, r0, #1
 800e54c:	89a3      	ldrh	r3, [r4, #12]
 800e54e:	d106      	bne.n	800e55e <__sflush_r+0x66>
 800e550:	6829      	ldr	r1, [r5, #0]
 800e552:	291d      	cmp	r1, #29
 800e554:	d82c      	bhi.n	800e5b0 <__sflush_r+0xb8>
 800e556:	4a2a      	ldr	r2, [pc, #168]	; (800e600 <__sflush_r+0x108>)
 800e558:	40ca      	lsrs	r2, r1
 800e55a:	07d6      	lsls	r6, r2, #31
 800e55c:	d528      	bpl.n	800e5b0 <__sflush_r+0xb8>
 800e55e:	2200      	movs	r2, #0
 800e560:	6062      	str	r2, [r4, #4]
 800e562:	04d9      	lsls	r1, r3, #19
 800e564:	6922      	ldr	r2, [r4, #16]
 800e566:	6022      	str	r2, [r4, #0]
 800e568:	d504      	bpl.n	800e574 <__sflush_r+0x7c>
 800e56a:	1c42      	adds	r2, r0, #1
 800e56c:	d101      	bne.n	800e572 <__sflush_r+0x7a>
 800e56e:	682b      	ldr	r3, [r5, #0]
 800e570:	b903      	cbnz	r3, 800e574 <__sflush_r+0x7c>
 800e572:	6560      	str	r0, [r4, #84]	; 0x54
 800e574:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e576:	602f      	str	r7, [r5, #0]
 800e578:	2900      	cmp	r1, #0
 800e57a:	d0ca      	beq.n	800e512 <__sflush_r+0x1a>
 800e57c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e580:	4299      	cmp	r1, r3
 800e582:	d002      	beq.n	800e58a <__sflush_r+0x92>
 800e584:	4628      	mov	r0, r5
 800e586:	f7ff facd 	bl	800db24 <_free_r>
 800e58a:	2000      	movs	r0, #0
 800e58c:	6360      	str	r0, [r4, #52]	; 0x34
 800e58e:	e7c1      	b.n	800e514 <__sflush_r+0x1c>
 800e590:	6a21      	ldr	r1, [r4, #32]
 800e592:	2301      	movs	r3, #1
 800e594:	4628      	mov	r0, r5
 800e596:	47b0      	blx	r6
 800e598:	1c41      	adds	r1, r0, #1
 800e59a:	d1c7      	bne.n	800e52c <__sflush_r+0x34>
 800e59c:	682b      	ldr	r3, [r5, #0]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d0c4      	beq.n	800e52c <__sflush_r+0x34>
 800e5a2:	2b1d      	cmp	r3, #29
 800e5a4:	d001      	beq.n	800e5aa <__sflush_r+0xb2>
 800e5a6:	2b16      	cmp	r3, #22
 800e5a8:	d101      	bne.n	800e5ae <__sflush_r+0xb6>
 800e5aa:	602f      	str	r7, [r5, #0]
 800e5ac:	e7b1      	b.n	800e512 <__sflush_r+0x1a>
 800e5ae:	89a3      	ldrh	r3, [r4, #12]
 800e5b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5b4:	81a3      	strh	r3, [r4, #12]
 800e5b6:	e7ad      	b.n	800e514 <__sflush_r+0x1c>
 800e5b8:	690f      	ldr	r7, [r1, #16]
 800e5ba:	2f00      	cmp	r7, #0
 800e5bc:	d0a9      	beq.n	800e512 <__sflush_r+0x1a>
 800e5be:	0793      	lsls	r3, r2, #30
 800e5c0:	680e      	ldr	r6, [r1, #0]
 800e5c2:	bf08      	it	eq
 800e5c4:	694b      	ldreq	r3, [r1, #20]
 800e5c6:	600f      	str	r7, [r1, #0]
 800e5c8:	bf18      	it	ne
 800e5ca:	2300      	movne	r3, #0
 800e5cc:	eba6 0807 	sub.w	r8, r6, r7
 800e5d0:	608b      	str	r3, [r1, #8]
 800e5d2:	f1b8 0f00 	cmp.w	r8, #0
 800e5d6:	dd9c      	ble.n	800e512 <__sflush_r+0x1a>
 800e5d8:	6a21      	ldr	r1, [r4, #32]
 800e5da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e5dc:	4643      	mov	r3, r8
 800e5de:	463a      	mov	r2, r7
 800e5e0:	4628      	mov	r0, r5
 800e5e2:	47b0      	blx	r6
 800e5e4:	2800      	cmp	r0, #0
 800e5e6:	dc06      	bgt.n	800e5f6 <__sflush_r+0xfe>
 800e5e8:	89a3      	ldrh	r3, [r4, #12]
 800e5ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5ee:	81a3      	strh	r3, [r4, #12]
 800e5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e5f4:	e78e      	b.n	800e514 <__sflush_r+0x1c>
 800e5f6:	4407      	add	r7, r0
 800e5f8:	eba8 0800 	sub.w	r8, r8, r0
 800e5fc:	e7e9      	b.n	800e5d2 <__sflush_r+0xda>
 800e5fe:	bf00      	nop
 800e600:	20400001 	.word	0x20400001

0800e604 <_fflush_r>:
 800e604:	b538      	push	{r3, r4, r5, lr}
 800e606:	690b      	ldr	r3, [r1, #16]
 800e608:	4605      	mov	r5, r0
 800e60a:	460c      	mov	r4, r1
 800e60c:	b913      	cbnz	r3, 800e614 <_fflush_r+0x10>
 800e60e:	2500      	movs	r5, #0
 800e610:	4628      	mov	r0, r5
 800e612:	bd38      	pop	{r3, r4, r5, pc}
 800e614:	b118      	cbz	r0, 800e61e <_fflush_r+0x1a>
 800e616:	6983      	ldr	r3, [r0, #24]
 800e618:	b90b      	cbnz	r3, 800e61e <_fflush_r+0x1a>
 800e61a:	f7fe fe3b 	bl	800d294 <__sinit>
 800e61e:	4b14      	ldr	r3, [pc, #80]	; (800e670 <_fflush_r+0x6c>)
 800e620:	429c      	cmp	r4, r3
 800e622:	d11b      	bne.n	800e65c <_fflush_r+0x58>
 800e624:	686c      	ldr	r4, [r5, #4]
 800e626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d0ef      	beq.n	800e60e <_fflush_r+0xa>
 800e62e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e630:	07d0      	lsls	r0, r2, #31
 800e632:	d404      	bmi.n	800e63e <_fflush_r+0x3a>
 800e634:	0599      	lsls	r1, r3, #22
 800e636:	d402      	bmi.n	800e63e <_fflush_r+0x3a>
 800e638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e63a:	f7fe fece 	bl	800d3da <__retarget_lock_acquire_recursive>
 800e63e:	4628      	mov	r0, r5
 800e640:	4621      	mov	r1, r4
 800e642:	f7ff ff59 	bl	800e4f8 <__sflush_r>
 800e646:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e648:	07da      	lsls	r2, r3, #31
 800e64a:	4605      	mov	r5, r0
 800e64c:	d4e0      	bmi.n	800e610 <_fflush_r+0xc>
 800e64e:	89a3      	ldrh	r3, [r4, #12]
 800e650:	059b      	lsls	r3, r3, #22
 800e652:	d4dd      	bmi.n	800e610 <_fflush_r+0xc>
 800e654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e656:	f7fe fec1 	bl	800d3dc <__retarget_lock_release_recursive>
 800e65a:	e7d9      	b.n	800e610 <_fflush_r+0xc>
 800e65c:	4b05      	ldr	r3, [pc, #20]	; (800e674 <_fflush_r+0x70>)
 800e65e:	429c      	cmp	r4, r3
 800e660:	d101      	bne.n	800e666 <_fflush_r+0x62>
 800e662:	68ac      	ldr	r4, [r5, #8]
 800e664:	e7df      	b.n	800e626 <_fflush_r+0x22>
 800e666:	4b04      	ldr	r3, [pc, #16]	; (800e678 <_fflush_r+0x74>)
 800e668:	429c      	cmp	r4, r3
 800e66a:	bf08      	it	eq
 800e66c:	68ec      	ldreq	r4, [r5, #12]
 800e66e:	e7da      	b.n	800e626 <_fflush_r+0x22>
 800e670:	0800f608 	.word	0x0800f608
 800e674:	0800f628 	.word	0x0800f628
 800e678:	0800f5e8 	.word	0x0800f5e8

0800e67c <fiprintf>:
 800e67c:	b40e      	push	{r1, r2, r3}
 800e67e:	b503      	push	{r0, r1, lr}
 800e680:	4601      	mov	r1, r0
 800e682:	ab03      	add	r3, sp, #12
 800e684:	4805      	ldr	r0, [pc, #20]	; (800e69c <fiprintf+0x20>)
 800e686:	f853 2b04 	ldr.w	r2, [r3], #4
 800e68a:	6800      	ldr	r0, [r0, #0]
 800e68c:	9301      	str	r3, [sp, #4]
 800e68e:	f7ff fcaf 	bl	800dff0 <_vfiprintf_r>
 800e692:	b002      	add	sp, #8
 800e694:	f85d eb04 	ldr.w	lr, [sp], #4
 800e698:	b003      	add	sp, #12
 800e69a:	4770      	bx	lr
 800e69c:	20000028 	.word	0x20000028

0800e6a0 <_lseek_r>:
 800e6a0:	b538      	push	{r3, r4, r5, lr}
 800e6a2:	4d07      	ldr	r5, [pc, #28]	; (800e6c0 <_lseek_r+0x20>)
 800e6a4:	4604      	mov	r4, r0
 800e6a6:	4608      	mov	r0, r1
 800e6a8:	4611      	mov	r1, r2
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	602a      	str	r2, [r5, #0]
 800e6ae:	461a      	mov	r2, r3
 800e6b0:	f7f4 fed4 	bl	800345c <_lseek>
 800e6b4:	1c43      	adds	r3, r0, #1
 800e6b6:	d102      	bne.n	800e6be <_lseek_r+0x1e>
 800e6b8:	682b      	ldr	r3, [r5, #0]
 800e6ba:	b103      	cbz	r3, 800e6be <_lseek_r+0x1e>
 800e6bc:	6023      	str	r3, [r4, #0]
 800e6be:	bd38      	pop	{r3, r4, r5, pc}
 800e6c0:	20000bb4 	.word	0x20000bb4

0800e6c4 <__swhatbuf_r>:
 800e6c4:	b570      	push	{r4, r5, r6, lr}
 800e6c6:	460e      	mov	r6, r1
 800e6c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6cc:	2900      	cmp	r1, #0
 800e6ce:	b096      	sub	sp, #88	; 0x58
 800e6d0:	4614      	mov	r4, r2
 800e6d2:	461d      	mov	r5, r3
 800e6d4:	da08      	bge.n	800e6e8 <__swhatbuf_r+0x24>
 800e6d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e6da:	2200      	movs	r2, #0
 800e6dc:	602a      	str	r2, [r5, #0]
 800e6de:	061a      	lsls	r2, r3, #24
 800e6e0:	d410      	bmi.n	800e704 <__swhatbuf_r+0x40>
 800e6e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6e6:	e00e      	b.n	800e706 <__swhatbuf_r+0x42>
 800e6e8:	466a      	mov	r2, sp
 800e6ea:	f000 f8c5 	bl	800e878 <_fstat_r>
 800e6ee:	2800      	cmp	r0, #0
 800e6f0:	dbf1      	blt.n	800e6d6 <__swhatbuf_r+0x12>
 800e6f2:	9a01      	ldr	r2, [sp, #4]
 800e6f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e6f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e6fc:	425a      	negs	r2, r3
 800e6fe:	415a      	adcs	r2, r3
 800e700:	602a      	str	r2, [r5, #0]
 800e702:	e7ee      	b.n	800e6e2 <__swhatbuf_r+0x1e>
 800e704:	2340      	movs	r3, #64	; 0x40
 800e706:	2000      	movs	r0, #0
 800e708:	6023      	str	r3, [r4, #0]
 800e70a:	b016      	add	sp, #88	; 0x58
 800e70c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e710 <__smakebuf_r>:
 800e710:	898b      	ldrh	r3, [r1, #12]
 800e712:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e714:	079d      	lsls	r5, r3, #30
 800e716:	4606      	mov	r6, r0
 800e718:	460c      	mov	r4, r1
 800e71a:	d507      	bpl.n	800e72c <__smakebuf_r+0x1c>
 800e71c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e720:	6023      	str	r3, [r4, #0]
 800e722:	6123      	str	r3, [r4, #16]
 800e724:	2301      	movs	r3, #1
 800e726:	6163      	str	r3, [r4, #20]
 800e728:	b002      	add	sp, #8
 800e72a:	bd70      	pop	{r4, r5, r6, pc}
 800e72c:	ab01      	add	r3, sp, #4
 800e72e:	466a      	mov	r2, sp
 800e730:	f7ff ffc8 	bl	800e6c4 <__swhatbuf_r>
 800e734:	9900      	ldr	r1, [sp, #0]
 800e736:	4605      	mov	r5, r0
 800e738:	4630      	mov	r0, r6
 800e73a:	f7ff fa5f 	bl	800dbfc <_malloc_r>
 800e73e:	b948      	cbnz	r0, 800e754 <__smakebuf_r+0x44>
 800e740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e744:	059a      	lsls	r2, r3, #22
 800e746:	d4ef      	bmi.n	800e728 <__smakebuf_r+0x18>
 800e748:	f023 0303 	bic.w	r3, r3, #3
 800e74c:	f043 0302 	orr.w	r3, r3, #2
 800e750:	81a3      	strh	r3, [r4, #12]
 800e752:	e7e3      	b.n	800e71c <__smakebuf_r+0xc>
 800e754:	4b0d      	ldr	r3, [pc, #52]	; (800e78c <__smakebuf_r+0x7c>)
 800e756:	62b3      	str	r3, [r6, #40]	; 0x28
 800e758:	89a3      	ldrh	r3, [r4, #12]
 800e75a:	6020      	str	r0, [r4, #0]
 800e75c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e760:	81a3      	strh	r3, [r4, #12]
 800e762:	9b00      	ldr	r3, [sp, #0]
 800e764:	6163      	str	r3, [r4, #20]
 800e766:	9b01      	ldr	r3, [sp, #4]
 800e768:	6120      	str	r0, [r4, #16]
 800e76a:	b15b      	cbz	r3, 800e784 <__smakebuf_r+0x74>
 800e76c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e770:	4630      	mov	r0, r6
 800e772:	f000 f893 	bl	800e89c <_isatty_r>
 800e776:	b128      	cbz	r0, 800e784 <__smakebuf_r+0x74>
 800e778:	89a3      	ldrh	r3, [r4, #12]
 800e77a:	f023 0303 	bic.w	r3, r3, #3
 800e77e:	f043 0301 	orr.w	r3, r3, #1
 800e782:	81a3      	strh	r3, [r4, #12]
 800e784:	89a0      	ldrh	r0, [r4, #12]
 800e786:	4305      	orrs	r5, r0
 800e788:	81a5      	strh	r5, [r4, #12]
 800e78a:	e7cd      	b.n	800e728 <__smakebuf_r+0x18>
 800e78c:	0800d22d 	.word	0x0800d22d

0800e790 <__ascii_mbtowc>:
 800e790:	b082      	sub	sp, #8
 800e792:	b901      	cbnz	r1, 800e796 <__ascii_mbtowc+0x6>
 800e794:	a901      	add	r1, sp, #4
 800e796:	b142      	cbz	r2, 800e7aa <__ascii_mbtowc+0x1a>
 800e798:	b14b      	cbz	r3, 800e7ae <__ascii_mbtowc+0x1e>
 800e79a:	7813      	ldrb	r3, [r2, #0]
 800e79c:	600b      	str	r3, [r1, #0]
 800e79e:	7812      	ldrb	r2, [r2, #0]
 800e7a0:	1e10      	subs	r0, r2, #0
 800e7a2:	bf18      	it	ne
 800e7a4:	2001      	movne	r0, #1
 800e7a6:	b002      	add	sp, #8
 800e7a8:	4770      	bx	lr
 800e7aa:	4610      	mov	r0, r2
 800e7ac:	e7fb      	b.n	800e7a6 <__ascii_mbtowc+0x16>
 800e7ae:	f06f 0001 	mvn.w	r0, #1
 800e7b2:	e7f8      	b.n	800e7a6 <__ascii_mbtowc+0x16>

0800e7b4 <__malloc_lock>:
 800e7b4:	4801      	ldr	r0, [pc, #4]	; (800e7bc <__malloc_lock+0x8>)
 800e7b6:	f7fe be10 	b.w	800d3da <__retarget_lock_acquire_recursive>
 800e7ba:	bf00      	nop
 800e7bc:	20000ba8 	.word	0x20000ba8

0800e7c0 <__malloc_unlock>:
 800e7c0:	4801      	ldr	r0, [pc, #4]	; (800e7c8 <__malloc_unlock+0x8>)
 800e7c2:	f7fe be0b 	b.w	800d3dc <__retarget_lock_release_recursive>
 800e7c6:	bf00      	nop
 800e7c8:	20000ba8 	.word	0x20000ba8

0800e7cc <_realloc_r>:
 800e7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7d0:	4680      	mov	r8, r0
 800e7d2:	4614      	mov	r4, r2
 800e7d4:	460e      	mov	r6, r1
 800e7d6:	b921      	cbnz	r1, 800e7e2 <_realloc_r+0x16>
 800e7d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7dc:	4611      	mov	r1, r2
 800e7de:	f7ff ba0d 	b.w	800dbfc <_malloc_r>
 800e7e2:	b92a      	cbnz	r2, 800e7f0 <_realloc_r+0x24>
 800e7e4:	f7ff f99e 	bl	800db24 <_free_r>
 800e7e8:	4625      	mov	r5, r4
 800e7ea:	4628      	mov	r0, r5
 800e7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7f0:	f000 f864 	bl	800e8bc <_malloc_usable_size_r>
 800e7f4:	4284      	cmp	r4, r0
 800e7f6:	4607      	mov	r7, r0
 800e7f8:	d802      	bhi.n	800e800 <_realloc_r+0x34>
 800e7fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e7fe:	d812      	bhi.n	800e826 <_realloc_r+0x5a>
 800e800:	4621      	mov	r1, r4
 800e802:	4640      	mov	r0, r8
 800e804:	f7ff f9fa 	bl	800dbfc <_malloc_r>
 800e808:	4605      	mov	r5, r0
 800e80a:	2800      	cmp	r0, #0
 800e80c:	d0ed      	beq.n	800e7ea <_realloc_r+0x1e>
 800e80e:	42bc      	cmp	r4, r7
 800e810:	4622      	mov	r2, r4
 800e812:	4631      	mov	r1, r6
 800e814:	bf28      	it	cs
 800e816:	463a      	movcs	r2, r7
 800e818:	f7fd f9ae 	bl	800bb78 <memcpy>
 800e81c:	4631      	mov	r1, r6
 800e81e:	4640      	mov	r0, r8
 800e820:	f7ff f980 	bl	800db24 <_free_r>
 800e824:	e7e1      	b.n	800e7ea <_realloc_r+0x1e>
 800e826:	4635      	mov	r5, r6
 800e828:	e7df      	b.n	800e7ea <_realloc_r+0x1e>
	...

0800e82c <_read_r>:
 800e82c:	b538      	push	{r3, r4, r5, lr}
 800e82e:	4d07      	ldr	r5, [pc, #28]	; (800e84c <_read_r+0x20>)
 800e830:	4604      	mov	r4, r0
 800e832:	4608      	mov	r0, r1
 800e834:	4611      	mov	r1, r2
 800e836:	2200      	movs	r2, #0
 800e838:	602a      	str	r2, [r5, #0]
 800e83a:	461a      	mov	r2, r3
 800e83c:	f7f4 fdae 	bl	800339c <_read>
 800e840:	1c43      	adds	r3, r0, #1
 800e842:	d102      	bne.n	800e84a <_read_r+0x1e>
 800e844:	682b      	ldr	r3, [r5, #0]
 800e846:	b103      	cbz	r3, 800e84a <_read_r+0x1e>
 800e848:	6023      	str	r3, [r4, #0]
 800e84a:	bd38      	pop	{r3, r4, r5, pc}
 800e84c:	20000bb4 	.word	0x20000bb4

0800e850 <__ascii_wctomb>:
 800e850:	b149      	cbz	r1, 800e866 <__ascii_wctomb+0x16>
 800e852:	2aff      	cmp	r2, #255	; 0xff
 800e854:	bf85      	ittet	hi
 800e856:	238a      	movhi	r3, #138	; 0x8a
 800e858:	6003      	strhi	r3, [r0, #0]
 800e85a:	700a      	strbls	r2, [r1, #0]
 800e85c:	f04f 30ff 	movhi.w	r0, #4294967295
 800e860:	bf98      	it	ls
 800e862:	2001      	movls	r0, #1
 800e864:	4770      	bx	lr
 800e866:	4608      	mov	r0, r1
 800e868:	4770      	bx	lr

0800e86a <abort>:
 800e86a:	b508      	push	{r3, lr}
 800e86c:	2006      	movs	r0, #6
 800e86e:	f000 f855 	bl	800e91c <raise>
 800e872:	2001      	movs	r0, #1
 800e874:	f7f4 fd88 	bl	8003388 <_exit>

0800e878 <_fstat_r>:
 800e878:	b538      	push	{r3, r4, r5, lr}
 800e87a:	4d07      	ldr	r5, [pc, #28]	; (800e898 <_fstat_r+0x20>)
 800e87c:	2300      	movs	r3, #0
 800e87e:	4604      	mov	r4, r0
 800e880:	4608      	mov	r0, r1
 800e882:	4611      	mov	r1, r2
 800e884:	602b      	str	r3, [r5, #0]
 800e886:	f7f4 fdce 	bl	8003426 <_fstat>
 800e88a:	1c43      	adds	r3, r0, #1
 800e88c:	d102      	bne.n	800e894 <_fstat_r+0x1c>
 800e88e:	682b      	ldr	r3, [r5, #0]
 800e890:	b103      	cbz	r3, 800e894 <_fstat_r+0x1c>
 800e892:	6023      	str	r3, [r4, #0]
 800e894:	bd38      	pop	{r3, r4, r5, pc}
 800e896:	bf00      	nop
 800e898:	20000bb4 	.word	0x20000bb4

0800e89c <_isatty_r>:
 800e89c:	b538      	push	{r3, r4, r5, lr}
 800e89e:	4d06      	ldr	r5, [pc, #24]	; (800e8b8 <_isatty_r+0x1c>)
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	4604      	mov	r4, r0
 800e8a4:	4608      	mov	r0, r1
 800e8a6:	602b      	str	r3, [r5, #0]
 800e8a8:	f7f4 fdcd 	bl	8003446 <_isatty>
 800e8ac:	1c43      	adds	r3, r0, #1
 800e8ae:	d102      	bne.n	800e8b6 <_isatty_r+0x1a>
 800e8b0:	682b      	ldr	r3, [r5, #0]
 800e8b2:	b103      	cbz	r3, 800e8b6 <_isatty_r+0x1a>
 800e8b4:	6023      	str	r3, [r4, #0]
 800e8b6:	bd38      	pop	{r3, r4, r5, pc}
 800e8b8:	20000bb4 	.word	0x20000bb4

0800e8bc <_malloc_usable_size_r>:
 800e8bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8c0:	1f18      	subs	r0, r3, #4
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	bfbc      	itt	lt
 800e8c6:	580b      	ldrlt	r3, [r1, r0]
 800e8c8:	18c0      	addlt	r0, r0, r3
 800e8ca:	4770      	bx	lr

0800e8cc <_raise_r>:
 800e8cc:	291f      	cmp	r1, #31
 800e8ce:	b538      	push	{r3, r4, r5, lr}
 800e8d0:	4604      	mov	r4, r0
 800e8d2:	460d      	mov	r5, r1
 800e8d4:	d904      	bls.n	800e8e0 <_raise_r+0x14>
 800e8d6:	2316      	movs	r3, #22
 800e8d8:	6003      	str	r3, [r0, #0]
 800e8da:	f04f 30ff 	mov.w	r0, #4294967295
 800e8de:	bd38      	pop	{r3, r4, r5, pc}
 800e8e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e8e2:	b112      	cbz	r2, 800e8ea <_raise_r+0x1e>
 800e8e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e8e8:	b94b      	cbnz	r3, 800e8fe <_raise_r+0x32>
 800e8ea:	4620      	mov	r0, r4
 800e8ec:	f000 f830 	bl	800e950 <_getpid_r>
 800e8f0:	462a      	mov	r2, r5
 800e8f2:	4601      	mov	r1, r0
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8fa:	f000 b817 	b.w	800e92c <_kill_r>
 800e8fe:	2b01      	cmp	r3, #1
 800e900:	d00a      	beq.n	800e918 <_raise_r+0x4c>
 800e902:	1c59      	adds	r1, r3, #1
 800e904:	d103      	bne.n	800e90e <_raise_r+0x42>
 800e906:	2316      	movs	r3, #22
 800e908:	6003      	str	r3, [r0, #0]
 800e90a:	2001      	movs	r0, #1
 800e90c:	e7e7      	b.n	800e8de <_raise_r+0x12>
 800e90e:	2400      	movs	r4, #0
 800e910:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e914:	4628      	mov	r0, r5
 800e916:	4798      	blx	r3
 800e918:	2000      	movs	r0, #0
 800e91a:	e7e0      	b.n	800e8de <_raise_r+0x12>

0800e91c <raise>:
 800e91c:	4b02      	ldr	r3, [pc, #8]	; (800e928 <raise+0xc>)
 800e91e:	4601      	mov	r1, r0
 800e920:	6818      	ldr	r0, [r3, #0]
 800e922:	f7ff bfd3 	b.w	800e8cc <_raise_r>
 800e926:	bf00      	nop
 800e928:	20000028 	.word	0x20000028

0800e92c <_kill_r>:
 800e92c:	b538      	push	{r3, r4, r5, lr}
 800e92e:	4d07      	ldr	r5, [pc, #28]	; (800e94c <_kill_r+0x20>)
 800e930:	2300      	movs	r3, #0
 800e932:	4604      	mov	r4, r0
 800e934:	4608      	mov	r0, r1
 800e936:	4611      	mov	r1, r2
 800e938:	602b      	str	r3, [r5, #0]
 800e93a:	f7f4 fd15 	bl	8003368 <_kill>
 800e93e:	1c43      	adds	r3, r0, #1
 800e940:	d102      	bne.n	800e948 <_kill_r+0x1c>
 800e942:	682b      	ldr	r3, [r5, #0]
 800e944:	b103      	cbz	r3, 800e948 <_kill_r+0x1c>
 800e946:	6023      	str	r3, [r4, #0]
 800e948:	bd38      	pop	{r3, r4, r5, pc}
 800e94a:	bf00      	nop
 800e94c:	20000bb4 	.word	0x20000bb4

0800e950 <_getpid_r>:
 800e950:	f7f4 bd02 	b.w	8003358 <_getpid>

0800e954 <_init>:
 800e954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e956:	bf00      	nop
 800e958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e95a:	bc08      	pop	{r3}
 800e95c:	469e      	mov	lr, r3
 800e95e:	4770      	bx	lr

0800e960 <_fini>:
 800e960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e962:	bf00      	nop
 800e964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e966:	bc08      	pop	{r3}
 800e968:	469e      	mov	lr, r3
 800e96a:	4770      	bx	lr
