
BLE_WB55_vid12_FromScratch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090f0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08009230  08009230  00019230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080095b8  080095b8  000195b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080095c0  080095c0  000195c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080095c4  080095c4  000195c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000004  080095c8  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000084  08009648  00020084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003e  20000120  080096e1  00020120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000160  0800971f  00020160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 00000084  20000174  08009730  00020174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000394  200001f8  080097b4  000201f8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000058c  080097b4  0002058c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 17 .debug_info   0002be4b  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00005623  00000000  00000000  0004c073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002600  00000000  00000000  00051698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002398  00000000  00000000  00053c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002ba55  00000000  00000000  00056030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00028803  00000000  00000000  00081a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000f62b9  00000000  00000000  000aa288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  001a0541  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000a33c  00000000  00000000  001a0594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f8 	.word	0x200001f8
 800015c:	00000000 	.word	0x00000000
 8000160:	08009218 	.word	0x08009218

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001fc 	.word	0x200001fc
 800017c:	08009218 	.word	0x08009218

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <APPD_EnableCPU2+0x34>)
 800053c:	1d3c      	adds	r4, r7, #4
 800053e:	461d      	mov	r5, r3
 8000540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000544:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000548:	c403      	stmia	r4!, {r0, r1}
 800054a:	8022      	strh	r2, [r4, #0]
 800054c:	3402      	adds	r4, #2
 800054e:	0c13      	lsrs	r3, r2, #16
 8000550:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000552:	f006 fef1 	bl	8007338 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	4618      	mov	r0, r3
 800055a:	f006 f98c 	bl	8006876 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800055e:	bf00      	nop
}
 8000560:	3720      	adds	r7, #32
 8000562:	46bd      	mov	sp, r7
 8000564:	bdb0      	pop	{r4, r5, r7, pc}
 8000566:	bf00      	nop
 8000568:	08009230 	.word	0x08009230

0800056c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000574:	4b07      	ldr	r3, [pc, #28]	; (8000594 <LL_C2_PWR_SetPowerMode+0x28>)
 8000576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800057a:	f023 0207 	bic.w	r2, r3, #7
 800057e:	4905      	ldr	r1, [pc, #20]	; (8000594 <LL_C2_PWR_SetPowerMode+0x28>)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4313      	orrs	r3, r2
 8000584:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	58000400 	.word	0x58000400

08000598 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <LL_EXTI_EnableIT_32_63+0x24>)
 80005a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80005a6:	4905      	ldr	r1, [pc, #20]	; (80005bc <LL_EXTI_EnableIT_32_63+0x24>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4313      	orrs	r3, r2
 80005ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	58000800 	.word	0x58000800

080005c0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80005c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005cc:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80005ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80005d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80005da:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	021b      	lsls	r3, r3, #8
 80005e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005e6:	4313      	orrs	r3, r2
 80005e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	cafecafe 	.word	0xcafecafe

080005fc <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800060e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4313      	orrs	r3, r2
 8000616:	608b      	str	r3, [r1, #8]
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800062c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000630:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800064a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800064e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000652:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800065a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 800066c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000674:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000678:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800067c:	d101      	bne.n	8000682 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800067e:	2301      	movs	r3, #1
 8000680:	e000      	b.n	8000684 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000682:	2300      	movs	r3, #0
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800069a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80006a2:	d101      	bne.n	80006a8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80006a4:	2301      	movs	r3, #1
 80006a6:	e000      	b.n	80006aa <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80006bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80006cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4013      	ands	r3, r2
 80006d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006d8:	68fb      	ldr	r3, [r7, #12]
}
 80006da:	bf00      	nop
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
	...

080006e8 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <LL_DBGMCU_GetRevisionID+0x18>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	0c1b      	lsrs	r3, r3, #16
 80006f2:	b29b      	uxth	r3, r3
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e0042000 	.word	0xe0042000

08000704 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	685a      	ldr	r2, [r3, #4]
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	041b      	lsls	r3, r3, #16
 8000716:	431a      	orrs	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	605a      	str	r2, [r3, #4]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	685a      	ldr	r2, [r3, #4]
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	431a      	orrs	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	605a      	str	r2, [r3, #4]
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr

0800074a <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800074a:	b480      	push	{r7}
 800074c:	b083      	sub	sp, #12
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
 8000752:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	695a      	ldr	r2, [r3, #20]
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	041b      	lsls	r3, r3, #16
 800075c:	431a      	orrs	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	615a      	str	r2, [r3, #20]
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800076e:	b480      	push	{r7}
 8000770:	b083      	sub	sp, #12
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	695a      	ldr	r2, [r3, #20]
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	431a      	orrs	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	615a      	str	r2, [r3, #20]
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	683a      	ldr	r2, [r7, #0]
 800079e:	609a      	str	r2, [r3, #8]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	683a      	ldr	r2, [r7, #0]
 80007ba:	619a      	str	r2, [r3, #24]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	22ff      	movs	r2, #255	; 0xff
 80007d4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80007e2:	b480      	push	{r7}
 80007e4:	b083      	sub	sp, #12
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	22ca      	movs	r2, #202	; 0xca
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2253      	movs	r2, #83	; 0x53
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000802:	b480      	push	{r7}
 8000804:	b083      	sub	sp, #12
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
 800080a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	f023 0207 	bic.w	r2, r3, #7
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	431a      	orrs	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	609a      	str	r2, [r3, #8]
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <MX_APPE_Config+0x18>)
 800082e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000832:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 8000834:	f000 f824 	bl	8000880 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000838:	f000 f864 	bl	8000904 <Config_HSE>

  return;
 800083c:	bf00      	nop
}
 800083e:	bd80      	pop	{r7, pc}
 8000840:	58004000 	.word	0x58004000

08000844 <MX_APPE_Init>:

void MX_APPE_Init( void )
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  System_Init( );       /**< System initialization */
 8000848:	f000 f870 	bl	800092c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 800084c:	f000 f888 	bl	8000960 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000850:	4903      	ldr	r1, [pc, #12]	; (8000860 <MX_APPE_Init+0x1c>)
 8000852:	2000      	movs	r0, #0
 8000854:	f000 fdc0 	bl	80013d8 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000858:	f000 f890 	bl	800097c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 800085c:	bf00      	nop
}
 800085e:	bd80      	pop	{r7, pc}
 8000860:	2000025c 	.word	0x2000025c

08000864 <Init_Smps>:

void Init_Smps( void )
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  return;
 8000868:	bf00      	nop
}
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <Init_Exti>:

void Init_Exti( void )
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63( LL_EXTI_LINE_36 & LL_EXTI_LINE_38 );
 8000876:	2000      	movs	r0, #0
 8000878:	f7ff fe8e 	bl	8000598 <LL_EXTI_EnableIT_32_63>

  return;
 800087c:	bf00      	nop
}
 800087e:	bd80      	pop	{r7, pc}

08000880 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8000884:	f000 f804 	bl	8000890 <Reset_BackupDomain>

  Reset_IPCC();
 8000888:	f000 f81a 	bl	80008c0 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW */

  return;
 800088c:	bf00      	nop
}
 800088e:	bd80      	pop	{r7, pc}

08000890 <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000894:	f7ff fee8 	bl	8000668 <LL_RCC_IsActiveFlag_PINRST>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d00d      	beq.n	80008ba <Reset_BackupDomain+0x2a>
 800089e:	f7ff fef6 	bl	800068e <LL_RCC_IsActiveFlag_SFTRST>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d108      	bne.n	80008ba <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80008a8:	f002 f846 	bl	8002938 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80008ac:	f002 f844 	bl	8002938 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80008b0:	f7ff feb8 	bl	8000624 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80008b4:	f7ff fec7 	bl	8000646 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop
}
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80008c4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c8:	f7ff fef4 	bl	80006b4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80008cc:	213f      	movs	r1, #63	; 0x3f
 80008ce:	480c      	ldr	r0, [pc, #48]	; (8000900 <Reset_IPCC+0x40>)
 80008d0:	f7ff ff5e 	bl	8000790 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80008d4:	213f      	movs	r1, #63	; 0x3f
 80008d6:	480a      	ldr	r0, [pc, #40]	; (8000900 <Reset_IPCC+0x40>)
 80008d8:	f7ff ff68 	bl	80007ac <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80008dc:	213f      	movs	r1, #63	; 0x3f
 80008de:	4808      	ldr	r0, [pc, #32]	; (8000900 <Reset_IPCC+0x40>)
 80008e0:	f7ff ff10 	bl	8000704 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80008e4:	213f      	movs	r1, #63	; 0x3f
 80008e6:	4806      	ldr	r0, [pc, #24]	; (8000900 <Reset_IPCC+0x40>)
 80008e8:	f7ff ff2f 	bl	800074a <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80008ec:	213f      	movs	r1, #63	; 0x3f
 80008ee:	4804      	ldr	r0, [pc, #16]	; (8000900 <Reset_IPCC+0x40>)
 80008f0:	f7ff ff1a 	bl	8000728 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80008f4:	213f      	movs	r1, #63	; 0x3f
 80008f6:	4802      	ldr	r0, [pc, #8]	; (8000900 <Reset_IPCC+0x40>)
 80008f8:	f7ff ff39 	bl	800076e <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80008fc:	bf00      	nop
}
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	58000c00 	.word	0x58000c00

08000904 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800090a:	2000      	movs	r0, #0
 800090c:	f006 fda0 	bl	8007450 <OTP_Read>
 8000910:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d005      	beq.n	8000924 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	799b      	ldrb	r3, [r3, #6]
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fe4f 	bl	80005c0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000922:	bf00      	nop
 8000924:	bf00      	nop
}
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <System_Init>:

static void System_Init( void )
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  Init_Smps( );
 8000930:	f7ff ff98 	bl	8000864 <Init_Smps>

  Init_Exti( );
 8000934:	f7ff ff9d 	bl	8000872 <Init_Exti>

  Init_Rtc( );
 8000938:	f000 f802 	bl	8000940 <Init_Rtc>

  return;
 800093c:	bf00      	nop
}
 800093e:	bd80      	pop	{r7, pc}

08000940 <Init_Rtc>:

static void Init_Rtc( void )
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000944:	4805      	ldr	r0, [pc, #20]	; (800095c <Init_Rtc+0x1c>)
 8000946:	f7ff ff4c 	bl	80007e2 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800094a:	2100      	movs	r1, #0
 800094c:	4803      	ldr	r0, [pc, #12]	; (800095c <Init_Rtc+0x1c>)
 800094e:	f7ff ff58 	bl	8000802 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000952:	4802      	ldr	r0, [pc, #8]	; (800095c <Init_Rtc+0x1c>)
 8000954:	f7ff ff38 	bl	80007c8 <LL_RTC_EnableWriteProtection>

  return;
 8000958:	bf00      	nop
}
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40002800 	.word	0x40002800

08000960 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000964:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000968:	f7ff fe48 	bl	80005fc <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800096c:	f007 fd44 	bl	80083f8 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000970:	2004      	movs	r0, #4
 8000972:	f7ff fdfb 	bl	800056c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000976:	bf00      	nop
}
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000982:	f006 fb23 	bl	8006fcc <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000986:	4a11      	ldr	r2, [pc, #68]	; (80009cc <appe_Tl_Init+0x50>)
 8000988:	2100      	movs	r1, #0
 800098a:	2008      	movs	r0, #8
 800098c:	f007 fe60 	bl	8008650 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <appe_Tl_Init+0x54>)
 8000992:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <appe_Tl_Init+0x58>)
 8000996:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000998:	463b      	mov	r3, r7
 800099a:	4619      	mov	r1, r3
 800099c:	480e      	ldr	r0, [pc, #56]	; (80009d8 <appe_Tl_Init+0x5c>)
 800099e:	f006 f9db 	bl	8006d58 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <appe_Tl_Init+0x60>)
 80009a4:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <appe_Tl_Init+0x64>)
 80009a8:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <appe_Tl_Init+0x68>)
 80009ac:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80009ae:	f240 533c 	movw	r3, #1340	; 0x53c
 80009b2:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80009b4:	f107 0308 	add.w	r3, r7, #8
 80009b8:	4618      	mov	r0, r3
 80009ba:	f006 fc49 	bl	8007250 <TL_MM_Init>

  TL_Enable();
 80009be:	f006 faff 	bl	8006fc0 <TL_Enable>

  return;
 80009c2:	bf00      	nop
}
 80009c4:	3720      	adds	r7, #32
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	08006d91 	.word	0x08006d91
 80009d0:	20030724 	.word	0x20030724
 80009d4:	080009e9 	.word	0x080009e9
 80009d8:	08000a01 	.word	0x08000a01
 80009dc:	2003093c 	.word	0x2003093c
 80009e0:	20030830 	.word	0x20030830
 80009e4:	200301e8 	.word	0x200301e8

080009e8 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80009f2:	bf00      	nop
}
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
	...

08000a00 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	330b      	adds	r3, #11
 8000a0e:	61fb      	str	r3, [r7, #28]

  /* Read the firmware version of both the wireless firmware and the FUS */
  SHCI_GetWirelessFwInfo( &WirelessInfo );
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	4618      	mov	r0, r3
 8000a16:	f005 ff5b 	bl	80068d0 <SHCI_GetWirelessFwInfo>
  APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
  APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
  APP_DBG_MSG("FUS version %d.%d.%d\n\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

  switch(p_sys_event->subevtcode)
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000a24:	2b07      	cmp	r3, #7
 8000a26:	d81b      	bhi.n	8000a60 <APPE_SysUserEvtRx+0x60>
 8000a28:	a201      	add	r2, pc, #4	; (adr r2, 8000a30 <APPE_SysUserEvtRx+0x30>)
 8000a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2e:	bf00      	nop
 8000a30:	08000a51 	.word	0x08000a51
 8000a34:	08000a59 	.word	0x08000a59
 8000a38:	08000a61 	.word	0x08000a61
 8000a3c:	08000a61 	.word	0x08000a61
 8000a40:	08000a61 	.word	0x08000a61
 8000a44:	08000a61 	.word	0x08000a61
 8000a48:	08000a61 	.word	0x08000a61
 8000a4c:	08000a61 	.word	0x08000a61
  {
  case SHCI_SUB_EVT_CODE_READY:
    APPE_SysEvtReadyProcessing(pPayload);
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f000 f81c 	bl	8000a8e <APPE_SysEvtReadyProcessing>
    break;
 8000a56:	e004      	b.n	8000a62 <APPE_SysUserEvtRx+0x62>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APPE_SysEvtError(pPayload);
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f000 f807 	bl	8000a6c <APPE_SysEvtError>
    break;
 8000a5e:	e000      	b.n	8000a62 <APPE_SysUserEvtRx+0x62>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_ERASE\n");
    break;

  default:
    break;
 8000a60:	bf00      	nop
  }

  return;
 8000a62:	bf00      	nop
}
 8000a64:	3720      	adds	r7, #32
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop

08000a6c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( void * pPayload)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	330b      	adds	r3, #11
 8000a7a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	3302      	adds	r3, #2
 8000a80:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000a82:	bf00      	nop
}
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void * pPayload )
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b08a      	sub	sp, #40	; 0x28
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	330b      	adds	r3, #11
 8000aae:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000ab0:	6a3b      	ldr	r3, [r7, #32]
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	61fb      	str	r3, [r7, #28]

  if(p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d117      	bne.n	8000aee <APPE_SysEvtReadyProcessing+0x60>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2( );
 8000abe:	f7ff fd39 	bl	8000534 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000ac2:	230d      	movs	r3, #13
 8000ac4:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000ac6:	237f      	movs	r3, #127	; 0x7f
 8000ac8:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000aca:	f7ff fe0d 	bl	80006e8 <LL_DBGMCU_GetRevisionID>
 8000ace:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG("DBGMCU_GetRevisionID= %lx \n\n", RevisionID);

    config_param.RevisionID = RevisionID;
 8000ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	4618      	mov	r0, r3
 8000adc:	f005 fee2 	bl	80068a4 <SHCI_C2_Config>

    APP_BLE_Init( );
 8000ae0:	f006 fdc0 	bl	8007664 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f007 fc98 	bl	800841c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n");
  }

  return;
 8000aec:	e007      	b.n	8000afe <APPE_SysEvtReadyProcessing+0x70>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d103      	bne.n	8000afe <APPE_SysEvtReadyProcessing+0x70>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
  return;
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
}
 8000b00:	3728      	adds	r7, #40	; 0x28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <MX_APPE_Process>:
    __WFI( );
  }
}

void MX_APPE_Process(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0e:	f007 fcb5 	bl	800847c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8000b1a:	bf00      	nop
}
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b32:	f007 fca3 	bl	800847c <UTIL_SEQ_Run>

  return;
 8000b36:	bf00      	nop
}
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000b46:	2100      	movs	r1, #0
 8000b48:	2008      	movs	r0, #8
 8000b4a:	f007 fda3 	bl	8008694 <UTIL_SEQ_SetTask>
  return;
 8000b4e:	bf00      	nop
}
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000b5e:	2002      	movs	r0, #2
 8000b60:	f007 fe04 	bl	800876c <UTIL_SEQ_SetEvt>
  return;
 8000b64:	bf00      	nop
}
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000b74:	2002      	movs	r0, #2
 8000b76:	f007 fe19 	bl	80087ac <UTIL_SEQ_WaitEvt>
  return;
 8000b7a:	bf00      	nop
}
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <LL_EXTI_EnableIT_0_31>:
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <LL_EXTI_EnableIT_0_31+0x24>)
 8000b8e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000b92:	4905      	ldr	r1, [pc, #20]	; (8000ba8 <LL_EXTI_EnableIT_0_31+0x24>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	58000800 	.word	0x58000800

08000bac <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4904      	ldr	r1, [pc, #16]	; (8000bcc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	600b      	str	r3, [r1, #0]

}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	58000800 	.word	0x58000800

08000bd0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <ReadRtcSsrValue+0x3c>)
 8000bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <ReadRtcSsrValue+0x3c>)
 8000be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000be6:	e005      	b.n	8000bf4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000bec:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <ReadRtcSsrValue+0x3c>)
 8000bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d1f5      	bne.n	8000be8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000bfc:	683b      	ldr	r3, [r7, #0]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	40002800 	.word	0x40002800

08000c10 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	460a      	mov	r2, r1
 8000c1a:	71fb      	strb	r3, [r7, #7]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000c20:	79ba      	ldrb	r2, [r7, #6]
 8000c22:	491d      	ldr	r1, [pc, #116]	; (8000c98 <LinkTimerAfter+0x88>)
 8000c24:	4613      	mov	r3, r2
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	4413      	add	r3, r2
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	440b      	add	r3, r1
 8000c2e:	3315      	adds	r3, #21
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
 8000c36:	2b06      	cmp	r3, #6
 8000c38:	d009      	beq.n	8000c4e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000c3a:	7bfa      	ldrb	r2, [r7, #15]
 8000c3c:	4916      	ldr	r1, [pc, #88]	; (8000c98 <LinkTimerAfter+0x88>)
 8000c3e:	4613      	mov	r3, r2
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	4413      	add	r3, r2
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	440b      	add	r3, r1
 8000c48:	3314      	adds	r3, #20
 8000c4a:	79fa      	ldrb	r2, [r7, #7]
 8000c4c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000c4e:	79fa      	ldrb	r2, [r7, #7]
 8000c50:	4911      	ldr	r1, [pc, #68]	; (8000c98 <LinkTimerAfter+0x88>)
 8000c52:	4613      	mov	r3, r2
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	4413      	add	r3, r2
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	440b      	add	r3, r1
 8000c5c:	3315      	adds	r3, #21
 8000c5e:	7bfa      	ldrb	r2, [r7, #15]
 8000c60:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000c62:	79fa      	ldrb	r2, [r7, #7]
 8000c64:	490c      	ldr	r1, [pc, #48]	; (8000c98 <LinkTimerAfter+0x88>)
 8000c66:	4613      	mov	r3, r2
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	4413      	add	r3, r2
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	440b      	add	r3, r1
 8000c70:	3314      	adds	r3, #20
 8000c72:	79ba      	ldrb	r2, [r7, #6]
 8000c74:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000c76:	79ba      	ldrb	r2, [r7, #6]
 8000c78:	4907      	ldr	r1, [pc, #28]	; (8000c98 <LinkTimerAfter+0x88>)
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	4413      	add	r3, r2
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	440b      	add	r3, r1
 8000c84:	3315      	adds	r3, #21
 8000c86:	79fa      	ldrb	r2, [r7, #7]
 8000c88:	701a      	strb	r2, [r3, #0]

  return;
 8000c8a:	bf00      	nop
}
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000084 	.word	0x20000084

08000c9c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	460a      	mov	r2, r1
 8000ca6:	71fb      	strb	r3, [r7, #7]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000cac:	4b29      	ldr	r3, [pc, #164]	; (8000d54 <LinkTimerBefore+0xb8>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	79ba      	ldrb	r2, [r7, #6]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d032      	beq.n	8000d1e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000cb8:	79ba      	ldrb	r2, [r7, #6]
 8000cba:	4927      	ldr	r1, [pc, #156]	; (8000d58 <LinkTimerBefore+0xbc>)
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	4413      	add	r3, r2
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	440b      	add	r3, r1
 8000cc6:	3314      	adds	r3, #20
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000ccc:	7bfa      	ldrb	r2, [r7, #15]
 8000cce:	4922      	ldr	r1, [pc, #136]	; (8000d58 <LinkTimerBefore+0xbc>)
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	440b      	add	r3, r1
 8000cda:	3315      	adds	r3, #21
 8000cdc:	79fa      	ldrb	r2, [r7, #7]
 8000cde:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000ce0:	79fa      	ldrb	r2, [r7, #7]
 8000ce2:	491d      	ldr	r1, [pc, #116]	; (8000d58 <LinkTimerBefore+0xbc>)
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	4413      	add	r3, r2
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	440b      	add	r3, r1
 8000cee:	3315      	adds	r3, #21
 8000cf0:	79ba      	ldrb	r2, [r7, #6]
 8000cf2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000cf4:	79fa      	ldrb	r2, [r7, #7]
 8000cf6:	4918      	ldr	r1, [pc, #96]	; (8000d58 <LinkTimerBefore+0xbc>)
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	4413      	add	r3, r2
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	440b      	add	r3, r1
 8000d02:	3314      	adds	r3, #20
 8000d04:	7bfa      	ldrb	r2, [r7, #15]
 8000d06:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000d08:	79ba      	ldrb	r2, [r7, #6]
 8000d0a:	4913      	ldr	r1, [pc, #76]	; (8000d58 <LinkTimerBefore+0xbc>)
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	4413      	add	r3, r2
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	440b      	add	r3, r1
 8000d16:	3314      	adds	r3, #20
 8000d18:	79fa      	ldrb	r2, [r7, #7]
 8000d1a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000d1c:	e014      	b.n	8000d48 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000d1e:	79fa      	ldrb	r2, [r7, #7]
 8000d20:	490d      	ldr	r1, [pc, #52]	; (8000d58 <LinkTimerBefore+0xbc>)
 8000d22:	4613      	mov	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	440b      	add	r3, r1
 8000d2c:	3315      	adds	r3, #21
 8000d2e:	79ba      	ldrb	r2, [r7, #6]
 8000d30:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000d32:	79ba      	ldrb	r2, [r7, #6]
 8000d34:	4908      	ldr	r1, [pc, #32]	; (8000d58 <LinkTimerBefore+0xbc>)
 8000d36:	4613      	mov	r3, r2
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	4413      	add	r3, r2
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	440b      	add	r3, r1
 8000d40:	3314      	adds	r3, #20
 8000d42:	79fa      	ldrb	r2, [r7, #7]
 8000d44:	701a      	strb	r2, [r3, #0]
  return;
 8000d46:	bf00      	nop
}
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000114 	.word	0x20000114
 8000d58:	20000084 	.word	0x20000084

08000d5c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d66:	4b4e      	ldr	r3, [pc, #312]	; (8000ea0 <linkTimer+0x144>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2b06      	cmp	r3, #6
 8000d6e:	d118      	bne.n	8000da2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000d70:	4b4b      	ldr	r3, [pc, #300]	; (8000ea0 <linkTimer+0x144>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4b4b      	ldr	r3, [pc, #300]	; (8000ea4 <linkTimer+0x148>)
 8000d78:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000d7a:	4a49      	ldr	r2, [pc, #292]	; (8000ea0 <linkTimer+0x144>)
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000d80:	79fa      	ldrb	r2, [r7, #7]
 8000d82:	4949      	ldr	r1, [pc, #292]	; (8000ea8 <linkTimer+0x14c>)
 8000d84:	4613      	mov	r3, r2
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	4413      	add	r3, r2
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	440b      	add	r3, r1
 8000d8e:	3315      	adds	r3, #21
 8000d90:	2206      	movs	r2, #6
 8000d92:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000d94:	4b45      	ldr	r3, [pc, #276]	; (8000eac <linkTimer+0x150>)
 8000d96:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	81fb      	strh	r3, [r7, #14]
 8000da0:	e078      	b.n	8000e94 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000da2:	f000 f909 	bl	8000fb8 <ReturnTimeElapsed>
 8000da6:	4603      	mov	r3, r0
 8000da8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000daa:	79fa      	ldrb	r2, [r7, #7]
 8000dac:	493e      	ldr	r1, [pc, #248]	; (8000ea8 <linkTimer+0x14c>)
 8000dae:	4613      	mov	r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	4413      	add	r3, r2
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	440b      	add	r3, r1
 8000db8:	3308      	adds	r3, #8
 8000dba:	6819      	ldr	r1, [r3, #0]
 8000dbc:	89fb      	ldrh	r3, [r7, #14]
 8000dbe:	79fa      	ldrb	r2, [r7, #7]
 8000dc0:	4419      	add	r1, r3
 8000dc2:	4839      	ldr	r0, [pc, #228]	; (8000ea8 <linkTimer+0x14c>)
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	4413      	add	r3, r2
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	4403      	add	r3, r0
 8000dce:	3308      	adds	r3, #8
 8000dd0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000dd2:	79fa      	ldrb	r2, [r7, #7]
 8000dd4:	4934      	ldr	r1, [pc, #208]	; (8000ea8 <linkTimer+0x14c>)
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	4413      	add	r3, r2
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	440b      	add	r3, r1
 8000de0:	3308      	adds	r3, #8
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000de6:	4b2e      	ldr	r3, [pc, #184]	; (8000ea0 <linkTimer+0x144>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	4619      	mov	r1, r3
 8000dee:	4a2e      	ldr	r2, [pc, #184]	; (8000ea8 <linkTimer+0x14c>)
 8000df0:	460b      	mov	r3, r1
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	440b      	add	r3, r1
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	4413      	add	r3, r2
 8000dfa:	3308      	adds	r3, #8
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d337      	bcc.n	8000e74 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000e04:	4b26      	ldr	r3, [pc, #152]	; (8000ea0 <linkTimer+0x144>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000e0a:	7b7a      	ldrb	r2, [r7, #13]
 8000e0c:	4926      	ldr	r1, [pc, #152]	; (8000ea8 <linkTimer+0x14c>)
 8000e0e:	4613      	mov	r3, r2
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	4413      	add	r3, r2
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	440b      	add	r3, r1
 8000e18:	3315      	adds	r3, #21
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000e1e:	e013      	b.n	8000e48 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000e20:	7b7a      	ldrb	r2, [r7, #13]
 8000e22:	4921      	ldr	r1, [pc, #132]	; (8000ea8 <linkTimer+0x14c>)
 8000e24:	4613      	mov	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4413      	add	r3, r2
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	440b      	add	r3, r1
 8000e2e:	3315      	adds	r3, #21
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000e34:	7b7a      	ldrb	r2, [r7, #13]
 8000e36:	491c      	ldr	r1, [pc, #112]	; (8000ea8 <linkTimer+0x14c>)
 8000e38:	4613      	mov	r3, r2
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	4413      	add	r3, r2
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	440b      	add	r3, r1
 8000e42:	3315      	adds	r3, #21
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000e48:	7b3b      	ldrb	r3, [r7, #12]
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d00b      	beq.n	8000e66 <linkTimer+0x10a>
 8000e4e:	7b3a      	ldrb	r2, [r7, #12]
 8000e50:	4915      	ldr	r1, [pc, #84]	; (8000ea8 <linkTimer+0x14c>)
 8000e52:	4613      	mov	r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	4413      	add	r3, r2
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	440b      	add	r3, r1
 8000e5c:	3308      	adds	r3, #8
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	68ba      	ldr	r2, [r7, #8]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d2dc      	bcs.n	8000e20 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000e66:	7b7a      	ldrb	r2, [r7, #13]
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fecf 	bl	8000c10 <LinkTimerAfter>
 8000e72:	e00f      	b.n	8000e94 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <linkTimer+0x144>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ff0c 	bl	8000c9c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <linkTimer+0x144>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <linkTimer+0x148>)
 8000e8c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <linkTimer+0x144>)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000e94:	89fb      	ldrh	r3, [r7, #14]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000114 	.word	0x20000114
 8000ea4:	20000115 	.word	0x20000115
 8000ea8:	20000084 	.word	0x20000084
 8000eac:	20000118 	.word	0x20000118

08000eb0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	460a      	mov	r2, r1
 8000eba:	71fb      	strb	r3, [r7, #7]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000ec0:	4b39      	ldr	r3, [pc, #228]	; (8000fa8 <UnlinkTimer+0xf8>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	79fa      	ldrb	r2, [r7, #7]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d111      	bne.n	8000ef0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000ecc:	4b36      	ldr	r3, [pc, #216]	; (8000fa8 <UnlinkTimer+0xf8>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4b36      	ldr	r3, [pc, #216]	; (8000fac <UnlinkTimer+0xfc>)
 8000ed4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000ed6:	79fa      	ldrb	r2, [r7, #7]
 8000ed8:	4935      	ldr	r1, [pc, #212]	; (8000fb0 <UnlinkTimer+0x100>)
 8000eda:	4613      	mov	r3, r2
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	4413      	add	r3, r2
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	440b      	add	r3, r1
 8000ee4:	3315      	adds	r3, #21
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4b2f      	ldr	r3, [pc, #188]	; (8000fa8 <UnlinkTimer+0xf8>)
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	e03e      	b.n	8000f6e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000ef0:	79fa      	ldrb	r2, [r7, #7]
 8000ef2:	492f      	ldr	r1, [pc, #188]	; (8000fb0 <UnlinkTimer+0x100>)
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	4413      	add	r3, r2
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	440b      	add	r3, r1
 8000efe:	3314      	adds	r3, #20
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000f04:	79fa      	ldrb	r2, [r7, #7]
 8000f06:	492a      	ldr	r1, [pc, #168]	; (8000fb0 <UnlinkTimer+0x100>)
 8000f08:	4613      	mov	r3, r2
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	4413      	add	r3, r2
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	440b      	add	r3, r1
 8000f12:	3315      	adds	r3, #21
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000f18:	79f9      	ldrb	r1, [r7, #7]
 8000f1a:	7bfa      	ldrb	r2, [r7, #15]
 8000f1c:	4824      	ldr	r0, [pc, #144]	; (8000fb0 <UnlinkTimer+0x100>)
 8000f1e:	460b      	mov	r3, r1
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	440b      	add	r3, r1
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	4403      	add	r3, r0
 8000f28:	3315      	adds	r3, #21
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b2d8      	uxtb	r0, r3
 8000f2e:	4920      	ldr	r1, [pc, #128]	; (8000fb0 <UnlinkTimer+0x100>)
 8000f30:	4613      	mov	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	4413      	add	r3, r2
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	440b      	add	r3, r1
 8000f3a:	3315      	adds	r3, #21
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f40:	7bbb      	ldrb	r3, [r7, #14]
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d013      	beq.n	8000f6e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000f46:	79f9      	ldrb	r1, [r7, #7]
 8000f48:	7bba      	ldrb	r2, [r7, #14]
 8000f4a:	4819      	ldr	r0, [pc, #100]	; (8000fb0 <UnlinkTimer+0x100>)
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	440b      	add	r3, r1
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	4403      	add	r3, r0
 8000f56:	3314      	adds	r3, #20
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	b2d8      	uxtb	r0, r3
 8000f5c:	4914      	ldr	r1, [pc, #80]	; (8000fb0 <UnlinkTimer+0x100>)
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	440b      	add	r3, r1
 8000f68:	3314      	adds	r3, #20
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000f6e:	79fa      	ldrb	r2, [r7, #7]
 8000f70:	490f      	ldr	r1, [pc, #60]	; (8000fb0 <UnlinkTimer+0x100>)
 8000f72:	4613      	mov	r3, r2
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	4413      	add	r3, r2
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	440b      	add	r3, r1
 8000f7c:	330c      	adds	r3, #12
 8000f7e:	2201      	movs	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <UnlinkTimer+0xf8>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b06      	cmp	r3, #6
 8000f8a:	d107      	bne.n	8000f9c <UnlinkTimer+0xec>
 8000f8c:	79bb      	ldrb	r3, [r7, #6]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d104      	bne.n	8000f9c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <UnlinkTimer+0x104>)
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	601a      	str	r2, [r3, #0]
  }

  return;
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
}
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	20000114 	.word	0x20000114
 8000fac:	20000115 	.word	0x20000115
 8000fb0:	20000084 	.word	0x20000084
 8000fb4:	20000118 	.word	0x20000118

08000fb8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000fbe:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <ReturnTimeElapsed+0x70>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc6:	d026      	beq.n	8001016 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000fc8:	f7ff fe02 	bl	8000bd0 <ReadRtcSsrValue>
 8000fcc:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000fce:	4b16      	ldr	r3, [pc, #88]	; (8001028 <ReturnTimeElapsed+0x70>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d805      	bhi.n	8000fe4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <ReturnTimeElapsed+0x70>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	e00a      	b.n	8000ffa <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <ReturnTimeElapsed+0x74>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <ReturnTimeElapsed+0x70>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	683a      	ldr	r2, [r7, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <ReturnTimeElapsed+0x78>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	fb02 f303 	mul.w	r3, r2, r3
 8001006:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001008:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <ReturnTimeElapsed+0x7c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	40d3      	lsrs	r3, r2
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	e001      	b.n	800101a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	b29b      	uxth	r3, r3
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000118 	.word	0x20000118
 800102c:	2000021a 	.word	0x2000021a
 8001030:	20000219 	.word	0x20000219
 8001034:	20000218 	.word	0x20000218

08001038 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d108      	bne.n	800105a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001048:	f7ff fdc2 	bl	8000bd0 <ReadRtcSsrValue>
 800104c:	4603      	mov	r3, r0
 800104e:	4a24      	ldr	r2, [pc, #144]	; (80010e0 <RestartWakeupCounter+0xa8>)
 8001050:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001052:	2003      	movs	r0, #3
 8001054:	f001 f9ef 	bl	8002436 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001058:	e03e      	b.n	80010d8 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d803      	bhi.n	8001068 <RestartWakeupCounter+0x30>
 8001060:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <RestartWakeupCounter+0xac>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d002      	beq.n	800106e <RestartWakeupCounter+0x36>
      Value -= 1;
 8001068:	88fb      	ldrh	r3, [r7, #6]
 800106a:	3b01      	subs	r3, #1
 800106c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800106e:	bf00      	nop
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <RestartWakeupCounter+0xb0>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	f003 0304 	and.w	r3, r3, #4
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0f7      	beq.n	8001070 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001080:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <RestartWakeupCounter+0xb0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <RestartWakeupCounter+0xb0>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001094:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <RestartWakeupCounter+0xb4>)
 8001098:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800109c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800109e:	2003      	movs	r0, #3
 80010a0:	f001 f9d7 	bl	8002452 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <RestartWakeupCounter+0xb8>)
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	0c1b      	lsrs	r3, r3, #16
 80010aa:	041b      	lsls	r3, r3, #16
 80010ac:	88fa      	ldrh	r2, [r7, #6]
 80010ae:	4910      	ldr	r1, [pc, #64]	; (80010f0 <RestartWakeupCounter+0xb8>)
 80010b0:	4313      	orrs	r3, r2
 80010b2:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80010b4:	f7ff fd8c 	bl	8000bd0 <ReadRtcSsrValue>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4a09      	ldr	r2, [pc, #36]	; (80010e0 <RestartWakeupCounter+0xa8>)
 80010bc:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <RestartWakeupCounter+0xb0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <RestartWakeupCounter+0xb0>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80010d0:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80010d2:	f3af 8000 	nop.w
  return ;
 80010d6:	bf00      	nop
}
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000118 	.word	0x20000118
 80010e4:	20000218 	.word	0x20000218
 80010e8:	20000214 	.word	0x20000214
 80010ec:	58000800 	.word	0x58000800
 80010f0:	40002800 	.word	0x40002800

080010f4 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80010fa:	4b47      	ldr	r3, [pc, #284]	; (8001218 <RescheduleTimerList+0x124>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001106:	d108      	bne.n	800111a <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001108:	bf00      	nop
 800110a:	4b44      	ldr	r3, [pc, #272]	; (800121c <RescheduleTimerList+0x128>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f7      	bne.n	800110a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800111a:	4b40      	ldr	r3, [pc, #256]	; (800121c <RescheduleTimerList+0x128>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	4b3e      	ldr	r3, [pc, #248]	; (800121c <RescheduleTimerList+0x128>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800112c:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800112e:	4b3c      	ldr	r3, [pc, #240]	; (8001220 <RescheduleTimerList+0x12c>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001134:	7bfa      	ldrb	r2, [r7, #15]
 8001136:	493b      	ldr	r1, [pc, #236]	; (8001224 <RescheduleTimerList+0x130>)
 8001138:	4613      	mov	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	4413      	add	r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	440b      	add	r3, r1
 8001142:	3308      	adds	r3, #8
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001148:	f7ff ff36 	bl	8000fb8 <ReturnTimeElapsed>
 800114c:	4603      	mov	r3, r0
 800114e:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001150:	88fb      	ldrh	r3, [r7, #6]
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	429a      	cmp	r2, r3
 8001156:	d205      	bcs.n	8001164 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800115c:	4b32      	ldr	r3, [pc, #200]	; (8001228 <RescheduleTimerList+0x134>)
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
 8001162:	e04d      	b.n	8001200 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	4a31      	ldr	r2, [pc, #196]	; (800122c <RescheduleTimerList+0x138>)
 8001168:	8812      	ldrh	r2, [r2, #0]
 800116a:	b292      	uxth	r2, r2
 800116c:	4413      	add	r3, r2
 800116e:	461a      	mov	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	4293      	cmp	r3, r2
 8001174:	d906      	bls.n	8001184 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001176:	4b2d      	ldr	r3, [pc, #180]	; (800122c <RescheduleTimerList+0x138>)
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800117c:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <RescheduleTimerList+0x134>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
 8001182:	e03d      	b.n	8001200 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	b29a      	uxth	r2, r3
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800118e:	4b26      	ldr	r3, [pc, #152]	; (8001228 <RescheduleTimerList+0x134>)
 8001190:	2201      	movs	r2, #1
 8001192:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001194:	e034      	b.n	8001200 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001196:	7bfa      	ldrb	r2, [r7, #15]
 8001198:	4922      	ldr	r1, [pc, #136]	; (8001224 <RescheduleTimerList+0x130>)
 800119a:	4613      	mov	r3, r2
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	4413      	add	r3, r2
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	440b      	add	r3, r1
 80011a4:	3308      	adds	r3, #8
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d20a      	bcs.n	80011c4 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80011ae:	7bfa      	ldrb	r2, [r7, #15]
 80011b0:	491c      	ldr	r1, [pc, #112]	; (8001224 <RescheduleTimerList+0x130>)
 80011b2:	4613      	mov	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4413      	add	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	440b      	add	r3, r1
 80011bc:	3308      	adds	r3, #8
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	e013      	b.n	80011ec <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80011c4:	7bfa      	ldrb	r2, [r7, #15]
 80011c6:	4917      	ldr	r1, [pc, #92]	; (8001224 <RescheduleTimerList+0x130>)
 80011c8:	4613      	mov	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	4413      	add	r3, r2
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	440b      	add	r3, r1
 80011d2:	3308      	adds	r3, #8
 80011d4:	6819      	ldr	r1, [r3, #0]
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	7bfa      	ldrb	r2, [r7, #15]
 80011da:	1ac9      	subs	r1, r1, r3
 80011dc:	4811      	ldr	r0, [pc, #68]	; (8001224 <RescheduleTimerList+0x130>)
 80011de:	4613      	mov	r3, r2
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	4413      	add	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	4403      	add	r3, r0
 80011e8:	3308      	adds	r3, #8
 80011ea:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80011ec:	7bfa      	ldrb	r2, [r7, #15]
 80011ee:	490d      	ldr	r1, [pc, #52]	; (8001224 <RescheduleTimerList+0x130>)
 80011f0:	4613      	mov	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4413      	add	r3, r2
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	440b      	add	r3, r1
 80011fa:	3315      	adds	r3, #21
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	2b06      	cmp	r3, #6
 8001204:	d1c7      	bne.n	8001196 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001206:	89bb      	ldrh	r3, [r7, #12]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff15 	bl	8001038 <RestartWakeupCounter>

  return ;
 800120e:	bf00      	nop
}
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40002800 	.word	0x40002800
 800121c:	20000214 	.word	0x20000214
 8001220:	20000114 	.word	0x20000114
 8001224:	20000084 	.word	0x20000084
 8001228:	2000011c 	.word	0x2000011c
 800122c:	2000021c 	.word	0x2000021c

08001230 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001236:	f3ef 8310 	mrs	r3, PRIMASK
 800123a:	617b      	str	r3, [r7, #20]
  return(result);
 800123c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001240:	b672      	cpsid	i
}
 8001242:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001244:	4b5f      	ldr	r3, [pc, #380]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	22ca      	movs	r2, #202	; 0xca
 800124c:	625a      	str	r2, [r3, #36]	; 0x24
 800124e:	4b5d      	ldr	r3, [pc, #372]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2253      	movs	r2, #83	; 0x53
 8001256:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001258:	4b5a      	ldr	r3, [pc, #360]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	4b58      	ldr	r3, [pc, #352]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800126a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800126c:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <HW_TS_RTC_Wakeup_Handler+0x198>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001274:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001278:	4954      	ldr	r1, [pc, #336]	; (80013cc <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800127a:	4613      	mov	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4413      	add	r3, r2
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	440b      	add	r3, r1
 8001284:	330c      	adds	r3, #12
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d172      	bne.n	8001374 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800128e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001292:	494e      	ldr	r1, [pc, #312]	; (80013cc <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001294:	4613      	mov	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	440b      	add	r3, r1
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80012a2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80012a6:	4949      	ldr	r1, [pc, #292]	; (80013cc <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80012a8:	4613      	mov	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	4413      	add	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	440b      	add	r3, r1
 80012b2:	3310      	adds	r3, #16
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80012b8:	4b45      	ldr	r3, [pc, #276]	; (80013d0 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d050      	beq.n	8001364 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80012c2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80012c6:	4941      	ldr	r1, [pc, #260]	; (80013cc <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	440b      	add	r3, r1
 80012d2:	330d      	adds	r3, #13
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d126      	bne.n	800132a <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80012dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80012e0:	2101      	movs	r1, #1
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fde4 	bl	8000eb0 <UnlinkTimer>
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	f383 8810 	msr	PRIMASK, r3
}
 80012f2:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80012f4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80012f8:	4934      	ldr	r1, [pc, #208]	; (80013cc <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80012fa:	4613      	mov	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	4413      	add	r3, r2
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	440b      	add	r3, r1
 8001304:	3304      	adds	r3, #4
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800130c:	4611      	mov	r1, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f9d4 	bl	80016bc <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001314:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	22ca      	movs	r2, #202	; 0xca
 800131c:	625a      	str	r2, [r3, #36]	; 0x24
 800131e:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2253      	movs	r2, #83	; 0x53
 8001326:	625a      	str	r2, [r3, #36]	; 0x24
 8001328:	e014      	b.n	8001354 <HW_TS_RTC_Wakeup_Handler+0x124>
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f383 8810 	msr	PRIMASK, r3
}
 8001334:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001336:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f932 	bl	80015a4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001340:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	22ca      	movs	r2, #202	; 0xca
 8001348:	625a      	str	r2, [r3, #36]	; 0x24
 800134a:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2253      	movs	r2, #83	; 0x53
 8001352:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001354:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	4619      	mov	r1, r3
 800135c:	69b8      	ldr	r0, [r7, #24]
 800135e:	f000 fa35 	bl	80017cc <HW_TS_RTC_Int_AppNot>
 8001362:	e025      	b.n	80013b0 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8001364:	f7ff fec6 	bl	80010f4 <RescheduleTimerList>
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	f383 8810 	msr	PRIMASK, r3
}
 8001372:	e01d      	b.n	80013b0 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001374:	bf00      	nop
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f7      	beq.n	8001376 <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800139a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800139c:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 800139e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013a2:	60da      	str	r2, [r3, #12]
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f383 8810 	msr	PRIMASK, r3
}
 80013ae:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	22ff      	movs	r2, #255	; 0xff
 80013b8:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80013ba:	bf00      	nop
}
 80013bc:	3728      	adds	r7, #40	; 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000214 	.word	0x20000214
 80013c8:	20000114 	.word	0x20000114
 80013cc:	20000084 	.word	0x20000084
 80013d0:	2000011c 	.word	0x2000011c
 80013d4:	58000800 	.word	0x58000800

080013d8 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 80013e4:	4a64      	ldr	r2, [pc, #400]	; (8001578 <HW_TS_Init+0x1a0>)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80013ea:	4b63      	ldr	r3, [pc, #396]	; (8001578 <HW_TS_Init+0x1a0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	22ca      	movs	r2, #202	; 0xca
 80013f2:	625a      	str	r2, [r3, #36]	; 0x24
 80013f4:	4b60      	ldr	r3, [pc, #384]	; (8001578 <HW_TS_Init+0x1a0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2253      	movs	r2, #83	; 0x53
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80013fe:	4b5f      	ldr	r3, [pc, #380]	; (800157c <HW_TS_Init+0x1a4>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	4a5e      	ldr	r2, [pc, #376]	; (800157c <HW_TS_Init+0x1a4>)
 8001404:	f043 0320 	orr.w	r3, r3, #32
 8001408:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800140a:	4b5c      	ldr	r3, [pc, #368]	; (800157c <HW_TS_Init+0x1a4>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	b2db      	uxtb	r3, r3
 8001416:	f1c3 0304 	rsb	r3, r3, #4
 800141a:	b2da      	uxtb	r2, r3
 800141c:	4b58      	ldr	r3, [pc, #352]	; (8001580 <HW_TS_Init+0x1a8>)
 800141e:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001420:	4b56      	ldr	r3, [pc, #344]	; (800157c <HW_TS_Init+0x1a4>)
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001428:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800142c:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	fa92 f2a2 	rbit	r2, r2
 8001434:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	2a00      	cmp	r2, #0
 800143e:	d101      	bne.n	8001444 <HW_TS_Init+0x6c>
  {
    return 32U;
 8001440:	2220      	movs	r2, #32
 8001442:	e003      	b.n	800144c <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	fab2 f282 	clz	r2, r2
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	40d3      	lsrs	r3, r2
 800144e:	b2db      	uxtb	r3, r3
 8001450:	3301      	adds	r3, #1
 8001452:	b2da      	uxtb	r2, r3
 8001454:	4b4b      	ldr	r3, [pc, #300]	; (8001584 <HW_TS_Init+0x1ac>)
 8001456:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001458:	4b48      	ldr	r3, [pc, #288]	; (800157c <HW_TS_Init+0x1a4>)
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	b29b      	uxth	r3, r3
 800145e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001462:	b29b      	uxth	r3, r3
 8001464:	3301      	adds	r3, #1
 8001466:	b29a      	uxth	r2, r3
 8001468:	4b47      	ldr	r3, [pc, #284]	; (8001588 <HW_TS_Init+0x1b0>)
 800146a:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800146c:	4b46      	ldr	r3, [pc, #280]	; (8001588 <HW_TS_Init+0x1b0>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	3b01      	subs	r3, #1
 8001472:	4a44      	ldr	r2, [pc, #272]	; (8001584 <HW_TS_Init+0x1ac>)
 8001474:	7812      	ldrb	r2, [r2, #0]
 8001476:	fb02 f303 	mul.w	r3, r2, r3
 800147a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800147e:	4a40      	ldr	r2, [pc, #256]	; (8001580 <HW_TS_Init+0x1a8>)
 8001480:	7812      	ldrb	r2, [r2, #0]
 8001482:	40d3      	lsrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800148c:	4293      	cmp	r3, r2
 800148e:	d904      	bls.n	800149a <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001490:	4b3e      	ldr	r3, [pc, #248]	; (800158c <HW_TS_Init+0x1b4>)
 8001492:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001496:	801a      	strh	r2, [r3, #0]
 8001498:	e003      	b.n	80014a2 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	b29a      	uxth	r2, r3
 800149e:	4b3b      	ldr	r3, [pc, #236]	; (800158c <HW_TS_Init+0x1b4>)
 80014a0:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80014a2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80014a6:	f7ff fb81 	bl	8000bac <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80014aa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80014ae:	f7ff fb69 	bl	8000b84 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d143      	bne.n	8001540 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80014b8:	4b35      	ldr	r3, [pc, #212]	; (8001590 <HW_TS_Init+0x1b8>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80014be:	4b35      	ldr	r3, [pc, #212]	; (8001594 <HW_TS_Init+0x1bc>)
 80014c0:	f04f 32ff 	mov.w	r2, #4294967295
 80014c4:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	77fb      	strb	r3, [r7, #31]
 80014ca:	e00c      	b.n	80014e6 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80014cc:	7ffa      	ldrb	r2, [r7, #31]
 80014ce:	4932      	ldr	r1, [pc, #200]	; (8001598 <HW_TS_Init+0x1c0>)
 80014d0:	4613      	mov	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4413      	add	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	440b      	add	r3, r1
 80014da:	330c      	adds	r3, #12
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80014e0:	7ffb      	ldrb	r3, [r7, #31]
 80014e2:	3301      	adds	r3, #1
 80014e4:	77fb      	strb	r3, [r7, #31]
 80014e6:	7ffb      	ldrb	r3, [r7, #31]
 80014e8:	2b05      	cmp	r3, #5
 80014ea:	d9ef      	bls.n	80014cc <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80014ec:	4b2b      	ldr	r3, [pc, #172]	; (800159c <HW_TS_Init+0x1c4>)
 80014ee:	2206      	movs	r2, #6
 80014f0:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <HW_TS_Init+0x1a0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <HW_TS_Init+0x1a0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001504:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001506:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <HW_TS_Init+0x1a0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	b2da      	uxtb	r2, r3
 8001510:	4b19      	ldr	r3, [pc, #100]	; (8001578 <HW_TS_Init+0x1a0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800151a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800151c:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <HW_TS_Init+0x1c8>)
 800151e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001522:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001524:	2003      	movs	r0, #3
 8001526:	f000 ff94 	bl	8002452 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800152a:	4b13      	ldr	r3, [pc, #76]	; (8001578 <HW_TS_Init+0x1a0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <HW_TS_Init+0x1a0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	e00a      	b.n	8001556 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001540:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <HW_TS_Init+0x1a0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154c:	2b00      	cmp	r3, #0
 800154e:	d002      	beq.n	8001556 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001550:	2003      	movs	r0, #3
 8001552:	f000 ff70 	bl	8002436 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <HW_TS_Init+0x1a0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	22ff      	movs	r2, #255	; 0xff
 800155e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001560:	2200      	movs	r2, #0
 8001562:	2103      	movs	r1, #3
 8001564:	2003      	movs	r0, #3
 8001566:	f000 ff24 	bl	80023b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800156a:	2003      	movs	r0, #3
 800156c:	f000 ff3b 	bl	80023e6 <HAL_NVIC_EnableIRQ>

  return;
 8001570:	bf00      	nop
}
 8001572:	3720      	adds	r7, #32
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000214 	.word	0x20000214
 800157c:	40002800 	.word	0x40002800
 8001580:	20000218 	.word	0x20000218
 8001584:	20000219 	.word	0x20000219
 8001588:	2000021a 	.word	0x2000021a
 800158c:	2000021c 	.word	0x2000021c
 8001590:	2000011c 	.word	0x2000011c
 8001594:	20000118 	.word	0x20000118
 8001598:	20000084 	.word	0x20000084
 800159c:	20000114 	.word	0x20000114
 80015a0:	58000800 	.word	0x58000800

080015a4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015ae:	f3ef 8310 	mrs	r3, PRIMASK
 80015b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80015b4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80015b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80015b8:	b672      	cpsid	i
}
 80015ba:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80015bc:	2003      	movs	r0, #3
 80015be:	f000 ff20 	bl	8002402 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80015c2:	4b38      	ldr	r3, [pc, #224]	; (80016a4 <HW_TS_Stop+0x100>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	22ca      	movs	r2, #202	; 0xca
 80015ca:	625a      	str	r2, [r3, #36]	; 0x24
 80015cc:	4b35      	ldr	r3, [pc, #212]	; (80016a4 <HW_TS_Stop+0x100>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2253      	movs	r2, #83	; 0x53
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80015d6:	79fa      	ldrb	r2, [r7, #7]
 80015d8:	4933      	ldr	r1, [pc, #204]	; (80016a8 <HW_TS_Stop+0x104>)
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	440b      	add	r3, r1
 80015e4:	330c      	adds	r3, #12
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d148      	bne.n	8001680 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fc5c 	bl	8000eb0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80015f8:	4b2c      	ldr	r3, [pc, #176]	; (80016ac <HW_TS_Stop+0x108>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80015fe:	7cfb      	ldrb	r3, [r7, #19]
 8001600:	2b06      	cmp	r3, #6
 8001602:	d135      	bne.n	8001670 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001604:	4b2a      	ldr	r3, [pc, #168]	; (80016b0 <HW_TS_Stop+0x10c>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800160c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001610:	d108      	bne.n	8001624 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001612:	bf00      	nop
 8001614:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <HW_TS_Stop+0x100>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1f7      	bne.n	8001614 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001624:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <HW_TS_Stop+0x100>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <HW_TS_Stop+0x100>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001636:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001638:	bf00      	nop
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <HW_TS_Stop+0x100>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f7      	beq.n	800163a <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800164a:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <HW_TS_Stop+0x100>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <HW_TS_Stop+0x100>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800165e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001660:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <HW_TS_Stop+0x110>)
 8001662:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001666:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001668:	2003      	movs	r0, #3
 800166a:	f000 fef2 	bl	8002452 <HAL_NVIC_ClearPendingIRQ>
 800166e:	e007      	b.n	8001680 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <HW_TS_Stop+0x114>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	7cfa      	ldrb	r2, [r7, #19]
 8001678:	429a      	cmp	r2, r3
 800167a:	d001      	beq.n	8001680 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 800167c:	f7ff fd3a 	bl	80010f4 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HW_TS_Stop+0x100>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	22ff      	movs	r2, #255	; 0xff
 8001688:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800168a:	2003      	movs	r0, #3
 800168c:	f000 feab 	bl	80023e6 <HAL_NVIC_EnableIRQ>
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	f383 8810 	msr	PRIMASK, r3
}
 800169a:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800169c:	bf00      	nop
}
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000214 	.word	0x20000214
 80016a8:	20000084 	.word	0x20000084
 80016ac:	20000114 	.word	0x20000114
 80016b0:	40002800 	.word	0x40002800
 80016b4:	58000800 	.word	0x58000800
 80016b8:	20000115 	.word	0x20000115

080016bc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	6039      	str	r1, [r7, #0]
 80016c6:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80016c8:	79fa      	ldrb	r2, [r7, #7]
 80016ca:	493c      	ldr	r1, [pc, #240]	; (80017bc <HW_TS_Start+0x100>)
 80016cc:	4613      	mov	r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4413      	add	r3, r2
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	440b      	add	r3, r1
 80016d6:	330c      	adds	r3, #12
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d103      	bne.n	80016e8 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff ff5e 	bl	80015a4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016e8:	f3ef 8310 	mrs	r3, PRIMASK
 80016ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80016ee:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80016f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80016f2:	b672      	cpsid	i
}
 80016f4:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80016f6:	2003      	movs	r0, #3
 80016f8:	f000 fe83 	bl	8002402 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80016fc:	4b30      	ldr	r3, [pc, #192]	; (80017c0 <HW_TS_Start+0x104>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	22ca      	movs	r2, #202	; 0xca
 8001704:	625a      	str	r2, [r3, #36]	; 0x24
 8001706:	4b2e      	ldr	r3, [pc, #184]	; (80017c0 <HW_TS_Start+0x104>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2253      	movs	r2, #83	; 0x53
 800170e:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001710:	79fa      	ldrb	r2, [r7, #7]
 8001712:	492a      	ldr	r1, [pc, #168]	; (80017bc <HW_TS_Start+0x100>)
 8001714:	4613      	mov	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4413      	add	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	440b      	add	r3, r1
 800171e:	330c      	adds	r3, #12
 8001720:	2202      	movs	r2, #2
 8001722:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001724:	79fa      	ldrb	r2, [r7, #7]
 8001726:	4925      	ldr	r1, [pc, #148]	; (80017bc <HW_TS_Start+0x100>)
 8001728:	4613      	mov	r3, r2
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4413      	add	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	440b      	add	r3, r1
 8001732:	3308      	adds	r3, #8
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001738:	79fa      	ldrb	r2, [r7, #7]
 800173a:	4920      	ldr	r1, [pc, #128]	; (80017bc <HW_TS_Start+0x100>)
 800173c:	4613      	mov	r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4413      	add	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	440b      	add	r3, r1
 8001746:	3304      	adds	r3, #4
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fb04 	bl	8000d5c <linkTimer>
 8001754:	4603      	mov	r3, r0
 8001756:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001758:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <HW_TS_Start+0x108>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <HW_TS_Start+0x10c>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	7c7a      	ldrb	r2, [r7, #17]
 8001766:	429a      	cmp	r2, r3
 8001768:	d002      	beq.n	8001770 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 800176a:	f7ff fcc3 	bl	80010f4 <RescheduleTimerList>
 800176e:	e013      	b.n	8001798 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001770:	79fa      	ldrb	r2, [r7, #7]
 8001772:	4912      	ldr	r1, [pc, #72]	; (80017bc <HW_TS_Start+0x100>)
 8001774:	4613      	mov	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4413      	add	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	440b      	add	r3, r1
 800177e:	3308      	adds	r3, #8
 8001780:	6819      	ldr	r1, [r3, #0]
 8001782:	8a7b      	ldrh	r3, [r7, #18]
 8001784:	79fa      	ldrb	r2, [r7, #7]
 8001786:	1ac9      	subs	r1, r1, r3
 8001788:	480c      	ldr	r0, [pc, #48]	; (80017bc <HW_TS_Start+0x100>)
 800178a:	4613      	mov	r3, r2
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4413      	add	r3, r2
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	4403      	add	r3, r0
 8001794:	3308      	adds	r3, #8
 8001796:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001798:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <HW_TS_Start+0x104>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	22ff      	movs	r2, #255	; 0xff
 80017a0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80017a2:	2003      	movs	r0, #3
 80017a4:	f000 fe1f 	bl	80023e6 <HAL_NVIC_EnableIRQ>
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	f383 8810 	msr	PRIMASK, r3
}
 80017b2:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80017b4:	bf00      	nop
}
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000084 	.word	0x20000084
 80017c0:	20000214 	.word	0x20000214
 80017c4:	20000114 	.word	0x20000114
 80017c8:	20000115 	.word	0x20000115

080017cc <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	460b      	mov	r3, r1
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4798      	blx	r3

  return;
 80017de:	bf00      	nop
}
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <LL_RCC_LSE_SetDriveCapability>:
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80017ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f6:	f023 0218 	bic.w	r2, r3, #24
 80017fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4313      	orrs	r3, r2
 8001802:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <LL_AHB2_GRP1_EnableClock>:
{
 8001812:	b480      	push	{r7}
 8001814:	b085      	sub	sp, #20
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800181a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001820:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4313      	orrs	r3, r2
 8001828:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800182a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800182e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4013      	ands	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001836:	68fb      	ldr	r3, [r7, #12]
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//UART Message Buffer:
	char MSG[35] = {'\0'};
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	f107 0308 	add.w	r3, r7, #8
 8001852:	221f      	movs	r2, #31
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f007 f876 	bl	8008948 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800185c:	f000 fbe8 	bl	8002030 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001860:	f7fe ffe2 	bl	8000828 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001864:	f000 f826 	bl	80018b4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001868:	f000 f886 	bl	8001978 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 800186c:	f000 f8a4 	bl	80019b8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001870:	f000 f93e 	bl	8001af0 <MX_GPIO_Init>
  MX_RF_Init();
 8001874:	f000 f8b4 	bl	80019e0 <MX_RF_Init>
  MX_RTC_Init();
 8001878:	f000 f8ba 	bl	80019f0 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800187c:	f000 f8ec 	bl	8001a58 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001880:	f7fe ffe0 	bl	8000844 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  sprintf(MSG, "Initializing... \r\n");
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	4909      	ldr	r1, [pc, #36]	; (80018ac <main+0x68>)
 8001888:	4618      	mov	r0, r3
 800188a:	f007 f865 	bl	8008958 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fc75 	bl	8000180 <strlen>
 8001896:	4603      	mov	r3, r0
 8001898:	b29a      	uxth	r2, r3
 800189a:	1d39      	adds	r1, r7, #4
 800189c:	f04f 33ff 	mov.w	r3, #4294967295
 80018a0:	4803      	ldr	r0, [pc, #12]	; (80018b0 <main+0x6c>)
 80018a2:	f003 f849 	bl	8004938 <HAL_UART_Transmit>
  while (1)
  {


	  /* USER CODE END WHILE */
    MX_APPE_Process();
 80018a6:	f7ff f92e 	bl	8000b06 <MX_APPE_Process>
 80018aa:	e7fc      	b.n	80018a6 <main+0x62>
 80018ac:	0800924c 	.word	0x0800924c
 80018b0:	20000280 	.word	0x20000280

080018b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b09a      	sub	sp, #104	; 0x68
 80018b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ba:	f107 0320 	add.w	r3, r7, #32
 80018be:	2248      	movs	r2, #72	; 0x48
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f007 f840 	bl	8008948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	611a      	str	r2, [r3, #16]
 80018d6:	615a      	str	r2, [r3, #20]
 80018d8:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80018da:	f001 f82d 	bl	8002938 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80018de:	2000      	movs	r0, #0
 80018e0:	f7ff ff81 	bl	80017e6 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e4:	4b23      	ldr	r3, [pc, #140]	; (8001974 <SystemClock_Config+0xc0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018ec:	4a21      	ldr	r2, [pc, #132]	; (8001974 <SystemClock_Config+0xc0>)
 80018ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <SystemClock_Config+0xc0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018fc:	603b      	str	r3, [r7, #0]
 80018fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001900:	2327      	movs	r3, #39	; 0x27
 8001902:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001904:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800190a:	2301      	movs	r3, #1
 800190c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800190e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001912:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001914:	2301      	movs	r3, #1
 8001916:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001918:	2340      	movs	r3, #64	; 0x40
 800191a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800191c:	2300      	movs	r3, #0
 800191e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001920:	23a0      	movs	r3, #160	; 0xa0
 8001922:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001924:	2300      	movs	r3, #0
 8001926:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001928:	f107 0320 	add.w	r3, r7, #32
 800192c:	4618      	mov	r0, r3
 800192e:	f001 fb97 	bl	8003060 <HAL_RCC_OscConfig>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001938:	f000 f950 	bl	8001bdc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800193c:	236f      	movs	r3, #111	; 0x6f
 800193e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001940:	2300      	movs	r3, #0
 8001942:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001948:	2300      	movs	r3, #0
 800194a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001950:	2300      	movs	r3, #0
 8001952:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001954:	2300      	movs	r3, #0
 8001956:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	2101      	movs	r1, #1
 800195c:	4618      	mov	r0, r3
 800195e:	f001 ff0d 	bl	800377c <HAL_RCC_ClockConfig>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001968:	f000 f938 	bl	8001bdc <Error_Handler>
  }
}
 800196c:	bf00      	nop
 800196e:	3768      	adds	r7, #104	; 0x68
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	58000400 	.word	0x58000400

08001978 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b094      	sub	sp, #80	; 0x50
 800197c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800197e:	463b      	mov	r3, r7
 8001980:	2250      	movs	r2, #80	; 0x50
 8001982:	2100      	movs	r1, #0
 8001984:	4618      	mov	r0, r3
 8001986:	f006 ffdf 	bl	8008948 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800198a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800198e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001990:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001994:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001996:	2300      	movs	r3, #0
 8001998:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800199a:	2300      	movs	r3, #0
 800199c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800199e:	463b      	mov	r3, r7
 80019a0:	4618      	mov	r0, r3
 80019a2:	f002 fb28 	bl	8003ff6 <HAL_RCCEx_PeriphCLKConfig>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80019ac:	f000 f916 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80019b0:	bf00      	nop
 80019b2:	3750      	adds	r7, #80	; 0x50
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <MX_IPCC_Init+0x20>)
 80019be:	4a07      	ldr	r2, [pc, #28]	; (80019dc <MX_IPCC_Init+0x24>)
 80019c0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80019c2:	4805      	ldr	r0, [pc, #20]	; (80019d8 <MX_IPCC_Init+0x20>)
 80019c4:	f000 ff32 	bl	800282c <HAL_IPCC_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80019ce:	f000 f905 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000220 	.word	0x20000220
 80019dc:	58000c00 	.word	0x58000c00

080019e0 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019f4:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <MX_RTC_Init+0x60>)
 80019f6:	4a17      	ldr	r2, [pc, #92]	; (8001a54 <MX_RTC_Init+0x64>)
 80019f8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <MX_RTC_Init+0x60>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <MX_RTC_Init+0x60>)
 8001a02:	220f      	movs	r2, #15
 8001a04:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001a06:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <MX_RTC_Init+0x60>)
 8001a08:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001a0c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <MX_RTC_Init+0x60>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a14:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <MX_RTC_Init+0x60>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <MX_RTC_Init+0x60>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <MX_RTC_Init+0x60>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a26:	480a      	ldr	r0, [pc, #40]	; (8001a50 <MX_RTC_Init+0x60>)
 8001a28:	f002 fd6c 	bl	8004504 <HAL_RTC_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001a32:	f000 f8d3 	bl	8001bdc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001a36:	2200      	movs	r2, #0
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4805      	ldr	r0, [pc, #20]	; (8001a50 <MX_RTC_Init+0x60>)
 8001a3c:	f002 fe50 	bl	80046e0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001a46:	f000 f8c9 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	2000025c 	.word	0x2000025c
 8001a54:	40002800 	.word	0x40002800

08001a58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a5c:	4b22      	ldr	r3, [pc, #136]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001a5e:	4a23      	ldr	r2, [pc, #140]	; (8001aec <MX_USART1_UART_Init+0x94>)
 8001a60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a62:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a70:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a76:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001a7e:	220c      	movs	r2, #12
 8001a80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a82:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a88:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a8e:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a94:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a9a:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aa0:	4811      	ldr	r0, [pc, #68]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001aa2:	f002 fef9 	bl	8004898 <HAL_UART_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001aac:	f000 f896 	bl	8001bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	480d      	ldr	r0, [pc, #52]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001ab4:	f003 fbec 	bl	8005290 <HAL_UARTEx_SetTxFifoThreshold>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001abe:	f000 f88d 	bl	8001bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4808      	ldr	r0, [pc, #32]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001ac6:	f003 fc21 	bl	800530c <HAL_UARTEx_SetRxFifoThreshold>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001ad0:	f000 f884 	bl	8001bdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ad4:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <MX_USART1_UART_Init+0x90>)
 8001ad6:	f003 fba2 	bl	800521e <HAL_UARTEx_DisableFifoMode>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ae0:	f000 f87c 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000280 	.word	0x20000280
 8001aec:	40013800 	.word	0x40013800

08001af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b04:	2004      	movs	r0, #4
 8001b06:	f7ff fe84 	bl	8001812 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0a:	2002      	movs	r0, #2
 8001b0c:	f7ff fe81 	bl	8001812 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b10:	2001      	movs	r0, #1
 8001b12:	f7ff fe7e 	bl	8001812 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b16:	2008      	movs	r0, #8
 8001b18:	f7ff fe7b 	bl	8001812 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2123      	movs	r1, #35	; 0x23
 8001b20:	481d      	ldr	r0, [pc, #116]	; (8001b98 <MX_GPIO_Init+0xa8>)
 8001b22:	f000 fe2d 	bl	8002780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b26:	2310      	movs	r3, #16
 8001b28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	4619      	mov	r1, r3
 8001b36:	4819      	ldr	r0, [pc, #100]	; (8001b9c <MX_GPIO_Init+0xac>)
 8001b38:	f000 fc9a 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001b3c:	2323      	movs	r3, #35	; 0x23
 8001b3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b40:	2301      	movs	r3, #1
 8001b42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4811      	ldr	r0, [pc, #68]	; (8001b98 <MX_GPIO_Init+0xa8>)
 8001b52:	f000 fc8d 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	2300      	movs	r3, #0
 8001b66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001b68:	230a      	movs	r3, #10
 8001b6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b74:	f000 fc7c 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	4619      	mov	r1, r3
 8001b88:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <MX_GPIO_Init+0xb0>)
 8001b8a:	f000 fc71 	bl	8002470 <HAL_GPIO_Init>

}
 8001b8e:	bf00      	nop
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	48000400 	.word	0x48000400
 8001b9c:	48000800 	.word	0x48000800
 8001ba0:	48000c00 	.word	0x48000c00

08001ba4 <UART_Transmit>:

/* USER CODE BEGIN 4 */

int UART_Transmit(uint8_t* data, uint16_t size){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	807b      	strh	r3, [r7, #2]
	  HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, data, size, 0xffff);
 8001bb0:	887a      	ldrh	r2, [r7, #2]
 8001bb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4807      	ldr	r0, [pc, #28]	; (8001bd8 <UART_Transmit+0x34>)
 8001bba:	f002 febd 	bl	8004938 <HAL_UART_Transmit>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK) {
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <UART_Transmit+0x28>
        //while (1);
        return 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	e000      	b.n	8001bce <UART_Transmit+0x2a>
    }
    return 1;
 8001bcc:	2301      	movs	r3, #1
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000280 	.word	0x20000280

08001bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001be0:	b672      	cpsid	i
}
 8001be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <Error_Handler+0x8>

08001be6 <LL_RCC_EnableRTC>:
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001bfe:	bf00      	nop
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_AHB2_GRP1_EnableClock>:
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
}
 8001c2e:	bf00      	nop
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_AHB3_GRP1_EnableClock>:
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b085      	sub	sp, #20
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c90:	68fb      	ldr	r3, [r7, #12]
}
 8001c92:	bf00      	nop
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b085      	sub	sp, #20
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001caa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
}
 8001cc4:	bf00      	nop
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001cd4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001cd8:	f7ff ffaf 	bl	8001c3a <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2100      	movs	r1, #0
 8001ce0:	202e      	movs	r0, #46	; 0x2e
 8001ce2:	f000 fb66 	bl	80023b2 <HAL_NVIC_SetPriority>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001ce6:	202e      	movs	r0, #46	; 0x2e
 8001ce8:	f000 fb7d 	bl	80023e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0d      	ldr	r2, [pc, #52]	; (8001d34 <HAL_IPCC_MspInit+0x44>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d113      	bne.n	8001d2a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001d02:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001d06:	f7ff ff98 	bl	8001c3a <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	202c      	movs	r0, #44	; 0x2c
 8001d10:	f000 fb4f 	bl	80023b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001d14:	202c      	movs	r0, #44	; 0x2c
 8001d16:	f000 fb66 	bl	80023e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	202d      	movs	r0, #45	; 0x2d
 8001d20:	f000 fb47 	bl	80023b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001d24:	202d      	movs	r0, #45	; 0x2d
 8001d26:	f000 fb5e 	bl	80023e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	58000c00 	.word	0x58000c00

08001d38 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b096      	sub	sp, #88	; 0x58
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d40:	f107 0308 	add.w	r3, r7, #8
 8001d44:	2250      	movs	r2, #80	; 0x50
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f006 fdfd 	bl	8008948 <memset>
  if(hrtc->Instance==RTC)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <HAL_RTC_MspInit+0x64>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d11d      	bne.n	8001d94 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d5c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d62:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d64:	f107 0308 	add.w	r3, r7, #8
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f002 f944 	bl	8003ff6 <HAL_RCCEx_PeriphCLKConfig>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001d74:	f7ff ff32 	bl	8001bdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d78:	f7ff ff35 	bl	8001be6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001d7c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001d80:	f7ff ff74 	bl	8001c6c <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2100      	movs	r1, #0
 8001d88:	2003      	movs	r0, #3
 8001d8a:	f000 fb12 	bl	80023b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001d8e:	2003      	movs	r0, #3
 8001d90:	f000 fb29 	bl	80023e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001d94:	bf00      	nop
 8001d96:	3758      	adds	r7, #88	; 0x58
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40002800 	.word	0x40002800

08001da0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b09c      	sub	sp, #112	; 0x70
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001db8:	f107 030c 	add.w	r3, r7, #12
 8001dbc:	2250      	movs	r2, #80	; 0x50
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f006 fdc1 	bl	8008948 <memset>
  if(huart->Instance==USART1)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a16      	ldr	r2, [pc, #88]	; (8001e24 <HAL_UART_MspInit+0x84>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d124      	bne.n	8001e1a <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dd8:	f107 030c 	add.w	r3, r7, #12
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f002 f90a 	bl	8003ff6 <HAL_RCCEx_PeriphCLKConfig>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001de8:	f7ff fef8 	bl	8001bdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001df0:	f7ff ff55 	bl	8001c9e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df4:	2002      	movs	r0, #2
 8001df6:	f7ff ff07 	bl	8001c08 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001dfa:	23c0      	movs	r3, #192	; 0xc0
 8001dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e06:	2300      	movs	r3, #0
 8001e08:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e12:	4619      	mov	r1, r3
 8001e14:	4804      	ldr	r0, [pc, #16]	; (8001e28 <HAL_UART_MspInit+0x88>)
 8001e16:	f000 fb2b 	bl	8002470 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e1a:	bf00      	nop
 8001e1c:	3770      	adds	r7, #112	; 0x70
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40013800 	.word	0x40013800
 8001e28:	48000400 	.word	0x48000400

08001e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <NMI_Handler+0x4>

08001e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e36:	e7fe      	b.n	8001e36 <HardFault_Handler+0x4>

08001e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e3c:	e7fe      	b.n	8001e3c <MemManage_Handler+0x4>

08001e3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e42:	e7fe      	b.n	8001e42 <BusFault_Handler+0x4>

08001e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <UsageFault_Handler+0x4>

08001e4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e78:	f000 f934 	bl	80020e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001e84:	f7ff f9d4 	bl	8001230 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001e90:	f006 f96e 	bl	8008170 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001e9c:	f006 f9a0 	bl	80081e0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001ea8:	f000 fc9c 	bl	80027e4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eb8:	4a14      	ldr	r2, [pc, #80]	; (8001f0c <_sbrk+0x5c>)
 8001eba:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <_sbrk+0x60>)
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec4:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <_sbrk+0x64>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d102      	bne.n	8001ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <_sbrk+0x64>)
 8001ece:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <_sbrk+0x68>)
 8001ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ed2:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <_sbrk+0x64>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d207      	bcs.n	8001ef0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ee0:	f006 fcfa 	bl	80088d8 <__errno>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	220c      	movs	r2, #12
 8001ee8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	e009      	b.n	8001f04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <_sbrk+0x64>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ef6:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <_sbrk+0x64>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	4a05      	ldr	r2, [pc, #20]	; (8001f14 <_sbrk+0x64>)
 8001f00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f02:	68fb      	ldr	r3, [r7, #12]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20030000 	.word	0x20030000
 8001f10:	00000400 	.word	0x00000400
 8001f14:	20000310 	.word	0x20000310
 8001f18:	20000590 	.word	0x20000590

08001f1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001f20:	4b24      	ldr	r3, [pc, #144]	; (8001fb4 <SystemInit+0x98>)
 8001f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f26:	4a23      	ldr	r2, [pc, #140]	; (8001fb4 <SystemInit+0x98>)
 8001f28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f44:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001f48:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f54:	4b18      	ldr	r3, [pc, #96]	; (8001fb8 <SystemInit+0x9c>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f66:	f023 0305 	bic.w	r3, r3, #5
 8001f6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f86:	4a0d      	ldr	r2, [pc, #52]	; (8001fbc <SystemInit+0xa0>)
 8001f88:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8e:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <SystemInit+0xa0>)
 8001f90:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fa0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	619a      	str	r2, [r3, #24]
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000ed00 	.word	0xe000ed00
 8001fb8:	faf6fefb 	.word	0xfaf6fefb
 8001fbc:	22041000 	.word	0x22041000

08001fc0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001fc0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fc4:	3304      	adds	r3, #4

08001fc6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fc8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001fca:	d3f9      	bcc.n	8001fc0 <CopyDataInit>
  bx lr
 8001fcc:	4770      	bx	lr

08001fce <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001fce:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001fd0:	3004      	adds	r0, #4

08001fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001fd2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001fd4:	d3fb      	bcc.n	8001fce <FillZerobss>
  bx lr
 8001fd6:	4770      	bx	lr

08001fd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fd8:	480c      	ldr	r0, [pc, #48]	; (800200c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001fda:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fdc:	f7ff ff9e 	bl	8001f1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001fe0:	480b      	ldr	r0, [pc, #44]	; (8002010 <LoopForever+0x8>)
 8001fe2:	490c      	ldr	r1, [pc, #48]	; (8002014 <LoopForever+0xc>)
 8001fe4:	4a0c      	ldr	r2, [pc, #48]	; (8002018 <LoopForever+0x10>)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f7ff ffed 	bl	8001fc6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001fec:	480b      	ldr	r0, [pc, #44]	; (800201c <LoopForever+0x14>)
 8001fee:	490c      	ldr	r1, [pc, #48]	; (8002020 <LoopForever+0x18>)
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f7ff ffee 	bl	8001fd2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001ff6:	480b      	ldr	r0, [pc, #44]	; (8002024 <LoopForever+0x1c>)
 8001ff8:	490b      	ldr	r1, [pc, #44]	; (8002028 <LoopForever+0x20>)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f7ff ffe9 	bl	8001fd2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002000:	f006 fc70 	bl	80088e4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002004:	f7ff fc1e 	bl	8001844 <main>

08002008 <LoopForever>:

LoopForever:
  b LoopForever
 8002008:	e7fe      	b.n	8002008 <LoopForever>
 800200a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800200c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002010:	20000004 	.word	0x20000004
 8002014:	20000084 	.word	0x20000084
 8002018:	080095c8 	.word	0x080095c8
  INIT_BSS _sbss, _ebss
 800201c:	200001f8 	.word	0x200001f8
 8002020:	2000058c 	.word	0x2000058c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002024:	200301e0 	.word	0x200301e0
 8002028:	20030a57 	.word	0x20030a57

0800202c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800202c:	e7fe      	b.n	800202c <ADC1_IRQHandler>
	...

08002030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <HAL_Init+0x3c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a0b      	ldr	r2, [pc, #44]	; (800206c <HAL_Init+0x3c>)
 8002040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002044:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002046:	2003      	movs	r0, #3
 8002048:	f000 f9a8 	bl	800239c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800204c:	2000      	movs	r0, #0
 800204e:	f000 f80f 	bl	8002070 <HAL_InitTick>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d002      	beq.n	800205e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	71fb      	strb	r3, [r7, #7]
 800205c:	e001      	b.n	8002062 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800205e:	f7ff fe37 	bl	8001cd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002062:	79fb      	ldrb	r3, [r7, #7]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	58004000 	.word	0x58004000

08002070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800207c:	4b17      	ldr	r3, [pc, #92]	; (80020dc <HAL_InitTick+0x6c>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d024      	beq.n	80020ce <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002084:	f001 fd26 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 8002088:	4602      	mov	r2, r0
 800208a:	4b14      	ldr	r3, [pc, #80]	; (80020dc <HAL_InitTick+0x6c>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	4619      	mov	r1, r3
 8002090:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002094:	fbb3 f3f1 	udiv	r3, r3, r1
 8002098:	fbb2 f3f3 	udiv	r3, r2, r3
 800209c:	4618      	mov	r0, r3
 800209e:	f000 f9be 	bl	800241e <HAL_SYSTICK_Config>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10f      	bne.n	80020c8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b0f      	cmp	r3, #15
 80020ac:	d809      	bhi.n	80020c2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ae:	2200      	movs	r2, #0
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	f04f 30ff 	mov.w	r0, #4294967295
 80020b6:	f000 f97c 	bl	80023b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020ba:	4a09      	ldr	r2, [pc, #36]	; (80020e0 <HAL_InitTick+0x70>)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6013      	str	r3, [r2, #0]
 80020c0:	e007      	b.n	80020d2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	73fb      	strb	r3, [r7, #15]
 80020c6:	e004      	b.n	80020d2 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	73fb      	strb	r3, [r7, #15]
 80020cc:	e001      	b.n	80020d2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	2000000c 	.word	0x2000000c
 80020e0:	20000008 	.word	0x20000008

080020e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <HAL_IncTick+0x20>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_IncTick+0x24>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4413      	add	r3, r2
 80020f4:	4a04      	ldr	r2, [pc, #16]	; (8002108 <HAL_IncTick+0x24>)
 80020f6:	6013      	str	r3, [r2, #0]
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	2000000c 	.word	0x2000000c
 8002108:	20000314 	.word	0x20000314

0800210c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return uwTick;
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <HAL_GetTick+0x14>)
 8002112:	681b      	ldr	r3, [r3, #0]
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	20000314 	.word	0x20000314

08002124 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <HAL_GetTickPrio+0x14>)
 800212a:	681b      	ldr	r3, [r3, #0]
}
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000008 	.word	0x20000008

0800213c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <__NVIC_SetPriorityGrouping+0x44>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002158:	4013      	ands	r3, r2
 800215a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002164:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800216c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800216e:	4a04      	ldr	r2, [pc, #16]	; (8002180 <__NVIC_SetPriorityGrouping+0x44>)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	60d3      	str	r3, [r2, #12]
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002188:	4b04      	ldr	r3, [pc, #16]	; (800219c <__NVIC_GetPriorityGrouping+0x18>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	0a1b      	lsrs	r3, r3, #8
 800218e:	f003 0307 	and.w	r3, r3, #7
}
 8002192:	4618      	mov	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	db0b      	blt.n	80021ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	f003 021f 	and.w	r2, r3, #31
 80021b8:	4907      	ldr	r1, [pc, #28]	; (80021d8 <__NVIC_EnableIRQ+0x38>)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	095b      	lsrs	r3, r3, #5
 80021c0:	2001      	movs	r0, #1
 80021c2:	fa00 f202 	lsl.w	r2, r0, r2
 80021c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	e000e100 	.word	0xe000e100

080021dc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	db12      	blt.n	8002214 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	f003 021f 	and.w	r2, r3, #31
 80021f4:	490a      	ldr	r1, [pc, #40]	; (8002220 <__NVIC_DisableIRQ+0x44>)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	095b      	lsrs	r3, r3, #5
 80021fc:	2001      	movs	r0, #1
 80021fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002202:	3320      	adds	r3, #32
 8002204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002208:	f3bf 8f4f 	dsb	sy
}
 800220c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800220e:	f3bf 8f6f 	isb	sy
}
 8002212:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000e100 	.word	0xe000e100

08002224 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	2b00      	cmp	r3, #0
 8002234:	db0c      	blt.n	8002250 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	f003 021f 	and.w	r2, r3, #31
 800223c:	4907      	ldr	r1, [pc, #28]	; (800225c <__NVIC_SetPendingIRQ+0x38>)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	2001      	movs	r0, #1
 8002246:	fa00 f202 	lsl.w	r2, r0, r2
 800224a:	3340      	adds	r3, #64	; 0x40
 800224c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000e100 	.word	0xe000e100

08002260 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	2b00      	cmp	r3, #0
 8002270:	db0c      	blt.n	800228c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	f003 021f 	and.w	r2, r3, #31
 8002278:	4907      	ldr	r1, [pc, #28]	; (8002298 <__NVIC_ClearPendingIRQ+0x38>)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	2001      	movs	r0, #1
 8002282:	fa00 f202 	lsl.w	r2, r0, r2
 8002286:	3360      	adds	r3, #96	; 0x60
 8002288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000e100 	.word	0xe000e100

0800229c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	6039      	str	r1, [r7, #0]
 80022a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	db0a      	blt.n	80022c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	490c      	ldr	r1, [pc, #48]	; (80022e8 <__NVIC_SetPriority+0x4c>)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	0112      	lsls	r2, r2, #4
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	440b      	add	r3, r1
 80022c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c4:	e00a      	b.n	80022dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4908      	ldr	r1, [pc, #32]	; (80022ec <__NVIC_SetPriority+0x50>)
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	3b04      	subs	r3, #4
 80022d4:	0112      	lsls	r2, r2, #4
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	440b      	add	r3, r1
 80022da:	761a      	strb	r2, [r3, #24]
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000e100 	.word	0xe000e100
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b089      	sub	sp, #36	; 0x24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f1c3 0307 	rsb	r3, r3, #7
 800230a:	2b04      	cmp	r3, #4
 800230c:	bf28      	it	cs
 800230e:	2304      	movcs	r3, #4
 8002310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3304      	adds	r3, #4
 8002316:	2b06      	cmp	r3, #6
 8002318:	d902      	bls.n	8002320 <NVIC_EncodePriority+0x30>
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3b03      	subs	r3, #3
 800231e:	e000      	b.n	8002322 <NVIC_EncodePriority+0x32>
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	f04f 32ff 	mov.w	r2, #4294967295
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43da      	mvns	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	401a      	ands	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002338:	f04f 31ff 	mov.w	r1, #4294967295
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	43d9      	mvns	r1, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002348:	4313      	orrs	r3, r2
         );
}
 800234a:	4618      	mov	r0, r3
 800234c:	3724      	adds	r7, #36	; 0x24
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3b01      	subs	r3, #1
 8002364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002368:	d301      	bcc.n	800236e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800236a:	2301      	movs	r3, #1
 800236c:	e00f      	b.n	800238e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236e:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <SysTick_Config+0x40>)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3b01      	subs	r3, #1
 8002374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002376:	210f      	movs	r1, #15
 8002378:	f04f 30ff 	mov.w	r0, #4294967295
 800237c:	f7ff ff8e 	bl	800229c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <SysTick_Config+0x40>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002386:	4b04      	ldr	r3, [pc, #16]	; (8002398 <SysTick_Config+0x40>)
 8002388:	2207      	movs	r2, #7
 800238a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	e000e010 	.word	0xe000e010

0800239c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff fec9 	bl	800213c <__NVIC_SetPriorityGrouping>
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	4603      	mov	r3, r0
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
 80023be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023c0:	f7ff fee0 	bl	8002184 <__NVIC_GetPriorityGrouping>
 80023c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	6978      	ldr	r0, [r7, #20]
 80023cc:	f7ff ff90 	bl	80022f0 <NVIC_EncodePriority>
 80023d0:	4602      	mov	r2, r0
 80023d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff5f 	bl	800229c <__NVIC_SetPriority>
}
 80023de:	bf00      	nop
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fed3 	bl	80021a0 <__NVIC_EnableIRQ>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	4603      	mov	r3, r0
 800240a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800240c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fee3 	bl	80021dc <__NVIC_DisableIRQ>
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff ff96 	bl	8002358 <SysTick_Config>
 800242c:	4603      	mov	r3, r0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	4603      	mov	r3, r0
 800243e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff feed 	bl	8002224 <__NVIC_SetPendingIRQ>
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	4603      	mov	r3, r0
 800245a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800245c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fefd 	bl	8002260 <__NVIC_ClearPendingIRQ>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800247a:	2300      	movs	r3, #0
 800247c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800247e:	e14c      	b.n	800271a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	2101      	movs	r1, #1
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	fa01 f303 	lsl.w	r3, r1, r3
 800248c:	4013      	ands	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 813e 	beq.w	8002714 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d005      	beq.n	80024b0 <HAL_GPIO_Init+0x40>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d130      	bne.n	8002512 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	2203      	movs	r2, #3
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024e6:	2201      	movs	r2, #1
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4013      	ands	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	091b      	lsrs	r3, r3, #4
 80024fc:	f003 0201 	and.w	r2, r3, #1
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	2b03      	cmp	r3, #3
 800251c:	d017      	beq.n	800254e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	2203      	movs	r2, #3
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4013      	ands	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d123      	bne.n	80025a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	08da      	lsrs	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3208      	adds	r2, #8
 8002562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002566:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	220f      	movs	r2, #15
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4013      	ands	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	691a      	ldr	r2, [r3, #16]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	08da      	lsrs	r2, r3, #3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3208      	adds	r2, #8
 800259c:	6939      	ldr	r1, [r7, #16]
 800259e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	2203      	movs	r2, #3
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4013      	ands	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 0203 	and.w	r2, r3, #3
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 8098 	beq.w	8002714 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80025e4:	4a54      	ldr	r2, [pc, #336]	; (8002738 <HAL_GPIO_Init+0x2c8>)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	089b      	lsrs	r3, r3, #2
 80025ea:	3302      	adds	r3, #2
 80025ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f003 0303 	and.w	r3, r3, #3
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	220f      	movs	r2, #15
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	4013      	ands	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800260e:	d019      	beq.n	8002644 <HAL_GPIO_Init+0x1d4>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a4a      	ldr	r2, [pc, #296]	; (800273c <HAL_GPIO_Init+0x2cc>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d013      	beq.n	8002640 <HAL_GPIO_Init+0x1d0>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a49      	ldr	r2, [pc, #292]	; (8002740 <HAL_GPIO_Init+0x2d0>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d00d      	beq.n	800263c <HAL_GPIO_Init+0x1cc>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a48      	ldr	r2, [pc, #288]	; (8002744 <HAL_GPIO_Init+0x2d4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d007      	beq.n	8002638 <HAL_GPIO_Init+0x1c8>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a47      	ldr	r2, [pc, #284]	; (8002748 <HAL_GPIO_Init+0x2d8>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d101      	bne.n	8002634 <HAL_GPIO_Init+0x1c4>
 8002630:	2304      	movs	r3, #4
 8002632:	e008      	b.n	8002646 <HAL_GPIO_Init+0x1d6>
 8002634:	2307      	movs	r3, #7
 8002636:	e006      	b.n	8002646 <HAL_GPIO_Init+0x1d6>
 8002638:	2303      	movs	r3, #3
 800263a:	e004      	b.n	8002646 <HAL_GPIO_Init+0x1d6>
 800263c:	2302      	movs	r3, #2
 800263e:	e002      	b.n	8002646 <HAL_GPIO_Init+0x1d6>
 8002640:	2301      	movs	r3, #1
 8002642:	e000      	b.n	8002646 <HAL_GPIO_Init+0x1d6>
 8002644:	2300      	movs	r3, #0
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	f002 0203 	and.w	r2, r2, #3
 800264c:	0092      	lsls	r2, r2, #2
 800264e:	4093      	lsls	r3, r2
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002656:	4938      	ldr	r1, [pc, #224]	; (8002738 <HAL_GPIO_Init+0x2c8>)
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	089b      	lsrs	r3, r3, #2
 800265c:	3302      	adds	r3, #2
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002664:	4b39      	ldr	r3, [pc, #228]	; (800274c <HAL_GPIO_Init+0x2dc>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	43db      	mvns	r3, r3
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002688:	4a30      	ldr	r2, [pc, #192]	; (800274c <HAL_GPIO_Init+0x2dc>)
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800268e:	4b2f      	ldr	r3, [pc, #188]	; (800274c <HAL_GPIO_Init+0x2dc>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	43db      	mvns	r3, r3
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	4013      	ands	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026b2:	4a26      	ldr	r2, [pc, #152]	; (800274c <HAL_GPIO_Init+0x2dc>)
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80026b8:	4b24      	ldr	r3, [pc, #144]	; (800274c <HAL_GPIO_Init+0x2dc>)
 80026ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	43db      	mvns	r3, r3
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4013      	ands	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026de:	4a1b      	ldr	r2, [pc, #108]	; (800274c <HAL_GPIO_Init+0x2dc>)
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80026e6:	4b19      	ldr	r3, [pc, #100]	; (800274c <HAL_GPIO_Init+0x2dc>)
 80026e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4013      	ands	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4313      	orrs	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800270c:	4a0f      	ldr	r2, [pc, #60]	; (800274c <HAL_GPIO_Init+0x2dc>)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	3301      	adds	r3, #1
 8002718:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	fa22 f303 	lsr.w	r3, r2, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	f47f aeab 	bne.w	8002480 <HAL_GPIO_Init+0x10>
  }
}
 800272a:	bf00      	nop
 800272c:	bf00      	nop
 800272e:	371c      	adds	r7, #28
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	40010000 	.word	0x40010000
 800273c:	48000400 	.word	0x48000400
 8002740:	48000800 	.word	0x48000800
 8002744:	48000c00 	.word	0x48000c00
 8002748:	48001000 	.word	0x48001000
 800274c:	58000800 	.word	0x58000800

08002750 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	887b      	ldrh	r3, [r7, #2]
 8002762:	4013      	ands	r3, r2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d002      	beq.n	800276e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002768:	2301      	movs	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	e001      	b.n	8002772 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800276e:	2300      	movs	r3, #0
 8002770:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002772:	7bfb      	ldrb	r3, [r7, #15]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	807b      	strh	r3, [r7, #2]
 800278c:	4613      	mov	r3, r2
 800278e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002790:	787b      	ldrb	r3, [r7, #1]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002796:	887a      	ldrh	r2, [r7, #2]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800279c:	e002      	b.n	80027a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800279e:	887a      	ldrh	r2, [r7, #2]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027c2:	887a      	ldrh	r2, [r7, #2]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4013      	ands	r3, r2
 80027c8:	041a      	lsls	r2, r3, #16
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	43d9      	mvns	r1, r3
 80027ce:	887b      	ldrh	r3, [r7, #2]
 80027d0:	400b      	ands	r3, r1
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	619a      	str	r2, [r3, #24]
}
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80027ea:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <HAL_HSEM_IRQHandler+0x30>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80027f0:	4b08      	ldr	r3, [pc, #32]	; (8002814 <HAL_HSEM_IRQHandler+0x30>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	4906      	ldr	r1, [pc, #24]	; (8002814 <HAL_HSEM_IRQHandler+0x30>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80027fe:	4a05      	ldr	r2, [pc, #20]	; (8002814 <HAL_HSEM_IRQHandler+0x30>)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f807 	bl	8002818 <HAL_HSEM_FreeCallback>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	58001500 	.word	0x58001500

08002818 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d01e      	beq.n	800287c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800283e:	4b13      	ldr	r3, [pc, #76]	; (800288c <HAL_IPCC_Init+0x60>)
 8002840:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d102      	bne.n	8002854 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7ff fa4e 	bl	8001cf0 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002854:	68b8      	ldr	r0, [r7, #8]
 8002856:	f000 f85b 	bl	8002910 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f82c 	bl	80028c4 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800287a:	e001      	b.n	8002880 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002880:	7bfb      	ldrb	r3, [r7, #15]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	58000c00 	.word	0x58000c00

08002890 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	4613      	mov	r3, r2
 800289c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800289e:	bf00      	nop
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b085      	sub	sp, #20
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	4613      	mov	r3, r2
 80028b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80028cc:	2300      	movs	r3, #0
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	e00f      	b.n	80028f2 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	4a0b      	ldr	r2, [pc, #44]	; (8002908 <IPCC_SetDefaultCallbacks+0x44>)
 80028dc:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	3306      	adds	r3, #6
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	4a08      	ldr	r2, [pc, #32]	; (800290c <IPCC_SetDefaultCallbacks+0x48>)
 80028ea:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	3301      	adds	r3, #1
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2b05      	cmp	r3, #5
 80028f6:	d9ec      	bls.n	80028d2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80028f8:	bf00      	nop
 80028fa:	bf00      	nop
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	08002891 	.word	0x08002891
 800290c:	080028ab 	.word	0x080028ab

08002910 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8002924:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	223f      	movs	r2, #63	; 0x3f
 800292a:	609a      	str	r2, [r3, #8]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a04      	ldr	r2, [pc, #16]	; (8002954 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002946:	6013      	str	r3, [r2, #0]
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	58000400 	.word	0x58000400

08002958 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800295c:	4b04      	ldr	r3, [pc, #16]	; (8002970 <HAL_PWREx_GetVoltageRange+0x18>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002964:	4618      	mov	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	58000400 	.word	0x58000400

08002974 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002982:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002986:	d101      	bne.n	800298c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002988:	2301      	movs	r3, #1
 800298a:	e000      	b.n	800298e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LL_RCC_HSE_Enable>:
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800299c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <LL_RCC_HSE_Disable>:
{
 80029b6:	b480      	push	{r7}
 80029b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80029ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c8:	6013      	str	r3, [r2, #0]
}
 80029ca:	bf00      	nop
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <LL_RCC_HSE_IsReady>:
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80029d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029e6:	d101      	bne.n	80029ec <LL_RCC_HSE_IsReady+0x18>
 80029e8:	2301      	movs	r3, #1
 80029ea:	e000      	b.n	80029ee <LL_RCC_HSE_IsReady+0x1a>
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <LL_RCC_HSI_Enable>:
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80029fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a0a:	6013      	str	r3, [r2, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <LL_RCC_HSI_Disable>:
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a28:	6013      	str	r3, [r2, #0]
}
 8002a2a:	bf00      	nop
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <LL_RCC_HSI_IsReady>:
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a46:	d101      	bne.n	8002a4c <LL_RCC_HSI_IsReady+0x18>
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e000      	b.n	8002a4e <LL_RCC_HSI_IsReady+0x1a>
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	061b      	lsls	r3, r3, #24
 8002a6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a72:	4313      	orrs	r3, r2
 8002a74:	604b      	str	r3, [r1, #4]
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <LL_RCC_HSI48_Enable>:
{
 8002a82:	b480      	push	{r7}
 8002a84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002a9a:	bf00      	nop
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <LL_RCC_HSI48_Disable>:
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ab0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ab4:	f023 0301 	bic.w	r3, r3, #1
 8002ab8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <LL_RCC_HSI48_IsReady>:
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ace:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d101      	bne.n	8002ade <LL_RCC_HSI48_IsReady+0x18>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <LL_RCC_HSI48_IsReady+0x1a>
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <LL_RCC_LSE_Enable>:
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b02:	bf00      	nop
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <LL_RCC_LSE_Disable>:
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b1c:	f023 0301 	bic.w	r3, r3, #1
 8002b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b24:	bf00      	nop
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <LL_RCC_LSE_EnableBypass>:
{
 8002b2e:	b480      	push	{r7}
 8002b30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b3e:	f043 0304 	orr.w	r3, r3, #4
 8002b42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b46:	bf00      	nop
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <LL_RCC_LSE_DisableBypass>:
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b60:	f023 0304 	bic.w	r3, r3, #4
 8002b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <LL_RCC_LSE_IsReady>:
{
 8002b72:	b480      	push	{r7}
 8002b74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d101      	bne.n	8002b8a <LL_RCC_LSE_IsReady+0x18>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <LL_RCC_LSE_IsReady+0x1a>
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <LL_RCC_LSI1_Enable>:
{
 8002b96:	b480      	push	{r7}
 8002b98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ba2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002bae:	bf00      	nop
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <LL_RCC_LSI1_Disable>:
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bc8:	f023 0301 	bic.w	r3, r3, #1
 8002bcc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <LL_RCC_LSI1_IsReady>:
{
 8002bda:	b480      	push	{r7}
 8002bdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d101      	bne.n	8002bf2 <LL_RCC_LSI1_IsReady+0x18>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <LL_RCC_LSI1_IsReady+0x1a>
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <LL_RCC_LSI2_Enable>:
{
 8002bfe:	b480      	push	{r7}
 8002c00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c0e:	f043 0304 	orr.w	r3, r3, #4
 8002c12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c16:	bf00      	nop
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <LL_RCC_LSI2_Disable>:
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c30:	f023 0304 	bic.w	r3, r3, #4
 8002c34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <LL_RCC_LSI2_IsReady>:
{
 8002c42:	b480      	push	{r7}
 8002c44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d101      	bne.n	8002c5a <LL_RCC_LSI2_IsReady+0x18>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <LL_RCC_LSI2_IsReady+0x1a>
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <LL_RCC_LSI2_SetTrimming>:
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c76:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	021b      	lsls	r3, r3, #8
 8002c7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <LL_RCC_MSI_Enable>:
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	6013      	str	r3, [r2, #0]
}
 8002ca8:	bf00      	nop
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <LL_RCC_MSI_Disable>:
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cc0:	f023 0301 	bic.w	r3, r3, #1
 8002cc4:	6013      	str	r3, [r2, #0]
}
 8002cc6:	bf00      	nop
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <LL_RCC_MSI_IsReady>:
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d101      	bne.n	8002ce6 <LL_RCC_MSI_IsReady+0x16>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <LL_RCC_MSI_IsReady+0x18>
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <LL_RCC_MSI_SetRange>:
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <LL_RCC_MSI_GetRange>:
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d2a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2bb0      	cmp	r3, #176	; 0xb0
 8002d30:	d901      	bls.n	8002d36 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002d32:	23b0      	movs	r3, #176	; 0xb0
 8002d34:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002d36:	687b      	ldr	r3, [r7, #4]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	021b      	lsls	r3, r3, #8
 8002d5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	604b      	str	r3, [r1, #4]
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <LL_RCC_SetSysClkSource>:
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f023 0203 	bic.w	r2, r3, #3
 8002d80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	608b      	str	r3, [r1, #8]
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <LL_RCC_GetSysClkSource>:
{
 8002d96:	b480      	push	{r7}
 8002d98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 030c 	and.w	r3, r3, #12
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <LL_RCC_SetAHBPrescaler>:
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	608b      	str	r3, [r1, #8]
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <LL_C2_RCC_SetAHBPrescaler>:
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002de6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <LL_RCC_SetAHB4Prescaler>:
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e12:	f023 020f 	bic.w	r2, r3, #15
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <LL_RCC_SetAPB1Prescaler>:
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	608b      	str	r3, [r1, #8]
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_RCC_SetAPB2Prescaler>:
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	608b      	str	r3, [r1, #8]
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_RCC_GetAHBPrescaler>:
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <LL_RCC_GetAHB4Prescaler>:
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <LL_RCC_GetAPB1Prescaler>:
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <LL_RCC_GetAPB2Prescaler>:
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <LL_RCC_PLL_Enable>:
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ef6:	6013      	str	r3, [r2, #0]
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <LL_RCC_PLL_Disable>:
{
 8002f02:	b480      	push	{r7}
 8002f04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f14:	6013      	str	r3, [r2, #0]
}
 8002f16:	bf00      	nop
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <LL_RCC_PLL_IsReady>:
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f32:	d101      	bne.n	8002f38 <LL_RCC_PLL_IsReady+0x18>
 8002f34:	2301      	movs	r3, #1
 8002f36:	e000      	b.n	8002f3a <LL_RCC_PLL_IsReady+0x1a>
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <LL_RCC_PLL_GetN>:
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	0a1b      	lsrs	r3, r3, #8
 8002f50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <LL_RCC_PLL_GetR>:
{
 8002f5e:	b480      	push	{r7}
 8002f60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <LL_RCC_PLL_GetDivider>:
{
 8002f76:	b480      	push	{r7}
 8002f78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <LL_RCC_PLL_GetMainSource>:
{
 8002f8e:	b480      	push	{r7}
 8002f90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0303 	and.w	r3, r3, #3
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <LL_RCC_IsActiveFlag_HPRE>:
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb8:	d101      	bne.n	8002fbe <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e000      	b.n	8002fc0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8002fca:	b480      	push	{r7}
 8002fcc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fde:	d101      	bne.n	8002fe4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003004:	d101      	bne.n	800300a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003006:	2301      	movs	r3, #1
 8003008:	e000      	b.n	800300c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8003016:	b480      	push	{r7}
 8003018:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800301a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003024:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003028:	d101      	bne.n	800302e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <LL_RCC_IsActiveFlag_PPRE2>:
{
 800303a:	b480      	push	{r7}
 800303c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800303e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003048:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800304c:	d101      	bne.n	8003052 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
	...

08003060 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003060:	b590      	push	{r4, r7, lr}
 8003062:	b08d      	sub	sp, #52	; 0x34
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e37f      	b.n	8003772 <HAL_RCC_OscConfig+0x712>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 8092 	beq.w	80031a4 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003080:	f7ff fe89 	bl	8002d96 <LL_RCC_GetSysClkSource>
 8003084:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003086:	f7ff ff82 	bl	8002f8e <LL_RCC_PLL_GetMainSource>
 800308a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800308c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308e:	2b00      	cmp	r3, #0
 8003090:	d005      	beq.n	800309e <HAL_RCC_OscConfig+0x3e>
 8003092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003094:	2b0c      	cmp	r3, #12
 8003096:	d14c      	bne.n	8003132 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309a:	2b01      	cmp	r3, #1
 800309c:	d149      	bne.n	8003132 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800309e:	f7ff fe17 	bl	8002cd0 <LL_RCC_MSI_IsReady>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_OscConfig+0x54>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e35e      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80030b8:	f7ff fe2f 	bl	8002d1a <LL_RCC_MSI_GetRange>
 80030bc:	4603      	mov	r3, r0
 80030be:	429c      	cmp	r4, r3
 80030c0:	d914      	bls.n	80030ec <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fd44 	bl	8003b54 <RCC_SetFlashLatencyFromMSIRange>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e34d      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fe09 	bl	8002cf2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff fe2d 	bl	8002d44 <LL_RCC_MSI_SetCalibTrimming>
 80030ea:	e013      	b.n	8003114 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fdfe 	bl	8002cf2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff fe22 	bl	8002d44 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	4618      	mov	r0, r3
 8003106:	f000 fd25 	bl	8003b54 <RCC_SetFlashLatencyFromMSIRange>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e32e      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003114:	f000 fcde 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 8003118:	4603      	mov	r3, r0
 800311a:	4aa5      	ldr	r2, [pc, #660]	; (80033b0 <HAL_RCC_OscConfig+0x350>)
 800311c:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800311e:	4ba5      	ldr	r3, [pc, #660]	; (80033b4 <HAL_RCC_OscConfig+0x354>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7fe ffa4 	bl	8002070 <HAL_InitTick>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d039      	beq.n	80031a2 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e31f      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d01e      	beq.n	8003178 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800313a:	f7ff fdab 	bl	8002c94 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800313e:	f7fe ffe5 	bl	800210c <HAL_GetTick>
 8003142:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003146:	f7fe ffe1 	bl	800210c <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e30c      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003158:	f7ff fdba 	bl	8002cd0 <LL_RCC_MSI_IsReady>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f1      	beq.n	8003146 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff fdc3 	bl	8002cf2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff fde7 	bl	8002d44 <LL_RCC_MSI_SetCalibTrimming>
 8003176:	e015      	b.n	80031a4 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003178:	f7ff fd9b 	bl	8002cb2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800317c:	f7fe ffc6 	bl	800210c <HAL_GetTick>
 8003180:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003184:	f7fe ffc2 	bl	800210c <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e2ed      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003196:	f7ff fd9b 	bl	8002cd0 <LL_RCC_MSI_IsReady>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1f1      	bne.n	8003184 <HAL_RCC_OscConfig+0x124>
 80031a0:	e000      	b.n	80031a4 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031a2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d04e      	beq.n	800324e <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031b0:	f7ff fdf1 	bl	8002d96 <LL_RCC_GetSysClkSource>
 80031b4:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031b6:	f7ff feea 	bl	8002f8e <LL_RCC_PLL_GetMainSource>
 80031ba:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d005      	beq.n	80031ce <HAL_RCC_OscConfig+0x16e>
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	2b0c      	cmp	r3, #12
 80031c6:	d10d      	bne.n	80031e4 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	d10a      	bne.n	80031e4 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ce:	f7ff fc01 	bl	80029d4 <LL_RCC_HSE_IsReady>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d039      	beq.n	800324c <HAL_RCC_OscConfig+0x1ec>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d135      	bne.n	800324c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e2c6      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ec:	d102      	bne.n	80031f4 <HAL_RCC_OscConfig+0x194>
 80031ee:	f7ff fbd3 	bl	8002998 <LL_RCC_HSE_Enable>
 80031f2:	e001      	b.n	80031f8 <HAL_RCC_OscConfig+0x198>
 80031f4:	f7ff fbdf 	bl	80029b6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d012      	beq.n	8003226 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003200:	f7fe ff84 	bl	800210c <HAL_GetTick>
 8003204:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003208:	f7fe ff80 	bl	800210c <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b64      	cmp	r3, #100	; 0x64
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e2ab      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() == 0U)
 800321a:	f7ff fbdb 	bl	80029d4 <LL_RCC_HSE_IsReady>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0f1      	beq.n	8003208 <HAL_RCC_OscConfig+0x1a8>
 8003224:	e013      	b.n	800324e <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003226:	f7fe ff71 	bl	800210c <HAL_GetTick>
 800322a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800322e:	f7fe ff6d 	bl	800210c <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b64      	cmp	r3, #100	; 0x64
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e298      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003240:	f7ff fbc8 	bl	80029d4 <LL_RCC_HSE_IsReady>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f1      	bne.n	800322e <HAL_RCC_OscConfig+0x1ce>
 800324a:	e000      	b.n	800324e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d051      	beq.n	80032fe <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800325a:	f7ff fd9c 	bl	8002d96 <LL_RCC_GetSysClkSource>
 800325e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003260:	f7ff fe95 	bl	8002f8e <LL_RCC_PLL_GetMainSource>
 8003264:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	2b04      	cmp	r3, #4
 800326a:	d005      	beq.n	8003278 <HAL_RCC_OscConfig+0x218>
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	2b0c      	cmp	r3, #12
 8003270:	d113      	bne.n	800329a <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d110      	bne.n	800329a <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003278:	f7ff fbdc 	bl	8002a34 <LL_RCC_HSI_IsReady>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_RCC_OscConfig+0x22e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e271      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff fbe0 	bl	8002a58 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003298:	e031      	b.n	80032fe <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d019      	beq.n	80032d6 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a2:	f7ff fba9 	bl	80029f8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a6:	f7fe ff31 	bl	800210c <HAL_GetTick>
 80032aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ae:	f7fe ff2d 	bl	800210c <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e258      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() == 0U)
 80032c0:	f7ff fbb8 	bl	8002a34 <LL_RCC_HSI_IsReady>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f1      	beq.n	80032ae <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff fbc2 	bl	8002a58 <LL_RCC_HSI_SetCalibTrimming>
 80032d4:	e013      	b.n	80032fe <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032d6:	f7ff fb9e 	bl	8002a16 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032da:	f7fe ff17 	bl	800210c <HAL_GetTick>
 80032de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e2:	f7fe ff13 	bl	800210c <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e23e      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() != 0U)
 80032f4:	f7ff fb9e 	bl	8002a34 <LL_RCC_HSI_IsReady>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f1      	bne.n	80032e2 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d106      	bne.n	8003318 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 80a4 	beq.w	8003460 <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d077      	beq.n	8003410 <HAL_RCC_OscConfig+0x3b0>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0310 	and.w	r3, r3, #16
 8003328:	2b00      	cmp	r3, #0
 800332a:	d04b      	beq.n	80033c4 <HAL_RCC_OscConfig+0x364>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800332c:	f7ff fc55 	bl	8002bda <LL_RCC_LSI1_IsReady>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d113      	bne.n	800335e <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003336:	f7ff fc2e 	bl	8002b96 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800333a:	f7fe fee7 	bl	800210c <HAL_GetTick>
 800333e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003342:	f7fe fee3 	bl	800210c <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e20e      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003354:	f7ff fc41 	bl	8002bda <LL_RCC_LSI1_IsReady>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f1      	beq.n	8003342 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800335e:	f7ff fc4e 	bl	8002bfe <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003362:	f7fe fed3 	bl	800210c <HAL_GetTick>
 8003366:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800336a:	f7fe fecf 	bl	800210c <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b03      	cmp	r3, #3
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e1fa      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800337c:	f7ff fc61 	bl	8002c42 <LL_RCC_LSI2_IsReady>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0f1      	beq.n	800336a <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff fc6b 	bl	8002c66 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003390:	f7ff fc12 	bl	8002bb8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003394:	f7fe feba 	bl	800210c <HAL_GetTick>
 8003398:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800339a:	e00d      	b.n	80033b8 <HAL_RCC_OscConfig+0x358>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800339c:	f7fe feb6 	bl	800210c <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d906      	bls.n	80033b8 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e1e1      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
 80033ae:	bf00      	nop
 80033b0:	20000004 	.word	0x20000004
 80033b4:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() != 0U)
 80033b8:	f7ff fc0f 	bl	8002bda <LL_RCC_LSI1_IsReady>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1ec      	bne.n	800339c <HAL_RCC_OscConfig+0x33c>
 80033c2:	e04d      	b.n	8003460 <HAL_RCC_OscConfig+0x400>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80033c4:	f7ff fbe7 	bl	8002b96 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c8:	f7fe fea0 	bl	800210c <HAL_GetTick>
 80033cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x382>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80033d0:	f7fe fe9c 	bl	800210c <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e1c7      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80033e2:	f7ff fbfa 	bl	8002bda <LL_RCC_LSI1_IsReady>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0f1      	beq.n	80033d0 <HAL_RCC_OscConfig+0x370>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80033ec:	f7ff fc18 	bl	8002c20 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x3a4>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80033f2:	f7fe fe8b 	bl	800210c <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b03      	cmp	r3, #3
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e1b6      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003404:	f7ff fc1d 	bl	8002c42 <LL_RCC_LSI2_IsReady>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f1      	bne.n	80033f2 <HAL_RCC_OscConfig+0x392>
 800340e:	e027      	b.n	8003460 <HAL_RCC_OscConfig+0x400>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003410:	f7ff fc06 	bl	8002c20 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003414:	f7fe fe7a 	bl	800210c <HAL_GetTick>
 8003418:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x3ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800341c:	f7fe fe76 	bl	800210c <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b03      	cmp	r3, #3
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e1a1      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800342e:	f7ff fc08 	bl	8002c42 <LL_RCC_LSI2_IsReady>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1f1      	bne.n	800341c <HAL_RCC_OscConfig+0x3bc>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003438:	f7ff fbbe 	bl	8002bb8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343c:	f7fe fe66 	bl	800210c <HAL_GetTick>
 8003440:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x3f6>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003444:	f7fe fe62 	bl	800210c <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e18d      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003456:	f7ff fbc0 	bl	8002bda <LL_RCC_LSI1_IsReady>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1f1      	bne.n	8003444 <HAL_RCC_OscConfig+0x3e4>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d05b      	beq.n	8003524 <HAL_RCC_OscConfig+0x4c4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800346c:	4ba7      	ldr	r3, [pc, #668]	; (800370c <HAL_RCC_OscConfig+0x6ac>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d114      	bne.n	80034a2 <HAL_RCC_OscConfig+0x442>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003478:	f7ff fa5e 	bl	8002938 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800347c:	f7fe fe46 	bl	800210c <HAL_GetTick>
 8003480:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x436>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003484:	f7fe fe42 	bl	800210c <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e16d      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003496:	4b9d      	ldr	r3, [pc, #628]	; (800370c <HAL_RCC_OscConfig+0x6ac>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f0      	beq.n	8003484 <HAL_RCC_OscConfig+0x424>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d102      	bne.n	80034b0 <HAL_RCC_OscConfig+0x450>
 80034aa:	f7ff fb1e 	bl	8002aea <LL_RCC_LSE_Enable>
 80034ae:	e00c      	b.n	80034ca <HAL_RCC_OscConfig+0x46a>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b05      	cmp	r3, #5
 80034b6:	d104      	bne.n	80034c2 <HAL_RCC_OscConfig+0x462>
 80034b8:	f7ff fb39 	bl	8002b2e <LL_RCC_LSE_EnableBypass>
 80034bc:	f7ff fb15 	bl	8002aea <LL_RCC_LSE_Enable>
 80034c0:	e003      	b.n	80034ca <HAL_RCC_OscConfig+0x46a>
 80034c2:	f7ff fb23 	bl	8002b0c <LL_RCC_LSE_Disable>
 80034c6:	f7ff fb43 	bl	8002b50 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d014      	beq.n	80034fc <HAL_RCC_OscConfig+0x49c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d2:	f7fe fe1b 	bl	800210c <HAL_GetTick>
 80034d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80034d8:	e00a      	b.n	80034f0 <HAL_RCC_OscConfig+0x490>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034da:	f7fe fe17 	bl	800210c <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e140      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() == 0U)
 80034f0:	f7ff fb3f 	bl	8002b72 <LL_RCC_LSE_IsReady>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0ef      	beq.n	80034da <HAL_RCC_OscConfig+0x47a>
 80034fa:	e013      	b.n	8003524 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fc:	f7fe fe06 	bl	800210c <HAL_GetTick>
 8003500:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003502:	e00a      	b.n	800351a <HAL_RCC_OscConfig+0x4ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003504:	f7fe fe02 	bl	800210c <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003512:	4293      	cmp	r3, r2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e12b      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() != 0U)
 800351a:	f7ff fb2a 	bl	8002b72 <LL_RCC_LSE_IsReady>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1ef      	bne.n	8003504 <HAL_RCC_OscConfig+0x4a4>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352c:	2b00      	cmp	r3, #0
 800352e:	d02c      	beq.n	800358a <HAL_RCC_OscConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003534:	2b00      	cmp	r3, #0
 8003536:	d014      	beq.n	8003562 <HAL_RCC_OscConfig+0x502>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003538:	f7ff faa3 	bl	8002a82 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353c:	f7fe fde6 	bl	800210c <HAL_GetTick>
 8003540:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x4f6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003544:	f7fe fde2 	bl	800210c <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e10d      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003556:	f7ff fab6 	bl	8002ac6 <LL_RCC_HSI48_IsReady>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f1      	beq.n	8003544 <HAL_RCC_OscConfig+0x4e4>
 8003560:	e013      	b.n	800358a <HAL_RCC_OscConfig+0x52a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003562:	f7ff fa9f 	bl	8002aa4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003566:	f7fe fdd1 	bl	800210c <HAL_GetTick>
 800356a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x520>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800356e:	f7fe fdcd 	bl	800210c <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e0f8      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003580:	f7ff faa1 	bl	8002ac6 <LL_RCC_HSI48_IsReady>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f1      	bne.n	800356e <HAL_RCC_OscConfig+0x50e>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 80ee 	beq.w	8003770 <HAL_RCC_OscConfig+0x710>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003594:	f7ff fbff 	bl	8002d96 <LL_RCC_GetSysClkSource>
 8003598:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800359a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	f040 80b4 	bne.w	8003714 <HAL_RCC_OscConfig+0x6b4>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 0203 	and.w	r2, r3, #3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d123      	bne.n	8003602 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d11c      	bne.n	8003602 <HAL_RCC_OscConfig+0x5a2>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	0a1b      	lsrs	r3, r3, #8
 80035cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d114      	bne.n	8003602 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d10d      	bne.n	8003602 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d106      	bne.n	8003602 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80035fe:	429a      	cmp	r2, r3
 8003600:	d05d      	beq.n	80036be <HAL_RCC_OscConfig+0x65e>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	2b0c      	cmp	r3, #12
 8003606:	d058      	beq.n	80036ba <HAL_RCC_OscConfig+0x65a>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_RCC_OscConfig+0x5ba>

          {
            return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e0ab      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800361a:	f7ff fc72 	bl	8002f02 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800361e:	f7fe fd75 	bl	800210c <HAL_GetTick>
 8003622:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x5d8>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003626:	f7fe fd71 	bl	800210c <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x5d8>
              {
                return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e09c      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1ef      	bne.n	8003626 <HAL_RCC_OscConfig+0x5c6>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	4b30      	ldr	r3, [pc, #192]	; (8003710 <HAL_RCC_OscConfig+0x6b0>)
 800364e:	4013      	ands	r3, r2
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003658:	4311      	orrs	r1, r2
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800365e:	0212      	lsls	r2, r2, #8
 8003660:	4311      	orrs	r1, r2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003666:	4311      	orrs	r1, r2
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800366c:	4311      	orrs	r1, r2
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003672:	430a      	orrs	r2, r1
 8003674:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003678:	4313      	orrs	r3, r2
 800367a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800367c:	f7ff fc32 	bl	8002ee4 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800368a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800368e:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003690:	f7fe fd3c 	bl	800210c <HAL_GetTick>
 8003694:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x64a>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003698:	f7fe fd38 	bl	800210c <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x64a>
              {
                return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e063      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0ef      	beq.n	8003698 <HAL_RCC_OscConfig+0x638>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036b8:	e05a      	b.n	8003770 <HAL_RCC_OscConfig+0x710>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e059      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d151      	bne.n	8003770 <HAL_RCC_OscConfig+0x710>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036cc:	f7ff fc0a 	bl	8002ee4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036e0:	f7fe fd14 	bl	800210c <HAL_GetTick>
 80036e4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x69a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e8:	f7fe fd10 	bl	800210c <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x69a>
            {
              return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e03b      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0ef      	beq.n	80036e8 <HAL_RCC_OscConfig+0x688>
 8003708:	e032      	b.n	8003770 <HAL_RCC_OscConfig+0x710>
 800370a:	bf00      	nop
 800370c:	58000400 	.word	0x58000400
 8003710:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	2b0c      	cmp	r3, #12
 8003718:	d028      	beq.n	800376c <HAL_RCC_OscConfig+0x70c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371a:	f7ff fbf2 	bl	8002f02 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800371e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003728:	f023 0303 	bic.w	r3, r3, #3
 800372c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800372e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003738:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800373c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003740:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003742:	f7fe fce3 	bl	800210c <HAL_GetTick>
 8003746:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x6fc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800374a:	f7fe fcdf 	bl	800210c <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x6fc>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e00a      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800375c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1ef      	bne.n	800374a <HAL_RCC_OscConfig+0x6ea>
 800376a:	e001      	b.n	8003770 <HAL_RCC_OscConfig+0x710>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <HAL_RCC_OscConfig+0x712>
      }
    }
  }
  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3734      	adds	r7, #52	; 0x34
 8003776:	46bd      	mov	sp, r7
 8003778:	bd90      	pop	{r4, r7, pc}
 800377a:	bf00      	nop

0800377c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e12d      	b.n	80039ec <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003790:	4b98      	ldr	r3, [pc, #608]	; (80039f4 <HAL_RCC_ClockConfig+0x278>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d91b      	bls.n	80037d6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379e:	4b95      	ldr	r3, [pc, #596]	; (80039f4 <HAL_RCC_ClockConfig+0x278>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f023 0207 	bic.w	r2, r3, #7
 80037a6:	4993      	ldr	r1, [pc, #588]	; (80039f4 <HAL_RCC_ClockConfig+0x278>)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ae:	f7fe fcad 	bl	800210c <HAL_GetTick>
 80037b2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b4:	e008      	b.n	80037c8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80037b6:	f7fe fca9 	bl	800210c <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e111      	b.n	80039ec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c8:	4b8a      	ldr	r3, [pc, #552]	; (80039f4 <HAL_RCC_ClockConfig+0x278>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d1ef      	bne.n	80037b6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d016      	beq.n	8003810 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff fae1 	bl	8002dae <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037ec:	f7fe fc8e 	bl	800210c <HAL_GetTick>
 80037f0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037f4:	f7fe fc8a 	bl	800210c <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e0f2      	b.n	80039ec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003806:	f7ff fbce 	bl	8002fa6 <LL_RCC_IsActiveFlag_HPRE>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0f1      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d016      	beq.n	800384a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff fad8 	bl	8002dd6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003826:	f7fe fc71 	bl	800210c <HAL_GetTick>
 800382a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800382c:	e008      	b.n	8003840 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800382e:	f7fe fc6d 	bl	800210c <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e0d5      	b.n	80039ec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003840:	f7ff fbc3 	bl	8002fca <LL_RCC_IsActiveFlag_C2HPRE>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0f1      	beq.n	800382e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003852:	2b00      	cmp	r3, #0
 8003854:	d016      	beq.n	8003884 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff fad1 	bl	8002e02 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003860:	f7fe fc54 	bl	800210c <HAL_GetTick>
 8003864:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003866:	e008      	b.n	800387a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003868:	f7fe fc50 	bl	800210c <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e0b8      	b.n	80039ec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800387a:	f7ff fbb9 	bl	8002ff0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0f1      	beq.n	8003868 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d016      	beq.n	80038be <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff facb 	bl	8002e30 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800389a:	f7fe fc37 	bl	800210c <HAL_GetTick>
 800389e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80038a0:	e008      	b.n	80038b4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80038a2:	f7fe fc33 	bl	800210c <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e09b      	b.n	80039ec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80038b4:	f7ff fbaf 	bl	8003016 <LL_RCC_IsActiveFlag_PPRE1>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0f1      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d017      	beq.n	80038fa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff fac1 	bl	8002e58 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80038d6:	f7fe fc19 	bl	800210c <HAL_GetTick>
 80038da:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80038de:	f7fe fc15 	bl	800210c <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e07d      	b.n	80039ec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80038f0:	f7ff fba3 	bl	800303a <LL_RCC_IsActiveFlag_PPRE2>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0f1      	beq.n	80038de <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d043      	beq.n	800398e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d106      	bne.n	800391c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800390e:	f7ff f861 	bl	80029d4 <LL_RCC_HSE_IsReady>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d11e      	bne.n	8003956 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e067      	b.n	80039ec <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b03      	cmp	r3, #3
 8003922:	d106      	bne.n	8003932 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003924:	f7ff fafc 	bl	8002f20 <LL_RCC_PLL_IsReady>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d113      	bne.n	8003956 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e05c      	b.n	80039ec <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800393a:	f7ff f9c9 	bl	8002cd0 <LL_RCC_MSI_IsReady>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d108      	bne.n	8003956 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e051      	b.n	80039ec <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003948:	f7ff f874 	bl	8002a34 <LL_RCC_HSI_IsReady>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e04a      	b.n	80039ec <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff fa07 	bl	8002d6e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003960:	f7fe fbd4 	bl	800210c <HAL_GetTick>
 8003964:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003966:	e00a      	b.n	800397e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003968:	f7fe fbd0 	bl	800210c <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	f241 3288 	movw	r2, #5000	; 0x1388
 8003976:	4293      	cmp	r3, r2
 8003978:	d901      	bls.n	800397e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e036      	b.n	80039ec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397e:	f7ff fa0a 	bl	8002d96 <LL_RCC_GetSysClkSource>
 8003982:	4602      	mov	r2, r0
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	429a      	cmp	r2, r3
 800398c:	d1ec      	bne.n	8003968 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800398e:	4b19      	ldr	r3, [pc, #100]	; (80039f4 <HAL_RCC_ClockConfig+0x278>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d21b      	bcs.n	80039d4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399c:	4b15      	ldr	r3, [pc, #84]	; (80039f4 <HAL_RCC_ClockConfig+0x278>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f023 0207 	bic.w	r2, r3, #7
 80039a4:	4913      	ldr	r1, [pc, #76]	; (80039f4 <HAL_RCC_ClockConfig+0x278>)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ac:	f7fe fbae 	bl	800210c <HAL_GetTick>
 80039b0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80039b4:	f7fe fbaa 	bl	800210c <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e012      	b.n	80039ec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c6:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <HAL_RCC_ClockConfig+0x278>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d1ef      	bne.n	80039b4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80039d4:	f000 f87e 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 80039d8:	4603      	mov	r3, r0
 80039da:	4a07      	ldr	r2, [pc, #28]	; (80039f8 <HAL_RCC_ClockConfig+0x27c>)
 80039dc:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80039de:	f7fe fba1 	bl	8002124 <HAL_GetTickPrio>
 80039e2:	4603      	mov	r3, r0
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fe fb43 	bl	8002070 <HAL_InitTick>
 80039ea:	4603      	mov	r3, r0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	58004000 	.word	0x58004000
 80039f8:	20000004 	.word	0x20000004

080039fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039fc:	b590      	push	{r4, r7, lr}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a02:	f7ff f9c8 	bl	8002d96 <LL_RCC_GetSysClkSource>
 8003a06:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10a      	bne.n	8003a24 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003a0e:	f7ff f984 	bl	8002d1a <LL_RCC_MSI_GetRange>
 8003a12:	4603      	mov	r3, r0
 8003a14:	091b      	lsrs	r3, r3, #4
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	4a2b      	ldr	r2, [pc, #172]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	e04b      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	d102      	bne.n	8003a30 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a2a:	4b28      	ldr	r3, [pc, #160]	; (8003acc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a2c:	60fb      	str	r3, [r7, #12]
 8003a2e:	e045      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d10a      	bne.n	8003a4c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a36:	f7fe ff9d 	bl	8002974 <LL_RCC_HSE_IsEnabledDiv2>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d102      	bne.n	8003a46 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003a40:	4b22      	ldr	r3, [pc, #136]	; (8003acc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	e03a      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003a46:	4b22      	ldr	r3, [pc, #136]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	e037      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003a4c:	f7ff fa9f 	bl	8002f8e <LL_RCC_PLL_GetMainSource>
 8003a50:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d003      	beq.n	8003a60 <HAL_RCC_GetSysClockFreq+0x64>
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d003      	beq.n	8003a66 <HAL_RCC_GetSysClockFreq+0x6a>
 8003a5e:	e00d      	b.n	8003a7c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003a60:	4b1a      	ldr	r3, [pc, #104]	; (8003acc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a62:	60bb      	str	r3, [r7, #8]
        break;
 8003a64:	e015      	b.n	8003a92 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a66:	f7fe ff85 	bl	8002974 <LL_RCC_HSE_IsEnabledDiv2>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d102      	bne.n	8003a76 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003a70:	4b16      	ldr	r3, [pc, #88]	; (8003acc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a72:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003a74:	e00d      	b.n	8003a92 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003a76:	4b16      	ldr	r3, [pc, #88]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a78:	60bb      	str	r3, [r7, #8]
        break;
 8003a7a:	e00a      	b.n	8003a92 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003a7c:	f7ff f94d 	bl	8002d1a <LL_RCC_MSI_GetRange>
 8003a80:	4603      	mov	r3, r0
 8003a82:	091b      	lsrs	r3, r3, #4
 8003a84:	f003 030f 	and.w	r3, r3, #15
 8003a88:	4a0f      	ldr	r2, [pc, #60]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a8e:	60bb      	str	r3, [r7, #8]
        break;
 8003a90:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8003a92:	f7ff fa57 	bl	8002f44 <LL_RCC_PLL_GetN>
 8003a96:	4602      	mov	r2, r0
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	fb03 f402 	mul.w	r4, r3, r2
 8003a9e:	f7ff fa6a 	bl	8002f76 <LL_RCC_PLL_GetDivider>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	091b      	lsrs	r3, r3, #4
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	fbb4 f4f3 	udiv	r4, r4, r3
 8003aac:	f7ff fa57 	bl	8002f5e <LL_RCC_PLL_GetR>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	0f5b      	lsrs	r3, r3, #29
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	fbb4 f3f3 	udiv	r3, r4, r3
 8003aba:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8003abc:	68fb      	ldr	r3, [r7, #12]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd90      	pop	{r4, r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	08009484 	.word	0x08009484
 8003acc:	00f42400 	.word	0x00f42400
 8003ad0:	01e84800 	.word	0x01e84800

08003ad4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad4:	b598      	push	{r3, r4, r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003ad8:	f7ff ff90 	bl	80039fc <HAL_RCC_GetSysClockFreq>
 8003adc:	4604      	mov	r4, r0
 8003ade:	f7ff f9cf 	bl	8002e80 <LL_RCC_GetAHBPrescaler>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	091b      	lsrs	r3, r3, #4
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	4a03      	ldr	r2, [pc, #12]	; (8003af8 <HAL_RCC_GetHCLKFreq+0x24>)
 8003aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003af0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	bd98      	pop	{r3, r4, r7, pc}
 8003af8:	08009424 	.word	0x08009424

08003afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003afc:	b598      	push	{r3, r4, r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003b00:	f7ff ffe8 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 8003b04:	4604      	mov	r4, r0
 8003b06:	f7ff f9d5 	bl	8002eb4 <LL_RCC_GetAPB1Prescaler>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	0a1b      	lsrs	r3, r3, #8
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	4a04      	ldr	r2, [pc, #16]	; (8003b24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b18:	f003 031f 	and.w	r3, r3, #31
 8003b1c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	bd98      	pop	{r3, r4, r7, pc}
 8003b24:	08009464 	.word	0x08009464

08003b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b28:	b598      	push	{r3, r4, r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003b2c:	f7ff ffd2 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 8003b30:	4604      	mov	r4, r0
 8003b32:	f7ff f9cb 	bl	8002ecc <LL_RCC_GetAPB2Prescaler>
 8003b36:	4603      	mov	r3, r0
 8003b38:	0adb      	lsrs	r3, r3, #11
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	4a04      	ldr	r2, [pc, #16]	; (8003b50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b44:	f003 031f 	and.w	r3, r3, #31
 8003b48:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	bd98      	pop	{r3, r4, r7, pc}
 8003b50:	08009464 	.word	0x08009464

08003b54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003b54:	b590      	push	{r4, r7, lr}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2bb0      	cmp	r3, #176	; 0xb0
 8003b60:	d903      	bls.n	8003b6a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003b62:	4b15      	ldr	r3, [pc, #84]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	e007      	b.n	8003b7a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	4a11      	ldr	r2, [pc, #68]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b78:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003b7a:	f7ff f98d 	bl	8002e98 <LL_RCC_GetAHB4Prescaler>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	4a0d      	ldr	r2, [pc, #52]	; (8003bbc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b92:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4a0a      	ldr	r2, [pc, #40]	; (8003bc0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003b98:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9c:	0c9c      	lsrs	r4, r3, #18
 8003b9e:	f7fe fedb 	bl	8002958 <HAL_PWREx_GetVoltageRange>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	f000 f80c 	bl	8003bc4 <RCC_SetFlashLatency>
 8003bac:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd90      	pop	{r4, r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	08009484 	.word	0x08009484
 8003bbc:	08009424 	.word	0x08009424
 8003bc0:	431bde83 	.word	0x431bde83

08003bc4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003bc4:	b590      	push	{r4, r7, lr}
 8003bc6:	b093      	sub	sp, #76	; 0x4c
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003bce:	4b37      	ldr	r3, [pc, #220]	; (8003cac <RCC_SetFlashLatency+0xe8>)
 8003bd0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003bd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003bda:	4a35      	ldr	r2, [pc, #212]	; (8003cb0 <RCC_SetFlashLatency+0xec>)
 8003bdc:	f107 031c 	add.w	r3, r7, #28
 8003be0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003be2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003be6:	4b33      	ldr	r3, [pc, #204]	; (8003cb4 <RCC_SetFlashLatency+0xf0>)
 8003be8:	f107 040c 	add.w	r4, r7, #12
 8003bec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bfc:	d11a      	bne.n	8003c34 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003bfe:	2300      	movs	r3, #0
 8003c00:	643b      	str	r3, [r7, #64]	; 0x40
 8003c02:	e013      	b.n	8003c2c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	3348      	adds	r3, #72	; 0x48
 8003c0a:	443b      	add	r3, r7
 8003c0c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d807      	bhi.n	8003c26 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	3348      	adds	r3, #72	; 0x48
 8003c1c:	443b      	add	r3, r7
 8003c1e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003c22:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003c24:	e020      	b.n	8003c68 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c28:	3301      	adds	r3, #1
 8003c2a:	643b      	str	r3, [r7, #64]	; 0x40
 8003c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c2e:	2b03      	cmp	r3, #3
 8003c30:	d9e8      	bls.n	8003c04 <RCC_SetFlashLatency+0x40>
 8003c32:	e019      	b.n	8003c68 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c34:	2300      	movs	r3, #0
 8003c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c38:	e013      	b.n	8003c62 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	3348      	adds	r3, #72	; 0x48
 8003c40:	443b      	add	r3, r7
 8003c42:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d807      	bhi.n	8003c5c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	3348      	adds	r3, #72	; 0x48
 8003c52:	443b      	add	r3, r7
 8003c54:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003c58:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003c5a:	e005      	b.n	8003c68 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c5e:	3301      	adds	r3, #1
 8003c60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d9e8      	bls.n	8003c3a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003c68:	4b13      	ldr	r3, [pc, #76]	; (8003cb8 <RCC_SetFlashLatency+0xf4>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f023 0207 	bic.w	r2, r3, #7
 8003c70:	4911      	ldr	r1, [pc, #68]	; (8003cb8 <RCC_SetFlashLatency+0xf4>)
 8003c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c74:	4313      	orrs	r3, r2
 8003c76:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c78:	f7fe fa48 	bl	800210c <HAL_GetTick>
 8003c7c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c7e:	e008      	b.n	8003c92 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c80:	f7fe fa44 	bl	800210c <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e007      	b.n	8003ca2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c92:	4b09      	ldr	r3, [pc, #36]	; (8003cb8 <RCC_SetFlashLatency+0xf4>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d1ef      	bne.n	8003c80 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	374c      	adds	r7, #76	; 0x4c
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd90      	pop	{r4, r7, pc}
 8003caa:	bf00      	nop
 8003cac:	08009260 	.word	0x08009260
 8003cb0:	08009270 	.word	0x08009270
 8003cb4:	0800927c 	.word	0x0800927c
 8003cb8:	58004000 	.word	0x58004000

08003cbc <LL_RCC_LSE_IsEnabled>:
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <LL_RCC_LSE_IsEnabled+0x18>
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <LL_RCC_LSE_IsEnabled+0x1a>
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <LL_RCC_LSE_IsReady>:
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d101      	bne.n	8003cf8 <LL_RCC_LSE_IsReady+0x18>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <LL_RCC_LSE_IsReady+0x1a>
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <LL_RCC_SetRFWKPClockSource>:
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <LL_RCC_SetSMPSClockSource>:
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	f023 0203 	bic.w	r2, r3, #3
 8003d42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <LL_RCC_SetSMPSPrescaler>:
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <LL_RCC_SetUSARTClockSource>:
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d90:	f023 0203 	bic.w	r2, r3, #3
 8003d94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <LL_RCC_SetLPUARTClockSource>:
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003dc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <LL_RCC_SetI2CClockSource>:
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	091b      	lsrs	r3, r3, #4
 8003dec:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003df0:	43db      	mvns	r3, r3
 8003df2:	401a      	ands	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003dfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <LL_RCC_SetLPTIMClockSource>:
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e1e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	0c1b      	lsrs	r3, r3, #16
 8003e26:	041b      	lsls	r3, r3, #16
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	401a      	ands	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	041b      	lsls	r3, r3, #16
 8003e30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <LL_RCC_SetSAIClockSource>:
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <LL_RCC_SetRNGClockSource>:
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e82:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003e86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <LL_RCC_SetCLK48ClockSource>:
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <LL_RCC_SetUSBClockSource>:
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b082      	sub	sp, #8
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff ffe3 	bl	8003e9e <LL_RCC_SetCLK48ClockSource>
}
 8003ed8:	bf00      	nop
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <LL_RCC_SetADCClockSource>:
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ef4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <LL_RCC_SetRTCClockSource>:
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <LL_RCC_GetRTCClockSource>:
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f44:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <LL_RCC_ForceBackupDomainReset>:
{
 8003f52:	b480      	push	{r7}
 8003f54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f6a:	bf00      	nop
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f8c:	bf00      	nop
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <LL_RCC_PLLSAI1_Enable>:
{
 8003f96:	b480      	push	{r7}
 8003f98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fa4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fa8:	6013      	str	r3, [r2, #0]
}
 8003faa:	bf00      	nop
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <LL_RCC_PLLSAI1_Disable>:
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fc6:	6013      	str	r3, [r2, #0]
}
 8003fc8:	bf00      	nop
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <LL_RCC_PLLSAI1_IsReady>:
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fe0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fe4:	d101      	bne.n	8003fea <LL_RCC_PLLSAI1_IsReady+0x18>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b088      	sub	sp, #32
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003ffe:	2300      	movs	r3, #0
 8004000:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004002:	2300      	movs	r3, #0
 8004004:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400e:	2b00      	cmp	r3, #0
 8004010:	d034      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800401a:	d021      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800401c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004020:	d81b      	bhi.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004022:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004026:	d01d      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004028:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800402c:	d815      	bhi.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00b      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004032:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004036:	d110      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004046:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004048:	e00d      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3304      	adds	r3, #4
 800404e:	4618      	mov	r0, r3
 8004050:	f000 f947 	bl	80042e2 <RCCEx_PLLSAI1_ConfigNP>
 8004054:	4603      	mov	r3, r0
 8004056:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004058:	e005      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	77fb      	strb	r3, [r7, #31]
        break;
 800405e:	e002      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004060:	bf00      	nop
 8004062:	e000      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004064:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004066:	7ffb      	ldrb	r3, [r7, #31]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d105      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff fee8 	bl	8003e46 <LL_RCC_SetSAIClockSource>
 8004076:	e001      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004078:	7ffb      	ldrb	r3, [r7, #31]
 800407a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004084:	2b00      	cmp	r3, #0
 8004086:	d046      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004088:	f7ff ff56 	bl	8003f38 <LL_RCC_GetRTCClockSource>
 800408c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	429a      	cmp	r2, r3
 8004096:	d03c      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004098:	f7fe fc4e 	bl	8002938 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d105      	bne.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff ff30 	bl	8003f0c <LL_RCC_SetRTCClockSource>
 80040ac:	e02e      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80040ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80040b8:	f7ff ff4b 	bl	8003f52 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80040bc:	f7ff ff5a 	bl	8003f74 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80040ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80040d8:	f7ff fdf0 	bl	8003cbc <LL_RCC_LSE_IsEnabled>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d114      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040e2:	f7fe f813 	bl	800210c <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80040e8:	e00b      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ea:	f7fe f80f 	bl	800210c <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d902      	bls.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	77fb      	strb	r3, [r7, #31]
              break;
 8004100:	e004      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004102:	f7ff fded 	bl	8003ce0 <LL_RCC_LSE_IsReady>
 8004106:	4603      	mov	r3, r0
 8004108:	2b01      	cmp	r3, #1
 800410a:	d1ee      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800410c:	7ffb      	ldrb	r3, [r7, #31]
 800410e:	77bb      	strb	r3, [r7, #30]
 8004110:	e001      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004112:	7ffb      	ldrb	r3, [r7, #31]
 8004114:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d004      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff fe2a 	bl	8003d80 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d004      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff fe35 	bl	8003dac <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0310 	and.w	r3, r3, #16
 800414a:	2b00      	cmp	r3, #0
 800414c:	d004      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff fe5d 	bl	8003e12 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0320 	and.w	r3, r3, #32
 8004160:	2b00      	cmp	r3, #0
 8004162:	d004      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff fe52 	bl	8003e12 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b00      	cmp	r3, #0
 8004178:	d004      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff fe2a 	bl	8003dd8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b00      	cmp	r3, #0
 800418e:	d004      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff fe1f 	bl	8003dd8 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d022      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff fe8d 	bl	8003eca <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041b8:	d107      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80041ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041c8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041d2:	d10b      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3304      	adds	r3, #4
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 f8dd 	bl	8004398 <RCCEx_PLLSAI1_ConfigNQ>
 80041de:	4603      	mov	r3, r0
 80041e0:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80041e2:	7ffb      	ldrb	r3, [r7, #31]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 80041e8:	7ffb      	ldrb	r3, [r7, #31]
 80041ea:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d02b      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004200:	d008      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004206:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800420a:	d003      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004210:	2b00      	cmp	r3, #0
 8004212:	d105      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff fe2a 	bl	8003e72 <LL_RCC_SetRNGClockSource>
 800421e:	e00a      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	2000      	movs	r0, #0
 800422c:	f7ff fe21 	bl	8003e72 <LL_RCC_SetRNGClockSource>
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f7ff fe34 	bl	8003e9e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800423e:	d107      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800424a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800424e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004258:	2b00      	cmp	r3, #0
 800425a:	d022      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff fe3d 	bl	8003ee0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800426e:	d107      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800427a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800427e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004284:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004288:	d10b      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3304      	adds	r3, #4
 800428e:	4618      	mov	r0, r3
 8004290:	f000 f8dd 	bl	800444e <RCCEx_PLLSAI1_ConfigNR>
 8004294:	4603      	mov	r3, r0
 8004296:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004298:	7ffb      	ldrb	r3, [r7, #31]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 800429e:	7ffb      	ldrb	r3, [r7, #31]
 80042a0:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d004      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff fd26 	bl	8003d04 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d009      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff fd45 	bl	8003d58 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff fd2c 	bl	8003d30 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80042d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3720      	adds	r7, #32
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b084      	sub	sp, #16
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80042ee:	f7ff fe61 	bl	8003fb4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80042f2:	f7fd ff0b 	bl	800210c <HAL_GetTick>
 80042f6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80042f8:	e009      	b.n	800430e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042fa:	f7fd ff07 	bl	800210c <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d902      	bls.n	800430e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	73fb      	strb	r3, [r7, #15]
      break;
 800430c:	e004      	b.n	8004318 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800430e:	f7ff fe60 	bl	8003fd2 <LL_RCC_PLLSAI1_IsReady>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1f0      	bne.n	80042fa <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004318:	7bfb      	ldrb	r3, [r7, #15]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d137      	bne.n	800438e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800431e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	021b      	lsls	r3, r3, #8
 800432e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004332:	4313      	orrs	r3, r2
 8004334:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004348:	4313      	orrs	r3, r2
 800434a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800434c:	f7ff fe23 	bl	8003f96 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004350:	f7fd fedc 	bl	800210c <HAL_GetTick>
 8004354:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004356:	e009      	b.n	800436c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004358:	f7fd fed8 	bl	800210c <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d902      	bls.n	800436c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	73fb      	strb	r3, [r7, #15]
        break;
 800436a:	e004      	b.n	8004376 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800436c:	f7ff fe31 	bl	8003fd2 <LL_RCC_PLLSAI1_IsReady>
 8004370:	4603      	mov	r3, r0
 8004372:	2b01      	cmp	r3, #1
 8004374:	d1f0      	bne.n	8004358 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004376:	7bfb      	ldrb	r3, [r7, #15]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d108      	bne.n	800438e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800437c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004380:	691a      	ldr	r2, [r3, #16]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800438a:	4313      	orrs	r3, r2
 800438c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800438e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80043a4:	f7ff fe06 	bl	8003fb4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80043a8:	f7fd feb0 	bl	800210c <HAL_GetTick>
 80043ac:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80043ae:	e009      	b.n	80043c4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043b0:	f7fd feac 	bl	800210c <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d902      	bls.n	80043c4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	73fb      	strb	r3, [r7, #15]
      break;
 80043c2:	e004      	b.n	80043ce <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80043c4:	f7ff fe05 	bl	8003fd2 <LL_RCC_PLLSAI1_IsReady>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f0      	bne.n	80043b0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d137      	bne.n	8004444 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80043d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	021b      	lsls	r3, r3, #8
 80043e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043e8:	4313      	orrs	r3, r2
 80043ea:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80043ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043fe:	4313      	orrs	r3, r2
 8004400:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004402:	f7ff fdc8 	bl	8003f96 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004406:	f7fd fe81 	bl	800210c <HAL_GetTick>
 800440a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800440c:	e009      	b.n	8004422 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800440e:	f7fd fe7d 	bl	800210c <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d902      	bls.n	8004422 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	73fb      	strb	r3, [r7, #15]
        break;
 8004420:	e004      	b.n	800442c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004422:	f7ff fdd6 	bl	8003fd2 <LL_RCC_PLLSAI1_IsReady>
 8004426:	4603      	mov	r3, r0
 8004428:	2b01      	cmp	r3, #1
 800442a:	d1f0      	bne.n	800440e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800442c:	7bfb      	ldrb	r3, [r7, #15]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d108      	bne.n	8004444 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004436:	691a      	ldr	r2, [r3, #16]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004440:	4313      	orrs	r3, r2
 8004442:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004444:	7bfb      	ldrb	r3, [r7, #15]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b084      	sub	sp, #16
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800445a:	f7ff fdab 	bl	8003fb4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800445e:	f7fd fe55 	bl	800210c <HAL_GetTick>
 8004462:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004464:	e009      	b.n	800447a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004466:	f7fd fe51 	bl	800210c <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d902      	bls.n	800447a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	73fb      	strb	r3, [r7, #15]
      break;
 8004478:	e004      	b.n	8004484 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800447a:	f7ff fdaa 	bl	8003fd2 <LL_RCC_PLLSAI1_IsReady>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1f0      	bne.n	8004466 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d137      	bne.n	80044fa <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800448a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	021b      	lsls	r3, r3, #8
 800449a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800449e:	4313      	orrs	r3, r2
 80044a0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80044a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044b4:	4313      	orrs	r3, r2
 80044b6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80044b8:	f7ff fd6d 	bl	8003f96 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044bc:	f7fd fe26 	bl	800210c <HAL_GetTick>
 80044c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80044c2:	e009      	b.n	80044d8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044c4:	f7fd fe22 	bl	800210c <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d902      	bls.n	80044d8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	73fb      	strb	r3, [r7, #15]
        break;
 80044d6:	e004      	b.n	80044e2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80044d8:	f7ff fd7b 	bl	8003fd2 <LL_RCC_PLLSAI1_IsReady>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d1f0      	bne.n	80044c4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d108      	bne.n	80044fa <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80044e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ec:	691a      	ldr	r2, [r3, #16]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044f6:	4313      	orrs	r3, r2
 80044f8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80044fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e090      	b.n	8004638 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d106      	bne.n	8004530 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7fd fc04 	bl	8001d38 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	22ca      	movs	r2, #202	; 0xca
 800453e:	625a      	str	r2, [r3, #36]	; 0x24
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2253      	movs	r2, #83	; 0x53
 8004546:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f89f 	bl	800468c <RTC_EnterInitMode>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d009      	beq.n	8004568 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	22ff      	movs	r2, #255	; 0xff
 800455a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2204      	movs	r2, #4
 8004560:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e067      	b.n	8004638 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6812      	ldr	r2, [r2, #0]
 8004572:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800457a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6899      	ldr	r1, [r3, #8]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	68d2      	ldr	r2, [r2, #12]
 80045a2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6919      	ldr	r1, [r3, #16]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	041a      	lsls	r2, r3, #16
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045c6:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0203 	bic.w	r2, r2, #3
 80045d6:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69da      	ldr	r2, [r3, #28]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d113      	bne.n	8004626 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f81e 	bl	8004640 <HAL_RTC_WaitForSynchro>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00d      	beq.n	8004626 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	22ff      	movs	r2, #255	; 0xff
 8004610:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2204      	movs	r2, #4
 8004616:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e008      	b.n	8004638 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	22ff      	movs	r2, #255	; 0xff
 800462c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8004636:	2300      	movs	r3, #0
  }
}
 8004638:	4618      	mov	r0, r3
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004656:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004658:	f7fd fd58 	bl	800210c <HAL_GetTick>
 800465c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800465e:	e009      	b.n	8004674 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004660:	f7fd fd54 	bl	800210c <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800466e:	d901      	bls.n	8004674 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e007      	b.n	8004684 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f003 0320 	and.w	r3, r3, #32
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0ee      	beq.n	8004660 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d119      	bne.n	80046d6 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f04f 32ff 	mov.w	r2, #4294967295
 80046aa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80046ac:	f7fd fd2e 	bl	800210c <HAL_GetTick>
 80046b0:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80046b2:	e009      	b.n	80046c8 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80046b4:	f7fd fd2a 	bl	800210c <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046c2:	d901      	bls.n	80046c8 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e007      	b.n	80046d8 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0ee      	beq.n	80046b4 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d101      	bne.n	80046fa <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80046f6:	2302      	movs	r3, #2
 80046f8:	e0a8      	b.n	800484c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2202      	movs	r2, #2
 8004706:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	22ca      	movs	r2, #202	; 0xca
 8004710:	625a      	str	r2, [r3, #36]	; 0x24
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2253      	movs	r2, #83	; 0x53
 8004718:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004724:	2b00      	cmp	r3, #0
 8004726:	d020      	beq.n	800476a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8004728:	f7fd fcf0 	bl	800210c <HAL_GetTick>
 800472c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800472e:	e015      	b.n	800475c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004730:	f7fd fcec 	bl	800210c <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800473e:	d90d      	bls.n	800475c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	22ff      	movs	r2, #255	; 0xff
 8004746:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2203      	movs	r2, #3
 800474c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e077      	b.n	800484c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1e2      	bne.n	8004730 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004778:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	b2da      	uxtb	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800478a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800478c:	f7fd fcbe 	bl	800210c <HAL_GetTick>
 8004790:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004792:	e015      	b.n	80047c0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004794:	f7fd fcba 	bl	800210c <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047a2:	d90d      	bls.n	80047c0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	22ff      	movs	r2, #255	; 0xff
 80047aa:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2203      	movs	r2, #3
 80047b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e045      	b.n	800484c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f003 0304 	and.w	r3, r3, #4
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0e2      	beq.n	8004794 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0207 	bic.w	r2, r2, #7
 80047e4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6899      	ldr	r1, [r3, #8]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80047f6:	4b17      	ldr	r3, [pc, #92]	; (8004854 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80047f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047fc:	4a15      	ldr	r2, [pc, #84]	; (8004854 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80047fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004802:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004806:	4b13      	ldr	r3, [pc, #76]	; (8004854 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a12      	ldr	r2, [pc, #72]	; (8004854 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800480c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004810:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004820:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004830:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	22ff      	movs	r2, #255	; 0xff
 8004838:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	58000800 	.word	0x58000800

08004858 <LL_RCC_GetUSARTClockSource>:
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004864:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4013      	ands	r3, r2
}
 800486c:	4618      	mov	r0, r3
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <LL_RCC_GetLPUARTClockSource>:
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004884:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4013      	ands	r3, r2
}
 800488c:	4618      	mov	r0, r3
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e042      	b.n	8004930 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d106      	bne.n	80048c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7fd fa6f 	bl	8001da0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2224      	movs	r2, #36	; 0x24
 80048c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0201 	bic.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f8c2 	bl	8004a64 <UART_SetConfig>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d101      	bne.n	80048ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e022      	b.n	8004930 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fade 	bl	8004eb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004906:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689a      	ldr	r2, [r3, #8]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004916:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0201 	orr.w	r2, r2, #1
 8004926:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 fb65 	bl	8004ff8 <UART_CheckIdleState>
 800492e:	4603      	mov	r3, r0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08a      	sub	sp, #40	; 0x28
 800493c:	af02      	add	r7, sp, #8
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	603b      	str	r3, [r7, #0]
 8004944:	4613      	mov	r3, r2
 8004946:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800494e:	2b20      	cmp	r3, #32
 8004950:	f040 8083 	bne.w	8004a5a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <HAL_UART_Transmit+0x28>
 800495a:	88fb      	ldrh	r3, [r7, #6]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e07b      	b.n	8004a5c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_UART_Transmit+0x3a>
 800496e:	2302      	movs	r3, #2
 8004970:	e074      	b.n	8004a5c <HAL_UART_Transmit+0x124>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2221      	movs	r2, #33	; 0x21
 8004986:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800498a:	f7fd fbbf 	bl	800210c <HAL_GetTick>
 800498e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	88fa      	ldrh	r2, [r7, #6]
 8004994:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	88fa      	ldrh	r2, [r7, #6]
 800499c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a8:	d108      	bne.n	80049bc <HAL_UART_Transmit+0x84>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d104      	bne.n	80049bc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80049b2:	2300      	movs	r3, #0
 80049b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	61bb      	str	r3, [r7, #24]
 80049ba:	e003      	b.n	80049c4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049c0:	2300      	movs	r3, #0
 80049c2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80049cc:	e02c      	b.n	8004a28 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2200      	movs	r2, #0
 80049d6:	2180      	movs	r1, #128	; 0x80
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 fb58 	bl	800508e <UART_WaitOnFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e039      	b.n	8004a5c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10b      	bne.n	8004a06 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	461a      	mov	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	3302      	adds	r3, #2
 8004a02:	61bb      	str	r3, [r7, #24]
 8004a04:	e007      	b.n	8004a16 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	781a      	ldrb	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	3301      	adds	r3, #1
 8004a14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1cc      	bne.n	80049ce <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	2140      	movs	r1, #64	; 0x40
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 fb25 	bl	800508e <UART_WaitOnFlagUntilTimeout>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e006      	b.n	8004a5c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2220      	movs	r2, #32
 8004a52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004a56:	2300      	movs	r3, #0
 8004a58:	e000      	b.n	8004a5c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004a5a:	2302      	movs	r3, #2
  }
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3720      	adds	r7, #32
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a68:	b08c      	sub	sp, #48	; 0x30
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	431a      	orrs	r2, r3
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	4baf      	ldr	r3, [pc, #700]	; (8004d50 <UART_SetConfig+0x2ec>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	6812      	ldr	r2, [r2, #0]
 8004a9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a9c:	430b      	orrs	r3, r1
 8004a9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4aa4      	ldr	r2, [pc, #656]	; (8004d54 <UART_SetConfig+0x2f0>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d004      	beq.n	8004ad0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004acc:	4313      	orrs	r3, r2
 8004ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004ada:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	6812      	ldr	r2, [r2, #0]
 8004ae2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aee:	f023 010f 	bic.w	r1, r3, #15
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a95      	ldr	r2, [pc, #596]	; (8004d58 <UART_SetConfig+0x2f4>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d125      	bne.n	8004b54 <UART_SetConfig+0xf0>
 8004b08:	2003      	movs	r0, #3
 8004b0a:	f7ff fea5 	bl	8004858 <LL_RCC_GetUSARTClockSource>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b03      	cmp	r3, #3
 8004b12:	d81b      	bhi.n	8004b4c <UART_SetConfig+0xe8>
 8004b14:	a201      	add	r2, pc, #4	; (adr r2, 8004b1c <UART_SetConfig+0xb8>)
 8004b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1a:	bf00      	nop
 8004b1c:	08004b2d 	.word	0x08004b2d
 8004b20:	08004b3d 	.word	0x08004b3d
 8004b24:	08004b35 	.word	0x08004b35
 8004b28:	08004b45 	.word	0x08004b45
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b32:	e042      	b.n	8004bba <UART_SetConfig+0x156>
 8004b34:	2302      	movs	r3, #2
 8004b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b3a:	e03e      	b.n	8004bba <UART_SetConfig+0x156>
 8004b3c:	2304      	movs	r3, #4
 8004b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b42:	e03a      	b.n	8004bba <UART_SetConfig+0x156>
 8004b44:	2308      	movs	r3, #8
 8004b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b4a:	e036      	b.n	8004bba <UART_SetConfig+0x156>
 8004b4c:	2310      	movs	r3, #16
 8004b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b52:	e032      	b.n	8004bba <UART_SetConfig+0x156>
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a7e      	ldr	r2, [pc, #504]	; (8004d54 <UART_SetConfig+0x2f0>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d12a      	bne.n	8004bb4 <UART_SetConfig+0x150>
 8004b5e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004b62:	f7ff fe89 	bl	8004878 <LL_RCC_GetLPUARTClockSource>
 8004b66:	4603      	mov	r3, r0
 8004b68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b6c:	d01a      	beq.n	8004ba4 <UART_SetConfig+0x140>
 8004b6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b72:	d81b      	bhi.n	8004bac <UART_SetConfig+0x148>
 8004b74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b78:	d00c      	beq.n	8004b94 <UART_SetConfig+0x130>
 8004b7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b7e:	d815      	bhi.n	8004bac <UART_SetConfig+0x148>
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <UART_SetConfig+0x128>
 8004b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b88:	d008      	beq.n	8004b9c <UART_SetConfig+0x138>
 8004b8a:	e00f      	b.n	8004bac <UART_SetConfig+0x148>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b92:	e012      	b.n	8004bba <UART_SetConfig+0x156>
 8004b94:	2302      	movs	r3, #2
 8004b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b9a:	e00e      	b.n	8004bba <UART_SetConfig+0x156>
 8004b9c:	2304      	movs	r3, #4
 8004b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ba2:	e00a      	b.n	8004bba <UART_SetConfig+0x156>
 8004ba4:	2308      	movs	r3, #8
 8004ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004baa:	e006      	b.n	8004bba <UART_SetConfig+0x156>
 8004bac:	2310      	movs	r3, #16
 8004bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bb2:	e002      	b.n	8004bba <UART_SetConfig+0x156>
 8004bb4:	2310      	movs	r3, #16
 8004bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a65      	ldr	r2, [pc, #404]	; (8004d54 <UART_SetConfig+0x2f0>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	f040 8097 	bne.w	8004cf4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bca:	2b08      	cmp	r3, #8
 8004bcc:	d823      	bhi.n	8004c16 <UART_SetConfig+0x1b2>
 8004bce:	a201      	add	r2, pc, #4	; (adr r2, 8004bd4 <UART_SetConfig+0x170>)
 8004bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd4:	08004bf9 	.word	0x08004bf9
 8004bd8:	08004c17 	.word	0x08004c17
 8004bdc:	08004c01 	.word	0x08004c01
 8004be0:	08004c17 	.word	0x08004c17
 8004be4:	08004c07 	.word	0x08004c07
 8004be8:	08004c17 	.word	0x08004c17
 8004bec:	08004c17 	.word	0x08004c17
 8004bf0:	08004c17 	.word	0x08004c17
 8004bf4:	08004c0f 	.word	0x08004c0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bf8:	f7fe ff80 	bl	8003afc <HAL_RCC_GetPCLK1Freq>
 8004bfc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bfe:	e010      	b.n	8004c22 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c00:	4b56      	ldr	r3, [pc, #344]	; (8004d5c <UART_SetConfig+0x2f8>)
 8004c02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c04:	e00d      	b.n	8004c22 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c06:	f7fe fef9 	bl	80039fc <HAL_RCC_GetSysClockFreq>
 8004c0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c0c:	e009      	b.n	8004c22 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c14:	e005      	b.n	8004c22 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 812b 	beq.w	8004e80 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	4a4c      	ldr	r2, [pc, #304]	; (8004d60 <UART_SetConfig+0x2fc>)
 8004c30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c34:	461a      	mov	r2, r3
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c3c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	4613      	mov	r3, r2
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	4413      	add	r3, r2
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d305      	bcc.n	8004c5a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d903      	bls.n	8004c62 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c60:	e10e      	b.n	8004e80 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	2200      	movs	r2, #0
 8004c66:	60bb      	str	r3, [r7, #8]
 8004c68:	60fa      	str	r2, [r7, #12]
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	4a3c      	ldr	r2, [pc, #240]	; (8004d60 <UART_SetConfig+0x2fc>)
 8004c70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	2200      	movs	r2, #0
 8004c78:	603b      	str	r3, [r7, #0]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c84:	f7fb fad4 	bl	8000230 <__aeabi_uldivmod>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	4619      	mov	r1, r3
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	020b      	lsls	r3, r1, #8
 8004c9a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c9e:	0202      	lsls	r2, r0, #8
 8004ca0:	6979      	ldr	r1, [r7, #20]
 8004ca2:	6849      	ldr	r1, [r1, #4]
 8004ca4:	0849      	lsrs	r1, r1, #1
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	460c      	mov	r4, r1
 8004caa:	4605      	mov	r5, r0
 8004cac:	eb12 0804 	adds.w	r8, r2, r4
 8004cb0:	eb43 0905 	adc.w	r9, r3, r5
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	469a      	mov	sl, r3
 8004cbc:	4693      	mov	fp, r2
 8004cbe:	4652      	mov	r2, sl
 8004cc0:	465b      	mov	r3, fp
 8004cc2:	4640      	mov	r0, r8
 8004cc4:	4649      	mov	r1, r9
 8004cc6:	f7fb fab3 	bl	8000230 <__aeabi_uldivmod>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	460b      	mov	r3, r1
 8004cce:	4613      	mov	r3, r2
 8004cd0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cd8:	d308      	bcc.n	8004cec <UART_SetConfig+0x288>
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ce0:	d204      	bcs.n	8004cec <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6a3a      	ldr	r2, [r7, #32]
 8004ce8:	60da      	str	r2, [r3, #12]
 8004cea:	e0c9      	b.n	8004e80 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004cf2:	e0c5      	b.n	8004e80 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cfc:	d16e      	bne.n	8004ddc <UART_SetConfig+0x378>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004cfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d02:	3b01      	subs	r3, #1
 8004d04:	2b07      	cmp	r3, #7
 8004d06:	d82d      	bhi.n	8004d64 <UART_SetConfig+0x300>
 8004d08:	a201      	add	r2, pc, #4	; (adr r2, 8004d10 <UART_SetConfig+0x2ac>)
 8004d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0e:	bf00      	nop
 8004d10:	08004d31 	.word	0x08004d31
 8004d14:	08004d39 	.word	0x08004d39
 8004d18:	08004d65 	.word	0x08004d65
 8004d1c:	08004d3f 	.word	0x08004d3f
 8004d20:	08004d65 	.word	0x08004d65
 8004d24:	08004d65 	.word	0x08004d65
 8004d28:	08004d65 	.word	0x08004d65
 8004d2c:	08004d47 	.word	0x08004d47
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d30:	f7fe fefa 	bl	8003b28 <HAL_RCC_GetPCLK2Freq>
 8004d34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d36:	e01b      	b.n	8004d70 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d38:	4b08      	ldr	r3, [pc, #32]	; (8004d5c <UART_SetConfig+0x2f8>)
 8004d3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d3c:	e018      	b.n	8004d70 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d3e:	f7fe fe5d 	bl	80039fc <HAL_RCC_GetSysClockFreq>
 8004d42:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d44:	e014      	b.n	8004d70 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d4c:	e010      	b.n	8004d70 <UART_SetConfig+0x30c>
 8004d4e:	bf00      	nop
 8004d50:	cfff69f3 	.word	0xcfff69f3
 8004d54:	40008000 	.word	0x40008000
 8004d58:	40013800 	.word	0x40013800
 8004d5c:	00f42400 	.word	0x00f42400
 8004d60:	080094c4 	.word	0x080094c4
      default:
        pclk = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 8084 	beq.w	8004e80 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	4a4b      	ldr	r2, [pc, #300]	; (8004eac <UART_SetConfig+0x448>)
 8004d7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d82:	461a      	mov	r2, r3
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d8a:	005a      	lsls	r2, r3, #1
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	085b      	lsrs	r3, r3, #1
 8004d92:	441a      	add	r2, r3
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004da0:	6a3b      	ldr	r3, [r7, #32]
 8004da2:	2b0f      	cmp	r3, #15
 8004da4:	d916      	bls.n	8004dd4 <UART_SetConfig+0x370>
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dac:	d212      	bcs.n	8004dd4 <UART_SetConfig+0x370>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dae:	6a3b      	ldr	r3, [r7, #32]
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	f023 030f 	bic.w	r3, r3, #15
 8004db6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	085b      	lsrs	r3, r3, #1
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	8bfb      	ldrh	r3, [r7, #30]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	8bfa      	ldrh	r2, [r7, #30]
 8004dd0:	60da      	str	r2, [r3, #12]
 8004dd2:	e055      	b.n	8004e80 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004dda:	e051      	b.n	8004e80 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ddc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004de0:	3b01      	subs	r3, #1
 8004de2:	2b07      	cmp	r3, #7
 8004de4:	d821      	bhi.n	8004e2a <UART_SetConfig+0x3c6>
 8004de6:	a201      	add	r2, pc, #4	; (adr r2, 8004dec <UART_SetConfig+0x388>)
 8004de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dec:	08004e0d 	.word	0x08004e0d
 8004df0:	08004e15 	.word	0x08004e15
 8004df4:	08004e2b 	.word	0x08004e2b
 8004df8:	08004e1b 	.word	0x08004e1b
 8004dfc:	08004e2b 	.word	0x08004e2b
 8004e00:	08004e2b 	.word	0x08004e2b
 8004e04:	08004e2b 	.word	0x08004e2b
 8004e08:	08004e23 	.word	0x08004e23
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e0c:	f7fe fe8c 	bl	8003b28 <HAL_RCC_GetPCLK2Freq>
 8004e10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e12:	e010      	b.n	8004e36 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e14:	4b26      	ldr	r3, [pc, #152]	; (8004eb0 <UART_SetConfig+0x44c>)
 8004e16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e18:	e00d      	b.n	8004e36 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e1a:	f7fe fdef 	bl	80039fc <HAL_RCC_GetSysClockFreq>
 8004e1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e20:	e009      	b.n	8004e36 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e28:	e005      	b.n	8004e36 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e34:	bf00      	nop
    }

    if (pclk != 0U)
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d021      	beq.n	8004e80 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	4a1a      	ldr	r2, [pc, #104]	; (8004eac <UART_SetConfig+0x448>)
 8004e42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e46:	461a      	mov	r2, r3
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	085b      	lsrs	r3, r3, #1
 8004e54:	441a      	add	r2, r3
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	2b0f      	cmp	r3, #15
 8004e66:	d908      	bls.n	8004e7a <UART_SetConfig+0x416>
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e6e:	d204      	bcs.n	8004e7a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = usartdiv;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6a3a      	ldr	r2, [r7, #32]
 8004e76:	60da      	str	r2, [r3, #12]
 8004e78:	e002      	b.n	8004e80 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	2200      	movs	r2, #0
 8004e94:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004e9c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3730      	adds	r7, #48	; 0x30
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eaa:	bf00      	nop
 8004eac:	080094c4 	.word	0x080094c4
 8004eb0:	00f42400 	.word	0x00f42400

08004eb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00a      	beq.n	8004ede <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00a      	beq.n	8004f00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00a      	beq.n	8004f22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00a      	beq.n	8004f44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f48:	f003 0310 	and.w	r3, r3, #16
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00a      	beq.n	8004f66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d01a      	beq.n	8004fca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fb2:	d10a      	bne.n	8004fca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	605a      	str	r2, [r3, #4]
  }
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af02      	add	r7, sp, #8
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005008:	f7fd f880 	bl	800210c <HAL_GetTick>
 800500c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0308 	and.w	r3, r3, #8
 8005018:	2b08      	cmp	r3, #8
 800501a:	d10e      	bne.n	800503a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800501c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f82f 	bl	800508e <UART_WaitOnFlagUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e025      	b.n	8005086 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b04      	cmp	r3, #4
 8005046:	d10e      	bne.n	8005066 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005048:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f819 	bl	800508e <UART_WaitOnFlagUntilTimeout>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e00f      	b.n	8005086 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2220      	movs	r2, #32
 800506a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2220      	movs	r2, #32
 8005072:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b09c      	sub	sp, #112	; 0x70
 8005092:	af00      	add	r7, sp, #0
 8005094:	60f8      	str	r0, [r7, #12]
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	603b      	str	r3, [r7, #0]
 800509a:	4613      	mov	r3, r2
 800509c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800509e:	e0a9      	b.n	80051f4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a6:	f000 80a5 	beq.w	80051f4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050aa:	f7fd f82f 	bl	800210c <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d302      	bcc.n	80050c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80050ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d140      	bne.n	8005142 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050c8:	e853 3f00 	ldrex	r3, [r3]
 80050cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80050ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050d4:	667b      	str	r3, [r7, #100]	; 0x64
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80050e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050e6:	e841 2300 	strex	r3, r2, [r1]
 80050ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80050ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1e6      	bne.n	80050c0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3308      	adds	r3, #8
 80050f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050fc:	e853 3f00 	ldrex	r3, [r3]
 8005100:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005104:	f023 0301 	bic.w	r3, r3, #1
 8005108:	663b      	str	r3, [r7, #96]	; 0x60
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3308      	adds	r3, #8
 8005110:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005112:	64ba      	str	r2, [r7, #72]	; 0x48
 8005114:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005116:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005118:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800511a:	e841 2300 	strex	r3, r2, [r1]
 800511e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1e5      	bne.n	80050f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2220      	movs	r2, #32
 800512a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2220      	movs	r2, #32
 8005132:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e069      	b.n	8005216 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	d051      	beq.n	80051f4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800515a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800515e:	d149      	bne.n	80051f4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005168:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005172:	e853 3f00 	ldrex	r3, [r3]
 8005176:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800517e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	461a      	mov	r2, r3
 8005186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005188:	637b      	str	r3, [r7, #52]	; 0x34
 800518a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800518e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005190:	e841 2300 	strex	r3, r2, [r1]
 8005194:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1e6      	bne.n	800516a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3308      	adds	r3, #8
 80051a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	e853 3f00 	ldrex	r3, [r3]
 80051aa:	613b      	str	r3, [r7, #16]
   return(result);
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f023 0301 	bic.w	r3, r3, #1
 80051b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3308      	adds	r3, #8
 80051ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80051bc:	623a      	str	r2, [r7, #32]
 80051be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c0:	69f9      	ldr	r1, [r7, #28]
 80051c2:	6a3a      	ldr	r2, [r7, #32]
 80051c4:	e841 2300 	strex	r3, r2, [r1]
 80051c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1e5      	bne.n	800519c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2220      	movs	r2, #32
 80051dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2220      	movs	r2, #32
 80051e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e010      	b.n	8005216 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	69da      	ldr	r2, [r3, #28]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	4013      	ands	r3, r2
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	429a      	cmp	r2, r3
 8005202:	bf0c      	ite	eq
 8005204:	2301      	moveq	r3, #1
 8005206:	2300      	movne	r3, #0
 8005208:	b2db      	uxtb	r3, r3
 800520a:	461a      	mov	r2, r3
 800520c:	79fb      	ldrb	r3, [r7, #7]
 800520e:	429a      	cmp	r2, r3
 8005210:	f43f af46 	beq.w	80050a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3770      	adds	r7, #112	; 0x70
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800521e:	b480      	push	{r7}
 8005220:	b085      	sub	sp, #20
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800522c:	2b01      	cmp	r3, #1
 800522e:	d101      	bne.n	8005234 <HAL_UARTEx_DisableFifoMode+0x16>
 8005230:	2302      	movs	r3, #2
 8005232:	e027      	b.n	8005284 <HAL_UARTEx_DisableFifoMode+0x66>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2224      	movs	r2, #36	; 0x24
 8005240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0201 	bic.w	r2, r2, #1
 800525a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005262:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2220      	movs	r2, #32
 8005276:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d101      	bne.n	80052a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80052a4:	2302      	movs	r3, #2
 80052a6:	e02d      	b.n	8005304 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2224      	movs	r2, #36	; 0x24
 80052b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0201 	bic.w	r2, r2, #1
 80052ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f84f 	bl	8005388 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2220      	movs	r2, #32
 80052f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800531c:	2b01      	cmp	r3, #1
 800531e:	d101      	bne.n	8005324 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005320:	2302      	movs	r3, #2
 8005322:	e02d      	b.n	8005380 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2224      	movs	r2, #36	; 0x24
 8005330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f022 0201 	bic.w	r2, r2, #1
 800534a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f811 	bl	8005388 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2220      	movs	r2, #32
 8005372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005394:	2b00      	cmp	r3, #0
 8005396:	d108      	bne.n	80053aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80053a8:	e031      	b.n	800540e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80053aa:	2308      	movs	r3, #8
 80053ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80053ae:	2308      	movs	r3, #8
 80053b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	0e5b      	lsrs	r3, r3, #25
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	f003 0307 	and.w	r3, r3, #7
 80053c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	0f5b      	lsrs	r3, r3, #29
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053d2:	7bbb      	ldrb	r3, [r7, #14]
 80053d4:	7b3a      	ldrb	r2, [r7, #12]
 80053d6:	4911      	ldr	r1, [pc, #68]	; (800541c <UARTEx_SetNbDataToProcess+0x94>)
 80053d8:	5c8a      	ldrb	r2, [r1, r2]
 80053da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80053de:	7b3a      	ldrb	r2, [r7, #12]
 80053e0:	490f      	ldr	r1, [pc, #60]	; (8005420 <UARTEx_SetNbDataToProcess+0x98>)
 80053e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053f0:	7bfb      	ldrb	r3, [r7, #15]
 80053f2:	7b7a      	ldrb	r2, [r7, #13]
 80053f4:	4909      	ldr	r1, [pc, #36]	; (800541c <UARTEx_SetNbDataToProcess+0x94>)
 80053f6:	5c8a      	ldrb	r2, [r1, r2]
 80053f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80053fc:	7b7a      	ldrb	r2, [r7, #13]
 80053fe:	4908      	ldr	r1, [pc, #32]	; (8005420 <UARTEx_SetNbDataToProcess+0x98>)
 8005400:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005402:	fb93 f3f2 	sdiv	r3, r3, r2
 8005406:	b29a      	uxth	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800540e:	bf00      	nop
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	080094dc 	.word	0x080094dc
 8005420:	080094e4 	.word	0x080094e4

08005424 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b088      	sub	sp, #32
 8005428:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800542a:	2300      	movs	r3, #0
 800542c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800542e:	f107 0308 	add.w	r3, r7, #8
 8005432:	2218      	movs	r2, #24
 8005434:	2100      	movs	r1, #0
 8005436:	4618      	mov	r0, r3
 8005438:	f001 f8d8 	bl	80065ec <Osal_MemSet>
  rq.ogf = 0x3f;
 800543c:	233f      	movs	r3, #63	; 0x3f
 800543e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8005440:	2381      	movs	r3, #129	; 0x81
 8005442:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005444:	1dfb      	adds	r3, r7, #7
 8005446:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005448:	2301      	movs	r3, #1
 800544a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800544c:	f107 0308 	add.w	r3, r7, #8
 8005450:	2100      	movs	r1, #0
 8005452:	4618      	mov	r0, r3
 8005454:	f001 fb54 	bl	8006b00 <hci_send_req>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	da01      	bge.n	8005462 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800545e:	23ff      	movs	r3, #255	; 0xff
 8005460:	e000      	b.n	8005464 <aci_gap_set_non_discoverable+0x40>
  return status;
 8005462:	79fb      	ldrb	r3, [r7, #7]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3720      	adds	r7, #32
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800546c:	b5b0      	push	{r4, r5, r7, lr}
 800546e:	b0ce      	sub	sp, #312	; 0x138
 8005470:	af00      	add	r7, sp, #0
 8005472:	4605      	mov	r5, r0
 8005474:	460c      	mov	r4, r1
 8005476:	4610      	mov	r0, r2
 8005478:	4619      	mov	r1, r3
 800547a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800547e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005482:	462a      	mov	r2, r5
 8005484:	701a      	strb	r2, [r3, #0]
 8005486:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800548a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800548e:	4622      	mov	r2, r4
 8005490:	801a      	strh	r2, [r3, #0]
 8005492:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005496:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800549a:	4602      	mov	r2, r0
 800549c:	801a      	strh	r2, [r3, #0]
 800549e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80054a2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80054a6:	460a      	mov	r2, r1
 80054a8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80054aa:	f107 0310 	add.w	r3, r7, #16
 80054ae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80054b2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80054b6:	3308      	adds	r3, #8
 80054b8:	f107 0210 	add.w	r2, r7, #16
 80054bc:	4413      	add	r3, r2
 80054be:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80054c2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80054c6:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80054ca:	4413      	add	r3, r2
 80054cc:	3309      	adds	r3, #9
 80054ce:	f107 0210 	add.w	r2, r7, #16
 80054d2:	4413      	add	r3, r2
 80054d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80054d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80054dc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80054e0:	2200      	movs	r2, #0
 80054e2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80054e4:	2300      	movs	r3, #0
 80054e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 80054ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054ee:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80054f2:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80054f6:	7812      	ldrb	r2, [r2, #0]
 80054f8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80054fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80054fe:	3301      	adds	r3, #1
 8005500:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8005504:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005508:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800550c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8005510:	8812      	ldrh	r2, [r2, #0]
 8005512:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8005516:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800551a:	3302      	adds	r3, #2
 800551c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8005520:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005524:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005528:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800552c:	8812      	ldrh	r2, [r2, #0]
 800552e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8005532:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005536:	3302      	adds	r3, #2
 8005538:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800553c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005540:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005544:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8005548:	7812      	ldrb	r2, [r2, #0]
 800554a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800554c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005550:	3301      	adds	r3, #1
 8005552:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8005556:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800555a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800555e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005560:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005564:	3301      	adds	r3, #1
 8005566:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800556a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800556e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005572:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8005574:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005578:	3301      	adds	r3, #1
 800557a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800557e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005582:	3308      	adds	r3, #8
 8005584:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005588:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800558c:	4618      	mov	r0, r3
 800558e:	f001 f81d 	bl	80065cc <Osal_MemCpy>
    index_input += Local_Name_Length;
 8005592:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8005596:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800559a:	4413      	add	r3, r2
 800559c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80055a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80055a4:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80055a8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80055aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80055ae:	3301      	adds	r3, #1
 80055b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80055b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80055b8:	3301      	adds	r3, #1
 80055ba:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80055be:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80055c2:	4618      	mov	r0, r3
 80055c4:	f001 f802 	bl	80065cc <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80055c8:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80055cc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80055d0:	4413      	add	r3, r2
 80055d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 80055d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055da:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80055de:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80055e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80055e4:	3302      	adds	r3, #2
 80055e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 80055ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ee:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80055f2:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80055f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80055f8:	3302      	adds	r3, #2
 80055fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80055fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005602:	2218      	movs	r2, #24
 8005604:	2100      	movs	r1, #0
 8005606:	4618      	mov	r0, r3
 8005608:	f000 fff0 	bl	80065ec <Osal_MemSet>
  rq.ogf = 0x3f;
 800560c:	233f      	movs	r3, #63	; 0x3f
 800560e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8005612:	2383      	movs	r3, #131	; 0x83
 8005614:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005618:	f107 0310 	add.w	r3, r7, #16
 800561c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005620:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005624:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005628:	f107 030f 	add.w	r3, r7, #15
 800562c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005630:	2301      	movs	r3, #1
 8005632:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005636:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800563a:	2100      	movs	r1, #0
 800563c:	4618      	mov	r0, r3
 800563e:	f001 fa5f 	bl	8006b00 <hci_send_req>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	da01      	bge.n	800564c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8005648:	23ff      	movs	r3, #255	; 0xff
 800564a:	e004      	b.n	8005656 <aci_gap_set_discoverable+0x1ea>
  return status;
 800564c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005650:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005654:	781b      	ldrb	r3, [r3, #0]
}
 8005656:	4618      	mov	r0, r3
 8005658:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800565c:	46bd      	mov	sp, r7
 800565e:	bdb0      	pop	{r4, r5, r7, pc}

08005660 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b0cc      	sub	sp, #304	; 0x130
 8005664:	af00      	add	r7, sp, #0
 8005666:	4602      	mov	r2, r0
 8005668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800566c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005670:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8005672:	f107 0310 	add.w	r3, r7, #16
 8005676:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800567a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800567e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005682:	2200      	movs	r2, #0
 8005684:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005686:	2300      	movs	r3, #0
 8005688:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800568c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005690:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005694:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005698:	7812      	ldrb	r2, [r2, #0]
 800569a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800569c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80056a0:	3301      	adds	r3, #1
 80056a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80056a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80056aa:	2218      	movs	r2, #24
 80056ac:	2100      	movs	r1, #0
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 ff9c 	bl	80065ec <Osal_MemSet>
  rq.ogf = 0x3f;
 80056b4:	233f      	movs	r3, #63	; 0x3f
 80056b6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80056ba:	2385      	movs	r3, #133	; 0x85
 80056bc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80056c0:	f107 0310 	add.w	r3, r7, #16
 80056c4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80056c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80056cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80056d0:	f107 030f 	add.w	r3, r7, #15
 80056d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80056d8:	2301      	movs	r3, #1
 80056da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80056de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80056e2:	2100      	movs	r1, #0
 80056e4:	4618      	mov	r0, r3
 80056e6:	f001 fa0b 	bl	8006b00 <hci_send_req>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	da01      	bge.n	80056f4 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80056f0:	23ff      	movs	r3, #255	; 0xff
 80056f2:	e004      	b.n	80056fe <aci_gap_set_io_capability+0x9e>
  return status;
 80056f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80056fc:	781b      	ldrb	r3, [r3, #0]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8005708:	b5b0      	push	{r4, r5, r7, lr}
 800570a:	b0cc      	sub	sp, #304	; 0x130
 800570c:	af00      	add	r7, sp, #0
 800570e:	4605      	mov	r5, r0
 8005710:	460c      	mov	r4, r1
 8005712:	4610      	mov	r0, r2
 8005714:	4619      	mov	r1, r3
 8005716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800571a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800571e:	462a      	mov	r2, r5
 8005720:	701a      	strb	r2, [r3, #0]
 8005722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005726:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800572a:	4622      	mov	r2, r4
 800572c:	701a      	strb	r2, [r3, #0]
 800572e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005732:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8005736:	4602      	mov	r2, r0
 8005738:	701a      	strb	r2, [r3, #0]
 800573a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800573e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005742:	460a      	mov	r2, r1
 8005744:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8005746:	f107 0310 	add.w	r3, r7, #16
 800574a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800574e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005752:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005756:	2200      	movs	r2, #0
 8005758:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800575a:	2300      	movs	r3, #0
 800575c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8005760:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005764:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005768:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800576c:	7812      	ldrb	r2, [r2, #0]
 800576e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005770:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005774:	3301      	adds	r3, #1
 8005776:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800577a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800577e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005782:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005786:	7812      	ldrb	r2, [r2, #0]
 8005788:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800578a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800578e:	3301      	adds	r3, #1
 8005790:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8005794:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005798:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800579c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80057a0:	7812      	ldrb	r2, [r2, #0]
 80057a2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80057a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057a8:	3301      	adds	r3, #1
 80057aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80057ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80057b6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80057ba:	7812      	ldrb	r2, [r2, #0]
 80057bc:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80057be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057c2:	3301      	adds	r3, #1
 80057c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80057c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057cc:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80057d0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80057d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057d6:	3301      	adds	r3, #1
 80057d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80057dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e0:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80057e4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80057e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057ea:	3301      	adds	r3, #1
 80057ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80057f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057f4:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80057f8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80057fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057fe:	3301      	adds	r3, #1
 8005800:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8005804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005808:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800580c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8005810:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005814:	3304      	adds	r3, #4
 8005816:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800581a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800581e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8005822:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8005824:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005828:	3301      	adds	r3, #1
 800582a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800582e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005832:	2218      	movs	r2, #24
 8005834:	2100      	movs	r1, #0
 8005836:	4618      	mov	r0, r3
 8005838:	f000 fed8 	bl	80065ec <Osal_MemSet>
  rq.ogf = 0x3f;
 800583c:	233f      	movs	r3, #63	; 0x3f
 800583e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8005842:	2386      	movs	r3, #134	; 0x86
 8005844:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005848:	f107 0310 	add.w	r3, r7, #16
 800584c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005850:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005854:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005858:	f107 030f 	add.w	r3, r7, #15
 800585c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005860:	2301      	movs	r3, #1
 8005862:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005866:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800586a:	2100      	movs	r1, #0
 800586c:	4618      	mov	r0, r3
 800586e:	f001 f947 	bl	8006b00 <hci_send_req>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	da01      	bge.n	800587c <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8005878:	23ff      	movs	r3, #255	; 0xff
 800587a:	e004      	b.n	8005886 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800587c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005880:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005884:	781b      	ldrb	r3, [r3, #0]
}
 8005886:	4618      	mov	r0, r3
 8005888:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800588c:	46bd      	mov	sp, r7
 800588e:	bdb0      	pop	{r4, r5, r7, pc}

08005890 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b0cc      	sub	sp, #304	; 0x130
 8005894:	af00      	add	r7, sp, #0
 8005896:	4602      	mov	r2, r0
 8005898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058a0:	6019      	str	r1, [r3, #0]
 80058a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80058aa:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80058ac:	f107 0310 	add.w	r3, r7, #16
 80058b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80058b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80058bc:	2200      	movs	r2, #0
 80058be:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80058c0:	2300      	movs	r3, #0
 80058c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80058c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058ce:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80058d2:	8812      	ldrh	r2, [r2, #0]
 80058d4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80058d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80058da:	3302      	adds	r3, #2
 80058dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 80058e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058e8:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80058ec:	6812      	ldr	r2, [r2, #0]
 80058ee:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80058f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80058f6:	3304      	adds	r3, #4
 80058f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80058fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005900:	2218      	movs	r2, #24
 8005902:	2100      	movs	r1, #0
 8005904:	4618      	mov	r0, r3
 8005906:	f000 fe71 	bl	80065ec <Osal_MemSet>
  rq.ogf = 0x3f;
 800590a:	233f      	movs	r3, #63	; 0x3f
 800590c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8005910:	2388      	movs	r3, #136	; 0x88
 8005912:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005916:	f107 0310 	add.w	r3, r7, #16
 800591a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800591e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005922:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005926:	f107 030f 	add.w	r3, r7, #15
 800592a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800592e:	2301      	movs	r3, #1
 8005930:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005934:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005938:	2100      	movs	r1, #0
 800593a:	4618      	mov	r0, r3
 800593c:	f001 f8e0 	bl	8006b00 <hci_send_req>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	da01      	bge.n	800594a <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8005946:	23ff      	movs	r3, #255	; 0xff
 8005948:	e004      	b.n	8005954 <aci_gap_pass_key_resp+0xc4>
  return status;
 800594a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800594e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005952:	781b      	ldrb	r3, [r3, #0]
}
 8005954:	4618      	mov	r0, r3
 8005956:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800595e:	b590      	push	{r4, r7, lr}
 8005960:	b0cd      	sub	sp, #308	; 0x134
 8005962:	af00      	add	r7, sp, #0
 8005964:	4604      	mov	r4, r0
 8005966:	4608      	mov	r0, r1
 8005968:	4611      	mov	r1, r2
 800596a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800596e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8005972:	6013      	str	r3, [r2, #0]
 8005974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005978:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800597c:	4622      	mov	r2, r4
 800597e:	701a      	strb	r2, [r3, #0]
 8005980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005984:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005988:	4602      	mov	r2, r0
 800598a:	701a      	strb	r2, [r3, #0]
 800598c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005990:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8005994:	460a      	mov	r2, r1
 8005996:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8005998:	f107 0310 	add.w	r3, r7, #16
 800599c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80059a0:	f107 0308 	add.w	r3, r7, #8
 80059a4:	2207      	movs	r2, #7
 80059a6:	2100      	movs	r1, #0
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 fe1f 	bl	80065ec <Osal_MemSet>
  int index_input = 0;
 80059ae:	2300      	movs	r3, #0
 80059b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80059b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80059bc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80059c0:	7812      	ldrb	r2, [r2, #0]
 80059c2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80059c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80059c8:	3301      	adds	r3, #1
 80059ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80059ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80059d6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80059da:	7812      	ldrb	r2, [r2, #0]
 80059dc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80059de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80059e2:	3301      	adds	r3, #1
 80059e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 80059e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80059f0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80059f4:	7812      	ldrb	r2, [r2, #0]
 80059f6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80059f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80059fc:	3301      	adds	r3, #1
 80059fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005a02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a06:	2218      	movs	r2, #24
 8005a08:	2100      	movs	r1, #0
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 fdee 	bl	80065ec <Osal_MemSet>
  rq.ogf = 0x3f;
 8005a10:	233f      	movs	r3, #63	; 0x3f
 8005a12:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8005a16:	238a      	movs	r3, #138	; 0x8a
 8005a18:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005a1c:	f107 0310 	add.w	r3, r7, #16
 8005a20:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005a24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a28:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8005a2c:	f107 0308 	add.w	r3, r7, #8
 8005a30:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8005a34:	2307      	movs	r3, #7
 8005a36:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005a3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a3e:	2100      	movs	r1, #0
 8005a40:	4618      	mov	r0, r3
 8005a42:	f001 f85d 	bl	8006b00 <hci_send_req>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	da01      	bge.n	8005a50 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8005a4c:	23ff      	movs	r3, #255	; 0xff
 8005a4e:	e02e      	b.n	8005aae <aci_gap_init+0x150>
  if ( resp.Status )
 8005a50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a54:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d005      	beq.n	8005a6a <aci_gap_init+0x10c>
    return resp.Status;
 8005a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a62:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	e021      	b.n	8005aae <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8005a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a6e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005a72:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8005a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a88:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005a8c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005a96:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8005a98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a9c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005aa0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8005aaa:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd90      	pop	{r4, r7, pc}

08005ab8 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b0cc      	sub	sp, #304	; 0x130
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	4602      	mov	r2, r0
 8005ac0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ac8:	6019      	str	r1, [r3, #0]
 8005aca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ace:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005ad2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8005ad4:	f107 0310 	add.w	r3, r7, #16
 8005ad8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005adc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8005aee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005af6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005afa:	7812      	ldrb	r2, [r2, #0]
 8005afc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005afe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b02:	3301      	adds	r3, #1
 8005b04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8005b08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b0c:	1c58      	adds	r0, r3, #1
 8005b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b12:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005b16:	781a      	ldrb	r2, [r3, #0]
 8005b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b20:	6819      	ldr	r1, [r3, #0]
 8005b22:	f000 fd53 	bl	80065cc <Osal_MemCpy>
  index_input += AdvDataLen;
 8005b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b2a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005b34:	4413      	add	r3, r2
 8005b36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005b3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b3e:	2218      	movs	r2, #24
 8005b40:	2100      	movs	r1, #0
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fd52 	bl	80065ec <Osal_MemSet>
  rq.ogf = 0x3f;
 8005b48:	233f      	movs	r3, #63	; 0x3f
 8005b4a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8005b4e:	238e      	movs	r3, #142	; 0x8e
 8005b50:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005b54:	f107 0310 	add.w	r3, r7, #16
 8005b58:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005b5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b60:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005b64:	f107 030f 	add.w	r3, r7, #15
 8005b68:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005b72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b76:	2100      	movs	r1, #0
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 ffc1 	bl	8006b00 <hci_send_req>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	da01      	bge.n	8005b88 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8005b84:	23ff      	movs	r3, #255	; 0xff
 8005b86:	e004      	b.n	8005b92 <aci_gap_update_adv_data+0xda>
  return status;
 8005b88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b8c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005b90:	781b      	ldrb	r3, [r3, #0]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b088      	sub	sp, #32
 8005ba0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005ba6:	f107 0308 	add.w	r3, r7, #8
 8005baa:	2218      	movs	r2, #24
 8005bac:	2100      	movs	r1, #0
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 fd1c 	bl	80065ec <Osal_MemSet>
  rq.ogf = 0x3f;
 8005bb4:	233f      	movs	r3, #63	; 0x3f
 8005bb6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8005bb8:	2392      	movs	r3, #146	; 0x92
 8005bba:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005bbc:	1dfb      	adds	r3, r7, #7
 8005bbe:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005bc4:	f107 0308 	add.w	r3, r7, #8
 8005bc8:	2100      	movs	r1, #0
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 ff98 	bl	8006b00 <hci_send_req>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	da01      	bge.n	8005bda <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005bd6:	23ff      	movs	r3, #255	; 0xff
 8005bd8:	e000      	b.n	8005bdc <aci_gap_configure_whitelist+0x40>
  return status;
 8005bda:	79fb      	ldrb	r3, [r7, #7]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3720      	adds	r7, #32
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b0cc      	sub	sp, #304	; 0x130
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	4602      	mov	r2, r0
 8005bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005bf4:	801a      	strh	r2, [r3, #0]
 8005bf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bfa:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8005bfe:	460a      	mov	r2, r1
 8005c00:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8005c02:	f107 0310 	add.w	r3, r7, #16
 8005c06:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005c0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c0e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005c12:	2200      	movs	r2, #0
 8005c14:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005c16:	2300      	movs	r3, #0
 8005c18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8005c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c20:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c24:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005c28:	8812      	ldrh	r2, [r2, #0]
 8005c2a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005c2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c30:	3302      	adds	r3, #2
 8005c32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8005c36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c3a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c3e:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8005c42:	7812      	ldrb	r2, [r2, #0]
 8005c44:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005c46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005c50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c54:	2218      	movs	r2, #24
 8005c56:	2100      	movs	r1, #0
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f000 fcc7 	bl	80065ec <Osal_MemSet>
  rq.ogf = 0x3f;
 8005c5e:	233f      	movs	r3, #63	; 0x3f
 8005c60:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8005c64:	23a5      	movs	r3, #165	; 0xa5
 8005c66:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005c6a:	f107 0310 	add.w	r3, r7, #16
 8005c6e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005c72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c76:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005c7a:	f107 030f 	add.w	r3, r7, #15
 8005c7e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005c82:	2301      	movs	r3, #1
 8005c84:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005c88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 ff36 	bl	8006b00 <hci_send_req>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	da01      	bge.n	8005c9e <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8005c9a:	23ff      	movs	r3, #255	; 0xff
 8005c9c:	e004      	b.n	8005ca8 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8005c9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005ca6:	781b      	ldrb	r3, [r3, #0]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b088      	sub	sp, #32
 8005cb6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005cbc:	f107 0308 	add.w	r3, r7, #8
 8005cc0:	2218      	movs	r2, #24
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 fc91 	bl	80065ec <Osal_MemSet>
  rq.ogf = 0x3f;
 8005cca:	233f      	movs	r3, #63	; 0x3f
 8005ccc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8005cce:	f240 1301 	movw	r3, #257	; 0x101
 8005cd2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005cd4:	1dfb      	adds	r3, r7, #7
 8005cd6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005cdc:	f107 0308 	add.w	r3, r7, #8
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 ff0c 	bl	8006b00 <hci_send_req>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	da01      	bge.n	8005cf2 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8005cee:	23ff      	movs	r3, #255	; 0xff
 8005cf0:	e000      	b.n	8005cf4 <aci_gatt_init+0x42>
  return status;
 8005cf2:	79fb      	ldrb	r3, [r7, #7]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3720      	adds	r7, #32
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8005cfc:	b590      	push	{r4, r7, lr}
 8005cfe:	b0cf      	sub	sp, #316	; 0x13c
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	4604      	mov	r4, r0
 8005d04:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8005d08:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8005d0c:	6001      	str	r1, [r0, #0]
 8005d0e:	4610      	mov	r0, r2
 8005d10:	4619      	mov	r1, r3
 8005d12:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d16:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005d1a:	4622      	mov	r2, r4
 8005d1c:	701a      	strb	r2, [r3, #0]
 8005d1e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d22:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005d26:	4602      	mov	r2, r0
 8005d28:	701a      	strb	r2, [r3, #0]
 8005d2a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d2e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005d32:	460a      	mov	r2, r1
 8005d34:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8005d36:	f107 0310 	add.w	r3, r7, #16
 8005d3a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8005d3e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d42:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d00a      	beq.n	8005d62 <aci_gatt_add_service+0x66>
 8005d4c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d50:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d101      	bne.n	8005d5e <aci_gatt_add_service+0x62>
 8005d5a:	2311      	movs	r3, #17
 8005d5c:	e002      	b.n	8005d64 <aci_gatt_add_service+0x68>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <aci_gatt_add_service+0x68>
 8005d62:	2303      	movs	r3, #3
 8005d64:	f107 0210 	add.w	r2, r7, #16
 8005d68:	4413      	add	r3, r2
 8005d6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005d6e:	f107 030c 	add.w	r3, r7, #12
 8005d72:	2203      	movs	r2, #3
 8005d74:	2100      	movs	r1, #0
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fc38 	bl	80065ec <Osal_MemSet>
  int index_input = 0;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8005d82:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005d86:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005d8a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8005d8e:	7812      	ldrb	r2, [r2, #0]
 8005d90:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005d92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005d96:	3301      	adds	r3, #1
 8005d98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8005d9c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005da0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d002      	beq.n	8005db0 <aci_gatt_add_service+0xb4>
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d004      	beq.n	8005db8 <aci_gatt_add_service+0xbc>
 8005dae:	e007      	b.n	8005dc0 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8005db0:	2302      	movs	r3, #2
 8005db2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8005db6:	e005      	b.n	8005dc4 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8005db8:	2310      	movs	r3, #16
 8005dba:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8005dbe:	e001      	b.n	8005dc4 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8005dc0:	2397      	movs	r3, #151	; 0x97
 8005dc2:	e06c      	b.n	8005e9e <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8005dc4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005dc8:	1c58      	adds	r0, r3, #1
 8005dca:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8005dce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005dd2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005dd6:	6819      	ldr	r1, [r3, #0]
 8005dd8:	f000 fbf8 	bl	80065cc <Osal_MemCpy>
    index_input += size;
 8005ddc:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8005de0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005de4:	4413      	add	r3, r2
 8005de6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8005dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dee:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005df2:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8005df6:	7812      	ldrb	r2, [r2, #0]
 8005df8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005dfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005dfe:	3301      	adds	r3, #1
 8005e00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8005e04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e08:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005e0c:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8005e10:	7812      	ldrb	r2, [r2, #0]
 8005e12:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8005e14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e18:	3301      	adds	r3, #1
 8005e1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005e1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e22:	2218      	movs	r2, #24
 8005e24:	2100      	movs	r1, #0
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 fbe0 	bl	80065ec <Osal_MemSet>
  rq.ogf = 0x3f;
 8005e2c:	233f      	movs	r3, #63	; 0x3f
 8005e2e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8005e32:	f44f 7381 	mov.w	r3, #258	; 0x102
 8005e36:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005e3a:	f107 0310 	add.w	r3, r7, #16
 8005e3e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005e42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e46:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8005e4a:	f107 030c 	add.w	r3, r7, #12
 8005e4e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8005e52:	2303      	movs	r3, #3
 8005e54:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005e58:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 fe4e 	bl	8006b00 <hci_send_req>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	da01      	bge.n	8005e6e <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8005e6a:	23ff      	movs	r3, #255	; 0xff
 8005e6c:	e017      	b.n	8005e9e <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8005e6e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d005      	beq.n	8005e88 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8005e7c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	e00a      	b.n	8005e9e <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8005e88:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e90:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8005e9a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd90      	pop	{r4, r7, pc}

08005ea8 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8005ea8:	b590      	push	{r4, r7, lr}
 8005eaa:	b0d1      	sub	sp, #324	; 0x144
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	4604      	mov	r4, r0
 8005eb0:	4608      	mov	r0, r1
 8005eb2:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8005eb6:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8005eba:	600a      	str	r2, [r1, #0]
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005ec2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005ec6:	4622      	mov	r2, r4
 8005ec8:	801a      	strh	r2, [r3, #0]
 8005eca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005ece:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	701a      	strb	r2, [r3, #0]
 8005ed6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005eda:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8005ede:	460a      	mov	r2, r1
 8005ee0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8005ee2:	f107 0318 	add.w	r3, r7, #24
 8005ee6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8005eea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005eee:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d00a      	beq.n	8005f0e <aci_gatt_add_char+0x66>
 8005ef8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005efc:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d101      	bne.n	8005f0a <aci_gatt_add_char+0x62>
 8005f06:	2313      	movs	r3, #19
 8005f08:	e002      	b.n	8005f10 <aci_gatt_add_char+0x68>
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e000      	b.n	8005f10 <aci_gatt_add_char+0x68>
 8005f0e:	2305      	movs	r3, #5
 8005f10:	f107 0218 	add.w	r2, r7, #24
 8005f14:	4413      	add	r3, r2
 8005f16:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005f1a:	f107 0314 	add.w	r3, r7, #20
 8005f1e:	2203      	movs	r2, #3
 8005f20:	2100      	movs	r1, #0
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 fb62 	bl	80065ec <Osal_MemSet>
  int index_input = 0;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8005f2e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005f32:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005f36:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8005f3a:	8812      	ldrh	r2, [r2, #0]
 8005f3c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005f3e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005f42:	3302      	adds	r3, #2
 8005f44:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8005f48:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005f4c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005f50:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8005f54:	7812      	ldrb	r2, [r2, #0]
 8005f56:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005f58:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8005f62:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005f66:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d002      	beq.n	8005f76 <aci_gatt_add_char+0xce>
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d004      	beq.n	8005f7e <aci_gatt_add_char+0xd6>
 8005f74:	e007      	b.n	8005f86 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8005f76:	2302      	movs	r3, #2
 8005f78:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8005f7c:	e005      	b.n	8005f8a <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8005f7e:	2310      	movs	r3, #16
 8005f80:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8005f84:	e001      	b.n	8005f8a <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8005f86:	2397      	movs	r3, #151	; 0x97
 8005f88:	e091      	b.n	80060ae <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8005f8a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005f8e:	1cd8      	adds	r0, r3, #3
 8005f90:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8005f94:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005f98:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005f9c:	6819      	ldr	r1, [r3, #0]
 8005f9e:	f000 fb15 	bl	80065cc <Osal_MemCpy>
    index_input += size;
 8005fa2:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8005fa6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005faa:	4413      	add	r3, r2
 8005fac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8005fb0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fb4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005fb8:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8005fbc:	8812      	ldrh	r2, [r2, #0]
 8005fbe:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005fc0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005fc4:	3302      	adds	r3, #2
 8005fc6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8005fca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fce:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8005fd2:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8005fd4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005fd8:	3301      	adds	r3, #1
 8005fda:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8005fde:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fe2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005fe6:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8005fe8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005fec:	3301      	adds	r3, #1
 8005fee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8005ff2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ff6:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8005ffa:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8005ffc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006000:	3301      	adds	r3, #1
 8006002:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8006006:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800600a:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800600e:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8006010:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006014:	3301      	adds	r3, #1
 8006016:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800601a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800601e:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8006022:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8006024:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006028:	3301      	adds	r3, #1
 800602a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800602e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006032:	2218      	movs	r2, #24
 8006034:	2100      	movs	r1, #0
 8006036:	4618      	mov	r0, r3
 8006038:	f000 fad8 	bl	80065ec <Osal_MemSet>
  rq.ogf = 0x3f;
 800603c:	233f      	movs	r3, #63	; 0x3f
 800603e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8006042:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006046:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800604a:	f107 0318 	add.w	r3, r7, #24
 800604e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8006052:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006056:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800605a:	f107 0314 	add.w	r3, r7, #20
 800605e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8006062:	2303      	movs	r3, #3
 8006064:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006068:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800606c:	2100      	movs	r1, #0
 800606e:	4618      	mov	r0, r3
 8006070:	f000 fd46 	bl	8006b00 <hci_send_req>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	da01      	bge.n	800607e <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800607a:	23ff      	movs	r3, #255	; 0xff
 800607c:	e017      	b.n	80060ae <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800607e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006082:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d005      	beq.n	8006098 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800608c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006090:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	e00a      	b.n	80060ae <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8006098:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800609c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060a0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80060aa:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd90      	pop	{r4, r7, pc}

080060b8 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80060b8:	b5b0      	push	{r4, r5, r7, lr}
 80060ba:	b0cc      	sub	sp, #304	; 0x130
 80060bc:	af00      	add	r7, sp, #0
 80060be:	4605      	mov	r5, r0
 80060c0:	460c      	mov	r4, r1
 80060c2:	4610      	mov	r0, r2
 80060c4:	4619      	mov	r1, r3
 80060c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ca:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80060ce:	462a      	mov	r2, r5
 80060d0:	801a      	strh	r2, [r3, #0]
 80060d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060da:	4622      	mov	r2, r4
 80060dc:	801a      	strh	r2, [r3, #0]
 80060de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e2:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80060e6:	4602      	mov	r2, r0
 80060e8:	701a      	strb	r2, [r3, #0]
 80060ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ee:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80060f2:	460a      	mov	r2, r1
 80060f4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80060f6:	f107 0310 	add.w	r3, r7, #16
 80060fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80060fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006102:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006106:	2200      	movs	r2, #0
 8006108:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800610a:	2300      	movs	r3, #0
 800610c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8006110:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006114:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006118:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800611c:	8812      	ldrh	r2, [r2, #0]
 800611e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006120:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006124:	3302      	adds	r3, #2
 8006126:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800612a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800612e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006132:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006136:	8812      	ldrh	r2, [r2, #0]
 8006138:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800613a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800613e:	3302      	adds	r3, #2
 8006140:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8006144:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006148:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800614c:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8006150:	7812      	ldrb	r2, [r2, #0]
 8006152:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006154:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006158:	3301      	adds	r3, #1
 800615a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800615e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006162:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006166:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800616a:	7812      	ldrb	r2, [r2, #0]
 800616c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800616e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006172:	3301      	adds	r3, #1
 8006174:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8006178:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800617c:	1d98      	adds	r0, r3, #6
 800617e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006182:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	461a      	mov	r2, r3
 800618a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800618e:	f000 fa1d 	bl	80065cc <Osal_MemCpy>
  index_input += Char_Value_Length;
 8006192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006196:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80061a0:	4413      	add	r3, r2
 80061a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80061a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80061aa:	2218      	movs	r2, #24
 80061ac:	2100      	movs	r1, #0
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 fa1c 	bl	80065ec <Osal_MemSet>
  rq.ogf = 0x3f;
 80061b4:	233f      	movs	r3, #63	; 0x3f
 80061b6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80061ba:	f44f 7383 	mov.w	r3, #262	; 0x106
 80061be:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80061c2:	f107 0310 	add.w	r3, r7, #16
 80061c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80061ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80061d2:	f107 030f 	add.w	r3, r7, #15
 80061d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80061da:	2301      	movs	r3, #1
 80061dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80061e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80061e4:	2100      	movs	r1, #0
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 fc8a 	bl	8006b00 <hci_send_req>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	da01      	bge.n	80061f6 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80061f2:	23ff      	movs	r3, #255	; 0xff
 80061f4:	e004      	b.n	8006200 <aci_gatt_update_char_value+0x148>
  return status;
 80061f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061fa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80061fe:	781b      	ldrb	r3, [r3, #0]
}
 8006200:	4618      	mov	r0, r3
 8006202:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006206:	46bd      	mov	sp, r7
 8006208:	bdb0      	pop	{r4, r5, r7, pc}

0800620a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b0cc      	sub	sp, #304	; 0x130
 800620e:	af00      	add	r7, sp, #0
 8006210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006214:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006218:	601a      	str	r2, [r3, #0]
 800621a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800621e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006222:	4602      	mov	r2, r0
 8006224:	701a      	strb	r2, [r3, #0]
 8006226:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800622a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800622e:	460a      	mov	r2, r1
 8006230:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8006232:	f107 0310 	add.w	r3, r7, #16
 8006236:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800623a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800623e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006242:	2200      	movs	r2, #0
 8006244:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006246:	2300      	movs	r3, #0
 8006248:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800624c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006250:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006254:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006258:	7812      	ldrb	r2, [r2, #0]
 800625a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800625c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006260:	3301      	adds	r3, #1
 8006262:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8006266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800626a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800626e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006272:	7812      	ldrb	r2, [r2, #0]
 8006274:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006276:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800627a:	3301      	adds	r3, #1
 800627c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8006280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006284:	1c98      	adds	r0, r3, #2
 8006286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800628a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800628e:	781a      	ldrb	r2, [r3, #0]
 8006290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006294:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006298:	6819      	ldr	r1, [r3, #0]
 800629a:	f000 f997 	bl	80065cc <Osal_MemCpy>
  index_input += Length;
 800629e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80062ac:	4413      	add	r3, r2
 80062ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80062b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062b6:	2218      	movs	r2, #24
 80062b8:	2100      	movs	r1, #0
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 f996 	bl	80065ec <Osal_MemSet>
  rq.ogf = 0x3f;
 80062c0:	233f      	movs	r3, #63	; 0x3f
 80062c2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80062c6:	230c      	movs	r3, #12
 80062c8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80062cc:	f107 0310 	add.w	r3, r7, #16
 80062d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80062d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80062dc:	f107 030f 	add.w	r3, r7, #15
 80062e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80062e4:	2301      	movs	r3, #1
 80062e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80062ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062ee:	2100      	movs	r1, #0
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 fc05 	bl	8006b00 <hci_send_req>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	da01      	bge.n	8006300 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80062fc:	23ff      	movs	r3, #255	; 0xff
 80062fe:	e004      	b.n	800630a <aci_hal_write_config_data+0x100>
  return status;
 8006300:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006304:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006308:	781b      	ldrb	r3, [r3, #0]
}
 800630a:	4618      	mov	r0, r3
 800630c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b0cc      	sub	sp, #304	; 0x130
 8006318:	af00      	add	r7, sp, #0
 800631a:	4602      	mov	r2, r0
 800631c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006320:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006324:	701a      	strb	r2, [r3, #0]
 8006326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800632a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800632e:	460a      	mov	r2, r1
 8006330:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8006332:	f107 0310 	add.w	r3, r7, #16
 8006336:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800633a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800633e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006342:	2200      	movs	r2, #0
 8006344:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006346:	2300      	movs	r3, #0
 8006348:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800634c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006350:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006354:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006358:	7812      	ldrb	r2, [r2, #0]
 800635a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800635c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006360:	3301      	adds	r3, #1
 8006362:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8006366:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800636a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800636e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006372:	7812      	ldrb	r2, [r2, #0]
 8006374:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006376:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800637a:	3301      	adds	r3, #1
 800637c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006380:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006384:	2218      	movs	r2, #24
 8006386:	2100      	movs	r1, #0
 8006388:	4618      	mov	r0, r3
 800638a:	f000 f92f 	bl	80065ec <Osal_MemSet>
  rq.ogf = 0x3f;
 800638e:	233f      	movs	r3, #63	; 0x3f
 8006390:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8006394:	230f      	movs	r3, #15
 8006396:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800639a:	f107 0310 	add.w	r3, r7, #16
 800639e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80063a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80063aa:	f107 030f 	add.w	r3, r7, #15
 80063ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80063b2:	2301      	movs	r3, #1
 80063b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80063b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063bc:	2100      	movs	r1, #0
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 fb9e 	bl	8006b00 <hci_send_req>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	da01      	bge.n	80063ce <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80063ca:	23ff      	movs	r3, #255	; 0xff
 80063cc:	e004      	b.n	80063d8 <aci_hal_set_tx_power_level+0xc4>
  return status;
 80063ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80063d6:	781b      	ldrb	r3, [r3, #0]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b0cc      	sub	sp, #304	; 0x130
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	4602      	mov	r2, r0
 80063ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ee:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80063f2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80063f4:	f107 0310 	add.w	r3, r7, #16
 80063f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80063fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006400:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006404:	2200      	movs	r2, #0
 8006406:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006408:	2300      	movs	r3, #0
 800640a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800640e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006412:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006416:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800641a:	8812      	ldrh	r2, [r2, #0]
 800641c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800641e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006422:	3302      	adds	r3, #2
 8006424:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006428:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800642c:	2218      	movs	r2, #24
 800642e:	2100      	movs	r1, #0
 8006430:	4618      	mov	r0, r3
 8006432:	f000 f8db 	bl	80065ec <Osal_MemSet>
  rq.ogf = 0x3f;
 8006436:	233f      	movs	r3, #63	; 0x3f
 8006438:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800643c:	2318      	movs	r3, #24
 800643e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006442:	f107 0310 	add.w	r3, r7, #16
 8006446:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800644a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800644e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006452:	f107 030f 	add.w	r3, r7, #15
 8006456:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800645a:	2301      	movs	r3, #1
 800645c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006460:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006464:	2100      	movs	r1, #0
 8006466:	4618      	mov	r0, r3
 8006468:	f000 fb4a 	bl	8006b00 <hci_send_req>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	da01      	bge.n	8006476 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8006472:	23ff      	movs	r3, #255	; 0xff
 8006474:	e004      	b.n	8006480 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8006476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800647a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800647e:	781b      	ldrb	r3, [r3, #0]
}
 8006480:	4618      	mov	r0, r3
 8006482:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b088      	sub	sp, #32
 800648e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006490:	2300      	movs	r3, #0
 8006492:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006494:	f107 0308 	add.w	r3, r7, #8
 8006498:	2218      	movs	r2, #24
 800649a:	2100      	movs	r1, #0
 800649c:	4618      	mov	r0, r3
 800649e:	f000 f8a5 	bl	80065ec <Osal_MemSet>
  rq.ogf = 0x03;
 80064a2:	2303      	movs	r3, #3
 80064a4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80064a6:	2303      	movs	r3, #3
 80064a8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80064aa:	1dfb      	adds	r3, r7, #7
 80064ac:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80064ae:	2301      	movs	r3, #1
 80064b0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80064b2:	f107 0308 	add.w	r3, r7, #8
 80064b6:	2100      	movs	r1, #0
 80064b8:	4618      	mov	r0, r3
 80064ba:	f000 fb21 	bl	8006b00 <hci_send_req>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	da01      	bge.n	80064c8 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80064c4:	23ff      	movs	r3, #255	; 0xff
 80064c6:	e000      	b.n	80064ca <hci_reset+0x40>
  return status;
 80064c8:	79fb      	ldrb	r3, [r7, #7]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3720      	adds	r7, #32
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80064d2:	b590      	push	{r4, r7, lr}
 80064d4:	b0cd      	sub	sp, #308	; 0x134
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	4604      	mov	r4, r0
 80064da:	4608      	mov	r0, r1
 80064dc:	4611      	mov	r1, r2
 80064de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80064e6:	4622      	mov	r2, r4
 80064e8:	701a      	strb	r2, [r3, #0]
 80064ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ee:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80064f2:	4602      	mov	r2, r0
 80064f4:	701a      	strb	r2, [r3, #0]
 80064f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064fa:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80064fe:	460a      	mov	r2, r1
 8006500:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8006502:	f107 0310 	add.w	r3, r7, #16
 8006506:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800650a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800650e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006512:	2200      	movs	r2, #0
 8006514:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006516:	2300      	movs	r3, #0
 8006518:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800651c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006520:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006524:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006528:	7812      	ldrb	r2, [r2, #0]
 800652a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800652c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006530:	3301      	adds	r3, #1
 8006532:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8006536:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800653a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800653e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006542:	7812      	ldrb	r2, [r2, #0]
 8006544:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006546:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800654a:	3301      	adds	r3, #1
 800654c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8006550:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006554:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006558:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800655c:	7812      	ldrb	r2, [r2, #0]
 800655e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006560:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006564:	3301      	adds	r3, #1
 8006566:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800656a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800656e:	2218      	movs	r2, #24
 8006570:	2100      	movs	r1, #0
 8006572:	4618      	mov	r0, r3
 8006574:	f000 f83a 	bl	80065ec <Osal_MemSet>
  rq.ogf = 0x08;
 8006578:	2308      	movs	r3, #8
 800657a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800657e:	2331      	movs	r3, #49	; 0x31
 8006580:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006584:	f107 0310 	add.w	r3, r7, #16
 8006588:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800658c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006590:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006594:	f107 030f 	add.w	r3, r7, #15
 8006598:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800659c:	2301      	movs	r3, #1
 800659e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80065a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80065a6:	2100      	movs	r1, #0
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 faa9 	bl	8006b00 <hci_send_req>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	da01      	bge.n	80065b8 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80065b4:	23ff      	movs	r3, #255	; 0xff
 80065b6:	e004      	b.n	80065c2 <hci_le_set_default_phy+0xf0>
  return status;
 80065b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065bc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80065c0:	781b      	ldrb	r3, [r3, #0]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd90      	pop	{r4, r7, pc}

080065cc <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	68b9      	ldr	r1, [r7, #8]
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f002 f9a5 	bl	800892c <memcpy>
 80065e2:	4603      	mov	r3, r0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	68b9      	ldr	r1, [r7, #8]
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f002 f9a3 	bl	8008948 <memset>
 8006602:	4603      	mov	r3, r0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800660c:	b480      	push	{r7}
 800660e:	af00      	add	r7, sp, #0
  return;
 8006610:	bf00      	nop
}
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800661a:	b480      	push	{r7}
 800661c:	af00      	add	r7, sp, #0
  return;
 800661e:	bf00      	nop
}
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8006628:	b480      	push	{r7}
 800662a:	af00      	add	r7, sp, #0
  return;
 800662c:	bf00      	nop
}
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr

08006636 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8006636:	b480      	push	{r7}
 8006638:	af00      	add	r7, sp, #0
  return;
 800663a:	bf00      	nop
}
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8006644:	b480      	push	{r7}
 8006646:	af00      	add	r7, sp, #0
  return;
 8006648:	bf00      	nop
}
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8006652:	b480      	push	{r7}
 8006654:	af00      	add	r7, sp, #0
  return;
 8006656:	bf00      	nop
}
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0
  return;
 8006664:	bf00      	nop
}
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800666e:	b480      	push	{r7}
 8006670:	af00      	add	r7, sp, #0
  return;
 8006672:	bf00      	nop
}
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0
  return;
 8006680:	bf00      	nop
}
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800668a:	b480      	push	{r7}
 800668c:	af00      	add	r7, sp, #0
  return;
 800668e:	bf00      	nop
}
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8006698:	b480      	push	{r7}
 800669a:	af00      	add	r7, sp, #0
  return;
 800669c:	bf00      	nop
}
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80066a6:	b480      	push	{r7}
 80066a8:	af00      	add	r7, sp, #0
  return;
 80066aa:	bf00      	nop
}
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 80066b4:	b480      	push	{r7}
 80066b6:	af00      	add	r7, sp, #0
  return;
 80066b8:	bf00      	nop
}
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 80066c2:	b480      	push	{r7}
 80066c4:	af00      	add	r7, sp, #0
  return;
 80066c6:	bf00      	nop
}
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80066d0:	b480      	push	{r7}
 80066d2:	af00      	add	r7, sp, #0
  return;
 80066d4:	bf00      	nop
}
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80066de:	b480      	push	{r7}
 80066e0:	af00      	add	r7, sp, #0
  return;
 80066e2:	bf00      	nop
}
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0
  return;
 80066f0:	bf00      	nop
}
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
	...

080066fc <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8006700:	4b04      	ldr	r3, [pc, #16]	; (8006714 <SVCCTL_Init+0x18>)
 8006702:	2200      	movs	r2, #0
 8006704:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8006706:	4b04      	ldr	r3, [pc, #16]	; (8006718 <SVCCTL_Init+0x1c>)
 8006708:	2200      	movs	r2, #0
 800670a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800670c:	f000 f806 	bl	800671c <SVCCTL_SvcInit>

  return;
 8006710:	bf00      	nop
}
 8006712:	bd80      	pop	{r7, pc}
 8006714:	20000120 	.word	0x20000120
 8006718:	20000140 	.word	0x20000140

0800671c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	af00      	add	r7, sp, #0
  BAS_Init();
 8006720:	f7ff ff74 	bl	800660c <BAS_Init>

  BLS_Init();
 8006724:	f7ff ff79 	bl	800661a <BLS_Init>

  CRS_STM_Init();
 8006728:	f7ff ff7e 	bl	8006628 <CRS_STM_Init>

  DIS_Init();
 800672c:	f7ff ff83 	bl	8006636 <DIS_Init>

  EDS_STM_Init();
 8006730:	f7ff ff88 	bl	8006644 <EDS_STM_Init>

  HIDS_Init();
 8006734:	f7ff ff8d 	bl	8006652 <HIDS_Init>

  HRS_Init();
 8006738:	f7ff ff92 	bl	8006660 <HRS_Init>

  HTS_Init();
 800673c:	f7ff ff97 	bl	800666e <HTS_Init>

  IAS_Init();
 8006740:	f7ff ff9c 	bl	800667c <IAS_Init>

  LLS_Init();
 8006744:	f7ff ffa1 	bl	800668a <LLS_Init>

  TPS_Init();
 8006748:	f7ff ffa6 	bl	8006698 <TPS_Init>

  MOTENV_STM_Init();
 800674c:	f7ff ffab 	bl	80066a6 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8006750:	f7ff ffb0 	bl	80066b4 <P2PS_STM_Init>

  ZDD_STM_Init();
 8006754:	f7ff ffb5 	bl	80066c2 <ZDD_STM_Init>

  OTAS_STM_Init();
 8006758:	f7ff ffba 	bl	80066d0 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800675c:	f7ff ffc6 	bl	80066ec <BVOPUS_STM_Init>

  MESH_Init();
 8006760:	f7ff ffbd 	bl	80066de <MESH_Init>

  SVCCTL_InitCustomSvc();
 8006764:	f001 fb26 	bl	8007db4 <SVCCTL_InitCustomSvc>
  
  return;
 8006768:	bf00      	nop
}
 800676a:	bd80      	pop	{r7, pc}

0800676c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8006774:	4b09      	ldr	r3, [pc, #36]	; (800679c <SVCCTL_RegisterSvcHandler+0x30>)
 8006776:	7f1b      	ldrb	r3, [r3, #28]
 8006778:	4619      	mov	r1, r3
 800677a:	4a08      	ldr	r2, [pc, #32]	; (800679c <SVCCTL_RegisterSvcHandler+0x30>)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8006782:	4b06      	ldr	r3, [pc, #24]	; (800679c <SVCCTL_RegisterSvcHandler+0x30>)
 8006784:	7f1b      	ldrb	r3, [r3, #28]
 8006786:	3301      	adds	r3, #1
 8006788:	b2da      	uxtb	r2, r3
 800678a:	4b04      	ldr	r3, [pc, #16]	; (800679c <SVCCTL_RegisterSvcHandler+0x30>)
 800678c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800678e:	bf00      	nop
}
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	20000120 	.word	0x20000120

080067a0 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	3301      	adds	r3, #1
 80067ac:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80067ae:	2300      	movs	r3, #0
 80067b0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	2bff      	cmp	r3, #255	; 0xff
 80067b8:	d125      	bne.n	8006806 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	3302      	adds	r3, #2
 80067be:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	881b      	ldrh	r3, [r3, #0]
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80067ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067ce:	d118      	bne.n	8006802 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80067d0:	2300      	movs	r3, #0
 80067d2:	757b      	strb	r3, [r7, #21]
 80067d4:	e00d      	b.n	80067f2 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80067d6:	7d7b      	ldrb	r3, [r7, #21]
 80067d8:	4a1a      	ldr	r2, [pc, #104]	; (8006844 <SVCCTL_UserEvtRx+0xa4>)
 80067da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	4798      	blx	r3
 80067e2:	4603      	mov	r3, r0
 80067e4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80067e6:	7dfb      	ldrb	r3, [r7, #23]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d108      	bne.n	80067fe <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80067ec:	7d7b      	ldrb	r3, [r7, #21]
 80067ee:	3301      	adds	r3, #1
 80067f0:	757b      	strb	r3, [r7, #21]
 80067f2:	4b14      	ldr	r3, [pc, #80]	; (8006844 <SVCCTL_UserEvtRx+0xa4>)
 80067f4:	7f1b      	ldrb	r3, [r3, #28]
 80067f6:	7d7a      	ldrb	r2, [r7, #21]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d3ec      	bcc.n	80067d6 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80067fc:	e002      	b.n	8006804 <SVCCTL_UserEvtRx+0x64>
              break;
 80067fe:	bf00      	nop
          break;
 8006800:	e000      	b.n	8006804 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8006802:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8006804:	e000      	b.n	8006808 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8006806:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8006808:	7dfb      	ldrb	r3, [r7, #23]
 800680a:	2b02      	cmp	r3, #2
 800680c:	d00f      	beq.n	800682e <SVCCTL_UserEvtRx+0x8e>
 800680e:	2b02      	cmp	r3, #2
 8006810:	dc10      	bgt.n	8006834 <SVCCTL_UserEvtRx+0x94>
 8006812:	2b00      	cmp	r3, #0
 8006814:	d002      	beq.n	800681c <SVCCTL_UserEvtRx+0x7c>
 8006816:	2b01      	cmp	r3, #1
 8006818:	d006      	beq.n	8006828 <SVCCTL_UserEvtRx+0x88>
 800681a:	e00b      	b.n	8006834 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 ff79 	bl	8007714 <SVCCTL_App_Notification>
 8006822:	4603      	mov	r3, r0
 8006824:	75bb      	strb	r3, [r7, #22]
      break;
 8006826:	e008      	b.n	800683a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006828:	2301      	movs	r3, #1
 800682a:	75bb      	strb	r3, [r7, #22]
      break;
 800682c:	e005      	b.n	800683a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800682e:	2300      	movs	r3, #0
 8006830:	75bb      	strb	r3, [r7, #22]
      break;
 8006832:	e002      	b.n	800683a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006834:	2301      	movs	r3, #1
 8006836:	75bb      	strb	r3, [r7, #22]
      break;
 8006838:	bf00      	nop
  }

  return (return_status);
 800683a:	7dbb      	ldrb	r3, [r7, #22]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	20000120 	.word	0x20000120

08006848 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b088      	sub	sp, #32
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006850:	f107 030c 	add.w	r3, r7, #12
 8006854:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	2125      	movs	r1, #37	; 0x25
 8006860:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8006864:	f000 fae2 	bl	8006e2c <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	330b      	adds	r3, #11
 800686c:	78db      	ldrb	r3, [r3, #3]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3720      	adds	r7, #32
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b088      	sub	sp, #32
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800687e:	f107 030c 	add.w	r3, r7, #12
 8006882:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	210f      	movs	r1, #15
 800688e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8006892:	f000 facb 	bl	8006e2c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	330b      	adds	r3, #11
 800689a:	78db      	ldrb	r3, [r3, #3]
}
 800689c:	4618      	mov	r0, r3
 800689e:	3720      	adds	r7, #32
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b088      	sub	sp, #32
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80068ac:	f107 030c 	add.w	r3, r7, #12
 80068b0:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	210e      	movs	r1, #14
 80068b8:	f64f 4075 	movw	r0, #64629	; 0xfc75
 80068bc:	f000 fab6 	bl	8006e2c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	330b      	adds	r3, #11
 80068c4:	78db      	ldrb	r3, [r3, #3]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3720      	adds	r7, #32
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
	...

080068d0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80068d0:	b480      	push	{r7}
 80068d2:	b08b      	sub	sp, #44	; 0x2c
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80068d8:	2300      	movs	r3, #0
 80068da:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80068dc:	2300      	movs	r3, #0
 80068de:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80068e0:	2300      	movs	r3, #0
 80068e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80068e4:	2300      	movs	r3, #0
 80068e6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80068e8:	2300      	movs	r3, #0
 80068ea:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80068ec:	2300      	movs	r3, #0
 80068ee:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80068f0:	2300      	movs	r3, #0
 80068f2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80068f4:	2300      	movs	r3, #0
 80068f6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80068f8:	4b4a      	ldr	r3, [pc, #296]	; (8006a24 <SHCI_GetWirelessFwInfo+0x154>)
 80068fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006900:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800690a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a44      	ldr	r2, [pc, #272]	; (8006a28 <SHCI_GetWirelessFwInfo+0x158>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d10f      	bne.n	800693c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	695b      	ldr	r3, [r3, #20]
 8006920:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	69db      	ldr	r3, [r3, #28]
 800692c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	617b      	str	r3, [r7, #20]
 800693a:	e01a      	b.n	8006972 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006944:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8006948:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	695b      	ldr	r3, [r3, #20]
 8006958:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006974:	0e1b      	lsrs	r3, r3, #24
 8006976:	b2da      	uxtb	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	0c1b      	lsrs	r3, r3, #16
 8006980:	b2da      	uxtb	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	0a1b      	lsrs	r3, r3, #8
 800698a:	b2da      	uxtb	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8006990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006992:	091b      	lsrs	r3, r3, #4
 8006994:	b2db      	uxtb	r3, r3
 8006996:	f003 030f 	and.w	r3, r3, #15
 800699a:	b2da      	uxtb	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	f003 030f 	and.w	r3, r3, #15
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	0e1b      	lsrs	r3, r3, #24
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80069b8:	6a3b      	ldr	r3, [r7, #32]
 80069ba:	0c1b      	lsrs	r3, r3, #16
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80069c2:	6a3b      	ldr	r3, [r7, #32]
 80069c4:	0a1b      	lsrs	r3, r3, #8
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80069cc:	6a3b      	ldr	r3, [r7, #32]
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	b2da      	uxtb	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	0e1b      	lsrs	r3, r3, #24
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	0c1b      	lsrs	r3, r3, #16
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	0a1b      	lsrs	r3, r3, #8
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	0e1b      	lsrs	r3, r3, #24
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	0c1b      	lsrs	r3, r3, #16
 8006a08:	b2da      	uxtb	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	372c      	adds	r7, #44	; 0x2c
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	58004000 	.word	0x58004000
 8006a28:	a94656b9 	.word	0xa94656b9

08006a2c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	4a08      	ldr	r2, [pc, #32]	; (8006a5c <hci_init+0x30>)
 8006a3c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8006a3e:	4a08      	ldr	r2, [pc, #32]	; (8006a60 <hci_init+0x34>)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8006a44:	4806      	ldr	r0, [pc, #24]	; (8006a60 <hci_init+0x34>)
 8006a46:	f000 f973 	bl	8006d30 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 f8d4 	bl	8006bfc <TlInit>

  return;
 8006a54:	bf00      	nop
}
 8006a56:	3708      	adds	r7, #8
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	20000340 	.word	0x20000340
 8006a60:	20000318 	.word	0x20000318

08006a64 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006a6a:	4822      	ldr	r0, [pc, #136]	; (8006af4 <hci_user_evt_proc+0x90>)
 8006a6c:	f000 fd28 	bl	80074c0 <LST_is_empty>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d12b      	bne.n	8006ace <hci_user_evt_proc+0x6a>
 8006a76:	4b20      	ldr	r3, [pc, #128]	; (8006af8 <hci_user_evt_proc+0x94>)
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d027      	beq.n	8006ace <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006a7e:	f107 030c 	add.w	r3, r7, #12
 8006a82:	4619      	mov	r1, r3
 8006a84:	481b      	ldr	r0, [pc, #108]	; (8006af4 <hci_user_evt_proc+0x90>)
 8006a86:	f000 fdaa 	bl	80075de <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8006a8a:	4b1c      	ldr	r3, [pc, #112]	; (8006afc <hci_user_evt_proc+0x98>)
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00c      	beq.n	8006aac <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8006a96:	2301      	movs	r3, #1
 8006a98:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006a9a:	4b18      	ldr	r3, [pc, #96]	; (8006afc <hci_user_evt_proc+0x98>)
 8006a9c:	69db      	ldr	r3, [r3, #28]
 8006a9e:	1d3a      	adds	r2, r7, #4
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8006aa4:	793a      	ldrb	r2, [r7, #4]
 8006aa6:	4b14      	ldr	r3, [pc, #80]	; (8006af8 <hci_user_evt_proc+0x94>)
 8006aa8:	701a      	strb	r2, [r3, #0]
 8006aaa:	e002      	b.n	8006ab2 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006aac:	4b12      	ldr	r3, [pc, #72]	; (8006af8 <hci_user_evt_proc+0x94>)
 8006aae:	2201      	movs	r2, #1
 8006ab0:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8006ab2:	4b11      	ldr	r3, [pc, #68]	; (8006af8 <hci_user_evt_proc+0x94>)
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d004      	beq.n	8006ac4 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	4618      	mov	r0, r3
 8006abe:	f000 fc03 	bl	80072c8 <TL_MM_EvtDone>
 8006ac2:	e004      	b.n	8006ace <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	480a      	ldr	r0, [pc, #40]	; (8006af4 <hci_user_evt_proc+0x90>)
 8006aca:	f000 fd1b 	bl	8007504 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006ace:	4809      	ldr	r0, [pc, #36]	; (8006af4 <hci_user_evt_proc+0x90>)
 8006ad0:	f000 fcf6 	bl	80074c0 <LST_is_empty>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d107      	bne.n	8006aea <hci_user_evt_proc+0x86>
 8006ada:	4b07      	ldr	r3, [pc, #28]	; (8006af8 <hci_user_evt_proc+0x94>)
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d003      	beq.n	8006aea <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8006ae2:	4804      	ldr	r0, [pc, #16]	; (8006af4 <hci_user_evt_proc+0x90>)
 8006ae4:	f001 f814 	bl	8007b10 <hci_notify_asynch_evt>
  }


  return;
 8006ae8:	bf00      	nop
 8006aea:	bf00      	nop
}
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	20000148 	.word	0x20000148
 8006af8:	20000154 	.word	0x20000154
 8006afc:	20000318 	.word	0x20000318

08006b00 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b088      	sub	sp, #32
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8006b0c:	2000      	movs	r0, #0
 8006b0e:	f000 f8cb 	bl	8006ca8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8006b12:	2300      	movs	r3, #0
 8006b14:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	885b      	ldrh	r3, [r3, #2]
 8006b1a:	b21b      	sxth	r3, r3
 8006b1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b20:	b21a      	sxth	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	881b      	ldrh	r3, [r3, #0]
 8006b26:	029b      	lsls	r3, r3, #10
 8006b28:	b21b      	sxth	r3, r3
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	b21b      	sxth	r3, r3
 8006b2e:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	b2d9      	uxtb	r1, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	689a      	ldr	r2, [r3, #8]
 8006b3a:	8bbb      	ldrh	r3, [r7, #28]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f000 f88d 	bl	8006c5c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8006b42:	e04e      	b.n	8006be2 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8006b44:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8006b48:	f000 fff9 	bl	8007b3e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006b4c:	e043      	b.n	8006bd6 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8006b4e:	f107 030c 	add.w	r3, r7, #12
 8006b52:	4619      	mov	r1, r3
 8006b54:	4828      	ldr	r0, [pc, #160]	; (8006bf8 <hci_send_req+0xf8>)
 8006b56:	f000 fd42 	bl	80075de <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	7a5b      	ldrb	r3, [r3, #9]
 8006b5e:	2b0f      	cmp	r3, #15
 8006b60:	d114      	bne.n	8006b8c <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	330b      	adds	r3, #11
 8006b66:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	885b      	ldrh	r3, [r3, #2]
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	8bba      	ldrh	r2, [r7, #28]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d104      	bne.n	8006b7e <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	7812      	ldrb	r2, [r2, #0]
 8006b7c:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	785b      	ldrb	r3, [r3, #1]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d027      	beq.n	8006bd6 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006b86:	2301      	movs	r3, #1
 8006b88:	77fb      	strb	r3, [r7, #31]
 8006b8a:	e024      	b.n	8006bd6 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	330b      	adds	r3, #11
 8006b90:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	8bba      	ldrh	r2, [r7, #28]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d114      	bne.n	8006bca <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	7a9b      	ldrb	r3, [r3, #10]
 8006ba4:	3b03      	subs	r3, #3
 8006ba6:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	695a      	ldr	r2, [r3, #20]
 8006bac:	7dfb      	ldrb	r3, [r7, #23]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	bfa8      	it	ge
 8006bb2:	461a      	movge	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6918      	ldr	r0, [r3, #16]
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	1cd9      	adds	r1, r3, #3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	695b      	ldr	r3, [r3, #20]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	f001 feb1 	bl	800892c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006bd6:	4808      	ldr	r0, [pc, #32]	; (8006bf8 <hci_send_req+0xf8>)
 8006bd8:	f000 fc72 	bl	80074c0 <LST_is_empty>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d0b5      	beq.n	8006b4e <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8006be2:	7ffb      	ldrb	r3, [r7, #31]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d0ad      	beq.n	8006b44 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8006be8:	2001      	movs	r0, #1
 8006bea:	f000 f85d 	bl	8006ca8 <NotifyCmdStatus>

  return 0;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3720      	adds	r7, #32
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	20000338 	.word	0x20000338

08006bfc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b086      	sub	sp, #24
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8006c04:	480f      	ldr	r0, [pc, #60]	; (8006c44 <TlInit+0x48>)
 8006c06:	f000 fc4b 	bl	80074a0 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8006c0a:	4a0f      	ldr	r2, [pc, #60]	; (8006c48 <TlInit+0x4c>)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8006c10:	480e      	ldr	r0, [pc, #56]	; (8006c4c <TlInit+0x50>)
 8006c12:	f000 fc45 	bl	80074a0 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006c16:	4b0e      	ldr	r3, [pc, #56]	; (8006c50 <TlInit+0x54>)
 8006c18:	2201      	movs	r2, #1
 8006c1a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8006c1c:	4b0d      	ldr	r3, [pc, #52]	; (8006c54 <TlInit+0x58>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00a      	beq.n	8006c3a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8006c28:	4b0b      	ldr	r3, [pc, #44]	; (8006c58 <TlInit+0x5c>)
 8006c2a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8006c2c:	4b09      	ldr	r3, [pc, #36]	; (8006c54 <TlInit+0x58>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f107 0208 	add.w	r2, r7, #8
 8006c34:	4610      	mov	r0, r2
 8006c36:	4798      	blx	r3
  }

  return;
 8006c38:	bf00      	nop
 8006c3a:	bf00      	nop
}
 8006c3c:	3718      	adds	r7, #24
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20000338 	.word	0x20000338
 8006c48:	20000150 	.word	0x20000150
 8006c4c:	20000148 	.word	0x20000148
 8006c50:	20000154 	.word	0x20000154
 8006c54:	20000318 	.word	0x20000318
 8006c58:	08006ce9 	.word	0x08006ce9

08006c5c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	4603      	mov	r3, r0
 8006c64:	603a      	str	r2, [r7, #0]
 8006c66:	80fb      	strh	r3, [r7, #6]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8006c6c:	4b0c      	ldr	r3, [pc, #48]	; (8006ca0 <SendCmd+0x44>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	88fa      	ldrh	r2, [r7, #6]
 8006c72:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8006c76:	4b0a      	ldr	r3, [pc, #40]	; (8006ca0 <SendCmd+0x44>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	797a      	ldrb	r2, [r7, #5]
 8006c7c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8006c7e:	4b08      	ldr	r3, [pc, #32]	; (8006ca0 <SendCmd+0x44>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	330c      	adds	r3, #12
 8006c84:	797a      	ldrb	r2, [r7, #5]
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f001 fe4f 	bl	800892c <memcpy>

  hciContext.io.Send(0,0);
 8006c8e:	4b05      	ldr	r3, [pc, #20]	; (8006ca4 <SendCmd+0x48>)
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	2100      	movs	r1, #0
 8006c94:	2000      	movs	r0, #0
 8006c96:	4798      	blx	r3

  return;
 8006c98:	bf00      	nop
}
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	20000150 	.word	0x20000150
 8006ca4:	20000318 	.word	0x20000318

08006ca8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	4603      	mov	r3, r0
 8006cb0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8006cb2:	79fb      	ldrb	r3, [r7, #7]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d108      	bne.n	8006cca <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8006cb8:	4b0a      	ldr	r3, [pc, #40]	; (8006ce4 <NotifyCmdStatus+0x3c>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00d      	beq.n	8006cdc <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8006cc0:	4b08      	ldr	r3, [pc, #32]	; (8006ce4 <NotifyCmdStatus+0x3c>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8006cc8:	e008      	b.n	8006cdc <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8006cca:	4b06      	ldr	r3, [pc, #24]	; (8006ce4 <NotifyCmdStatus+0x3c>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d004      	beq.n	8006cdc <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8006cd2:	4b04      	ldr	r3, [pc, #16]	; (8006ce4 <NotifyCmdStatus+0x3c>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2001      	movs	r0, #1
 8006cd8:	4798      	blx	r3
  return;
 8006cda:	bf00      	nop
 8006cdc:	bf00      	nop
}
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	20000340 	.word	0x20000340

08006ce8 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	7a5b      	ldrb	r3, [r3, #9]
 8006cf4:	2b0f      	cmp	r3, #15
 8006cf6:	d003      	beq.n	8006d00 <TlEvtReceived+0x18>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	7a5b      	ldrb	r3, [r3, #9]
 8006cfc:	2b0e      	cmp	r3, #14
 8006cfe:	d107      	bne.n	8006d10 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8006d00:	6879      	ldr	r1, [r7, #4]
 8006d02:	4809      	ldr	r0, [pc, #36]	; (8006d28 <TlEvtReceived+0x40>)
 8006d04:	f000 fc24 	bl	8007550 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8006d08:	2000      	movs	r0, #0
 8006d0a:	f000 ff0d 	bl	8007b28 <hci_cmd_resp_release>
 8006d0e:	e006      	b.n	8006d1e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8006d10:	6879      	ldr	r1, [r7, #4]
 8006d12:	4806      	ldr	r0, [pc, #24]	; (8006d2c <TlEvtReceived+0x44>)
 8006d14:	f000 fc1c 	bl	8007550 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006d18:	4804      	ldr	r0, [pc, #16]	; (8006d2c <TlEvtReceived+0x44>)
 8006d1a:	f000 fef9 	bl	8007b10 <hci_notify_asynch_evt>
  }

  return;
 8006d1e:	bf00      	nop
}
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	20000338 	.word	0x20000338
 8006d2c:	20000148 	.word	0x20000148

08006d30 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a05      	ldr	r2, [pc, #20]	; (8006d50 <hci_register_io_bus+0x20>)
 8006d3c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a04      	ldr	r2, [pc, #16]	; (8006d54 <hci_register_io_bus+0x24>)
 8006d42:	611a      	str	r2, [r3, #16]

  return;
 8006d44:	bf00      	nop
}
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	08007041 	.word	0x08007041
 8006d54:	080070a9 	.word	0x080070a9

08006d58 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	4a08      	ldr	r2, [pc, #32]	; (8006d88 <shci_init+0x30>)
 8006d68:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8006d6a:	4a08      	ldr	r2, [pc, #32]	; (8006d8c <shci_init+0x34>)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8006d70:	4806      	ldr	r0, [pc, #24]	; (8006d8c <shci_init+0x34>)
 8006d72:	f000 f911 	bl	8006f98 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 f894 	bl	8006ea8 <TlInit>

  return;
 8006d80:	bf00      	nop
}
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	20000364 	.word	0x20000364
 8006d8c:	20000344 	.word	0x20000344

08006d90 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006d96:	4822      	ldr	r0, [pc, #136]	; (8006e20 <shci_user_evt_proc+0x90>)
 8006d98:	f000 fb92 	bl	80074c0 <LST_is_empty>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d12b      	bne.n	8006dfa <shci_user_evt_proc+0x6a>
 8006da2:	4b20      	ldr	r3, [pc, #128]	; (8006e24 <shci_user_evt_proc+0x94>)
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d027      	beq.n	8006dfa <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006daa:	f107 030c 	add.w	r3, r7, #12
 8006dae:	4619      	mov	r1, r3
 8006db0:	481b      	ldr	r0, [pc, #108]	; (8006e20 <shci_user_evt_proc+0x90>)
 8006db2:	f000 fc14 	bl	80075de <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8006db6:	4b1c      	ldr	r3, [pc, #112]	; (8006e28 <shci_user_evt_proc+0x98>)
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00c      	beq.n	8006dd8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006dc6:	4b18      	ldr	r3, [pc, #96]	; (8006e28 <shci_user_evt_proc+0x98>)
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	1d3a      	adds	r2, r7, #4
 8006dcc:	4610      	mov	r0, r2
 8006dce:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8006dd0:	793a      	ldrb	r2, [r7, #4]
 8006dd2:	4b14      	ldr	r3, [pc, #80]	; (8006e24 <shci_user_evt_proc+0x94>)
 8006dd4:	701a      	strb	r2, [r3, #0]
 8006dd6:	e002      	b.n	8006dde <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006dd8:	4b12      	ldr	r3, [pc, #72]	; (8006e24 <shci_user_evt_proc+0x94>)
 8006dda:	2201      	movs	r2, #1
 8006ddc:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8006dde:	4b11      	ldr	r3, [pc, #68]	; (8006e24 <shci_user_evt_proc+0x94>)
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d004      	beq.n	8006df0 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	4618      	mov	r0, r3
 8006dea:	f000 fa6d 	bl	80072c8 <TL_MM_EvtDone>
 8006dee:	e004      	b.n	8006dfa <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4619      	mov	r1, r3
 8006df4:	480a      	ldr	r0, [pc, #40]	; (8006e20 <shci_user_evt_proc+0x90>)
 8006df6:	f000 fb85 	bl	8007504 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006dfa:	4809      	ldr	r0, [pc, #36]	; (8006e20 <shci_user_evt_proc+0x90>)
 8006dfc:	f000 fb60 	bl	80074c0 <LST_is_empty>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d107      	bne.n	8006e16 <shci_user_evt_proc+0x86>
 8006e06:	4b07      	ldr	r3, [pc, #28]	; (8006e24 <shci_user_evt_proc+0x94>)
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8006e0e:	4804      	ldr	r0, [pc, #16]	; (8006e20 <shci_user_evt_proc+0x90>)
 8006e10:	f7f9 fe95 	bl	8000b3e <shci_notify_asynch_evt>
  }


  return;
 8006e14:	bf00      	nop
 8006e16:	bf00      	nop
}
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	20000160 	.word	0x20000160
 8006e24:	20000170 	.word	0x20000170
 8006e28:	20000344 	.word	0x20000344

08006e2c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60ba      	str	r2, [r7, #8]
 8006e34:	607b      	str	r3, [r7, #4]
 8006e36:	4603      	mov	r3, r0
 8006e38:	81fb      	strh	r3, [r7, #14]
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8006e3e:	2000      	movs	r0, #0
 8006e40:	f000 f864 	bl	8006f0c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8006e44:	4b16      	ldr	r3, [pc, #88]	; (8006ea0 <shci_send+0x74>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	89fa      	ldrh	r2, [r7, #14]
 8006e4a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8006e4e:	4b14      	ldr	r3, [pc, #80]	; (8006ea0 <shci_send+0x74>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	7b7a      	ldrb	r2, [r7, #13]
 8006e54:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8006e56:	4b12      	ldr	r3, [pc, #72]	; (8006ea0 <shci_send+0x74>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	330c      	adds	r3, #12
 8006e5c:	7b7a      	ldrb	r2, [r7, #13]
 8006e5e:	68b9      	ldr	r1, [r7, #8]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f001 fd63 	bl	800892c <memcpy>

  shciContext.io.Send(0,0);
 8006e66:	4b0f      	ldr	r3, [pc, #60]	; (8006ea4 <shci_send+0x78>)
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8006e70:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8006e74:	f7f9 fe7a 	bl	8000b6c <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f103 0008 	add.w	r0, r3, #8
 8006e7e:	4b08      	ldr	r3, [pc, #32]	; (8006ea0 <shci_send+0x74>)
 8006e80:	6819      	ldr	r1, [r3, #0]
 8006e82:	4b07      	ldr	r3, [pc, #28]	; (8006ea0 <shci_send+0x74>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	789b      	ldrb	r3, [r3, #2]
 8006e88:	3303      	adds	r3, #3
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	f001 fd4e 	bl	800892c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8006e90:	2001      	movs	r0, #1
 8006e92:	f000 f83b 	bl	8006f0c <Cmd_SetStatus>

  return;
 8006e96:	bf00      	nop
}
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	2000016c 	.word	0x2000016c
 8006ea4:	20000344 	.word	0x20000344

08006ea8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8006eb0:	4a10      	ldr	r2, [pc, #64]	; (8006ef4 <TlInit+0x4c>)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8006eb6:	4810      	ldr	r0, [pc, #64]	; (8006ef8 <TlInit+0x50>)
 8006eb8:	f000 faf2 	bl	80074a0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8006ebc:	2001      	movs	r0, #1
 8006ebe:	f000 f825 	bl	8006f0c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006ec2:	4b0e      	ldr	r3, [pc, #56]	; (8006efc <TlInit+0x54>)
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8006ec8:	4b0d      	ldr	r3, [pc, #52]	; (8006f00 <TlInit+0x58>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00c      	beq.n	8006eea <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8006ed4:	4b0b      	ldr	r3, [pc, #44]	; (8006f04 <TlInit+0x5c>)
 8006ed6:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8006ed8:	4b0b      	ldr	r3, [pc, #44]	; (8006f08 <TlInit+0x60>)
 8006eda:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8006edc:	4b08      	ldr	r3, [pc, #32]	; (8006f00 <TlInit+0x58>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f107 020c 	add.w	r2, r7, #12
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	4798      	blx	r3
  }

  return;
 8006ee8:	bf00      	nop
 8006eea:	bf00      	nop
}
 8006eec:	3718      	adds	r7, #24
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	2000016c 	.word	0x2000016c
 8006ef8:	20000160 	.word	0x20000160
 8006efc:	20000170 	.word	0x20000170
 8006f00:	20000344 	.word	0x20000344
 8006f04:	08006f5d 	.word	0x08006f5d
 8006f08:	08006f75 	.word	0x08006f75

08006f0c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	4603      	mov	r3, r0
 8006f14:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8006f16:	79fb      	ldrb	r3, [r7, #7]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10b      	bne.n	8006f34 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8006f1c:	4b0d      	ldr	r3, [pc, #52]	; (8006f54 <Cmd_SetStatus+0x48>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d003      	beq.n	8006f2c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8006f24:	4b0b      	ldr	r3, [pc, #44]	; (8006f54 <Cmd_SetStatus+0x48>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2000      	movs	r0, #0
 8006f2a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8006f2c:	4b0a      	ldr	r3, [pc, #40]	; (8006f58 <Cmd_SetStatus+0x4c>)
 8006f2e:	2200      	movs	r2, #0
 8006f30:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8006f32:	e00b      	b.n	8006f4c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8006f34:	4b08      	ldr	r3, [pc, #32]	; (8006f58 <Cmd_SetStatus+0x4c>)
 8006f36:	2201      	movs	r2, #1
 8006f38:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8006f3a:	4b06      	ldr	r3, [pc, #24]	; (8006f54 <Cmd_SetStatus+0x48>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d004      	beq.n	8006f4c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8006f42:	4b04      	ldr	r3, [pc, #16]	; (8006f54 <Cmd_SetStatus+0x48>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2001      	movs	r0, #1
 8006f48:	4798      	blx	r3
  return;
 8006f4a:	bf00      	nop
 8006f4c:	bf00      	nop
}
 8006f4e:	3708      	adds	r7, #8
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	20000364 	.word	0x20000364
 8006f58:	20000168 	.word	0x20000168

08006f5c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8006f64:	2000      	movs	r0, #0
 8006f66:	f7f9 fdf6 	bl	8000b56 <shci_cmd_resp_release>

  return;
 8006f6a:	bf00      	nop
}
 8006f6c:	3708      	adds	r7, #8
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
	...

08006f74 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8006f7c:	6879      	ldr	r1, [r7, #4]
 8006f7e:	4805      	ldr	r0, [pc, #20]	; (8006f94 <TlUserEvtReceived+0x20>)
 8006f80:	f000 fae6 	bl	8007550 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006f84:	4803      	ldr	r0, [pc, #12]	; (8006f94 <TlUserEvtReceived+0x20>)
 8006f86:	f7f9 fdda 	bl	8000b3e <shci_notify_asynch_evt>

  return;
 8006f8a:	bf00      	nop
}
 8006f8c:	3708      	adds	r7, #8
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	20000160 	.word	0x20000160

08006f98 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a05      	ldr	r2, [pc, #20]	; (8006fb8 <shci_register_io_bus+0x20>)
 8006fa4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a04      	ldr	r2, [pc, #16]	; (8006fbc <shci_register_io_bus+0x24>)
 8006faa:	611a      	str	r2, [r3, #16]

  return;
 8006fac:	bf00      	nop
}
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	08007155 	.word	0x08007155
 8006fbc:	080071a9 	.word	0x080071a9

08006fc0 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8006fc4:	f001 f946 	bl	8008254 <HW_IPCC_Enable>

  return;
 8006fc8:	bf00      	nop
}
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <TL_Init>:


void TL_Init( void )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8006fd0:	4b10      	ldr	r3, [pc, #64]	; (8007014 <TL_Init+0x48>)
 8006fd2:	4a11      	ldr	r2, [pc, #68]	; (8007018 <TL_Init+0x4c>)
 8006fd4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8006fd6:	4b0f      	ldr	r3, [pc, #60]	; (8007014 <TL_Init+0x48>)
 8006fd8:	4a10      	ldr	r2, [pc, #64]	; (800701c <TL_Init+0x50>)
 8006fda:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8006fdc:	4b0d      	ldr	r3, [pc, #52]	; (8007014 <TL_Init+0x48>)
 8006fde:	4a10      	ldr	r2, [pc, #64]	; (8007020 <TL_Init+0x54>)
 8006fe0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8006fe2:	4b0c      	ldr	r3, [pc, #48]	; (8007014 <TL_Init+0x48>)
 8006fe4:	4a0f      	ldr	r2, [pc, #60]	; (8007024 <TL_Init+0x58>)
 8006fe6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8006fe8:	4b0a      	ldr	r3, [pc, #40]	; (8007014 <TL_Init+0x48>)
 8006fea:	4a0f      	ldr	r2, [pc, #60]	; (8007028 <TL_Init+0x5c>)
 8006fec:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8006fee:	4b09      	ldr	r3, [pc, #36]	; (8007014 <TL_Init+0x48>)
 8006ff0:	4a0e      	ldr	r2, [pc, #56]	; (800702c <TL_Init+0x60>)
 8006ff2:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8006ff4:	4b07      	ldr	r3, [pc, #28]	; (8007014 <TL_Init+0x48>)
 8006ff6:	4a0e      	ldr	r2, [pc, #56]	; (8007030 <TL_Init+0x64>)
 8006ff8:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8006ffa:	4b06      	ldr	r3, [pc, #24]	; (8007014 <TL_Init+0x48>)
 8006ffc:	4a0d      	ldr	r2, [pc, #52]	; (8007034 <TL_Init+0x68>)
 8006ffe:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8007000:	4b04      	ldr	r3, [pc, #16]	; (8007014 <TL_Init+0x48>)
 8007002:	4a0d      	ldr	r2, [pc, #52]	; (8007038 <TL_Init+0x6c>)
 8007004:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8007006:	4b03      	ldr	r3, [pc, #12]	; (8007014 <TL_Init+0x48>)
 8007008:	4a0c      	ldr	r2, [pc, #48]	; (800703c <TL_Init+0x70>)
 800700a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800700c:	f001 f936 	bl	800827c <HW_IPCC_Init>

  return;
 8007010:	bf00      	nop
}
 8007012:	bd80      	pop	{r7, pc}
 8007014:	20030000 	.word	0x20030000
 8007018:	20030028 	.word	0x20030028
 800701c:	20030048 	.word	0x20030048
 8007020:	20030058 	.word	0x20030058
 8007024:	20030064 	.word	0x20030064
 8007028:	2003006c 	.word	0x2003006c
 800702c:	20030074 	.word	0x20030074
 8007030:	2003007c 	.word	0x2003007c
 8007034:	20030098 	.word	0x20030098
 8007038:	2003009c 	.word	0x2003009c
 800703c:	200300a8 	.word	0x200300a8

08007040 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800704c:	4811      	ldr	r0, [pc, #68]	; (8007094 <TL_BLE_Init+0x54>)
 800704e:	f000 fa27 	bl	80074a0 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8007052:	4b11      	ldr	r3, [pc, #68]	; (8007098 <TL_BLE_Init+0x58>)
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	4a0c      	ldr	r2, [pc, #48]	; (800709c <TL_BLE_Init+0x5c>)
 800706c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	4a08      	ldr	r2, [pc, #32]	; (8007094 <TL_BLE_Init+0x54>)
 8007072:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8007074:	f001 f918 	bl	80082a8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a08      	ldr	r2, [pc, #32]	; (80070a0 <TL_BLE_Init+0x60>)
 800707e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	4a07      	ldr	r2, [pc, #28]	; (80070a4 <TL_BLE_Init+0x64>)
 8007086:	6013      	str	r3, [r2, #0]

  return 0;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	200300c4 	.word	0x200300c4
 8007098:	20030000 	.word	0x20030000
 800709c:	20030a48 	.word	0x20030a48
 80070a0:	20000370 	.word	0x20000370
 80070a4:	20000374 	.word	0x20000374

080070a8 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	460b      	mov	r3, r1
 80070b2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80070b4:	4b09      	ldr	r3, [pc, #36]	; (80070dc <TL_BLE_SendCmd+0x34>)
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2201      	movs	r2, #1
 80070bc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80070be:	4b07      	ldr	r3, [pc, #28]	; (80070dc <TL_BLE_SendCmd+0x34>)
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4619      	mov	r1, r3
 80070c6:	2001      	movs	r0, #1
 80070c8:	f000 f96c 	bl	80073a4 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80070cc:	f001 f8f6 	bl	80082bc <HW_IPCC_BLE_SendCmd>

  return 0;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	20030000 	.word	0x20030000

080070e0 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80070e6:	e01c      	b.n	8007122 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80070e8:	1d3b      	adds	r3, r7, #4
 80070ea:	4619      	mov	r1, r3
 80070ec:	4812      	ldr	r0, [pc, #72]	; (8007138 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80070ee:	f000 fa76 	bl	80075de <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	7a5b      	ldrb	r3, [r3, #9]
 80070f6:	2b0f      	cmp	r3, #15
 80070f8:	d003      	beq.n	8007102 <HW_IPCC_BLE_RxEvtNot+0x22>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	7a5b      	ldrb	r3, [r3, #9]
 80070fe:	2b0e      	cmp	r3, #14
 8007100:	d105      	bne.n	800710e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4619      	mov	r1, r3
 8007106:	2002      	movs	r0, #2
 8007108:	f000 f94c 	bl	80073a4 <OutputDbgTrace>
 800710c:	e004      	b.n	8007118 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4619      	mov	r1, r3
 8007112:	2003      	movs	r0, #3
 8007114:	f000 f946 	bl	80073a4 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8007118:	4b08      	ldr	r3, [pc, #32]	; (800713c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	4610      	mov	r0, r2
 8007120:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8007122:	4805      	ldr	r0, [pc, #20]	; (8007138 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007124:	f000 f9cc 	bl	80074c0 <LST_is_empty>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d0dc      	beq.n	80070e8 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800712e:	bf00      	nop
}
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	200300c4 	.word	0x200300c4
 800713c:	20000370 	.word	0x20000370

08007140 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8007144:	4b02      	ldr	r3, [pc, #8]	; (8007150 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4798      	blx	r3

  return;
 800714a:	bf00      	nop
}
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	20000374 	.word	0x20000374

08007154 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8007160:	480d      	ldr	r0, [pc, #52]	; (8007198 <TL_SYS_Init+0x44>)
 8007162:	f000 f99d 	bl	80074a0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8007166:	4b0d      	ldr	r3, [pc, #52]	; (800719c <TL_SYS_Init+0x48>)
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	689a      	ldr	r2, [r3, #8]
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	4a08      	ldr	r2, [pc, #32]	; (8007198 <TL_SYS_Init+0x44>)
 8007178:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800717a:	f001 f8c1 	bl	8008300 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a07      	ldr	r2, [pc, #28]	; (80071a0 <TL_SYS_Init+0x4c>)
 8007184:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	4a06      	ldr	r2, [pc, #24]	; (80071a4 <TL_SYS_Init+0x50>)
 800718c:	6013      	str	r3, [r2, #0]

  return 0;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	200300cc 	.word	0x200300cc
 800719c:	20030000 	.word	0x20030000
 80071a0:	20000378 	.word	0x20000378
 80071a4:	2000037c 	.word	0x2000037c

080071a8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	460b      	mov	r3, r1
 80071b2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80071b4:	4b09      	ldr	r3, [pc, #36]	; (80071dc <TL_SYS_SendCmd+0x34>)
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2210      	movs	r2, #16
 80071bc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80071be:	4b07      	ldr	r3, [pc, #28]	; (80071dc <TL_SYS_SendCmd+0x34>)
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4619      	mov	r1, r3
 80071c6:	2004      	movs	r0, #4
 80071c8:	f000 f8ec 	bl	80073a4 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80071cc:	f001 f8a2 	bl	8008314 <HW_IPCC_SYS_SendCmd>

  return 0;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	20030000 	.word	0x20030000

080071e0 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80071e4:	4b07      	ldr	r3, [pc, #28]	; (8007204 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4619      	mov	r1, r3
 80071ec:	2005      	movs	r0, #5
 80071ee:	f000 f8d9 	bl	80073a4 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80071f2:	4b05      	ldr	r3, [pc, #20]	; (8007208 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a03      	ldr	r2, [pc, #12]	; (8007204 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80071f8:	68d2      	ldr	r2, [r2, #12]
 80071fa:	6812      	ldr	r2, [r2, #0]
 80071fc:	4610      	mov	r0, r2
 80071fe:	4798      	blx	r3

  return;
 8007200:	bf00      	nop
}
 8007202:	bd80      	pop	{r7, pc}
 8007204:	20030000 	.word	0x20030000
 8007208:	20000378 	.word	0x20000378

0800720c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007212:	e00e      	b.n	8007232 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8007214:	1d3b      	adds	r3, r7, #4
 8007216:	4619      	mov	r1, r3
 8007218:	480b      	ldr	r0, [pc, #44]	; (8007248 <HW_IPCC_SYS_EvtNot+0x3c>)
 800721a:	f000 f9e0 	bl	80075de <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4619      	mov	r1, r3
 8007222:	2006      	movs	r0, #6
 8007224:	f000 f8be 	bl	80073a4 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8007228:	4b08      	ldr	r3, [pc, #32]	; (800724c <HW_IPCC_SYS_EvtNot+0x40>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	4610      	mov	r0, r2
 8007230:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007232:	4805      	ldr	r0, [pc, #20]	; (8007248 <HW_IPCC_SYS_EvtNot+0x3c>)
 8007234:	f000 f944 	bl	80074c0 <LST_is_empty>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d0ea      	beq.n	8007214 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800723e:	bf00      	nop
}
 8007240:	3708      	adds	r7, #8
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	200300cc 	.word	0x200300cc
 800724c:	2000037c 	.word	0x2000037c

08007250 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8007258:	4817      	ldr	r0, [pc, #92]	; (80072b8 <TL_MM_Init+0x68>)
 800725a:	f000 f921 	bl	80074a0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800725e:	4817      	ldr	r0, [pc, #92]	; (80072bc <TL_MM_Init+0x6c>)
 8007260:	f000 f91e 	bl	80074a0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8007264:	4b16      	ldr	r3, [pc, #88]	; (80072c0 <TL_MM_Init+0x70>)
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	4a16      	ldr	r2, [pc, #88]	; (80072c4 <TL_MM_Init+0x74>)
 800726a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800726c:	4b15      	ldr	r3, [pc, #84]	; (80072c4 <TL_MM_Init+0x74>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	6892      	ldr	r2, [r2, #8]
 8007274:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8007276:	4b13      	ldr	r3, [pc, #76]	; (80072c4 <TL_MM_Init+0x74>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	68d2      	ldr	r2, [r2, #12]
 800727e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8007280:	4b10      	ldr	r3, [pc, #64]	; (80072c4 <TL_MM_Init+0x74>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a0c      	ldr	r2, [pc, #48]	; (80072b8 <TL_MM_Init+0x68>)
 8007286:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8007288:	4b0e      	ldr	r3, [pc, #56]	; (80072c4 <TL_MM_Init+0x74>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	6812      	ldr	r2, [r2, #0]
 8007290:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8007292:	4b0c      	ldr	r3, [pc, #48]	; (80072c4 <TL_MM_Init+0x74>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	6852      	ldr	r2, [r2, #4]
 800729a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800729c:	4b09      	ldr	r3, [pc, #36]	; (80072c4 <TL_MM_Init+0x74>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	6912      	ldr	r2, [r2, #16]
 80072a4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80072a6:	4b07      	ldr	r3, [pc, #28]	; (80072c4 <TL_MM_Init+0x74>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	6952      	ldr	r2, [r2, #20]
 80072ae:	619a      	str	r2, [r3, #24]

  return;
 80072b0:	bf00      	nop
}
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	200300b4 	.word	0x200300b4
 80072bc:	20000368 	.word	0x20000368
 80072c0:	20030000 	.word	0x20030000
 80072c4:	20000380 	.word	0x20000380

080072c8 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80072d0:	6879      	ldr	r1, [r7, #4]
 80072d2:	4807      	ldr	r0, [pc, #28]	; (80072f0 <TL_MM_EvtDone+0x28>)
 80072d4:	f000 f93c 	bl	8007550 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80072d8:	6879      	ldr	r1, [r7, #4]
 80072da:	2000      	movs	r0, #0
 80072dc:	f000 f862 	bl	80073a4 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80072e0:	4804      	ldr	r0, [pc, #16]	; (80072f4 <TL_MM_EvtDone+0x2c>)
 80072e2:	f001 f83d 	bl	8008360 <HW_IPCC_MM_SendFreeBuf>

  return;
 80072e6:	bf00      	nop
}
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	20000368 	.word	0x20000368
 80072f4:	080072f9 	.word	0x080072f9

080072f8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80072fe:	e00c      	b.n	800731a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8007300:	1d3b      	adds	r3, r7, #4
 8007302:	4619      	mov	r1, r3
 8007304:	480a      	ldr	r0, [pc, #40]	; (8007330 <SendFreeBuf+0x38>)
 8007306:	f000 f96a 	bl	80075de <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800730a:	4b0a      	ldr	r3, [pc, #40]	; (8007334 <SendFreeBuf+0x3c>)
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	4611      	mov	r1, r2
 8007314:	4618      	mov	r0, r3
 8007316:	f000 f91b 	bl	8007550 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800731a:	4805      	ldr	r0, [pc, #20]	; (8007330 <SendFreeBuf+0x38>)
 800731c:	f000 f8d0 	bl	80074c0 <LST_is_empty>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d0ec      	beq.n	8007300 <SendFreeBuf+0x8>
  }

  return;
 8007326:	bf00      	nop
}
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	20000368 	.word	0x20000368
 8007334:	20030000 	.word	0x20030000

08007338 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800733c:	4805      	ldr	r0, [pc, #20]	; (8007354 <TL_TRACES_Init+0x1c>)
 800733e:	f000 f8af 	bl	80074a0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8007342:	4b05      	ldr	r3, [pc, #20]	; (8007358 <TL_TRACES_Init+0x20>)
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	4a03      	ldr	r2, [pc, #12]	; (8007354 <TL_TRACES_Init+0x1c>)
 8007348:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800734a:	f001 f83f 	bl	80083cc <HW_IPCC_TRACES_Init>

  return;
 800734e:	bf00      	nop
}
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	200300bc 	.word	0x200300bc
 8007358:	20030000 	.word	0x20030000

0800735c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007362:	e008      	b.n	8007376 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8007364:	1d3b      	adds	r3, r7, #4
 8007366:	4619      	mov	r1, r3
 8007368:	4808      	ldr	r0, [pc, #32]	; (800738c <HW_IPCC_TRACES_EvtNot+0x30>)
 800736a:	f000 f938 	bl	80075de <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4618      	mov	r0, r3
 8007372:	f000 f80d 	bl	8007390 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007376:	4805      	ldr	r0, [pc, #20]	; (800738c <HW_IPCC_TRACES_EvtNot+0x30>)
 8007378:	f000 f8a2 	bl	80074c0 <LST_is_empty>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d0f0      	beq.n	8007364 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8007382:	bf00      	nop
}
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	200300bc 	.word	0x200300bc

08007390 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	4603      	mov	r3, r0
 80073ac:	6039      	str	r1, [r7, #0]
 80073ae:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80073b0:	79fb      	ldrb	r3, [r7, #7]
 80073b2:	2b06      	cmp	r3, #6
 80073b4:	d845      	bhi.n	8007442 <OutputDbgTrace+0x9e>
 80073b6:	a201      	add	r2, pc, #4	; (adr r2, 80073bc <OutputDbgTrace+0x18>)
 80073b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073bc:	080073d9 	.word	0x080073d9
 80073c0:	080073fd 	.word	0x080073fd
 80073c4:	08007403 	.word	0x08007403
 80073c8:	08007417 	.word	0x08007417
 80073cc:	08007423 	.word	0x08007423
 80073d0:	08007429 	.word	0x08007429
 80073d4:	08007437 	.word	0x08007437
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	7a5b      	ldrb	r3, [r3, #9]
 80073e0:	2bff      	cmp	r3, #255	; 0xff
 80073e2:	d005      	beq.n	80073f0 <OutputDbgTrace+0x4c>
 80073e4:	2bff      	cmp	r3, #255	; 0xff
 80073e6:	dc05      	bgt.n	80073f4 <OutputDbgTrace+0x50>
 80073e8:	2b0e      	cmp	r3, #14
 80073ea:	d005      	beq.n	80073f8 <OutputDbgTrace+0x54>
 80073ec:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80073ee:	e001      	b.n	80073f4 <OutputDbgTrace+0x50>
          break;
 80073f0:	bf00      	nop
 80073f2:	e027      	b.n	8007444 <OutputDbgTrace+0xa0>
          break;
 80073f4:	bf00      	nop
 80073f6:	e025      	b.n	8007444 <OutputDbgTrace+0xa0>
          break;
 80073f8:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80073fa:	e023      	b.n	8007444 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007400:	e020      	b.n	8007444 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	7a5b      	ldrb	r3, [r3, #9]
 800740a:	2b0e      	cmp	r3, #14
 800740c:	d001      	beq.n	8007412 <OutputDbgTrace+0x6e>
 800740e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007410:	e000      	b.n	8007414 <OutputDbgTrace+0x70>
          break;
 8007412:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007414:	e016      	b.n	8007444 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	7a5b      	ldrb	r3, [r3, #9]
 800741e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007420:	e010      	b.n	8007444 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007426:	e00d      	b.n	8007444 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	7a5b      	ldrb	r3, [r3, #9]
 8007430:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007432:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007434:	e006      	b.n	8007444 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	7a5b      	ldrb	r3, [r3, #9]
 800743e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007440:	e000      	b.n	8007444 <OutputDbgTrace+0xa0>

    default:
      break;
 8007442:	bf00      	nop
  }

  return;
 8007444:	bf00      	nop
}
 8007446:	3714      	adds	r7, #20
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	4603      	mov	r3, r0
 8007458:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800745a:	4b0f      	ldr	r3, [pc, #60]	; (8007498 <OTP_Read+0x48>)
 800745c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800745e:	e002      	b.n	8007466 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	3b08      	subs	r3, #8
 8007464:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	3307      	adds	r3, #7
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	79fa      	ldrb	r2, [r7, #7]
 800746e:	429a      	cmp	r2, r3
 8007470:	d003      	beq.n	800747a <OTP_Read+0x2a>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	4a09      	ldr	r2, [pc, #36]	; (800749c <OTP_Read+0x4c>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d1f2      	bne.n	8007460 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	3307      	adds	r3, #7
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	79fa      	ldrb	r2, [r7, #7]
 8007482:	429a      	cmp	r2, r3
 8007484:	d001      	beq.n	800748a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8007486:	2300      	movs	r3, #0
 8007488:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800748a:	68fb      	ldr	r3, [r7, #12]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3714      	adds	r7, #20
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr
 8007498:	1fff73f8 	.word	0x1fff73f8
 800749c:	1fff7000 	.word	0x1fff7000

080074a0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	605a      	str	r2, [r3, #4]
}
 80074b4:	bf00      	nop
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b087      	sub	sp, #28
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074c8:	f3ef 8310 	mrs	r3, PRIMASK
 80074cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80074ce:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80074d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80074d2:	b672      	cpsid	i
}
 80074d4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d102      	bne.n	80074e6 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80074e0:	2301      	movs	r3, #1
 80074e2:	75fb      	strb	r3, [r7, #23]
 80074e4:	e001      	b.n	80074ea <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80074e6:	2300      	movs	r3, #0
 80074e8:	75fb      	strb	r3, [r7, #23]
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	f383 8810 	msr	PRIMASK, r3
}
 80074f4:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80074f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	371c      	adds	r7, #28
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8007504:	b480      	push	{r7}
 8007506:	b087      	sub	sp, #28
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800750e:	f3ef 8310 	mrs	r3, PRIMASK
 8007512:	60fb      	str	r3, [r7, #12]
  return(result);
 8007514:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007516:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007518:	b672      	cpsid	i
}
 800751a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	683a      	ldr	r2, [r7, #0]
 800752e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	683a      	ldr	r2, [r7, #0]
 8007536:	605a      	str	r2, [r3, #4]
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	f383 8810 	msr	PRIMASK, r3
}
 8007542:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007544:	bf00      	nop
 8007546:	371c      	adds	r7, #28
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8007550:	b480      	push	{r7}
 8007552:	b087      	sub	sp, #28
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800755a:	f3ef 8310 	mrs	r3, PRIMASK
 800755e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007560:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007562:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007564:	b672      	cpsid	i
}
 8007566:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685a      	ldr	r2, [r3, #4]
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	683a      	ldr	r2, [r7, #0]
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	f383 8810 	msr	PRIMASK, r3
}
 800758e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007590:	bf00      	nop
 8007592:	371c      	adds	r7, #28
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800759c:	b480      	push	{r7}
 800759e:	b087      	sub	sp, #28
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075a4:	f3ef 8310 	mrs	r3, PRIMASK
 80075a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80075aa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80075ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80075ae:	b672      	cpsid	i
}
 80075b0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	6812      	ldr	r2, [r2, #0]
 80075ba:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	6852      	ldr	r2, [r2, #4]
 80075c4:	605a      	str	r2, [r3, #4]
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	f383 8810 	msr	PRIMASK, r3
}
 80075d0:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80075d2:	bf00      	nop
 80075d4:	371c      	adds	r7, #28
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b086      	sub	sp, #24
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075e8:	f3ef 8310 	mrs	r3, PRIMASK
 80075ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80075ee:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80075f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80075f2:	b672      	cpsid	i
}
 80075f4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4618      	mov	r0, r3
 8007604:	f7ff ffca 	bl	800759c <LST_remove_node>
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	f383 8810 	msr	PRIMASK, r3
}
 8007612:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007614:	bf00      	nop
 8007616:	3718      	adds	r7, #24
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800761c:	b480      	push	{r7}
 800761e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8007620:	4b03      	ldr	r3, [pc, #12]	; (8007630 <LL_FLASH_GetUDN+0x14>)
 8007622:	681b      	ldr	r3, [r3, #0]
}
 8007624:	4618      	mov	r0, r3
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	1fff7580 	.word	0x1fff7580

08007634 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8007634:	b480      	push	{r7}
 8007636:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8007638:	4b03      	ldr	r3, [pc, #12]	; (8007648 <LL_FLASH_GetDeviceID+0x14>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	b2db      	uxtb	r3, r3
}
 800763e:	4618      	mov	r0, r3
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	1fff7584 	.word	0x1fff7584

0800764c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800764c:	b480      	push	{r7}
 800764e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8007650:	4b03      	ldr	r3, [pc, #12]	; (8007660 <LL_FLASH_GetSTCompanyID+0x14>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	0a1b      	lsrs	r3, r3, #8
}
 8007656:	4618      	mov	r0, r3
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr
 8007660:	1fff7584 	.word	0x1fff7584

08007664 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8007664:	b5b0      	push	{r4, r5, r7, lr}
 8007666:	b08e      	sub	sp, #56	; 0x38
 8007668:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

	UTIL_SEQ_RegTask(1 << CFG_TASK_MY_TASK, UTIL_SEQ_RFU, myTask);
 800766a:	4a25      	ldr	r2, [pc, #148]	; (8007700 <APP_BLE_Init+0x9c>)
 800766c:	2100      	movs	r1, #0
 800766e:	2004      	movs	r0, #4
 8007670:	f000 ffee 	bl	8008650 <UTIL_SEQ_RegTask>
	UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 8007674:	2100      	movs	r1, #0
 8007676:	2004      	movs	r0, #4
 8007678:	f001 f80c 	bl	8008694 <UTIL_SEQ_SetTask>

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800767c:	4b21      	ldr	r3, [pc, #132]	; (8007704 <APP_BLE_Init+0xa0>)
 800767e:	1d3c      	adds	r4, r7, #4
 8007680:	461d      	mov	r5, r3
 8007682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800768a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800768c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800768e:	682b      	ldr	r3, [r5, #0]
 8007690:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8007692:	f000 f8ff 	bl	8007894 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8007696:	2101      	movs	r1, #1
 8007698:	2002      	movs	r0, #2
 800769a:	f000 febf 	bl	800841c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800769e:	4a1a      	ldr	r2, [pc, #104]	; (8007708 <APP_BLE_Init+0xa4>)
 80076a0:	2100      	movs	r1, #0
 80076a2:	2002      	movs	r0, #2
 80076a4:	f000 ffd4 	bl	8008650 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 80076a8:	1d3b      	adds	r3, r7, #4
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7ff f8cc 	bl	8006848 <SHCI_C2_BLE_Init>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <APP_BLE_Init+0x56>
  {
    Error_Handler();
 80076b6:	f7fa fa91 	bl	8001bdc <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80076ba:	f000 f901 	bl	80078c0 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80076be:	f7ff f81d 	bl	80066fc <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80076c2:	4b12      	ldr	r3, [pc, #72]	; (800770c <APP_BLE_Init+0xa8>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80076ca:	4b10      	ldr	r3, [pc, #64]	; (800770c <APP_BLE_Init+0xa8>)
 80076cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80076d0:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80076d2:	4a0f      	ldr	r2, [pc, #60]	; (8007710 <APP_BLE_Init+0xac>)
 80076d4:	2100      	movs	r1, #0
 80076d6:	2001      	movs	r0, #1
 80076d8:	f000 ffba 	bl	8008650 <UTIL_SEQ_RegTask>
  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 80076dc:	2006      	movs	r0, #6
 80076de:	f7fe fe80 	bl	80063e2 <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 80076e2:	f000 facd 	bl	8007c80 <Custom_APP_Init>
/* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80076e6:	4b09      	ldr	r3, [pc, #36]	; (800770c <APP_BLE_Init+0xa8>)
 80076e8:	2200      	movs	r2, #0
 80076ea:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80076ec:	4b07      	ldr	r3, [pc, #28]	; (800770c <APP_BLE_Init+0xa8>)
 80076ee:	2200      	movs	r2, #0
 80076f0:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 80076f2:	2001      	movs	r0, #1
 80076f4:	f000 f97e 	bl	80079f4 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 80076f8:	bf00      	nop
}
 80076fa:	3738      	adds	r7, #56	; 0x38
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bdb0      	pop	{r4, r5, r7, pc}
 8007700:	08007bc5 	.word	0x08007bc5
 8007704:	0800928c 	.word	0x0800928c
 8007708:	08006a65 	.word	0x08006a65
 800770c:	20000174 	.word	0x20000174
 8007710:	08007add 	.word	0x08007add

08007714 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b08a      	sub	sp, #40	; 0x28
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	3301      	adds	r3, #1
 8007720:	627b      	str	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8007722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	2bff      	cmp	r3, #255	; 0xff
 8007728:	d053      	beq.n	80077d2 <SVCCTL_App_Notification+0xbe>
 800772a:	2bff      	cmp	r3, #255	; 0xff
 800772c:	f300 80a3 	bgt.w	8007876 <SVCCTL_App_Notification+0x162>
 8007730:	2b05      	cmp	r3, #5
 8007732:	d002      	beq.n	800773a <SVCCTL_App_Notification+0x26>
 8007734:	2b3e      	cmp	r3, #62	; 0x3e
 8007736:	d020      	beq.n	800777a <SVCCTL_App_Notification+0x66>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8007738:	e09d      	b.n	8007876 <SVCCTL_App_Notification+0x162>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800773a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773c:	3302      	adds	r3, #2
 800773e:	60bb      	str	r3, [r7, #8]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007746:	b29a      	uxth	r2, r3
 8007748:	4b4f      	ldr	r3, [pc, #316]	; (8007888 <SVCCTL_App_Notification+0x174>)
 800774a:	8adb      	ldrh	r3, [r3, #22]
 800774c:	429a      	cmp	r2, r3
 800774e:	d106      	bne.n	800775e <SVCCTL_App_Notification+0x4a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8007750:	4b4d      	ldr	r3, [pc, #308]	; (8007888 <SVCCTL_App_Notification+0x174>)
 8007752:	2200      	movs	r2, #0
 8007754:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007756:	4b4c      	ldr	r3, [pc, #304]	; (8007888 <SVCCTL_App_Notification+0x174>)
 8007758:	2200      	movs	r2, #0
 800775a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800775e:	2001      	movs	r0, #1
 8007760:	f000 f948 	bl	80079f4 <Adv_Request>
      handleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8007764:	4b49      	ldr	r3, [pc, #292]	; (800788c <SVCCTL_App_Notification+0x178>)
 8007766:	2201      	movs	r2, #1
 8007768:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800776a:	4b47      	ldr	r3, [pc, #284]	; (8007888 <SVCCTL_App_Notification+0x174>)
 800776c:	8ada      	ldrh	r2, [r3, #22]
 800776e:	4b47      	ldr	r3, [pc, #284]	; (800788c <SVCCTL_App_Notification+0x178>)
 8007770:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&handleNotification);
 8007772:	4846      	ldr	r0, [pc, #280]	; (800788c <SVCCTL_App_Notification+0x178>)
 8007774:	f000 fa70 	bl	8007c58 <Custom_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8007778:	e080      	b.n	800787c <SVCCTL_App_Notification+0x168>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800777a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777c:	3302      	adds	r3, #2
 800777e:	613b      	str	r3, [r7, #16]
      switch (meta_evt->subevent)
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d001      	beq.n	800778c <SVCCTL_App_Notification+0x78>
 8007788:	2b03      	cmp	r3, #3
          break;
 800778a:	e021      	b.n	80077d0 <SVCCTL_App_Notification+0xbc>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	3301      	adds	r3, #1
 8007790:	60fb      	str	r3, [r7, #12]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8007792:	4b3d      	ldr	r3, [pc, #244]	; (8007888 <SVCCTL_App_Notification+0x174>)
 8007794:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007798:	2b04      	cmp	r3, #4
 800779a:	d104      	bne.n	80077a6 <SVCCTL_App_Notification+0x92>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800779c:	4b3a      	ldr	r3, [pc, #232]	; (8007888 <SVCCTL_App_Notification+0x174>)
 800779e:	2206      	movs	r2, #6
 80077a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80077a4:	e003      	b.n	80077ae <SVCCTL_App_Notification+0x9a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80077a6:	4b38      	ldr	r3, [pc, #224]	; (8007888 <SVCCTL_App_Notification+0x174>)
 80077a8:	2205      	movs	r2, #5
 80077aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	4b34      	ldr	r3, [pc, #208]	; (8007888 <SVCCTL_App_Notification+0x174>)
 80077b8:	82da      	strh	r2, [r3, #22]
          handleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 80077ba:	4b34      	ldr	r3, [pc, #208]	; (800788c <SVCCTL_App_Notification+0x178>)
 80077bc:	2200      	movs	r2, #0
 80077be:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80077c0:	4b31      	ldr	r3, [pc, #196]	; (8007888 <SVCCTL_App_Notification+0x174>)
 80077c2:	8ada      	ldrh	r2, [r3, #22]
 80077c4:	4b31      	ldr	r3, [pc, #196]	; (800788c <SVCCTL_App_Notification+0x178>)
 80077c6:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&handleNotification);
 80077c8:	4830      	ldr	r0, [pc, #192]	; (800788c <SVCCTL_App_Notification+0x178>)
 80077ca:	f000 fa45 	bl	8007c58 <Custom_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80077ce:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 80077d0:	e054      	b.n	800787c <SVCCTL_App_Notification+0x168>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80077d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d4:	3302      	adds	r3, #2
 80077d6:	623b      	str	r3, [r7, #32]
      switch (blecore_evt->ecode)
 80077d8:	6a3b      	ldr	r3, [r7, #32]
 80077da:	881b      	ldrh	r3, [r3, #0]
 80077dc:	b29b      	uxth	r3, r3
 80077de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077e2:	d042      	beq.n	800786a <SVCCTL_App_Notification+0x156>
 80077e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077e8:	dc47      	bgt.n	800787a <SVCCTL_App_Notification+0x166>
 80077ea:	2b04      	cmp	r3, #4
 80077ec:	d03f      	beq.n	800786e <SVCCTL_App_Notification+0x15a>
 80077ee:	2b04      	cmp	r3, #4
 80077f0:	db43      	blt.n	800787a <SVCCTL_App_Notification+0x166>
 80077f2:	f240 420a 	movw	r2, #1034	; 0x40a
 80077f6:	4293      	cmp	r3, r2
 80077f8:	dc3f      	bgt.n	800787a <SVCCTL_App_Notification+0x166>
 80077fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077fe:	dd3c      	ble.n	800787a <SVCCTL_App_Notification+0x166>
 8007800:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8007804:	2b09      	cmp	r3, #9
 8007806:	d838      	bhi.n	800787a <SVCCTL_App_Notification+0x166>
 8007808:	a201      	add	r2, pc, #4	; (adr r2, 8007810 <SVCCTL_App_Notification+0xfc>)
 800780a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780e:	bf00      	nop
 8007810:	08007863 	.word	0x08007863
 8007814:	08007839 	.word	0x08007839
 8007818:	0800787b 	.word	0x0800787b
 800781c:	0800787b 	.word	0x0800787b
 8007820:	0800787b 	.word	0x0800787b
 8007824:	0800787b 	.word	0x0800787b
 8007828:	08007873 	.word	0x08007873
 800782c:	0800787b 	.word	0x0800787b
 8007830:	08007847 	.word	0x08007847
 8007834:	08007873 	.word	0x08007873
            aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8007838:	4b13      	ldr	r3, [pc, #76]	; (8007888 <SVCCTL_App_Notification+0x174>)
 800783a:	8adb      	ldrh	r3, [r3, #22]
 800783c:	4914      	ldr	r1, [pc, #80]	; (8007890 <SVCCTL_App_Notification+0x17c>)
 800783e:	4618      	mov	r0, r3
 8007840:	f7fe f826 	bl	8005890 <aci_gap_pass_key_resp>
        break;
 8007844:	e016      	b.n	8007874 <SVCCTL_App_Notification+0x160>
            evt_numeric_value = (aci_gap_numeric_comparison_value_event_rp0 *)blecore_evt->data;
 8007846:	6a3b      	ldr	r3, [r7, #32]
 8007848:	3302      	adds	r3, #2
 800784a:	61fb      	str	r3, [r7, #28]
            numeric_value = evt_numeric_value->Numeric_Value;
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8007852:	61bb      	str	r3, [r7, #24]
            aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8007854:	4b0c      	ldr	r3, [pc, #48]	; (8007888 <SVCCTL_App_Notification+0x174>)
 8007856:	8adb      	ldrh	r3, [r3, #22]
 8007858:	2101      	movs	r1, #1
 800785a:	4618      	mov	r0, r3
 800785c:	f7fe f9c2 	bl	8005be4 <aci_gap_numeric_comparison_value_confirm_yesno>
        break;
 8007860:	e008      	b.n	8007874 <SVCCTL_App_Notification+0x160>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	3302      	adds	r3, #2
 8007866:	617b      	str	r3, [r7, #20]
        break;
 8007868:	e004      	b.n	8007874 <SVCCTL_App_Notification+0x160>
      break;
 800786a:	bf00      	nop
 800786c:	e005      	b.n	800787a <SVCCTL_App_Notification+0x166>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800786e:	bf00      	nop
 8007870:	e003      	b.n	800787a <SVCCTL_App_Notification+0x166>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8007872:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007874:	e001      	b.n	800787a <SVCCTL_App_Notification+0x166>
      break;
 8007876:	bf00      	nop
 8007878:	e000      	b.n	800787c <SVCCTL_App_Notification+0x168>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800787a:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800787c:	2301      	movs	r3, #1
}
 800787e:	4618      	mov	r0, r3
 8007880:	3728      	adds	r7, #40	; 0x28
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	20000174 	.word	0x20000174
 800788c:	2000038c 	.word	0x2000038c
 8007890:	0001b207 	.word	0x0001b207

08007894 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800789a:	4b06      	ldr	r3, [pc, #24]	; (80078b4 <Ble_Tl_Init+0x20>)
 800789c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800789e:	4b06      	ldr	r3, [pc, #24]	; (80078b8 <Ble_Tl_Init+0x24>)
 80078a0:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80078a2:	463b      	mov	r3, r7
 80078a4:	4619      	mov	r1, r3
 80078a6:	4805      	ldr	r0, [pc, #20]	; (80078bc <Ble_Tl_Init+0x28>)
 80078a8:	f7ff f8c0 	bl	8006a2c <hci_init>

  return;
 80078ac:	bf00      	nop
}
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	200300d4 	.word	0x200300d4
 80078b8:	08007b8d 	.word	0x08007b8d
 80078bc:	08007b55 	.word	0x08007b55

080078c0 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 80078c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078c2:	b08d      	sub	sp, #52	; 0x34
 80078c4:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 80078c6:	2300      	movs	r3, #0
 80078c8:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 80078ca:	f7fe fdde 	bl	800648a <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 80078ce:	f000 f8c1 	bl	8007a54 <BleGetBdAddress>
 80078d2:	6178      	str	r0, [r7, #20]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80078d4:	697a      	ldr	r2, [r7, #20]
 80078d6:	2106      	movs	r1, #6
 80078d8:	2000      	movs	r0, #0
 80078da:	f7fe fc96 	bl	800620a <aci_hal_write_config_data>
#endif

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 80078de:	4a40      	ldr	r2, [pc, #256]	; (80079e0 <Ble_Hci_Gap_Gatt_Init+0x120>)
 80078e0:	2110      	movs	r1, #16
 80078e2:	2018      	movs	r0, #24
 80078e4:	f7fe fc91 	bl	800620a <aci_hal_write_config_data>

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 80078e8:	4a3e      	ldr	r2, [pc, #248]	; (80079e4 <Ble_Hci_Gap_Gatt_Init+0x124>)
 80078ea:	2110      	movs	r1, #16
 80078ec:	2008      	movs	r0, #8
 80078ee:	f7fe fc8c 	bl	800620a <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80078f2:	2118      	movs	r1, #24
 80078f4:	2001      	movs	r0, #1
 80078f6:	f7fe fd0d 	bl	8006314 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 80078fa:	f7fe f9da 	bl	8005cb2 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 80078fe:	2300      	movs	r3, #0
 8007900:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8007902:	7cfb      	ldrb	r3, [r7, #19]
 8007904:	f043 0301 	orr.w	r3, r3, #1
 8007908:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800790a:	7cfb      	ldrb	r3, [r7, #19]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d01d      	beq.n	800794c <Ble_Hci_Gap_Gatt_Init+0x8c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8007910:	4b35      	ldr	r3, [pc, #212]	; (80079e8 <Ble_Hci_Gap_Gatt_Init+0x128>)
 8007912:	60fb      	str	r3, [r7, #12]
    aci_gap_init(role,
 8007914:	f107 020a 	add.w	r2, r7, #10
 8007918:	7cf8      	ldrb	r0, [r7, #19]
 800791a:	1dbb      	adds	r3, r7, #6
 800791c:	9301      	str	r3, [sp, #4]
 800791e:	f107 0308 	add.w	r3, r7, #8
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	4613      	mov	r3, r2
 8007926:	2208      	movs	r2, #8
 8007928:	2100      	movs	r1, #0
 800792a:	f7fe f818 	bl	800595e <aci_gap_init>
                 CFG_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle,
                 &gap_dev_name_char_handle,
                 &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800792e:	897c      	ldrh	r4, [r7, #10]
 8007930:	893d      	ldrh	r5, [r7, #8]
 8007932:	68f8      	ldr	r0, [r7, #12]
 8007934:	f7f8 fc24 	bl	8000180 <strlen>
 8007938:	4603      	mov	r3, r0
 800793a:	b2da      	uxtb	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	4613      	mov	r3, r2
 8007942:	2200      	movs	r2, #0
 8007944:	4629      	mov	r1, r5
 8007946:	4620      	mov	r0, r4
 8007948:	f7fe fbb6 	bl	80060b8 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800794c:	8978      	ldrh	r0, [r7, #10]
 800794e:	88f9      	ldrh	r1, [r7, #6]
 8007950:	1d3b      	adds	r3, r7, #4
 8007952:	9300      	str	r3, [sp, #0]
 8007954:	2302      	movs	r3, #2
 8007956:	2200      	movs	r2, #0
 8007958:	f7fe fbae 	bl	80060b8 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800795c:	2202      	movs	r2, #2
 800795e:	2102      	movs	r1, #2
 8007960:	2000      	movs	r0, #0
 8007962:	f7fe fdb6 	bl	80064d2 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8007966:	4b21      	ldr	r3, [pc, #132]	; (80079ec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8007968:	2201      	movs	r2, #1
 800796a:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800796c:	4b1f      	ldr	r3, [pc, #124]	; (80079ec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	4618      	mov	r0, r3
 8007972:	f7fd fe75 	bl	8005660 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8007976:	4b1d      	ldr	r3, [pc, #116]	; (80079ec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8007978:	2201      	movs	r2, #1
 800797a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800797c:	4b1b      	ldr	r3, [pc, #108]	; (80079ec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800797e:	2208      	movs	r2, #8
 8007980:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8007982:	4b1a      	ldr	r3, [pc, #104]	; (80079ec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8007984:	2210      	movs	r2, #16
 8007986:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8007988:	4b18      	ldr	r3, [pc, #96]	; (80079ec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800798a:	2200      	movs	r2, #0
 800798c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800798e:	4b17      	ldr	r3, [pc, #92]	; (80079ec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8007990:	4a17      	ldr	r2, [pc, #92]	; (80079f0 <Ble_Hci_Gap_Gatt_Init+0x130>)
 8007992:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8007994:	4b15      	ldr	r3, [pc, #84]	; (80079ec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8007996:	2200      	movs	r2, #0
 8007998:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800799a:	4b14      	ldr	r3, [pc, #80]	; (80079ec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800799c:	789c      	ldrb	r4, [r3, #2]
 800799e:	4b13      	ldr	r3, [pc, #76]	; (80079ec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 80079a0:	785d      	ldrb	r5, [r3, #1]
 80079a2:	4b12      	ldr	r3, [pc, #72]	; (80079ec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 80079a4:	791b      	ldrb	r3, [r3, #4]
 80079a6:	4a11      	ldr	r2, [pc, #68]	; (80079ec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 80079a8:	7952      	ldrb	r2, [r2, #5]
 80079aa:	4910      	ldr	r1, [pc, #64]	; (80079ec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 80079ac:	78c9      	ldrb	r1, [r1, #3]
 80079ae:	480f      	ldr	r0, [pc, #60]	; (80079ec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 80079b0:	6880      	ldr	r0, [r0, #8]
 80079b2:	2600      	movs	r6, #0
 80079b4:	9604      	str	r6, [sp, #16]
 80079b6:	9003      	str	r0, [sp, #12]
 80079b8:	9102      	str	r1, [sp, #8]
 80079ba:	9201      	str	r2, [sp, #4]
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	2300      	movs	r3, #0
 80079c0:	2201      	movs	r2, #1
 80079c2:	4629      	mov	r1, r5
 80079c4:	4620      	mov	r0, r4
 80079c6:	f7fd fe9f 	bl	8005708 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80079ca:	4b08      	ldr	r3, [pc, #32]	; (80079ec <Ble_Hci_Gap_Gatt_Init+0x12c>)
 80079cc:	789b      	ldrb	r3, [r3, #2]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d001      	beq.n	80079d6 <Ble_Hci_Gap_Gatt_Init+0x116>
   {
     aci_gap_configure_whitelist();
 80079d2:	f7fe f8e3 	bl	8005b9c <aci_gap_configure_whitelist>
   }
}
 80079d6:	bf00      	nop
 80079d8:	371c      	adds	r7, #28
 80079da:	46bd      	mov	sp, r7
 80079dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079de:	bf00      	nop
 80079e0:	080094f4 	.word	0x080094f4
 80079e4:	08009504 	.word	0x08009504
 80079e8:	080092c0 	.word	0x080092c0
 80079ec:	20000174 	.word	0x20000174
 80079f0:	0001b207 	.word	0x0001b207

080079f4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b08c      	sub	sp, #48	; 0x30
 80079f8:	af08      	add	r7, sp, #32
 80079fa:	4603      	mov	r3, r0
 80079fc:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80079fe:	2392      	movs	r3, #146	; 0x92
 8007a00:	73fb      	strb	r3, [r7, #15]

    BleApplicationContext.Device_Connection_Status = New_Status;
 8007a02:	4a12      	ldr	r2, [pc, #72]	; (8007a4c <Adv_Request+0x58>)
 8007a04:	79fb      	ldrb	r3, [r7, #7]
 8007a06:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	9306      	str	r3, [sp, #24]
 8007a0e:	2300      	movs	r3, #0
 8007a10:	9305      	str	r3, [sp, #20]
 8007a12:	2300      	movs	r3, #0
 8007a14:	9304      	str	r3, [sp, #16]
 8007a16:	2300      	movs	r3, #0
 8007a18:	9303      	str	r3, [sp, #12]
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	9302      	str	r3, [sp, #8]
 8007a1e:	2300      	movs	r3, #0
 8007a20:	9301      	str	r3, [sp, #4]
 8007a22:	2300      	movs	r3, #0
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	2300      	movs	r3, #0
 8007a28:	22a0      	movs	r2, #160	; 0xa0
 8007a2a:	2180      	movs	r1, #128	; 0x80
 8007a2c:	2000      	movs	r0, #0
 8007a2e:	f7fd fd1d 	bl	800546c <aci_gap_set_discoverable>
 8007a32:	4603      	mov	r3, r0
 8007a34:	73fb      	strb	r3, [r7, #15]
        0,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(ad_data), (uint8_t*) ad_data);
 8007a36:	4906      	ldr	r1, [pc, #24]	; (8007a50 <Adv_Request+0x5c>)
 8007a38:	2008      	movs	r0, #8
 8007a3a:	f7fe f83d 	bl	8005ab8 <aci_gap_update_adv_data>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	73fb      	strb	r3, [r7, #15]
    else
    {
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
    }

  return;
 8007a42:	bf00      	nop
}
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	20000174 	.word	0x20000174
 8007a50:	20000010 	.word	0x20000010

08007a54 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8007a5a:	f7ff fddf 	bl	800761c <LL_FLASH_GetUDN>
 8007a5e:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a66:	d023      	beq.n	8007ab0 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8007a68:	f7ff fdf0 	bl	800764c <LL_FLASH_GetSTCompanyID>
 8007a6c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8007a6e:	f7ff fde1 	bl	8007634 <LL_FLASH_GetDeviceID>
 8007a72:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	4b16      	ldr	r3, [pc, #88]	; (8007ad4 <BleGetBdAddress+0x80>)
 8007a7a:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	0a1b      	lsrs	r3, r3, #8
 8007a80:	b2da      	uxtb	r2, r3
 8007a82:	4b14      	ldr	r3, [pc, #80]	; (8007ad4 <BleGetBdAddress+0x80>)
 8007a84:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	b2da      	uxtb	r2, r3
 8007a8a:	4b12      	ldr	r3, [pc, #72]	; (8007ad4 <BleGetBdAddress+0x80>)
 8007a8c:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	b2da      	uxtb	r2, r3
 8007a92:	4b10      	ldr	r3, [pc, #64]	; (8007ad4 <BleGetBdAddress+0x80>)
 8007a94:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	0a1b      	lsrs	r3, r3, #8
 8007a9a:	b2da      	uxtb	r2, r3
 8007a9c:	4b0d      	ldr	r3, [pc, #52]	; (8007ad4 <BleGetBdAddress+0x80>)
 8007a9e:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	0c1b      	lsrs	r3, r3, #16
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	4b0b      	ldr	r3, [pc, #44]	; (8007ad4 <BleGetBdAddress+0x80>)
 8007aa8:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8007aaa:	4b0a      	ldr	r3, [pc, #40]	; (8007ad4 <BleGetBdAddress+0x80>)
 8007aac:	617b      	str	r3, [r7, #20]
 8007aae:	e00b      	b.n	8007ac8 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	f7ff fccd 	bl	8007450 <OTP_Read>
 8007ab6:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d002      	beq.n	8007ac4 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	617b      	str	r3, [r7, #20]
 8007ac2:	e001      	b.n	8007ac8 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8007ac4:	4b04      	ldr	r3, [pc, #16]	; (8007ad8 <BleGetBdAddress+0x84>)
 8007ac6:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 8007ac8:	697b      	ldr	r3, [r7, #20]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3718      	adds	r7, #24
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	20000384 	.word	0x20000384
 8007ad8:	080094ec 	.word	0x080094ec

08007adc <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8007ae2:	4b0a      	ldr	r3, [pc, #40]	; (8007b0c <Adv_Cancel+0x30>)
 8007ae4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ae8:	2b05      	cmp	r3, #5
 8007aea:	d00a      	beq.n	8007b02 <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 8007aec:	2300      	movs	r3, #0
 8007aee:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 8007af0:	f7fd fc98 	bl	8005424 <aci_gap_set_non_discoverable>
 8007af4:	4603      	mov	r3, r0
 8007af6:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007af8:	4b04      	ldr	r3, [pc, #16]	; (8007b0c <Adv_Cancel+0x30>)
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 8007b00:	bf00      	nop
 8007b02:	bf00      	nop
}
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	20000174 	.word	0x20000174

08007b10 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8007b18:	2100      	movs	r1, #0
 8007b1a:	2002      	movs	r0, #2
 8007b1c:	f000 fdba 	bl	8008694 <UTIL_SEQ_SetTask>
  return;
 8007b20:	bf00      	nop
}
 8007b22:	3708      	adds	r7, #8
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007b30:	2001      	movs	r0, #1
 8007b32:	f000 fe1b 	bl	800876c <UTIL_SEQ_SetEvt>
  return;
 8007b36:	bf00      	nop
}
 8007b38:	3708      	adds	r7, #8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b082      	sub	sp, #8
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007b46:	2001      	movs	r0, #1
 8007b48:	f000 fe30 	bl	80087ac <UTIL_SEQ_WaitEvt>
  return;
 8007b4c:	bf00      	nop
}
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	3308      	adds	r3, #8
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fe fe1a 	bl	80067a0 <SVCCTL_UserEvtRx>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8007b70:	7afb      	ldrb	r3, [r7, #11]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d003      	beq.n	8007b7e <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8007b7c:	e003      	b.n	8007b86 <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	701a      	strb	r2, [r3, #0]
  return;
 8007b84:	bf00      	nop
}
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	4603      	mov	r3, r0
 8007b94:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8007b96:	79fb      	ldrb	r3, [r7, #7]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d002      	beq.n	8007ba2 <BLE_StatusNot+0x16>
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d006      	beq.n	8007bae <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8007ba0:	e00b      	b.n	8007bba <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007ba2:	2307      	movs	r3, #7
 8007ba4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f000 fda0 	bl	80086ec <UTIL_SEQ_PauseTask>
      break;
 8007bac:	e005      	b.n	8007bba <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007bae:	2307      	movs	r3, #7
 8007bb0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 fdba 	bl	800872c <UTIL_SEQ_ResumeTask>
      break;
 8007bb8:	bf00      	nop
  }
  return;
 8007bba:	bf00      	nop
}
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
	...

08007bc4 <myTask>:
static void Custom_Mycharnotify_Update_Char(void);
static void Custom_Mycharnotify_Send_Notification(void);

/* USER CODE BEGIN PFP */
	void myTask(void)
	{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	af00      	add	r7, sp, #0

		sprintf(NOTIFY_MSG, "Button Pressed!\r\n");
 8007bc8:	4911      	ldr	r1, [pc, #68]	; (8007c10 <myTask+0x4c>)
 8007bca:	4812      	ldr	r0, [pc, #72]	; (8007c14 <myTask+0x50>)
 8007bcc:	f000 fec4 	bl	8008958 <siprintf>

		//Read the Button State
		if(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8007bd0:	2110      	movs	r1, #16
 8007bd2:	4811      	ldr	r0, [pc, #68]	; (8007c18 <myTask+0x54>)
 8007bd4:	f7fa fdbc 	bl	8002750 <HAL_GPIO_ReadPin>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d111      	bne.n	8007c02 <myTask+0x3e>
		{

			UART_Transmit((uint8_t*)NOTIFY_MSG, strlen(NOTIFY_MSG));
 8007bde:	480d      	ldr	r0, [pc, #52]	; (8007c14 <myTask+0x50>)
 8007be0:	f7f8 face 	bl	8000180 <strlen>
 8007be4:	4603      	mov	r3, r0
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	4619      	mov	r1, r3
 8007bea:	480a      	ldr	r0, [pc, #40]	; (8007c14 <myTask+0x50>)
 8007bec:	f7f9 ffda 	bl	8001ba4 <UART_Transmit>

			UpdateCharData[0] ^= 0x1;
 8007bf0:	4b0a      	ldr	r3, [pc, #40]	; (8007c1c <myTask+0x58>)
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	f083 0301 	eor.w	r3, r3, #1
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	4b08      	ldr	r3, [pc, #32]	; (8007c1c <myTask+0x58>)
 8007bfc:	701a      	strb	r2, [r3, #0]
			Custom_Mycharnotify_Update_Char();		//Depends on Characteristic long name from CubeMX
 8007bfe:	f000 f847 	bl	8007c90 <Custom_Mycharnotify_Update_Char>
		}
		UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 8007c02:	2100      	movs	r1, #0
 8007c04:	2004      	movs	r0, #4
 8007c06:	f000 fd45 	bl	8008694 <UTIL_SEQ_SetTask>
	}
 8007c0a:	bf00      	nop
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	080092cc 	.word	0x080092cc
 8007c14:	20000390 	.word	0x20000390
 8007c18:	48000800 	.word	0x48000800
 8007c1c:	200003b4 	.word	0x200003b4

08007c20 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch(pNotification->Custom_Evt_Opcode)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d006      	beq.n	8007c3e <Custom_STM_App_Notification+0x1e>
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	dc06      	bgt.n	8007c42 <Custom_STM_App_Notification+0x22>
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d006      	beq.n	8007c46 <Custom_STM_App_Notification+0x26>
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d006      	beq.n	8007c4a <Custom_STM_App_Notification+0x2a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8007c3c:	e001      	b.n	8007c42 <Custom_STM_App_Notification+0x22>
      break;
 8007c3e:	bf00      	nop
 8007c40:	e004      	b.n	8007c4c <Custom_STM_App_Notification+0x2c>
      break;
 8007c42:	bf00      	nop
 8007c44:	e002      	b.n	8007c4c <Custom_STM_App_Notification+0x2c>
      break;
 8007c46:	bf00      	nop
 8007c48:	e000      	b.n	8007c4c <Custom_STM_App_Notification+0x2c>
      break;
 8007c4a:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8007c4c:	bf00      	nop
}
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch(pNotification->Custom_Evt_Opcode)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d002      	beq.n	8007c6e <Custom_APP_Notification+0x16>
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d002      	beq.n	8007c72 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8007c6c:	e002      	b.n	8007c74 <Custom_APP_Notification+0x1c>
      break;
 8007c6e:	bf00      	nop
 8007c70:	e000      	b.n	8007c74 <Custom_APP_Notification+0x1c>
      break;
 8007c72:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8007c74:	bf00      	nop
}
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8007c80:	b480      	push	{r7}
 8007c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8007c84:	bf00      	nop
}
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
	...

08007c90 <Custom_Mycharnotify_Update_Char>:
 *
 *************************************************************/

  /* LED_SVC */
void Custom_Mycharnotify_Update_Char(void) /* Property Read */
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	af00      	add	r7, sp, #0
  Custom_STM_App_Update_Char(CUSTOM_STM_MYCHARNOTIFY, (uint8_t *)UpdateCharData);
 8007c94:	4902      	ldr	r1, [pc, #8]	; (8007ca0 <Custom_Mycharnotify_Update_Char+0x10>)
 8007c96:	2001      	movs	r0, #1
 8007c98:	f000 f92e 	bl	8007ef8 <Custom_STM_App_Update_Char>
  /* USER CODE BEGIN Mycharnotify_UC*/

  /* USER CODE END Mycharnotify_UC*/
  return;
 8007c9c:	bf00      	nop
}
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	200003b4 	.word	0x200003b4

08007ca4 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b08c      	sub	sp, #48	; 0x30
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8007cac:	2300      	movs	r3, #0
 8007cae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	62bb      	str	r3, [r7, #40]	; 0x28

  switch(event_pckt->evt)
 8007cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	2bff      	cmp	r3, #255	; 0xff
 8007cbe:	d169      	bne.n	8007d94 <Custom_STM_Event_Handler+0xf0>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8007cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc2:	3302      	adds	r3, #2
 8007cc4:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blecore_evt->ecode)
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc8:	881b      	ldrh	r3, [r3, #0]
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	f640 4214 	movw	r2, #3092	; 0xc14
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d059      	beq.n	8007d88 <Custom_STM_Event_Handler+0xe4>
 8007cd4:	f640 4214 	movw	r2, #3092	; 0xc14
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	dc57      	bgt.n	8007d8c <Custom_STM_Event_Handler+0xe8>
 8007cdc:	f640 4201 	movw	r2, #3073	; 0xc01
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d003      	beq.n	8007cec <Custom_STM_Event_Handler+0x48>
 8007ce4:	f640 4213 	movw	r2, #3091	; 0xc13
 8007ce8:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8007cea:	e052      	b.n	8007d92 <Custom_STM_Event_Handler+0xee>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8007cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cee:	3302      	adds	r3, #2
 8007cf0:	623b      	str	r3, [r7, #32]
          if(attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8007cf2:	6a3b      	ldr	r3, [r7, #32]
 8007cf4:	885b      	ldrh	r3, [r3, #2]
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	4b2a      	ldr	r3, [pc, #168]	; (8007da4 <Custom_STM_Event_Handler+0x100>)
 8007cfc:	889b      	ldrh	r3, [r3, #4]
 8007cfe:	3302      	adds	r3, #2
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d119      	bne.n	8007d38 <Custom_STM_Event_Handler+0x94>
            return_value = SVCCTL_EvtAckFlowEnable;
 8007d04:	2301      	movs	r3, #1
 8007d06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch(attribute_modified->Attr_Data[0])
 8007d0a:	6a3b      	ldr	r3, [r7, #32]
 8007d0c:	7a1b      	ldrb	r3, [r3, #8]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d002      	beq.n	8007d18 <Custom_STM_Event_Handler+0x74>
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d008      	beq.n	8007d28 <Custom_STM_Event_Handler+0x84>
              break;
 8007d16:	e036      	b.n	8007d86 <Custom_STM_Event_Handler+0xe2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT;
 8007d18:	2302      	movs	r3, #2
 8007d1a:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8007d1c:	f107 030c 	add.w	r3, r7, #12
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7ff ff7d 	bl	8007c20 <Custom_STM_App_Notification>
                break;
 8007d26:	e02e      	b.n	8007d86 <Custom_STM_Event_Handler+0xe2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8007d2c:	f107 030c 	add.w	r3, r7, #12
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7ff ff75 	bl	8007c20 <Custom_STM_App_Notification>
                break;
 8007d36:	e026      	b.n	8007d86 <Custom_STM_Event_Handler+0xe2>
          else if(attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8007d38:	6a3b      	ldr	r3, [r7, #32]
 8007d3a:	885b      	ldrh	r3, [r3, #2]
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	461a      	mov	r2, r3
 8007d40:	4b18      	ldr	r3, [pc, #96]	; (8007da4 <Custom_STM_Event_Handler+0x100>)
 8007d42:	885b      	ldrh	r3, [r3, #2]
 8007d44:	3301      	adds	r3, #1
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d122      	bne.n	8007d90 <Custom_STM_Event_Handler+0xec>
            return_value = SVCCTL_EvtAckFlowEnable;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            uint8_t x = attribute_modified->Attr_Data[0];
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	7a1b      	ldrb	r3, [r3, #8]
 8007d54:	77fb      	strb	r3, [r7, #31]
            sprintf(BLE_MSG, "Write Value: %x\r\n", x);
 8007d56:	7ffb      	ldrb	r3, [r7, #31]
 8007d58:	461a      	mov	r2, r3
 8007d5a:	4913      	ldr	r1, [pc, #76]	; (8007da8 <Custom_STM_Event_Handler+0x104>)
 8007d5c:	4813      	ldr	r0, [pc, #76]	; (8007dac <Custom_STM_Event_Handler+0x108>)
 8007d5e:	f000 fdfb 	bl	8008958 <siprintf>
            UART_Transmit((uint8_t*)BLE_MSG, strlen(BLE_MSG));
 8007d62:	4812      	ldr	r0, [pc, #72]	; (8007dac <Custom_STM_Event_Handler+0x108>)
 8007d64:	f7f8 fa0c 	bl	8000180 <strlen>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	480f      	ldr	r0, [pc, #60]	; (8007dac <Custom_STM_Event_Handler+0x108>)
 8007d70:	f7f9 ff18 	bl	8001ba4 <UART_Transmit>
			if (attribute_modified->Attr_Data[0] == 0x22)
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	7a1b      	ldrb	r3, [r3, #8]
 8007d78:	2b22      	cmp	r3, #34	; 0x22
 8007d7a:	d109      	bne.n	8007d90 <Custom_STM_Event_Handler+0xec>
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8007d7c:	2101      	movs	r1, #1
 8007d7e:	480c      	ldr	r0, [pc, #48]	; (8007db0 <Custom_STM_Event_Handler+0x10c>)
 8007d80:	f7fa fd16 	bl	80027b0 <HAL_GPIO_TogglePin>
          break;
 8007d84:	e004      	b.n	8007d90 <Custom_STM_Event_Handler+0xec>
 8007d86:	e003      	b.n	8007d90 <Custom_STM_Event_Handler+0xec>
          break;
 8007d88:	bf00      	nop
 8007d8a:	e004      	b.n	8007d96 <Custom_STM_Event_Handler+0xf2>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8007d8c:	bf00      	nop
 8007d8e:	e002      	b.n	8007d96 <Custom_STM_Event_Handler+0xf2>
          break;
 8007d90:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007d92:	e000      	b.n	8007d96 <Custom_STM_Event_Handler+0xf2>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8007d94:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8007d96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}/* end Custom_STM_Event_Handler */
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3730      	adds	r7, #48	; 0x30
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	20000158 	.word	0x20000158
 8007da8:	080092e0 	.word	0x080092e0
 8007dac:	200004ac 	.word	0x200004ac
 8007db0:	48000400 	.word	0x48000400

08007db4 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b08a      	sub	sp, #40	; 0x28
 8007db8:	af06      	add	r7, sp, #24
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8007dba:	484b      	ldr	r0, [pc, #300]	; (8007ee8 <SVCCTL_InitCustomSvc+0x134>)
 8007dbc:	f7fe fcd6 	bl	800676c <SVCCTL_RegisterSvcHandler>
   *                                2 for myCharNotify +
   *                                1 for myCharNotify configuration descriptor +
   *                              = 6
   */

  COPY_LED_SVC_UUID(uuid.Char_UUID_128);
 8007dc0:	238f      	movs	r3, #143	; 0x8f
 8007dc2:	703b      	strb	r3, [r7, #0]
 8007dc4:	23e5      	movs	r3, #229	; 0xe5
 8007dc6:	707b      	strb	r3, [r7, #1]
 8007dc8:	23b3      	movs	r3, #179	; 0xb3
 8007dca:	70bb      	strb	r3, [r7, #2]
 8007dcc:	23d5      	movs	r3, #213	; 0xd5
 8007dce:	70fb      	strb	r3, [r7, #3]
 8007dd0:	232e      	movs	r3, #46	; 0x2e
 8007dd2:	713b      	strb	r3, [r7, #4]
 8007dd4:	237f      	movs	r3, #127	; 0x7f
 8007dd6:	717b      	strb	r3, [r7, #5]
 8007dd8:	234a      	movs	r3, #74	; 0x4a
 8007dda:	71bb      	strb	r3, [r7, #6]
 8007ddc:	2398      	movs	r3, #152	; 0x98
 8007dde:	71fb      	strb	r3, [r7, #7]
 8007de0:	232a      	movs	r3, #42	; 0x2a
 8007de2:	723b      	strb	r3, [r7, #8]
 8007de4:	2348      	movs	r3, #72	; 0x48
 8007de6:	727b      	strb	r3, [r7, #9]
 8007de8:	237a      	movs	r3, #122	; 0x7a
 8007dea:	72bb      	strb	r3, [r7, #10]
 8007dec:	23cc      	movs	r3, #204	; 0xcc
 8007dee:	72fb      	strb	r3, [r7, #11]
 8007df0:	2300      	movs	r3, #0
 8007df2:	733b      	strb	r3, [r7, #12]
 8007df4:	2300      	movs	r3, #0
 8007df6:	737b      	strb	r3, [r7, #13]
 8007df8:	2300      	movs	r3, #0
 8007dfa:	73bb      	strb	r3, [r7, #14]
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_service(UUID_TYPE_128,
 8007e00:	4639      	mov	r1, r7
 8007e02:	4b3a      	ldr	r3, [pc, #232]	; (8007eec <SVCCTL_InitCustomSvc+0x138>)
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	2306      	movs	r3, #6
 8007e08:	2201      	movs	r2, #1
 8007e0a:	2002      	movs	r0, #2
 8007e0c:	f7fd ff76 	bl	8005cfc <aci_gatt_add_service>
                       &(CustomContext.CustomLed_SvcHdle));

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 8007e10:	2319      	movs	r3, #25
 8007e12:	703b      	strb	r3, [r7, #0]
 8007e14:	23ed      	movs	r3, #237	; 0xed
 8007e16:	707b      	strb	r3, [r7, #1]
 8007e18:	2382      	movs	r3, #130	; 0x82
 8007e1a:	70bb      	strb	r3, [r7, #2]
 8007e1c:	23ae      	movs	r3, #174	; 0xae
 8007e1e:	70fb      	strb	r3, [r7, #3]
 8007e20:	23ed      	movs	r3, #237	; 0xed
 8007e22:	713b      	strb	r3, [r7, #4]
 8007e24:	2321      	movs	r3, #33	; 0x21
 8007e26:	717b      	strb	r3, [r7, #5]
 8007e28:	234c      	movs	r3, #76	; 0x4c
 8007e2a:	71bb      	strb	r3, [r7, #6]
 8007e2c:	239d      	movs	r3, #157	; 0x9d
 8007e2e:	71fb      	strb	r3, [r7, #7]
 8007e30:	2341      	movs	r3, #65	; 0x41
 8007e32:	723b      	strb	r3, [r7, #8]
 8007e34:	2345      	movs	r3, #69	; 0x45
 8007e36:	727b      	strb	r3, [r7, #9]
 8007e38:	2322      	movs	r3, #34	; 0x22
 8007e3a:	72bb      	strb	r3, [r7, #10]
 8007e3c:	238e      	movs	r3, #142	; 0x8e
 8007e3e:	72fb      	strb	r3, [r7, #11]
 8007e40:	2300      	movs	r3, #0
 8007e42:	733b      	strb	r3, [r7, #12]
 8007e44:	2300      	movs	r3, #0
 8007e46:	737b      	strb	r3, [r7, #13]
 8007e48:	2300      	movs	r3, #0
 8007e4a:	73bb      	strb	r3, [r7, #14]
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomLed_SvcHdle,
 8007e50:	4b26      	ldr	r3, [pc, #152]	; (8007eec <SVCCTL_InitCustomSvc+0x138>)
 8007e52:	8818      	ldrh	r0, [r3, #0]
 8007e54:	2301      	movs	r3, #1
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	463a      	mov	r2, r7
 8007e5a:	4925      	ldr	r1, [pc, #148]	; (8007ef0 <SVCCTL_InitCustomSvc+0x13c>)
 8007e5c:	9105      	str	r1, [sp, #20]
 8007e5e:	2100      	movs	r1, #0
 8007e60:	9104      	str	r1, [sp, #16]
 8007e62:	2110      	movs	r1, #16
 8007e64:	9103      	str	r1, [sp, #12]
 8007e66:	2101      	movs	r1, #1
 8007e68:	9102      	str	r1, [sp, #8]
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	9101      	str	r1, [sp, #4]
 8007e6e:	2108      	movs	r1, #8
 8007e70:	9100      	str	r1, [sp, #0]
 8007e72:	2102      	movs	r1, #2
 8007e74:	f7fe f818 	bl	8005ea8 <aci_gatt_add_char>
                    CHAR_VALUE_LEN_CONSTANT,
                    &(CustomContext.CustomMycharwriteHdle));
  /**
   *  myCharNotify
   */
  COPY_MYCHARNOTIFY_UUID(uuid.Char_UUID_128);
 8007e78:	2319      	movs	r3, #25
 8007e7a:	703b      	strb	r3, [r7, #0]
 8007e7c:	23ed      	movs	r3, #237	; 0xed
 8007e7e:	707b      	strb	r3, [r7, #1]
 8007e80:	2382      	movs	r3, #130	; 0x82
 8007e82:	70bb      	strb	r3, [r7, #2]
 8007e84:	23ae      	movs	r3, #174	; 0xae
 8007e86:	70fb      	strb	r3, [r7, #3]
 8007e88:	23ed      	movs	r3, #237	; 0xed
 8007e8a:	713b      	strb	r3, [r7, #4]
 8007e8c:	2321      	movs	r3, #33	; 0x21
 8007e8e:	717b      	strb	r3, [r7, #5]
 8007e90:	234c      	movs	r3, #76	; 0x4c
 8007e92:	71bb      	strb	r3, [r7, #6]
 8007e94:	239d      	movs	r3, #157	; 0x9d
 8007e96:	71fb      	strb	r3, [r7, #7]
 8007e98:	2341      	movs	r3, #65	; 0x41
 8007e9a:	723b      	strb	r3, [r7, #8]
 8007e9c:	2345      	movs	r3, #69	; 0x45
 8007e9e:	727b      	strb	r3, [r7, #9]
 8007ea0:	2322      	movs	r3, #34	; 0x22
 8007ea2:	72bb      	strb	r3, [r7, #10]
 8007ea4:	238e      	movs	r3, #142	; 0x8e
 8007ea6:	72fb      	strb	r3, [r7, #11]
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	733b      	strb	r3, [r7, #12]
 8007eac:	2300      	movs	r3, #0
 8007eae:	737b      	strb	r3, [r7, #13]
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	73bb      	strb	r3, [r7, #14]
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomLed_SvcHdle,
 8007eb8:	4b0c      	ldr	r3, [pc, #48]	; (8007eec <SVCCTL_InitCustomSvc+0x138>)
 8007eba:	8818      	ldrh	r0, [r3, #0]
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	463a      	mov	r2, r7
 8007ec2:	490c      	ldr	r1, [pc, #48]	; (8007ef4 <SVCCTL_InitCustomSvc+0x140>)
 8007ec4:	9105      	str	r1, [sp, #20]
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	9104      	str	r1, [sp, #16]
 8007eca:	2110      	movs	r1, #16
 8007ecc:	9103      	str	r1, [sp, #12]
 8007ece:	2107      	movs	r1, #7
 8007ed0:	9102      	str	r1, [sp, #8]
 8007ed2:	2100      	movs	r1, #0
 8007ed4:	9101      	str	r1, [sp, #4]
 8007ed6:	2110      	movs	r1, #16
 8007ed8:	9100      	str	r1, [sp, #0]
 8007eda:	2102      	movs	r1, #2
 8007edc:	f7fd ffe4 	bl	8005ea8 <aci_gatt_add_char>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8007ee0:	bf00      	nop
}
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	08007ca5 	.word	0x08007ca5
 8007eec:	20000158 	.word	0x20000158
 8007ef0:	2000015a 	.word	0x2000015a
 8007ef4:	2000015c 	.word	0x2000015c

08007ef8 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af02      	add	r7, sp, #8
 8007efe:	4603      	mov	r3, r0
 8007f00:	6039      	str	r1, [r7, #0]
 8007f02:	71fb      	strb	r3, [r7, #7]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8007f04:	2392      	movs	r3, #146	; 0x92
 8007f06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch(CharOpcode)
 8007f08:	79fb      	ldrb	r3, [r7, #7]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d002      	beq.n	8007f14 <Custom_STM_App_Update_Char+0x1c>
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d00e      	beq.n	8007f30 <Custom_STM_App_Update_Char+0x38>

      /* USER CODE END CUSTOM_STM_Service_1_Char_2*/
      break;

    default:
      break;
 8007f12:	e01b      	b.n	8007f4c <Custom_STM_App_Update_Char+0x54>
      result = aci_gatt_update_char_value(CustomContext.CustomLed_SvcHdle,
 8007f14:	4b10      	ldr	r3, [pc, #64]	; (8007f58 <Custom_STM_App_Update_Char+0x60>)
 8007f16:	8818      	ldrh	r0, [r3, #0]
 8007f18:	4b0f      	ldr	r3, [pc, #60]	; (8007f58 <Custom_STM_App_Update_Char+0x60>)
 8007f1a:	8859      	ldrh	r1, [r3, #2]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	9300      	str	r3, [sp, #0]
 8007f22:	4613      	mov	r3, r2
 8007f24:	2200      	movs	r2, #0
 8007f26:	f7fe f8c7 	bl	80060b8 <aci_gatt_update_char_value>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	73fb      	strb	r3, [r7, #15]
      break;
 8007f2e:	e00d      	b.n	8007f4c <Custom_STM_App_Update_Char+0x54>
      result = aci_gatt_update_char_value(CustomContext.CustomLed_SvcHdle,
 8007f30:	4b09      	ldr	r3, [pc, #36]	; (8007f58 <Custom_STM_App_Update_Char+0x60>)
 8007f32:	8818      	ldrh	r0, [r3, #0]
 8007f34:	4b08      	ldr	r3, [pc, #32]	; (8007f58 <Custom_STM_App_Update_Char+0x60>)
 8007f36:	8899      	ldrh	r1, [r3, #4]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	2200      	movs	r2, #0
 8007f42:	f7fe f8b9 	bl	80060b8 <aci_gatt_update_char_value>
 8007f46:	4603      	mov	r3, r0
 8007f48:	73fb      	strb	r3, [r7, #15]
      break;
 8007f4a:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return result;
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	20000158 	.word	0x20000158

08007f5c <LL_PWR_EnableBootC2>:
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8007f60:	4b05      	ldr	r3, [pc, #20]	; (8007f78 <LL_PWR_EnableBootC2+0x1c>)
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	4a04      	ldr	r2, [pc, #16]	; (8007f78 <LL_PWR_EnableBootC2+0x1c>)
 8007f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f6a:	60d3      	str	r3, [r2, #12]
}
 8007f6c:	bf00      	nop
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	58000400 	.word	0x58000400

08007f7c <LL_C2_EXTI_EnableEvent_32_63>:
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8007f84:	4b06      	ldr	r3, [pc, #24]	; (8007fa0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8007f86:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8007f8a:	4905      	ldr	r1, [pc, #20]	; (8007fa0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr
 8007fa0:	58000800 	.word	0x58000800

08007fa4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8007fac:	4b05      	ldr	r3, [pc, #20]	; (8007fc4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007fae:	6a1a      	ldr	r2, [r3, #32]
 8007fb0:	4904      	ldr	r1, [pc, #16]	; (8007fc4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	620b      	str	r3, [r1, #32]
}
 8007fb8:	bf00      	nop
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr
 8007fc4:	58000800 	.word	0x58000800

08007fc8 <LL_AHB3_GRP1_EnableClock>:
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8007fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007fd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8007fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fe4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4013      	ands	r3, r2
 8007fea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007fec:	68fb      	ldr	r3, [r7, #12]
}
 8007fee:	bf00      	nop
 8007ff0:	3714      	adds	r7, #20
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b085      	sub	sp, #20
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8008002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008006:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800800a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4313      	orrs	r3, r2
 8008012:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8008016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800801a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4013      	ands	r3, r2
 8008022:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008024:	68fb      	ldr	r3, [r7, #12]
}
 8008026:	bf00      	nop
 8008028:	3714      	adds	r7, #20
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <LL_C1_IPCC_EnableIT_TXF>:
{
 8008032:	b480      	push	{r7}
 8008034:	b083      	sub	sp, #12
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	601a      	str	r2, [r3, #0]
}
 8008046:	bf00      	nop
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr

08008052 <LL_C1_IPCC_EnableIT_RXO>:
{
 8008052:	b480      	push	{r7}
 8008054:	b083      	sub	sp, #12
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f043 0201 	orr.w	r2, r3, #1
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	601a      	str	r2, [r3, #0]
}
 8008066:	bf00      	nop
 8008068:	370c      	adds	r7, #12
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8008072:	b480      	push	{r7}
 8008074:	b083      	sub	sp, #12
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685a      	ldr	r2, [r3, #4]
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	041b      	lsls	r3, r3, #16
 8008084:	43db      	mvns	r3, r3
 8008086:	401a      	ands	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	605a      	str	r2, [r3, #4]
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	685a      	ldr	r2, [r3, #4]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	041b      	lsls	r3, r3, #16
 80080aa:	431a      	orrs	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	605a      	str	r2, [r3, #4]
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <LL_C1_IPCC_EnableReceiveChannel>:
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	685a      	ldr	r2, [r3, #4]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	43db      	mvns	r3, r3
 80080ce:	401a      	ands	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	605a      	str	r2, [r3, #4]
}
 80080d4:	bf00      	nop
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <LL_C1_IPCC_ClearFlag_CHx>:
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	683a      	ldr	r2, [r7, #0]
 80080ee:	609a      	str	r2, [r3, #8]
}
 80080f0:	bf00      	nop
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <LL_C1_IPCC_SetFlag_CHx>:
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	041a      	lsls	r2, r3, #16
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	609a      	str	r2, [r3, #8]
}
 800810e:	bf00      	nop
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800811a:	b480      	push	{r7}
 800811c:	b083      	sub	sp, #12
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
 8008122:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	68da      	ldr	r2, [r3, #12]
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	4013      	ands	r3, r2
 800812c:	683a      	ldr	r2, [r7, #0]
 800812e:	429a      	cmp	r2, r3
 8008130:	d101      	bne.n	8008136 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8008132:	2301      	movs	r3, #1
 8008134:	e000      	b.n	8008138 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	69da      	ldr	r2, [r3, #28]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	4013      	ands	r3, r2
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	429a      	cmp	r2, r3
 800815a:	d101      	bne.n	8008160 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800815c:	2301      	movs	r3, #1
 800815e:	e000      	b.n	8008162 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
	...

08008170 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8008174:	2102      	movs	r1, #2
 8008176:	4819      	ldr	r0, [pc, #100]	; (80081dc <HW_IPCC_Rx_Handler+0x6c>)
 8008178:	f7ff ffe4 	bl	8008144 <LL_C2_IPCC_IsActiveFlag_CHx>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d009      	beq.n	8008196 <HW_IPCC_Rx_Handler+0x26>
 8008182:	4b16      	ldr	r3, [pc, #88]	; (80081dc <HW_IPCC_Rx_Handler+0x6c>)
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	43db      	mvns	r3, r3
 8008188:	f003 0302 	and.w	r3, r3, #2
 800818c:	2b00      	cmp	r3, #0
 800818e:	d002      	beq.n	8008196 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8008190:	f000 f8da 	bl	8008348 <HW_IPCC_SYS_EvtHandler>
 8008194:	e01f      	b.n	80081d6 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8008196:	2101      	movs	r1, #1
 8008198:	4810      	ldr	r0, [pc, #64]	; (80081dc <HW_IPCC_Rx_Handler+0x6c>)
 800819a:	f7ff ffd3 	bl	8008144 <LL_C2_IPCC_IsActiveFlag_CHx>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d008      	beq.n	80081b6 <HW_IPCC_Rx_Handler+0x46>
 80081a4:	4b0d      	ldr	r3, [pc, #52]	; (80081dc <HW_IPCC_Rx_Handler+0x6c>)
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	f003 0301 	and.w	r3, r3, #1
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d102      	bne.n	80081b6 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 80081b0:	f000 f88e 	bl	80082d0 <HW_IPCC_BLE_EvtHandler>
 80081b4:	e00f      	b.n	80081d6 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80081b6:	2108      	movs	r1, #8
 80081b8:	4808      	ldr	r0, [pc, #32]	; (80081dc <HW_IPCC_Rx_Handler+0x6c>)
 80081ba:	f7ff ffc3 	bl	8008144 <LL_C2_IPCC_IsActiveFlag_CHx>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d009      	beq.n	80081d8 <HW_IPCC_Rx_Handler+0x68>
 80081c4:	4b05      	ldr	r3, [pc, #20]	; (80081dc <HW_IPCC_Rx_Handler+0x6c>)
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	43db      	mvns	r3, r3
 80081ca:	f003 0308 	and.w	r3, r3, #8
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d002      	beq.n	80081d8 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80081d2:	f000 f905 	bl	80083e0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80081d6:	bf00      	nop
 80081d8:	bf00      	nop
}
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	58000c00 	.word	0x58000c00

080081e0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80081e4:	2102      	movs	r1, #2
 80081e6:	481a      	ldr	r0, [pc, #104]	; (8008250 <HW_IPCC_Tx_Handler+0x70>)
 80081e8:	f7ff ff97 	bl	800811a <LL_C1_IPCC_IsActiveFlag_CHx>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d109      	bne.n	8008206 <HW_IPCC_Tx_Handler+0x26>
 80081f2:	4b17      	ldr	r3, [pc, #92]	; (8008250 <HW_IPCC_Tx_Handler+0x70>)
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	43db      	mvns	r3, r3
 80081f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d002      	beq.n	8008206 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8008200:	f000 f896 	bl	8008330 <HW_IPCC_SYS_CmdEvtHandler>
 8008204:	e020      	b.n	8008248 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8008206:	2108      	movs	r1, #8
 8008208:	4811      	ldr	r0, [pc, #68]	; (8008250 <HW_IPCC_Tx_Handler+0x70>)
 800820a:	f7ff ff86 	bl	800811a <LL_C1_IPCC_IsActiveFlag_CHx>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d109      	bne.n	8008228 <HW_IPCC_Tx_Handler+0x48>
 8008214:	4b0e      	ldr	r3, [pc, #56]	; (8008250 <HW_IPCC_Tx_Handler+0x70>)
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	43db      	mvns	r3, r3
 800821a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d002      	beq.n	8008228 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8008222:	f000 f8bf 	bl	80083a4 <HW_IPCC_MM_FreeBufHandler>
 8008226:	e00f      	b.n	8008248 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8008228:	2120      	movs	r1, #32
 800822a:	4809      	ldr	r0, [pc, #36]	; (8008250 <HW_IPCC_Tx_Handler+0x70>)
 800822c:	f7ff ff75 	bl	800811a <LL_C1_IPCC_IsActiveFlag_CHx>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d109      	bne.n	800824a <HW_IPCC_Tx_Handler+0x6a>
 8008236:	4b06      	ldr	r3, [pc, #24]	; (8008250 <HW_IPCC_Tx_Handler+0x70>)
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	43db      	mvns	r3, r3
 800823c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008240:	2b00      	cmp	r3, #0
 8008242:	d002      	beq.n	800824a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8008244:	f000 f850 	bl	80082e8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8008248:	bf00      	nop
 800824a:	bf00      	nop
}
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	58000c00 	.word	0x58000c00

08008254 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8008254:	b580      	push	{r7, lr}
 8008256:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8008258:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800825c:	f7ff fecd 	bl	8007ffa <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8008260:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008264:	f7ff fe8a 	bl	8007f7c <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8008268:	f44f 7000 	mov.w	r0, #512	; 0x200
 800826c:	f7ff fe9a 	bl	8007fa4 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8008270:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8008272:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8008274:	f7ff fe72 	bl	8007f5c <LL_PWR_EnableBootC2>

  return;
 8008278:	bf00      	nop
}
 800827a:	bd80      	pop	{r7, pc}

0800827c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8008280:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008284:	f7ff fea0 	bl	8007fc8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8008288:	4806      	ldr	r0, [pc, #24]	; (80082a4 <HW_IPCC_Init+0x28>)
 800828a:	f7ff fee2 	bl	8008052 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800828e:	4805      	ldr	r0, [pc, #20]	; (80082a4 <HW_IPCC_Init+0x28>)
 8008290:	f7ff fecf 	bl	8008032 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8008294:	202c      	movs	r0, #44	; 0x2c
 8008296:	f7fa f8a6 	bl	80023e6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800829a:	202d      	movs	r0, #45	; 0x2d
 800829c:	f7fa f8a3 	bl	80023e6 <HAL_NVIC_EnableIRQ>

  return;
 80082a0:	bf00      	nop
}
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	58000c00 	.word	0x58000c00

080082a8 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80082ac:	2101      	movs	r1, #1
 80082ae:	4802      	ldr	r0, [pc, #8]	; (80082b8 <HW_IPCC_BLE_Init+0x10>)
 80082b0:	f7ff ff04 	bl	80080bc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80082b4:	bf00      	nop
}
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	58000c00 	.word	0x58000c00

080082bc <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80082c0:	2101      	movs	r1, #1
 80082c2:	4802      	ldr	r0, [pc, #8]	; (80082cc <HW_IPCC_BLE_SendCmd+0x10>)
 80082c4:	f7ff ff1a 	bl	80080fc <LL_C1_IPCC_SetFlag_CHx>

  return;
 80082c8:	bf00      	nop
}
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	58000c00 	.word	0x58000c00

080082d0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80082d4:	f7fe ff04 	bl	80070e0 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80082d8:	2101      	movs	r1, #1
 80082da:	4802      	ldr	r0, [pc, #8]	; (80082e4 <HW_IPCC_BLE_EvtHandler+0x14>)
 80082dc:	f7ff ff00 	bl	80080e0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80082e0:	bf00      	nop
}
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	58000c00 	.word	0x58000c00

080082e8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80082ec:	2120      	movs	r1, #32
 80082ee:	4803      	ldr	r0, [pc, #12]	; (80082fc <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80082f0:	f7ff fed2 	bl	8008098 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80082f4:	f7fe ff24 	bl	8007140 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80082f8:	bf00      	nop
}
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	58000c00 	.word	0x58000c00

08008300 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008304:	2102      	movs	r1, #2
 8008306:	4802      	ldr	r0, [pc, #8]	; (8008310 <HW_IPCC_SYS_Init+0x10>)
 8008308:	f7ff fed8 	bl	80080bc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800830c:	bf00      	nop
}
 800830e:	bd80      	pop	{r7, pc}
 8008310:	58000c00 	.word	0x58000c00

08008314 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8008314:	b580      	push	{r7, lr}
 8008316:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008318:	2102      	movs	r1, #2
 800831a:	4804      	ldr	r0, [pc, #16]	; (800832c <HW_IPCC_SYS_SendCmd+0x18>)
 800831c:	f7ff feee 	bl	80080fc <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008320:	2102      	movs	r1, #2
 8008322:	4802      	ldr	r0, [pc, #8]	; (800832c <HW_IPCC_SYS_SendCmd+0x18>)
 8008324:	f7ff fea5 	bl	8008072 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8008328:	bf00      	nop
}
 800832a:	bd80      	pop	{r7, pc}
 800832c:	58000c00 	.word	0x58000c00

08008330 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8008330:	b580      	push	{r7, lr}
 8008332:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008334:	2102      	movs	r1, #2
 8008336:	4803      	ldr	r0, [pc, #12]	; (8008344 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8008338:	f7ff feae 	bl	8008098 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800833c:	f7fe ff50 	bl	80071e0 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8008340:	bf00      	nop
}
 8008342:	bd80      	pop	{r7, pc}
 8008344:	58000c00 	.word	0x58000c00

08008348 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800834c:	f7fe ff5e 	bl	800720c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008350:	2102      	movs	r1, #2
 8008352:	4802      	ldr	r0, [pc, #8]	; (800835c <HW_IPCC_SYS_EvtHandler+0x14>)
 8008354:	f7ff fec4 	bl	80080e0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008358:	bf00      	nop
}
 800835a:	bd80      	pop	{r7, pc}
 800835c:	58000c00 	.word	0x58000c00

08008360 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8008368:	2108      	movs	r1, #8
 800836a:	480c      	ldr	r0, [pc, #48]	; (800839c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800836c:	f7ff fed5 	bl	800811a <LL_C1_IPCC_IsActiveFlag_CHx>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d007      	beq.n	8008386 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8008376:	4a0a      	ldr	r2, [pc, #40]	; (80083a0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800837c:	2108      	movs	r1, #8
 800837e:	4807      	ldr	r0, [pc, #28]	; (800839c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008380:	f7ff fe77 	bl	8008072 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8008384:	e006      	b.n	8008394 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800838a:	2108      	movs	r1, #8
 800838c:	4803      	ldr	r0, [pc, #12]	; (800839c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800838e:	f7ff feb5 	bl	80080fc <LL_C1_IPCC_SetFlag_CHx>
  return;
 8008392:	bf00      	nop
}
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	58000c00 	.word	0x58000c00
 80083a0:	200004d0 	.word	0x200004d0

080083a4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80083a8:	2108      	movs	r1, #8
 80083aa:	4806      	ldr	r0, [pc, #24]	; (80083c4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80083ac:	f7ff fe74 	bl	8008098 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80083b0:	4b05      	ldr	r3, [pc, #20]	; (80083c8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80083b6:	2108      	movs	r1, #8
 80083b8:	4802      	ldr	r0, [pc, #8]	; (80083c4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80083ba:	f7ff fe9f 	bl	80080fc <LL_C1_IPCC_SetFlag_CHx>

  return;
 80083be:	bf00      	nop
}
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	58000c00 	.word	0x58000c00
 80083c8:	200004d0 	.word	0x200004d0

080083cc <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80083d0:	2108      	movs	r1, #8
 80083d2:	4802      	ldr	r0, [pc, #8]	; (80083dc <HW_IPCC_TRACES_Init+0x10>)
 80083d4:	f7ff fe72 	bl	80080bc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80083d8:	bf00      	nop
}
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	58000c00 	.word	0x58000c00

080083e0 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80083e4:	f7fe ffba 	bl	800735c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80083e8:	2108      	movs	r1, #8
 80083ea:	4802      	ldr	r0, [pc, #8]	; (80083f4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80083ec:	f7ff fe78 	bl	80080e0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80083f0:	bf00      	nop
}
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	58000c00 	.word	0x58000c00

080083f8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80083f8:	b480      	push	{r7}
 80083fa:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80083fc:	4b05      	ldr	r3, [pc, #20]	; (8008414 <UTIL_LPM_Init+0x1c>)
 80083fe:	2200      	movs	r2, #0
 8008400:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8008402:	4b05      	ldr	r3, [pc, #20]	; (8008418 <UTIL_LPM_Init+0x20>)
 8008404:	2200      	movs	r2, #0
 8008406:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8008408:	bf00      	nop
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	200004d4 	.word	0x200004d4
 8008418:	200004d8 	.word	0x200004d8

0800841c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800841c:	b480      	push	{r7}
 800841e:	b087      	sub	sp, #28
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	460b      	mov	r3, r1
 8008426:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008428:	f3ef 8310 	mrs	r3, PRIMASK
 800842c:	613b      	str	r3, [r7, #16]
  return(result);
 800842e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8008430:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008432:	b672      	cpsid	i
}
 8008434:	bf00      	nop
  
  switch(state)
 8008436:	78fb      	ldrb	r3, [r7, #3]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d008      	beq.n	800844e <UTIL_LPM_SetOffMode+0x32>
 800843c:	2b01      	cmp	r3, #1
 800843e:	d10e      	bne.n	800845e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8008440:	4b0d      	ldr	r3, [pc, #52]	; (8008478 <UTIL_LPM_SetOffMode+0x5c>)
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4313      	orrs	r3, r2
 8008448:	4a0b      	ldr	r2, [pc, #44]	; (8008478 <UTIL_LPM_SetOffMode+0x5c>)
 800844a:	6013      	str	r3, [r2, #0]
      break;
 800844c:	e008      	b.n	8008460 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	43da      	mvns	r2, r3
 8008452:	4b09      	ldr	r3, [pc, #36]	; (8008478 <UTIL_LPM_SetOffMode+0x5c>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4013      	ands	r3, r2
 8008458:	4a07      	ldr	r2, [pc, #28]	; (8008478 <UTIL_LPM_SetOffMode+0x5c>)
 800845a:	6013      	str	r3, [r2, #0]
      break;
 800845c:	e000      	b.n	8008460 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800845e:	bf00      	nop
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f383 8810 	msr	PRIMASK, r3
}
 800846a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800846c:	bf00      	nop
 800846e:	371c      	adds	r7, #28
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr
 8008478:	200004d8 	.word	0x200004d8

0800847c <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b08c      	sub	sp, #48	; 0x30
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8008484:	4b6a      	ldr	r3, [pc, #424]	; (8008630 <UTIL_SEQ_Run+0x1b4>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	627b      	str	r3, [r7, #36]	; 0x24
  SuperMask &= Mask_bm;
 800848a:	4b69      	ldr	r3, [pc, #420]	; (8008630 <UTIL_SEQ_Run+0x1b4>)
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4013      	ands	r3, r2
 8008492:	4a67      	ldr	r2, [pc, #412]	; (8008630 <UTIL_SEQ_Run+0x1b4>)
 8008494:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8008496:	4b67      	ldr	r3, [pc, #412]	; (8008634 <UTIL_SEQ_Run+0x1b8>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800849c:	e086      	b.n	80085ac <UTIL_SEQ_Run+0x130>
  {
    counter = 0U;
 800849e:	2300      	movs	r3, #0
 80084a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80084a2:	e002      	b.n	80084aa <UTIL_SEQ_Run+0x2e>
    {
      counter++;
 80084a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a6:	3301      	adds	r3, #1
 80084a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80084aa:	4a63      	ldr	r2, [pc, #396]	; (8008638 <UTIL_SEQ_Run+0x1bc>)
 80084ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ae:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80084b2:	4b62      	ldr	r3, [pc, #392]	; (800863c <UTIL_SEQ_Run+0x1c0>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	401a      	ands	r2, r3
 80084b8:	4b5d      	ldr	r3, [pc, #372]	; (8008630 <UTIL_SEQ_Run+0x1b4>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4013      	ands	r3, r2
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d0f0      	beq.n	80084a4 <UTIL_SEQ_Run+0x28>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 80084c2:	4a5d      	ldr	r2, [pc, #372]	; (8008638 <UTIL_SEQ_Run+0x1bc>)
 80084c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80084ca:	4b5c      	ldr	r3, [pc, #368]	; (800863c <UTIL_SEQ_Run+0x1c0>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	401a      	ands	r2, r3
 80084d0:	4b57      	ldr	r3, [pc, #348]	; (8008630 <UTIL_SEQ_Run+0x1b4>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4013      	ands	r3, r2
 80084d6:	623b      	str	r3, [r7, #32]
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80084d8:	4a57      	ldr	r2, [pc, #348]	; (8008638 <UTIL_SEQ_Run+0x1bc>)
 80084da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084dc:	00db      	lsls	r3, r3, #3
 80084de:	4413      	add	r3, r2
 80084e0:	685a      	ldr	r2, [r3, #4]
 80084e2:	6a3b      	ldr	r3, [r7, #32]
 80084e4:	4013      	ands	r3, r2
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d106      	bne.n	80084f8 <UTIL_SEQ_Run+0x7c>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80084ea:	4a53      	ldr	r2, [pc, #332]	; (8008638 <UTIL_SEQ_Run+0x1bc>)
 80084ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ee:	00db      	lsls	r3, r3, #3
 80084f0:	4413      	add	r3, r2
 80084f2:	f04f 32ff 	mov.w	r2, #4294967295
 80084f6:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80084f8:	4a4f      	ldr	r2, [pc, #316]	; (8008638 <UTIL_SEQ_Run+0x1bc>)
 80084fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fc:	00db      	lsls	r3, r3, #3
 80084fe:	4413      	add	r3, r2
 8008500:	685a      	ldr	r2, [r3, #4]
 8008502:	6a3b      	ldr	r3, [r7, #32]
 8008504:	4013      	ands	r3, r2
 8008506:	4618      	mov	r0, r3
 8008508:	f000 f9ac 	bl	8008864 <SEQ_BitPosition>
 800850c:	4603      	mov	r3, r0
 800850e:	461a      	mov	r2, r3
 8008510:	4b4b      	ldr	r3, [pc, #300]	; (8008640 <UTIL_SEQ_Run+0x1c4>)
 8008512:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8008514:	4a48      	ldr	r2, [pc, #288]	; (8008638 <UTIL_SEQ_Run+0x1bc>)
 8008516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008518:	00db      	lsls	r3, r3, #3
 800851a:	4413      	add	r3, r2
 800851c:	685a      	ldr	r2, [r3, #4]
 800851e:	4b48      	ldr	r3, [pc, #288]	; (8008640 <UTIL_SEQ_Run+0x1c4>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2101      	movs	r1, #1
 8008524:	fa01 f303 	lsl.w	r3, r1, r3
 8008528:	43db      	mvns	r3, r3
 800852a:	401a      	ands	r2, r3
 800852c:	4942      	ldr	r1, [pc, #264]	; (8008638 <UTIL_SEQ_Run+0x1bc>)
 800852e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008530:	00db      	lsls	r3, r3, #3
 8008532:	440b      	add	r3, r1
 8008534:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008536:	f3ef 8310 	mrs	r3, PRIMASK
 800853a:	617b      	str	r3, [r7, #20]
  return(result);
 800853c:	697b      	ldr	r3, [r7, #20]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800853e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008540:	b672      	cpsid	i
}
 8008542:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8008544:	4b3e      	ldr	r3, [pc, #248]	; (8008640 <UTIL_SEQ_Run+0x1c4>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2201      	movs	r2, #1
 800854a:	fa02 f303 	lsl.w	r3, r2, r3
 800854e:	43da      	mvns	r2, r3
 8008550:	4b38      	ldr	r3, [pc, #224]	; (8008634 <UTIL_SEQ_Run+0x1b8>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4013      	ands	r3, r2
 8008556:	4a37      	ldr	r2, [pc, #220]	; (8008634 <UTIL_SEQ_Run+0x1b8>)
 8008558:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800855a:	2302      	movs	r3, #2
 800855c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800855e:	e013      	b.n	8008588 <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8008560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008562:	3b01      	subs	r3, #1
 8008564:	4a34      	ldr	r2, [pc, #208]	; (8008638 <UTIL_SEQ_Run+0x1bc>)
 8008566:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800856a:	4b35      	ldr	r3, [pc, #212]	; (8008640 <UTIL_SEQ_Run+0x1c4>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2201      	movs	r2, #1
 8008570:	fa02 f303 	lsl.w	r3, r2, r3
 8008574:	43da      	mvns	r2, r3
 8008576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008578:	3b01      	subs	r3, #1
 800857a:	400a      	ands	r2, r1
 800857c:	492e      	ldr	r1, [pc, #184]	; (8008638 <UTIL_SEQ_Run+0x1bc>)
 800857e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008584:	3b01      	subs	r3, #1
 8008586:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1e8      	bne.n	8008560 <UTIL_SEQ_Run+0xe4>
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	f383 8810 	msr	PRIMASK, r3
}
 8008598:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800859a:	4b29      	ldr	r3, [pc, #164]	; (8008640 <UTIL_SEQ_Run+0x1c4>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a29      	ldr	r2, [pc, #164]	; (8008644 <UTIL_SEQ_Run+0x1c8>)
 80085a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085a4:	4798      	blx	r3
    
    local_taskset = TaskSet;
 80085a6:	4b23      	ldr	r3, [pc, #140]	; (8008634 <UTIL_SEQ_Run+0x1b8>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80085ac:	4b23      	ldr	r3, [pc, #140]	; (800863c <UTIL_SEQ_Run+0x1c0>)
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b2:	401a      	ands	r2, r3
 80085b4:	4b1e      	ldr	r3, [pc, #120]	; (8008630 <UTIL_SEQ_Run+0x1b4>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4013      	ands	r3, r2
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d007      	beq.n	80085ce <UTIL_SEQ_Run+0x152>
 80085be:	4b22      	ldr	r3, [pc, #136]	; (8008648 <UTIL_SEQ_Run+0x1cc>)
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	4b22      	ldr	r3, [pc, #136]	; (800864c <UTIL_SEQ_Run+0x1d0>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4013      	ands	r3, r2
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f43f af68 	beq.w	800849e <UTIL_SEQ_Run+0x22>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80085ce:	4b1c      	ldr	r3, [pc, #112]	; (8008640 <UTIL_SEQ_Run+0x1c4>)
 80085d0:	f04f 32ff 	mov.w	r2, #4294967295
 80085d4:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80085d6:	f000 f937 	bl	8008848 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085da:	f3ef 8310 	mrs	r3, PRIMASK
 80085de:	60fb      	str	r3, [r7, #12]
  return(result);
 80085e0:	68fb      	ldr	r3, [r7, #12]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80085e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 80085e4:	b672      	cpsid	i
}
 80085e6:	bf00      	nop
  local_taskset = TaskSet;
 80085e8:	4b12      	ldr	r3, [pc, #72]	; (8008634 <UTIL_SEQ_Run+0x1b8>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 80085ee:	4b13      	ldr	r3, [pc, #76]	; (800863c <UTIL_SEQ_Run+0x1c0>)
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f4:	401a      	ands	r2, r3
 80085f6:	4b0e      	ldr	r3, [pc, #56]	; (8008630 <UTIL_SEQ_Run+0x1b4>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4013      	ands	r3, r2
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d108      	bne.n	8008612 <UTIL_SEQ_Run+0x196>
 8008600:	4b11      	ldr	r3, [pc, #68]	; (8008648 <UTIL_SEQ_Run+0x1cc>)
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	4b11      	ldr	r3, [pc, #68]	; (800864c <UTIL_SEQ_Run+0x1d0>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4013      	ands	r3, r2
 800860a:	2b00      	cmp	r3, #0
 800860c:	d101      	bne.n	8008612 <UTIL_SEQ_Run+0x196>
  {
	UTIL_SEQ_Idle( );
 800860e:	f7f8 fa82 	bl	8000b16 <UTIL_SEQ_Idle>
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	f383 8810 	msr	PRIMASK, r3
}
 800861c:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800861e:	f000 f91a 	bl	8008856 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8008622:	4a03      	ldr	r2, [pc, #12]	; (8008630 <UTIL_SEQ_Run+0x1b4>)
 8008624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008626:	6013      	str	r3, [r2, #0]

  return;
 8008628:	bf00      	nop
}
 800862a:	3730      	adds	r7, #48	; 0x30
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	2000001c 	.word	0x2000001c
 8008634:	200004dc 	.word	0x200004dc
 8008638:	2000056c 	.word	0x2000056c
 800863c:	20000018 	.word	0x20000018
 8008640:	200004e8 	.word	0x200004e8
 8008644:	200004ec 	.word	0x200004ec
 8008648:	200004e0 	.word	0x200004e0
 800864c:	200004e4 	.word	0x200004e4

08008650 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b088      	sub	sp, #32
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800865c:	f3ef 8310 	mrs	r3, PRIMASK
 8008660:	617b      	str	r3, [r7, #20]
  return(result);
 8008662:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8008664:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008666:	b672      	cpsid	i
}
 8008668:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f000 f8fa 	bl	8008864 <SEQ_BitPosition>
 8008670:	4603      	mov	r3, r0
 8008672:	4619      	mov	r1, r3
 8008674:	4a06      	ldr	r2, [pc, #24]	; (8008690 <UTIL_SEQ_RegTask+0x40>)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	f383 8810 	msr	PRIMASK, r3
}
 8008686:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8008688:	bf00      	nop
}
 800868a:	3720      	adds	r7, #32
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	200004ec 	.word	0x200004ec

08008694 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8008694:	b480      	push	{r7}
 8008696:	b087      	sub	sp, #28
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800869e:	f3ef 8310 	mrs	r3, PRIMASK
 80086a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80086a4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80086a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80086a8:	b672      	cpsid	i
}
 80086aa:	bf00      	nop

  TaskSet |= TaskId_bm;
 80086ac:	4b0d      	ldr	r3, [pc, #52]	; (80086e4 <UTIL_SEQ_SetTask+0x50>)
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	4a0b      	ldr	r2, [pc, #44]	; (80086e4 <UTIL_SEQ_SetTask+0x50>)
 80086b6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80086b8:	4a0b      	ldr	r2, [pc, #44]	; (80086e8 <UTIL_SEQ_SetTask+0x54>)
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	431a      	orrs	r2, r3
 80086c4:	4908      	ldr	r1, [pc, #32]	; (80086e8 <UTIL_SEQ_SetTask+0x54>)
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	f383 8810 	msr	PRIMASK, r3
}
 80086d6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80086d8:	bf00      	nop
}
 80086da:	371c      	adds	r7, #28
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr
 80086e4:	200004dc 	.word	0x200004dc
 80086e8:	2000056c 	.word	0x2000056c

080086ec <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80086ec:	b480      	push	{r7}
 80086ee:	b087      	sub	sp, #28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086f4:	f3ef 8310 	mrs	r3, PRIMASK
 80086f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80086fa:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80086fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80086fe:	b672      	cpsid	i
}
 8008700:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	43da      	mvns	r2, r3
 8008706:	4b08      	ldr	r3, [pc, #32]	; (8008728 <UTIL_SEQ_PauseTask+0x3c>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4013      	ands	r3, r2
 800870c:	4a06      	ldr	r2, [pc, #24]	; (8008728 <UTIL_SEQ_PauseTask+0x3c>)
 800870e:	6013      	str	r3, [r2, #0]
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	f383 8810 	msr	PRIMASK, r3
}
 800871a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800871c:	bf00      	nop
}
 800871e:	371c      	adds	r7, #28
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr
 8008728:	20000018 	.word	0x20000018

0800872c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800872c:	b480      	push	{r7}
 800872e:	b087      	sub	sp, #28
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008734:	f3ef 8310 	mrs	r3, PRIMASK
 8008738:	60fb      	str	r3, [r7, #12]
  return(result);
 800873a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800873c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800873e:	b672      	cpsid	i
}
 8008740:	bf00      	nop

  TaskMask |= TaskId_bm;
 8008742:	4b09      	ldr	r3, [pc, #36]	; (8008768 <UTIL_SEQ_ResumeTask+0x3c>)
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4313      	orrs	r3, r2
 800874a:	4a07      	ldr	r2, [pc, #28]	; (8008768 <UTIL_SEQ_ResumeTask+0x3c>)
 800874c:	6013      	str	r3, [r2, #0]
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	f383 8810 	msr	PRIMASK, r3
}
 8008758:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800875a:	bf00      	nop
}
 800875c:	371c      	adds	r7, #28
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	20000018 	.word	0x20000018

0800876c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800876c:	b480      	push	{r7}
 800876e:	b087      	sub	sp, #28
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008774:	f3ef 8310 	mrs	r3, PRIMASK
 8008778:	60fb      	str	r3, [r7, #12]
  return(result);
 800877a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800877c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800877e:	b672      	cpsid	i
}
 8008780:	bf00      	nop

  EvtSet |= EvtId_bm;
 8008782:	4b09      	ldr	r3, [pc, #36]	; (80087a8 <UTIL_SEQ_SetEvt+0x3c>)
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4313      	orrs	r3, r2
 800878a:	4a07      	ldr	r2, [pc, #28]	; (80087a8 <UTIL_SEQ_SetEvt+0x3c>)
 800878c:	6013      	str	r3, [r2, #0]
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	f383 8810 	msr	PRIMASK, r3
}
 8008798:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800879a:	bf00      	nop
}
 800879c:	371c      	adds	r7, #28
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	200004e0 	.word	0x200004e0

080087ac <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b088      	sub	sp, #32
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80087b4:	4b21      	ldr	r3, [pc, #132]	; (800883c <UTIL_SEQ_WaitEvt+0x90>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80087ba:	4b20      	ldr	r3, [pc, #128]	; (800883c <UTIL_SEQ_WaitEvt+0x90>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c2:	d102      	bne.n	80087ca <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 80087c4:	2300      	movs	r3, #0
 80087c6:	61fb      	str	r3, [r7, #28]
 80087c8:	e005      	b.n	80087d6 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 80087ca:	4b1c      	ldr	r3, [pc, #112]	; (800883c <UTIL_SEQ_WaitEvt+0x90>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2201      	movs	r2, #1
 80087d0:	fa02 f303 	lsl.w	r3, r2, r3
 80087d4:	61fb      	str	r3, [r7, #28]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80087d6:	4b1a      	ldr	r3, [pc, #104]	; (8008840 <UTIL_SEQ_WaitEvt+0x94>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80087dc:	4a18      	ldr	r2, [pc, #96]	; (8008840 <UTIL_SEQ_WaitEvt+0x94>)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 80087e2:	e005      	b.n	80087f0 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 80087e4:	4b16      	ldr	r3, [pc, #88]	; (8008840 <UTIL_SEQ_WaitEvt+0x94>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4619      	mov	r1, r3
 80087ea:	69f8      	ldr	r0, [r7, #28]
 80087ec:	f7f8 f99a 	bl	8000b24 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 80087f0:	4b14      	ldr	r3, [pc, #80]	; (8008844 <UTIL_SEQ_WaitEvt+0x98>)
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	4b12      	ldr	r3, [pc, #72]	; (8008840 <UTIL_SEQ_WaitEvt+0x94>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4013      	ands	r3, r2
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d0f2      	beq.n	80087e4 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80087fe:	4a0f      	ldr	r2, [pc, #60]	; (800883c <UTIL_SEQ_WaitEvt+0x90>)
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008804:	f3ef 8310 	mrs	r3, PRIMASK
 8008808:	60bb      	str	r3, [r7, #8]
  return(result);
 800880a:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800880c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800880e:	b672      	cpsid	i
}
 8008810:	bf00      	nop

  EvtSet &= (~EvtWaited);
 8008812:	4b0b      	ldr	r3, [pc, #44]	; (8008840 <UTIL_SEQ_WaitEvt+0x94>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	43da      	mvns	r2, r3
 8008818:	4b0a      	ldr	r3, [pc, #40]	; (8008844 <UTIL_SEQ_WaitEvt+0x98>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4013      	ands	r3, r2
 800881e:	4a09      	ldr	r2, [pc, #36]	; (8008844 <UTIL_SEQ_WaitEvt+0x98>)
 8008820:	6013      	str	r3, [r2, #0]
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f383 8810 	msr	PRIMASK, r3
}
 800882c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800882e:	4a04      	ldr	r2, [pc, #16]	; (8008840 <UTIL_SEQ_WaitEvt+0x94>)
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	6013      	str	r3, [r2, #0]

  return;
 8008834:	bf00      	nop
}
 8008836:	3720      	adds	r7, #32
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	200004e8 	.word	0x200004e8
 8008840:	200004e4 	.word	0x200004e4
 8008844:	200004e0 	.word	0x200004e0

08008848 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8008848:	b480      	push	{r7}
 800884a:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800884c:	bf00      	nop
}
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8008856:	b480      	push	{r7}
 8008858:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800885a:	bf00      	nop
}
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8008864:	b480      	push	{r7}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800886c:	2300      	movs	r3, #0
 800886e:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	0c1b      	lsrs	r3, r3, #16
 8008874:	041b      	lsls	r3, r3, #16
 8008876:	2b00      	cmp	r3, #0
 8008878:	d104      	bne.n	8008884 <SEQ_BitPosition+0x20>
 800887a:	2310      	movs	r3, #16
 800887c:	73fb      	strb	r3, [r7, #15]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	041b      	lsls	r3, r3, #16
 8008882:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800888a:	2b00      	cmp	r3, #0
 800888c:	d105      	bne.n	800889a <SEQ_BitPosition+0x36>
 800888e:	7bfb      	ldrb	r3, [r7, #15]
 8008890:	3308      	adds	r3, #8
 8008892:	73fb      	strb	r3, [r7, #15]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	021b      	lsls	r3, r3, #8
 8008898:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d105      	bne.n	80088b0 <SEQ_BitPosition+0x4c>
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
 80088a6:	3304      	adds	r3, #4
 80088a8:	73fb      	strb	r3, [r7, #15]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	011b      	lsls	r3, r3, #4
 80088ae:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	0f1b      	lsrs	r3, r3, #28
 80088b4:	4a07      	ldr	r2, [pc, #28]	; (80088d4 <SEQ_BitPosition+0x70>)
 80088b6:	5cd2      	ldrb	r2, [r2, r3]
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
 80088ba:	4413      	add	r3, r2
 80088bc:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80088be:	7bfb      	ldrb	r3, [r7, #15]
 80088c0:	f1c3 031f 	rsb	r3, r3, #31
 80088c4:	b2db      	uxtb	r3, r3
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3714      	adds	r7, #20
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	08009514 	.word	0x08009514

080088d8 <__errno>:
 80088d8:	4b01      	ldr	r3, [pc, #4]	; (80088e0 <__errno+0x8>)
 80088da:	6818      	ldr	r0, [r3, #0]
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	20000020 	.word	0x20000020

080088e4 <__libc_init_array>:
 80088e4:	b570      	push	{r4, r5, r6, lr}
 80088e6:	4d0d      	ldr	r5, [pc, #52]	; (800891c <__libc_init_array+0x38>)
 80088e8:	4c0d      	ldr	r4, [pc, #52]	; (8008920 <__libc_init_array+0x3c>)
 80088ea:	1b64      	subs	r4, r4, r5
 80088ec:	10a4      	asrs	r4, r4, #2
 80088ee:	2600      	movs	r6, #0
 80088f0:	42a6      	cmp	r6, r4
 80088f2:	d109      	bne.n	8008908 <__libc_init_array+0x24>
 80088f4:	4d0b      	ldr	r5, [pc, #44]	; (8008924 <__libc_init_array+0x40>)
 80088f6:	4c0c      	ldr	r4, [pc, #48]	; (8008928 <__libc_init_array+0x44>)
 80088f8:	f000 fc8e 	bl	8009218 <_init>
 80088fc:	1b64      	subs	r4, r4, r5
 80088fe:	10a4      	asrs	r4, r4, #2
 8008900:	2600      	movs	r6, #0
 8008902:	42a6      	cmp	r6, r4
 8008904:	d105      	bne.n	8008912 <__libc_init_array+0x2e>
 8008906:	bd70      	pop	{r4, r5, r6, pc}
 8008908:	f855 3b04 	ldr.w	r3, [r5], #4
 800890c:	4798      	blx	r3
 800890e:	3601      	adds	r6, #1
 8008910:	e7ee      	b.n	80088f0 <__libc_init_array+0xc>
 8008912:	f855 3b04 	ldr.w	r3, [r5], #4
 8008916:	4798      	blx	r3
 8008918:	3601      	adds	r6, #1
 800891a:	e7f2      	b.n	8008902 <__libc_init_array+0x1e>
 800891c:	080095c0 	.word	0x080095c0
 8008920:	080095c0 	.word	0x080095c0
 8008924:	080095c0 	.word	0x080095c0
 8008928:	080095c4 	.word	0x080095c4

0800892c <memcpy>:
 800892c:	440a      	add	r2, r1
 800892e:	4291      	cmp	r1, r2
 8008930:	f100 33ff 	add.w	r3, r0, #4294967295
 8008934:	d100      	bne.n	8008938 <memcpy+0xc>
 8008936:	4770      	bx	lr
 8008938:	b510      	push	{r4, lr}
 800893a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800893e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008942:	4291      	cmp	r1, r2
 8008944:	d1f9      	bne.n	800893a <memcpy+0xe>
 8008946:	bd10      	pop	{r4, pc}

08008948 <memset>:
 8008948:	4402      	add	r2, r0
 800894a:	4603      	mov	r3, r0
 800894c:	4293      	cmp	r3, r2
 800894e:	d100      	bne.n	8008952 <memset+0xa>
 8008950:	4770      	bx	lr
 8008952:	f803 1b01 	strb.w	r1, [r3], #1
 8008956:	e7f9      	b.n	800894c <memset+0x4>

08008958 <siprintf>:
 8008958:	b40e      	push	{r1, r2, r3}
 800895a:	b500      	push	{lr}
 800895c:	b09c      	sub	sp, #112	; 0x70
 800895e:	ab1d      	add	r3, sp, #116	; 0x74
 8008960:	9002      	str	r0, [sp, #8]
 8008962:	9006      	str	r0, [sp, #24]
 8008964:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008968:	4809      	ldr	r0, [pc, #36]	; (8008990 <siprintf+0x38>)
 800896a:	9107      	str	r1, [sp, #28]
 800896c:	9104      	str	r1, [sp, #16]
 800896e:	4909      	ldr	r1, [pc, #36]	; (8008994 <siprintf+0x3c>)
 8008970:	f853 2b04 	ldr.w	r2, [r3], #4
 8008974:	9105      	str	r1, [sp, #20]
 8008976:	6800      	ldr	r0, [r0, #0]
 8008978:	9301      	str	r3, [sp, #4]
 800897a:	a902      	add	r1, sp, #8
 800897c:	f000 f8fe 	bl	8008b7c <_svfiprintf_r>
 8008980:	9b02      	ldr	r3, [sp, #8]
 8008982:	2200      	movs	r2, #0
 8008984:	701a      	strb	r2, [r3, #0]
 8008986:	b01c      	add	sp, #112	; 0x70
 8008988:	f85d eb04 	ldr.w	lr, [sp], #4
 800898c:	b003      	add	sp, #12
 800898e:	4770      	bx	lr
 8008990:	20000020 	.word	0x20000020
 8008994:	ffff0208 	.word	0xffff0208

08008998 <__retarget_lock_acquire_recursive>:
 8008998:	4770      	bx	lr

0800899a <__retarget_lock_release_recursive>:
 800899a:	4770      	bx	lr

0800899c <sbrk_aligned>:
 800899c:	b570      	push	{r4, r5, r6, lr}
 800899e:	4e0e      	ldr	r6, [pc, #56]	; (80089d8 <sbrk_aligned+0x3c>)
 80089a0:	460c      	mov	r4, r1
 80089a2:	6831      	ldr	r1, [r6, #0]
 80089a4:	4605      	mov	r5, r0
 80089a6:	b911      	cbnz	r1, 80089ae <sbrk_aligned+0x12>
 80089a8:	f000 fb7c 	bl	80090a4 <_sbrk_r>
 80089ac:	6030      	str	r0, [r6, #0]
 80089ae:	4621      	mov	r1, r4
 80089b0:	4628      	mov	r0, r5
 80089b2:	f000 fb77 	bl	80090a4 <_sbrk_r>
 80089b6:	1c43      	adds	r3, r0, #1
 80089b8:	d00a      	beq.n	80089d0 <sbrk_aligned+0x34>
 80089ba:	1cc4      	adds	r4, r0, #3
 80089bc:	f024 0403 	bic.w	r4, r4, #3
 80089c0:	42a0      	cmp	r0, r4
 80089c2:	d007      	beq.n	80089d4 <sbrk_aligned+0x38>
 80089c4:	1a21      	subs	r1, r4, r0
 80089c6:	4628      	mov	r0, r5
 80089c8:	f000 fb6c 	bl	80090a4 <_sbrk_r>
 80089cc:	3001      	adds	r0, #1
 80089ce:	d101      	bne.n	80089d4 <sbrk_aligned+0x38>
 80089d0:	f04f 34ff 	mov.w	r4, #4294967295
 80089d4:	4620      	mov	r0, r4
 80089d6:	bd70      	pop	{r4, r5, r6, pc}
 80089d8:	20000584 	.word	0x20000584

080089dc <_malloc_r>:
 80089dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089e0:	1ccd      	adds	r5, r1, #3
 80089e2:	f025 0503 	bic.w	r5, r5, #3
 80089e6:	3508      	adds	r5, #8
 80089e8:	2d0c      	cmp	r5, #12
 80089ea:	bf38      	it	cc
 80089ec:	250c      	movcc	r5, #12
 80089ee:	2d00      	cmp	r5, #0
 80089f0:	4607      	mov	r7, r0
 80089f2:	db01      	blt.n	80089f8 <_malloc_r+0x1c>
 80089f4:	42a9      	cmp	r1, r5
 80089f6:	d905      	bls.n	8008a04 <_malloc_r+0x28>
 80089f8:	230c      	movs	r3, #12
 80089fa:	603b      	str	r3, [r7, #0]
 80089fc:	2600      	movs	r6, #0
 80089fe:	4630      	mov	r0, r6
 8008a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a04:	4e2e      	ldr	r6, [pc, #184]	; (8008ac0 <_malloc_r+0xe4>)
 8008a06:	f000 fb77 	bl	80090f8 <__malloc_lock>
 8008a0a:	6833      	ldr	r3, [r6, #0]
 8008a0c:	461c      	mov	r4, r3
 8008a0e:	bb34      	cbnz	r4, 8008a5e <_malloc_r+0x82>
 8008a10:	4629      	mov	r1, r5
 8008a12:	4638      	mov	r0, r7
 8008a14:	f7ff ffc2 	bl	800899c <sbrk_aligned>
 8008a18:	1c43      	adds	r3, r0, #1
 8008a1a:	4604      	mov	r4, r0
 8008a1c:	d14d      	bne.n	8008aba <_malloc_r+0xde>
 8008a1e:	6834      	ldr	r4, [r6, #0]
 8008a20:	4626      	mov	r6, r4
 8008a22:	2e00      	cmp	r6, #0
 8008a24:	d140      	bne.n	8008aa8 <_malloc_r+0xcc>
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	4631      	mov	r1, r6
 8008a2a:	4638      	mov	r0, r7
 8008a2c:	eb04 0803 	add.w	r8, r4, r3
 8008a30:	f000 fb38 	bl	80090a4 <_sbrk_r>
 8008a34:	4580      	cmp	r8, r0
 8008a36:	d13a      	bne.n	8008aae <_malloc_r+0xd2>
 8008a38:	6821      	ldr	r1, [r4, #0]
 8008a3a:	3503      	adds	r5, #3
 8008a3c:	1a6d      	subs	r5, r5, r1
 8008a3e:	f025 0503 	bic.w	r5, r5, #3
 8008a42:	3508      	adds	r5, #8
 8008a44:	2d0c      	cmp	r5, #12
 8008a46:	bf38      	it	cc
 8008a48:	250c      	movcc	r5, #12
 8008a4a:	4629      	mov	r1, r5
 8008a4c:	4638      	mov	r0, r7
 8008a4e:	f7ff ffa5 	bl	800899c <sbrk_aligned>
 8008a52:	3001      	adds	r0, #1
 8008a54:	d02b      	beq.n	8008aae <_malloc_r+0xd2>
 8008a56:	6823      	ldr	r3, [r4, #0]
 8008a58:	442b      	add	r3, r5
 8008a5a:	6023      	str	r3, [r4, #0]
 8008a5c:	e00e      	b.n	8008a7c <_malloc_r+0xa0>
 8008a5e:	6822      	ldr	r2, [r4, #0]
 8008a60:	1b52      	subs	r2, r2, r5
 8008a62:	d41e      	bmi.n	8008aa2 <_malloc_r+0xc6>
 8008a64:	2a0b      	cmp	r2, #11
 8008a66:	d916      	bls.n	8008a96 <_malloc_r+0xba>
 8008a68:	1961      	adds	r1, r4, r5
 8008a6a:	42a3      	cmp	r3, r4
 8008a6c:	6025      	str	r5, [r4, #0]
 8008a6e:	bf18      	it	ne
 8008a70:	6059      	strne	r1, [r3, #4]
 8008a72:	6863      	ldr	r3, [r4, #4]
 8008a74:	bf08      	it	eq
 8008a76:	6031      	streq	r1, [r6, #0]
 8008a78:	5162      	str	r2, [r4, r5]
 8008a7a:	604b      	str	r3, [r1, #4]
 8008a7c:	4638      	mov	r0, r7
 8008a7e:	f104 060b 	add.w	r6, r4, #11
 8008a82:	f000 fb3f 	bl	8009104 <__malloc_unlock>
 8008a86:	f026 0607 	bic.w	r6, r6, #7
 8008a8a:	1d23      	adds	r3, r4, #4
 8008a8c:	1af2      	subs	r2, r6, r3
 8008a8e:	d0b6      	beq.n	80089fe <_malloc_r+0x22>
 8008a90:	1b9b      	subs	r3, r3, r6
 8008a92:	50a3      	str	r3, [r4, r2]
 8008a94:	e7b3      	b.n	80089fe <_malloc_r+0x22>
 8008a96:	6862      	ldr	r2, [r4, #4]
 8008a98:	42a3      	cmp	r3, r4
 8008a9a:	bf0c      	ite	eq
 8008a9c:	6032      	streq	r2, [r6, #0]
 8008a9e:	605a      	strne	r2, [r3, #4]
 8008aa0:	e7ec      	b.n	8008a7c <_malloc_r+0xa0>
 8008aa2:	4623      	mov	r3, r4
 8008aa4:	6864      	ldr	r4, [r4, #4]
 8008aa6:	e7b2      	b.n	8008a0e <_malloc_r+0x32>
 8008aa8:	4634      	mov	r4, r6
 8008aaa:	6876      	ldr	r6, [r6, #4]
 8008aac:	e7b9      	b.n	8008a22 <_malloc_r+0x46>
 8008aae:	230c      	movs	r3, #12
 8008ab0:	603b      	str	r3, [r7, #0]
 8008ab2:	4638      	mov	r0, r7
 8008ab4:	f000 fb26 	bl	8009104 <__malloc_unlock>
 8008ab8:	e7a1      	b.n	80089fe <_malloc_r+0x22>
 8008aba:	6025      	str	r5, [r4, #0]
 8008abc:	e7de      	b.n	8008a7c <_malloc_r+0xa0>
 8008abe:	bf00      	nop
 8008ac0:	20000580 	.word	0x20000580

08008ac4 <__ssputs_r>:
 8008ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac8:	688e      	ldr	r6, [r1, #8]
 8008aca:	429e      	cmp	r6, r3
 8008acc:	4682      	mov	sl, r0
 8008ace:	460c      	mov	r4, r1
 8008ad0:	4690      	mov	r8, r2
 8008ad2:	461f      	mov	r7, r3
 8008ad4:	d838      	bhi.n	8008b48 <__ssputs_r+0x84>
 8008ad6:	898a      	ldrh	r2, [r1, #12]
 8008ad8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008adc:	d032      	beq.n	8008b44 <__ssputs_r+0x80>
 8008ade:	6825      	ldr	r5, [r4, #0]
 8008ae0:	6909      	ldr	r1, [r1, #16]
 8008ae2:	eba5 0901 	sub.w	r9, r5, r1
 8008ae6:	6965      	ldr	r5, [r4, #20]
 8008ae8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008aec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008af0:	3301      	adds	r3, #1
 8008af2:	444b      	add	r3, r9
 8008af4:	106d      	asrs	r5, r5, #1
 8008af6:	429d      	cmp	r5, r3
 8008af8:	bf38      	it	cc
 8008afa:	461d      	movcc	r5, r3
 8008afc:	0553      	lsls	r3, r2, #21
 8008afe:	d531      	bpl.n	8008b64 <__ssputs_r+0xa0>
 8008b00:	4629      	mov	r1, r5
 8008b02:	f7ff ff6b 	bl	80089dc <_malloc_r>
 8008b06:	4606      	mov	r6, r0
 8008b08:	b950      	cbnz	r0, 8008b20 <__ssputs_r+0x5c>
 8008b0a:	230c      	movs	r3, #12
 8008b0c:	f8ca 3000 	str.w	r3, [sl]
 8008b10:	89a3      	ldrh	r3, [r4, #12]
 8008b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b16:	81a3      	strh	r3, [r4, #12]
 8008b18:	f04f 30ff 	mov.w	r0, #4294967295
 8008b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b20:	6921      	ldr	r1, [r4, #16]
 8008b22:	464a      	mov	r2, r9
 8008b24:	f7ff ff02 	bl	800892c <memcpy>
 8008b28:	89a3      	ldrh	r3, [r4, #12]
 8008b2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b32:	81a3      	strh	r3, [r4, #12]
 8008b34:	6126      	str	r6, [r4, #16]
 8008b36:	6165      	str	r5, [r4, #20]
 8008b38:	444e      	add	r6, r9
 8008b3a:	eba5 0509 	sub.w	r5, r5, r9
 8008b3e:	6026      	str	r6, [r4, #0]
 8008b40:	60a5      	str	r5, [r4, #8]
 8008b42:	463e      	mov	r6, r7
 8008b44:	42be      	cmp	r6, r7
 8008b46:	d900      	bls.n	8008b4a <__ssputs_r+0x86>
 8008b48:	463e      	mov	r6, r7
 8008b4a:	6820      	ldr	r0, [r4, #0]
 8008b4c:	4632      	mov	r2, r6
 8008b4e:	4641      	mov	r1, r8
 8008b50:	f000 fab8 	bl	80090c4 <memmove>
 8008b54:	68a3      	ldr	r3, [r4, #8]
 8008b56:	1b9b      	subs	r3, r3, r6
 8008b58:	60a3      	str	r3, [r4, #8]
 8008b5a:	6823      	ldr	r3, [r4, #0]
 8008b5c:	4433      	add	r3, r6
 8008b5e:	6023      	str	r3, [r4, #0]
 8008b60:	2000      	movs	r0, #0
 8008b62:	e7db      	b.n	8008b1c <__ssputs_r+0x58>
 8008b64:	462a      	mov	r2, r5
 8008b66:	f000 fb1f 	bl	80091a8 <_realloc_r>
 8008b6a:	4606      	mov	r6, r0
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	d1e1      	bne.n	8008b34 <__ssputs_r+0x70>
 8008b70:	6921      	ldr	r1, [r4, #16]
 8008b72:	4650      	mov	r0, sl
 8008b74:	f000 facc 	bl	8009110 <_free_r>
 8008b78:	e7c7      	b.n	8008b0a <__ssputs_r+0x46>
	...

08008b7c <_svfiprintf_r>:
 8008b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b80:	4698      	mov	r8, r3
 8008b82:	898b      	ldrh	r3, [r1, #12]
 8008b84:	061b      	lsls	r3, r3, #24
 8008b86:	b09d      	sub	sp, #116	; 0x74
 8008b88:	4607      	mov	r7, r0
 8008b8a:	460d      	mov	r5, r1
 8008b8c:	4614      	mov	r4, r2
 8008b8e:	d50e      	bpl.n	8008bae <_svfiprintf_r+0x32>
 8008b90:	690b      	ldr	r3, [r1, #16]
 8008b92:	b963      	cbnz	r3, 8008bae <_svfiprintf_r+0x32>
 8008b94:	2140      	movs	r1, #64	; 0x40
 8008b96:	f7ff ff21 	bl	80089dc <_malloc_r>
 8008b9a:	6028      	str	r0, [r5, #0]
 8008b9c:	6128      	str	r0, [r5, #16]
 8008b9e:	b920      	cbnz	r0, 8008baa <_svfiprintf_r+0x2e>
 8008ba0:	230c      	movs	r3, #12
 8008ba2:	603b      	str	r3, [r7, #0]
 8008ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba8:	e0d1      	b.n	8008d4e <_svfiprintf_r+0x1d2>
 8008baa:	2340      	movs	r3, #64	; 0x40
 8008bac:	616b      	str	r3, [r5, #20]
 8008bae:	2300      	movs	r3, #0
 8008bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8008bb2:	2320      	movs	r3, #32
 8008bb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bbc:	2330      	movs	r3, #48	; 0x30
 8008bbe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008d68 <_svfiprintf_r+0x1ec>
 8008bc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bc6:	f04f 0901 	mov.w	r9, #1
 8008bca:	4623      	mov	r3, r4
 8008bcc:	469a      	mov	sl, r3
 8008bce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bd2:	b10a      	cbz	r2, 8008bd8 <_svfiprintf_r+0x5c>
 8008bd4:	2a25      	cmp	r2, #37	; 0x25
 8008bd6:	d1f9      	bne.n	8008bcc <_svfiprintf_r+0x50>
 8008bd8:	ebba 0b04 	subs.w	fp, sl, r4
 8008bdc:	d00b      	beq.n	8008bf6 <_svfiprintf_r+0x7a>
 8008bde:	465b      	mov	r3, fp
 8008be0:	4622      	mov	r2, r4
 8008be2:	4629      	mov	r1, r5
 8008be4:	4638      	mov	r0, r7
 8008be6:	f7ff ff6d 	bl	8008ac4 <__ssputs_r>
 8008bea:	3001      	adds	r0, #1
 8008bec:	f000 80aa 	beq.w	8008d44 <_svfiprintf_r+0x1c8>
 8008bf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bf2:	445a      	add	r2, fp
 8008bf4:	9209      	str	r2, [sp, #36]	; 0x24
 8008bf6:	f89a 3000 	ldrb.w	r3, [sl]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f000 80a2 	beq.w	8008d44 <_svfiprintf_r+0x1c8>
 8008c00:	2300      	movs	r3, #0
 8008c02:	f04f 32ff 	mov.w	r2, #4294967295
 8008c06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c0a:	f10a 0a01 	add.w	sl, sl, #1
 8008c0e:	9304      	str	r3, [sp, #16]
 8008c10:	9307      	str	r3, [sp, #28]
 8008c12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c16:	931a      	str	r3, [sp, #104]	; 0x68
 8008c18:	4654      	mov	r4, sl
 8008c1a:	2205      	movs	r2, #5
 8008c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c20:	4851      	ldr	r0, [pc, #324]	; (8008d68 <_svfiprintf_r+0x1ec>)
 8008c22:	f7f7 fab5 	bl	8000190 <memchr>
 8008c26:	9a04      	ldr	r2, [sp, #16]
 8008c28:	b9d8      	cbnz	r0, 8008c62 <_svfiprintf_r+0xe6>
 8008c2a:	06d0      	lsls	r0, r2, #27
 8008c2c:	bf44      	itt	mi
 8008c2e:	2320      	movmi	r3, #32
 8008c30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c34:	0711      	lsls	r1, r2, #28
 8008c36:	bf44      	itt	mi
 8008c38:	232b      	movmi	r3, #43	; 0x2b
 8008c3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c3e:	f89a 3000 	ldrb.w	r3, [sl]
 8008c42:	2b2a      	cmp	r3, #42	; 0x2a
 8008c44:	d015      	beq.n	8008c72 <_svfiprintf_r+0xf6>
 8008c46:	9a07      	ldr	r2, [sp, #28]
 8008c48:	4654      	mov	r4, sl
 8008c4a:	2000      	movs	r0, #0
 8008c4c:	f04f 0c0a 	mov.w	ip, #10
 8008c50:	4621      	mov	r1, r4
 8008c52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c56:	3b30      	subs	r3, #48	; 0x30
 8008c58:	2b09      	cmp	r3, #9
 8008c5a:	d94e      	bls.n	8008cfa <_svfiprintf_r+0x17e>
 8008c5c:	b1b0      	cbz	r0, 8008c8c <_svfiprintf_r+0x110>
 8008c5e:	9207      	str	r2, [sp, #28]
 8008c60:	e014      	b.n	8008c8c <_svfiprintf_r+0x110>
 8008c62:	eba0 0308 	sub.w	r3, r0, r8
 8008c66:	fa09 f303 	lsl.w	r3, r9, r3
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	9304      	str	r3, [sp, #16]
 8008c6e:	46a2      	mov	sl, r4
 8008c70:	e7d2      	b.n	8008c18 <_svfiprintf_r+0x9c>
 8008c72:	9b03      	ldr	r3, [sp, #12]
 8008c74:	1d19      	adds	r1, r3, #4
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	9103      	str	r1, [sp, #12]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	bfbb      	ittet	lt
 8008c7e:	425b      	neglt	r3, r3
 8008c80:	f042 0202 	orrlt.w	r2, r2, #2
 8008c84:	9307      	strge	r3, [sp, #28]
 8008c86:	9307      	strlt	r3, [sp, #28]
 8008c88:	bfb8      	it	lt
 8008c8a:	9204      	strlt	r2, [sp, #16]
 8008c8c:	7823      	ldrb	r3, [r4, #0]
 8008c8e:	2b2e      	cmp	r3, #46	; 0x2e
 8008c90:	d10c      	bne.n	8008cac <_svfiprintf_r+0x130>
 8008c92:	7863      	ldrb	r3, [r4, #1]
 8008c94:	2b2a      	cmp	r3, #42	; 0x2a
 8008c96:	d135      	bne.n	8008d04 <_svfiprintf_r+0x188>
 8008c98:	9b03      	ldr	r3, [sp, #12]
 8008c9a:	1d1a      	adds	r2, r3, #4
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	9203      	str	r2, [sp, #12]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	bfb8      	it	lt
 8008ca4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ca8:	3402      	adds	r4, #2
 8008caa:	9305      	str	r3, [sp, #20]
 8008cac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008d78 <_svfiprintf_r+0x1fc>
 8008cb0:	7821      	ldrb	r1, [r4, #0]
 8008cb2:	2203      	movs	r2, #3
 8008cb4:	4650      	mov	r0, sl
 8008cb6:	f7f7 fa6b 	bl	8000190 <memchr>
 8008cba:	b140      	cbz	r0, 8008cce <_svfiprintf_r+0x152>
 8008cbc:	2340      	movs	r3, #64	; 0x40
 8008cbe:	eba0 000a 	sub.w	r0, r0, sl
 8008cc2:	fa03 f000 	lsl.w	r0, r3, r0
 8008cc6:	9b04      	ldr	r3, [sp, #16]
 8008cc8:	4303      	orrs	r3, r0
 8008cca:	3401      	adds	r4, #1
 8008ccc:	9304      	str	r3, [sp, #16]
 8008cce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cd2:	4826      	ldr	r0, [pc, #152]	; (8008d6c <_svfiprintf_r+0x1f0>)
 8008cd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cd8:	2206      	movs	r2, #6
 8008cda:	f7f7 fa59 	bl	8000190 <memchr>
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	d038      	beq.n	8008d54 <_svfiprintf_r+0x1d8>
 8008ce2:	4b23      	ldr	r3, [pc, #140]	; (8008d70 <_svfiprintf_r+0x1f4>)
 8008ce4:	bb1b      	cbnz	r3, 8008d2e <_svfiprintf_r+0x1b2>
 8008ce6:	9b03      	ldr	r3, [sp, #12]
 8008ce8:	3307      	adds	r3, #7
 8008cea:	f023 0307 	bic.w	r3, r3, #7
 8008cee:	3308      	adds	r3, #8
 8008cf0:	9303      	str	r3, [sp, #12]
 8008cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cf4:	4433      	add	r3, r6
 8008cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8008cf8:	e767      	b.n	8008bca <_svfiprintf_r+0x4e>
 8008cfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cfe:	460c      	mov	r4, r1
 8008d00:	2001      	movs	r0, #1
 8008d02:	e7a5      	b.n	8008c50 <_svfiprintf_r+0xd4>
 8008d04:	2300      	movs	r3, #0
 8008d06:	3401      	adds	r4, #1
 8008d08:	9305      	str	r3, [sp, #20]
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	f04f 0c0a 	mov.w	ip, #10
 8008d10:	4620      	mov	r0, r4
 8008d12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d16:	3a30      	subs	r2, #48	; 0x30
 8008d18:	2a09      	cmp	r2, #9
 8008d1a:	d903      	bls.n	8008d24 <_svfiprintf_r+0x1a8>
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d0c5      	beq.n	8008cac <_svfiprintf_r+0x130>
 8008d20:	9105      	str	r1, [sp, #20]
 8008d22:	e7c3      	b.n	8008cac <_svfiprintf_r+0x130>
 8008d24:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d28:	4604      	mov	r4, r0
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e7f0      	b.n	8008d10 <_svfiprintf_r+0x194>
 8008d2e:	ab03      	add	r3, sp, #12
 8008d30:	9300      	str	r3, [sp, #0]
 8008d32:	462a      	mov	r2, r5
 8008d34:	4b0f      	ldr	r3, [pc, #60]	; (8008d74 <_svfiprintf_r+0x1f8>)
 8008d36:	a904      	add	r1, sp, #16
 8008d38:	4638      	mov	r0, r7
 8008d3a:	f3af 8000 	nop.w
 8008d3e:	1c42      	adds	r2, r0, #1
 8008d40:	4606      	mov	r6, r0
 8008d42:	d1d6      	bne.n	8008cf2 <_svfiprintf_r+0x176>
 8008d44:	89ab      	ldrh	r3, [r5, #12]
 8008d46:	065b      	lsls	r3, r3, #25
 8008d48:	f53f af2c 	bmi.w	8008ba4 <_svfiprintf_r+0x28>
 8008d4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d4e:	b01d      	add	sp, #116	; 0x74
 8008d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d54:	ab03      	add	r3, sp, #12
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	462a      	mov	r2, r5
 8008d5a:	4b06      	ldr	r3, [pc, #24]	; (8008d74 <_svfiprintf_r+0x1f8>)
 8008d5c:	a904      	add	r1, sp, #16
 8008d5e:	4638      	mov	r0, r7
 8008d60:	f000 f87a 	bl	8008e58 <_printf_i>
 8008d64:	e7eb      	b.n	8008d3e <_svfiprintf_r+0x1c2>
 8008d66:	bf00      	nop
 8008d68:	08009584 	.word	0x08009584
 8008d6c:	0800958e 	.word	0x0800958e
 8008d70:	00000000 	.word	0x00000000
 8008d74:	08008ac5 	.word	0x08008ac5
 8008d78:	0800958a 	.word	0x0800958a

08008d7c <_printf_common>:
 8008d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d80:	4616      	mov	r6, r2
 8008d82:	4699      	mov	r9, r3
 8008d84:	688a      	ldr	r2, [r1, #8]
 8008d86:	690b      	ldr	r3, [r1, #16]
 8008d88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	bfb8      	it	lt
 8008d90:	4613      	movlt	r3, r2
 8008d92:	6033      	str	r3, [r6, #0]
 8008d94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d98:	4607      	mov	r7, r0
 8008d9a:	460c      	mov	r4, r1
 8008d9c:	b10a      	cbz	r2, 8008da2 <_printf_common+0x26>
 8008d9e:	3301      	adds	r3, #1
 8008da0:	6033      	str	r3, [r6, #0]
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	0699      	lsls	r1, r3, #26
 8008da6:	bf42      	ittt	mi
 8008da8:	6833      	ldrmi	r3, [r6, #0]
 8008daa:	3302      	addmi	r3, #2
 8008dac:	6033      	strmi	r3, [r6, #0]
 8008dae:	6825      	ldr	r5, [r4, #0]
 8008db0:	f015 0506 	ands.w	r5, r5, #6
 8008db4:	d106      	bne.n	8008dc4 <_printf_common+0x48>
 8008db6:	f104 0a19 	add.w	sl, r4, #25
 8008dba:	68e3      	ldr	r3, [r4, #12]
 8008dbc:	6832      	ldr	r2, [r6, #0]
 8008dbe:	1a9b      	subs	r3, r3, r2
 8008dc0:	42ab      	cmp	r3, r5
 8008dc2:	dc26      	bgt.n	8008e12 <_printf_common+0x96>
 8008dc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008dc8:	1e13      	subs	r3, r2, #0
 8008dca:	6822      	ldr	r2, [r4, #0]
 8008dcc:	bf18      	it	ne
 8008dce:	2301      	movne	r3, #1
 8008dd0:	0692      	lsls	r2, r2, #26
 8008dd2:	d42b      	bmi.n	8008e2c <_printf_common+0xb0>
 8008dd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008dd8:	4649      	mov	r1, r9
 8008dda:	4638      	mov	r0, r7
 8008ddc:	47c0      	blx	r8
 8008dde:	3001      	adds	r0, #1
 8008de0:	d01e      	beq.n	8008e20 <_printf_common+0xa4>
 8008de2:	6823      	ldr	r3, [r4, #0]
 8008de4:	68e5      	ldr	r5, [r4, #12]
 8008de6:	6832      	ldr	r2, [r6, #0]
 8008de8:	f003 0306 	and.w	r3, r3, #6
 8008dec:	2b04      	cmp	r3, #4
 8008dee:	bf08      	it	eq
 8008df0:	1aad      	subeq	r5, r5, r2
 8008df2:	68a3      	ldr	r3, [r4, #8]
 8008df4:	6922      	ldr	r2, [r4, #16]
 8008df6:	bf0c      	ite	eq
 8008df8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008dfc:	2500      	movne	r5, #0
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	bfc4      	itt	gt
 8008e02:	1a9b      	subgt	r3, r3, r2
 8008e04:	18ed      	addgt	r5, r5, r3
 8008e06:	2600      	movs	r6, #0
 8008e08:	341a      	adds	r4, #26
 8008e0a:	42b5      	cmp	r5, r6
 8008e0c:	d11a      	bne.n	8008e44 <_printf_common+0xc8>
 8008e0e:	2000      	movs	r0, #0
 8008e10:	e008      	b.n	8008e24 <_printf_common+0xa8>
 8008e12:	2301      	movs	r3, #1
 8008e14:	4652      	mov	r2, sl
 8008e16:	4649      	mov	r1, r9
 8008e18:	4638      	mov	r0, r7
 8008e1a:	47c0      	blx	r8
 8008e1c:	3001      	adds	r0, #1
 8008e1e:	d103      	bne.n	8008e28 <_printf_common+0xac>
 8008e20:	f04f 30ff 	mov.w	r0, #4294967295
 8008e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e28:	3501      	adds	r5, #1
 8008e2a:	e7c6      	b.n	8008dba <_printf_common+0x3e>
 8008e2c:	18e1      	adds	r1, r4, r3
 8008e2e:	1c5a      	adds	r2, r3, #1
 8008e30:	2030      	movs	r0, #48	; 0x30
 8008e32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e36:	4422      	add	r2, r4
 8008e38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e40:	3302      	adds	r3, #2
 8008e42:	e7c7      	b.n	8008dd4 <_printf_common+0x58>
 8008e44:	2301      	movs	r3, #1
 8008e46:	4622      	mov	r2, r4
 8008e48:	4649      	mov	r1, r9
 8008e4a:	4638      	mov	r0, r7
 8008e4c:	47c0      	blx	r8
 8008e4e:	3001      	adds	r0, #1
 8008e50:	d0e6      	beq.n	8008e20 <_printf_common+0xa4>
 8008e52:	3601      	adds	r6, #1
 8008e54:	e7d9      	b.n	8008e0a <_printf_common+0x8e>
	...

08008e58 <_printf_i>:
 8008e58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e5c:	7e0f      	ldrb	r7, [r1, #24]
 8008e5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e60:	2f78      	cmp	r7, #120	; 0x78
 8008e62:	4691      	mov	r9, r2
 8008e64:	4680      	mov	r8, r0
 8008e66:	460c      	mov	r4, r1
 8008e68:	469a      	mov	sl, r3
 8008e6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e6e:	d807      	bhi.n	8008e80 <_printf_i+0x28>
 8008e70:	2f62      	cmp	r7, #98	; 0x62
 8008e72:	d80a      	bhi.n	8008e8a <_printf_i+0x32>
 8008e74:	2f00      	cmp	r7, #0
 8008e76:	f000 80d8 	beq.w	800902a <_printf_i+0x1d2>
 8008e7a:	2f58      	cmp	r7, #88	; 0x58
 8008e7c:	f000 80a3 	beq.w	8008fc6 <_printf_i+0x16e>
 8008e80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e88:	e03a      	b.n	8008f00 <_printf_i+0xa8>
 8008e8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e8e:	2b15      	cmp	r3, #21
 8008e90:	d8f6      	bhi.n	8008e80 <_printf_i+0x28>
 8008e92:	a101      	add	r1, pc, #4	; (adr r1, 8008e98 <_printf_i+0x40>)
 8008e94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e98:	08008ef1 	.word	0x08008ef1
 8008e9c:	08008f05 	.word	0x08008f05
 8008ea0:	08008e81 	.word	0x08008e81
 8008ea4:	08008e81 	.word	0x08008e81
 8008ea8:	08008e81 	.word	0x08008e81
 8008eac:	08008e81 	.word	0x08008e81
 8008eb0:	08008f05 	.word	0x08008f05
 8008eb4:	08008e81 	.word	0x08008e81
 8008eb8:	08008e81 	.word	0x08008e81
 8008ebc:	08008e81 	.word	0x08008e81
 8008ec0:	08008e81 	.word	0x08008e81
 8008ec4:	08009011 	.word	0x08009011
 8008ec8:	08008f35 	.word	0x08008f35
 8008ecc:	08008ff3 	.word	0x08008ff3
 8008ed0:	08008e81 	.word	0x08008e81
 8008ed4:	08008e81 	.word	0x08008e81
 8008ed8:	08009033 	.word	0x08009033
 8008edc:	08008e81 	.word	0x08008e81
 8008ee0:	08008f35 	.word	0x08008f35
 8008ee4:	08008e81 	.word	0x08008e81
 8008ee8:	08008e81 	.word	0x08008e81
 8008eec:	08008ffb 	.word	0x08008ffb
 8008ef0:	682b      	ldr	r3, [r5, #0]
 8008ef2:	1d1a      	adds	r2, r3, #4
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	602a      	str	r2, [r5, #0]
 8008ef8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008efc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f00:	2301      	movs	r3, #1
 8008f02:	e0a3      	b.n	800904c <_printf_i+0x1f4>
 8008f04:	6820      	ldr	r0, [r4, #0]
 8008f06:	6829      	ldr	r1, [r5, #0]
 8008f08:	0606      	lsls	r6, r0, #24
 8008f0a:	f101 0304 	add.w	r3, r1, #4
 8008f0e:	d50a      	bpl.n	8008f26 <_printf_i+0xce>
 8008f10:	680e      	ldr	r6, [r1, #0]
 8008f12:	602b      	str	r3, [r5, #0]
 8008f14:	2e00      	cmp	r6, #0
 8008f16:	da03      	bge.n	8008f20 <_printf_i+0xc8>
 8008f18:	232d      	movs	r3, #45	; 0x2d
 8008f1a:	4276      	negs	r6, r6
 8008f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f20:	485e      	ldr	r0, [pc, #376]	; (800909c <_printf_i+0x244>)
 8008f22:	230a      	movs	r3, #10
 8008f24:	e019      	b.n	8008f5a <_printf_i+0x102>
 8008f26:	680e      	ldr	r6, [r1, #0]
 8008f28:	602b      	str	r3, [r5, #0]
 8008f2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f2e:	bf18      	it	ne
 8008f30:	b236      	sxthne	r6, r6
 8008f32:	e7ef      	b.n	8008f14 <_printf_i+0xbc>
 8008f34:	682b      	ldr	r3, [r5, #0]
 8008f36:	6820      	ldr	r0, [r4, #0]
 8008f38:	1d19      	adds	r1, r3, #4
 8008f3a:	6029      	str	r1, [r5, #0]
 8008f3c:	0601      	lsls	r1, r0, #24
 8008f3e:	d501      	bpl.n	8008f44 <_printf_i+0xec>
 8008f40:	681e      	ldr	r6, [r3, #0]
 8008f42:	e002      	b.n	8008f4a <_printf_i+0xf2>
 8008f44:	0646      	lsls	r6, r0, #25
 8008f46:	d5fb      	bpl.n	8008f40 <_printf_i+0xe8>
 8008f48:	881e      	ldrh	r6, [r3, #0]
 8008f4a:	4854      	ldr	r0, [pc, #336]	; (800909c <_printf_i+0x244>)
 8008f4c:	2f6f      	cmp	r7, #111	; 0x6f
 8008f4e:	bf0c      	ite	eq
 8008f50:	2308      	moveq	r3, #8
 8008f52:	230a      	movne	r3, #10
 8008f54:	2100      	movs	r1, #0
 8008f56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f5a:	6865      	ldr	r5, [r4, #4]
 8008f5c:	60a5      	str	r5, [r4, #8]
 8008f5e:	2d00      	cmp	r5, #0
 8008f60:	bfa2      	ittt	ge
 8008f62:	6821      	ldrge	r1, [r4, #0]
 8008f64:	f021 0104 	bicge.w	r1, r1, #4
 8008f68:	6021      	strge	r1, [r4, #0]
 8008f6a:	b90e      	cbnz	r6, 8008f70 <_printf_i+0x118>
 8008f6c:	2d00      	cmp	r5, #0
 8008f6e:	d04d      	beq.n	800900c <_printf_i+0x1b4>
 8008f70:	4615      	mov	r5, r2
 8008f72:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f76:	fb03 6711 	mls	r7, r3, r1, r6
 8008f7a:	5dc7      	ldrb	r7, [r0, r7]
 8008f7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f80:	4637      	mov	r7, r6
 8008f82:	42bb      	cmp	r3, r7
 8008f84:	460e      	mov	r6, r1
 8008f86:	d9f4      	bls.n	8008f72 <_printf_i+0x11a>
 8008f88:	2b08      	cmp	r3, #8
 8008f8a:	d10b      	bne.n	8008fa4 <_printf_i+0x14c>
 8008f8c:	6823      	ldr	r3, [r4, #0]
 8008f8e:	07de      	lsls	r6, r3, #31
 8008f90:	d508      	bpl.n	8008fa4 <_printf_i+0x14c>
 8008f92:	6923      	ldr	r3, [r4, #16]
 8008f94:	6861      	ldr	r1, [r4, #4]
 8008f96:	4299      	cmp	r1, r3
 8008f98:	bfde      	ittt	le
 8008f9a:	2330      	movle	r3, #48	; 0x30
 8008f9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008fa0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008fa4:	1b52      	subs	r2, r2, r5
 8008fa6:	6122      	str	r2, [r4, #16]
 8008fa8:	f8cd a000 	str.w	sl, [sp]
 8008fac:	464b      	mov	r3, r9
 8008fae:	aa03      	add	r2, sp, #12
 8008fb0:	4621      	mov	r1, r4
 8008fb2:	4640      	mov	r0, r8
 8008fb4:	f7ff fee2 	bl	8008d7c <_printf_common>
 8008fb8:	3001      	adds	r0, #1
 8008fba:	d14c      	bne.n	8009056 <_printf_i+0x1fe>
 8008fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc0:	b004      	add	sp, #16
 8008fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fc6:	4835      	ldr	r0, [pc, #212]	; (800909c <_printf_i+0x244>)
 8008fc8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008fcc:	6829      	ldr	r1, [r5, #0]
 8008fce:	6823      	ldr	r3, [r4, #0]
 8008fd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8008fd4:	6029      	str	r1, [r5, #0]
 8008fd6:	061d      	lsls	r5, r3, #24
 8008fd8:	d514      	bpl.n	8009004 <_printf_i+0x1ac>
 8008fda:	07df      	lsls	r7, r3, #31
 8008fdc:	bf44      	itt	mi
 8008fde:	f043 0320 	orrmi.w	r3, r3, #32
 8008fe2:	6023      	strmi	r3, [r4, #0]
 8008fe4:	b91e      	cbnz	r6, 8008fee <_printf_i+0x196>
 8008fe6:	6823      	ldr	r3, [r4, #0]
 8008fe8:	f023 0320 	bic.w	r3, r3, #32
 8008fec:	6023      	str	r3, [r4, #0]
 8008fee:	2310      	movs	r3, #16
 8008ff0:	e7b0      	b.n	8008f54 <_printf_i+0xfc>
 8008ff2:	6823      	ldr	r3, [r4, #0]
 8008ff4:	f043 0320 	orr.w	r3, r3, #32
 8008ff8:	6023      	str	r3, [r4, #0]
 8008ffa:	2378      	movs	r3, #120	; 0x78
 8008ffc:	4828      	ldr	r0, [pc, #160]	; (80090a0 <_printf_i+0x248>)
 8008ffe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009002:	e7e3      	b.n	8008fcc <_printf_i+0x174>
 8009004:	0659      	lsls	r1, r3, #25
 8009006:	bf48      	it	mi
 8009008:	b2b6      	uxthmi	r6, r6
 800900a:	e7e6      	b.n	8008fda <_printf_i+0x182>
 800900c:	4615      	mov	r5, r2
 800900e:	e7bb      	b.n	8008f88 <_printf_i+0x130>
 8009010:	682b      	ldr	r3, [r5, #0]
 8009012:	6826      	ldr	r6, [r4, #0]
 8009014:	6961      	ldr	r1, [r4, #20]
 8009016:	1d18      	adds	r0, r3, #4
 8009018:	6028      	str	r0, [r5, #0]
 800901a:	0635      	lsls	r5, r6, #24
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	d501      	bpl.n	8009024 <_printf_i+0x1cc>
 8009020:	6019      	str	r1, [r3, #0]
 8009022:	e002      	b.n	800902a <_printf_i+0x1d2>
 8009024:	0670      	lsls	r0, r6, #25
 8009026:	d5fb      	bpl.n	8009020 <_printf_i+0x1c8>
 8009028:	8019      	strh	r1, [r3, #0]
 800902a:	2300      	movs	r3, #0
 800902c:	6123      	str	r3, [r4, #16]
 800902e:	4615      	mov	r5, r2
 8009030:	e7ba      	b.n	8008fa8 <_printf_i+0x150>
 8009032:	682b      	ldr	r3, [r5, #0]
 8009034:	1d1a      	adds	r2, r3, #4
 8009036:	602a      	str	r2, [r5, #0]
 8009038:	681d      	ldr	r5, [r3, #0]
 800903a:	6862      	ldr	r2, [r4, #4]
 800903c:	2100      	movs	r1, #0
 800903e:	4628      	mov	r0, r5
 8009040:	f7f7 f8a6 	bl	8000190 <memchr>
 8009044:	b108      	cbz	r0, 800904a <_printf_i+0x1f2>
 8009046:	1b40      	subs	r0, r0, r5
 8009048:	6060      	str	r0, [r4, #4]
 800904a:	6863      	ldr	r3, [r4, #4]
 800904c:	6123      	str	r3, [r4, #16]
 800904e:	2300      	movs	r3, #0
 8009050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009054:	e7a8      	b.n	8008fa8 <_printf_i+0x150>
 8009056:	6923      	ldr	r3, [r4, #16]
 8009058:	462a      	mov	r2, r5
 800905a:	4649      	mov	r1, r9
 800905c:	4640      	mov	r0, r8
 800905e:	47d0      	blx	sl
 8009060:	3001      	adds	r0, #1
 8009062:	d0ab      	beq.n	8008fbc <_printf_i+0x164>
 8009064:	6823      	ldr	r3, [r4, #0]
 8009066:	079b      	lsls	r3, r3, #30
 8009068:	d413      	bmi.n	8009092 <_printf_i+0x23a>
 800906a:	68e0      	ldr	r0, [r4, #12]
 800906c:	9b03      	ldr	r3, [sp, #12]
 800906e:	4298      	cmp	r0, r3
 8009070:	bfb8      	it	lt
 8009072:	4618      	movlt	r0, r3
 8009074:	e7a4      	b.n	8008fc0 <_printf_i+0x168>
 8009076:	2301      	movs	r3, #1
 8009078:	4632      	mov	r2, r6
 800907a:	4649      	mov	r1, r9
 800907c:	4640      	mov	r0, r8
 800907e:	47d0      	blx	sl
 8009080:	3001      	adds	r0, #1
 8009082:	d09b      	beq.n	8008fbc <_printf_i+0x164>
 8009084:	3501      	adds	r5, #1
 8009086:	68e3      	ldr	r3, [r4, #12]
 8009088:	9903      	ldr	r1, [sp, #12]
 800908a:	1a5b      	subs	r3, r3, r1
 800908c:	42ab      	cmp	r3, r5
 800908e:	dcf2      	bgt.n	8009076 <_printf_i+0x21e>
 8009090:	e7eb      	b.n	800906a <_printf_i+0x212>
 8009092:	2500      	movs	r5, #0
 8009094:	f104 0619 	add.w	r6, r4, #25
 8009098:	e7f5      	b.n	8009086 <_printf_i+0x22e>
 800909a:	bf00      	nop
 800909c:	08009595 	.word	0x08009595
 80090a0:	080095a6 	.word	0x080095a6

080090a4 <_sbrk_r>:
 80090a4:	b538      	push	{r3, r4, r5, lr}
 80090a6:	4d06      	ldr	r5, [pc, #24]	; (80090c0 <_sbrk_r+0x1c>)
 80090a8:	2300      	movs	r3, #0
 80090aa:	4604      	mov	r4, r0
 80090ac:	4608      	mov	r0, r1
 80090ae:	602b      	str	r3, [r5, #0]
 80090b0:	f7f8 fefe 	bl	8001eb0 <_sbrk>
 80090b4:	1c43      	adds	r3, r0, #1
 80090b6:	d102      	bne.n	80090be <_sbrk_r+0x1a>
 80090b8:	682b      	ldr	r3, [r5, #0]
 80090ba:	b103      	cbz	r3, 80090be <_sbrk_r+0x1a>
 80090bc:	6023      	str	r3, [r4, #0]
 80090be:	bd38      	pop	{r3, r4, r5, pc}
 80090c0:	20000588 	.word	0x20000588

080090c4 <memmove>:
 80090c4:	4288      	cmp	r0, r1
 80090c6:	b510      	push	{r4, lr}
 80090c8:	eb01 0402 	add.w	r4, r1, r2
 80090cc:	d902      	bls.n	80090d4 <memmove+0x10>
 80090ce:	4284      	cmp	r4, r0
 80090d0:	4623      	mov	r3, r4
 80090d2:	d807      	bhi.n	80090e4 <memmove+0x20>
 80090d4:	1e43      	subs	r3, r0, #1
 80090d6:	42a1      	cmp	r1, r4
 80090d8:	d008      	beq.n	80090ec <memmove+0x28>
 80090da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090e2:	e7f8      	b.n	80090d6 <memmove+0x12>
 80090e4:	4402      	add	r2, r0
 80090e6:	4601      	mov	r1, r0
 80090e8:	428a      	cmp	r2, r1
 80090ea:	d100      	bne.n	80090ee <memmove+0x2a>
 80090ec:	bd10      	pop	{r4, pc}
 80090ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090f6:	e7f7      	b.n	80090e8 <memmove+0x24>

080090f8 <__malloc_lock>:
 80090f8:	4801      	ldr	r0, [pc, #4]	; (8009100 <__malloc_lock+0x8>)
 80090fa:	f7ff bc4d 	b.w	8008998 <__retarget_lock_acquire_recursive>
 80090fe:	bf00      	nop
 8009100:	2000057c 	.word	0x2000057c

08009104 <__malloc_unlock>:
 8009104:	4801      	ldr	r0, [pc, #4]	; (800910c <__malloc_unlock+0x8>)
 8009106:	f7ff bc48 	b.w	800899a <__retarget_lock_release_recursive>
 800910a:	bf00      	nop
 800910c:	2000057c 	.word	0x2000057c

08009110 <_free_r>:
 8009110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009112:	2900      	cmp	r1, #0
 8009114:	d044      	beq.n	80091a0 <_free_r+0x90>
 8009116:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800911a:	9001      	str	r0, [sp, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	f1a1 0404 	sub.w	r4, r1, #4
 8009122:	bfb8      	it	lt
 8009124:	18e4      	addlt	r4, r4, r3
 8009126:	f7ff ffe7 	bl	80090f8 <__malloc_lock>
 800912a:	4a1e      	ldr	r2, [pc, #120]	; (80091a4 <_free_r+0x94>)
 800912c:	9801      	ldr	r0, [sp, #4]
 800912e:	6813      	ldr	r3, [r2, #0]
 8009130:	b933      	cbnz	r3, 8009140 <_free_r+0x30>
 8009132:	6063      	str	r3, [r4, #4]
 8009134:	6014      	str	r4, [r2, #0]
 8009136:	b003      	add	sp, #12
 8009138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800913c:	f7ff bfe2 	b.w	8009104 <__malloc_unlock>
 8009140:	42a3      	cmp	r3, r4
 8009142:	d908      	bls.n	8009156 <_free_r+0x46>
 8009144:	6825      	ldr	r5, [r4, #0]
 8009146:	1961      	adds	r1, r4, r5
 8009148:	428b      	cmp	r3, r1
 800914a:	bf01      	itttt	eq
 800914c:	6819      	ldreq	r1, [r3, #0]
 800914e:	685b      	ldreq	r3, [r3, #4]
 8009150:	1949      	addeq	r1, r1, r5
 8009152:	6021      	streq	r1, [r4, #0]
 8009154:	e7ed      	b.n	8009132 <_free_r+0x22>
 8009156:	461a      	mov	r2, r3
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	b10b      	cbz	r3, 8009160 <_free_r+0x50>
 800915c:	42a3      	cmp	r3, r4
 800915e:	d9fa      	bls.n	8009156 <_free_r+0x46>
 8009160:	6811      	ldr	r1, [r2, #0]
 8009162:	1855      	adds	r5, r2, r1
 8009164:	42a5      	cmp	r5, r4
 8009166:	d10b      	bne.n	8009180 <_free_r+0x70>
 8009168:	6824      	ldr	r4, [r4, #0]
 800916a:	4421      	add	r1, r4
 800916c:	1854      	adds	r4, r2, r1
 800916e:	42a3      	cmp	r3, r4
 8009170:	6011      	str	r1, [r2, #0]
 8009172:	d1e0      	bne.n	8009136 <_free_r+0x26>
 8009174:	681c      	ldr	r4, [r3, #0]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	6053      	str	r3, [r2, #4]
 800917a:	4421      	add	r1, r4
 800917c:	6011      	str	r1, [r2, #0]
 800917e:	e7da      	b.n	8009136 <_free_r+0x26>
 8009180:	d902      	bls.n	8009188 <_free_r+0x78>
 8009182:	230c      	movs	r3, #12
 8009184:	6003      	str	r3, [r0, #0]
 8009186:	e7d6      	b.n	8009136 <_free_r+0x26>
 8009188:	6825      	ldr	r5, [r4, #0]
 800918a:	1961      	adds	r1, r4, r5
 800918c:	428b      	cmp	r3, r1
 800918e:	bf04      	itt	eq
 8009190:	6819      	ldreq	r1, [r3, #0]
 8009192:	685b      	ldreq	r3, [r3, #4]
 8009194:	6063      	str	r3, [r4, #4]
 8009196:	bf04      	itt	eq
 8009198:	1949      	addeq	r1, r1, r5
 800919a:	6021      	streq	r1, [r4, #0]
 800919c:	6054      	str	r4, [r2, #4]
 800919e:	e7ca      	b.n	8009136 <_free_r+0x26>
 80091a0:	b003      	add	sp, #12
 80091a2:	bd30      	pop	{r4, r5, pc}
 80091a4:	20000580 	.word	0x20000580

080091a8 <_realloc_r>:
 80091a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091ac:	4680      	mov	r8, r0
 80091ae:	4614      	mov	r4, r2
 80091b0:	460e      	mov	r6, r1
 80091b2:	b921      	cbnz	r1, 80091be <_realloc_r+0x16>
 80091b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091b8:	4611      	mov	r1, r2
 80091ba:	f7ff bc0f 	b.w	80089dc <_malloc_r>
 80091be:	b92a      	cbnz	r2, 80091cc <_realloc_r+0x24>
 80091c0:	f7ff ffa6 	bl	8009110 <_free_r>
 80091c4:	4625      	mov	r5, r4
 80091c6:	4628      	mov	r0, r5
 80091c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091cc:	f000 f81b 	bl	8009206 <_malloc_usable_size_r>
 80091d0:	4284      	cmp	r4, r0
 80091d2:	4607      	mov	r7, r0
 80091d4:	d802      	bhi.n	80091dc <_realloc_r+0x34>
 80091d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80091da:	d812      	bhi.n	8009202 <_realloc_r+0x5a>
 80091dc:	4621      	mov	r1, r4
 80091de:	4640      	mov	r0, r8
 80091e0:	f7ff fbfc 	bl	80089dc <_malloc_r>
 80091e4:	4605      	mov	r5, r0
 80091e6:	2800      	cmp	r0, #0
 80091e8:	d0ed      	beq.n	80091c6 <_realloc_r+0x1e>
 80091ea:	42bc      	cmp	r4, r7
 80091ec:	4622      	mov	r2, r4
 80091ee:	4631      	mov	r1, r6
 80091f0:	bf28      	it	cs
 80091f2:	463a      	movcs	r2, r7
 80091f4:	f7ff fb9a 	bl	800892c <memcpy>
 80091f8:	4631      	mov	r1, r6
 80091fa:	4640      	mov	r0, r8
 80091fc:	f7ff ff88 	bl	8009110 <_free_r>
 8009200:	e7e1      	b.n	80091c6 <_realloc_r+0x1e>
 8009202:	4635      	mov	r5, r6
 8009204:	e7df      	b.n	80091c6 <_realloc_r+0x1e>

08009206 <_malloc_usable_size_r>:
 8009206:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800920a:	1f18      	subs	r0, r3, #4
 800920c:	2b00      	cmp	r3, #0
 800920e:	bfbc      	itt	lt
 8009210:	580b      	ldrlt	r3, [r1, r0]
 8009212:	18c0      	addlt	r0, r0, r3
 8009214:	4770      	bx	lr
	...

08009218 <_init>:
 8009218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800921a:	bf00      	nop
 800921c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800921e:	bc08      	pop	{r3}
 8009220:	469e      	mov	lr, r3
 8009222:	4770      	bx	lr

08009224 <_fini>:
 8009224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009226:	bf00      	nop
 8009228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800922a:	bc08      	pop	{r3}
 800922c:	469e      	mov	lr, r3
 800922e:	4770      	bx	lr
