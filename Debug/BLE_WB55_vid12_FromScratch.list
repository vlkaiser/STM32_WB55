
BLE_WB55_vid12_FromScratch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2f8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000032f0  0800a438  0800a438  0001a438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d728  0800d728  0001d728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d730  0800d730  0001d730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d734  0800d734  0001d734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  20000004  0800d738  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200000a4  0800d7d8  000200a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003e  20000140  0800d871  00020140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000180  0800d8af  00020180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 00000084  20000194  0800d8c0  00020194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000007e8  20000218  0800d944  00020218  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000a00  0800d944  00020a00  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 17 .debug_info   00030b35  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00006157  00000000  00000000  00050d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002a38  00000000  00000000  00056ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002768  00000000  00000000  00059910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002d53d  00000000  00000000  0005c078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0002f354  00000000  00000000  000895b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000f9e2e  00000000  00000000  000b8909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  001b2737  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000b4ec  00000000  00000000  001b2788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000218 	.word	0x20000218
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a420 	.word	0x0800a420

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000021c 	.word	0x2000021c
 800017c:	0800a420 	.word	0x0800a420

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <drawBitmap>:
*/
/**************************************************************************/

void drawBitmap(int16_t x, int16_t y, uint8_t *bitmap, int16_t w,
        int16_t h, uint16_t color, uint16_t bg)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
 800053a:	60ba      	str	r2, [r7, #8]
 800053c:	461a      	mov	r2, r3
 800053e:	4603      	mov	r3, r0
 8000540:	81fb      	strh	r3, [r7, #14]
 8000542:	460b      	mov	r3, r1
 8000544:	81bb      	strh	r3, [r7, #12]
 8000546:	4613      	mov	r3, r2
 8000548:	80fb      	strh	r3, [r7, #6]

    ssd1306_Fill(bg);		//Clear the screen
 800054a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800054c:	b2db      	uxtb	r3, r3
 800054e:	4618      	mov	r0, r3
 8000550:	f001 fe02 	bl	8002158 <ssd1306_Fill>

	int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000554:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000558:	3307      	adds	r3, #7
 800055a:	2b00      	cmp	r3, #0
 800055c:	da00      	bge.n	8000560 <drawBitmap+0x2c>
 800055e:	3307      	adds	r3, #7
 8000560:	10db      	asrs	r3, r3, #3
 8000562:	833b      	strh	r3, [r7, #24]
	uint8_t byte = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	75fb      	strb	r3, [r7, #23]

	//Height
	for (int16_t j = 0; j < h; j++, y++)
 8000568:	2300      	movs	r3, #0
 800056a:	83fb      	strh	r3, [r7, #30]
 800056c:	e068      	b.n	8000640 <drawBitmap+0x10c>
	{
		//Width
		for (int16_t i = 0; i < w; i++)
 800056e:	2300      	movs	r3, #0
 8000570:	83bb      	strh	r3, [r7, #28]
 8000572:	e053      	b.n	800061c <drawBitmap+0xe8>
		{
				byte = bitmap[j * byteWidth + i / 8];		// Row/Col of byte
 8000574:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000578:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800057c:	fb03 f202 	mul.w	r2, r3, r2
 8000580:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000584:	2b00      	cmp	r3, #0
 8000586:	da00      	bge.n	800058a <drawBitmap+0x56>
 8000588:	3307      	adds	r3, #7
 800058a:	10db      	asrs	r3, r3, #3
 800058c:	b21b      	sxth	r3, r3
 800058e:	4413      	add	r3, r2
 8000590:	461a      	mov	r2, r3
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4413      	add	r3, r2
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	75fb      	strb	r3, [r7, #23]

				for (int8_t cnt = 0; cnt < 8; cnt ++)
 800059a:	2300      	movs	r3, #0
 800059c:	76fb      	strb	r3, [r7, #27]
 800059e:	e02f      	b.n	8000600 <drawBitmap+0xcc>
				{
					//Shift left to right through byte to get each bit if the return val > 0, there is a 1 in that space.
					if ( (byte & (0x80 >> cnt)) == 0)
 80005a0:	7dfa      	ldrb	r2, [r7, #23]
 80005a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80005a6:	2180      	movs	r1, #128	; 0x80
 80005a8:	fa41 f303 	asr.w	r3, r1, r3
 80005ac:	4013      	ands	r3, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d110      	bne.n	80005d4 <drawBitmap+0xa0>
					{
						//  If 0, Background
						ssd1306_DrawPixel( x + i + cnt, y, bg);
 80005b2:	89fb      	ldrh	r3, [r7, #14]
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	8bbb      	ldrh	r3, [r7, #28]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	4413      	add	r3, r2
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	7efb      	ldrb	r3, [r7, #27]
 80005c0:	4413      	add	r3, r2
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	89ba      	ldrh	r2, [r7, #12]
 80005c6:	b2d1      	uxtb	r1, r2
 80005c8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80005ca:	b2d2      	uxtb	r2, r2
 80005cc:	4618      	mov	r0, r3
 80005ce:	f001 fe0f 	bl	80021f0 <ssd1306_DrawPixel>
 80005d2:	e00f      	b.n	80005f4 <drawBitmap+0xc0>
					}
					else
					{
						//if not 0, Pixel Color
						ssd1306_DrawPixel( x + i + cnt, y, color );
 80005d4:	89fb      	ldrh	r3, [r7, #14]
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	8bbb      	ldrh	r3, [r7, #28]
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	4413      	add	r3, r2
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	7efb      	ldrb	r3, [r7, #27]
 80005e2:	4413      	add	r3, r2
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	89ba      	ldrh	r2, [r7, #12]
 80005e8:	b2d1      	uxtb	r1, r2
 80005ea:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80005ec:	b2d2      	uxtb	r2, r2
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 fdfe 	bl	80021f0 <ssd1306_DrawPixel>
				for (int8_t cnt = 0; cnt < 8; cnt ++)
 80005f4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	3301      	adds	r3, #1
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	76fb      	strb	r3, [r7, #27]
 8000600:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000604:	2b07      	cmp	r3, #7
 8000606:	ddcb      	ble.n	80005a0 <drawBitmap+0x6c>
					}
				}
				// Increment x-pos by 1 byte
				i = i + 7;
 8000608:	8bbb      	ldrh	r3, [r7, #28]
 800060a:	3307      	adds	r3, #7
 800060c:	b29b      	uxth	r3, r3
 800060e:	83bb      	strh	r3, [r7, #28]
		for (int16_t i = 0; i < w; i++)
 8000610:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000614:	b29b      	uxth	r3, r3
 8000616:	3301      	adds	r3, #1
 8000618:	b29b      	uxth	r3, r3
 800061a:	83bb      	strh	r3, [r7, #28]
 800061c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000620:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000624:	429a      	cmp	r2, r3
 8000626:	dba5      	blt.n	8000574 <drawBitmap+0x40>
	for (int16_t j = 0; j < h; j++, y++)
 8000628:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800062c:	b29b      	uxth	r3, r3
 800062e:	3301      	adds	r3, #1
 8000630:	b29b      	uxth	r3, r3
 8000632:	83fb      	strh	r3, [r7, #30]
 8000634:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000638:	b29b      	uxth	r3, r3
 800063a:	3301      	adds	r3, #1
 800063c:	b29b      	uxth	r3, r3
 800063e:	81bb      	strh	r3, [r7, #12]
 8000640:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8000644:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000648:	429a      	cmp	r2, r3
 800064a:	db90      	blt.n	800056e <drawBitmap+0x3a>
			}
		}

	  ssd1306_UpdateScreen();
 800064c:	f001 fda8 	bl	80021a0 <ssd1306_UpdateScreen>
	  return;
 8000650:	bf00      	nop

}
 8000652:	3720      	adds	r7, #32
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <writeLargeFont>:

    @note	If you don't want overlapping text, clear the screen.
*/
/**************************************************************************/
void writeLargeFont(int16_t x, int16_t y, uint16_t color, char* str)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4603      	mov	r3, r0
 8000662:	81fb      	strh	r3, [r7, #14]
 8000664:	460b      	mov	r3, r1
 8000666:	81bb      	strh	r3, [r7, #12]
 8000668:	4613      	mov	r3, r2
 800066a:	817b      	strh	r3, [r7, #10]
	ssd1306_SetCursor(x, y);
 800066c:	89fb      	ldrh	r3, [r7, #14]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	89ba      	ldrh	r2, [r7, #12]
 8000672:	b2d2      	uxtb	r2, r2
 8000674:	4611      	mov	r1, r2
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fec8 	bl	800240c <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_16x26, color);
 800067c:	897b      	ldrh	r3, [r7, #10]
 800067e:	b2db      	uxtb	r3, r3
 8000680:	4a05      	ldr	r2, [pc, #20]	; (8000698 <writeLargeFont+0x40>)
 8000682:	ca06      	ldmia	r2, {r1, r2}
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f001 fe9b 	bl	80023c0 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 800068a:	f001 fd89 	bl	80021a0 <ssd1306_UpdateScreen>
	return;
 800068e:	bf00      	nop
}
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	2000001c 	.word	0x2000001c

0800069c <writeMedFont>:

    @note	If you don't want overlapping text, clear the screen.
*/
/**************************************************************************/
void writeMedFont(int16_t x, int16_t y, uint16_t color, char* str)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4603      	mov	r3, r0
 80006a6:	81fb      	strh	r3, [r7, #14]
 80006a8:	460b      	mov	r3, r1
 80006aa:	81bb      	strh	r3, [r7, #12]
 80006ac:	4613      	mov	r3, r2
 80006ae:	817b      	strh	r3, [r7, #10]
	ssd1306_SetCursor(x, y);
 80006b0:	89fb      	ldrh	r3, [r7, #14]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	89ba      	ldrh	r2, [r7, #12]
 80006b6:	b2d2      	uxtb	r2, r2
 80006b8:	4611      	mov	r1, r2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 fea6 	bl	800240c <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_11x18, color);
 80006c0:	897b      	ldrh	r3, [r7, #10]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	4a05      	ldr	r2, [pc, #20]	; (80006dc <writeMedFont+0x40>)
 80006c6:	ca06      	ldmia	r2, {r1, r2}
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f001 fe79 	bl	80023c0 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 80006ce:	f001 fd67 	bl	80021a0 <ssd1306_UpdateScreen>
	return;
 80006d2:	bf00      	nop
}
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000014 	.word	0x20000014

080006e0 <writeSmFont>:

    @note	If you don't want overlapping text, clear the screen.
*/
/**************************************************************************/
void writeSmFont(int16_t x, int16_t y, uint16_t color, char* str)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4603      	mov	r3, r0
 80006ea:	81fb      	strh	r3, [r7, #14]
 80006ec:	460b      	mov	r3, r1
 80006ee:	81bb      	strh	r3, [r7, #12]
 80006f0:	4613      	mov	r3, r2
 80006f2:	817b      	strh	r3, [r7, #10]
	ssd1306_SetCursor(x, y);
 80006f4:	89fb      	ldrh	r3, [r7, #14]
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	89ba      	ldrh	r2, [r7, #12]
 80006fa:	b2d2      	uxtb	r2, r2
 80006fc:	4611      	mov	r1, r2
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 fe84 	bl	800240c <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, color);
 8000704:	897b      	ldrh	r3, [r7, #10]
 8000706:	b2db      	uxtb	r3, r3
 8000708:	4a05      	ldr	r2, [pc, #20]	; (8000720 <writeSmFont+0x40>)
 800070a:	ca06      	ldmia	r2, {r1, r2}
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f001 fe57 	bl	80023c0 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8000712:	f001 fd45 	bl	80021a0 <ssd1306_UpdateScreen>
	return;
 8000716:	bf00      	nop
}
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	2000000c 	.word	0x2000000c

08000724 <writeTinyFont>:

    @note	If you don't want overlapping text, clear the screen.
*/
/**************************************************************************/
void writeTinyFont(int16_t x, int16_t y, uint16_t color, char* str)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	4603      	mov	r3, r0
 800072e:	81fb      	strh	r3, [r7, #14]
 8000730:	460b      	mov	r3, r1
 8000732:	81bb      	strh	r3, [r7, #12]
 8000734:	4613      	mov	r3, r2
 8000736:	817b      	strh	r3, [r7, #10]
	ssd1306_SetCursor(x, y);
 8000738:	89fb      	ldrh	r3, [r7, #14]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	89ba      	ldrh	r2, [r7, #12]
 800073e:	b2d2      	uxtb	r2, r2
 8000740:	4611      	mov	r1, r2
 8000742:	4618      	mov	r0, r3
 8000744:	f001 fe62 	bl	800240c <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_6x8, color);
 8000748:	897b      	ldrh	r3, [r7, #10]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	4a05      	ldr	r2, [pc, #20]	; (8000764 <writeTinyFont+0x40>)
 800074e:	ca06      	ldmia	r2, {r1, r2}
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f001 fe35 	bl	80023c0 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8000756:	f001 fd23 	bl	80021a0 <ssd1306_UpdateScreen>
	return;
 800075a:	bf00      	nop
}
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000004 	.word	0x20000004

08000768 <clearScreen>:

void clearScreen(uint16_t color)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	80fb      	strh	r3, [r7, #6]
	ssd1306_Fill(color);
 8000772:	88fb      	ldrh	r3, [r7, #6]
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4618      	mov	r0, r3
 8000778:	f001 fcee 	bl	8002158 <ssd1306_Fill>
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000784:	b5b0      	push	{r4, r5, r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <APPD_EnableCPU2+0x34>)
 800078c:	1d3c      	adds	r4, r7, #4
 800078e:	461d      	mov	r5, r3
 8000790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000794:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000798:	c403      	stmia	r4!, {r0, r1}
 800079a:	8022      	strh	r2, [r4, #0]
 800079c:	3402      	adds	r4, #2
 800079e:	0c13      	lsrs	r3, r2, #16
 80007a0:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80007a2:	f007 fecd 	bl	8008540 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	4618      	mov	r0, r3
 80007aa:	f007 f968 	bl	8007a7e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80007ae:	bf00      	nop
}
 80007b0:	3720      	adds	r7, #32
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bdb0      	pop	{r4, r5, r7, pc}
 80007b6:	bf00      	nop
 80007b8:	0800a438 	.word	0x0800a438

080007bc <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <LL_C2_PWR_SetPowerMode+0x28>)
 80007c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007ca:	f023 0207 	bic.w	r2, r3, #7
 80007ce:	4905      	ldr	r1, [pc, #20]	; (80007e4 <LL_C2_PWR_SetPowerMode+0x28>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	58000400 	.word	0x58000400

080007e8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <LL_EXTI_EnableIT_32_63+0x24>)
 80007f2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80007f6:	4905      	ldr	r1, [pc, #20]	; (800080c <LL_EXTI_EnableIT_32_63+0x24>)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4313      	orrs	r3, r2
 80007fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	58000800 	.word	0x58000800

08000810 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800081c:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800081e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000826:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800082a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	021b      	lsls	r3, r3, #8
 8000832:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000836:	4313      	orrs	r3, r2
 8000838:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	cafecafe 	.word	0xcafecafe

0800084c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800085e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4313      	orrs	r3, r2
 8000866:	608b      	str	r3, [r1, #8]
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800087c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000880:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800089a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800089e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80008bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80008cc:	d101      	bne.n	80008d2 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80008ce:	2301      	movs	r3, #1
 80008d0:	e000      	b.n	80008d4 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80008d2:	2300      	movs	r3, #0
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80008e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80008f2:	d101      	bne.n	80008f8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80008f4:	2301      	movs	r3, #1
 80008f6:	e000      	b.n	80008fa <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800090c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000910:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000912:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4313      	orrs	r3, r2
 800091a:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800091c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000920:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4013      	ands	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000928:	68fb      	ldr	r3, [r7, #12]
}
 800092a:	bf00      	nop
 800092c:	3714      	adds	r7, #20
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
	...

08000938 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <LL_DBGMCU_GetRevisionID+0x18>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	0c1b      	lsrs	r3, r3, #16
 8000942:	b29b      	uxth	r3, r3
}
 8000944:	4618      	mov	r0, r3
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e0042000 	.word	0xe0042000

08000954 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	685a      	ldr	r2, [r3, #4]
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	041b      	lsls	r3, r3, #16
 8000966:	431a      	orrs	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	605a      	str	r2, [r3, #4]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	685a      	ldr	r2, [r3, #4]
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	431a      	orrs	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	605a      	str	r2, [r3, #4]
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800099a:	b480      	push	{r7}
 800099c:	b083      	sub	sp, #12
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
 80009a2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	695a      	ldr	r2, [r3, #20]
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	041b      	lsls	r3, r3, #16
 80009ac:	431a      	orrs	r2, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	615a      	str	r2, [r3, #20]
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009be:	b480      	push	{r7}
 80009c0:	b083      	sub	sp, #12
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	695a      	ldr	r2, [r3, #20]
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	431a      	orrs	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	615a      	str	r2, [r3, #20]
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	683a      	ldr	r2, [r7, #0]
 80009ee:	609a      	str	r2, [r3, #8]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	683a      	ldr	r2, [r7, #0]
 8000a0a:	619a      	str	r2, [r3, #24]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <LL_LPM_EnableSleep+0x1c>)
 8000a1e:	691b      	ldr	r3, [r3, #16]
 8000a20:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <LL_LPM_EnableSleep+0x1c>)
 8000a22:	f023 0304 	bic.w	r3, r3, #4
 8000a26:	6113      	str	r3, [r2, #16]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	22ff      	movs	r2, #255	; 0xff
 8000a44:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a52:	b480      	push	{r7}
 8000a54:	b083      	sub	sp, #12
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	22ca      	movs	r2, #202	; 0xca
 8000a5e:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2253      	movs	r2, #83	; 0x53
 8000a64:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000a72:	b480      	push	{r7}
 8000a74:	b083      	sub	sp, #12
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
 8000a7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	f023 0207 	bic.w	r2, r3, #7
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	431a      	orrs	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <MX_APPE_Config+0x18>)
 8000a9e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000aa2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 8000aa4:	f000 f824 	bl	8000af0 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000aa8:	f000 f864 	bl	8000b74 <Config_HSE>

  return;
 8000aac:	bf00      	nop
}
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	58004000 	.word	0x58004000

08000ab4 <MX_APPE_Init>:

void MX_APPE_Init( void )
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  System_Init( );       /**< System initialization */
 8000ab8:	f000 f870 	bl	8000b9c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000abc:	f000 f888 	bl	8000bd0 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000ac0:	4903      	ldr	r1, [pc, #12]	; (8000ad0 <MX_APPE_Init+0x1c>)
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f000 fde4 	bl	8001690 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000ac8:	f000 f890 	bl	8000bec <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000acc:	bf00      	nop
}
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200002c8 	.word	0x200002c8

08000ad4 <Init_Smps>:

void Init_Smps( void )
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  return;
 8000ad8:	bf00      	nop
}
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <Init_Exti>:

void Init_Exti( void )
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63( LL_EXTI_LINE_36 & LL_EXTI_LINE_38 );
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f7ff fe7e 	bl	80007e8 <LL_EXTI_EnableIT_32_63>

  return;
 8000aec:	bf00      	nop
}
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8000af4:	f000 f804 	bl	8000b00 <Reset_BackupDomain>

  Reset_IPCC();
 8000af8:	f000 f81a 	bl	8000b30 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW */

  return;
 8000afc:	bf00      	nop
}
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000b04:	f7ff fed8 	bl	80008b8 <LL_RCC_IsActiveFlag_PINRST>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d00d      	beq.n	8000b2a <Reset_BackupDomain+0x2a>
 8000b0e:	f7ff fee6 	bl	80008de <LL_RCC_IsActiveFlag_SFTRST>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d108      	bne.n	8000b2a <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000b18:	f003 f812 	bl	8003b40 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000b1c:	f003 f810 	bl	8003b40 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000b20:	f7ff fea8 	bl	8000874 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000b24:	f7ff feb7 	bl	8000896 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
}
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000b34:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b38:	f7ff fee4 	bl	8000904 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000b3c:	213f      	movs	r1, #63	; 0x3f
 8000b3e:	480c      	ldr	r0, [pc, #48]	; (8000b70 <Reset_IPCC+0x40>)
 8000b40:	f7ff ff4e 	bl	80009e0 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000b44:	213f      	movs	r1, #63	; 0x3f
 8000b46:	480a      	ldr	r0, [pc, #40]	; (8000b70 <Reset_IPCC+0x40>)
 8000b48:	f7ff ff58 	bl	80009fc <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000b4c:	213f      	movs	r1, #63	; 0x3f
 8000b4e:	4808      	ldr	r0, [pc, #32]	; (8000b70 <Reset_IPCC+0x40>)
 8000b50:	f7ff ff00 	bl	8000954 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000b54:	213f      	movs	r1, #63	; 0x3f
 8000b56:	4806      	ldr	r0, [pc, #24]	; (8000b70 <Reset_IPCC+0x40>)
 8000b58:	f7ff ff1f 	bl	800099a <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000b5c:	213f      	movs	r1, #63	; 0x3f
 8000b5e:	4804      	ldr	r0, [pc, #16]	; (8000b70 <Reset_IPCC+0x40>)
 8000b60:	f7ff ff0a 	bl	8000978 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000b64:	213f      	movs	r1, #63	; 0x3f
 8000b66:	4802      	ldr	r0, [pc, #8]	; (8000b70 <Reset_IPCC+0x40>)
 8000b68:	f7ff ff29 	bl	80009be <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000b6c:	bf00      	nop
}
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	58000c00 	.word	0x58000c00

08000b74 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f007 fd6c 	bl	8008658 <OTP_Read>
 8000b80:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d005      	beq.n	8000b94 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	799b      	ldrb	r3, [r3, #6]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fe3f 	bl	8000810 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000b92:	bf00      	nop
 8000b94:	bf00      	nop
}
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <System_Init>:

static void System_Init( void )
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  Init_Smps( );
 8000ba0:	f7ff ff98 	bl	8000ad4 <Init_Smps>

  Init_Exti( );
 8000ba4:	f7ff ff9d 	bl	8000ae2 <Init_Exti>

  Init_Rtc( );
 8000ba8:	f000 f802 	bl	8000bb0 <Init_Rtc>

  return;
 8000bac:	bf00      	nop
}
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <Init_Rtc>:

static void Init_Rtc( void )
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000bb4:	4805      	ldr	r0, [pc, #20]	; (8000bcc <Init_Rtc+0x1c>)
 8000bb6:	f7ff ff4c 	bl	8000a52 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4803      	ldr	r0, [pc, #12]	; (8000bcc <Init_Rtc+0x1c>)
 8000bbe:	f7ff ff58 	bl	8000a72 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000bc2:	4802      	ldr	r0, [pc, #8]	; (8000bcc <Init_Rtc+0x1c>)
 8000bc4:	f7ff ff38 	bl	8000a38 <LL_RTC_EnableWriteProtection>

  return;
 8000bc8:	bf00      	nop
}
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40002800 	.word	0x40002800

08000bd0 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000bd4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000bd8:	f7ff fe38 	bl	800084c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000bdc:	f008 fd10 	bl	8009600 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000be0:	2004      	movs	r0, #4
 8000be2:	f7ff fdeb 	bl	80007bc <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000be6:	bf00      	nop
}
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000bf2:	f007 faef 	bl	80081d4 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000bf6:	4a11      	ldr	r2, [pc, #68]	; (8000c3c <appe_Tl_Init+0x50>)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2008      	movs	r0, #8
 8000bfc:	f008 fe2c 	bl	8009858 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <appe_Tl_Init+0x54>)
 8000c02:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <appe_Tl_Init+0x58>)
 8000c06:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000c08:	463b      	mov	r3, r7
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480e      	ldr	r0, [pc, #56]	; (8000c48 <appe_Tl_Init+0x5c>)
 8000c0e:	f007 f9a7 	bl	8007f60 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <appe_Tl_Init+0x60>)
 8000c14:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <appe_Tl_Init+0x64>)
 8000c18:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <appe_Tl_Init+0x68>)
 8000c1c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000c1e:	f240 533c 	movw	r3, #1340	; 0x53c
 8000c22:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000c24:	f107 0308 	add.w	r3, r7, #8
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f007 fc15 	bl	8008458 <TL_MM_Init>

  TL_Enable();
 8000c2e:	f007 facb 	bl	80081c8 <TL_Enable>

  return;
 8000c32:	bf00      	nop
}
 8000c34:	3720      	adds	r7, #32
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	08007f99 	.word	0x08007f99
 8000c40:	20030724 	.word	0x20030724
 8000c44:	08000c59 	.word	0x08000c59
 8000c48:	08000c71 	.word	0x08000c71
 8000c4c:	2003093c 	.word	0x2003093c
 8000c50:	20030830 	.word	0x20030830
 8000c54:	200301e8 	.word	0x200301e8

08000c58 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000c62:	bf00      	nop
}
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	330b      	adds	r3, #11
 8000c7e:	61fb      	str	r3, [r7, #28]

  /* Read the firmware version of both the wireless firmware and the FUS */
  SHCI_GetWirelessFwInfo( &WirelessInfo );
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	4618      	mov	r0, r3
 8000c86:	f006 ff27 	bl	8007ad8 <SHCI_GetWirelessFwInfo>
  APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
  APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
  APP_DBG_MSG("FUS version %d.%d.%d\n\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

  switch(p_sys_event->subevtcode)
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000c94:	2b07      	cmp	r3, #7
 8000c96:	d81b      	bhi.n	8000cd0 <APPE_SysUserEvtRx+0x60>
 8000c98:	a201      	add	r2, pc, #4	; (adr r2, 8000ca0 <APPE_SysUserEvtRx+0x30>)
 8000c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c9e:	bf00      	nop
 8000ca0:	08000cc1 	.word	0x08000cc1
 8000ca4:	08000cc9 	.word	0x08000cc9
 8000ca8:	08000cd1 	.word	0x08000cd1
 8000cac:	08000cd1 	.word	0x08000cd1
 8000cb0:	08000cd1 	.word	0x08000cd1
 8000cb4:	08000cd1 	.word	0x08000cd1
 8000cb8:	08000cd1 	.word	0x08000cd1
 8000cbc:	08000cd1 	.word	0x08000cd1
  {
  case SHCI_SUB_EVT_CODE_READY:
    APPE_SysEvtReadyProcessing(pPayload);
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f000 f81c 	bl	8000cfe <APPE_SysEvtReadyProcessing>
    break;
 8000cc6:	e004      	b.n	8000cd2 <APPE_SysUserEvtRx+0x62>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APPE_SysEvtError(pPayload);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f000 f807 	bl	8000cdc <APPE_SysEvtError>
    break;
 8000cce:	e000      	b.n	8000cd2 <APPE_SysUserEvtRx+0x62>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_ERASE\n");
    break;

  default:
    break;
 8000cd0:	bf00      	nop
  }

  return;
 8000cd2:	bf00      	nop
}
 8000cd4:	3720      	adds	r7, #32
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop

08000cdc <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( void * pPayload)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	330b      	adds	r3, #11
 8000cea:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	3302      	adds	r3, #2
 8000cf0:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000cf2:	bf00      	nop
}
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void * pPayload )
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b08a      	sub	sp, #40	; 0x28
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	330b      	adds	r3, #11
 8000d1e:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000d20:	6a3b      	ldr	r3, [r7, #32]
 8000d22:	3302      	adds	r3, #2
 8000d24:	61fb      	str	r3, [r7, #28]

  if(p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d117      	bne.n	8000d5e <APPE_SysEvtReadyProcessing+0x60>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2( );
 8000d2e:	f7ff fd29 	bl	8000784 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000d32:	230d      	movs	r3, #13
 8000d34:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000d36:	237f      	movs	r3, #127	; 0x7f
 8000d38:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000d3a:	f7ff fdfd 	bl	8000938 <LL_DBGMCU_GetRevisionID>
 8000d3e:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG("DBGMCU_GetRevisionID= %lx \n\n", RevisionID);

    config_param.RevisionID = RevisionID;
 8000d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 8000d46:	f107 030c 	add.w	r3, r7, #12
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f006 feae 	bl	8007aac <SHCI_C2_Config>

    APP_BLE_Init( );
 8000d50:	f007 fd8c 	bl	800886c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000d54:	2100      	movs	r1, #0
 8000d56:	2001      	movs	r0, #1
 8000d58:	f008 fc64 	bl	8009624 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n");
  }

  return;
 8000d5c:	e007      	b.n	8000d6e <APPE_SysEvtReadyProcessing+0x70>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d103      	bne.n	8000d6e <APPE_SysEvtReadyProcessing+0x70>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	701a      	strb	r2, [r3, #0]
  return;
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
}
 8000d70:	3728      	adds	r7, #40	; 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b084      	sub	sp, #16
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d7e:	f001 fe6b 	bl	8002a58 <HAL_GetTick>
 8000d82:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d8e:	d00a      	beq.n	8000da6 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000d90:	f001 fe7a 	bl	8002a88 <HAL_GetTickFreq>
 8000d94:	4603      	mov	r3, r0
 8000d96:	461a      	mov	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d9e:	e002      	b.n	8000da6 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000da0:	f7ff fe3a 	bl	8000a18 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8000da4:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000da6:	f001 fe57 	bl	8002a58 <HAL_GetTick>
 8000daa:	4602      	mov	r2, r0
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	68fa      	ldr	r2, [r7, #12]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d8f4      	bhi.n	8000da0 <HAL_Delay+0x2a>
  }
}
 8000db6:	bf00      	nop
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc8:	f008 fc5c 	bl	8009684 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8000dd4:	bf00      	nop
}
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
 8000de6:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dec:	f008 fc4a 	bl	8009684 <UTIL_SEQ_Run>

  return;
 8000df0:	bf00      	nop
}
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000e00:	2100      	movs	r1, #0
 8000e02:	2008      	movs	r0, #8
 8000e04:	f008 fd4a 	bl	800989c <UTIL_SEQ_SetTask>
  return;
 8000e08:	bf00      	nop
}
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000e18:	2002      	movs	r0, #2
 8000e1a:	f008 fdab 	bl	8009974 <UTIL_SEQ_SetEvt>
  return;
 8000e1e:	bf00      	nop
}
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000e2e:	2002      	movs	r0, #2
 8000e30:	f008 fdc0 	bl	80099b4 <UTIL_SEQ_WaitEvt>
  return;
 8000e34:	bf00      	nop
}
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <LL_EXTI_EnableIT_0_31>:
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <LL_EXTI_EnableIT_0_31+0x24>)
 8000e46:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000e4a:	4905      	ldr	r1, [pc, #20]	; (8000e60 <LL_EXTI_EnableIT_0_31+0x24>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	58000800 	.word	0x58000800

08000e64 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4904      	ldr	r1, [pc, #16]	; (8000e84 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	600b      	str	r3, [r1, #0]

}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	58000800 	.word	0x58000800

08000e88 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <ReadRtcSsrValue+0x3c>)
 8000e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <ReadRtcSsrValue+0x3c>)
 8000e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000e9e:	e005      	b.n	8000eac <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <ReadRtcSsrValue+0x3c>)
 8000ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d1f5      	bne.n	8000ea0 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000eb4:	683b      	ldr	r3, [r7, #0]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40002800 	.word	0x40002800

08000ec8 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	460a      	mov	r2, r1
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000ed8:	79ba      	ldrb	r2, [r7, #6]
 8000eda:	491d      	ldr	r1, [pc, #116]	; (8000f50 <LinkTimerAfter+0x88>)
 8000edc:	4613      	mov	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	4413      	add	r3, r2
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	440b      	add	r3, r1
 8000ee6:	3315      	adds	r3, #21
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	2b06      	cmp	r3, #6
 8000ef0:	d009      	beq.n	8000f06 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000ef2:	7bfa      	ldrb	r2, [r7, #15]
 8000ef4:	4916      	ldr	r1, [pc, #88]	; (8000f50 <LinkTimerAfter+0x88>)
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	4413      	add	r3, r2
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	440b      	add	r3, r1
 8000f00:	3314      	adds	r3, #20
 8000f02:	79fa      	ldrb	r2, [r7, #7]
 8000f04:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000f06:	79fa      	ldrb	r2, [r7, #7]
 8000f08:	4911      	ldr	r1, [pc, #68]	; (8000f50 <LinkTimerAfter+0x88>)
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	4413      	add	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	440b      	add	r3, r1
 8000f14:	3315      	adds	r3, #21
 8000f16:	7bfa      	ldrb	r2, [r7, #15]
 8000f18:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000f1a:	79fa      	ldrb	r2, [r7, #7]
 8000f1c:	490c      	ldr	r1, [pc, #48]	; (8000f50 <LinkTimerAfter+0x88>)
 8000f1e:	4613      	mov	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	4413      	add	r3, r2
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	440b      	add	r3, r1
 8000f28:	3314      	adds	r3, #20
 8000f2a:	79ba      	ldrb	r2, [r7, #6]
 8000f2c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000f2e:	79ba      	ldrb	r2, [r7, #6]
 8000f30:	4907      	ldr	r1, [pc, #28]	; (8000f50 <LinkTimerAfter+0x88>)
 8000f32:	4613      	mov	r3, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4413      	add	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	440b      	add	r3, r1
 8000f3c:	3315      	adds	r3, #21
 8000f3e:	79fa      	ldrb	r2, [r7, #7]
 8000f40:	701a      	strb	r2, [r3, #0]

  return;
 8000f42:	bf00      	nop
}
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	200000a4 	.word	0x200000a4

08000f54 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	460a      	mov	r2, r1
 8000f5e:	71fb      	strb	r3, [r7, #7]
 8000f60:	4613      	mov	r3, r2
 8000f62:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000f64:	4b29      	ldr	r3, [pc, #164]	; (800100c <LinkTimerBefore+0xb8>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	79ba      	ldrb	r2, [r7, #6]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d032      	beq.n	8000fd6 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000f70:	79ba      	ldrb	r2, [r7, #6]
 8000f72:	4927      	ldr	r1, [pc, #156]	; (8001010 <LinkTimerBefore+0xbc>)
 8000f74:	4613      	mov	r3, r2
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	4413      	add	r3, r2
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	440b      	add	r3, r1
 8000f7e:	3314      	adds	r3, #20
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000f84:	7bfa      	ldrb	r2, [r7, #15]
 8000f86:	4922      	ldr	r1, [pc, #136]	; (8001010 <LinkTimerBefore+0xbc>)
 8000f88:	4613      	mov	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	440b      	add	r3, r1
 8000f92:	3315      	adds	r3, #21
 8000f94:	79fa      	ldrb	r2, [r7, #7]
 8000f96:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000f98:	79fa      	ldrb	r2, [r7, #7]
 8000f9a:	491d      	ldr	r1, [pc, #116]	; (8001010 <LinkTimerBefore+0xbc>)
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	440b      	add	r3, r1
 8000fa6:	3315      	adds	r3, #21
 8000fa8:	79ba      	ldrb	r2, [r7, #6]
 8000faa:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000fac:	79fa      	ldrb	r2, [r7, #7]
 8000fae:	4918      	ldr	r1, [pc, #96]	; (8001010 <LinkTimerBefore+0xbc>)
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	440b      	add	r3, r1
 8000fba:	3314      	adds	r3, #20
 8000fbc:	7bfa      	ldrb	r2, [r7, #15]
 8000fbe:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000fc0:	79ba      	ldrb	r2, [r7, #6]
 8000fc2:	4913      	ldr	r1, [pc, #76]	; (8001010 <LinkTimerBefore+0xbc>)
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4413      	add	r3, r2
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	440b      	add	r3, r1
 8000fce:	3314      	adds	r3, #20
 8000fd0:	79fa      	ldrb	r2, [r7, #7]
 8000fd2:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000fd4:	e014      	b.n	8001000 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000fd6:	79fa      	ldrb	r2, [r7, #7]
 8000fd8:	490d      	ldr	r1, [pc, #52]	; (8001010 <LinkTimerBefore+0xbc>)
 8000fda:	4613      	mov	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	4413      	add	r3, r2
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	440b      	add	r3, r1
 8000fe4:	3315      	adds	r3, #21
 8000fe6:	79ba      	ldrb	r2, [r7, #6]
 8000fe8:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000fea:	79ba      	ldrb	r2, [r7, #6]
 8000fec:	4908      	ldr	r1, [pc, #32]	; (8001010 <LinkTimerBefore+0xbc>)
 8000fee:	4613      	mov	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3314      	adds	r3, #20
 8000ffa:	79fa      	ldrb	r2, [r7, #7]
 8000ffc:	701a      	strb	r2, [r3, #0]
  return;
 8000ffe:	bf00      	nop
}
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000134 	.word	0x20000134
 8001010:	200000a4 	.word	0x200000a4

08001014 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800101e:	4b4e      	ldr	r3, [pc, #312]	; (8001158 <linkTimer+0x144>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b06      	cmp	r3, #6
 8001026:	d118      	bne.n	800105a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001028:	4b4b      	ldr	r3, [pc, #300]	; (8001158 <linkTimer+0x144>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4b4b      	ldr	r3, [pc, #300]	; (800115c <linkTimer+0x148>)
 8001030:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001032:	4a49      	ldr	r2, [pc, #292]	; (8001158 <linkTimer+0x144>)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001038:	79fa      	ldrb	r2, [r7, #7]
 800103a:	4949      	ldr	r1, [pc, #292]	; (8001160 <linkTimer+0x14c>)
 800103c:	4613      	mov	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4413      	add	r3, r2
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	440b      	add	r3, r1
 8001046:	3315      	adds	r3, #21
 8001048:	2206      	movs	r2, #6
 800104a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800104c:	4b45      	ldr	r3, [pc, #276]	; (8001164 <linkTimer+0x150>)
 800104e:	f04f 32ff 	mov.w	r2, #4294967295
 8001052:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	81fb      	strh	r3, [r7, #14]
 8001058:	e078      	b.n	800114c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800105a:	f000 f909 	bl	8001270 <ReturnTimeElapsed>
 800105e:	4603      	mov	r3, r0
 8001060:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001062:	79fa      	ldrb	r2, [r7, #7]
 8001064:	493e      	ldr	r1, [pc, #248]	; (8001160 <linkTimer+0x14c>)
 8001066:	4613      	mov	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	4413      	add	r3, r2
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	440b      	add	r3, r1
 8001070:	3308      	adds	r3, #8
 8001072:	6819      	ldr	r1, [r3, #0]
 8001074:	89fb      	ldrh	r3, [r7, #14]
 8001076:	79fa      	ldrb	r2, [r7, #7]
 8001078:	4419      	add	r1, r3
 800107a:	4839      	ldr	r0, [pc, #228]	; (8001160 <linkTimer+0x14c>)
 800107c:	4613      	mov	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4413      	add	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	4403      	add	r3, r0
 8001086:	3308      	adds	r3, #8
 8001088:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800108a:	79fa      	ldrb	r2, [r7, #7]
 800108c:	4934      	ldr	r1, [pc, #208]	; (8001160 <linkTimer+0x14c>)
 800108e:	4613      	mov	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	4413      	add	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	440b      	add	r3, r1
 8001098:	3308      	adds	r3, #8
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800109e:	4b2e      	ldr	r3, [pc, #184]	; (8001158 <linkTimer+0x144>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	4619      	mov	r1, r3
 80010a6:	4a2e      	ldr	r2, [pc, #184]	; (8001160 <linkTimer+0x14c>)
 80010a8:	460b      	mov	r3, r1
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	440b      	add	r3, r1
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	4413      	add	r3, r2
 80010b2:	3308      	adds	r3, #8
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68ba      	ldr	r2, [r7, #8]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d337      	bcc.n	800112c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80010bc:	4b26      	ldr	r3, [pc, #152]	; (8001158 <linkTimer+0x144>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80010c2:	7b7a      	ldrb	r2, [r7, #13]
 80010c4:	4926      	ldr	r1, [pc, #152]	; (8001160 <linkTimer+0x14c>)
 80010c6:	4613      	mov	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4413      	add	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	440b      	add	r3, r1
 80010d0:	3315      	adds	r3, #21
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80010d6:	e013      	b.n	8001100 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80010d8:	7b7a      	ldrb	r2, [r7, #13]
 80010da:	4921      	ldr	r1, [pc, #132]	; (8001160 <linkTimer+0x14c>)
 80010dc:	4613      	mov	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	4413      	add	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	440b      	add	r3, r1
 80010e6:	3315      	adds	r3, #21
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80010ec:	7b7a      	ldrb	r2, [r7, #13]
 80010ee:	491c      	ldr	r1, [pc, #112]	; (8001160 <linkTimer+0x14c>)
 80010f0:	4613      	mov	r3, r2
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	4413      	add	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	440b      	add	r3, r1
 80010fa:	3315      	adds	r3, #21
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001100:	7b3b      	ldrb	r3, [r7, #12]
 8001102:	2b06      	cmp	r3, #6
 8001104:	d00b      	beq.n	800111e <linkTimer+0x10a>
 8001106:	7b3a      	ldrb	r2, [r7, #12]
 8001108:	4915      	ldr	r1, [pc, #84]	; (8001160 <linkTimer+0x14c>)
 800110a:	4613      	mov	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4413      	add	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	440b      	add	r3, r1
 8001114:	3308      	adds	r3, #8
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	68ba      	ldr	r2, [r7, #8]
 800111a:	429a      	cmp	r2, r3
 800111c:	d2dc      	bcs.n	80010d8 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800111e:	7b7a      	ldrb	r2, [r7, #13]
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	4611      	mov	r1, r2
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fecf 	bl	8000ec8 <LinkTimerAfter>
 800112a:	e00f      	b.n	800114c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <linkTimer+0x144>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	4611      	mov	r1, r2
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ff0c 	bl	8000f54 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <linkTimer+0x144>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <linkTimer+0x148>)
 8001144:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001146:	4a04      	ldr	r2, [pc, #16]	; (8001158 <linkTimer+0x144>)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 800114c:	89fb      	ldrh	r3, [r7, #14]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000134 	.word	0x20000134
 800115c:	20000135 	.word	0x20000135
 8001160:	200000a4 	.word	0x200000a4
 8001164:	20000138 	.word	0x20000138

08001168 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	460a      	mov	r2, r1
 8001172:	71fb      	strb	r3, [r7, #7]
 8001174:	4613      	mov	r3, r2
 8001176:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001178:	4b39      	ldr	r3, [pc, #228]	; (8001260 <UnlinkTimer+0xf8>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	79fa      	ldrb	r2, [r7, #7]
 8001180:	429a      	cmp	r2, r3
 8001182:	d111      	bne.n	80011a8 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001184:	4b36      	ldr	r3, [pc, #216]	; (8001260 <UnlinkTimer+0xf8>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4b36      	ldr	r3, [pc, #216]	; (8001264 <UnlinkTimer+0xfc>)
 800118c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800118e:	79fa      	ldrb	r2, [r7, #7]
 8001190:	4935      	ldr	r1, [pc, #212]	; (8001268 <UnlinkTimer+0x100>)
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	440b      	add	r3, r1
 800119c:	3315      	adds	r3, #21
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <UnlinkTimer+0xf8>)
 80011a4:	701a      	strb	r2, [r3, #0]
 80011a6:	e03e      	b.n	8001226 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80011a8:	79fa      	ldrb	r2, [r7, #7]
 80011aa:	492f      	ldr	r1, [pc, #188]	; (8001268 <UnlinkTimer+0x100>)
 80011ac:	4613      	mov	r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	4413      	add	r3, r2
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	440b      	add	r3, r1
 80011b6:	3314      	adds	r3, #20
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80011bc:	79fa      	ldrb	r2, [r7, #7]
 80011be:	492a      	ldr	r1, [pc, #168]	; (8001268 <UnlinkTimer+0x100>)
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	440b      	add	r3, r1
 80011ca:	3315      	adds	r3, #21
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80011d0:	79f9      	ldrb	r1, [r7, #7]
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	4824      	ldr	r0, [pc, #144]	; (8001268 <UnlinkTimer+0x100>)
 80011d6:	460b      	mov	r3, r1
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	440b      	add	r3, r1
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	4403      	add	r3, r0
 80011e0:	3315      	adds	r3, #21
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b2d8      	uxtb	r0, r3
 80011e6:	4920      	ldr	r1, [pc, #128]	; (8001268 <UnlinkTimer+0x100>)
 80011e8:	4613      	mov	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	4413      	add	r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	440b      	add	r3, r1
 80011f2:	3315      	adds	r3, #21
 80011f4:	4602      	mov	r2, r0
 80011f6:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011f8:	7bbb      	ldrb	r3, [r7, #14]
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	d013      	beq.n	8001226 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80011fe:	79f9      	ldrb	r1, [r7, #7]
 8001200:	7bba      	ldrb	r2, [r7, #14]
 8001202:	4819      	ldr	r0, [pc, #100]	; (8001268 <UnlinkTimer+0x100>)
 8001204:	460b      	mov	r3, r1
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	440b      	add	r3, r1
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	4403      	add	r3, r0
 800120e:	3314      	adds	r3, #20
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b2d8      	uxtb	r0, r3
 8001214:	4914      	ldr	r1, [pc, #80]	; (8001268 <UnlinkTimer+0x100>)
 8001216:	4613      	mov	r3, r2
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	4413      	add	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	440b      	add	r3, r1
 8001220:	3314      	adds	r3, #20
 8001222:	4602      	mov	r2, r0
 8001224:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001226:	79fa      	ldrb	r2, [r7, #7]
 8001228:	490f      	ldr	r1, [pc, #60]	; (8001268 <UnlinkTimer+0x100>)
 800122a:	4613      	mov	r3, r2
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	4413      	add	r3, r2
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	440b      	add	r3, r1
 8001234:	330c      	adds	r3, #12
 8001236:	2201      	movs	r2, #1
 8001238:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <UnlinkTimer+0xf8>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b06      	cmp	r3, #6
 8001242:	d107      	bne.n	8001254 <UnlinkTimer+0xec>
 8001244:	79bb      	ldrb	r3, [r7, #6]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d104      	bne.n	8001254 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <UnlinkTimer+0x104>)
 800124c:	f04f 32ff 	mov.w	r2, #4294967295
 8001250:	601a      	str	r2, [r3, #0]
  }

  return;
 8001252:	bf00      	nop
 8001254:	bf00      	nop
}
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	20000134 	.word	0x20000134
 8001264:	20000135 	.word	0x20000135
 8001268:	200000a4 	.word	0x200000a4
 800126c:	20000138 	.word	0x20000138

08001270 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <ReturnTimeElapsed+0x70>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800127e:	d026      	beq.n	80012ce <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001280:	f7ff fe02 	bl	8000e88 <ReadRtcSsrValue>
 8001284:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <ReturnTimeElapsed+0x70>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	d805      	bhi.n	800129c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <ReturnTimeElapsed+0x70>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	e00a      	b.n	80012b2 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <ReturnTimeElapsed+0x74>)
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80012a8:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <ReturnTimeElapsed+0x70>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	4413      	add	r3, r2
 80012b0:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80012b2:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <ReturnTimeElapsed+0x78>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	fb02 f303 	mul.w	r3, r2, r3
 80012be:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <ReturnTimeElapsed+0x7c>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	40d3      	lsrs	r3, r2
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	e001      	b.n	80012d2 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	b29b      	uxth	r3, r3
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000138 	.word	0x20000138
 80012e4:	2000023a 	.word	0x2000023a
 80012e8:	20000239 	.word	0x20000239
 80012ec:	20000238 	.word	0x20000238

080012f0 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 80012fa:	88fb      	ldrh	r3, [r7, #6]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d108      	bne.n	8001312 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001300:	f7ff fdc2 	bl	8000e88 <ReadRtcSsrValue>
 8001304:	4603      	mov	r3, r0
 8001306:	4a24      	ldr	r2, [pc, #144]	; (8001398 <RestartWakeupCounter+0xa8>)
 8001308:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800130a:	2003      	movs	r0, #3
 800130c:	f001 fd45 	bl	8002d9a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001310:	e03e      	b.n	8001390 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d803      	bhi.n	8001320 <RestartWakeupCounter+0x30>
 8001318:	4b20      	ldr	r3, [pc, #128]	; (800139c <RestartWakeupCounter+0xac>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d002      	beq.n	8001326 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001320:	88fb      	ldrh	r3, [r7, #6]
 8001322:	3b01      	subs	r3, #1
 8001324:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001326:	bf00      	nop
 8001328:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <RestartWakeupCounter+0xb0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0f7      	beq.n	8001328 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <RestartWakeupCounter+0xb0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <RestartWakeupCounter+0xb0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800134c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <RestartWakeupCounter+0xb4>)
 8001350:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001354:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001356:	2003      	movs	r0, #3
 8001358:	f001 fd2d 	bl	8002db6 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <RestartWakeupCounter+0xb8>)
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	0c1b      	lsrs	r3, r3, #16
 8001362:	041b      	lsls	r3, r3, #16
 8001364:	88fa      	ldrh	r2, [r7, #6]
 8001366:	4910      	ldr	r1, [pc, #64]	; (80013a8 <RestartWakeupCounter+0xb8>)
 8001368:	4313      	orrs	r3, r2
 800136a:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800136c:	f7ff fd8c 	bl	8000e88 <ReadRtcSsrValue>
 8001370:	4603      	mov	r3, r0
 8001372:	4a09      	ldr	r2, [pc, #36]	; (8001398 <RestartWakeupCounter+0xa8>)
 8001374:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <RestartWakeupCounter+0xb0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <RestartWakeupCounter+0xb0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001388:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800138a:	f3af 8000 	nop.w
  return ;
 800138e:	bf00      	nop
}
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000138 	.word	0x20000138
 800139c:	20000238 	.word	0x20000238
 80013a0:	20000234 	.word	0x20000234
 80013a4:	58000800 	.word	0x58000800
 80013a8:	40002800 	.word	0x40002800

080013ac <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80013b2:	4b47      	ldr	r3, [pc, #284]	; (80014d0 <RescheduleTimerList+0x124>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013be:	d108      	bne.n	80013d2 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80013c0:	bf00      	nop
 80013c2:	4b44      	ldr	r3, [pc, #272]	; (80014d4 <RescheduleTimerList+0x128>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	f003 0304 	and.w	r3, r3, #4
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f7      	bne.n	80013c2 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80013d2:	4b40      	ldr	r3, [pc, #256]	; (80014d4 <RescheduleTimerList+0x128>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	4b3e      	ldr	r3, [pc, #248]	; (80014d4 <RescheduleTimerList+0x128>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013e4:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80013e6:	4b3c      	ldr	r3, [pc, #240]	; (80014d8 <RescheduleTimerList+0x12c>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80013ec:	7bfa      	ldrb	r2, [r7, #15]
 80013ee:	493b      	ldr	r1, [pc, #236]	; (80014dc <RescheduleTimerList+0x130>)
 80013f0:	4613      	mov	r3, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4413      	add	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	440b      	add	r3, r1
 80013fa:	3308      	adds	r3, #8
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001400:	f7ff ff36 	bl	8001270 <ReturnTimeElapsed>
 8001404:	4603      	mov	r3, r0
 8001406:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	429a      	cmp	r2, r3
 800140e:	d205      	bcs.n	800141c <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001414:	4b32      	ldr	r3, [pc, #200]	; (80014e0 <RescheduleTimerList+0x134>)
 8001416:	2201      	movs	r2, #1
 8001418:	701a      	strb	r2, [r3, #0]
 800141a:	e04d      	b.n	80014b8 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	4a31      	ldr	r2, [pc, #196]	; (80014e4 <RescheduleTimerList+0x138>)
 8001420:	8812      	ldrh	r2, [r2, #0]
 8001422:	b292      	uxth	r2, r2
 8001424:	4413      	add	r3, r2
 8001426:	461a      	mov	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	4293      	cmp	r3, r2
 800142c:	d906      	bls.n	800143c <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800142e:	4b2d      	ldr	r3, [pc, #180]	; (80014e4 <RescheduleTimerList+0x138>)
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001434:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <RescheduleTimerList+0x134>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
 800143a:	e03d      	b.n	80014b8 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	b29a      	uxth	r2, r3
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001446:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <RescheduleTimerList+0x134>)
 8001448:	2201      	movs	r2, #1
 800144a:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800144c:	e034      	b.n	80014b8 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800144e:	7bfa      	ldrb	r2, [r7, #15]
 8001450:	4922      	ldr	r1, [pc, #136]	; (80014dc <RescheduleTimerList+0x130>)
 8001452:	4613      	mov	r3, r2
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4413      	add	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	440b      	add	r3, r1
 800145c:	3308      	adds	r3, #8
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	429a      	cmp	r2, r3
 8001464:	d20a      	bcs.n	800147c <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001466:	7bfa      	ldrb	r2, [r7, #15]
 8001468:	491c      	ldr	r1, [pc, #112]	; (80014dc <RescheduleTimerList+0x130>)
 800146a:	4613      	mov	r3, r2
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	4413      	add	r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	440b      	add	r3, r1
 8001474:	3308      	adds	r3, #8
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	e013      	b.n	80014a4 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800147c:	7bfa      	ldrb	r2, [r7, #15]
 800147e:	4917      	ldr	r1, [pc, #92]	; (80014dc <RescheduleTimerList+0x130>)
 8001480:	4613      	mov	r3, r2
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4413      	add	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	440b      	add	r3, r1
 800148a:	3308      	adds	r3, #8
 800148c:	6819      	ldr	r1, [r3, #0]
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	7bfa      	ldrb	r2, [r7, #15]
 8001492:	1ac9      	subs	r1, r1, r3
 8001494:	4811      	ldr	r0, [pc, #68]	; (80014dc <RescheduleTimerList+0x130>)
 8001496:	4613      	mov	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4413      	add	r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	4403      	add	r3, r0
 80014a0:	3308      	adds	r3, #8
 80014a2:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80014a4:	7bfa      	ldrb	r2, [r7, #15]
 80014a6:	490d      	ldr	r1, [pc, #52]	; (80014dc <RescheduleTimerList+0x130>)
 80014a8:	4613      	mov	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	4413      	add	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	440b      	add	r3, r1
 80014b2:	3315      	adds	r3, #21
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	2b06      	cmp	r3, #6
 80014bc:	d1c7      	bne.n	800144e <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80014be:	89bb      	ldrh	r3, [r7, #12]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff15 	bl	80012f0 <RestartWakeupCounter>

  return ;
 80014c6:	bf00      	nop
}
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40002800 	.word	0x40002800
 80014d4:	20000234 	.word	0x20000234
 80014d8:	20000134 	.word	0x20000134
 80014dc:	200000a4 	.word	0x200000a4
 80014e0:	2000013c 	.word	0x2000013c
 80014e4:	2000023c 	.word	0x2000023c

080014e8 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014ee:	f3ef 8310 	mrs	r3, PRIMASK
 80014f2:	617b      	str	r3, [r7, #20]
  return(result);
 80014f4:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80014f8:	b672      	cpsid	i
}
 80014fa:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80014fc:	4b5f      	ldr	r3, [pc, #380]	; (800167c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	22ca      	movs	r2, #202	; 0xca
 8001504:	625a      	str	r2, [r3, #36]	; 0x24
 8001506:	4b5d      	ldr	r3, [pc, #372]	; (800167c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2253      	movs	r2, #83	; 0x53
 800150e:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001510:	4b5a      	ldr	r3, [pc, #360]	; (800167c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	4b58      	ldr	r3, [pc, #352]	; (800167c <HW_TS_RTC_Wakeup_Handler+0x194>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001522:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001524:	4b56      	ldr	r3, [pc, #344]	; (8001680 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800152c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001530:	4954      	ldr	r1, [pc, #336]	; (8001684 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001532:	4613      	mov	r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	440b      	add	r3, r1
 800153c:	330c      	adds	r3, #12
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d172      	bne.n	800162c <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001546:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800154a:	494e      	ldr	r1, [pc, #312]	; (8001684 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800154c:	4613      	mov	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	4413      	add	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	440b      	add	r3, r1
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800155a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800155e:	4949      	ldr	r1, [pc, #292]	; (8001684 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001560:	4613      	mov	r3, r2
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4413      	add	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	440b      	add	r3, r1
 800156a:	3310      	adds	r3, #16
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001570:	4b45      	ldr	r3, [pc, #276]	; (8001688 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d050      	beq.n	800161c <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800157a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800157e:	4941      	ldr	r1, [pc, #260]	; (8001684 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001580:	4613      	mov	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4413      	add	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	440b      	add	r3, r1
 800158a:	330d      	adds	r3, #13
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b01      	cmp	r3, #1
 8001592:	d126      	bne.n	80015e2 <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001594:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001598:	2101      	movs	r1, #1
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fde4 	bl	8001168 <UnlinkTimer>
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	f383 8810 	msr	PRIMASK, r3
}
 80015aa:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80015ac:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80015b0:	4934      	ldr	r1, [pc, #208]	; (8001684 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80015b2:	4613      	mov	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4413      	add	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	440b      	add	r3, r1
 80015bc:	3304      	adds	r3, #4
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015c4:	4611      	mov	r1, r2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f000 f9d4 	bl	8001974 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80015cc:	4b2b      	ldr	r3, [pc, #172]	; (800167c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	22ca      	movs	r2, #202	; 0xca
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24
 80015d6:	4b29      	ldr	r3, [pc, #164]	; (800167c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2253      	movs	r2, #83	; 0x53
 80015de:	625a      	str	r2, [r3, #36]	; 0x24
 80015e0:	e014      	b.n	800160c <HW_TS_RTC_Wakeup_Handler+0x124>
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f383 8810 	msr	PRIMASK, r3
}
 80015ec:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80015ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 f932 	bl	800185c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80015f8:	4b20      	ldr	r3, [pc, #128]	; (800167c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	22ca      	movs	r2, #202	; 0xca
 8001600:	625a      	str	r2, [r3, #36]	; 0x24
 8001602:	4b1e      	ldr	r3, [pc, #120]	; (800167c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2253      	movs	r2, #83	; 0x53
 800160a:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 800160c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001610:	69fa      	ldr	r2, [r7, #28]
 8001612:	4619      	mov	r1, r3
 8001614:	69b8      	ldr	r0, [r7, #24]
 8001616:	f000 fa35 	bl	8001a84 <HW_TS_RTC_Int_AppNot>
 800161a:	e025      	b.n	8001668 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 800161c:	f7ff fec6 	bl	80013ac <RescheduleTimerList>
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	f383 8810 	msr	PRIMASK, r3
}
 800162a:	e01d      	b.n	8001668 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800162c:	bf00      	nop
 800162e:	4b13      	ldr	r3, [pc, #76]	; (800167c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f7      	beq.n	800162e <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800163e:	4b0f      	ldr	r3, [pc, #60]	; (800167c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	b2da      	uxtb	r2, r3
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <HW_TS_RTC_Wakeup_Handler+0x194>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001652:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001654:	4b0d      	ldr	r3, [pc, #52]	; (800168c <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 8001656:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800165a:	60da      	str	r2, [r3, #12]
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f383 8810 	msr	PRIMASK, r3
}
 8001666:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <HW_TS_RTC_Wakeup_Handler+0x194>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	22ff      	movs	r2, #255	; 0xff
 8001670:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001672:	bf00      	nop
}
 8001674:	3728      	adds	r7, #40	; 0x28
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000234 	.word	0x20000234
 8001680:	20000134 	.word	0x20000134
 8001684:	200000a4 	.word	0x200000a4
 8001688:	2000013c 	.word	0x2000013c
 800168c:	58000800 	.word	0x58000800

08001690 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 800169c:	4a64      	ldr	r2, [pc, #400]	; (8001830 <HW_TS_Init+0x1a0>)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80016a2:	4b63      	ldr	r3, [pc, #396]	; (8001830 <HW_TS_Init+0x1a0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	22ca      	movs	r2, #202	; 0xca
 80016aa:	625a      	str	r2, [r3, #36]	; 0x24
 80016ac:	4b60      	ldr	r3, [pc, #384]	; (8001830 <HW_TS_Init+0x1a0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2253      	movs	r2, #83	; 0x53
 80016b4:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80016b6:	4b5f      	ldr	r3, [pc, #380]	; (8001834 <HW_TS_Init+0x1a4>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	4a5e      	ldr	r2, [pc, #376]	; (8001834 <HW_TS_Init+0x1a4>)
 80016bc:	f043 0320 	orr.w	r3, r3, #32
 80016c0:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80016c2:	4b5c      	ldr	r3, [pc, #368]	; (8001834 <HW_TS_Init+0x1a4>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	f1c3 0304 	rsb	r3, r3, #4
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	4b58      	ldr	r3, [pc, #352]	; (8001838 <HW_TS_Init+0x1a8>)
 80016d6:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80016d8:	4b56      	ldr	r3, [pc, #344]	; (8001834 <HW_TS_Init+0x1a4>)
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80016e0:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80016e4:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	fa92 f2a2 	rbit	r2, r2
 80016ec:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	2a00      	cmp	r2, #0
 80016f6:	d101      	bne.n	80016fc <HW_TS_Init+0x6c>
  {
    return 32U;
 80016f8:	2220      	movs	r2, #32
 80016fa:	e003      	b.n	8001704 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	fab2 f282 	clz	r2, r2
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	40d3      	lsrs	r3, r2
 8001706:	b2db      	uxtb	r3, r3
 8001708:	3301      	adds	r3, #1
 800170a:	b2da      	uxtb	r2, r3
 800170c:	4b4b      	ldr	r3, [pc, #300]	; (800183c <HW_TS_Init+0x1ac>)
 800170e:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001710:	4b48      	ldr	r3, [pc, #288]	; (8001834 <HW_TS_Init+0x1a4>)
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	b29b      	uxth	r3, r3
 8001716:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800171a:	b29b      	uxth	r3, r3
 800171c:	3301      	adds	r3, #1
 800171e:	b29a      	uxth	r2, r3
 8001720:	4b47      	ldr	r3, [pc, #284]	; (8001840 <HW_TS_Init+0x1b0>)
 8001722:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001724:	4b46      	ldr	r3, [pc, #280]	; (8001840 <HW_TS_Init+0x1b0>)
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	3b01      	subs	r3, #1
 800172a:	4a44      	ldr	r2, [pc, #272]	; (800183c <HW_TS_Init+0x1ac>)
 800172c:	7812      	ldrb	r2, [r2, #0]
 800172e:	fb02 f303 	mul.w	r3, r2, r3
 8001732:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001736:	4a40      	ldr	r2, [pc, #256]	; (8001838 <HW_TS_Init+0x1a8>)
 8001738:	7812      	ldrb	r2, [r2, #0]
 800173a:	40d3      	lsrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001744:	4293      	cmp	r3, r2
 8001746:	d904      	bls.n	8001752 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001748:	4b3e      	ldr	r3, [pc, #248]	; (8001844 <HW_TS_Init+0x1b4>)
 800174a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800174e:	801a      	strh	r2, [r3, #0]
 8001750:	e003      	b.n	800175a <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	b29a      	uxth	r2, r3
 8001756:	4b3b      	ldr	r3, [pc, #236]	; (8001844 <HW_TS_Init+0x1b4>)
 8001758:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800175a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800175e:	f7ff fb81 	bl	8000e64 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001762:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001766:	f7ff fb69 	bl	8000e3c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d143      	bne.n	80017f8 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001770:	4b35      	ldr	r3, [pc, #212]	; (8001848 <HW_TS_Init+0x1b8>)
 8001772:	2201      	movs	r2, #1
 8001774:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001776:	4b35      	ldr	r3, [pc, #212]	; (800184c <HW_TS_Init+0x1bc>)
 8001778:	f04f 32ff 	mov.w	r2, #4294967295
 800177c:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800177e:	2300      	movs	r3, #0
 8001780:	77fb      	strb	r3, [r7, #31]
 8001782:	e00c      	b.n	800179e <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001784:	7ffa      	ldrb	r2, [r7, #31]
 8001786:	4932      	ldr	r1, [pc, #200]	; (8001850 <HW_TS_Init+0x1c0>)
 8001788:	4613      	mov	r3, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	440b      	add	r3, r1
 8001792:	330c      	adds	r3, #12
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001798:	7ffb      	ldrb	r3, [r7, #31]
 800179a:	3301      	adds	r3, #1
 800179c:	77fb      	strb	r3, [r7, #31]
 800179e:	7ffb      	ldrb	r3, [r7, #31]
 80017a0:	2b05      	cmp	r3, #5
 80017a2:	d9ef      	bls.n	8001784 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80017a4:	4b2b      	ldr	r3, [pc, #172]	; (8001854 <HW_TS_Init+0x1c4>)
 80017a6:	2206      	movs	r2, #6
 80017a8:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80017aa:	4b21      	ldr	r3, [pc, #132]	; (8001830 <HW_TS_Init+0x1a0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <HW_TS_Init+0x1a0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017bc:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80017be:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <HW_TS_Init+0x1a0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	4b19      	ldr	r3, [pc, #100]	; (8001830 <HW_TS_Init+0x1a0>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80017d2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80017d4:	4b20      	ldr	r3, [pc, #128]	; (8001858 <HW_TS_Init+0x1c8>)
 80017d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80017da:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80017dc:	2003      	movs	r0, #3
 80017de:	f001 faea 	bl	8002db6 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <HW_TS_Init+0x1a0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <HW_TS_Init+0x1a0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	e00a      	b.n	800180e <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80017f8:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <HW_TS_Init+0x1a0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001804:	2b00      	cmp	r3, #0
 8001806:	d002      	beq.n	800180e <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001808:	2003      	movs	r0, #3
 800180a:	f001 fac6 	bl	8002d9a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <HW_TS_Init+0x1a0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	22ff      	movs	r2, #255	; 0xff
 8001816:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001818:	2200      	movs	r2, #0
 800181a:	2103      	movs	r1, #3
 800181c:	2003      	movs	r0, #3
 800181e:	f001 fa7a 	bl	8002d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001822:	2003      	movs	r0, #3
 8001824:	f001 fa91 	bl	8002d4a <HAL_NVIC_EnableIRQ>

  return;
 8001828:	bf00      	nop
}
 800182a:	3720      	adds	r7, #32
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000234 	.word	0x20000234
 8001834:	40002800 	.word	0x40002800
 8001838:	20000238 	.word	0x20000238
 800183c:	20000239 	.word	0x20000239
 8001840:	2000023a 	.word	0x2000023a
 8001844:	2000023c 	.word	0x2000023c
 8001848:	2000013c 	.word	0x2000013c
 800184c:	20000138 	.word	0x20000138
 8001850:	200000a4 	.word	0x200000a4
 8001854:	20000134 	.word	0x20000134
 8001858:	58000800 	.word	0x58000800

0800185c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001866:	f3ef 8310 	mrs	r3, PRIMASK
 800186a:	60fb      	str	r3, [r7, #12]
  return(result);
 800186c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800186e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001870:	b672      	cpsid	i
}
 8001872:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001874:	2003      	movs	r0, #3
 8001876:	f001 fa76 	bl	8002d66 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800187a:	4b38      	ldr	r3, [pc, #224]	; (800195c <HW_TS_Stop+0x100>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	22ca      	movs	r2, #202	; 0xca
 8001882:	625a      	str	r2, [r3, #36]	; 0x24
 8001884:	4b35      	ldr	r3, [pc, #212]	; (800195c <HW_TS_Stop+0x100>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2253      	movs	r2, #83	; 0x53
 800188c:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800188e:	79fa      	ldrb	r2, [r7, #7]
 8001890:	4933      	ldr	r1, [pc, #204]	; (8001960 <HW_TS_Stop+0x104>)
 8001892:	4613      	mov	r3, r2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	440b      	add	r3, r1
 800189c:	330c      	adds	r3, #12
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d148      	bne.n	8001938 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fc5c 	bl	8001168 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80018b0:	4b2c      	ldr	r3, [pc, #176]	; (8001964 <HW_TS_Stop+0x108>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80018b6:	7cfb      	ldrb	r3, [r7, #19]
 80018b8:	2b06      	cmp	r3, #6
 80018ba:	d135      	bne.n	8001928 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80018bc:	4b2a      	ldr	r3, [pc, #168]	; (8001968 <HW_TS_Stop+0x10c>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018c8:	d108      	bne.n	80018dc <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80018ca:	bf00      	nop
 80018cc:	4b23      	ldr	r3, [pc, #140]	; (800195c <HW_TS_Stop+0x100>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f7      	bne.n	80018cc <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80018dc:	4b1f      	ldr	r3, [pc, #124]	; (800195c <HW_TS_Stop+0x100>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	4b1d      	ldr	r3, [pc, #116]	; (800195c <HW_TS_Stop+0x100>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018ee:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80018f0:	bf00      	nop
 80018f2:	4b1a      	ldr	r3, [pc, #104]	; (800195c <HW_TS_Stop+0x100>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	f003 0304 	and.w	r3, r3, #4
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0f7      	beq.n	80018f2 <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001902:	4b16      	ldr	r3, [pc, #88]	; (800195c <HW_TS_Stop+0x100>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <HW_TS_Stop+0x100>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001916:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001918:	4b14      	ldr	r3, [pc, #80]	; (800196c <HW_TS_Stop+0x110>)
 800191a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800191e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001920:	2003      	movs	r0, #3
 8001922:	f001 fa48 	bl	8002db6 <HAL_NVIC_ClearPendingIRQ>
 8001926:	e007      	b.n	8001938 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001928:	4b11      	ldr	r3, [pc, #68]	; (8001970 <HW_TS_Stop+0x114>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	7cfa      	ldrb	r2, [r7, #19]
 8001930:	429a      	cmp	r2, r3
 8001932:	d001      	beq.n	8001938 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 8001934:	f7ff fd3a 	bl	80013ac <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <HW_TS_Stop+0x100>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	22ff      	movs	r2, #255	; 0xff
 8001940:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001942:	2003      	movs	r0, #3
 8001944:	f001 fa01 	bl	8002d4a <HAL_NVIC_EnableIRQ>
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	f383 8810 	msr	PRIMASK, r3
}
 8001952:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001954:	bf00      	nop
}
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000234 	.word	0x20000234
 8001960:	200000a4 	.word	0x200000a4
 8001964:	20000134 	.word	0x20000134
 8001968:	40002800 	.word	0x40002800
 800196c:	58000800 	.word	0x58000800
 8001970:	20000135 	.word	0x20000135

08001974 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001980:	79fa      	ldrb	r2, [r7, #7]
 8001982:	493c      	ldr	r1, [pc, #240]	; (8001a74 <HW_TS_Start+0x100>)
 8001984:	4613      	mov	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4413      	add	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	440b      	add	r3, r1
 800198e:	330c      	adds	r3, #12
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d103      	bne.n	80019a0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff ff5e 	bl	800185c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019a0:	f3ef 8310 	mrs	r3, PRIMASK
 80019a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80019a6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80019a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80019aa:	b672      	cpsid	i
}
 80019ac:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80019ae:	2003      	movs	r0, #3
 80019b0:	f001 f9d9 	bl	8002d66 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80019b4:	4b30      	ldr	r3, [pc, #192]	; (8001a78 <HW_TS_Start+0x104>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	22ca      	movs	r2, #202	; 0xca
 80019bc:	625a      	str	r2, [r3, #36]	; 0x24
 80019be:	4b2e      	ldr	r3, [pc, #184]	; (8001a78 <HW_TS_Start+0x104>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2253      	movs	r2, #83	; 0x53
 80019c6:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80019c8:	79fa      	ldrb	r2, [r7, #7]
 80019ca:	492a      	ldr	r1, [pc, #168]	; (8001a74 <HW_TS_Start+0x100>)
 80019cc:	4613      	mov	r3, r2
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	4413      	add	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	440b      	add	r3, r1
 80019d6:	330c      	adds	r3, #12
 80019d8:	2202      	movs	r2, #2
 80019da:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80019dc:	79fa      	ldrb	r2, [r7, #7]
 80019de:	4925      	ldr	r1, [pc, #148]	; (8001a74 <HW_TS_Start+0x100>)
 80019e0:	4613      	mov	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	440b      	add	r3, r1
 80019ea:	3308      	adds	r3, #8
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80019f0:	79fa      	ldrb	r2, [r7, #7]
 80019f2:	4920      	ldr	r1, [pc, #128]	; (8001a74 <HW_TS_Start+0x100>)
 80019f4:	4613      	mov	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4413      	add	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	440b      	add	r3, r1
 80019fe:	3304      	adds	r3, #4
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fb04 	bl	8001014 <linkTimer>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001a10:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <HW_TS_Start+0x108>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001a16:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <HW_TS_Start+0x10c>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	7c7a      	ldrb	r2, [r7, #17]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d002      	beq.n	8001a28 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 8001a22:	f7ff fcc3 	bl	80013ac <RescheduleTimerList>
 8001a26:	e013      	b.n	8001a50 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001a28:	79fa      	ldrb	r2, [r7, #7]
 8001a2a:	4912      	ldr	r1, [pc, #72]	; (8001a74 <HW_TS_Start+0x100>)
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4413      	add	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	440b      	add	r3, r1
 8001a36:	3308      	adds	r3, #8
 8001a38:	6819      	ldr	r1, [r3, #0]
 8001a3a:	8a7b      	ldrh	r3, [r7, #18]
 8001a3c:	79fa      	ldrb	r2, [r7, #7]
 8001a3e:	1ac9      	subs	r1, r1, r3
 8001a40:	480c      	ldr	r0, [pc, #48]	; (8001a74 <HW_TS_Start+0x100>)
 8001a42:	4613      	mov	r3, r2
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	4413      	add	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	4403      	add	r3, r0
 8001a4c:	3308      	adds	r3, #8
 8001a4e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001a50:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <HW_TS_Start+0x104>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	22ff      	movs	r2, #255	; 0xff
 8001a58:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001a5a:	2003      	movs	r0, #3
 8001a5c:	f001 f975 	bl	8002d4a <HAL_NVIC_EnableIRQ>
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	f383 8810 	msr	PRIMASK, r3
}
 8001a6a:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001a6c:	bf00      	nop
}
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	200000a4 	.word	0x200000a4
 8001a78:	20000234 	.word	0x20000234
 8001a7c:	20000134 	.word	0x20000134
 8001a80:	20000135 	.word	0x20000135

08001a84 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4798      	blx	r3

  return;
 8001a96:	bf00      	nop
}
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <LL_RCC_LSE_SetDriveCapability>:
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aae:	f023 0218 	bic.w	r2, r3, #24
 8001ab2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <LL_AHB2_GRP1_EnableClock>:
{
 8001aca:	b480      	push	{r7}
 8001acc:	b085      	sub	sp, #20
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ad8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4013      	ands	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aee:	68fb      	ldr	r3, [r7, #12]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <drawLogo>:
* 						- Remember to init ssd1306_Init();
* 						- I2C Config - Pull-up, Max output speed = HIGH
* 						- I2C Clock: PCLK1
******************************************************************************************************/

void drawLogo() {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af04      	add	r7, sp, #16

		drawBitmap(7, 20, (uint8_t *)JaktoolLogoBMP, JaktoolLogoWidth, JaktoolLogoHeight, White, Black);
 8001b02:	2300      	movs	r3, #0
 8001b04:	9302      	str	r3, [sp, #8]
 8001b06:	2301      	movs	r3, #1
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	2315      	movs	r3, #21
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	2373      	movs	r3, #115	; 0x73
 8001b10:	4a2c      	ldr	r2, [pc, #176]	; (8001bc4 <drawLogo+0xc8>)
 8001b12:	2114      	movs	r1, #20
 8001b14:	2007      	movs	r0, #7
 8001b16:	f7fe fd0d 	bl	8000534 <drawBitmap>

		HAL_Delay(150);
 8001b1a:	2096      	movs	r0, #150	; 0x96
 8001b1c:	f7ff f92b 	bl	8000d76 <HAL_Delay>


		//Just screwing around....
		clearScreen(Black);
 8001b20:	2000      	movs	r0, #0
 8001b22:	f7fe fe21 	bl	8000768 <clearScreen>
		ssd1306_UpdateScreen();
 8001b26:	f000 fb3b 	bl	80021a0 <ssd1306_UpdateScreen>

		writeLargeFont(0, 2, White, "OLED");
 8001b2a:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <drawLogo+0xcc>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	2102      	movs	r1, #2
 8001b30:	2000      	movs	r0, #0
 8001b32:	f7fe fd91 	bl	8000658 <writeLargeFont>
		writeMedFont(75, 2, White, "Pgm");
 8001b36:	4b25      	ldr	r3, [pc, #148]	; (8001bcc <drawLogo+0xd0>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	2102      	movs	r1, #2
 8001b3c:	204b      	movs	r0, #75	; 0x4b
 8001b3e:	f7fe fdad 	bl	800069c <writeMedFont>
		writeSmFont(0, 30, White, "Initializing...");
 8001b42:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <drawLogo+0xd4>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	211e      	movs	r1, #30
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f7fe fdc9 	bl	80006e0 <writeSmFont>
		writeTinyFont(50, 45, White, " /_(-_~)_/ ");
 8001b4e:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <drawLogo+0xd8>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	212d      	movs	r1, #45	; 0x2d
 8001b54:	2032      	movs	r0, #50	; 0x32
 8001b56:	f7fe fde5 	bl	8000724 <writeTinyFont>

		HAL_Delay(150);
 8001b5a:	2096      	movs	r0, #150	; 0x96
 8001b5c:	f7ff f90b 	bl	8000d76 <HAL_Delay>


		// with the ssd lib
		ssd1306_Fill(White);
 8001b60:	2001      	movs	r0, #1
 8001b62:	f000 faf9 	bl	8002158 <ssd1306_Fill>
		ssd1306_UpdateScreen();
 8001b66:	f000 fb1b 	bl	80021a0 <ssd1306_UpdateScreen>

		ssd1306_SetCursor(10, 2);
 8001b6a:	2102      	movs	r1, #2
 8001b6c:	200a      	movs	r0, #10
 8001b6e:	f000 fc4d 	bl	800240c <ssd1306_SetCursor>
		ssd1306_WriteString("OLED", Font_16x26, Black);
 8001b72:	4a19      	ldr	r2, [pc, #100]	; (8001bd8 <drawLogo+0xdc>)
 8001b74:	2300      	movs	r3, #0
 8001b76:	ca06      	ldmia	r2, {r1, r2}
 8001b78:	4813      	ldr	r0, [pc, #76]	; (8001bc8 <drawLogo+0xcc>)
 8001b7a:	f000 fc21 	bl	80023c0 <ssd1306_WriteString>
		ssd1306_SetCursor(85, 2);
 8001b7e:	2102      	movs	r1, #2
 8001b80:	2055      	movs	r0, #85	; 0x55
 8001b82:	f000 fc43 	bl	800240c <ssd1306_SetCursor>
		ssd1306_WriteString("Pgm", Font_11x18, Black);
 8001b86:	4a15      	ldr	r2, [pc, #84]	; (8001bdc <drawLogo+0xe0>)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	ca06      	ldmia	r2, {r1, r2}
 8001b8c:	480f      	ldr	r0, [pc, #60]	; (8001bcc <drawLogo+0xd0>)
 8001b8e:	f000 fc17 	bl	80023c0 <ssd1306_WriteString>
		ssd1306_SetCursor(10, 30);
 8001b92:	211e      	movs	r1, #30
 8001b94:	200a      	movs	r0, #10
 8001b96:	f000 fc39 	bl	800240c <ssd1306_SetCursor>
		ssd1306_WriteString("Initializing...", Font_7x10, Black);
 8001b9a:	4a11      	ldr	r2, [pc, #68]	; (8001be0 <drawLogo+0xe4>)
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	ca06      	ldmia	r2, {r1, r2}
 8001ba0:	480b      	ldr	r0, [pc, #44]	; (8001bd0 <drawLogo+0xd4>)
 8001ba2:	f000 fc0d 	bl	80023c0 <ssd1306_WriteString>
		ssd1306_SetCursor(40, 45);
 8001ba6:	212d      	movs	r1, #45	; 0x2d
 8001ba8:	2028      	movs	r0, #40	; 0x28
 8001baa:	f000 fc2f 	bl	800240c <ssd1306_SetCursor>
		ssd1306_WriteString(" /_(-_~)_/ ", Font_6x8, Black);
 8001bae:	4a0d      	ldr	r2, [pc, #52]	; (8001be4 <drawLogo+0xe8>)
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	ca06      	ldmia	r2, {r1, r2}
 8001bb4:	4807      	ldr	r0, [pc, #28]	; (8001bd4 <drawLogo+0xd8>)
 8001bb6:	f000 fc03 	bl	80023c0 <ssd1306_WriteString>

		ssd1306_UpdateScreen();
 8001bba:	f000 faf1 	bl	80021a0 <ssd1306_UpdateScreen>

}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	0800a654 	.word	0x0800a654
 8001bc8:	0800a454 	.word	0x0800a454
 8001bcc:	0800a45c 	.word	0x0800a45c
 8001bd0:	0800a460 	.word	0x0800a460
 8001bd4:	0800a470 	.word	0x0800a470
 8001bd8:	2000001c 	.word	0x2000001c
 8001bdc:	20000014 	.word	0x20000014
 8001be0:	2000000c 	.word	0x2000000c
 8001be4:	20000004 	.word	0x20000004

08001be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	; 0x28
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	//UART Message Buffer:
	char MSG[35] = {'\0'};
 8001bee:	2300      	movs	r3, #0
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	f107 0308 	add.w	r3, r7, #8
 8001bf6:	221f      	movs	r2, #31
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f007 ffc2 	bl	8009b84 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c00:	f000 febc 	bl	800297c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001c04:	f7fe ff48 	bl	8000a98 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c08:	f000 f82a 	bl	8001c60 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001c0c:	f000 f88a 	bl	8001d24 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8001c10:	f000 f8e8 	bl	8001de4 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c14:	f000 f982 	bl	8001f1c <MX_GPIO_Init>
  MX_RF_Init();
 8001c18:	f000 f8f8 	bl	8001e0c <MX_RF_Init>
  MX_RTC_Init();
 8001c1c:	f000 f8fe 	bl	8001e1c <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001c20:	f000 f930 	bl	8001e84 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001c24:	f000 f89e 	bl	8001d64 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Initialize OLED
  ssd1306_Init();
 8001c28:	f000 fa2c 	bl	8002084 <ssd1306_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001c2c:	f7fe ff42 	bl	8000ab4 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  sprintf(MSG, "Initializing... \r\n");
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	490a      	ldr	r1, [pc, #40]	; (8001c5c <main+0x74>)
 8001c34:	4618      	mov	r0, r3
 8001c36:	f007 ffad 	bl	8009b94 <siprintf>
  UART_Transmit((uint8_t*)MSG, strlen(MSG));
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe fa9f 	bl	8000180 <strlen>
 8001c42:	4603      	mov	r3, r0
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	4611      	mov	r1, r2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f9c0 	bl	8001fd0 <UART_Transmit>
  //HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), HAL_MAX_DELAY);

  drawLogo();
 8001c50:	f7ff ff54 	bl	8001afc <drawLogo>
  {

    /* USER CODE END WHILE */
		//drawLogo();

    MX_APPE_Process();
 8001c54:	f7ff f8b4 	bl	8000dc0 <MX_APPE_Process>
 8001c58:	e7fc      	b.n	8001c54 <main+0x6c>
 8001c5a:	bf00      	nop
 8001c5c:	0800a47c 	.word	0x0800a47c

08001c60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b09a      	sub	sp, #104	; 0x68
 8001c64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c66:	f107 0320 	add.w	r3, r7, #32
 8001c6a:	2248      	movs	r2, #72	; 0x48
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f007 ff88 	bl	8009b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	60da      	str	r2, [r3, #12]
 8001c80:	611a      	str	r2, [r3, #16]
 8001c82:	615a      	str	r2, [r3, #20]
 8001c84:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001c86:	f001 ff5b 	bl	8003b40 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f7ff ff07 	bl	8001a9e <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c90:	4b23      	ldr	r3, [pc, #140]	; (8001d20 <SystemClock_Config+0xc0>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c98:	4a21      	ldr	r2, [pc, #132]	; (8001d20 <SystemClock_Config+0xc0>)
 8001c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <SystemClock_Config+0xc0>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ca8:	603b      	str	r3, [r7, #0]
 8001caa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001cac:	2327      	movs	r3, #39	; 0x27
 8001cae:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cc4:	2340      	movs	r3, #64	; 0x40
 8001cc6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cd4:	f107 0320 	add.w	r3, r7, #32
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f002 fac5 	bl	8004268 <HAL_RCC_OscConfig>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001ce4:	f000 f990 	bl	8002008 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001ce8:	236f      	movs	r3, #111	; 0x6f
 8001cea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	2101      	movs	r1, #1
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f002 fe3b 	bl	8004984 <HAL_RCC_ClockConfig>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001d14:	f000 f978 	bl	8002008 <Error_Handler>
  }
}
 8001d18:	bf00      	nop
 8001d1a:	3768      	adds	r7, #104	; 0x68
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	58000400 	.word	0x58000400

08001d24 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b094      	sub	sp, #80	; 0x50
 8001d28:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d2a:	463b      	mov	r3, r7
 8001d2c:	2250      	movs	r2, #80	; 0x50
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f007 ff27 	bl	8009b84 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001d36:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001d3a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001d3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d40:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001d42:	2300      	movs	r3, #0
 8001d44:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d4a:	463b      	mov	r3, r7
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f003 fa56 	bl	80051fe <HAL_RCCEx_PeriphCLKConfig>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001d58:	f000 f956 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001d5c:	bf00      	nop
 8001d5e:	3750      	adds	r7, #80	; 0x50
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d6a:	4a1c      	ldr	r2, [pc, #112]	; (8001ddc <MX_I2C1_Init+0x78>)
 8001d6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d70:	4a1b      	ldr	r2, [pc, #108]	; (8001de0 <MX_I2C1_Init+0x7c>)
 8001d72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d74:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d7a:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d80:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d86:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d9e:	480e      	ldr	r0, [pc, #56]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001da0:	f001 f9f6 	bl	8003190 <HAL_I2C_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001daa:	f000 f92d 	bl	8002008 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001dae:	2100      	movs	r1, #0
 8001db0:	4809      	ldr	r0, [pc, #36]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001db2:	f001 fda7 	bl	8003904 <HAL_I2CEx_ConfigAnalogFilter>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001dbc:	f000 f924 	bl	8002008 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <MX_I2C1_Init+0x74>)
 8001dc4:	f001 fde9 	bl	800399a <HAL_I2CEx_ConfigDigitalFilter>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001dce:	f000 f91b 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000240 	.word	0x20000240
 8001ddc:	40005400 	.word	0x40005400
 8001de0:	00303d5b 	.word	0x00303d5b

08001de4 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <MX_IPCC_Init+0x20>)
 8001dea:	4a07      	ldr	r2, [pc, #28]	; (8001e08 <MX_IPCC_Init+0x24>)
 8001dec:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001dee:	4805      	ldr	r0, [pc, #20]	; (8001e04 <MX_IPCC_Init+0x20>)
 8001df0:	f001 fe20 	bl	8003a34 <HAL_IPCC_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001dfa:	f000 f905 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	2000028c 	.word	0x2000028c
 8001e08:	58000c00 	.word	0x58000c00

08001e0c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e20:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <MX_RTC_Init+0x60>)
 8001e22:	4a17      	ldr	r2, [pc, #92]	; (8001e80 <MX_RTC_Init+0x64>)
 8001e24:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <MX_RTC_Init+0x60>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001e2c:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <MX_RTC_Init+0x60>)
 8001e2e:	220f      	movs	r2, #15
 8001e30:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001e32:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <MX_RTC_Init+0x60>)
 8001e34:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001e38:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e3a:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <MX_RTC_Init+0x60>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e40:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <MX_RTC_Init+0x60>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e46:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <MX_RTC_Init+0x60>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <MX_RTC_Init+0x60>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e52:	480a      	ldr	r0, [pc, #40]	; (8001e7c <MX_RTC_Init+0x60>)
 8001e54:	f003 fc5a 	bl	800570c <HAL_RTC_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001e5e:	f000 f8d3 	bl	8002008 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001e62:	2200      	movs	r2, #0
 8001e64:	2100      	movs	r1, #0
 8001e66:	4805      	ldr	r0, [pc, #20]	; (8001e7c <MX_RTC_Init+0x60>)
 8001e68:	f003 fd3e 	bl	80058e8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001e72:	f000 f8c9 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	200002c8 	.word	0x200002c8
 8001e80:	40002800 	.word	0x40002800

08001e84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e88:	4b22      	ldr	r3, [pc, #136]	; (8001f14 <MX_USART1_UART_Init+0x90>)
 8001e8a:	4a23      	ldr	r2, [pc, #140]	; (8001f18 <MX_USART1_UART_Init+0x94>)
 8001e8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e8e:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <MX_USART1_UART_Init+0x90>)
 8001e90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e96:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <MX_USART1_UART_Init+0x90>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <MX_USART1_UART_Init+0x90>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ea2:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <MX_USART1_UART_Init+0x90>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ea8:	4b1a      	ldr	r3, [pc, #104]	; (8001f14 <MX_USART1_UART_Init+0x90>)
 8001eaa:	220c      	movs	r2, #12
 8001eac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eae:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <MX_USART1_UART_Init+0x90>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb4:	4b17      	ldr	r3, [pc, #92]	; (8001f14 <MX_USART1_UART_Init+0x90>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eba:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <MX_USART1_UART_Init+0x90>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ec0:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <MX_USART1_UART_Init+0x90>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ec6:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <MX_USART1_UART_Init+0x90>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ecc:	4811      	ldr	r0, [pc, #68]	; (8001f14 <MX_USART1_UART_Init+0x90>)
 8001ece:	f003 fde7 	bl	8005aa0 <HAL_UART_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001ed8:	f000 f896 	bl	8002008 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001edc:	2100      	movs	r1, #0
 8001ede:	480d      	ldr	r0, [pc, #52]	; (8001f14 <MX_USART1_UART_Init+0x90>)
 8001ee0:	f004 fada 	bl	8006498 <HAL_UARTEx_SetTxFifoThreshold>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001eea:	f000 f88d 	bl	8002008 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4808      	ldr	r0, [pc, #32]	; (8001f14 <MX_USART1_UART_Init+0x90>)
 8001ef2:	f004 fb0f 	bl	8006514 <HAL_UARTEx_SetRxFifoThreshold>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001efc:	f000 f884 	bl	8002008 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001f00:	4804      	ldr	r0, [pc, #16]	; (8001f14 <MX_USART1_UART_Init+0x90>)
 8001f02:	f004 fa90 	bl	8006426 <HAL_UARTEx_DisableFifoMode>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001f0c:	f000 f87c 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f10:	bf00      	nop
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	200002ec 	.word	0x200002ec
 8001f18:	40013800 	.word	0x40013800

08001f1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f30:	2004      	movs	r0, #4
 8001f32:	f7ff fdca 	bl	8001aca <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f36:	2002      	movs	r0, #2
 8001f38:	f7ff fdc7 	bl	8001aca <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	f7ff fdc4 	bl	8001aca <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f42:	2008      	movs	r0, #8
 8001f44:	f7ff fdc1 	bl	8001aca <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2123      	movs	r1, #35	; 0x23
 8001f4c:	481d      	ldr	r0, [pc, #116]	; (8001fc4 <MX_GPIO_Init+0xa8>)
 8001f4e:	f001 f8c9 	bl	80030e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f52:	2310      	movs	r3, #16
 8001f54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f56:	2300      	movs	r3, #0
 8001f58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	4619      	mov	r1, r3
 8001f62:	4819      	ldr	r0, [pc, #100]	; (8001fc8 <MX_GPIO_Init+0xac>)
 8001f64:	f000 ff36 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001f68:	2323      	movs	r3, #35	; 0x23
 8001f6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2300      	movs	r3, #0
 8001f76:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4811      	ldr	r0, [pc, #68]	; (8001fc4 <MX_GPIO_Init+0xa8>)
 8001f7e:	f000 ff29 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001f94:	230a      	movs	r3, #10
 8001f96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fa0:	f000 ff18 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4805      	ldr	r0, [pc, #20]	; (8001fcc <MX_GPIO_Init+0xb0>)
 8001fb6:	f000 ff0d 	bl	8002dd4 <HAL_GPIO_Init>

}
 8001fba:	bf00      	nop
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	48000400 	.word	0x48000400
 8001fc8:	48000800 	.word	0x48000800
 8001fcc:	48000c00 	.word	0x48000c00

08001fd0 <UART_Transmit>:

/* USER CODE BEGIN 4 */

int UART_Transmit(uint8_t* data, uint16_t size){
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	807b      	strh	r3, [r7, #2]
	  HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, data, size, 0xffff);
 8001fdc:	887a      	ldrh	r2, [r7, #2]
 8001fde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	4807      	ldr	r0, [pc, #28]	; (8002004 <UART_Transmit+0x34>)
 8001fe6:	f003 fdab 	bl	8005b40 <HAL_UART_Transmit>
 8001fea:	4603      	mov	r3, r0
 8001fec:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK) {
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <UART_Transmit+0x28>
        //while (1);
        return 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	e000      	b.n	8001ffa <UART_Transmit+0x2a>
    }
    return 1;
 8001ff8:	2301      	movs	r3, #1
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	200002ec 	.word	0x200002ec

08002008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800200c:	b672      	cpsid	i
}
 800200e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002010:	e7fe      	b.n	8002010 <Error_Handler+0x8>

08002012 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002016:	bf00      	nop
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af04      	add	r7, sp, #16
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800202a:	f04f 33ff 	mov.w	r3, #4294967295
 800202e:	9302      	str	r3, [sp, #8]
 8002030:	2301      	movs	r3, #1
 8002032:	9301      	str	r3, [sp, #4]
 8002034:	1dfb      	adds	r3, r7, #7
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	2301      	movs	r3, #1
 800203a:	2200      	movs	r2, #0
 800203c:	2178      	movs	r1, #120	; 0x78
 800203e:	4803      	ldr	r0, [pc, #12]	; (800204c <ssd1306_WriteCommand+0x2c>)
 8002040:	f001 f936 	bl	80032b0 <HAL_I2C_Mem_Write>
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20000240 	.word	0x20000240

08002050 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af04      	add	r7, sp, #16
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	b29b      	uxth	r3, r3
 800205e:	f04f 32ff 	mov.w	r2, #4294967295
 8002062:	9202      	str	r2, [sp, #8]
 8002064:	9301      	str	r3, [sp, #4]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	2301      	movs	r3, #1
 800206c:	2240      	movs	r2, #64	; 0x40
 800206e:	2178      	movs	r1, #120	; 0x78
 8002070:	4803      	ldr	r0, [pc, #12]	; (8002080 <ssd1306_WriteData+0x30>)
 8002072:	f001 f91d 	bl	80032b0 <HAL_I2C_Mem_Write>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000240 	.word	0x20000240

08002084 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002088:	f7ff ffc3 	bl	8002012 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800208c:	2064      	movs	r0, #100	; 0x64
 800208e:	f7fe fe72 	bl	8000d76 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002092:	2000      	movs	r0, #0
 8002094:	f000 f9e6 	bl	8002464 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002098:	2020      	movs	r0, #32
 800209a:	f7ff ffc1 	bl	8002020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800209e:	2000      	movs	r0, #0
 80020a0:	f7ff ffbe 	bl	8002020 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80020a4:	20b0      	movs	r0, #176	; 0xb0
 80020a6:	f7ff ffbb 	bl	8002020 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80020aa:	20c8      	movs	r0, #200	; 0xc8
 80020ac:	f7ff ffb8 	bl	8002020 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80020b0:	2000      	movs	r0, #0
 80020b2:	f7ff ffb5 	bl	8002020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80020b6:	2010      	movs	r0, #16
 80020b8:	f7ff ffb2 	bl	8002020 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80020bc:	2040      	movs	r0, #64	; 0x40
 80020be:	f7ff ffaf 	bl	8002020 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80020c2:	20ff      	movs	r0, #255	; 0xff
 80020c4:	f000 f9ba 	bl	800243c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80020c8:	20a1      	movs	r0, #161	; 0xa1
 80020ca:	f7ff ffa9 	bl	8002020 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80020ce:	20a6      	movs	r0, #166	; 0xa6
 80020d0:	f7ff ffa6 	bl	8002020 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80020d4:	20a8      	movs	r0, #168	; 0xa8
 80020d6:	f7ff ffa3 	bl	8002020 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80020da:	203f      	movs	r0, #63	; 0x3f
 80020dc:	f7ff ffa0 	bl	8002020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80020e0:	20a4      	movs	r0, #164	; 0xa4
 80020e2:	f7ff ff9d 	bl	8002020 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80020e6:	20d3      	movs	r0, #211	; 0xd3
 80020e8:	f7ff ff9a 	bl	8002020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80020ec:	2000      	movs	r0, #0
 80020ee:	f7ff ff97 	bl	8002020 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80020f2:	20d5      	movs	r0, #213	; 0xd5
 80020f4:	f7ff ff94 	bl	8002020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80020f8:	20f0      	movs	r0, #240	; 0xf0
 80020fa:	f7ff ff91 	bl	8002020 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80020fe:	20d9      	movs	r0, #217	; 0xd9
 8002100:	f7ff ff8e 	bl	8002020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002104:	2022      	movs	r0, #34	; 0x22
 8002106:	f7ff ff8b 	bl	8002020 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800210a:	20da      	movs	r0, #218	; 0xda
 800210c:	f7ff ff88 	bl	8002020 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002110:	2012      	movs	r0, #18
 8002112:	f7ff ff85 	bl	8002020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002116:	20db      	movs	r0, #219	; 0xdb
 8002118:	f7ff ff82 	bl	8002020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800211c:	2020      	movs	r0, #32
 800211e:	f7ff ff7f 	bl	8002020 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002122:	208d      	movs	r0, #141	; 0x8d
 8002124:	f7ff ff7c 	bl	8002020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002128:	2014      	movs	r0, #20
 800212a:	f7ff ff79 	bl	8002020 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800212e:	2001      	movs	r0, #1
 8002130:	f000 f998 	bl	8002464 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002134:	2000      	movs	r0, #0
 8002136:	f000 f80f 	bl	8002158 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800213a:	f000 f831 	bl	80021a0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800213e:	4b05      	ldr	r3, [pc, #20]	; (8002154 <ssd1306_Init+0xd0>)
 8002140:	2200      	movs	r2, #0
 8002142:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002144:	4b03      	ldr	r3, [pc, #12]	; (8002154 <ssd1306_Init+0xd0>)
 8002146:	2200      	movs	r2, #0
 8002148:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800214a:	4b02      	ldr	r3, [pc, #8]	; (8002154 <ssd1306_Init+0xd0>)
 800214c:	2201      	movs	r2, #1
 800214e:	715a      	strb	r2, [r3, #5]
}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}
 8002154:	2000077c 	.word	0x2000077c

08002158 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	e00d      	b.n	8002184 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <ssd1306_Fill+0x1a>
 800216e:	2100      	movs	r1, #0
 8002170:	e000      	b.n	8002174 <ssd1306_Fill+0x1c>
 8002172:	21ff      	movs	r1, #255	; 0xff
 8002174:	4a09      	ldr	r2, [pc, #36]	; (800219c <ssd1306_Fill+0x44>)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	4413      	add	r3, r2
 800217a:	460a      	mov	r2, r1
 800217c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	3301      	adds	r3, #1
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800218a:	d3ed      	bcc.n	8002168 <ssd1306_Fill+0x10>
    }
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	2000037c 	.word	0x2000037c

080021a0 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80021a6:	2300      	movs	r3, #0
 80021a8:	71fb      	strb	r3, [r7, #7]
 80021aa:	e016      	b.n	80021da <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	3b50      	subs	r3, #80	; 0x50
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff ff34 	bl	8002020 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80021b8:	2000      	movs	r0, #0
 80021ba:	f7ff ff31 	bl	8002020 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80021be:	2010      	movs	r0, #16
 80021c0:	f7ff ff2e 	bl	8002020 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	01db      	lsls	r3, r3, #7
 80021c8:	4a08      	ldr	r2, [pc, #32]	; (80021ec <ssd1306_UpdateScreen+0x4c>)
 80021ca:	4413      	add	r3, r2
 80021cc:	2180      	movs	r1, #128	; 0x80
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff ff3e 	bl	8002050 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	3301      	adds	r3, #1
 80021d8:	71fb      	strb	r3, [r7, #7]
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	2b07      	cmp	r3, #7
 80021de:	d9e5      	bls.n	80021ac <ssd1306_UpdateScreen+0xc>
    }
}
 80021e0:	bf00      	nop
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	2000037c 	.word	0x2000037c

080021f0 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
 80021fa:	460b      	mov	r3, r1
 80021fc:	71bb      	strb	r3, [r7, #6]
 80021fe:	4613      	mov	r3, r2
 8002200:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	2b00      	cmp	r3, #0
 8002208:	db48      	blt.n	800229c <ssd1306_DrawPixel+0xac>
 800220a:	79bb      	ldrb	r3, [r7, #6]
 800220c:	2b3f      	cmp	r3, #63	; 0x3f
 800220e:	d845      	bhi.n	800229c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8002210:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <ssd1306_DrawPixel+0xb8>)
 8002212:	791b      	ldrb	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d006      	beq.n	8002226 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8002218:	797b      	ldrb	r3, [r7, #5]
 800221a:	2b00      	cmp	r3, #0
 800221c:	bf0c      	ite	eq
 800221e:	2301      	moveq	r3, #1
 8002220:	2300      	movne	r3, #0
 8002222:	b2db      	uxtb	r3, r3
 8002224:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8002226:	797b      	ldrb	r3, [r7, #5]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d11a      	bne.n	8002262 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800222c:	79fa      	ldrb	r2, [r7, #7]
 800222e:	79bb      	ldrb	r3, [r7, #6]
 8002230:	08db      	lsrs	r3, r3, #3
 8002232:	b2d8      	uxtb	r0, r3
 8002234:	4603      	mov	r3, r0
 8002236:	01db      	lsls	r3, r3, #7
 8002238:	4413      	add	r3, r2
 800223a:	4a1c      	ldr	r2, [pc, #112]	; (80022ac <ssd1306_DrawPixel+0xbc>)
 800223c:	5cd3      	ldrb	r3, [r2, r3]
 800223e:	b25a      	sxtb	r2, r3
 8002240:	79bb      	ldrb	r3, [r7, #6]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	2101      	movs	r1, #1
 8002248:	fa01 f303 	lsl.w	r3, r1, r3
 800224c:	b25b      	sxtb	r3, r3
 800224e:	4313      	orrs	r3, r2
 8002250:	b259      	sxtb	r1, r3
 8002252:	79fa      	ldrb	r2, [r7, #7]
 8002254:	4603      	mov	r3, r0
 8002256:	01db      	lsls	r3, r3, #7
 8002258:	4413      	add	r3, r2
 800225a:	b2c9      	uxtb	r1, r1
 800225c:	4a13      	ldr	r2, [pc, #76]	; (80022ac <ssd1306_DrawPixel+0xbc>)
 800225e:	54d1      	strb	r1, [r2, r3]
 8002260:	e01d      	b.n	800229e <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002262:	79fa      	ldrb	r2, [r7, #7]
 8002264:	79bb      	ldrb	r3, [r7, #6]
 8002266:	08db      	lsrs	r3, r3, #3
 8002268:	b2d8      	uxtb	r0, r3
 800226a:	4603      	mov	r3, r0
 800226c:	01db      	lsls	r3, r3, #7
 800226e:	4413      	add	r3, r2
 8002270:	4a0e      	ldr	r2, [pc, #56]	; (80022ac <ssd1306_DrawPixel+0xbc>)
 8002272:	5cd3      	ldrb	r3, [r2, r3]
 8002274:	b25a      	sxtb	r2, r3
 8002276:	79bb      	ldrb	r3, [r7, #6]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	2101      	movs	r1, #1
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	b25b      	sxtb	r3, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	b25b      	sxtb	r3, r3
 8002288:	4013      	ands	r3, r2
 800228a:	b259      	sxtb	r1, r3
 800228c:	79fa      	ldrb	r2, [r7, #7]
 800228e:	4603      	mov	r3, r0
 8002290:	01db      	lsls	r3, r3, #7
 8002292:	4413      	add	r3, r2
 8002294:	b2c9      	uxtb	r1, r1
 8002296:	4a05      	ldr	r2, [pc, #20]	; (80022ac <ssd1306_DrawPixel+0xbc>)
 8002298:	54d1      	strb	r1, [r2, r3]
 800229a:	e000      	b.n	800229e <ssd1306_DrawPixel+0xae>
        return;
 800229c:	bf00      	nop
    }
}
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	2000077c 	.word	0x2000077c
 80022ac:	2000037c 	.word	0x2000037c

080022b0 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b089      	sub	sp, #36	; 0x24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4604      	mov	r4, r0
 80022b8:	1d38      	adds	r0, r7, #4
 80022ba:	e880 0006 	stmia.w	r0, {r1, r2}
 80022be:	461a      	mov	r2, r3
 80022c0:	4623      	mov	r3, r4
 80022c2:	73fb      	strb	r3, [r7, #15]
 80022c4:	4613      	mov	r3, r2
 80022c6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	2b1f      	cmp	r3, #31
 80022cc:	d902      	bls.n	80022d4 <ssd1306_WriteChar+0x24>
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
 80022d0:	2b7e      	cmp	r3, #126	; 0x7e
 80022d2:	d901      	bls.n	80022d8 <ssd1306_WriteChar+0x28>
        return 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	e06d      	b.n	80023b4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80022d8:	4b38      	ldr	r3, [pc, #224]	; (80023bc <ssd1306_WriteChar+0x10c>)
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	461a      	mov	r2, r3
 80022de:	793b      	ldrb	r3, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	2b80      	cmp	r3, #128	; 0x80
 80022e4:	dc06      	bgt.n	80022f4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80022e6:	4b35      	ldr	r3, [pc, #212]	; (80023bc <ssd1306_WriteChar+0x10c>)
 80022e8:	885b      	ldrh	r3, [r3, #2]
 80022ea:	461a      	mov	r2, r3
 80022ec:	797b      	ldrb	r3, [r7, #5]
 80022ee:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80022f0:	2b40      	cmp	r3, #64	; 0x40
 80022f2:	dd01      	ble.n	80022f8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	e05d      	b.n	80023b4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80022f8:	2300      	movs	r3, #0
 80022fa:	61fb      	str	r3, [r7, #28]
 80022fc:	e04c      	b.n	8002398 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	3b20      	subs	r3, #32
 8002304:	7979      	ldrb	r1, [r7, #5]
 8002306:	fb01 f303 	mul.w	r3, r1, r3
 800230a:	4619      	mov	r1, r3
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	440b      	add	r3, r1
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4413      	add	r3, r2
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002318:	2300      	movs	r3, #0
 800231a:	61bb      	str	r3, [r7, #24]
 800231c:	e034      	b.n	8002388 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d012      	beq.n	8002354 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800232e:	4b23      	ldr	r3, [pc, #140]	; (80023bc <ssd1306_WriteChar+0x10c>)
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	b2da      	uxtb	r2, r3
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	b2db      	uxtb	r3, r3
 8002338:	4413      	add	r3, r2
 800233a:	b2d8      	uxtb	r0, r3
 800233c:	4b1f      	ldr	r3, [pc, #124]	; (80023bc <ssd1306_WriteChar+0x10c>)
 800233e:	885b      	ldrh	r3, [r3, #2]
 8002340:	b2da      	uxtb	r2, r3
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	4413      	add	r3, r2
 8002348:	b2db      	uxtb	r3, r3
 800234a:	7bba      	ldrb	r2, [r7, #14]
 800234c:	4619      	mov	r1, r3
 800234e:	f7ff ff4f 	bl	80021f0 <ssd1306_DrawPixel>
 8002352:	e016      	b.n	8002382 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <ssd1306_WriteChar+0x10c>)
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	b2da      	uxtb	r2, r3
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	4413      	add	r3, r2
 8002360:	b2d8      	uxtb	r0, r3
 8002362:	4b16      	ldr	r3, [pc, #88]	; (80023bc <ssd1306_WriteChar+0x10c>)
 8002364:	885b      	ldrh	r3, [r3, #2]
 8002366:	b2da      	uxtb	r2, r3
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	b2db      	uxtb	r3, r3
 800236c:	4413      	add	r3, r2
 800236e:	b2d9      	uxtb	r1, r3
 8002370:	7bbb      	ldrb	r3, [r7, #14]
 8002372:	2b00      	cmp	r3, #0
 8002374:	bf0c      	ite	eq
 8002376:	2301      	moveq	r3, #1
 8002378:	2300      	movne	r3, #0
 800237a:	b2db      	uxtb	r3, r3
 800237c:	461a      	mov	r2, r3
 800237e:	f7ff ff37 	bl	80021f0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	3301      	adds	r3, #1
 8002386:	61bb      	str	r3, [r7, #24]
 8002388:	793b      	ldrb	r3, [r7, #4]
 800238a:	461a      	mov	r2, r3
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	4293      	cmp	r3, r2
 8002390:	d3c5      	bcc.n	800231e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3301      	adds	r3, #1
 8002396:	61fb      	str	r3, [r7, #28]
 8002398:	797b      	ldrb	r3, [r7, #5]
 800239a:	461a      	mov	r2, r3
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	4293      	cmp	r3, r2
 80023a0:	d3ad      	bcc.n	80022fe <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80023a2:	4b06      	ldr	r3, [pc, #24]	; (80023bc <ssd1306_WriteChar+0x10c>)
 80023a4:	881a      	ldrh	r2, [r3, #0]
 80023a6:	793b      	ldrb	r3, [r7, #4]
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	4b03      	ldr	r3, [pc, #12]	; (80023bc <ssd1306_WriteChar+0x10c>)
 80023b0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3724      	adds	r7, #36	; 0x24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd90      	pop	{r4, r7, pc}
 80023bc:	2000077c 	.word	0x2000077c

080023c0 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	1d38      	adds	r0, r7, #4
 80023ca:	e880 0006 	stmia.w	r0, {r1, r2}
 80023ce:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80023d0:	e012      	b.n	80023f8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	7818      	ldrb	r0, [r3, #0]
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	1d3a      	adds	r2, r7, #4
 80023da:	ca06      	ldmia	r2, {r1, r2}
 80023dc:	f7ff ff68 	bl	80022b0 <ssd1306_WriteChar>
 80023e0:	4603      	mov	r3, r0
 80023e2:	461a      	mov	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d002      	beq.n	80023f2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	e008      	b.n	8002404 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	3301      	adds	r3, #1
 80023f6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1e8      	bne.n	80023d2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	781b      	ldrb	r3, [r3, #0]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	460a      	mov	r2, r1
 8002416:	71fb      	strb	r3, [r7, #7]
 8002418:	4613      	mov	r3, r2
 800241a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	b29a      	uxth	r2, r3
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <ssd1306_SetCursor+0x2c>)
 8002422:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002424:	79bb      	ldrb	r3, [r7, #6]
 8002426:	b29a      	uxth	r2, r3
 8002428:	4b03      	ldr	r3, [pc, #12]	; (8002438 <ssd1306_SetCursor+0x2c>)
 800242a:	805a      	strh	r2, [r3, #2]
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	2000077c 	.word	0x2000077c

0800243c <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002446:	2381      	movs	r3, #129	; 0x81
 8002448:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff fde7 	bl	8002020 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fde3 	bl	8002020 <ssd1306_WriteCommand>
}
 800245a:	bf00      	nop
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002474:	23af      	movs	r3, #175	; 0xaf
 8002476:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002478:	4b08      	ldr	r3, [pc, #32]	; (800249c <ssd1306_SetDisplayOn+0x38>)
 800247a:	2201      	movs	r2, #1
 800247c:	719a      	strb	r2, [r3, #6]
 800247e:	e004      	b.n	800248a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002480:	23ae      	movs	r3, #174	; 0xae
 8002482:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <ssd1306_SetDisplayOn+0x38>)
 8002486:	2200      	movs	r2, #0
 8002488:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fdc7 	bl	8002020 <ssd1306_WriteCommand>
}
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	2000077c 	.word	0x2000077c

080024a0 <LL_RCC_EnableRTC>:
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80024a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80024b8:	bf00      	nop
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <LL_AHB2_GRP1_EnableClock>:
{
 80024c2:	b480      	push	{r7}
 80024c4:	b085      	sub	sp, #20
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80024ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80024da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4013      	ands	r3, r2
 80024e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024e6:	68fb      	ldr	r3, [r7, #12]
}
 80024e8:	bf00      	nop
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <LL_AHB3_GRP1_EnableClock>:
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80024fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002500:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002502:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4313      	orrs	r3, r2
 800250a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800250c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002510:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4013      	ands	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002518:	68fb      	ldr	r3, [r7, #12]
}
 800251a:	bf00      	nop
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002526:	b480      	push	{r7}
 8002528:	b085      	sub	sp, #20
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800252e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002532:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002534:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4313      	orrs	r3, r2
 800253c:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800253e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002542:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4013      	ands	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800254a:	68fb      	ldr	r3, [r7, #12]
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002564:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002566:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4313      	orrs	r3, r2
 800256e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002574:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4013      	ands	r3, r2
 800257a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800257c:	68fb      	ldr	r3, [r7, #12]
}
 800257e:	bf00      	nop
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800258e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002592:	f7ff ffaf 	bl	80024f4 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	2100      	movs	r1, #0
 800259a:	202e      	movs	r0, #46	; 0x2e
 800259c:	f000 fbbb 	bl	8002d16 <HAL_NVIC_SetPriority>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80025a0:	202e      	movs	r0, #46	; 0x2e
 80025a2:	f000 fbd2 	bl	8002d4a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b09c      	sub	sp, #112	; 0x70
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025c4:	f107 030c 	add.w	r3, r7, #12
 80025c8:	2250      	movs	r2, #80	; 0x50
 80025ca:	2100      	movs	r1, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f007 fad9 	bl	8009b84 <memset>
  if(hi2c->Instance==I2C1)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a17      	ldr	r2, [pc, #92]	; (8002634 <HAL_I2C_MspInit+0x88>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d126      	bne.n	800262a <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80025dc:	2304      	movs	r3, #4
 80025de:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80025e0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025e6:	f107 030c 	add.w	r3, r7, #12
 80025ea:	4618      	mov	r0, r3
 80025ec:	f002 fe07 	bl	80051fe <HAL_RCCEx_PeriphCLKConfig>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80025f6:	f7ff fd07 	bl	8002008 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fa:	2002      	movs	r0, #2
 80025fc:	f7ff ff61 	bl	80024c2 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002600:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002604:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002606:	2312      	movs	r3, #18
 8002608:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800260a:	2301      	movs	r3, #1
 800260c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800260e:	2302      	movs	r3, #2
 8002610:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002612:	2304      	movs	r3, #4
 8002614:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002616:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800261a:	4619      	mov	r1, r3
 800261c:	4806      	ldr	r0, [pc, #24]	; (8002638 <HAL_I2C_MspInit+0x8c>)
 800261e:	f000 fbd9 	bl	8002dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002622:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002626:	f7ff ff7e 	bl	8002526 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800262a:	bf00      	nop
 800262c:	3770      	adds	r7, #112	; 0x70
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40005400 	.word	0x40005400
 8002638:	48000400 	.word	0x48000400

0800263c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a0d      	ldr	r2, [pc, #52]	; (8002680 <HAL_IPCC_MspInit+0x44>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d113      	bne.n	8002676 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800264e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002652:	f7ff ff4f 	bl	80024f4 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002656:	2200      	movs	r2, #0
 8002658:	2100      	movs	r1, #0
 800265a:	202c      	movs	r0, #44	; 0x2c
 800265c:	f000 fb5b 	bl	8002d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002660:	202c      	movs	r0, #44	; 0x2c
 8002662:	f000 fb72 	bl	8002d4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002666:	2200      	movs	r2, #0
 8002668:	2100      	movs	r1, #0
 800266a:	202d      	movs	r0, #45	; 0x2d
 800266c:	f000 fb53 	bl	8002d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002670:	202d      	movs	r0, #45	; 0x2d
 8002672:	f000 fb6a 	bl	8002d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	58000c00 	.word	0x58000c00

08002684 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b096      	sub	sp, #88	; 0x58
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800268c:	f107 0308 	add.w	r3, r7, #8
 8002690:	2250      	movs	r2, #80	; 0x50
 8002692:	2100      	movs	r1, #0
 8002694:	4618      	mov	r0, r3
 8002696:	f007 fa75 	bl	8009b84 <memset>
  if(hrtc->Instance==RTC)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a12      	ldr	r2, [pc, #72]	; (80026e8 <HAL_RTC_MspInit+0x64>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d11d      	bne.n	80026e0 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80026a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026a8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80026aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026ae:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026b0:	f107 0308 	add.w	r3, r7, #8
 80026b4:	4618      	mov	r0, r3
 80026b6:	f002 fda2 	bl	80051fe <HAL_RCCEx_PeriphCLKConfig>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80026c0:	f7ff fca2 	bl	8002008 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026c4:	f7ff feec 	bl	80024a0 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80026c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80026cc:	f7ff ff2b 	bl	8002526 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80026d0:	2200      	movs	r2, #0
 80026d2:	2100      	movs	r1, #0
 80026d4:	2003      	movs	r0, #3
 80026d6:	f000 fb1e 	bl	8002d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80026da:	2003      	movs	r0, #3
 80026dc:	f000 fb35 	bl	8002d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80026e0:	bf00      	nop
 80026e2:	3758      	adds	r7, #88	; 0x58
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40002800 	.word	0x40002800

080026ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b09c      	sub	sp, #112	; 0x70
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	60da      	str	r2, [r3, #12]
 8002702:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002704:	f107 030c 	add.w	r3, r7, #12
 8002708:	2250      	movs	r2, #80	; 0x50
 800270a:	2100      	movs	r1, #0
 800270c:	4618      	mov	r0, r3
 800270e:	f007 fa39 	bl	8009b84 <memset>
  if(huart->Instance==USART1)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a16      	ldr	r2, [pc, #88]	; (8002770 <HAL_UART_MspInit+0x84>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d124      	bne.n	8002766 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800271c:	2301      	movs	r3, #1
 800271e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002720:	2300      	movs	r3, #0
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002724:	f107 030c 	add.w	r3, r7, #12
 8002728:	4618      	mov	r0, r3
 800272a:	f002 fd68 	bl	80051fe <HAL_RCCEx_PeriphCLKConfig>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002734:	f7ff fc68 	bl	8002008 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002738:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800273c:	f7ff ff0c 	bl	8002558 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002740:	2002      	movs	r0, #2
 8002742:	f7ff febe 	bl	80024c2 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002746:	23c0      	movs	r3, #192	; 0xc0
 8002748:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274a:	2302      	movs	r3, #2
 800274c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274e:	2300      	movs	r3, #0
 8002750:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002752:	2300      	movs	r3, #0
 8002754:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002756:	2307      	movs	r3, #7
 8002758:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800275e:	4619      	mov	r1, r3
 8002760:	4804      	ldr	r0, [pc, #16]	; (8002774 <HAL_UART_MspInit+0x88>)
 8002762:	f000 fb37 	bl	8002dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002766:	bf00      	nop
 8002768:	3770      	adds	r7, #112	; 0x70
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40013800 	.word	0x40013800
 8002774:	48000400 	.word	0x48000400

08002778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800277c:	e7fe      	b.n	800277c <NMI_Handler+0x4>

0800277e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800277e:	b480      	push	{r7}
 8002780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002782:	e7fe      	b.n	8002782 <HardFault_Handler+0x4>

08002784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002788:	e7fe      	b.n	8002788 <MemManage_Handler+0x4>

0800278a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800278a:	b480      	push	{r7}
 800278c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800278e:	e7fe      	b.n	800278e <BusFault_Handler+0x4>

08002790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002794:	e7fe      	b.n	8002794 <UsageFault_Handler+0x4>

08002796 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002796:	b480      	push	{r7}
 8002798:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027c4:	f000 f934 	bl	8002a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027c8:	bf00      	nop
 80027ca:	bd80      	pop	{r7, pc}

080027cc <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80027d0:	f7fe fe8a 	bl	80014e8 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80027d4:	bf00      	nop
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80027dc:	f006 fdcc 	bl	8009378 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80027e0:	bf00      	nop
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80027e8:	f006 fdfe 	bl	80093e8 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80027ec:	bf00      	nop
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80027f4:	f000 fca8 	bl	8003148 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80027f8:	bf00      	nop
 80027fa:	bd80      	pop	{r7, pc}

080027fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002804:	4a14      	ldr	r2, [pc, #80]	; (8002858 <_sbrk+0x5c>)
 8002806:	4b15      	ldr	r3, [pc, #84]	; (800285c <_sbrk+0x60>)
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002810:	4b13      	ldr	r3, [pc, #76]	; (8002860 <_sbrk+0x64>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d102      	bne.n	800281e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002818:	4b11      	ldr	r3, [pc, #68]	; (8002860 <_sbrk+0x64>)
 800281a:	4a12      	ldr	r2, [pc, #72]	; (8002864 <_sbrk+0x68>)
 800281c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800281e:	4b10      	ldr	r3, [pc, #64]	; (8002860 <_sbrk+0x64>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4413      	add	r3, r2
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	429a      	cmp	r2, r3
 800282a:	d207      	bcs.n	800283c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800282c:	f007 f958 	bl	8009ae0 <__errno>
 8002830:	4603      	mov	r3, r0
 8002832:	220c      	movs	r2, #12
 8002834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002836:	f04f 33ff 	mov.w	r3, #4294967295
 800283a:	e009      	b.n	8002850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800283c:	4b08      	ldr	r3, [pc, #32]	; (8002860 <_sbrk+0x64>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002842:	4b07      	ldr	r3, [pc, #28]	; (8002860 <_sbrk+0x64>)
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4413      	add	r3, r2
 800284a:	4a05      	ldr	r2, [pc, #20]	; (8002860 <_sbrk+0x64>)
 800284c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800284e:	68fb      	ldr	r3, [r7, #12]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	20030000 	.word	0x20030000
 800285c:	00000400 	.word	0x00000400
 8002860:	20000784 	.word	0x20000784
 8002864:	20000a00 	.word	0x20000a00

08002868 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800286c:	4b24      	ldr	r3, [pc, #144]	; (8002900 <SystemInit+0x98>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002872:	4a23      	ldr	r2, [pc, #140]	; (8002900 <SystemInit+0x98>)
 8002874:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002878:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800287c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800288c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002890:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002894:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028a0:	4b18      	ldr	r3, [pc, #96]	; (8002904 <SystemInit+0x9c>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80028a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028b2:	f023 0305 	bic.w	r3, r3, #5
 80028b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80028ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028c6:	f023 0301 	bic.w	r3, r3, #1
 80028ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80028ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d2:	4a0d      	ldr	r2, [pc, #52]	; (8002908 <SystemInit+0xa0>)
 80028d4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80028d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028da:	4a0b      	ldr	r2, [pc, #44]	; (8002908 <SystemInit+0xa0>)
 80028dc:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80028ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f2:	2200      	movs	r2, #0
 80028f4:	619a      	str	r2, [r3, #24]
}
 80028f6:	bf00      	nop
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	e000ed00 	.word	0xe000ed00
 8002904:	faf6fefb 	.word	0xfaf6fefb
 8002908:	22041000 	.word	0x22041000

0800290c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800290c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800290e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002910:	3304      	adds	r3, #4

08002912 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002912:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002914:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002916:	d3f9      	bcc.n	800290c <CopyDataInit>
  bx lr
 8002918:	4770      	bx	lr

0800291a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800291a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800291c:	3004      	adds	r0, #4

0800291e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800291e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002920:	d3fb      	bcc.n	800291a <FillZerobss>
  bx lr
 8002922:	4770      	bx	lr

08002924 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002924:	480c      	ldr	r0, [pc, #48]	; (8002958 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002926:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002928:	f7ff ff9e 	bl	8002868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800292c:	480b      	ldr	r0, [pc, #44]	; (800295c <LoopForever+0x8>)
 800292e:	490c      	ldr	r1, [pc, #48]	; (8002960 <LoopForever+0xc>)
 8002930:	4a0c      	ldr	r2, [pc, #48]	; (8002964 <LoopForever+0x10>)
 8002932:	2300      	movs	r3, #0
 8002934:	f7ff ffed 	bl	8002912 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002938:	480b      	ldr	r0, [pc, #44]	; (8002968 <LoopForever+0x14>)
 800293a:	490c      	ldr	r1, [pc, #48]	; (800296c <LoopForever+0x18>)
 800293c:	2300      	movs	r3, #0
 800293e:	f7ff ffee 	bl	800291e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002942:	480b      	ldr	r0, [pc, #44]	; (8002970 <LoopForever+0x1c>)
 8002944:	490b      	ldr	r1, [pc, #44]	; (8002974 <LoopForever+0x20>)
 8002946:	2300      	movs	r3, #0
 8002948:	f7ff ffe9 	bl	800291e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800294c:	f007 f8ce 	bl	8009aec <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002950:	f7ff f94a 	bl	8001be8 <main>

08002954 <LoopForever>:

LoopForever:
  b LoopForever
 8002954:	e7fe      	b.n	8002954 <LoopForever>
 8002956:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002958:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800295c:	20000004 	.word	0x20000004
 8002960:	200000a4 	.word	0x200000a4
 8002964:	0800d738 	.word	0x0800d738
  INIT_BSS _sbss, _ebss
 8002968:	20000218 	.word	0x20000218
 800296c:	20000a00 	.word	0x20000a00
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002970:	200301e0 	.word	0x200301e0
 8002974:	20030a57 	.word	0x20030a57

08002978 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002978:	e7fe      	b.n	8002978 <ADC1_IRQHandler>
	...

0800297c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002986:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <HAL_Init+0x3c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a0b      	ldr	r2, [pc, #44]	; (80029b8 <HAL_Init+0x3c>)
 800298c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002990:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002992:	2003      	movs	r0, #3
 8002994:	f000 f9b4 	bl	8002d00 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002998:	2000      	movs	r0, #0
 800299a:	f000 f80f 	bl	80029bc <HAL_InitTick>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	71fb      	strb	r3, [r7, #7]
 80029a8:	e001      	b.n	80029ae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029aa:	f7ff fdee 	bl	800258a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029ae:	79fb      	ldrb	r3, [r7, #7]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	58004000 	.word	0x58004000

080029bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80029c8:	4b17      	ldr	r3, [pc, #92]	; (8002a28 <HAL_InitTick+0x6c>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d024      	beq.n	8002a1a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80029d0:	f002 f984 	bl	8004cdc <HAL_RCC_GetHCLKFreq>
 80029d4:	4602      	mov	r2, r0
 80029d6:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <HAL_InitTick+0x6c>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	4619      	mov	r1, r3
 80029dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80029e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 f9ca 	bl	8002d82 <HAL_SYSTICK_Config>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10f      	bne.n	8002a14 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b0f      	cmp	r3, #15
 80029f8:	d809      	bhi.n	8002a0e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029fa:	2200      	movs	r2, #0
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002a02:	f000 f988 	bl	8002d16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a06:	4a09      	ldr	r2, [pc, #36]	; (8002a2c <HAL_InitTick+0x70>)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	e007      	b.n	8002a1e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	73fb      	strb	r3, [r7, #15]
 8002a12:	e004      	b.n	8002a1e <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	73fb      	strb	r3, [r7, #15]
 8002a18:	e001      	b.n	8002a1e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	2000002c 	.word	0x2000002c
 8002a2c:	20000028 	.word	0x20000028

08002a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <HAL_IncTick+0x20>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_IncTick+0x24>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4413      	add	r3, r2
 8002a40:	4a04      	ldr	r2, [pc, #16]	; (8002a54 <HAL_IncTick+0x24>)
 8002a42:	6013      	str	r3, [r2, #0]
}
 8002a44:	bf00      	nop
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	2000002c 	.word	0x2000002c
 8002a54:	20000788 	.word	0x20000788

08002a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a5c:	4b03      	ldr	r3, [pc, #12]	; (8002a6c <HAL_GetTick+0x14>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	20000788 	.word	0x20000788

08002a70 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002a74:	4b03      	ldr	r3, [pc, #12]	; (8002a84 <HAL_GetTickPrio+0x14>)
 8002a76:	681b      	ldr	r3, [r3, #0]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	20000028 	.word	0x20000028

08002a88 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8002a8c:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <HAL_GetTickFreq+0x14>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	2000002c 	.word	0x2000002c

08002aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002abc:	4013      	ands	r3, r2
 8002abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ac8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ad2:	4a04      	ldr	r2, [pc, #16]	; (8002ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	60d3      	str	r3, [r2, #12]
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aec:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <__NVIC_GetPriorityGrouping+0x18>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	0a1b      	lsrs	r3, r3, #8
 8002af2:	f003 0307 	and.w	r3, r3, #7
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	e000ed00 	.word	0xe000ed00

08002b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	db0b      	blt.n	8002b2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	f003 021f 	and.w	r2, r3, #31
 8002b1c:	4907      	ldr	r1, [pc, #28]	; (8002b3c <__NVIC_EnableIRQ+0x38>)
 8002b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	2001      	movs	r0, #1
 8002b26:	fa00 f202 	lsl.w	r2, r0, r2
 8002b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	e000e100 	.word	0xe000e100

08002b40 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	db12      	blt.n	8002b78 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	f003 021f 	and.w	r2, r3, #31
 8002b58:	490a      	ldr	r1, [pc, #40]	; (8002b84 <__NVIC_DisableIRQ+0x44>)
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	2001      	movs	r0, #1
 8002b62:	fa00 f202 	lsl.w	r2, r0, r2
 8002b66:	3320      	adds	r3, #32
 8002b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b6c:	f3bf 8f4f 	dsb	sy
}
 8002b70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b72:	f3bf 8f6f 	isb	sy
}
 8002b76:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000e100 	.word	0xe000e100

08002b88 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	db0c      	blt.n	8002bb4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	f003 021f 	and.w	r2, r3, #31
 8002ba0:	4907      	ldr	r1, [pc, #28]	; (8002bc0 <__NVIC_SetPendingIRQ+0x38>)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	2001      	movs	r0, #1
 8002baa:	fa00 f202 	lsl.w	r2, r0, r2
 8002bae:	3340      	adds	r3, #64	; 0x40
 8002bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	e000e100 	.word	0xe000e100

08002bc4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	db0c      	blt.n	8002bf0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	f003 021f 	and.w	r2, r3, #31
 8002bdc:	4907      	ldr	r1, [pc, #28]	; (8002bfc <__NVIC_ClearPendingIRQ+0x38>)
 8002bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	2001      	movs	r0, #1
 8002be6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bea:	3360      	adds	r3, #96	; 0x60
 8002bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	e000e100 	.word	0xe000e100

08002c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	6039      	str	r1, [r7, #0]
 8002c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	db0a      	blt.n	8002c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	490c      	ldr	r1, [pc, #48]	; (8002c4c <__NVIC_SetPriority+0x4c>)
 8002c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1e:	0112      	lsls	r2, r2, #4
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	440b      	add	r3, r1
 8002c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c28:	e00a      	b.n	8002c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	4908      	ldr	r1, [pc, #32]	; (8002c50 <__NVIC_SetPriority+0x50>)
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	3b04      	subs	r3, #4
 8002c38:	0112      	lsls	r2, r2, #4
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	761a      	strb	r2, [r3, #24]
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	e000e100 	.word	0xe000e100
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b089      	sub	sp, #36	; 0x24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f1c3 0307 	rsb	r3, r3, #7
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	bf28      	it	cs
 8002c72:	2304      	movcs	r3, #4
 8002c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	2b06      	cmp	r3, #6
 8002c7c:	d902      	bls.n	8002c84 <NVIC_EncodePriority+0x30>
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3b03      	subs	r3, #3
 8002c82:	e000      	b.n	8002c86 <NVIC_EncodePriority+0x32>
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c88:	f04f 32ff 	mov.w	r2, #4294967295
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43da      	mvns	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	401a      	ands	r2, r3
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca6:	43d9      	mvns	r1, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cac:	4313      	orrs	r3, r2
         );
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3724      	adds	r7, #36	; 0x24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
	...

08002cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ccc:	d301      	bcc.n	8002cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e00f      	b.n	8002cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cd2:	4a0a      	ldr	r2, [pc, #40]	; (8002cfc <SysTick_Config+0x40>)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cda:	210f      	movs	r1, #15
 8002cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce0:	f7ff ff8e 	bl	8002c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ce4:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <SysTick_Config+0x40>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cea:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <SysTick_Config+0x40>)
 8002cec:	2207      	movs	r2, #7
 8002cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	e000e010 	.word	0xe000e010

08002d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff fec9 	bl	8002aa0 <__NVIC_SetPriorityGrouping>
}
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b086      	sub	sp, #24
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	607a      	str	r2, [r7, #4]
 8002d22:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d24:	f7ff fee0 	bl	8002ae8 <__NVIC_GetPriorityGrouping>
 8002d28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	68b9      	ldr	r1, [r7, #8]
 8002d2e:	6978      	ldr	r0, [r7, #20]
 8002d30:	f7ff ff90 	bl	8002c54 <NVIC_EncodePriority>
 8002d34:	4602      	mov	r2, r0
 8002d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff ff5f 	bl	8002c00 <__NVIC_SetPriority>
}
 8002d42:	bf00      	nop
 8002d44:	3718      	adds	r7, #24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	4603      	mov	r3, r0
 8002d52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff fed3 	bl	8002b04 <__NVIC_EnableIRQ>
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fee3 	bl	8002b40 <__NVIC_DisableIRQ>
}
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff ff96 	bl	8002cbc <SysTick_Config>
 8002d90:	4603      	mov	r3, r0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	4603      	mov	r3, r0
 8002da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff feed 	bl	8002b88 <__NVIC_SetPendingIRQ>
}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b082      	sub	sp, #8
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff fefd 	bl	8002bc4 <__NVIC_ClearPendingIRQ>
}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002de2:	e14c      	b.n	800307e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	2101      	movs	r1, #1
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	fa01 f303 	lsl.w	r3, r1, r3
 8002df0:	4013      	ands	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 813e 	beq.w	8003078 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d005      	beq.n	8002e14 <HAL_GPIO_Init+0x40>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d130      	bne.n	8002e76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	2203      	movs	r2, #3
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43db      	mvns	r3, r3
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4013      	ands	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	091b      	lsrs	r3, r3, #4
 8002e60:	f003 0201 	and.w	r2, r3, #1
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	d017      	beq.n	8002eb2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43db      	mvns	r3, r3
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4013      	ands	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d123      	bne.n	8002f06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	08da      	lsrs	r2, r3, #3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3208      	adds	r2, #8
 8002ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	220f      	movs	r2, #15
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	691a      	ldr	r2, [r3, #16]
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	08da      	lsrs	r2, r3, #3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3208      	adds	r2, #8
 8002f00:	6939      	ldr	r1, [r7, #16]
 8002f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	2203      	movs	r2, #3
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43db      	mvns	r3, r3
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f003 0203 	and.w	r2, r3, #3
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 8098 	beq.w	8003078 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002f48:	4a54      	ldr	r2, [pc, #336]	; (800309c <HAL_GPIO_Init+0x2c8>)
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	089b      	lsrs	r3, r3, #2
 8002f4e:	3302      	adds	r3, #2
 8002f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	220f      	movs	r2, #15
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	43db      	mvns	r3, r3
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f72:	d019      	beq.n	8002fa8 <HAL_GPIO_Init+0x1d4>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a4a      	ldr	r2, [pc, #296]	; (80030a0 <HAL_GPIO_Init+0x2cc>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d013      	beq.n	8002fa4 <HAL_GPIO_Init+0x1d0>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a49      	ldr	r2, [pc, #292]	; (80030a4 <HAL_GPIO_Init+0x2d0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d00d      	beq.n	8002fa0 <HAL_GPIO_Init+0x1cc>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a48      	ldr	r2, [pc, #288]	; (80030a8 <HAL_GPIO_Init+0x2d4>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d007      	beq.n	8002f9c <HAL_GPIO_Init+0x1c8>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a47      	ldr	r2, [pc, #284]	; (80030ac <HAL_GPIO_Init+0x2d8>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d101      	bne.n	8002f98 <HAL_GPIO_Init+0x1c4>
 8002f94:	2304      	movs	r3, #4
 8002f96:	e008      	b.n	8002faa <HAL_GPIO_Init+0x1d6>
 8002f98:	2307      	movs	r3, #7
 8002f9a:	e006      	b.n	8002faa <HAL_GPIO_Init+0x1d6>
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e004      	b.n	8002faa <HAL_GPIO_Init+0x1d6>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e002      	b.n	8002faa <HAL_GPIO_Init+0x1d6>
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <HAL_GPIO_Init+0x1d6>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	f002 0203 	and.w	r2, r2, #3
 8002fb0:	0092      	lsls	r2, r2, #2
 8002fb2:	4093      	lsls	r3, r2
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fba:	4938      	ldr	r1, [pc, #224]	; (800309c <HAL_GPIO_Init+0x2c8>)
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	089b      	lsrs	r3, r3, #2
 8002fc0:	3302      	adds	r3, #2
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fc8:	4b39      	ldr	r3, [pc, #228]	; (80030b0 <HAL_GPIO_Init+0x2dc>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fec:	4a30      	ldr	r2, [pc, #192]	; (80030b0 <HAL_GPIO_Init+0x2dc>)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002ff2:	4b2f      	ldr	r3, [pc, #188]	; (80030b0 <HAL_GPIO_Init+0x2dc>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	4013      	ands	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4313      	orrs	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003016:	4a26      	ldr	r2, [pc, #152]	; (80030b0 <HAL_GPIO_Init+0x2dc>)
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800301c:	4b24      	ldr	r3, [pc, #144]	; (80030b0 <HAL_GPIO_Init+0x2dc>)
 800301e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	43db      	mvns	r3, r3
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	4013      	ands	r3, r2
 800302c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4313      	orrs	r3, r2
 8003040:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003042:	4a1b      	ldr	r2, [pc, #108]	; (80030b0 <HAL_GPIO_Init+0x2dc>)
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800304a:	4b19      	ldr	r3, [pc, #100]	; (80030b0 <HAL_GPIO_Init+0x2dc>)
 800304c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	43db      	mvns	r3, r3
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4013      	ands	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	4313      	orrs	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003070:	4a0f      	ldr	r2, [pc, #60]	; (80030b0 <HAL_GPIO_Init+0x2dc>)
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	3301      	adds	r3, #1
 800307c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	fa22 f303 	lsr.w	r3, r2, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	f47f aeab 	bne.w	8002de4 <HAL_GPIO_Init+0x10>
  }
}
 800308e:	bf00      	nop
 8003090:	bf00      	nop
 8003092:	371c      	adds	r7, #28
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	40010000 	.word	0x40010000
 80030a0:	48000400 	.word	0x48000400
 80030a4:	48000800 	.word	0x48000800
 80030a8:	48000c00 	.word	0x48000c00
 80030ac:	48001000 	.word	0x48001000
 80030b0:	58000800 	.word	0x58000800

080030b4 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	460b      	mov	r3, r1
 80030be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	887b      	ldrh	r3, [r7, #2]
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d002      	beq.n	80030d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030cc:	2301      	movs	r3, #1
 80030ce:	73fb      	strb	r3, [r7, #15]
 80030d0:	e001      	b.n	80030d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030d2:	2300      	movs	r3, #0
 80030d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	807b      	strh	r3, [r7, #2]
 80030f0:	4613      	mov	r3, r2
 80030f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030f4:	787b      	ldrb	r3, [r7, #1]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030fa:	887a      	ldrh	r2, [r7, #2]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003100:	e002      	b.n	8003108 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003102:	887a      	ldrh	r2, [r7, #2]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003126:	887a      	ldrh	r2, [r7, #2]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4013      	ands	r3, r2
 800312c:	041a      	lsls	r2, r3, #16
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	43d9      	mvns	r1, r3
 8003132:	887b      	ldrh	r3, [r7, #2]
 8003134:	400b      	ands	r3, r1
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	619a      	str	r2, [r3, #24]
}
 800313c:	bf00      	nop
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <HAL_HSEM_IRQHandler+0x30>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003154:	4b08      	ldr	r3, [pc, #32]	; (8003178 <HAL_HSEM_IRQHandler+0x30>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	43db      	mvns	r3, r3
 800315c:	4906      	ldr	r1, [pc, #24]	; (8003178 <HAL_HSEM_IRQHandler+0x30>)
 800315e:	4013      	ands	r3, r2
 8003160:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003162:	4a05      	ldr	r2, [pc, #20]	; (8003178 <HAL_HSEM_IRQHandler+0x30>)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f807 	bl	800317c <HAL_HSEM_FreeCallback>
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	58001500 	.word	0x58001500

0800317c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e081      	b.n	80032a6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d106      	bne.n	80031bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff f9f8 	bl	80025ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2224      	movs	r2, #36	; 0x24
 80031c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d107      	bne.n	800320a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003206:	609a      	str	r2, [r3, #8]
 8003208:	e006      	b.n	8003218 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003216:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	2b02      	cmp	r3, #2
 800321e:	d104      	bne.n	800322a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003228:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800323c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800324c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691a      	ldr	r2, [r3, #16]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69d9      	ldr	r1, [r3, #28]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a1a      	ldr	r2, [r3, #32]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b088      	sub	sp, #32
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	4608      	mov	r0, r1
 80032ba:	4611      	mov	r1, r2
 80032bc:	461a      	mov	r2, r3
 80032be:	4603      	mov	r3, r0
 80032c0:	817b      	strh	r3, [r7, #10]
 80032c2:	460b      	mov	r3, r1
 80032c4:	813b      	strh	r3, [r7, #8]
 80032c6:	4613      	mov	r3, r2
 80032c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b20      	cmp	r3, #32
 80032d4:	f040 80f9 	bne.w	80034ca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <HAL_I2C_Mem_Write+0x34>
 80032de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d105      	bne.n	80032f0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0ed      	b.n	80034cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d101      	bne.n	80032fe <HAL_I2C_Mem_Write+0x4e>
 80032fa:	2302      	movs	r3, #2
 80032fc:	e0e6      	b.n	80034cc <HAL_I2C_Mem_Write+0x21c>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003306:	f7ff fba7 	bl	8002a58 <HAL_GetTick>
 800330a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	2319      	movs	r3, #25
 8003312:	2201      	movs	r2, #1
 8003314:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f955 	bl	80035c8 <I2C_WaitOnFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e0d1      	b.n	80034cc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2221      	movs	r2, #33	; 0x21
 800332c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2240      	movs	r2, #64	; 0x40
 8003334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a3a      	ldr	r2, [r7, #32]
 8003342:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003348:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003350:	88f8      	ldrh	r0, [r7, #6]
 8003352:	893a      	ldrh	r2, [r7, #8]
 8003354:	8979      	ldrh	r1, [r7, #10]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	9301      	str	r3, [sp, #4]
 800335a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	4603      	mov	r3, r0
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f8b9 	bl	80034d8 <I2C_RequestMemoryWrite>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e0a9      	b.n	80034cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337c:	b29b      	uxth	r3, r3
 800337e:	2bff      	cmp	r3, #255	; 0xff
 8003380:	d90e      	bls.n	80033a0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	22ff      	movs	r2, #255	; 0xff
 8003386:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338c:	b2da      	uxtb	r2, r3
 800338e:	8979      	ldrh	r1, [r7, #10]
 8003390:	2300      	movs	r3, #0
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 fa81 	bl	80038a0 <I2C_TransferConfig>
 800339e:	e00f      	b.n	80033c0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	8979      	ldrh	r1, [r7, #10]
 80033b2:	2300      	movs	r3, #0
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 fa70 	bl	80038a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 f93f 	bl	8003648 <I2C_WaitOnTXISFlagUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e07b      	b.n	80034cc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	781a      	ldrb	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d034      	beq.n	8003478 <HAL_I2C_Mem_Write+0x1c8>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003412:	2b00      	cmp	r3, #0
 8003414:	d130      	bne.n	8003478 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341c:	2200      	movs	r2, #0
 800341e:	2180      	movs	r1, #128	; 0x80
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 f8d1 	bl	80035c8 <I2C_WaitOnFlagUntilTimeout>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e04d      	b.n	80034cc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003434:	b29b      	uxth	r3, r3
 8003436:	2bff      	cmp	r3, #255	; 0xff
 8003438:	d90e      	bls.n	8003458 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	22ff      	movs	r2, #255	; 0xff
 800343e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003444:	b2da      	uxtb	r2, r3
 8003446:	8979      	ldrh	r1, [r7, #10]
 8003448:	2300      	movs	r3, #0
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 fa25 	bl	80038a0 <I2C_TransferConfig>
 8003456:	e00f      	b.n	8003478 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003466:	b2da      	uxtb	r2, r3
 8003468:	8979      	ldrh	r1, [r7, #10]
 800346a:	2300      	movs	r3, #0
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 fa14 	bl	80038a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d19e      	bne.n	80033c0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 f91e 	bl	80036c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e01a      	b.n	80034cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2220      	movs	r2, #32
 800349c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6859      	ldr	r1, [r3, #4]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <HAL_I2C_Mem_Write+0x224>)
 80034aa:	400b      	ands	r3, r1
 80034ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2220      	movs	r2, #32
 80034b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	e000      	b.n	80034cc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80034ca:	2302      	movs	r3, #2
  }
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	fe00e800 	.word	0xfe00e800

080034d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af02      	add	r7, sp, #8
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	4608      	mov	r0, r1
 80034e2:	4611      	mov	r1, r2
 80034e4:	461a      	mov	r2, r3
 80034e6:	4603      	mov	r3, r0
 80034e8:	817b      	strh	r3, [r7, #10]
 80034ea:	460b      	mov	r3, r1
 80034ec:	813b      	strh	r3, [r7, #8]
 80034ee:	4613      	mov	r3, r2
 80034f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80034f2:	88fb      	ldrh	r3, [r7, #6]
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	8979      	ldrh	r1, [r7, #10]
 80034f8:	4b20      	ldr	r3, [pc, #128]	; (800357c <I2C_RequestMemoryWrite+0xa4>)
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 f9cd 	bl	80038a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003506:	69fa      	ldr	r2, [r7, #28]
 8003508:	69b9      	ldr	r1, [r7, #24]
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 f89c 	bl	8003648 <I2C_WaitOnTXISFlagUntilTimeout>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e02c      	b.n	8003574 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800351a:	88fb      	ldrh	r3, [r7, #6]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d105      	bne.n	800352c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003520:	893b      	ldrh	r3, [r7, #8]
 8003522:	b2da      	uxtb	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	629a      	str	r2, [r3, #40]	; 0x28
 800352a:	e015      	b.n	8003558 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800352c:	893b      	ldrh	r3, [r7, #8]
 800352e:	0a1b      	lsrs	r3, r3, #8
 8003530:	b29b      	uxth	r3, r3
 8003532:	b2da      	uxtb	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	69b9      	ldr	r1, [r7, #24]
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 f882 	bl	8003648 <I2C_WaitOnTXISFlagUntilTimeout>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e012      	b.n	8003574 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800354e:	893b      	ldrh	r3, [r7, #8]
 8003550:	b2da      	uxtb	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	2200      	movs	r2, #0
 8003560:	2180      	movs	r1, #128	; 0x80
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 f830 	bl	80035c8 <I2C_WaitOnFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	80002000 	.word	0x80002000

08003580 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b02      	cmp	r3, #2
 8003594:	d103      	bne.n	800359e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2200      	movs	r2, #0
 800359c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d007      	beq.n	80035bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699a      	ldr	r2, [r3, #24]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	619a      	str	r2, [r3, #24]
  }
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	4613      	mov	r3, r2
 80035d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035d8:	e022      	b.n	8003620 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e0:	d01e      	beq.n	8003620 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e2:	f7ff fa39 	bl	8002a58 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d302      	bcc.n	80035f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d113      	bne.n	8003620 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fc:	f043 0220 	orr.w	r2, r3, #32
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e00f      	b.n	8003640 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699a      	ldr	r2, [r3, #24]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	4013      	ands	r3, r2
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	429a      	cmp	r2, r3
 800362e:	bf0c      	ite	eq
 8003630:	2301      	moveq	r3, #1
 8003632:	2300      	movne	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	79fb      	ldrb	r3, [r7, #7]
 800363a:	429a      	cmp	r2, r3
 800363c:	d0cd      	beq.n	80035da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003654:	e02c      	b.n	80036b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f870 	bl	8003740 <I2C_IsErrorOccurred>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e02a      	b.n	80036c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003670:	d01e      	beq.n	80036b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003672:	f7ff f9f1 	bl	8002a58 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	429a      	cmp	r2, r3
 8003680:	d302      	bcc.n	8003688 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d113      	bne.n	80036b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368c:	f043 0220 	orr.w	r2, r3, #32
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e007      	b.n	80036c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d1cb      	bne.n	8003656 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036d4:	e028      	b.n	8003728 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 f830 	bl	8003740 <I2C_IsErrorOccurred>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e026      	b.n	8003738 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ea:	f7ff f9b5 	bl	8002a58 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d302      	bcc.n	8003700 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d113      	bne.n	8003728 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003704:	f043 0220 	orr.w	r2, r3, #32
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e007      	b.n	8003738 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b20      	cmp	r3, #32
 8003734:	d1cf      	bne.n	80036d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b088      	sub	sp, #32
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800374c:	2300      	movs	r3, #0
 800374e:	77fb      	strb	r3, [r7, #31]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	617b      	str	r3, [r7, #20]
  uint32_t error_code = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	61bb      	str	r3, [r7, #24]

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	2b00      	cmp	r3, #0
 8003764:	d040      	beq.n	80037e8 <I2C_IsErrorOccurred+0xa8>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003770:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003774:	d01d      	beq.n	80037b2 <I2C_IsErrorOccurred+0x72>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003784:	605a      	str	r2, [r3, #4]
    }

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003786:	e014      	b.n	80037b2 <I2C_IsErrorOccurred+0x72>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378e:	d010      	beq.n	80037b2 <I2C_IsErrorOccurred+0x72>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003790:	f7ff f962 	bl	8002a58 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	429a      	cmp	r2, r3
 800379e:	d302      	bcc.n	80037a6 <I2C_IsErrorOccurred+0x66>
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d105      	bne.n	80037b2 <I2C_IsErrorOccurred+0x72>
        {
          error_code |= HAL_I2C_ERROR_TIMEOUT;
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	f043 0320 	orr.w	r3, r3, #32
 80037ac:	61bb      	str	r3, [r7, #24]

          status = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	77fb      	strb	r3, [r7, #31]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	f003 0320 	and.w	r3, r3, #32
 80037bc:	2b20      	cmp	r3, #32
 80037be:	d002      	beq.n	80037c6 <I2C_IsErrorOccurred+0x86>
 80037c0:	7ffb      	ldrb	r3, [r7, #31]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0e0      	beq.n	8003788 <I2C_IsErrorOccurred+0x48>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037c6:	7ffb      	ldrb	r3, [r7, #31]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d103      	bne.n	80037d4 <I2C_IsErrorOccurred+0x94>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2220      	movs	r2, #32
 80037d2:	61da      	str	r2, [r3, #28]
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2210      	movs	r2, #16
 80037da:	61da      	str	r2, [r3, #28]

    error_code |= HAL_I2C_ERROR_AF;
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	f043 0304 	orr.w	r3, r3, #4
 80037e2:	61bb      	str	r3, [r7, #24]

    status = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	617b      	str	r3, [r7, #20]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <I2C_IsErrorOccurred+0xd0>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	f043 0301 	orr.w	r3, r3, #1
 8003800:	61bb      	str	r3, [r7, #24]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f44f 7280 	mov.w	r2, #256	; 0x100
 800380a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <I2C_IsErrorOccurred+0xf0>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	f043 0308 	orr.w	r3, r3, #8
 8003820:	61bb      	str	r3, [r7, #24]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800382a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <I2C_IsErrorOccurred+0x110>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	f043 0302 	orr.w	r3, r3, #2
 8003840:	61bb      	str	r3, [r7, #24]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800384a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	77fb      	strb	r3, [r7, #31]
  }

  if (status != HAL_OK)
 8003850:	7ffb      	ldrb	r3, [r7, #31]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d01c      	beq.n	8003890 <I2C_IsErrorOccurred+0x150>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f7ff fe92 	bl	8003580 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6859      	ldr	r1, [r3, #4]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	4b0d      	ldr	r3, [pc, #52]	; (800389c <I2C_IsErrorOccurred+0x15c>)
 8003868:	400b      	ands	r3, r1
 800386a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	431a      	orrs	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003890:	7ffb      	ldrb	r3, [r7, #31]
}
 8003892:	4618      	mov	r0, r3
 8003894:	3720      	adds	r7, #32
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	fe00e800 	.word	0xfe00e800

080038a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	607b      	str	r3, [r7, #4]
 80038aa:	460b      	mov	r3, r1
 80038ac:	817b      	strh	r3, [r7, #10]
 80038ae:	4613      	mov	r3, r2
 80038b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038b2:	897b      	ldrh	r3, [r7, #10]
 80038b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038b8:	7a7b      	ldrb	r3, [r7, #9]
 80038ba:	041b      	lsls	r3, r3, #16
 80038bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038c0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038ce:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	0d5b      	lsrs	r3, r3, #21
 80038da:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80038de:	4b08      	ldr	r3, [pc, #32]	; (8003900 <I2C_TransferConfig+0x60>)
 80038e0:	430b      	orrs	r3, r1
 80038e2:	43db      	mvns	r3, r3
 80038e4:	ea02 0103 	and.w	r1, r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038f2:	bf00      	nop
 80038f4:	371c      	adds	r7, #28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	03ff63ff 	.word	0x03ff63ff

08003904 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b20      	cmp	r3, #32
 8003918:	d138      	bne.n	800398c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003924:	2302      	movs	r3, #2
 8003926:	e032      	b.n	800398e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2224      	movs	r2, #36	; 0x24
 8003934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0201 	bic.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003956:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6819      	ldr	r1, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0201 	orr.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	e000      	b.n	800398e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800398c:	2302      	movs	r3, #2
  }
}
 800398e:	4618      	mov	r0, r3
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800399a:	b480      	push	{r7}
 800399c:	b085      	sub	sp, #20
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b20      	cmp	r3, #32
 80039ae:	d139      	bne.n	8003a24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e033      	b.n	8003a26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2224      	movs	r2, #36	; 0x24
 80039ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0201 	bic.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	021b      	lsls	r3, r3, #8
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0201 	orr.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a20:	2300      	movs	r3, #0
 8003a22:	e000      	b.n	8003a26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a24:	2302      	movs	r3, #2
  }
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
	...

08003a34 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d01e      	beq.n	8003a84 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003a46:	4b13      	ldr	r3, [pc, #76]	; (8003a94 <HAL_IPCC_Init+0x60>)
 8003a48:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d102      	bne.n	8003a5c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fe fdf0 	bl	800263c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003a5c:	68b8      	ldr	r0, [r7, #8]
 8003a5e:	f000 f85b 	bl	8003b18 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f82c 	bl	8003acc <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003a82:	e001      	b.n	8003a88 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	58000c00 	.word	0x58000c00

08003a98 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003aa6:	bf00      	nop
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b085      	sub	sp, #20
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	4613      	mov	r3, r2
 8003abe:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	e00f      	b.n	8003afa <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	4a0b      	ldr	r2, [pc, #44]	; (8003b10 <IPCC_SetDefaultCallbacks+0x44>)
 8003ae4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	3306      	adds	r3, #6
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	4a08      	ldr	r2, [pc, #32]	; (8003b14 <IPCC_SetDefaultCallbacks+0x48>)
 8003af2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	3301      	adds	r3, #1
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2b05      	cmp	r3, #5
 8003afe:	d9ec      	bls.n	8003ada <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003b00:	bf00      	nop
 8003b02:	bf00      	nop
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	08003a99 	.word	0x08003a99
 8003b14:	08003ab3 	.word	0x08003ab3

08003b18 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8003b2c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	223f      	movs	r2, #63	; 0x3f
 8003b32:	609a      	str	r2, [r3, #8]
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a04      	ldr	r2, [pc, #16]	; (8003b5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b4e:	6013      	str	r3, [r2, #0]
}
 8003b50:	bf00      	nop
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	58000400 	.word	0x58000400

08003b60 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b64:	4b04      	ldr	r3, [pc, #16]	; (8003b78 <HAL_PWREx_GetVoltageRange+0x18>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	58000400 	.word	0x58000400

08003b7c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b8e:	d101      	bne.n	8003b94 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003b90:	2301      	movs	r3, #1
 8003b92:	e000      	b.n	8003b96 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <LL_RCC_HSE_Enable>:
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb2:	6013      	str	r3, [r2, #0]
}
 8003bb4:	bf00      	nop
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <LL_RCC_HSE_Disable>:
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd0:	6013      	str	r3, [r2, #0]
}
 8003bd2:	bf00      	nop
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <LL_RCC_HSE_IsReady>:
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bee:	d101      	bne.n	8003bf4 <LL_RCC_HSE_IsReady+0x18>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e000      	b.n	8003bf6 <LL_RCC_HSE_IsReady+0x1a>
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <LL_RCC_HSI_Enable>:
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c12:	6013      	str	r3, [r2, #0]
}
 8003c14:	bf00      	nop
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <LL_RCC_HSI_Disable>:
{
 8003c1e:	b480      	push	{r7}
 8003c20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c30:	6013      	str	r3, [r2, #0]
}
 8003c32:	bf00      	nop
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <LL_RCC_HSI_IsReady>:
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c4e:	d101      	bne.n	8003c54 <LL_RCC_HSI_IsReady+0x18>
 8003c50:	2301      	movs	r3, #1
 8003c52:	e000      	b.n	8003c56 <LL_RCC_HSI_IsReady+0x1a>
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	061b      	lsls	r3, r3, #24
 8003c76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	604b      	str	r3, [r1, #4]
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <LL_RCC_HSI48_Enable>:
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003ca2:	bf00      	nop
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <LL_RCC_HSI48_Disable>:
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cbc:	f023 0301 	bic.w	r3, r3, #1
 8003cc0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003cc4:	bf00      	nop
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <LL_RCC_HSI48_IsReady>:
{
 8003cce:	b480      	push	{r7}
 8003cd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d101      	bne.n	8003ce6 <LL_RCC_HSI48_IsReady+0x18>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <LL_RCC_HSI48_IsReady+0x1a>
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <LL_RCC_LSE_Enable>:
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003d0a:	bf00      	nop
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <LL_RCC_LSE_Disable>:
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d24:	f023 0301 	bic.w	r3, r3, #1
 8003d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003d2c:	bf00      	nop
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <LL_RCC_LSE_EnableBypass>:
{
 8003d36:	b480      	push	{r7}
 8003d38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d46:	f043 0304 	orr.w	r3, r3, #4
 8003d4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003d4e:	bf00      	nop
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <LL_RCC_LSE_DisableBypass>:
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d68:	f023 0304 	bic.w	r3, r3, #4
 8003d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003d70:	bf00      	nop
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <LL_RCC_LSE_IsReady>:
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d101      	bne.n	8003d92 <LL_RCC_LSE_IsReady+0x18>
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e000      	b.n	8003d94 <LL_RCC_LSE_IsReady+0x1a>
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <LL_RCC_LSI1_Enable>:
{
 8003d9e:	b480      	push	{r7}
 8003da0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003daa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003db6:	bf00      	nop
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <LL_RCC_LSI1_Disable>:
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dd0:	f023 0301 	bic.w	r3, r3, #1
 8003dd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003dd8:	bf00      	nop
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <LL_RCC_LSI1_IsReady>:
{
 8003de2:	b480      	push	{r7}
 8003de4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d101      	bne.n	8003dfa <LL_RCC_LSI1_IsReady+0x18>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <LL_RCC_LSI1_IsReady+0x1a>
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <LL_RCC_LSI2_Enable>:
{
 8003e06:	b480      	push	{r7}
 8003e08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e16:	f043 0304 	orr.w	r3, r3, #4
 8003e1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003e1e:	bf00      	nop
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <LL_RCC_LSI2_Disable>:
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e38:	f023 0304 	bic.w	r3, r3, #4
 8003e3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003e40:	bf00      	nop
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <LL_RCC_LSI2_IsReady>:
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d101      	bne.n	8003e62 <LL_RCC_LSI2_IsReady+0x18>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e000      	b.n	8003e64 <LL_RCC_LSI2_IsReady+0x1a>
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <LL_RCC_LSI2_SetTrimming>:
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e7e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	021b      	lsls	r3, r3, #8
 8003e86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <LL_RCC_MSI_Enable>:
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	6013      	str	r3, [r2, #0]
}
 8003eb0:	bf00      	nop
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <LL_RCC_MSI_Disable>:
{
 8003eba:	b480      	push	{r7}
 8003ebc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ec8:	f023 0301 	bic.w	r3, r3, #1
 8003ecc:	6013      	str	r3, [r2, #0]
}
 8003ece:	bf00      	nop
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <LL_RCC_MSI_IsReady>:
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d101      	bne.n	8003eee <LL_RCC_MSI_IsReady+0x16>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <LL_RCC_MSI_IsReady+0x18>
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <LL_RCC_MSI_SetRange>:
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	600b      	str	r3, [r1, #0]
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <LL_RCC_MSI_GetRange>:
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f32:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2bb0      	cmp	r3, #176	; 0xb0
 8003f38:	d901      	bls.n	8003f3e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003f3a:	23b0      	movs	r3, #176	; 0xb0
 8003f3c:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003f3e:	687b      	ldr	r3, [r7, #4]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <LL_RCC_MSI_SetCalibTrimming>:
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	021b      	lsls	r3, r3, #8
 8003f62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f66:	4313      	orrs	r3, r2
 8003f68:	604b      	str	r3, [r1, #4]
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <LL_RCC_SetSysClkSource>:
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f023 0203 	bic.w	r2, r3, #3
 8003f88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	608b      	str	r3, [r1, #8]
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <LL_RCC_GetSysClkSource>:
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 030c 	and.w	r3, r3, #12
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <LL_RCC_SetAHBPrescaler>:
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	608b      	str	r3, [r1, #8]
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <LL_C2_RCC_SetAHBPrescaler>:
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003fee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <LL_RCC_SetAHB4Prescaler>:
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004016:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800401a:	f023 020f 	bic.w	r2, r3, #15
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	091b      	lsrs	r3, r3, #4
 8004022:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <LL_RCC_SetAPB1Prescaler>:
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800404a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4313      	orrs	r3, r2
 8004052:	608b      	str	r3, [r1, #8]
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <LL_RCC_SetAPB2Prescaler>:
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004072:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4313      	orrs	r3, r2
 800407a:	608b      	str	r3, [r1, #8]
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <LL_RCC_GetAHBPrescaler>:
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800408c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004096:	4618      	mov	r0, r3
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <LL_RCC_GetAHB4Prescaler>:
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80040a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <LL_RCC_GetAPB1Prescaler>:
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80040c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <LL_RCC_GetAPB2Prescaler>:
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80040d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <LL_RCC_PLL_Enable>:
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80040f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040fe:	6013      	str	r3, [r2, #0]
}
 8004100:	bf00      	nop
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <LL_RCC_PLL_Disable>:
{
 800410a:	b480      	push	{r7}
 800410c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800410e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004118:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800411c:	6013      	str	r3, [r2, #0]
}
 800411e:	bf00      	nop
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <LL_RCC_PLL_IsReady>:
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800412c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004136:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800413a:	d101      	bne.n	8004140 <LL_RCC_PLL_IsReady+0x18>
 800413c:	2301      	movs	r3, #1
 800413e:	e000      	b.n	8004142 <LL_RCC_PLL_IsReady+0x1a>
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <LL_RCC_PLL_GetN>:
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	0a1b      	lsrs	r3, r3, #8
 8004158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800415c:	4618      	mov	r0, r3
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <LL_RCC_PLL_GetR>:
{
 8004166:	b480      	push	{r7}
 8004168:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800416a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004174:	4618      	mov	r0, r3
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <LL_RCC_PLL_GetDivider>:
{
 800417e:	b480      	push	{r7}
 8004180:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800418c:	4618      	mov	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <LL_RCC_PLL_GetMainSource>:
{
 8004196:	b480      	push	{r7}
 8004198:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800419a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f003 0303 	and.w	r3, r3, #3
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <LL_RCC_IsActiveFlag_HPRE>:
{
 80041ae:	b480      	push	{r7}
 80041b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80041b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c0:	d101      	bne.n	80041c6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80041d2:	b480      	push	{r7}
 80041d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80041d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041da:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80041de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041e6:	d101      	bne.n	80041ec <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80041e8:	2301      	movs	r3, #1
 80041ea:	e000      	b.n	80041ee <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80041fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004200:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800420c:	d101      	bne.n	8004212 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <LL_RCC_IsActiveFlag_PPRE1>:
{
 800421e:	b480      	push	{r7}
 8004220:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004230:	d101      	bne.n	8004236 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8004242:	b480      	push	{r7}
 8004244:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004250:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004254:	d101      	bne.n	800425a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
	...

08004268 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004268:	b590      	push	{r4, r7, lr}
 800426a:	b08d      	sub	sp, #52	; 0x34
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e37f      	b.n	800497a <HAL_RCC_OscConfig+0x712>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 8092 	beq.w	80043ac <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004288:	f7ff fe89 	bl	8003f9e <LL_RCC_GetSysClkSource>
 800428c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800428e:	f7ff ff82 	bl	8004196 <LL_RCC_PLL_GetMainSource>
 8004292:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004296:	2b00      	cmp	r3, #0
 8004298:	d005      	beq.n	80042a6 <HAL_RCC_OscConfig+0x3e>
 800429a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429c:	2b0c      	cmp	r3, #12
 800429e:	d14c      	bne.n	800433a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80042a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d149      	bne.n	800433a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042a6:	f7ff fe17 	bl	8003ed8 <LL_RCC_MSI_IsReady>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <HAL_RCC_OscConfig+0x54>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e35e      	b.n	800497a <HAL_RCC_OscConfig+0x712>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80042c0:	f7ff fe2f 	bl	8003f22 <LL_RCC_MSI_GetRange>
 80042c4:	4603      	mov	r3, r0
 80042c6:	429c      	cmp	r4, r3
 80042c8:	d914      	bls.n	80042f4 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fd44 	bl	8004d5c <RCC_SetFlashLatencyFromMSIRange>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e34d      	b.n	800497a <HAL_RCC_OscConfig+0x712>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff fe09 	bl	8003efa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff fe2d 	bl	8003f4c <LL_RCC_MSI_SetCalibTrimming>
 80042f2:	e013      	b.n	800431c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff fdfe 	bl	8003efa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff fe22 	bl	8003f4c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	4618      	mov	r0, r3
 800430e:	f000 fd25 	bl	8004d5c <RCC_SetFlashLatencyFromMSIRange>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e32e      	b.n	800497a <HAL_RCC_OscConfig+0x712>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800431c:	f000 fcde 	bl	8004cdc <HAL_RCC_GetHCLKFreq>
 8004320:	4603      	mov	r3, r0
 8004322:	4aa5      	ldr	r2, [pc, #660]	; (80045b8 <HAL_RCC_OscConfig+0x350>)
 8004324:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004326:	4ba5      	ldr	r3, [pc, #660]	; (80045bc <HAL_RCC_OscConfig+0x354>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f7fe fb46 	bl	80029bc <HAL_InitTick>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d039      	beq.n	80043aa <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e31f      	b.n	800497a <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d01e      	beq.n	8004380 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004342:	f7ff fdab 	bl	8003e9c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004346:	f7fe fb87 	bl	8002a58 <HAL_GetTick>
 800434a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800434e:	f7fe fb83 	bl	8002a58 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e30c      	b.n	800497a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004360:	f7ff fdba 	bl	8003ed8 <LL_RCC_MSI_IsReady>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0f1      	beq.n	800434e <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff fdc3 	bl	8003efa <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff fde7 	bl	8003f4c <LL_RCC_MSI_SetCalibTrimming>
 800437e:	e015      	b.n	80043ac <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004380:	f7ff fd9b 	bl	8003eba <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004384:	f7fe fb68 	bl	8002a58 <HAL_GetTick>
 8004388:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800438c:	f7fe fb64 	bl	8002a58 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e2ed      	b.n	800497a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() != 0U)
 800439e:	f7ff fd9b 	bl	8003ed8 <LL_RCC_MSI_IsReady>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1f1      	bne.n	800438c <HAL_RCC_OscConfig+0x124>
 80043a8:	e000      	b.n	80043ac <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043aa:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d04e      	beq.n	8004456 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043b8:	f7ff fdf1 	bl	8003f9e <LL_RCC_GetSysClkSource>
 80043bc:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043be:	f7ff feea 	bl	8004196 <LL_RCC_PLL_GetMainSource>
 80043c2:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d005      	beq.n	80043d6 <HAL_RCC_OscConfig+0x16e>
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	2b0c      	cmp	r3, #12
 80043ce:	d10d      	bne.n	80043ec <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	2b03      	cmp	r3, #3
 80043d4:	d10a      	bne.n	80043ec <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d6:	f7ff fc01 	bl	8003bdc <LL_RCC_HSE_IsReady>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d039      	beq.n	8004454 <HAL_RCC_OscConfig+0x1ec>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d135      	bne.n	8004454 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e2c6      	b.n	800497a <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f4:	d102      	bne.n	80043fc <HAL_RCC_OscConfig+0x194>
 80043f6:	f7ff fbd3 	bl	8003ba0 <LL_RCC_HSE_Enable>
 80043fa:	e001      	b.n	8004400 <HAL_RCC_OscConfig+0x198>
 80043fc:	f7ff fbdf 	bl	8003bbe <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d012      	beq.n	800442e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004408:	f7fe fb26 	bl	8002a58 <HAL_GetTick>
 800440c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004410:	f7fe fb22 	bl	8002a58 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b64      	cmp	r3, #100	; 0x64
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e2ab      	b.n	800497a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004422:	f7ff fbdb 	bl	8003bdc <LL_RCC_HSE_IsReady>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f1      	beq.n	8004410 <HAL_RCC_OscConfig+0x1a8>
 800442c:	e013      	b.n	8004456 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442e:	f7fe fb13 	bl	8002a58 <HAL_GetTick>
 8004432:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004434:	e008      	b.n	8004448 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004436:	f7fe fb0f 	bl	8002a58 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b64      	cmp	r3, #100	; 0x64
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e298      	b.n	800497a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004448:	f7ff fbc8 	bl	8003bdc <LL_RCC_HSE_IsReady>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f1      	bne.n	8004436 <HAL_RCC_OscConfig+0x1ce>
 8004452:	e000      	b.n	8004456 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004454:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d051      	beq.n	8004506 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004462:	f7ff fd9c 	bl	8003f9e <LL_RCC_GetSysClkSource>
 8004466:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004468:	f7ff fe95 	bl	8004196 <LL_RCC_PLL_GetMainSource>
 800446c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	2b04      	cmp	r3, #4
 8004472:	d005      	beq.n	8004480 <HAL_RCC_OscConfig+0x218>
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	2b0c      	cmp	r3, #12
 8004478:	d113      	bne.n	80044a2 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2b02      	cmp	r3, #2
 800447e:	d110      	bne.n	80044a2 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004480:	f7ff fbdc 	bl	8003c3c <LL_RCC_HSI_IsReady>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d005      	beq.n	8004496 <HAL_RCC_OscConfig+0x22e>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e271      	b.n	800497a <HAL_RCC_OscConfig+0x712>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff fbe0 	bl	8003c60 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044a0:	e031      	b.n	8004506 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d019      	beq.n	80044de <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044aa:	f7ff fba9 	bl	8003c00 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ae:	f7fe fad3 	bl	8002a58 <HAL_GetTick>
 80044b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044b6:	f7fe facf 	bl	8002a58 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e258      	b.n	800497a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() == 0U)
 80044c8:	f7ff fbb8 	bl	8003c3c <LL_RCC_HSI_IsReady>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0f1      	beq.n	80044b6 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff fbc2 	bl	8003c60 <LL_RCC_HSI_SetCalibTrimming>
 80044dc:	e013      	b.n	8004506 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044de:	f7ff fb9e 	bl	8003c1e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e2:	f7fe fab9 	bl	8002a58 <HAL_GetTick>
 80044e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80044e8:	e008      	b.n	80044fc <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ea:	f7fe fab5 	bl	8002a58 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e23e      	b.n	800497a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() != 0U)
 80044fc:	f7ff fb9e 	bl	8003c3c <LL_RCC_HSI_IsReady>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f1      	bne.n	80044ea <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d106      	bne.n	8004520 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 80a4 	beq.w	8004668 <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d077      	beq.n	8004618 <HAL_RCC_OscConfig+0x3b0>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0310 	and.w	r3, r3, #16
 8004530:	2b00      	cmp	r3, #0
 8004532:	d04b      	beq.n	80045cc <HAL_RCC_OscConfig+0x364>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004534:	f7ff fc55 	bl	8003de2 <LL_RCC_LSI1_IsReady>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d113      	bne.n	8004566 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800453e:	f7ff fc2e 	bl	8003d9e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004542:	f7fe fa89 	bl	8002a58 <HAL_GetTick>
 8004546:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800454a:	f7fe fa85 	bl	8002a58 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e20e      	b.n	800497a <HAL_RCC_OscConfig+0x712>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800455c:	f7ff fc41 	bl	8003de2 <LL_RCC_LSI1_IsReady>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f1      	beq.n	800454a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004566:	f7ff fc4e 	bl	8003e06 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456a:	f7fe fa75 	bl	8002a58 <HAL_GetTick>
 800456e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004572:	f7fe fa71 	bl	8002a58 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b03      	cmp	r3, #3
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e1fa      	b.n	800497a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004584:	f7ff fc61 	bl	8003e4a <LL_RCC_LSI2_IsReady>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f1      	beq.n	8004572 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff fc6b 	bl	8003e6e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004598:	f7ff fc12 	bl	8003dc0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fe fa5c 	bl	8002a58 <HAL_GetTick>
 80045a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80045a2:	e00d      	b.n	80045c0 <HAL_RCC_OscConfig+0x358>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80045a4:	f7fe fa58 	bl	8002a58 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d906      	bls.n	80045c0 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e1e1      	b.n	800497a <HAL_RCC_OscConfig+0x712>
 80045b6:	bf00      	nop
 80045b8:	20000024 	.word	0x20000024
 80045bc:	20000028 	.word	0x20000028
        while (LL_RCC_LSI1_IsReady() != 0U)
 80045c0:	f7ff fc0f 	bl	8003de2 <LL_RCC_LSI1_IsReady>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1ec      	bne.n	80045a4 <HAL_RCC_OscConfig+0x33c>
 80045ca:	e04d      	b.n	8004668 <HAL_RCC_OscConfig+0x400>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80045cc:	f7ff fbe7 	bl	8003d9e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d0:	f7fe fa42 	bl	8002a58 <HAL_GetTick>
 80045d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x382>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80045d8:	f7fe fa3e 	bl	8002a58 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e1c7      	b.n	800497a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80045ea:	f7ff fbfa 	bl	8003de2 <LL_RCC_LSI1_IsReady>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0f1      	beq.n	80045d8 <HAL_RCC_OscConfig+0x370>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80045f4:	f7ff fc18 	bl	8003e28 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x3a4>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80045fa:	f7fe fa2d 	bl	8002a58 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b03      	cmp	r3, #3
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e1b6      	b.n	800497a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800460c:	f7ff fc1d 	bl	8003e4a <LL_RCC_LSI2_IsReady>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1f1      	bne.n	80045fa <HAL_RCC_OscConfig+0x392>
 8004616:	e027      	b.n	8004668 <HAL_RCC_OscConfig+0x400>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004618:	f7ff fc06 	bl	8003e28 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800461c:	f7fe fa1c 	bl	8002a58 <HAL_GetTick>
 8004620:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x3ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004624:	f7fe fa18 	bl	8002a58 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b03      	cmp	r3, #3
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e1a1      	b.n	800497a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004636:	f7ff fc08 	bl	8003e4a <LL_RCC_LSI2_IsReady>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1f1      	bne.n	8004624 <HAL_RCC_OscConfig+0x3bc>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004640:	f7ff fbbe 	bl	8003dc0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004644:	f7fe fa08 	bl	8002a58 <HAL_GetTick>
 8004648:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x3f6>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800464c:	f7fe fa04 	bl	8002a58 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e18d      	b.n	800497a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800465e:	f7ff fbc0 	bl	8003de2 <LL_RCC_LSI1_IsReady>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f1      	bne.n	800464c <HAL_RCC_OscConfig+0x3e4>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	d05b      	beq.n	800472c <HAL_RCC_OscConfig+0x4c4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004674:	4ba7      	ldr	r3, [pc, #668]	; (8004914 <HAL_RCC_OscConfig+0x6ac>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467c:	2b00      	cmp	r3, #0
 800467e:	d114      	bne.n	80046aa <HAL_RCC_OscConfig+0x442>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004680:	f7ff fa5e 	bl	8003b40 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004684:	f7fe f9e8 	bl	8002a58 <HAL_GetTick>
 8004688:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x436>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800468c:	f7fe f9e4 	bl	8002a58 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e16d      	b.n	800497a <HAL_RCC_OscConfig+0x712>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800469e:	4b9d      	ldr	r3, [pc, #628]	; (8004914 <HAL_RCC_OscConfig+0x6ac>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0f0      	beq.n	800468c <HAL_RCC_OscConfig+0x424>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d102      	bne.n	80046b8 <HAL_RCC_OscConfig+0x450>
 80046b2:	f7ff fb1e 	bl	8003cf2 <LL_RCC_LSE_Enable>
 80046b6:	e00c      	b.n	80046d2 <HAL_RCC_OscConfig+0x46a>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	2b05      	cmp	r3, #5
 80046be:	d104      	bne.n	80046ca <HAL_RCC_OscConfig+0x462>
 80046c0:	f7ff fb39 	bl	8003d36 <LL_RCC_LSE_EnableBypass>
 80046c4:	f7ff fb15 	bl	8003cf2 <LL_RCC_LSE_Enable>
 80046c8:	e003      	b.n	80046d2 <HAL_RCC_OscConfig+0x46a>
 80046ca:	f7ff fb23 	bl	8003d14 <LL_RCC_LSE_Disable>
 80046ce:	f7ff fb43 	bl	8003d58 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d014      	beq.n	8004704 <HAL_RCC_OscConfig+0x49c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046da:	f7fe f9bd 	bl	8002a58 <HAL_GetTick>
 80046de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80046e0:	e00a      	b.n	80046f8 <HAL_RCC_OscConfig+0x490>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e2:	f7fe f9b9 	bl	8002a58 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e140      	b.n	800497a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() == 0U)
 80046f8:	f7ff fb3f 	bl	8003d7a <LL_RCC_LSE_IsReady>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0ef      	beq.n	80046e2 <HAL_RCC_OscConfig+0x47a>
 8004702:	e013      	b.n	800472c <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004704:	f7fe f9a8 	bl	8002a58 <HAL_GetTick>
 8004708:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800470a:	e00a      	b.n	8004722 <HAL_RCC_OscConfig+0x4ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800470c:	f7fe f9a4 	bl	8002a58 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	f241 3288 	movw	r2, #5000	; 0x1388
 800471a:	4293      	cmp	r3, r2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e12b      	b.n	800497a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004722:	f7ff fb2a 	bl	8003d7a <LL_RCC_LSE_IsReady>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1ef      	bne.n	800470c <HAL_RCC_OscConfig+0x4a4>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004734:	2b00      	cmp	r3, #0
 8004736:	d02c      	beq.n	8004792 <HAL_RCC_OscConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473c:	2b00      	cmp	r3, #0
 800473e:	d014      	beq.n	800476a <HAL_RCC_OscConfig+0x502>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004740:	f7ff faa3 	bl	8003c8a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004744:	f7fe f988 	bl	8002a58 <HAL_GetTick>
 8004748:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x4f6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800474c:	f7fe f984 	bl	8002a58 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e10d      	b.n	800497a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800475e:	f7ff fab6 	bl	8003cce <LL_RCC_HSI48_IsReady>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0f1      	beq.n	800474c <HAL_RCC_OscConfig+0x4e4>
 8004768:	e013      	b.n	8004792 <HAL_RCC_OscConfig+0x52a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800476a:	f7ff fa9f 	bl	8003cac <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800476e:	f7fe f973 	bl	8002a58 <HAL_GetTick>
 8004772:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x520>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004776:	f7fe f96f 	bl	8002a58 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e0f8      	b.n	800497a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004788:	f7ff faa1 	bl	8003cce <LL_RCC_HSI48_IsReady>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1f1      	bne.n	8004776 <HAL_RCC_OscConfig+0x50e>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 80ee 	beq.w	8004978 <HAL_RCC_OscConfig+0x710>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800479c:	f7ff fbff 	bl	8003f9e <LL_RCC_GetSysClkSource>
 80047a0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80047a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	f040 80b4 	bne.w	800491c <HAL_RCC_OscConfig+0x6b4>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f003 0203 	and.w	r2, r3, #3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	429a      	cmp	r2, r3
 80047c0:	d123      	bne.n	800480a <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d11c      	bne.n	800480a <HAL_RCC_OscConfig+0x5a2>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	0a1b      	lsrs	r3, r3, #8
 80047d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047dc:	429a      	cmp	r2, r3
 80047de:	d114      	bne.n	800480a <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d10d      	bne.n	800480a <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d106      	bne.n	800480a <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004806:	429a      	cmp	r2, r3
 8004808:	d05d      	beq.n	80048c6 <HAL_RCC_OscConfig+0x65e>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2b0c      	cmp	r3, #12
 800480e:	d058      	beq.n	80048c2 <HAL_RCC_OscConfig+0x65a>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <HAL_RCC_OscConfig+0x5ba>

          {
            return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e0ab      	b.n	800497a <HAL_RCC_OscConfig+0x712>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004822:	f7ff fc72 	bl	800410a <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004826:	f7fe f917 	bl	8002a58 <HAL_GetTick>
 800482a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800482c:	e008      	b.n	8004840 <HAL_RCC_OscConfig+0x5d8>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800482e:	f7fe f913 	bl	8002a58 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x5d8>
              {
                return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e09c      	b.n	800497a <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1ef      	bne.n	800482e <HAL_RCC_OscConfig+0x5c6>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800484e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004852:	68da      	ldr	r2, [r3, #12]
 8004854:	4b30      	ldr	r3, [pc, #192]	; (8004918 <HAL_RCC_OscConfig+0x6b0>)
 8004856:	4013      	ands	r3, r2
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004860:	4311      	orrs	r1, r2
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004866:	0212      	lsls	r2, r2, #8
 8004868:	4311      	orrs	r1, r2
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800486e:	4311      	orrs	r1, r2
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004874:	4311      	orrs	r1, r2
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800487a:	430a      	orrs	r2, r1
 800487c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004880:	4313      	orrs	r3, r2
 8004882:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004884:	f7ff fc32 	bl	80040ec <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004896:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004898:	f7fe f8de 	bl	8002a58 <HAL_GetTick>
 800489c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x64a>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a0:	f7fe f8da 	bl	8002a58 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x64a>
              {
                return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e063      	b.n	800497a <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0ef      	beq.n	80048a0 <HAL_RCC_OscConfig+0x638>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048c0:	e05a      	b.n	8004978 <HAL_RCC_OscConfig+0x710>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e059      	b.n	800497a <HAL_RCC_OscConfig+0x712>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d151      	bne.n	8004978 <HAL_RCC_OscConfig+0x710>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80048d4:	f7ff fc0a 	bl	80040ec <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048e8:	f7fe f8b6 	bl	8002a58 <HAL_GetTick>
 80048ec:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x69a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f0:	f7fe f8b2 	bl	8002a58 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x69a>
            {
              return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e03b      	b.n	800497a <HAL_RCC_OscConfig+0x712>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0ef      	beq.n	80048f0 <HAL_RCC_OscConfig+0x688>
 8004910:	e032      	b.n	8004978 <HAL_RCC_OscConfig+0x710>
 8004912:	bf00      	nop
 8004914:	58000400 	.word	0x58000400
 8004918:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	2b0c      	cmp	r3, #12
 8004920:	d028      	beq.n	8004974 <HAL_RCC_OscConfig+0x70c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004922:	f7ff fbf2 	bl	800410a <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004930:	f023 0303 	bic.w	r3, r3, #3
 8004934:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8004936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004940:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004948:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494a:	f7fe f885 	bl	8002a58 <HAL_GetTick>
 800494e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x6fc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004952:	f7fe f881 	bl	8002a58 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x6fc>
          {
            return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e00a      	b.n	800497a <HAL_RCC_OscConfig+0x712>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1ef      	bne.n	8004952 <HAL_RCC_OscConfig+0x6ea>
 8004972:	e001      	b.n	8004978 <HAL_RCC_OscConfig+0x710>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e000      	b.n	800497a <HAL_RCC_OscConfig+0x712>
      }
    }
  }
  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3734      	adds	r7, #52	; 0x34
 800497e:	46bd      	mov	sp, r7
 8004980:	bd90      	pop	{r4, r7, pc}
 8004982:	bf00      	nop

08004984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e12d      	b.n	8004bf4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004998:	4b98      	ldr	r3, [pc, #608]	; (8004bfc <HAL_RCC_ClockConfig+0x278>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0307 	and.w	r3, r3, #7
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d91b      	bls.n	80049de <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a6:	4b95      	ldr	r3, [pc, #596]	; (8004bfc <HAL_RCC_ClockConfig+0x278>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f023 0207 	bic.w	r2, r3, #7
 80049ae:	4993      	ldr	r1, [pc, #588]	; (8004bfc <HAL_RCC_ClockConfig+0x278>)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049b6:	f7fe f84f 	bl	8002a58 <HAL_GetTick>
 80049ba:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049bc:	e008      	b.n	80049d0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80049be:	f7fe f84b 	bl	8002a58 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e111      	b.n	8004bf4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049d0:	4b8a      	ldr	r3, [pc, #552]	; (8004bfc <HAL_RCC_ClockConfig+0x278>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d1ef      	bne.n	80049be <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d016      	beq.n	8004a18 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff fae1 	bl	8003fb6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80049f4:	f7fe f830 	bl	8002a58 <HAL_GetTick>
 80049f8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80049fc:	f7fe f82c 	bl	8002a58 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e0f2      	b.n	8004bf4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004a0e:	f7ff fbce 	bl	80041ae <LL_RCC_IsActiveFlag_HPRE>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0f1      	beq.n	80049fc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0320 	and.w	r3, r3, #32
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d016      	beq.n	8004a52 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7ff fad8 	bl	8003fde <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a2e:	f7fe f813 	bl	8002a58 <HAL_GetTick>
 8004a32:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004a34:	e008      	b.n	8004a48 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a36:	f7fe f80f 	bl	8002a58 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e0d5      	b.n	8004bf4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004a48:	f7ff fbc3 	bl	80041d2 <LL_RCC_IsActiveFlag_C2HPRE>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0f1      	beq.n	8004a36 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d016      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff fad1 	bl	800400a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a68:	f7fd fff6 	bl	8002a58 <HAL_GetTick>
 8004a6c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a70:	f7fd fff2 	bl	8002a58 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e0b8      	b.n	8004bf4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004a82:	f7ff fbb9 	bl	80041f8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0f1      	beq.n	8004a70 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d016      	beq.n	8004ac6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff facb 	bl	8004038 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004aa2:	f7fd ffd9 	bl	8002a58 <HAL_GetTick>
 8004aa6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004aa8:	e008      	b.n	8004abc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004aaa:	f7fd ffd5 	bl	8002a58 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e09b      	b.n	8004bf4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004abc:	f7ff fbaf 	bl	800421e <LL_RCC_IsActiveFlag_PPRE1>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0f1      	beq.n	8004aaa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0308 	and.w	r3, r3, #8
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d017      	beq.n	8004b02 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7ff fac1 	bl	8004060 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ade:	f7fd ffbb 	bl	8002a58 <HAL_GetTick>
 8004ae2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004ae4:	e008      	b.n	8004af8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ae6:	f7fd ffb7 	bl	8002a58 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e07d      	b.n	8004bf4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004af8:	f7ff fba3 	bl	8004242 <LL_RCC_IsActiveFlag_PPRE2>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0f1      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d043      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d106      	bne.n	8004b24 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004b16:	f7ff f861 	bl	8003bdc <LL_RCC_HSE_IsReady>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d11e      	bne.n	8004b5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e067      	b.n	8004bf4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b03      	cmp	r3, #3
 8004b2a:	d106      	bne.n	8004b3a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004b2c:	f7ff fafc 	bl	8004128 <LL_RCC_PLL_IsReady>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d113      	bne.n	8004b5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e05c      	b.n	8004bf4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d106      	bne.n	8004b50 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004b42:	f7ff f9c9 	bl	8003ed8 <LL_RCC_MSI_IsReady>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d108      	bne.n	8004b5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e051      	b.n	8004bf4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004b50:	f7ff f874 	bl	8003c3c <LL_RCC_HSI_IsReady>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e04a      	b.n	8004bf4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff fa07 	bl	8003f76 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b68:	f7fd ff76 	bl	8002a58 <HAL_GetTick>
 8004b6c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6e:	e00a      	b.n	8004b86 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b70:	f7fd ff72 	bl	8002a58 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e036      	b.n	8004bf4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b86:	f7ff fa0a 	bl	8003f9e <LL_RCC_GetSysClkSource>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d1ec      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b96:	4b19      	ldr	r3, [pc, #100]	; (8004bfc <HAL_RCC_ClockConfig+0x278>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d21b      	bcs.n	8004bdc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba4:	4b15      	ldr	r3, [pc, #84]	; (8004bfc <HAL_RCC_ClockConfig+0x278>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f023 0207 	bic.w	r2, r3, #7
 8004bac:	4913      	ldr	r1, [pc, #76]	; (8004bfc <HAL_RCC_ClockConfig+0x278>)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb4:	f7fd ff50 	bl	8002a58 <HAL_GetTick>
 8004bb8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004bbc:	f7fd ff4c 	bl	8002a58 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e012      	b.n	8004bf4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bce:	4b0b      	ldr	r3, [pc, #44]	; (8004bfc <HAL_RCC_ClockConfig+0x278>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d1ef      	bne.n	8004bbc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004bdc:	f000 f87e 	bl	8004cdc <HAL_RCC_GetHCLKFreq>
 8004be0:	4603      	mov	r3, r0
 8004be2:	4a07      	ldr	r2, [pc, #28]	; (8004c00 <HAL_RCC_ClockConfig+0x27c>)
 8004be4:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004be6:	f7fd ff43 	bl	8002a70 <HAL_GetTickPrio>
 8004bea:	4603      	mov	r3, r0
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fd fee5 	bl	80029bc <HAL_InitTick>
 8004bf2:	4603      	mov	r3, r0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	58004000 	.word	0x58004000
 8004c00:	20000024 	.word	0x20000024

08004c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c04:	b590      	push	{r4, r7, lr}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c0a:	f7ff f9c8 	bl	8003f9e <LL_RCC_GetSysClkSource>
 8004c0e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10a      	bne.n	8004c2c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004c16:	f7ff f984 	bl	8003f22 <LL_RCC_MSI_GetRange>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	091b      	lsrs	r3, r3, #4
 8004c1e:	f003 030f 	and.w	r3, r3, #15
 8004c22:	4a2b      	ldr	r2, [pc, #172]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	e04b      	b.n	8004cc4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d102      	bne.n	8004c38 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c32:	4b28      	ldr	r3, [pc, #160]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c34:	60fb      	str	r3, [r7, #12]
 8004c36:	e045      	b.n	8004cc4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	d10a      	bne.n	8004c54 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004c3e:	f7fe ff9d 	bl	8003b7c <LL_RCC_HSE_IsEnabledDiv2>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d102      	bne.n	8004c4e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004c48:	4b22      	ldr	r3, [pc, #136]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	e03a      	b.n	8004cc4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004c4e:	4b22      	ldr	r3, [pc, #136]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	e037      	b.n	8004cc4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004c54:	f7ff fa9f 	bl	8004196 <LL_RCC_PLL_GetMainSource>
 8004c58:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d003      	beq.n	8004c68 <HAL_RCC_GetSysClockFreq+0x64>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	2b03      	cmp	r3, #3
 8004c64:	d003      	beq.n	8004c6e <HAL_RCC_GetSysClockFreq+0x6a>
 8004c66:	e00d      	b.n	8004c84 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004c68:	4b1a      	ldr	r3, [pc, #104]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c6a:	60bb      	str	r3, [r7, #8]
        break;
 8004c6c:	e015      	b.n	8004c9a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004c6e:	f7fe ff85 	bl	8003b7c <LL_RCC_HSE_IsEnabledDiv2>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d102      	bne.n	8004c7e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004c78:	4b16      	ldr	r3, [pc, #88]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c7a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004c7c:	e00d      	b.n	8004c9a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004c7e:	4b16      	ldr	r3, [pc, #88]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004c80:	60bb      	str	r3, [r7, #8]
        break;
 8004c82:	e00a      	b.n	8004c9a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004c84:	f7ff f94d 	bl	8003f22 <LL_RCC_MSI_GetRange>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	091b      	lsrs	r3, r3, #4
 8004c8c:	f003 030f 	and.w	r3, r3, #15
 8004c90:	4a0f      	ldr	r2, [pc, #60]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c96:	60bb      	str	r3, [r7, #8]
        break;
 8004c98:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8004c9a:	f7ff fa57 	bl	800414c <LL_RCC_PLL_GetN>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	fb03 f402 	mul.w	r4, r3, r2
 8004ca6:	f7ff fa6a 	bl	800417e <LL_RCC_PLL_GetDivider>
 8004caa:	4603      	mov	r3, r0
 8004cac:	091b      	lsrs	r3, r3, #4
 8004cae:	3301      	adds	r3, #1
 8004cb0:	fbb4 f4f3 	udiv	r4, r4, r3
 8004cb4:	f7ff fa57 	bl	8004166 <LL_RCC_PLL_GetR>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	0f5b      	lsrs	r3, r3, #29
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	fbb4 f3f3 	udiv	r3, r4, r3
 8004cc2:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd90      	pop	{r4, r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	0800d5f4 	.word	0x0800d5f4
 8004cd4:	00f42400 	.word	0x00f42400
 8004cd8:	01e84800 	.word	0x01e84800

08004cdc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cdc:	b598      	push	{r3, r4, r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004ce0:	f7ff ff90 	bl	8004c04 <HAL_RCC_GetSysClockFreq>
 8004ce4:	4604      	mov	r4, r0
 8004ce6:	f7ff f9cf 	bl	8004088 <LL_RCC_GetAHBPrescaler>
 8004cea:	4603      	mov	r3, r0
 8004cec:	091b      	lsrs	r3, r3, #4
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	4a03      	ldr	r2, [pc, #12]	; (8004d00 <HAL_RCC_GetHCLKFreq+0x24>)
 8004cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cf8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	bd98      	pop	{r3, r4, r7, pc}
 8004d00:	0800d594 	.word	0x0800d594

08004d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d04:	b598      	push	{r3, r4, r7, lr}
 8004d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004d08:	f7ff ffe8 	bl	8004cdc <HAL_RCC_GetHCLKFreq>
 8004d0c:	4604      	mov	r4, r0
 8004d0e:	f7ff f9d5 	bl	80040bc <LL_RCC_GetAPB1Prescaler>
 8004d12:	4603      	mov	r3, r0
 8004d14:	0a1b      	lsrs	r3, r3, #8
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	4a04      	ldr	r2, [pc, #16]	; (8004d2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d20:	f003 031f 	and.w	r3, r3, #31
 8004d24:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	bd98      	pop	{r3, r4, r7, pc}
 8004d2c:	0800d5d4 	.word	0x0800d5d4

08004d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d30:	b598      	push	{r3, r4, r7, lr}
 8004d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004d34:	f7ff ffd2 	bl	8004cdc <HAL_RCC_GetHCLKFreq>
 8004d38:	4604      	mov	r4, r0
 8004d3a:	f7ff f9cb 	bl	80040d4 <LL_RCC_GetAPB2Prescaler>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	0adb      	lsrs	r3, r3, #11
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	4a04      	ldr	r2, [pc, #16]	; (8004d58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d4c:	f003 031f 	and.w	r3, r3, #31
 8004d50:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	bd98      	pop	{r3, r4, r7, pc}
 8004d58:	0800d5d4 	.word	0x0800d5d4

08004d5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004d5c:	b590      	push	{r4, r7, lr}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2bb0      	cmp	r3, #176	; 0xb0
 8004d68:	d903      	bls.n	8004d72 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004d6a:	4b15      	ldr	r3, [pc, #84]	; (8004dc0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	e007      	b.n	8004d82 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	091b      	lsrs	r3, r3, #4
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	4a11      	ldr	r2, [pc, #68]	; (8004dc0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d80:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004d82:	f7ff f98d 	bl	80040a0 <LL_RCC_GetAHB4Prescaler>
 8004d86:	4603      	mov	r3, r0
 8004d88:	091b      	lsrs	r3, r3, #4
 8004d8a:	f003 030f 	and.w	r3, r3, #15
 8004d8e:	4a0d      	ldr	r2, [pc, #52]	; (8004dc4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4a0a      	ldr	r2, [pc, #40]	; (8004dc8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004da0:	fba2 2303 	umull	r2, r3, r2, r3
 8004da4:	0c9c      	lsrs	r4, r3, #18
 8004da6:	f7fe fedb 	bl	8003b60 <HAL_PWREx_GetVoltageRange>
 8004daa:	4603      	mov	r3, r0
 8004dac:	4619      	mov	r1, r3
 8004dae:	4620      	mov	r0, r4
 8004db0:	f000 f80c 	bl	8004dcc <RCC_SetFlashLatency>
 8004db4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd90      	pop	{r4, r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	0800d5f4 	.word	0x0800d5f4
 8004dc4:	0800d594 	.word	0x0800d594
 8004dc8:	431bde83 	.word	0x431bde83

08004dcc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004dcc:	b590      	push	{r4, r7, lr}
 8004dce:	b093      	sub	sp, #76	; 0x4c
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004dd6:	4b37      	ldr	r3, [pc, #220]	; (8004eb4 <RCC_SetFlashLatency+0xe8>)
 8004dd8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004ddc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004dde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004de2:	4a35      	ldr	r2, [pc, #212]	; (8004eb8 <RCC_SetFlashLatency+0xec>)
 8004de4:	f107 031c 	add.w	r3, r7, #28
 8004de8:	ca07      	ldmia	r2, {r0, r1, r2}
 8004dea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004dee:	4b33      	ldr	r3, [pc, #204]	; (8004ebc <RCC_SetFlashLatency+0xf0>)
 8004df0:	f107 040c 	add.w	r4, r7, #12
 8004df4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004df6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e04:	d11a      	bne.n	8004e3c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004e06:	2300      	movs	r3, #0
 8004e08:	643b      	str	r3, [r7, #64]	; 0x40
 8004e0a:	e013      	b.n	8004e34 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	3348      	adds	r3, #72	; 0x48
 8004e12:	443b      	add	r3, r7
 8004e14:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d807      	bhi.n	8004e2e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	3348      	adds	r3, #72	; 0x48
 8004e24:	443b      	add	r3, r7
 8004e26:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004e2a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004e2c:	e020      	b.n	8004e70 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e30:	3301      	adds	r3, #1
 8004e32:	643b      	str	r3, [r7, #64]	; 0x40
 8004e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d9e8      	bls.n	8004e0c <RCC_SetFlashLatency+0x40>
 8004e3a:	e019      	b.n	8004e70 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e40:	e013      	b.n	8004e6a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	3348      	adds	r3, #72	; 0x48
 8004e48:	443b      	add	r3, r7
 8004e4a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d807      	bhi.n	8004e64 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	3348      	adds	r3, #72	; 0x48
 8004e5a:	443b      	add	r3, r7
 8004e5c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004e60:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004e62:	e005      	b.n	8004e70 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e66:	3301      	adds	r3, #1
 8004e68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d9e8      	bls.n	8004e42 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8004e70:	4b13      	ldr	r3, [pc, #76]	; (8004ec0 <RCC_SetFlashLatency+0xf4>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f023 0207 	bic.w	r2, r3, #7
 8004e78:	4911      	ldr	r1, [pc, #68]	; (8004ec0 <RCC_SetFlashLatency+0xf4>)
 8004e7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004e80:	f7fd fdea 	bl	8002a58 <HAL_GetTick>
 8004e84:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004e86:	e008      	b.n	8004e9a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e88:	f7fd fde6 	bl	8002a58 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e007      	b.n	8004eaa <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004e9a:	4b09      	ldr	r3, [pc, #36]	; (8004ec0 <RCC_SetFlashLatency+0xf4>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0307 	and.w	r3, r3, #7
 8004ea2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d1ef      	bne.n	8004e88 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	374c      	adds	r7, #76	; 0x4c
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd90      	pop	{r4, r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	0800a490 	.word	0x0800a490
 8004eb8:	0800a4a0 	.word	0x0800a4a0
 8004ebc:	0800a4ac 	.word	0x0800a4ac
 8004ec0:	58004000 	.word	0x58004000

08004ec4 <LL_RCC_LSE_IsEnabled>:
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d101      	bne.n	8004edc <LL_RCC_LSE_IsEnabled+0x18>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e000      	b.n	8004ede <LL_RCC_LSE_IsEnabled+0x1a>
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <LL_RCC_LSE_IsReady>:
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d101      	bne.n	8004f00 <LL_RCC_LSE_IsReady+0x18>
 8004efc:	2301      	movs	r3, #1
 8004efe:	e000      	b.n	8004f02 <LL_RCC_LSE_IsReady+0x1a>
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <LL_RCC_SetRFWKPClockSource>:
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <LL_RCC_SetSMPSClockSource>:
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	f023 0203 	bic.w	r2, r3, #3
 8004f4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <LL_RCC_SetSMPSPrescaler>:
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <LL_RCC_SetUSARTClockSource>:
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f98:	f023 0203 	bic.w	r2, r3, #3
 8004f9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <LL_RCC_SetLPUARTClockSource>:
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004fc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <LL_RCC_SetI2CClockSource>:
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	091b      	lsrs	r3, r3, #4
 8004ff4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	401a      	ands	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005004:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005008:	4313      	orrs	r3, r2
 800500a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <LL_RCC_SetLPTIMClockSource>:
{
 800501a:	b480      	push	{r7}
 800501c:	b083      	sub	sp, #12
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005026:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	0c1b      	lsrs	r3, r3, #16
 800502e:	041b      	lsls	r3, r3, #16
 8005030:	43db      	mvns	r3, r3
 8005032:	401a      	ands	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	041b      	lsls	r3, r3, #16
 8005038:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800503c:	4313      	orrs	r3, r2
 800503e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <LL_RCC_SetSAIClockSource>:
{
 800504e:	b480      	push	{r7}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800505a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005062:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4313      	orrs	r3, r2
 800506a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <LL_RCC_SetRNGClockSource>:
{
 800507a:	b480      	push	{r7}
 800507c:	b083      	sub	sp, #12
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800508e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4313      	orrs	r3, r2
 8005096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <LL_RCC_SetCLK48ClockSource>:
{
 80050a6:	b480      	push	{r7}
 80050a8:	b083      	sub	sp, #12
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80050ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <LL_RCC_SetUSBClockSource>:
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b082      	sub	sp, #8
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7ff ffe3 	bl	80050a6 <LL_RCC_SetCLK48ClockSource>
}
 80050e0:	bf00      	nop
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <LL_RCC_SetADCClockSource>:
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80050f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4313      	orrs	r3, r2
 8005104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <LL_RCC_SetRTCClockSource>:
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800511c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005124:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005128:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4313      	orrs	r3, r2
 8005130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <LL_RCC_GetRTCClockSource>:
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005150:	4618      	mov	r0, r3
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <LL_RCC_ForceBackupDomainReset>:
{
 800515a:	b480      	push	{r7}
 800515c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800515e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005166:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800516a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800516e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005172:	bf00      	nop
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <LL_RCC_ReleaseBackupDomainReset>:
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005188:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800518c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005194:	bf00      	nop
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <LL_RCC_PLLSAI1_Enable>:
{
 800519e:	b480      	push	{r7}
 80051a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80051a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051b0:	6013      	str	r3, [r2, #0]
}
 80051b2:	bf00      	nop
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <LL_RCC_PLLSAI1_Disable>:
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80051c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051ce:	6013      	str	r3, [r2, #0]
}
 80051d0:	bf00      	nop
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <LL_RCC_PLLSAI1_IsReady>:
{
 80051da:	b480      	push	{r7}
 80051dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80051de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051ec:	d101      	bne.n	80051f2 <LL_RCC_PLLSAI1_IsReady+0x18>
 80051ee:	2301      	movs	r3, #1
 80051f0:	e000      	b.n	80051f4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b088      	sub	sp, #32
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005206:	2300      	movs	r3, #0
 8005208:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800520a:	2300      	movs	r3, #0
 800520c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005216:	2b00      	cmp	r3, #0
 8005218:	d034      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005222:	d021      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005224:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005228:	d81b      	bhi.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800522a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800522e:	d01d      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005230:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005234:	d815      	bhi.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00b      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800523a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800523e:	d110      	bne.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800524a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800524e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005250:	e00d      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	3304      	adds	r3, #4
 8005256:	4618      	mov	r0, r3
 8005258:	f000 f947 	bl	80054ea <RCCEx_PLLSAI1_ConfigNP>
 800525c:	4603      	mov	r3, r0
 800525e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005260:	e005      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	77fb      	strb	r3, [r7, #31]
        break;
 8005266:	e002      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005268:	bf00      	nop
 800526a:	e000      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800526c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800526e:	7ffb      	ldrb	r3, [r7, #31]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d105      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005278:	4618      	mov	r0, r3
 800527a:	f7ff fee8 	bl	800504e <LL_RCC_SetSAIClockSource>
 800527e:	e001      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005280:	7ffb      	ldrb	r3, [r7, #31]
 8005282:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800528c:	2b00      	cmp	r3, #0
 800528e:	d046      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005290:	f7ff ff56 	bl	8005140 <LL_RCC_GetRTCClockSource>
 8005294:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	429a      	cmp	r2, r3
 800529e:	d03c      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80052a0:	f7fe fc4e 	bl	8003b40 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d105      	bne.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7ff ff30 	bl	8005114 <LL_RCC_SetRTCClockSource>
 80052b4:	e02e      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80052b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052be:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80052c0:	f7ff ff4b 	bl	800515a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80052c4:	f7ff ff5a 	bl	800517c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	4313      	orrs	r3, r2
 80052d4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80052d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80052e0:	f7ff fdf0 	bl	8004ec4 <LL_RCC_LSE_IsEnabled>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d114      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052ea:	f7fd fbb5 	bl	8002a58 <HAL_GetTick>
 80052ee:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80052f0:	e00b      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052f2:	f7fd fbb1 	bl	8002a58 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005300:	4293      	cmp	r3, r2
 8005302:	d902      	bls.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	77fb      	strb	r3, [r7, #31]
              break;
 8005308:	e004      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800530a:	f7ff fded 	bl	8004ee8 <LL_RCC_LSE_IsReady>
 800530e:	4603      	mov	r3, r0
 8005310:	2b01      	cmp	r3, #1
 8005312:	d1ee      	bne.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005314:	7ffb      	ldrb	r3, [r7, #31]
 8005316:	77bb      	strb	r3, [r7, #30]
 8005318:	e001      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800531a:	7ffb      	ldrb	r3, [r7, #31]
 800531c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d004      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	4618      	mov	r0, r3
 8005330:	f7ff fe2a 	bl	8004f88 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d004      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	4618      	mov	r0, r3
 8005346:	f7ff fe35 	bl	8004fb4 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0310 	and.w	r3, r3, #16
 8005352:	2b00      	cmp	r3, #0
 8005354:	d004      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535a:	4618      	mov	r0, r3
 800535c:	f7ff fe5d 	bl	800501a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0320 	and.w	r3, r3, #32
 8005368:	2b00      	cmp	r3, #0
 800536a:	d004      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005370:	4618      	mov	r0, r3
 8005372:	f7ff fe52 	bl	800501a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0304 	and.w	r3, r3, #4
 800537e:	2b00      	cmp	r3, #0
 8005380:	d004      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	4618      	mov	r0, r3
 8005388:	f7ff fe2a 	bl	8004fe0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0308 	and.w	r3, r3, #8
 8005394:	2b00      	cmp	r3, #0
 8005396:	d004      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	4618      	mov	r0, r3
 800539e:	f7ff fe1f 	bl	8004fe0 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d022      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff fe8d 	bl	80050d2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053c0:	d107      	bne.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80053c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053d0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053da:	d10b      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3304      	adds	r3, #4
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 f8dd 	bl	80055a0 <RCCEx_PLLSAI1_ConfigNQ>
 80053e6:	4603      	mov	r3, r0
 80053e8:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80053ea:	7ffb      	ldrb	r3, [r7, #31]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 80053f0:	7ffb      	ldrb	r3, [r7, #31]
 80053f2:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d02b      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005408:	d008      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005412:	d003      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005418:	2b00      	cmp	r3, #0
 800541a:	d105      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005420:	4618      	mov	r0, r3
 8005422:	f7ff fe2a 	bl	800507a <LL_RCC_SetRNGClockSource>
 8005426:	e00a      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	2000      	movs	r0, #0
 8005434:	f7ff fe21 	bl	800507a <LL_RCC_SetRNGClockSource>
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f7ff fe34 	bl	80050a6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005442:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005446:	d107      	bne.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005456:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005460:	2b00      	cmp	r3, #0
 8005462:	d022      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff fe3d 	bl	80050e8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005472:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005476:	d107      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005486:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005490:	d10b      	bne.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	3304      	adds	r3, #4
 8005496:	4618      	mov	r0, r3
 8005498:	f000 f8dd 	bl	8005656 <RCCEx_PLLSAI1_ConfigNR>
 800549c:	4603      	mov	r3, r0
 800549e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80054a0:	7ffb      	ldrb	r3, [r7, #31]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 80054a6:	7ffb      	ldrb	r3, [r7, #31]
 80054a8:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d004      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7ff fd26 	bl	8004f0c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d009      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7ff fd45 	bl	8004f60 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054da:	4618      	mov	r0, r3
 80054dc:	f7ff fd2c 	bl	8004f38 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80054e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3720      	adds	r7, #32
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b084      	sub	sp, #16
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054f2:	2300      	movs	r3, #0
 80054f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80054f6:	f7ff fe61 	bl	80051bc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80054fa:	f7fd faad 	bl	8002a58 <HAL_GetTick>
 80054fe:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005500:	e009      	b.n	8005516 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005502:	f7fd faa9 	bl	8002a58 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d902      	bls.n	8005516 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	73fb      	strb	r3, [r7, #15]
      break;
 8005514:	e004      	b.n	8005520 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005516:	f7ff fe60 	bl	80051da <LL_RCC_PLLSAI1_IsReady>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1f0      	bne.n	8005502 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005520:	7bfb      	ldrb	r3, [r7, #15]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d137      	bne.n	8005596 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	021b      	lsls	r3, r3, #8
 8005536:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800553a:	4313      	orrs	r3, r2
 800553c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800553e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005550:	4313      	orrs	r3, r2
 8005552:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005554:	f7ff fe23 	bl	800519e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005558:	f7fd fa7e 	bl	8002a58 <HAL_GetTick>
 800555c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800555e:	e009      	b.n	8005574 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005560:	f7fd fa7a 	bl	8002a58 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b02      	cmp	r3, #2
 800556c:	d902      	bls.n	8005574 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	73fb      	strb	r3, [r7, #15]
        break;
 8005572:	e004      	b.n	800557e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005574:	f7ff fe31 	bl	80051da <LL_RCC_PLLSAI1_IsReady>
 8005578:	4603      	mov	r3, r0
 800557a:	2b01      	cmp	r3, #1
 800557c:	d1f0      	bne.n	8005560 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800557e:	7bfb      	ldrb	r3, [r7, #15]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d108      	bne.n	8005596 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005588:	691a      	ldr	r2, [r3, #16]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005592:	4313      	orrs	r3, r2
 8005594:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005596:	7bfb      	ldrb	r3, [r7, #15]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055a8:	2300      	movs	r3, #0
 80055aa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80055ac:	f7ff fe06 	bl	80051bc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80055b0:	f7fd fa52 	bl	8002a58 <HAL_GetTick>
 80055b4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80055b6:	e009      	b.n	80055cc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055b8:	f7fd fa4e 	bl	8002a58 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d902      	bls.n	80055cc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	73fb      	strb	r3, [r7, #15]
      break;
 80055ca:	e004      	b.n	80055d6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80055cc:	f7ff fe05 	bl	80051da <LL_RCC_PLLSAI1_IsReady>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1f0      	bne.n	80055b8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80055d6:	7bfb      	ldrb	r3, [r7, #15]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d137      	bne.n	800564c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80055dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	021b      	lsls	r3, r3, #8
 80055ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055f0:	4313      	orrs	r3, r2
 80055f2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80055f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005606:	4313      	orrs	r3, r2
 8005608:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800560a:	f7ff fdc8 	bl	800519e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800560e:	f7fd fa23 	bl	8002a58 <HAL_GetTick>
 8005612:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005614:	e009      	b.n	800562a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005616:	f7fd fa1f 	bl	8002a58 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	2b02      	cmp	r3, #2
 8005622:	d902      	bls.n	800562a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	73fb      	strb	r3, [r7, #15]
        break;
 8005628:	e004      	b.n	8005634 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800562a:	f7ff fdd6 	bl	80051da <LL_RCC_PLLSAI1_IsReady>
 800562e:	4603      	mov	r3, r0
 8005630:	2b01      	cmp	r3, #1
 8005632:	d1f0      	bne.n	8005616 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005634:	7bfb      	ldrb	r3, [r7, #15]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d108      	bne.n	800564c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800563a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800563e:	691a      	ldr	r2, [r3, #16]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005648:	4313      	orrs	r3, r2
 800564a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800564c:	7bfb      	ldrb	r3, [r7, #15]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b084      	sub	sp, #16
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800565e:	2300      	movs	r3, #0
 8005660:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005662:	f7ff fdab 	bl	80051bc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005666:	f7fd f9f7 	bl	8002a58 <HAL_GetTick>
 800566a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800566c:	e009      	b.n	8005682 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800566e:	f7fd f9f3 	bl	8002a58 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	2b02      	cmp	r3, #2
 800567a:	d902      	bls.n	8005682 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	73fb      	strb	r3, [r7, #15]
      break;
 8005680:	e004      	b.n	800568c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005682:	f7ff fdaa 	bl	80051da <LL_RCC_PLLSAI1_IsReady>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1f0      	bne.n	800566e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800568c:	7bfb      	ldrb	r3, [r7, #15]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d137      	bne.n	8005702 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056a6:	4313      	orrs	r3, r2
 80056a8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80056aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056bc:	4313      	orrs	r3, r2
 80056be:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80056c0:	f7ff fd6d 	bl	800519e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056c4:	f7fd f9c8 	bl	8002a58 <HAL_GetTick>
 80056c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80056ca:	e009      	b.n	80056e0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056cc:	f7fd f9c4 	bl	8002a58 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d902      	bls.n	80056e0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	73fb      	strb	r3, [r7, #15]
        break;
 80056de:	e004      	b.n	80056ea <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80056e0:	f7ff fd7b 	bl	80051da <LL_RCC_PLLSAI1_IsReady>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d1f0      	bne.n	80056cc <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d108      	bne.n	8005702 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80056f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f4:	691a      	ldr	r2, [r3, #16]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056fe:	4313      	orrs	r3, r2
 8005700:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005702:	7bfb      	ldrb	r3, [r7, #15]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e090      	b.n	8005840 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d106      	bne.n	8005738 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7fc ffa6 	bl	8002684 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	22ca      	movs	r2, #202	; 0xca
 8005746:	625a      	str	r2, [r3, #36]	; 0x24
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2253      	movs	r2, #83	; 0x53
 800574e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f89f 	bl	8005894 <RTC_EnterInitMode>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d009      	beq.n	8005770 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	22ff      	movs	r2, #255	; 0xff
 8005762:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2204      	movs	r2, #4
 8005768:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e067      	b.n	8005840 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	6812      	ldr	r2, [r2, #0]
 800577a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800577e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005782:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6899      	ldr	r1, [r3, #8]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	431a      	orrs	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	431a      	orrs	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	68d2      	ldr	r2, [r2, #12]
 80057aa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6919      	ldr	r1, [r3, #16]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	041a      	lsls	r2, r3, #16
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68da      	ldr	r2, [r3, #12]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057ce:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 0203 	bic.w	r2, r2, #3
 80057de:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	69da      	ldr	r2, [r3, #28]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	431a      	orrs	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	430a      	orrs	r2, r1
 80057f6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f003 0320 	and.w	r3, r3, #32
 8005802:	2b00      	cmp	r3, #0
 8005804:	d113      	bne.n	800582e <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f81e 	bl	8005848 <HAL_RTC_WaitForSynchro>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00d      	beq.n	800582e <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	22ff      	movs	r2, #255	; 0xff
 8005818:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2204      	movs	r2, #4
 800581e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e008      	b.n	8005840 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	22ff      	movs	r2, #255	; 0xff
 8005834:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800583e:	2300      	movs	r3, #0
  }
}
 8005840:	4618      	mov	r0, r3
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800585e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005860:	f7fd f8fa 	bl	8002a58 <HAL_GetTick>
 8005864:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005866:	e009      	b.n	800587c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005868:	f7fd f8f6 	bl	8002a58 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005876:	d901      	bls.n	800587c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e007      	b.n	800588c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f003 0320 	and.w	r3, r3, #32
 8005886:	2b00      	cmp	r3, #0
 8005888:	d0ee      	beq.n	8005868 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d119      	bne.n	80058de <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f04f 32ff 	mov.w	r2, #4294967295
 80058b2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80058b4:	f7fd f8d0 	bl	8002a58 <HAL_GetTick>
 80058b8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80058ba:	e009      	b.n	80058d0 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80058bc:	f7fd f8cc 	bl	8002a58 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058ca:	d901      	bls.n	80058d0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e007      	b.n	80058e0 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0ee      	beq.n	80058bc <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80058fe:	2302      	movs	r3, #2
 8005900:	e0a8      	b.n	8005a54 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2202      	movs	r2, #2
 800590e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	22ca      	movs	r2, #202	; 0xca
 8005918:	625a      	str	r2, [r3, #36]	; 0x24
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2253      	movs	r2, #83	; 0x53
 8005920:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800592c:	2b00      	cmp	r3, #0
 800592e:	d020      	beq.n	8005972 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8005930:	f7fd f892 	bl	8002a58 <HAL_GetTick>
 8005934:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005936:	e015      	b.n	8005964 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005938:	f7fd f88e 	bl	8002a58 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005946:	d90d      	bls.n	8005964 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	22ff      	movs	r2, #255	; 0xff
 800594e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2203      	movs	r2, #3
 8005954:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e077      	b.n	8005a54 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f003 0304 	and.w	r3, r3, #4
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1e2      	bne.n	8005938 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005980:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	b2da      	uxtb	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005992:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005994:	f7fd f860 	bl	8002a58 <HAL_GetTick>
 8005998:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800599a:	e015      	b.n	80059c8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800599c:	f7fd f85c 	bl	8002a58 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059aa:	d90d      	bls.n	80059c8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	22ff      	movs	r2, #255	; 0xff
 80059b2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2203      	movs	r2, #3
 80059b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e045      	b.n	8005a54 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f003 0304 	and.w	r3, r3, #4
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d0e2      	beq.n	800599c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0207 	bic.w	r2, r2, #7
 80059ec:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6899      	ldr	r1, [r3, #8]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80059fe:	4b17      	ldr	r3, [pc, #92]	; (8005a5c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a04:	4a15      	ldr	r2, [pc, #84]	; (8005a5c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005a06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a0a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005a0e:	4b13      	ldr	r3, [pc, #76]	; (8005a5c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a12      	ldr	r2, [pc, #72]	; (8005a5c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005a14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a18:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a28:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	689a      	ldr	r2, [r3, #8]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a38:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	22ff      	movs	r2, #255	; 0xff
 8005a40:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3718      	adds	r7, #24
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	58000800 	.word	0x58000800

08005a60 <LL_RCC_GetUSARTClockSource>:
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a6c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4013      	ands	r3, r2
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <LL_RCC_GetLPUARTClockSource>:
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a8c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4013      	ands	r3, r2
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e042      	b.n	8005b38 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d106      	bne.n	8005aca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7fc fe11 	bl	80026ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2224      	movs	r2, #36	; 0x24
 8005ace:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 0201 	bic.w	r2, r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f8c2 	bl	8005c6c <UART_SetConfig>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e022      	b.n	8005b38 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d002      	beq.n	8005b00 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 fade 	bl	80060bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689a      	ldr	r2, [r3, #8]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0201 	orr.w	r2, r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fb65 	bl	8006200 <UART_CheckIdleState>
 8005b36:	4603      	mov	r3, r0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08a      	sub	sp, #40	; 0x28
 8005b44:	af02      	add	r7, sp, #8
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	603b      	str	r3, [r7, #0]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b56:	2b20      	cmp	r3, #32
 8005b58:	f040 8083 	bne.w	8005c62 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <HAL_UART_Transmit+0x28>
 8005b62:	88fb      	ldrh	r3, [r7, #6]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e07b      	b.n	8005c64 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d101      	bne.n	8005b7a <HAL_UART_Transmit+0x3a>
 8005b76:	2302      	movs	r3, #2
 8005b78:	e074      	b.n	8005c64 <HAL_UART_Transmit+0x124>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2221      	movs	r2, #33	; 0x21
 8005b8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b92:	f7fc ff61 	bl	8002a58 <HAL_GetTick>
 8005b96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	88fa      	ldrh	r2, [r7, #6]
 8005b9c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	88fa      	ldrh	r2, [r7, #6]
 8005ba4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb0:	d108      	bne.n	8005bc4 <HAL_UART_Transmit+0x84>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d104      	bne.n	8005bc4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	61bb      	str	r3, [r7, #24]
 8005bc2:	e003      	b.n	8005bcc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005bd4:	e02c      	b.n	8005c30 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	2180      	movs	r1, #128	; 0x80
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 fb58 	bl	8006296 <UART_WaitOnFlagUntilTimeout>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e039      	b.n	8005c64 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10b      	bne.n	8005c0e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c04:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	3302      	adds	r3, #2
 8005c0a:	61bb      	str	r3, [r7, #24]
 8005c0c:	e007      	b.n	8005c1e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	781a      	ldrb	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	3b01      	subs	r3, #1
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1cc      	bne.n	8005bd6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	2200      	movs	r2, #0
 8005c44:	2140      	movs	r1, #64	; 0x40
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 fb25 	bl	8006296 <UART_WaitOnFlagUntilTimeout>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e006      	b.n	8005c64 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2220      	movs	r2, #32
 8005c5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	e000      	b.n	8005c64 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005c62:	2302      	movs	r3, #2
  }
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3720      	adds	r7, #32
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c70:	b08c      	sub	sp, #48	; 0x30
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	689a      	ldr	r2, [r3, #8]
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	431a      	orrs	r2, r3
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	69db      	ldr	r3, [r3, #28]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	4baf      	ldr	r3, [pc, #700]	; (8005f58 <UART_SetConfig+0x2ec>)
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	6812      	ldr	r2, [r2, #0]
 8005ca2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ca4:	430b      	orrs	r3, r1
 8005ca6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	68da      	ldr	r2, [r3, #12]
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4aa4      	ldr	r2, [pc, #656]	; (8005f5c <UART_SetConfig+0x2f0>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d004      	beq.n	8005cd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005ce2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	6812      	ldr	r2, [r2, #0]
 8005cea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cec:	430b      	orrs	r3, r1
 8005cee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf6:	f023 010f 	bic.w	r1, r3, #15
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	430a      	orrs	r2, r1
 8005d04:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a95      	ldr	r2, [pc, #596]	; (8005f60 <UART_SetConfig+0x2f4>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d125      	bne.n	8005d5c <UART_SetConfig+0xf0>
 8005d10:	2003      	movs	r0, #3
 8005d12:	f7ff fea5 	bl	8005a60 <LL_RCC_GetUSARTClockSource>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b03      	cmp	r3, #3
 8005d1a:	d81b      	bhi.n	8005d54 <UART_SetConfig+0xe8>
 8005d1c:	a201      	add	r2, pc, #4	; (adr r2, 8005d24 <UART_SetConfig+0xb8>)
 8005d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d22:	bf00      	nop
 8005d24:	08005d35 	.word	0x08005d35
 8005d28:	08005d45 	.word	0x08005d45
 8005d2c:	08005d3d 	.word	0x08005d3d
 8005d30:	08005d4d 	.word	0x08005d4d
 8005d34:	2301      	movs	r3, #1
 8005d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d3a:	e042      	b.n	8005dc2 <UART_SetConfig+0x156>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d42:	e03e      	b.n	8005dc2 <UART_SetConfig+0x156>
 8005d44:	2304      	movs	r3, #4
 8005d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d4a:	e03a      	b.n	8005dc2 <UART_SetConfig+0x156>
 8005d4c:	2308      	movs	r3, #8
 8005d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d52:	e036      	b.n	8005dc2 <UART_SetConfig+0x156>
 8005d54:	2310      	movs	r3, #16
 8005d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d5a:	e032      	b.n	8005dc2 <UART_SetConfig+0x156>
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a7e      	ldr	r2, [pc, #504]	; (8005f5c <UART_SetConfig+0x2f0>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d12a      	bne.n	8005dbc <UART_SetConfig+0x150>
 8005d66:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005d6a:	f7ff fe89 	bl	8005a80 <LL_RCC_GetLPUARTClockSource>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d74:	d01a      	beq.n	8005dac <UART_SetConfig+0x140>
 8005d76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d7a:	d81b      	bhi.n	8005db4 <UART_SetConfig+0x148>
 8005d7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d80:	d00c      	beq.n	8005d9c <UART_SetConfig+0x130>
 8005d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d86:	d815      	bhi.n	8005db4 <UART_SetConfig+0x148>
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d003      	beq.n	8005d94 <UART_SetConfig+0x128>
 8005d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d90:	d008      	beq.n	8005da4 <UART_SetConfig+0x138>
 8005d92:	e00f      	b.n	8005db4 <UART_SetConfig+0x148>
 8005d94:	2300      	movs	r3, #0
 8005d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d9a:	e012      	b.n	8005dc2 <UART_SetConfig+0x156>
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005da2:	e00e      	b.n	8005dc2 <UART_SetConfig+0x156>
 8005da4:	2304      	movs	r3, #4
 8005da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005daa:	e00a      	b.n	8005dc2 <UART_SetConfig+0x156>
 8005dac:	2308      	movs	r3, #8
 8005dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005db2:	e006      	b.n	8005dc2 <UART_SetConfig+0x156>
 8005db4:	2310      	movs	r3, #16
 8005db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dba:	e002      	b.n	8005dc2 <UART_SetConfig+0x156>
 8005dbc:	2310      	movs	r3, #16
 8005dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a65      	ldr	r2, [pc, #404]	; (8005f5c <UART_SetConfig+0x2f0>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	f040 8097 	bne.w	8005efc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005dce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005dd2:	2b08      	cmp	r3, #8
 8005dd4:	d823      	bhi.n	8005e1e <UART_SetConfig+0x1b2>
 8005dd6:	a201      	add	r2, pc, #4	; (adr r2, 8005ddc <UART_SetConfig+0x170>)
 8005dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ddc:	08005e01 	.word	0x08005e01
 8005de0:	08005e1f 	.word	0x08005e1f
 8005de4:	08005e09 	.word	0x08005e09
 8005de8:	08005e1f 	.word	0x08005e1f
 8005dec:	08005e0f 	.word	0x08005e0f
 8005df0:	08005e1f 	.word	0x08005e1f
 8005df4:	08005e1f 	.word	0x08005e1f
 8005df8:	08005e1f 	.word	0x08005e1f
 8005dfc:	08005e17 	.word	0x08005e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e00:	f7fe ff80 	bl	8004d04 <HAL_RCC_GetPCLK1Freq>
 8005e04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e06:	e010      	b.n	8005e2a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e08:	4b56      	ldr	r3, [pc, #344]	; (8005f64 <UART_SetConfig+0x2f8>)
 8005e0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e0c:	e00d      	b.n	8005e2a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e0e:	f7fe fef9 	bl	8004c04 <HAL_RCC_GetSysClockFreq>
 8005e12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e14:	e009      	b.n	8005e2a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e1c:	e005      	b.n	8005e2a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005e28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 812b 	beq.w	8006088 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	4a4c      	ldr	r2, [pc, #304]	; (8005f68 <UART_SetConfig+0x2fc>)
 8005e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e44:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	005b      	lsls	r3, r3, #1
 8005e4e:	4413      	add	r3, r2
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d305      	bcc.n	8005e62 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d903      	bls.n	8005e6a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005e68:	e10e      	b.n	8006088 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	60bb      	str	r3, [r7, #8]
 8005e70:	60fa      	str	r2, [r7, #12]
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e76:	4a3c      	ldr	r2, [pc, #240]	; (8005f68 <UART_SetConfig+0x2fc>)
 8005e78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	2200      	movs	r2, #0
 8005e80:	603b      	str	r3, [r7, #0]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e8c:	f7fa f9d0 	bl	8000230 <__aeabi_uldivmod>
 8005e90:	4602      	mov	r2, r0
 8005e92:	460b      	mov	r3, r1
 8005e94:	4610      	mov	r0, r2
 8005e96:	4619      	mov	r1, r3
 8005e98:	f04f 0200 	mov.w	r2, #0
 8005e9c:	f04f 0300 	mov.w	r3, #0
 8005ea0:	020b      	lsls	r3, r1, #8
 8005ea2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ea6:	0202      	lsls	r2, r0, #8
 8005ea8:	6979      	ldr	r1, [r7, #20]
 8005eaa:	6849      	ldr	r1, [r1, #4]
 8005eac:	0849      	lsrs	r1, r1, #1
 8005eae:	2000      	movs	r0, #0
 8005eb0:	460c      	mov	r4, r1
 8005eb2:	4605      	mov	r5, r0
 8005eb4:	eb12 0804 	adds.w	r8, r2, r4
 8005eb8:	eb43 0905 	adc.w	r9, r3, r5
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	469a      	mov	sl, r3
 8005ec4:	4693      	mov	fp, r2
 8005ec6:	4652      	mov	r2, sl
 8005ec8:	465b      	mov	r3, fp
 8005eca:	4640      	mov	r0, r8
 8005ecc:	4649      	mov	r1, r9
 8005ece:	f7fa f9af 	bl	8000230 <__aeabi_uldivmod>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ee0:	d308      	bcc.n	8005ef4 <UART_SetConfig+0x288>
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ee8:	d204      	bcs.n	8005ef4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6a3a      	ldr	r2, [r7, #32]
 8005ef0:	60da      	str	r2, [r3, #12]
 8005ef2:	e0c9      	b.n	8006088 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005efa:	e0c5      	b.n	8006088 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f04:	d16e      	bne.n	8005fe4 <UART_SetConfig+0x378>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005f06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	2b07      	cmp	r3, #7
 8005f0e:	d82d      	bhi.n	8005f6c <UART_SetConfig+0x300>
 8005f10:	a201      	add	r2, pc, #4	; (adr r2, 8005f18 <UART_SetConfig+0x2ac>)
 8005f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f16:	bf00      	nop
 8005f18:	08005f39 	.word	0x08005f39
 8005f1c:	08005f41 	.word	0x08005f41
 8005f20:	08005f6d 	.word	0x08005f6d
 8005f24:	08005f47 	.word	0x08005f47
 8005f28:	08005f6d 	.word	0x08005f6d
 8005f2c:	08005f6d 	.word	0x08005f6d
 8005f30:	08005f6d 	.word	0x08005f6d
 8005f34:	08005f4f 	.word	0x08005f4f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f38:	f7fe fefa 	bl	8004d30 <HAL_RCC_GetPCLK2Freq>
 8005f3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f3e:	e01b      	b.n	8005f78 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f40:	4b08      	ldr	r3, [pc, #32]	; (8005f64 <UART_SetConfig+0x2f8>)
 8005f42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f44:	e018      	b.n	8005f78 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f46:	f7fe fe5d 	bl	8004c04 <HAL_RCC_GetSysClockFreq>
 8005f4a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f4c:	e014      	b.n	8005f78 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f54:	e010      	b.n	8005f78 <UART_SetConfig+0x30c>
 8005f56:	bf00      	nop
 8005f58:	cfff69f3 	.word	0xcfff69f3
 8005f5c:	40008000 	.word	0x40008000
 8005f60:	40013800 	.word	0x40013800
 8005f64:	00f42400 	.word	0x00f42400
 8005f68:	0800d634 	.word	0x0800d634
      default:
        pclk = 0U;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005f76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 8084 	beq.w	8006088 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	4a4b      	ldr	r2, [pc, #300]	; (80060b4 <UART_SetConfig+0x448>)
 8005f86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f92:	005a      	lsls	r2, r3, #1
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	085b      	lsrs	r3, r3, #1
 8005f9a:	441a      	add	r2, r3
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	2b0f      	cmp	r3, #15
 8005fac:	d916      	bls.n	8005fdc <UART_SetConfig+0x370>
 8005fae:	6a3b      	ldr	r3, [r7, #32]
 8005fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fb4:	d212      	bcs.n	8005fdc <UART_SetConfig+0x370>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	f023 030f 	bic.w	r3, r3, #15
 8005fbe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	085b      	lsrs	r3, r3, #1
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	8bfb      	ldrh	r3, [r7, #30]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	8bfa      	ldrh	r2, [r7, #30]
 8005fd8:	60da      	str	r2, [r3, #12]
 8005fda:	e055      	b.n	8006088 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005fe2:	e051      	b.n	8006088 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fe4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	2b07      	cmp	r3, #7
 8005fec:	d821      	bhi.n	8006032 <UART_SetConfig+0x3c6>
 8005fee:	a201      	add	r2, pc, #4	; (adr r2, 8005ff4 <UART_SetConfig+0x388>)
 8005ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff4:	08006015 	.word	0x08006015
 8005ff8:	0800601d 	.word	0x0800601d
 8005ffc:	08006033 	.word	0x08006033
 8006000:	08006023 	.word	0x08006023
 8006004:	08006033 	.word	0x08006033
 8006008:	08006033 	.word	0x08006033
 800600c:	08006033 	.word	0x08006033
 8006010:	0800602b 	.word	0x0800602b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006014:	f7fe fe8c 	bl	8004d30 <HAL_RCC_GetPCLK2Freq>
 8006018:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800601a:	e010      	b.n	800603e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800601c:	4b26      	ldr	r3, [pc, #152]	; (80060b8 <UART_SetConfig+0x44c>)
 800601e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006020:	e00d      	b.n	800603e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006022:	f7fe fdef 	bl	8004c04 <HAL_RCC_GetSysClockFreq>
 8006026:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006028:	e009      	b.n	800603e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800602a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800602e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006030:	e005      	b.n	800603e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8006032:	2300      	movs	r3, #0
 8006034:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800603c:	bf00      	nop
    }

    if (pclk != 0U)
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	2b00      	cmp	r3, #0
 8006042:	d021      	beq.n	8006088 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	4a1a      	ldr	r2, [pc, #104]	; (80060b4 <UART_SetConfig+0x448>)
 800604a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800604e:	461a      	mov	r2, r3
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	fbb3 f2f2 	udiv	r2, r3, r2
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	085b      	lsrs	r3, r3, #1
 800605c:	441a      	add	r2, r3
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	fbb2 f3f3 	udiv	r3, r2, r3
 8006066:	b29b      	uxth	r3, r3
 8006068:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800606a:	6a3b      	ldr	r3, [r7, #32]
 800606c:	2b0f      	cmp	r3, #15
 800606e:	d908      	bls.n	8006082 <UART_SetConfig+0x416>
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006076:	d204      	bcs.n	8006082 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = usartdiv;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6a3a      	ldr	r2, [r7, #32]
 800607e:	60da      	str	r2, [r3, #12]
 8006080:	e002      	b.n	8006088 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	2201      	movs	r2, #1
 800608c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	2201      	movs	r2, #1
 8006094:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	2200      	movs	r2, #0
 800609c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	2200      	movs	r2, #0
 80060a2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80060a4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3730      	adds	r7, #48	; 0x30
 80060ac:	46bd      	mov	sp, r7
 80060ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060b2:	bf00      	nop
 80060b4:	0800d634 	.word	0x0800d634
 80060b8:	00f42400 	.word	0x00f42400

080060bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00a      	beq.n	80060e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ea:	f003 0302 	and.w	r3, r3, #2
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00a      	beq.n	8006108 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610c:	f003 0304 	and.w	r3, r3, #4
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00a      	beq.n	800612a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612e:	f003 0308 	and.w	r3, r3, #8
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00a      	beq.n	800614c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006150:	f003 0310 	and.w	r3, r3, #16
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00a      	beq.n	800616e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006172:	f003 0320 	and.w	r3, r3, #32
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00a      	beq.n	8006190 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006198:	2b00      	cmp	r3, #0
 800619a:	d01a      	beq.n	80061d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061ba:	d10a      	bne.n	80061d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00a      	beq.n	80061f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	605a      	str	r2, [r3, #4]
  }
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af02      	add	r7, sp, #8
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006210:	f7fc fc22 	bl	8002a58 <HAL_GetTick>
 8006214:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0308 	and.w	r3, r3, #8
 8006220:	2b08      	cmp	r3, #8
 8006222:	d10e      	bne.n	8006242 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006224:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f82f 	bl	8006296 <UART_WaitOnFlagUntilTimeout>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e025      	b.n	800628e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0304 	and.w	r3, r3, #4
 800624c:	2b04      	cmp	r3, #4
 800624e:	d10e      	bne.n	800626e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006250:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f819 	bl	8006296 <UART_WaitOnFlagUntilTimeout>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e00f      	b.n	800628e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2220      	movs	r2, #32
 8006272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2220      	movs	r2, #32
 800627a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b09c      	sub	sp, #112	; 0x70
 800629a:	af00      	add	r7, sp, #0
 800629c:	60f8      	str	r0, [r7, #12]
 800629e:	60b9      	str	r1, [r7, #8]
 80062a0:	603b      	str	r3, [r7, #0]
 80062a2:	4613      	mov	r3, r2
 80062a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062a6:	e0a9      	b.n	80063fc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ae:	f000 80a5 	beq.w	80063fc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062b2:	f7fc fbd1 	bl	8002a58 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80062be:	429a      	cmp	r2, r3
 80062c0:	d302      	bcc.n	80062c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80062c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d140      	bne.n	800634a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062d0:	e853 3f00 	ldrex	r3, [r3]
 80062d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062dc:	667b      	str	r3, [r7, #100]	; 0x64
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062e8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80062ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062ee:	e841 2300 	strex	r3, r2, [r1]
 80062f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80062f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1e6      	bne.n	80062c8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	3308      	adds	r3, #8
 8006300:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006304:	e853 3f00 	ldrex	r3, [r3]
 8006308:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800630a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630c:	f023 0301 	bic.w	r3, r3, #1
 8006310:	663b      	str	r3, [r7, #96]	; 0x60
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	3308      	adds	r3, #8
 8006318:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800631a:	64ba      	str	r2, [r7, #72]	; 0x48
 800631c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006320:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006322:	e841 2300 	strex	r3, r2, [r1]
 8006326:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1e5      	bne.n	80062fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2220      	movs	r2, #32
 8006332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2220      	movs	r2, #32
 800633a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e069      	b.n	800641e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0304 	and.w	r3, r3, #4
 8006354:	2b00      	cmp	r3, #0
 8006356:	d051      	beq.n	80063fc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006362:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006366:	d149      	bne.n	80063fc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006370:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637a:	e853 3f00 	ldrex	r3, [r3]
 800637e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006386:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	461a      	mov	r2, r3
 800638e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006390:	637b      	str	r3, [r7, #52]	; 0x34
 8006392:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006394:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006398:	e841 2300 	strex	r3, r2, [r1]
 800639c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800639e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1e6      	bne.n	8006372 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3308      	adds	r3, #8
 80063aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	e853 3f00 	ldrex	r3, [r3]
 80063b2:	613b      	str	r3, [r7, #16]
   return(result);
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	f023 0301 	bic.w	r3, r3, #1
 80063ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3308      	adds	r3, #8
 80063c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063c4:	623a      	str	r2, [r7, #32]
 80063c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c8:	69f9      	ldr	r1, [r7, #28]
 80063ca:	6a3a      	ldr	r2, [r7, #32]
 80063cc:	e841 2300 	strex	r3, r2, [r1]
 80063d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1e5      	bne.n	80063a4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2220      	movs	r2, #32
 80063dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e010      	b.n	800641e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	69da      	ldr	r2, [r3, #28]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	4013      	ands	r3, r2
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	429a      	cmp	r2, r3
 800640a:	bf0c      	ite	eq
 800640c:	2301      	moveq	r3, #1
 800640e:	2300      	movne	r3, #0
 8006410:	b2db      	uxtb	r3, r3
 8006412:	461a      	mov	r2, r3
 8006414:	79fb      	ldrb	r3, [r7, #7]
 8006416:	429a      	cmp	r2, r3
 8006418:	f43f af46 	beq.w	80062a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3770      	adds	r7, #112	; 0x70
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006426:	b480      	push	{r7}
 8006428:	b085      	sub	sp, #20
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006434:	2b01      	cmp	r3, #1
 8006436:	d101      	bne.n	800643c <HAL_UARTEx_DisableFifoMode+0x16>
 8006438:	2302      	movs	r3, #2
 800643a:	e027      	b.n	800648c <HAL_UARTEx_DisableFifoMode+0x66>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2224      	movs	r2, #36	; 0x24
 8006448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 0201 	bic.w	r2, r2, #1
 8006462:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800646a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2220      	movs	r2, #32
 800647e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d101      	bne.n	80064b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80064ac:	2302      	movs	r3, #2
 80064ae:	e02d      	b.n	800650c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2224      	movs	r2, #36	; 0x24
 80064bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 0201 	bic.w	r2, r2, #1
 80064d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f84f 	bl	8006590 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2220      	movs	r2, #32
 80064fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006524:	2b01      	cmp	r3, #1
 8006526:	d101      	bne.n	800652c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006528:	2302      	movs	r3, #2
 800652a:	e02d      	b.n	8006588 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2224      	movs	r2, #36	; 0x24
 8006538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 0201 	bic.w	r2, r2, #1
 8006552:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	430a      	orrs	r2, r1
 8006566:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 f811 	bl	8006590 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2220      	movs	r2, #32
 800657a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800659c:	2b00      	cmp	r3, #0
 800659e:	d108      	bne.n	80065b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80065b0:	e031      	b.n	8006616 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80065b2:	2308      	movs	r3, #8
 80065b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80065b6:	2308      	movs	r3, #8
 80065b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	0e5b      	lsrs	r3, r3, #25
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	f003 0307 	and.w	r3, r3, #7
 80065c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	0f5b      	lsrs	r3, r3, #29
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	f003 0307 	and.w	r3, r3, #7
 80065d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065da:	7bbb      	ldrb	r3, [r7, #14]
 80065dc:	7b3a      	ldrb	r2, [r7, #12]
 80065de:	4911      	ldr	r1, [pc, #68]	; (8006624 <UARTEx_SetNbDataToProcess+0x94>)
 80065e0:	5c8a      	ldrb	r2, [r1, r2]
 80065e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80065e6:	7b3a      	ldrb	r2, [r7, #12]
 80065e8:	490f      	ldr	r1, [pc, #60]	; (8006628 <UARTEx_SetNbDataToProcess+0x98>)
 80065ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
 80065fa:	7b7a      	ldrb	r2, [r7, #13]
 80065fc:	4909      	ldr	r1, [pc, #36]	; (8006624 <UARTEx_SetNbDataToProcess+0x94>)
 80065fe:	5c8a      	ldrb	r2, [r1, r2]
 8006600:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006604:	7b7a      	ldrb	r2, [r7, #13]
 8006606:	4908      	ldr	r1, [pc, #32]	; (8006628 <UARTEx_SetNbDataToProcess+0x98>)
 8006608:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800660a:	fb93 f3f2 	sdiv	r3, r3, r2
 800660e:	b29a      	uxth	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006616:	bf00      	nop
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	0800d64c 	.word	0x0800d64c
 8006628:	0800d654 	.word	0x0800d654

0800662c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b088      	sub	sp, #32
 8006630:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006632:	2300      	movs	r3, #0
 8006634:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006636:	f107 0308 	add.w	r3, r7, #8
 800663a:	2218      	movs	r2, #24
 800663c:	2100      	movs	r1, #0
 800663e:	4618      	mov	r0, r3
 8006640:	f001 f8d8 	bl	80077f4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006644:	233f      	movs	r3, #63	; 0x3f
 8006646:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8006648:	2381      	movs	r3, #129	; 0x81
 800664a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800664c:	1dfb      	adds	r3, r7, #7
 800664e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006650:	2301      	movs	r3, #1
 8006652:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006654:	f107 0308 	add.w	r3, r7, #8
 8006658:	2100      	movs	r1, #0
 800665a:	4618      	mov	r0, r3
 800665c:	f001 fb54 	bl	8007d08 <hci_send_req>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	da01      	bge.n	800666a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006666:	23ff      	movs	r3, #255	; 0xff
 8006668:	e000      	b.n	800666c <aci_gap_set_non_discoverable+0x40>
  return status;
 800666a:	79fb      	ldrb	r3, [r7, #7]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3720      	adds	r7, #32
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8006674:	b5b0      	push	{r4, r5, r7, lr}
 8006676:	b0ce      	sub	sp, #312	; 0x138
 8006678:	af00      	add	r7, sp, #0
 800667a:	4605      	mov	r5, r0
 800667c:	460c      	mov	r4, r1
 800667e:	4610      	mov	r0, r2
 8006680:	4619      	mov	r1, r3
 8006682:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006686:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800668a:	462a      	mov	r2, r5
 800668c:	701a      	strb	r2, [r3, #0]
 800668e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006692:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006696:	4622      	mov	r2, r4
 8006698:	801a      	strh	r2, [r3, #0]
 800669a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800669e:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80066a2:	4602      	mov	r2, r0
 80066a4:	801a      	strh	r2, [r3, #0]
 80066a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80066aa:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80066ae:	460a      	mov	r2, r1
 80066b0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80066b2:	f107 0310 	add.w	r3, r7, #16
 80066b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80066ba:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80066be:	3308      	adds	r3, #8
 80066c0:	f107 0210 	add.w	r2, r7, #16
 80066c4:	4413      	add	r3, r2
 80066c6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80066ca:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80066ce:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80066d2:	4413      	add	r3, r2
 80066d4:	3309      	adds	r3, #9
 80066d6:	f107 0210 	add.w	r2, r7, #16
 80066da:	4413      	add	r3, r2
 80066dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80066e0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80066e4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80066e8:	2200      	movs	r2, #0
 80066ea:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80066ec:	2300      	movs	r3, #0
 80066ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 80066f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80066f6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80066fa:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80066fe:	7812      	ldrb	r2, [r2, #0]
 8006700:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006702:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006706:	3301      	adds	r3, #1
 8006708:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800670c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006710:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006714:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8006718:	8812      	ldrh	r2, [r2, #0]
 800671a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800671e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006722:	3302      	adds	r3, #2
 8006724:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8006728:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800672c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006730:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8006734:	8812      	ldrh	r2, [r2, #0]
 8006736:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800673a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800673e:	3302      	adds	r3, #2
 8006740:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8006744:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006748:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800674c:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006750:	7812      	ldrb	r2, [r2, #0]
 8006752:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006754:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006758:	3301      	adds	r3, #1
 800675a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800675e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006762:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006766:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006768:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800676c:	3301      	adds	r3, #1
 800676e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8006772:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006776:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800677a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800677c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006780:	3301      	adds	r3, #1
 8006782:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8006786:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800678a:	3308      	adds	r3, #8
 800678c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006790:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8006794:	4618      	mov	r0, r3
 8006796:	f001 f81d 	bl	80077d4 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800679a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800679e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80067a2:	4413      	add	r3, r2
 80067a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80067a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80067ac:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80067b0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80067b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80067b6:	3301      	adds	r3, #1
 80067b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80067bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80067c0:	3301      	adds	r3, #1
 80067c2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80067c6:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80067ca:	4618      	mov	r0, r3
 80067cc:	f001 f802 	bl	80077d4 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80067d0:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80067d4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80067d8:	4413      	add	r3, r2
 80067da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 80067de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067e2:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80067e6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80067e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80067ec:	3302      	adds	r3, #2
 80067ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 80067f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067f6:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80067fa:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80067fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006800:	3302      	adds	r3, #2
 8006802:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006806:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800680a:	2218      	movs	r2, #24
 800680c:	2100      	movs	r1, #0
 800680e:	4618      	mov	r0, r3
 8006810:	f000 fff0 	bl	80077f4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006814:	233f      	movs	r3, #63	; 0x3f
 8006816:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800681a:	2383      	movs	r3, #131	; 0x83
 800681c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006820:	f107 0310 	add.w	r3, r7, #16
 8006824:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006828:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800682c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006830:	f107 030f 	add.w	r3, r7, #15
 8006834:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006838:	2301      	movs	r3, #1
 800683a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800683e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006842:	2100      	movs	r1, #0
 8006844:	4618      	mov	r0, r3
 8006846:	f001 fa5f 	bl	8007d08 <hci_send_req>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	da01      	bge.n	8006854 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8006850:	23ff      	movs	r3, #255	; 0xff
 8006852:	e004      	b.n	800685e <aci_gap_set_discoverable+0x1ea>
  return status;
 8006854:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006858:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800685c:	781b      	ldrb	r3, [r3, #0]
}
 800685e:	4618      	mov	r0, r3
 8006860:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006864:	46bd      	mov	sp, r7
 8006866:	bdb0      	pop	{r4, r5, r7, pc}

08006868 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b0cc      	sub	sp, #304	; 0x130
 800686c:	af00      	add	r7, sp, #0
 800686e:	4602      	mov	r2, r0
 8006870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006874:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006878:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800687a:	f107 0310 	add.w	r3, r7, #16
 800687e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006886:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800688a:	2200      	movs	r2, #0
 800688c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800688e:	2300      	movs	r3, #0
 8006890:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8006894:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006898:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800689c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80068a0:	7812      	ldrb	r2, [r2, #0]
 80068a2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80068a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068a8:	3301      	adds	r3, #1
 80068aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80068ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80068b2:	2218      	movs	r2, #24
 80068b4:	2100      	movs	r1, #0
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 ff9c 	bl	80077f4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80068bc:	233f      	movs	r3, #63	; 0x3f
 80068be:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80068c2:	2385      	movs	r3, #133	; 0x85
 80068c4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80068c8:	f107 0310 	add.w	r3, r7, #16
 80068cc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80068d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80068d8:	f107 030f 	add.w	r3, r7, #15
 80068dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80068e0:	2301      	movs	r3, #1
 80068e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80068e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80068ea:	2100      	movs	r1, #0
 80068ec:	4618      	mov	r0, r3
 80068ee:	f001 fa0b 	bl	8007d08 <hci_send_req>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	da01      	bge.n	80068fc <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80068f8:	23ff      	movs	r3, #255	; 0xff
 80068fa:	e004      	b.n	8006906 <aci_gap_set_io_capability+0x9e>
  return status;
 80068fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006900:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006904:	781b      	ldrb	r3, [r3, #0]
}
 8006906:	4618      	mov	r0, r3
 8006908:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8006910:	b5b0      	push	{r4, r5, r7, lr}
 8006912:	b0cc      	sub	sp, #304	; 0x130
 8006914:	af00      	add	r7, sp, #0
 8006916:	4605      	mov	r5, r0
 8006918:	460c      	mov	r4, r1
 800691a:	4610      	mov	r0, r2
 800691c:	4619      	mov	r1, r3
 800691e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006922:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006926:	462a      	mov	r2, r5
 8006928:	701a      	strb	r2, [r3, #0]
 800692a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800692e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006932:	4622      	mov	r2, r4
 8006934:	701a      	strb	r2, [r3, #0]
 8006936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800693a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800693e:	4602      	mov	r2, r0
 8006940:	701a      	strb	r2, [r3, #0]
 8006942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006946:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800694a:	460a      	mov	r2, r1
 800694c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800694e:	f107 0310 	add.w	r3, r7, #16
 8006952:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800695a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800695e:	2200      	movs	r2, #0
 8006960:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006962:	2300      	movs	r3, #0
 8006964:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8006968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800696c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006970:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006974:	7812      	ldrb	r2, [r2, #0]
 8006976:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006978:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800697c:	3301      	adds	r3, #1
 800697e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8006982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006986:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800698a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800698e:	7812      	ldrb	r2, [r2, #0]
 8006990:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006992:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006996:	3301      	adds	r3, #1
 8006998:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800699c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80069a4:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80069a8:	7812      	ldrb	r2, [r2, #0]
 80069aa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80069ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069b0:	3301      	adds	r3, #1
 80069b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80069b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80069be:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80069c2:	7812      	ldrb	r2, [r2, #0]
 80069c4:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80069c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069ca:	3301      	adds	r3, #1
 80069cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80069d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069d4:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80069d8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80069da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069de:	3301      	adds	r3, #1
 80069e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80069e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069e8:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80069ec:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80069ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069f2:	3301      	adds	r3, #1
 80069f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80069f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069fc:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006a00:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006a02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a06:	3301      	adds	r3, #1
 8006a08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8006a0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a10:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8006a14:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8006a18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a1c:	3304      	adds	r3, #4
 8006a1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8006a22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a26:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8006a2a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8006a2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a30:	3301      	adds	r3, #1
 8006a32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006a36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a3a:	2218      	movs	r2, #24
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 fed8 	bl	80077f4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006a44:	233f      	movs	r3, #63	; 0x3f
 8006a46:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8006a4a:	2386      	movs	r3, #134	; 0x86
 8006a4c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006a50:	f107 0310 	add.w	r3, r7, #16
 8006a54:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006a58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a5c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006a60:	f107 030f 	add.w	r3, r7, #15
 8006a64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006a6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a72:	2100      	movs	r1, #0
 8006a74:	4618      	mov	r0, r3
 8006a76:	f001 f947 	bl	8007d08 <hci_send_req>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	da01      	bge.n	8006a84 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8006a80:	23ff      	movs	r3, #255	; 0xff
 8006a82:	e004      	b.n	8006a8e <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8006a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a88:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006a8c:	781b      	ldrb	r3, [r3, #0]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bdb0      	pop	{r4, r5, r7, pc}

08006a98 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b0cc      	sub	sp, #304	; 0x130
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aa8:	6019      	str	r1, [r3, #0]
 8006aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aae:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006ab2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8006ab4:	f107 0310 	add.w	r3, r7, #16
 8006ab8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006abc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006ace:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ad2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ad6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006ada:	8812      	ldrh	r2, [r2, #0]
 8006adc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006ade:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ae2:	3302      	adds	r3, #2
 8006ae4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8006ae8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006af0:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8006af4:	6812      	ldr	r2, [r2, #0]
 8006af6:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8006afa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006afe:	3304      	adds	r3, #4
 8006b00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006b04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b08:	2218      	movs	r2, #24
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 fe71 	bl	80077f4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006b12:	233f      	movs	r3, #63	; 0x3f
 8006b14:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8006b18:	2388      	movs	r3, #136	; 0x88
 8006b1a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006b1e:	f107 0310 	add.w	r3, r7, #16
 8006b22:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006b26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b2a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006b2e:	f107 030f 	add.w	r3, r7, #15
 8006b32:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006b36:	2301      	movs	r3, #1
 8006b38:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006b3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b40:	2100      	movs	r1, #0
 8006b42:	4618      	mov	r0, r3
 8006b44:	f001 f8e0 	bl	8007d08 <hci_send_req>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	da01      	bge.n	8006b52 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8006b4e:	23ff      	movs	r3, #255	; 0xff
 8006b50:	e004      	b.n	8006b5c <aci_gap_pass_key_resp+0xc4>
  return status;
 8006b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b56:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006b5a:	781b      	ldrb	r3, [r3, #0]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8006b66:	b590      	push	{r4, r7, lr}
 8006b68:	b0cd      	sub	sp, #308	; 0x134
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	4604      	mov	r4, r0
 8006b6e:	4608      	mov	r0, r1
 8006b70:	4611      	mov	r1, r2
 8006b72:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b76:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8006b7a:	6013      	str	r3, [r2, #0]
 8006b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b80:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006b84:	4622      	mov	r2, r4
 8006b86:	701a      	strb	r2, [r3, #0]
 8006b88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b8c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006b90:	4602      	mov	r2, r0
 8006b92:	701a      	strb	r2, [r3, #0]
 8006b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b98:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8006b9c:	460a      	mov	r2, r1
 8006b9e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8006ba0:	f107 0310 	add.w	r3, r7, #16
 8006ba4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006ba8:	f107 0308 	add.w	r3, r7, #8
 8006bac:	2207      	movs	r2, #7
 8006bae:	2100      	movs	r1, #0
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f000 fe1f 	bl	80077f4 <Osal_MemSet>
  int index_input = 0;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8006bbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bc0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006bc4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006bc8:	7812      	ldrb	r2, [r2, #0]
 8006bca:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006bcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8006bd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bda:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006bde:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006be2:	7812      	ldrb	r2, [r2, #0]
 8006be4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006be6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bea:	3301      	adds	r3, #1
 8006bec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8006bf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bf4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006bf8:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006bfc:	7812      	ldrb	r2, [r2, #0]
 8006bfe:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006c00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c04:	3301      	adds	r3, #1
 8006c06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006c0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c0e:	2218      	movs	r2, #24
 8006c10:	2100      	movs	r1, #0
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 fdee 	bl	80077f4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006c18:	233f      	movs	r3, #63	; 0x3f
 8006c1a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8006c1e:	238a      	movs	r3, #138	; 0x8a
 8006c20:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006c24:	f107 0310 	add.w	r3, r7, #16
 8006c28:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006c2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c30:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8006c34:	f107 0308 	add.w	r3, r7, #8
 8006c38:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8006c3c:	2307      	movs	r3, #7
 8006c3e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006c42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c46:	2100      	movs	r1, #0
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f001 f85d 	bl	8007d08 <hci_send_req>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	da01      	bge.n	8006c58 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8006c54:	23ff      	movs	r3, #255	; 0xff
 8006c56:	e02e      	b.n	8006cb6 <aci_gap_init+0x150>
  if ( resp.Status )
 8006c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c5c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d005      	beq.n	8006c72 <aci_gap_init+0x10c>
    return resp.Status;
 8006c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c6a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	e021      	b.n	8006cb6 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8006c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c76:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006c7a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8006c8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c90:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006c94:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006c9e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8006ca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006ca8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006cb2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd90      	pop	{r4, r7, pc}

08006cc0 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b0cc      	sub	sp, #304	; 0x130
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ccc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cd0:	6019      	str	r1, [r3, #0]
 8006cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006cda:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8006cdc:	f107 0310 	add.w	r3, r7, #16
 8006ce0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ce8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006cec:	2200      	movs	r2, #0
 8006cee:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8006cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cfa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006cfe:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006d02:	7812      	ldrb	r2, [r2, #0]
 8006d04:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006d06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8006d10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d14:	1c58      	adds	r0, r3, #1
 8006d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d1a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006d1e:	781a      	ldrb	r2, [r3, #0]
 8006d20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d28:	6819      	ldr	r1, [r3, #0]
 8006d2a:	f000 fd53 	bl	80077d4 <Osal_MemCpy>
  index_input += AdvDataLen;
 8006d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d32:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006d42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d46:	2218      	movs	r2, #24
 8006d48:	2100      	movs	r1, #0
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 fd52 	bl	80077f4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006d50:	233f      	movs	r3, #63	; 0x3f
 8006d52:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8006d56:	238e      	movs	r3, #142	; 0x8e
 8006d58:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006d5c:	f107 0310 	add.w	r3, r7, #16
 8006d60:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006d64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006d6c:	f107 030f 	add.w	r3, r7, #15
 8006d70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006d74:	2301      	movs	r3, #1
 8006d76:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006d7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d7e:	2100      	movs	r1, #0
 8006d80:	4618      	mov	r0, r3
 8006d82:	f000 ffc1 	bl	8007d08 <hci_send_req>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	da01      	bge.n	8006d90 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8006d8c:	23ff      	movs	r3, #255	; 0xff
 8006d8e:	e004      	b.n	8006d9a <aci_gap_update_adv_data+0xda>
  return status;
 8006d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d94:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006d98:	781b      	ldrb	r3, [r3, #0]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b088      	sub	sp, #32
 8006da8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006daa:	2300      	movs	r3, #0
 8006dac:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006dae:	f107 0308 	add.w	r3, r7, #8
 8006db2:	2218      	movs	r2, #24
 8006db4:	2100      	movs	r1, #0
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 fd1c 	bl	80077f4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006dbc:	233f      	movs	r3, #63	; 0x3f
 8006dbe:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8006dc0:	2392      	movs	r3, #146	; 0x92
 8006dc2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006dc4:	1dfb      	adds	r3, r7, #7
 8006dc6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006dcc:	f107 0308 	add.w	r3, r7, #8
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 ff98 	bl	8007d08 <hci_send_req>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	da01      	bge.n	8006de2 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006dde:	23ff      	movs	r3, #255	; 0xff
 8006de0:	e000      	b.n	8006de4 <aci_gap_configure_whitelist+0x40>
  return status;
 8006de2:	79fb      	ldrb	r3, [r7, #7]
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3720      	adds	r7, #32
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b0cc      	sub	sp, #304	; 0x130
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	4602      	mov	r2, r0
 8006df4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006dfc:	801a      	strh	r2, [r3, #0]
 8006dfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e02:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8006e06:	460a      	mov	r2, r1
 8006e08:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8006e0a:	f107 0310 	add.w	r3, r7, #16
 8006e0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e16:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006e24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e28:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e2c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006e30:	8812      	ldrh	r2, [r2, #0]
 8006e32:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006e34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e38:	3302      	adds	r3, #2
 8006e3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8006e3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e42:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e46:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006e4a:	7812      	ldrb	r2, [r2, #0]
 8006e4c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006e4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e52:	3301      	adds	r3, #1
 8006e54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006e58:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e5c:	2218      	movs	r2, #24
 8006e5e:	2100      	movs	r1, #0
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 fcc7 	bl	80077f4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006e66:	233f      	movs	r3, #63	; 0x3f
 8006e68:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8006e6c:	23a5      	movs	r3, #165	; 0xa5
 8006e6e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006e72:	f107 0310 	add.w	r3, r7, #16
 8006e76:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006e7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006e82:	f107 030f 	add.w	r3, r7, #15
 8006e86:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006e90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e94:	2100      	movs	r1, #0
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 ff36 	bl	8007d08 <hci_send_req>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	da01      	bge.n	8006ea6 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8006ea2:	23ff      	movs	r3, #255	; 0xff
 8006ea4:	e004      	b.n	8006eb0 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8006ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eaa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006eae:	781b      	ldrb	r3, [r3, #0]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b088      	sub	sp, #32
 8006ebe:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006ec4:	f107 0308 	add.w	r3, r7, #8
 8006ec8:	2218      	movs	r2, #24
 8006eca:	2100      	movs	r1, #0
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 fc91 	bl	80077f4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006ed2:	233f      	movs	r3, #63	; 0x3f
 8006ed4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8006ed6:	f240 1301 	movw	r3, #257	; 0x101
 8006eda:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006edc:	1dfb      	adds	r3, r7, #7
 8006ede:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006ee4:	f107 0308 	add.w	r3, r7, #8
 8006ee8:	2100      	movs	r1, #0
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 ff0c 	bl	8007d08 <hci_send_req>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	da01      	bge.n	8006efa <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8006ef6:	23ff      	movs	r3, #255	; 0xff
 8006ef8:	e000      	b.n	8006efc <aci_gatt_init+0x42>
  return status;
 8006efa:	79fb      	ldrb	r3, [r7, #7]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3720      	adds	r7, #32
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8006f04:	b590      	push	{r4, r7, lr}
 8006f06:	b0cf      	sub	sp, #316	; 0x13c
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8006f10:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8006f14:	6001      	str	r1, [r0, #0]
 8006f16:	4610      	mov	r0, r2
 8006f18:	4619      	mov	r1, r3
 8006f1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006f1e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006f22:	4622      	mov	r2, r4
 8006f24:	701a      	strb	r2, [r3, #0]
 8006f26:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006f2a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006f2e:	4602      	mov	r2, r0
 8006f30:	701a      	strb	r2, [r3, #0]
 8006f32:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006f36:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006f3a:	460a      	mov	r2, r1
 8006f3c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8006f3e:	f107 0310 	add.w	r3, r7, #16
 8006f42:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8006f46:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006f4a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d00a      	beq.n	8006f6a <aci_gatt_add_service+0x66>
 8006f54:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006f58:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d101      	bne.n	8006f66 <aci_gatt_add_service+0x62>
 8006f62:	2311      	movs	r3, #17
 8006f64:	e002      	b.n	8006f6c <aci_gatt_add_service+0x68>
 8006f66:	2301      	movs	r3, #1
 8006f68:	e000      	b.n	8006f6c <aci_gatt_add_service+0x68>
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	f107 0210 	add.w	r2, r7, #16
 8006f70:	4413      	add	r3, r2
 8006f72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006f76:	f107 030c 	add.w	r3, r7, #12
 8006f7a:	2203      	movs	r2, #3
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f000 fc38 	bl	80077f4 <Osal_MemSet>
  int index_input = 0;
 8006f84:	2300      	movs	r3, #0
 8006f86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8006f8a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006f8e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006f92:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8006f96:	7812      	ldrb	r2, [r2, #0]
 8006f98:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006f9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8006fa4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006fa8:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d002      	beq.n	8006fb8 <aci_gatt_add_service+0xb4>
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d004      	beq.n	8006fc0 <aci_gatt_add_service+0xbc>
 8006fb6:	e007      	b.n	8006fc8 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8006fb8:	2302      	movs	r3, #2
 8006fba:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006fbe:	e005      	b.n	8006fcc <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8006fc0:	2310      	movs	r3, #16
 8006fc2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006fc6:	e001      	b.n	8006fcc <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8006fc8:	2397      	movs	r3, #151	; 0x97
 8006fca:	e06c      	b.n	80070a6 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8006fcc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006fd0:	1c58      	adds	r0, r3, #1
 8006fd2:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8006fd6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006fda:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006fde:	6819      	ldr	r1, [r3, #0]
 8006fe0:	f000 fbf8 	bl	80077d4 <Osal_MemCpy>
    index_input += size;
 8006fe4:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8006fe8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006fec:	4413      	add	r3, r2
 8006fee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8006ff2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ff6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006ffa:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006ffe:	7812      	ldrb	r2, [r2, #0]
 8007000:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007002:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007006:	3301      	adds	r3, #1
 8007008:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800700c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007010:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007014:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8007018:	7812      	ldrb	r2, [r2, #0]
 800701a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800701c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007020:	3301      	adds	r3, #1
 8007022:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007026:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800702a:	2218      	movs	r2, #24
 800702c:	2100      	movs	r1, #0
 800702e:	4618      	mov	r0, r3
 8007030:	f000 fbe0 	bl	80077f4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007034:	233f      	movs	r3, #63	; 0x3f
 8007036:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800703a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800703e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007042:	f107 0310 	add.w	r3, r7, #16
 8007046:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800704a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800704e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007052:	f107 030c 	add.w	r3, r7, #12
 8007056:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800705a:	2303      	movs	r3, #3
 800705c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007060:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007064:	2100      	movs	r1, #0
 8007066:	4618      	mov	r0, r3
 8007068:	f000 fe4e 	bl	8007d08 <hci_send_req>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	da01      	bge.n	8007076 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8007072:	23ff      	movs	r3, #255	; 0xff
 8007074:	e017      	b.n	80070a6 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8007076:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800707a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d005      	beq.n	8007090 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8007084:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007088:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	e00a      	b.n	80070a6 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8007090:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007094:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007098:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800709c:	b29a      	uxth	r2, r3
 800709e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80070a2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd90      	pop	{r4, r7, pc}

080070b0 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80070b0:	b590      	push	{r4, r7, lr}
 80070b2:	b0d1      	sub	sp, #324	; 0x144
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	4604      	mov	r4, r0
 80070b8:	4608      	mov	r0, r1
 80070ba:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80070be:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 80070c2:	600a      	str	r2, [r1, #0]
 80070c4:	4619      	mov	r1, r3
 80070c6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80070ca:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80070ce:	4622      	mov	r2, r4
 80070d0:	801a      	strh	r2, [r3, #0]
 80070d2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80070d6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80070da:	4602      	mov	r2, r0
 80070dc:	701a      	strb	r2, [r3, #0]
 80070de:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80070e2:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 80070e6:	460a      	mov	r2, r1
 80070e8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80070ea:	f107 0318 	add.w	r3, r7, #24
 80070ee:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80070f2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80070f6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d00a      	beq.n	8007116 <aci_gatt_add_char+0x66>
 8007100:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007104:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	2b02      	cmp	r3, #2
 800710c:	d101      	bne.n	8007112 <aci_gatt_add_char+0x62>
 800710e:	2313      	movs	r3, #19
 8007110:	e002      	b.n	8007118 <aci_gatt_add_char+0x68>
 8007112:	2303      	movs	r3, #3
 8007114:	e000      	b.n	8007118 <aci_gatt_add_char+0x68>
 8007116:	2305      	movs	r3, #5
 8007118:	f107 0218 	add.w	r2, r7, #24
 800711c:	4413      	add	r3, r2
 800711e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007122:	f107 0314 	add.w	r3, r7, #20
 8007126:	2203      	movs	r2, #3
 8007128:	2100      	movs	r1, #0
 800712a:	4618      	mov	r0, r3
 800712c:	f000 fb62 	bl	80077f4 <Osal_MemSet>
  int index_input = 0;
 8007130:	2300      	movs	r3, #0
 8007132:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8007136:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800713a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800713e:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8007142:	8812      	ldrh	r2, [r2, #0]
 8007144:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007146:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800714a:	3302      	adds	r3, #2
 800714c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8007150:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007154:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007158:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800715c:	7812      	ldrb	r2, [r2, #0]
 800715e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007160:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007164:	3301      	adds	r3, #1
 8007166:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800716a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800716e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d002      	beq.n	800717e <aci_gatt_add_char+0xce>
 8007178:	2b02      	cmp	r3, #2
 800717a:	d004      	beq.n	8007186 <aci_gatt_add_char+0xd6>
 800717c:	e007      	b.n	800718e <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800717e:	2302      	movs	r3, #2
 8007180:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007184:	e005      	b.n	8007192 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8007186:	2310      	movs	r3, #16
 8007188:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800718c:	e001      	b.n	8007192 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800718e:	2397      	movs	r3, #151	; 0x97
 8007190:	e091      	b.n	80072b6 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8007192:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007196:	1cd8      	adds	r0, r3, #3
 8007198:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800719c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80071a0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80071a4:	6819      	ldr	r1, [r3, #0]
 80071a6:	f000 fb15 	bl	80077d4 <Osal_MemCpy>
    index_input += size;
 80071aa:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80071ae:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80071b2:	4413      	add	r3, r2
 80071b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80071b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80071bc:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80071c0:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 80071c4:	8812      	ldrh	r2, [r2, #0]
 80071c6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80071c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80071cc:	3302      	adds	r3, #2
 80071ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80071d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80071d6:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80071da:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80071dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80071e0:	3301      	adds	r3, #1
 80071e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80071e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80071ea:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80071ee:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80071f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80071f4:	3301      	adds	r3, #1
 80071f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80071fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80071fe:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8007202:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8007204:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007208:	3301      	adds	r3, #1
 800720a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800720e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007212:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8007216:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8007218:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800721c:	3301      	adds	r3, #1
 800721e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8007222:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007226:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800722a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800722c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007230:	3301      	adds	r3, #1
 8007232:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007236:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800723a:	2218      	movs	r2, #24
 800723c:	2100      	movs	r1, #0
 800723e:	4618      	mov	r0, r3
 8007240:	f000 fad8 	bl	80077f4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007244:	233f      	movs	r3, #63	; 0x3f
 8007246:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800724a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800724e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8007252:	f107 0318 	add.w	r3, r7, #24
 8007256:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800725a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800725e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8007262:	f107 0314 	add.w	r3, r7, #20
 8007266:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800726a:	2303      	movs	r3, #3
 800726c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007270:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007274:	2100      	movs	r1, #0
 8007276:	4618      	mov	r0, r3
 8007278:	f000 fd46 	bl	8007d08 <hci_send_req>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	da01      	bge.n	8007286 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8007282:	23ff      	movs	r3, #255	; 0xff
 8007284:	e017      	b.n	80072b6 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8007286:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800728a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d005      	beq.n	80072a0 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8007294:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007298:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	e00a      	b.n	80072b6 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80072a0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80072a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072a8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80072b2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd90      	pop	{r4, r7, pc}

080072c0 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80072c0:	b5b0      	push	{r4, r5, r7, lr}
 80072c2:	b0cc      	sub	sp, #304	; 0x130
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	4605      	mov	r5, r0
 80072c8:	460c      	mov	r4, r1
 80072ca:	4610      	mov	r0, r2
 80072cc:	4619      	mov	r1, r3
 80072ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80072d6:	462a      	mov	r2, r5
 80072d8:	801a      	strh	r2, [r3, #0]
 80072da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072e2:	4622      	mov	r2, r4
 80072e4:	801a      	strh	r2, [r3, #0]
 80072e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ea:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80072ee:	4602      	mov	r2, r0
 80072f0:	701a      	strb	r2, [r3, #0]
 80072f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80072fa:	460a      	mov	r2, r1
 80072fc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80072fe:	f107 0310 	add.w	r3, r7, #16
 8007302:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800730a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800730e:	2200      	movs	r2, #0
 8007310:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007312:	2300      	movs	r3, #0
 8007314:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8007318:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800731c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007320:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007324:	8812      	ldrh	r2, [r2, #0]
 8007326:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007328:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800732c:	3302      	adds	r3, #2
 800732e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8007332:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007336:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800733a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800733e:	8812      	ldrh	r2, [r2, #0]
 8007340:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007342:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007346:	3302      	adds	r3, #2
 8007348:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800734c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007350:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007354:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8007358:	7812      	ldrb	r2, [r2, #0]
 800735a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800735c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007360:	3301      	adds	r3, #1
 8007362:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8007366:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800736a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800736e:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8007372:	7812      	ldrb	r2, [r2, #0]
 8007374:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007376:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800737a:	3301      	adds	r3, #1
 800737c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8007380:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007384:	1d98      	adds	r0, r3, #6
 8007386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800738a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	461a      	mov	r2, r3
 8007392:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007396:	f000 fa1d 	bl	80077d4 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800739a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800739e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80073a8:	4413      	add	r3, r2
 80073aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80073ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073b2:	2218      	movs	r2, #24
 80073b4:	2100      	movs	r1, #0
 80073b6:	4618      	mov	r0, r3
 80073b8:	f000 fa1c 	bl	80077f4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80073bc:	233f      	movs	r3, #63	; 0x3f
 80073be:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80073c2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80073c6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80073ca:	f107 0310 	add.w	r3, r7, #16
 80073ce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80073d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80073da:	f107 030f 	add.w	r3, r7, #15
 80073de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80073e2:	2301      	movs	r3, #1
 80073e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80073e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073ec:	2100      	movs	r1, #0
 80073ee:	4618      	mov	r0, r3
 80073f0:	f000 fc8a 	bl	8007d08 <hci_send_req>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	da01      	bge.n	80073fe <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80073fa:	23ff      	movs	r3, #255	; 0xff
 80073fc:	e004      	b.n	8007408 <aci_gatt_update_char_value+0x148>
  return status;
 80073fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007402:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007406:	781b      	ldrb	r3, [r3, #0]
}
 8007408:	4618      	mov	r0, r3
 800740a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800740e:	46bd      	mov	sp, r7
 8007410:	bdb0      	pop	{r4, r5, r7, pc}

08007412 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b0cc      	sub	sp, #304	; 0x130
 8007416:	af00      	add	r7, sp, #0
 8007418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800741c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007420:	601a      	str	r2, [r3, #0]
 8007422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007426:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800742a:	4602      	mov	r2, r0
 800742c:	701a      	strb	r2, [r3, #0]
 800742e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007432:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007436:	460a      	mov	r2, r1
 8007438:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800743a:	f107 0310 	add.w	r3, r7, #16
 800743e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007446:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800744a:	2200      	movs	r2, #0
 800744c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800744e:	2300      	movs	r3, #0
 8007450:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8007454:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007458:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800745c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007460:	7812      	ldrb	r2, [r2, #0]
 8007462:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007464:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007468:	3301      	adds	r3, #1
 800746a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800746e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007472:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007476:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800747a:	7812      	ldrb	r2, [r2, #0]
 800747c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800747e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007482:	3301      	adds	r3, #1
 8007484:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8007488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800748c:	1c98      	adds	r0, r3, #2
 800748e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007492:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007496:	781a      	ldrb	r2, [r3, #0]
 8007498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800749c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074a0:	6819      	ldr	r1, [r3, #0]
 80074a2:	f000 f997 	bl	80077d4 <Osal_MemCpy>
  index_input += Length;
 80074a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074aa:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80074b4:	4413      	add	r3, r2
 80074b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80074ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074be:	2218      	movs	r2, #24
 80074c0:	2100      	movs	r1, #0
 80074c2:	4618      	mov	r0, r3
 80074c4:	f000 f996 	bl	80077f4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80074c8:	233f      	movs	r3, #63	; 0x3f
 80074ca:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80074ce:	230c      	movs	r3, #12
 80074d0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80074d4:	f107 0310 	add.w	r3, r7, #16
 80074d8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80074dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80074e4:	f107 030f 	add.w	r3, r7, #15
 80074e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80074ec:	2301      	movs	r3, #1
 80074ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80074f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074f6:	2100      	movs	r1, #0
 80074f8:	4618      	mov	r0, r3
 80074fa:	f000 fc05 	bl	8007d08 <hci_send_req>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	da01      	bge.n	8007508 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8007504:	23ff      	movs	r3, #255	; 0xff
 8007506:	e004      	b.n	8007512 <aci_hal_write_config_data+0x100>
  return status;
 8007508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800750c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007510:	781b      	ldrb	r3, [r3, #0]
}
 8007512:	4618      	mov	r0, r3
 8007514:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b0cc      	sub	sp, #304	; 0x130
 8007520:	af00      	add	r7, sp, #0
 8007522:	4602      	mov	r2, r0
 8007524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007528:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800752c:	701a      	strb	r2, [r3, #0]
 800752e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007532:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007536:	460a      	mov	r2, r1
 8007538:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800753a:	f107 0310 	add.w	r3, r7, #16
 800753e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007542:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007546:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800754a:	2200      	movs	r2, #0
 800754c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800754e:	2300      	movs	r3, #0
 8007550:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8007554:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007558:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800755c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007560:	7812      	ldrb	r2, [r2, #0]
 8007562:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007564:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007568:	3301      	adds	r3, #1
 800756a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800756e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007572:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007576:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800757a:	7812      	ldrb	r2, [r2, #0]
 800757c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800757e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007582:	3301      	adds	r3, #1
 8007584:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007588:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800758c:	2218      	movs	r2, #24
 800758e:	2100      	movs	r1, #0
 8007590:	4618      	mov	r0, r3
 8007592:	f000 f92f 	bl	80077f4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007596:	233f      	movs	r3, #63	; 0x3f
 8007598:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800759c:	230f      	movs	r3, #15
 800759e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80075a2:	f107 0310 	add.w	r3, r7, #16
 80075a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80075aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80075b2:	f107 030f 	add.w	r3, r7, #15
 80075b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80075ba:	2301      	movs	r3, #1
 80075bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80075c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80075c4:	2100      	movs	r1, #0
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 fb9e 	bl	8007d08 <hci_send_req>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	da01      	bge.n	80075d6 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80075d2:	23ff      	movs	r3, #255	; 0xff
 80075d4:	e004      	b.n	80075e0 <aci_hal_set_tx_power_level+0xc4>
  return status;
 80075d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075da:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80075de:	781b      	ldrb	r3, [r3, #0]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b0cc      	sub	sp, #304	; 0x130
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	4602      	mov	r2, r0
 80075f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80075fa:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80075fc:	f107 0310 	add.w	r3, r7, #16
 8007600:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007608:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800760c:	2200      	movs	r2, #0
 800760e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007610:	2300      	movs	r3, #0
 8007612:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8007616:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800761a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800761e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007622:	8812      	ldrh	r2, [r2, #0]
 8007624:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007626:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800762a:	3302      	adds	r3, #2
 800762c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007630:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007634:	2218      	movs	r2, #24
 8007636:	2100      	movs	r1, #0
 8007638:	4618      	mov	r0, r3
 800763a:	f000 f8db 	bl	80077f4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800763e:	233f      	movs	r3, #63	; 0x3f
 8007640:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8007644:	2318      	movs	r3, #24
 8007646:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800764a:	f107 0310 	add.w	r3, r7, #16
 800764e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007652:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007656:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800765a:	f107 030f 	add.w	r3, r7, #15
 800765e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007662:	2301      	movs	r3, #1
 8007664:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007668:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800766c:	2100      	movs	r1, #0
 800766e:	4618      	mov	r0, r3
 8007670:	f000 fb4a 	bl	8007d08 <hci_send_req>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	da01      	bge.n	800767e <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800767a:	23ff      	movs	r3, #255	; 0xff
 800767c:	e004      	b.n	8007688 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800767e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007682:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007686:	781b      	ldrb	r3, [r3, #0]
}
 8007688:	4618      	mov	r0, r3
 800768a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b088      	sub	sp, #32
 8007696:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007698:	2300      	movs	r3, #0
 800769a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800769c:	f107 0308 	add.w	r3, r7, #8
 80076a0:	2218      	movs	r2, #24
 80076a2:	2100      	movs	r1, #0
 80076a4:	4618      	mov	r0, r3
 80076a6:	f000 f8a5 	bl	80077f4 <Osal_MemSet>
  rq.ogf = 0x03;
 80076aa:	2303      	movs	r3, #3
 80076ac:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80076ae:	2303      	movs	r3, #3
 80076b0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80076b2:	1dfb      	adds	r3, r7, #7
 80076b4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80076b6:	2301      	movs	r3, #1
 80076b8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80076ba:	f107 0308 	add.w	r3, r7, #8
 80076be:	2100      	movs	r1, #0
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 fb21 	bl	8007d08 <hci_send_req>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	da01      	bge.n	80076d0 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80076cc:	23ff      	movs	r3, #255	; 0xff
 80076ce:	e000      	b.n	80076d2 <hci_reset+0x40>
  return status;
 80076d0:	79fb      	ldrb	r3, [r7, #7]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3720      	adds	r7, #32
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80076da:	b590      	push	{r4, r7, lr}
 80076dc:	b0cd      	sub	sp, #308	; 0x134
 80076de:	af00      	add	r7, sp, #0
 80076e0:	4604      	mov	r4, r0
 80076e2:	4608      	mov	r0, r1
 80076e4:	4611      	mov	r1, r2
 80076e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ea:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80076ee:	4622      	mov	r2, r4
 80076f0:	701a      	strb	r2, [r3, #0]
 80076f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80076fa:	4602      	mov	r2, r0
 80076fc:	701a      	strb	r2, [r3, #0]
 80076fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007702:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007706:	460a      	mov	r2, r1
 8007708:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800770a:	f107 0310 	add.w	r3, r7, #16
 800770e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007712:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007716:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800771a:	2200      	movs	r2, #0
 800771c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800771e:	2300      	movs	r3, #0
 8007720:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8007724:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007728:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800772c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007730:	7812      	ldrb	r2, [r2, #0]
 8007732:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007734:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007738:	3301      	adds	r3, #1
 800773a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800773e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007742:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007746:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800774a:	7812      	ldrb	r2, [r2, #0]
 800774c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800774e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007752:	3301      	adds	r3, #1
 8007754:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8007758:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800775c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007760:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007764:	7812      	ldrb	r2, [r2, #0]
 8007766:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007768:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800776c:	3301      	adds	r3, #1
 800776e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007772:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007776:	2218      	movs	r2, #24
 8007778:	2100      	movs	r1, #0
 800777a:	4618      	mov	r0, r3
 800777c:	f000 f83a 	bl	80077f4 <Osal_MemSet>
  rq.ogf = 0x08;
 8007780:	2308      	movs	r3, #8
 8007782:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8007786:	2331      	movs	r3, #49	; 0x31
 8007788:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800778c:	f107 0310 	add.w	r3, r7, #16
 8007790:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007794:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007798:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800779c:	f107 030f 	add.w	r3, r7, #15
 80077a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80077a4:	2301      	movs	r3, #1
 80077a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80077aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80077ae:	2100      	movs	r1, #0
 80077b0:	4618      	mov	r0, r3
 80077b2:	f000 faa9 	bl	8007d08 <hci_send_req>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	da01      	bge.n	80077c0 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80077bc:	23ff      	movs	r3, #255	; 0xff
 80077be:	e004      	b.n	80077ca <hci_le_set_default_phy+0xf0>
  return status;
 80077c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077c4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80077c8:	781b      	ldrb	r3, [r3, #0]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd90      	pop	{r4, r7, pc}

080077d4 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	68b9      	ldr	r1, [r7, #8]
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f002 f9a5 	bl	8009b34 <memcpy>
 80077ea:	4603      	mov	r3, r0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	68b9      	ldr	r1, [r7, #8]
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f002 f9bd 	bl	8009b84 <memset>
 800780a:	4603      	mov	r3, r0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8007814:	b480      	push	{r7}
 8007816:	af00      	add	r7, sp, #0
  return;
 8007818:	bf00      	nop
}
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8007822:	b480      	push	{r7}
 8007824:	af00      	add	r7, sp, #0
  return;
 8007826:	bf00      	nop
}
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8007830:	b480      	push	{r7}
 8007832:	af00      	add	r7, sp, #0
  return;
 8007834:	bf00      	nop
}
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr

0800783e <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800783e:	b480      	push	{r7}
 8007840:	af00      	add	r7, sp, #0
  return;
 8007842:	bf00      	nop
}
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800784c:	b480      	push	{r7}
 800784e:	af00      	add	r7, sp, #0
  return;
 8007850:	bf00      	nop
}
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800785a:	b480      	push	{r7}
 800785c:	af00      	add	r7, sp, #0
  return;
 800785e:	bf00      	nop
}
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8007868:	b480      	push	{r7}
 800786a:	af00      	add	r7, sp, #0
  return;
 800786c:	bf00      	nop
}
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8007876:	b480      	push	{r7}
 8007878:	af00      	add	r7, sp, #0
  return;
 800787a:	bf00      	nop
}
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8007884:	b480      	push	{r7}
 8007886:	af00      	add	r7, sp, #0
  return;
 8007888:	bf00      	nop
}
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8007892:	b480      	push	{r7}
 8007894:	af00      	add	r7, sp, #0
  return;
 8007896:	bf00      	nop
}
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80078a0:	b480      	push	{r7}
 80078a2:	af00      	add	r7, sp, #0
  return;
 80078a4:	bf00      	nop
}
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80078ae:	b480      	push	{r7}
 80078b0:	af00      	add	r7, sp, #0
  return;
 80078b2:	bf00      	nop
}
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 80078bc:	b480      	push	{r7}
 80078be:	af00      	add	r7, sp, #0
  return;
 80078c0:	bf00      	nop
}
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr

080078ca <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 80078ca:	b480      	push	{r7}
 80078cc:	af00      	add	r7, sp, #0
  return;
 80078ce:	bf00      	nop
}
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80078d8:	b480      	push	{r7}
 80078da:	af00      	add	r7, sp, #0
  return;
 80078dc:	bf00      	nop
}
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80078e6:	b480      	push	{r7}
 80078e8:	af00      	add	r7, sp, #0
  return;
 80078ea:	bf00      	nop
}
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80078f4:	b480      	push	{r7}
 80078f6:	af00      	add	r7, sp, #0
  return;
 80078f8:	bf00      	nop
}
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
	...

08007904 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8007904:	b580      	push	{r7, lr}
 8007906:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007908:	4b04      	ldr	r3, [pc, #16]	; (800791c <SVCCTL_Init+0x18>)
 800790a:	2200      	movs	r2, #0
 800790c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800790e:	4b04      	ldr	r3, [pc, #16]	; (8007920 <SVCCTL_Init+0x1c>)
 8007910:	2200      	movs	r2, #0
 8007912:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8007914:	f000 f806 	bl	8007924 <SVCCTL_SvcInit>

  return;
 8007918:	bf00      	nop
}
 800791a:	bd80      	pop	{r7, pc}
 800791c:	20000140 	.word	0x20000140
 8007920:	20000160 	.word	0x20000160

08007924 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	af00      	add	r7, sp, #0
  BAS_Init();
 8007928:	f7ff ff74 	bl	8007814 <BAS_Init>

  BLS_Init();
 800792c:	f7ff ff79 	bl	8007822 <BLS_Init>

  CRS_STM_Init();
 8007930:	f7ff ff7e 	bl	8007830 <CRS_STM_Init>

  DIS_Init();
 8007934:	f7ff ff83 	bl	800783e <DIS_Init>

  EDS_STM_Init();
 8007938:	f7ff ff88 	bl	800784c <EDS_STM_Init>

  HIDS_Init();
 800793c:	f7ff ff8d 	bl	800785a <HIDS_Init>

  HRS_Init();
 8007940:	f7ff ff92 	bl	8007868 <HRS_Init>

  HTS_Init();
 8007944:	f7ff ff97 	bl	8007876 <HTS_Init>

  IAS_Init();
 8007948:	f7ff ff9c 	bl	8007884 <IAS_Init>

  LLS_Init();
 800794c:	f7ff ffa1 	bl	8007892 <LLS_Init>

  TPS_Init();
 8007950:	f7ff ffa6 	bl	80078a0 <TPS_Init>

  MOTENV_STM_Init();
 8007954:	f7ff ffab 	bl	80078ae <MOTENV_STM_Init>

  P2PS_STM_Init();
 8007958:	f7ff ffb0 	bl	80078bc <P2PS_STM_Init>

  ZDD_STM_Init();
 800795c:	f7ff ffb5 	bl	80078ca <ZDD_STM_Init>

  OTAS_STM_Init();
 8007960:	f7ff ffba 	bl	80078d8 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8007964:	f7ff ffc6 	bl	80078f4 <BVOPUS_STM_Init>

  MESH_Init();
 8007968:	f7ff ffbd 	bl	80078e6 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800796c:	f001 fb26 	bl	8008fbc <SVCCTL_InitCustomSvc>
  
  return;
 8007970:	bf00      	nop
}
 8007972:	bd80      	pop	{r7, pc}

08007974 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800797c:	4b09      	ldr	r3, [pc, #36]	; (80079a4 <SVCCTL_RegisterSvcHandler+0x30>)
 800797e:	7f1b      	ldrb	r3, [r3, #28]
 8007980:	4619      	mov	r1, r3
 8007982:	4a08      	ldr	r2, [pc, #32]	; (80079a4 <SVCCTL_RegisterSvcHandler+0x30>)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800798a:	4b06      	ldr	r3, [pc, #24]	; (80079a4 <SVCCTL_RegisterSvcHandler+0x30>)
 800798c:	7f1b      	ldrb	r3, [r3, #28]
 800798e:	3301      	adds	r3, #1
 8007990:	b2da      	uxtb	r2, r3
 8007992:	4b04      	ldr	r3, [pc, #16]	; (80079a4 <SVCCTL_RegisterSvcHandler+0x30>)
 8007994:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8007996:	bf00      	nop
}
 8007998:	370c      	adds	r7, #12
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	20000140 	.word	0x20000140

080079a8 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	3301      	adds	r3, #1
 80079b4:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80079b6:	2300      	movs	r3, #0
 80079b8:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	2bff      	cmp	r3, #255	; 0xff
 80079c0:	d125      	bne.n	8007a0e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	3302      	adds	r3, #2
 80079c6:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	881b      	ldrh	r3, [r3, #0]
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80079d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079d6:	d118      	bne.n	8007a0a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80079d8:	2300      	movs	r3, #0
 80079da:	757b      	strb	r3, [r7, #21]
 80079dc:	e00d      	b.n	80079fa <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80079de:	7d7b      	ldrb	r3, [r7, #21]
 80079e0:	4a1a      	ldr	r2, [pc, #104]	; (8007a4c <SVCCTL_UserEvtRx+0xa4>)
 80079e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	4798      	blx	r3
 80079ea:	4603      	mov	r3, r0
 80079ec:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80079ee:	7dfb      	ldrb	r3, [r7, #23]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d108      	bne.n	8007a06 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80079f4:	7d7b      	ldrb	r3, [r7, #21]
 80079f6:	3301      	adds	r3, #1
 80079f8:	757b      	strb	r3, [r7, #21]
 80079fa:	4b14      	ldr	r3, [pc, #80]	; (8007a4c <SVCCTL_UserEvtRx+0xa4>)
 80079fc:	7f1b      	ldrb	r3, [r3, #28]
 80079fe:	7d7a      	ldrb	r2, [r7, #21]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d3ec      	bcc.n	80079de <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8007a04:	e002      	b.n	8007a0c <SVCCTL_UserEvtRx+0x64>
              break;
 8007a06:	bf00      	nop
          break;
 8007a08:	e000      	b.n	8007a0c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8007a0a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8007a0c:	e000      	b.n	8007a10 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8007a0e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8007a10:	7dfb      	ldrb	r3, [r7, #23]
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d00f      	beq.n	8007a36 <SVCCTL_UserEvtRx+0x8e>
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	dc10      	bgt.n	8007a3c <SVCCTL_UserEvtRx+0x94>
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d002      	beq.n	8007a24 <SVCCTL_UserEvtRx+0x7c>
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d006      	beq.n	8007a30 <SVCCTL_UserEvtRx+0x88>
 8007a22:	e00b      	b.n	8007a3c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 ff79 	bl	800891c <SVCCTL_App_Notification>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	75bb      	strb	r3, [r7, #22]
      break;
 8007a2e:	e008      	b.n	8007a42 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007a30:	2301      	movs	r3, #1
 8007a32:	75bb      	strb	r3, [r7, #22]
      break;
 8007a34:	e005      	b.n	8007a42 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8007a36:	2300      	movs	r3, #0
 8007a38:	75bb      	strb	r3, [r7, #22]
      break;
 8007a3a:	e002      	b.n	8007a42 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	75bb      	strb	r3, [r7, #22]
      break;
 8007a40:	bf00      	nop
  }

  return (return_status);
 8007a42:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3718      	adds	r7, #24
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	20000140 	.word	0x20000140

08007a50 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b088      	sub	sp, #32
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007a58:	f107 030c 	add.w	r3, r7, #12
 8007a5c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	2125      	movs	r1, #37	; 0x25
 8007a68:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8007a6c:	f000 fae2 	bl	8008034 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	330b      	adds	r3, #11
 8007a74:	78db      	ldrb	r3, [r3, #3]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3720      	adds	r7, #32
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b088      	sub	sp, #32
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007a86:	f107 030c 	add.w	r3, r7, #12
 8007a8a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	210f      	movs	r1, #15
 8007a96:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8007a9a:	f000 facb 	bl	8008034 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	330b      	adds	r3, #11
 8007aa2:	78db      	ldrb	r3, [r3, #3]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3720      	adds	r7, #32
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b088      	sub	sp, #32
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007ab4:	f107 030c 	add.w	r3, r7, #12
 8007ab8:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	210e      	movs	r1, #14
 8007ac0:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8007ac4:	f000 fab6 	bl	8008034 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	330b      	adds	r3, #11
 8007acc:	78db      	ldrb	r3, [r3, #3]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3720      	adds	r7, #32
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
	...

08007ad8 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b08b      	sub	sp, #44	; 0x2c
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8007aec:	2300      	movs	r3, #0
 8007aee:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8007af0:	2300      	movs	r3, #0
 8007af2:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8007af4:	2300      	movs	r3, #0
 8007af6:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8007af8:	2300      	movs	r3, #0
 8007afa:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8007afc:	2300      	movs	r3, #0
 8007afe:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8007b00:	4b4a      	ldr	r3, [pc, #296]	; (8007c2c <SHCI_GetWirelessFwInfo+0x154>)
 8007b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b04:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007b08:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007b12:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a44      	ldr	r2, [pc, #272]	; (8007c30 <SHCI_GetWirelessFwInfo+0x158>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d10f      	bne.n	8007b44 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	69db      	ldr	r3, [r3, #28]
 8007b34:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	617b      	str	r3, [r7, #20]
 8007b42:	e01a      	b.n	8007b7a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007b4c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007b50:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	695b      	ldr	r3, [r3, #20]
 8007b60:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7c:	0e1b      	lsrs	r3, r3, #24
 8007b7e:	b2da      	uxtb	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b86:	0c1b      	lsrs	r3, r3, #16
 8007b88:	b2da      	uxtb	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	0a1b      	lsrs	r3, r3, #8
 8007b92:	b2da      	uxtb	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	091b      	lsrs	r3, r3, #4
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	f003 030f 	and.w	r3, r3, #15
 8007ba2:	b2da      	uxtb	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	f003 030f 	and.w	r3, r3, #15
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007bb6:	6a3b      	ldr	r3, [r7, #32]
 8007bb8:	0e1b      	lsrs	r3, r3, #24
 8007bba:	b2da      	uxtb	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007bc0:	6a3b      	ldr	r3, [r7, #32]
 8007bc2:	0c1b      	lsrs	r3, r3, #16
 8007bc4:	b2da      	uxtb	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8007bca:	6a3b      	ldr	r3, [r7, #32]
 8007bcc:	0a1b      	lsrs	r3, r3, #8
 8007bce:	b2da      	uxtb	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007bd4:	6a3b      	ldr	r3, [r7, #32]
 8007bd6:	b2da      	uxtb	r2, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	b2da      	uxtb	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	0e1b      	lsrs	r3, r3, #24
 8007be8:	b2da      	uxtb	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	0c1b      	lsrs	r3, r3, #16
 8007bf2:	b2da      	uxtb	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	0a1b      	lsrs	r3, r3, #8
 8007bfc:	b2da      	uxtb	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	0e1b      	lsrs	r3, r3, #24
 8007c06:	b2da      	uxtb	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	0c1b      	lsrs	r3, r3, #16
 8007c10:	b2da      	uxtb	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	372c      	adds	r7, #44	; 0x2c
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	58004000 	.word	0x58004000
 8007c30:	a94656b9 	.word	0xa94656b9

08007c34 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	4a08      	ldr	r2, [pc, #32]	; (8007c64 <hci_init+0x30>)
 8007c44:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8007c46:	4a08      	ldr	r2, [pc, #32]	; (8007c68 <hci_init+0x34>)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8007c4c:	4806      	ldr	r0, [pc, #24]	; (8007c68 <hci_init+0x34>)
 8007c4e:	f000 f973 	bl	8007f38 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 f8d4 	bl	8007e04 <TlInit>

  return;
 8007c5c:	bf00      	nop
}
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	200007b4 	.word	0x200007b4
 8007c68:	2000078c 	.word	0x2000078c

08007c6c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007c72:	4822      	ldr	r0, [pc, #136]	; (8007cfc <hci_user_evt_proc+0x90>)
 8007c74:	f000 fd28 	bl	80086c8 <LST_is_empty>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d12b      	bne.n	8007cd6 <hci_user_evt_proc+0x6a>
 8007c7e:	4b20      	ldr	r3, [pc, #128]	; (8007d00 <hci_user_evt_proc+0x94>)
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d027      	beq.n	8007cd6 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007c86:	f107 030c 	add.w	r3, r7, #12
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	481b      	ldr	r0, [pc, #108]	; (8007cfc <hci_user_evt_proc+0x90>)
 8007c8e:	f000 fdaa 	bl	80087e6 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8007c92:	4b1c      	ldr	r3, [pc, #112]	; (8007d04 <hci_user_evt_proc+0x98>)
 8007c94:	69db      	ldr	r3, [r3, #28]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00c      	beq.n	8007cb4 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007ca2:	4b18      	ldr	r3, [pc, #96]	; (8007d04 <hci_user_evt_proc+0x98>)
 8007ca4:	69db      	ldr	r3, [r3, #28]
 8007ca6:	1d3a      	adds	r2, r7, #4
 8007ca8:	4610      	mov	r0, r2
 8007caa:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8007cac:	793a      	ldrb	r2, [r7, #4]
 8007cae:	4b14      	ldr	r3, [pc, #80]	; (8007d00 <hci_user_evt_proc+0x94>)
 8007cb0:	701a      	strb	r2, [r3, #0]
 8007cb2:	e002      	b.n	8007cba <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007cb4:	4b12      	ldr	r3, [pc, #72]	; (8007d00 <hci_user_evt_proc+0x94>)
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8007cba:	4b11      	ldr	r3, [pc, #68]	; (8007d00 <hci_user_evt_proc+0x94>)
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d004      	beq.n	8007ccc <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f000 fc03 	bl	80084d0 <TL_MM_EvtDone>
 8007cca:	e004      	b.n	8007cd6 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	4619      	mov	r1, r3
 8007cd0:	480a      	ldr	r0, [pc, #40]	; (8007cfc <hci_user_evt_proc+0x90>)
 8007cd2:	f000 fd1b 	bl	800870c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007cd6:	4809      	ldr	r0, [pc, #36]	; (8007cfc <hci_user_evt_proc+0x90>)
 8007cd8:	f000 fcf6 	bl	80086c8 <LST_is_empty>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d107      	bne.n	8007cf2 <hci_user_evt_proc+0x86>
 8007ce2:	4b07      	ldr	r3, [pc, #28]	; (8007d00 <hci_user_evt_proc+0x94>)
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d003      	beq.n	8007cf2 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8007cea:	4804      	ldr	r0, [pc, #16]	; (8007cfc <hci_user_evt_proc+0x90>)
 8007cec:	f001 f814 	bl	8008d18 <hci_notify_asynch_evt>
  }


  return;
 8007cf0:	bf00      	nop
 8007cf2:	bf00      	nop
}
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	20000168 	.word	0x20000168
 8007d00:	20000174 	.word	0x20000174
 8007d04:	2000078c 	.word	0x2000078c

08007d08 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b088      	sub	sp, #32
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	460b      	mov	r3, r1
 8007d12:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8007d14:	2000      	movs	r0, #0
 8007d16:	f000 f8cb 	bl	8007eb0 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	885b      	ldrh	r3, [r3, #2]
 8007d22:	b21b      	sxth	r3, r3
 8007d24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d28:	b21a      	sxth	r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	881b      	ldrh	r3, [r3, #0]
 8007d2e:	029b      	lsls	r3, r3, #10
 8007d30:	b21b      	sxth	r3, r3
 8007d32:	4313      	orrs	r3, r2
 8007d34:	b21b      	sxth	r3, r3
 8007d36:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	b2d9      	uxtb	r1, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	689a      	ldr	r2, [r3, #8]
 8007d42:	8bbb      	ldrh	r3, [r7, #28]
 8007d44:	4618      	mov	r0, r3
 8007d46:	f000 f88d 	bl	8007e64 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8007d4a:	e04e      	b.n	8007dea <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8007d4c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007d50:	f000 fff9 	bl	8008d46 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007d54:	e043      	b.n	8007dde <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8007d56:	f107 030c 	add.w	r3, r7, #12
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4828      	ldr	r0, [pc, #160]	; (8007e00 <hci_send_req+0xf8>)
 8007d5e:	f000 fd42 	bl	80087e6 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	7a5b      	ldrb	r3, [r3, #9]
 8007d66:	2b0f      	cmp	r3, #15
 8007d68:	d114      	bne.n	8007d94 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	330b      	adds	r3, #11
 8007d6e:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	885b      	ldrh	r3, [r3, #2]
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	8bba      	ldrh	r2, [r7, #28]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d104      	bne.n	8007d86 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	7812      	ldrb	r2, [r2, #0]
 8007d84:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	785b      	ldrb	r3, [r3, #1]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d027      	beq.n	8007dde <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	77fb      	strb	r3, [r7, #31]
 8007d92:	e024      	b.n	8007dde <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	330b      	adds	r3, #11
 8007d98:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	8bba      	ldrh	r2, [r7, #28]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d114      	bne.n	8007dd2 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	7a9b      	ldrb	r3, [r3, #10]
 8007dac:	3b03      	subs	r3, #3
 8007dae:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	695a      	ldr	r2, [r3, #20]
 8007db4:	7dfb      	ldrb	r3, [r7, #23]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	bfa8      	it	ge
 8007dba:	461a      	movge	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6918      	ldr	r0, [r3, #16]
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	1cd9      	adds	r1, r3, #3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	695b      	ldr	r3, [r3, #20]
 8007dcc:	461a      	mov	r2, r3
 8007dce:	f001 feb1 	bl	8009b34 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d001      	beq.n	8007dde <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007dde:	4808      	ldr	r0, [pc, #32]	; (8007e00 <hci_send_req+0xf8>)
 8007de0:	f000 fc72 	bl	80086c8 <LST_is_empty>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d0b5      	beq.n	8007d56 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8007dea:	7ffb      	ldrb	r3, [r7, #31]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d0ad      	beq.n	8007d4c <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8007df0:	2001      	movs	r0, #1
 8007df2:	f000 f85d 	bl	8007eb0 <NotifyCmdStatus>

  return 0;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3720      	adds	r7, #32
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	200007ac 	.word	0x200007ac

08007e04 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8007e0c:	480f      	ldr	r0, [pc, #60]	; (8007e4c <TlInit+0x48>)
 8007e0e:	f000 fc4b 	bl	80086a8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8007e12:	4a0f      	ldr	r2, [pc, #60]	; (8007e50 <TlInit+0x4c>)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8007e18:	480e      	ldr	r0, [pc, #56]	; (8007e54 <TlInit+0x50>)
 8007e1a:	f000 fc45 	bl	80086a8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007e1e:	4b0e      	ldr	r3, [pc, #56]	; (8007e58 <TlInit+0x54>)
 8007e20:	2201      	movs	r2, #1
 8007e22:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8007e24:	4b0d      	ldr	r3, [pc, #52]	; (8007e5c <TlInit+0x58>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00a      	beq.n	8007e42 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8007e30:	4b0b      	ldr	r3, [pc, #44]	; (8007e60 <TlInit+0x5c>)
 8007e32:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8007e34:	4b09      	ldr	r3, [pc, #36]	; (8007e5c <TlInit+0x58>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f107 0208 	add.w	r2, r7, #8
 8007e3c:	4610      	mov	r0, r2
 8007e3e:	4798      	blx	r3
  }

  return;
 8007e40:	bf00      	nop
 8007e42:	bf00      	nop
}
 8007e44:	3718      	adds	r7, #24
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	200007ac 	.word	0x200007ac
 8007e50:	20000170 	.word	0x20000170
 8007e54:	20000168 	.word	0x20000168
 8007e58:	20000174 	.word	0x20000174
 8007e5c:	2000078c 	.word	0x2000078c
 8007e60:	08007ef1 	.word	0x08007ef1

08007e64 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	603a      	str	r2, [r7, #0]
 8007e6e:	80fb      	strh	r3, [r7, #6]
 8007e70:	460b      	mov	r3, r1
 8007e72:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8007e74:	4b0c      	ldr	r3, [pc, #48]	; (8007ea8 <SendCmd+0x44>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	88fa      	ldrh	r2, [r7, #6]
 8007e7a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8007e7e:	4b0a      	ldr	r3, [pc, #40]	; (8007ea8 <SendCmd+0x44>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	797a      	ldrb	r2, [r7, #5]
 8007e84:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8007e86:	4b08      	ldr	r3, [pc, #32]	; (8007ea8 <SendCmd+0x44>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	330c      	adds	r3, #12
 8007e8c:	797a      	ldrb	r2, [r7, #5]
 8007e8e:	6839      	ldr	r1, [r7, #0]
 8007e90:	4618      	mov	r0, r3
 8007e92:	f001 fe4f 	bl	8009b34 <memcpy>

  hciContext.io.Send(0,0);
 8007e96:	4b05      	ldr	r3, [pc, #20]	; (8007eac <SendCmd+0x48>)
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	4798      	blx	r3

  return;
 8007ea0:	bf00      	nop
}
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	20000170 	.word	0x20000170
 8007eac:	2000078c 	.word	0x2000078c

08007eb0 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8007eba:	79fb      	ldrb	r3, [r7, #7]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d108      	bne.n	8007ed2 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8007ec0:	4b0a      	ldr	r3, [pc, #40]	; (8007eec <NotifyCmdStatus+0x3c>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00d      	beq.n	8007ee4 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8007ec8:	4b08      	ldr	r3, [pc, #32]	; (8007eec <NotifyCmdStatus+0x3c>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2000      	movs	r0, #0
 8007ece:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8007ed0:	e008      	b.n	8007ee4 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8007ed2:	4b06      	ldr	r3, [pc, #24]	; (8007eec <NotifyCmdStatus+0x3c>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d004      	beq.n	8007ee4 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8007eda:	4b04      	ldr	r3, [pc, #16]	; (8007eec <NotifyCmdStatus+0x3c>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2001      	movs	r0, #1
 8007ee0:	4798      	blx	r3
  return;
 8007ee2:	bf00      	nop
 8007ee4:	bf00      	nop
}
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	200007b4 	.word	0x200007b4

08007ef0 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	7a5b      	ldrb	r3, [r3, #9]
 8007efc:	2b0f      	cmp	r3, #15
 8007efe:	d003      	beq.n	8007f08 <TlEvtReceived+0x18>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	7a5b      	ldrb	r3, [r3, #9]
 8007f04:	2b0e      	cmp	r3, #14
 8007f06:	d107      	bne.n	8007f18 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8007f08:	6879      	ldr	r1, [r7, #4]
 8007f0a:	4809      	ldr	r0, [pc, #36]	; (8007f30 <TlEvtReceived+0x40>)
 8007f0c:	f000 fc24 	bl	8008758 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8007f10:	2000      	movs	r0, #0
 8007f12:	f000 ff0d 	bl	8008d30 <hci_cmd_resp_release>
 8007f16:	e006      	b.n	8007f26 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8007f18:	6879      	ldr	r1, [r7, #4]
 8007f1a:	4806      	ldr	r0, [pc, #24]	; (8007f34 <TlEvtReceived+0x44>)
 8007f1c:	f000 fc1c 	bl	8008758 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007f20:	4804      	ldr	r0, [pc, #16]	; (8007f34 <TlEvtReceived+0x44>)
 8007f22:	f000 fef9 	bl	8008d18 <hci_notify_asynch_evt>
  }

  return;
 8007f26:	bf00      	nop
}
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	200007ac 	.word	0x200007ac
 8007f34:	20000168 	.word	0x20000168

08007f38 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a05      	ldr	r2, [pc, #20]	; (8007f58 <hci_register_io_bus+0x20>)
 8007f44:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a04      	ldr	r2, [pc, #16]	; (8007f5c <hci_register_io_bus+0x24>)
 8007f4a:	611a      	str	r2, [r3, #16]

  return;
 8007f4c:	bf00      	nop
}
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr
 8007f58:	08008249 	.word	0x08008249
 8007f5c:	080082b1 	.word	0x080082b1

08007f60 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	4a08      	ldr	r2, [pc, #32]	; (8007f90 <shci_init+0x30>)
 8007f70:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8007f72:	4a08      	ldr	r2, [pc, #32]	; (8007f94 <shci_init+0x34>)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8007f78:	4806      	ldr	r0, [pc, #24]	; (8007f94 <shci_init+0x34>)
 8007f7a:	f000 f911 	bl	80081a0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4618      	mov	r0, r3
 8007f84:	f000 f894 	bl	80080b0 <TlInit>

  return;
 8007f88:	bf00      	nop
}
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	200007d8 	.word	0x200007d8
 8007f94:	200007b8 	.word	0x200007b8

08007f98 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007f9e:	4822      	ldr	r0, [pc, #136]	; (8008028 <shci_user_evt_proc+0x90>)
 8007fa0:	f000 fb92 	bl	80086c8 <LST_is_empty>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d12b      	bne.n	8008002 <shci_user_evt_proc+0x6a>
 8007faa:	4b20      	ldr	r3, [pc, #128]	; (800802c <shci_user_evt_proc+0x94>)
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d027      	beq.n	8008002 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007fb2:	f107 030c 	add.w	r3, r7, #12
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	481b      	ldr	r0, [pc, #108]	; (8008028 <shci_user_evt_proc+0x90>)
 8007fba:	f000 fc14 	bl	80087e6 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8007fbe:	4b1c      	ldr	r3, [pc, #112]	; (8008030 <shci_user_evt_proc+0x98>)
 8007fc0:	69db      	ldr	r3, [r3, #28]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00c      	beq.n	8007fe0 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007fce:	4b18      	ldr	r3, [pc, #96]	; (8008030 <shci_user_evt_proc+0x98>)
 8007fd0:	69db      	ldr	r3, [r3, #28]
 8007fd2:	1d3a      	adds	r2, r7, #4
 8007fd4:	4610      	mov	r0, r2
 8007fd6:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8007fd8:	793a      	ldrb	r2, [r7, #4]
 8007fda:	4b14      	ldr	r3, [pc, #80]	; (800802c <shci_user_evt_proc+0x94>)
 8007fdc:	701a      	strb	r2, [r3, #0]
 8007fde:	e002      	b.n	8007fe6 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007fe0:	4b12      	ldr	r3, [pc, #72]	; (800802c <shci_user_evt_proc+0x94>)
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8007fe6:	4b11      	ldr	r3, [pc, #68]	; (800802c <shci_user_evt_proc+0x94>)
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d004      	beq.n	8007ff8 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f000 fa6d 	bl	80084d0 <TL_MM_EvtDone>
 8007ff6:	e004      	b.n	8008002 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	480a      	ldr	r0, [pc, #40]	; (8008028 <shci_user_evt_proc+0x90>)
 8007ffe:	f000 fb85 	bl	800870c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008002:	4809      	ldr	r0, [pc, #36]	; (8008028 <shci_user_evt_proc+0x90>)
 8008004:	f000 fb60 	bl	80086c8 <LST_is_empty>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d107      	bne.n	800801e <shci_user_evt_proc+0x86>
 800800e:	4b07      	ldr	r3, [pc, #28]	; (800802c <shci_user_evt_proc+0x94>)
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d003      	beq.n	800801e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8008016:	4804      	ldr	r0, [pc, #16]	; (8008028 <shci_user_evt_proc+0x90>)
 8008018:	f7f8 feee 	bl	8000df8 <shci_notify_asynch_evt>
  }


  return;
 800801c:	bf00      	nop
 800801e:	bf00      	nop
}
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	20000180 	.word	0x20000180
 800802c:	20000190 	.word	0x20000190
 8008030:	200007b8 	.word	0x200007b8

08008034 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	60ba      	str	r2, [r7, #8]
 800803c:	607b      	str	r3, [r7, #4]
 800803e:	4603      	mov	r3, r0
 8008040:	81fb      	strh	r3, [r7, #14]
 8008042:	460b      	mov	r3, r1
 8008044:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8008046:	2000      	movs	r0, #0
 8008048:	f000 f864 	bl	8008114 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800804c:	4b16      	ldr	r3, [pc, #88]	; (80080a8 <shci_send+0x74>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	89fa      	ldrh	r2, [r7, #14]
 8008052:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8008056:	4b14      	ldr	r3, [pc, #80]	; (80080a8 <shci_send+0x74>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	7b7a      	ldrb	r2, [r7, #13]
 800805c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800805e:	4b12      	ldr	r3, [pc, #72]	; (80080a8 <shci_send+0x74>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	330c      	adds	r3, #12
 8008064:	7b7a      	ldrb	r2, [r7, #13]
 8008066:	68b9      	ldr	r1, [r7, #8]
 8008068:	4618      	mov	r0, r3
 800806a:	f001 fd63 	bl	8009b34 <memcpy>

  shciContext.io.Send(0,0);
 800806e:	4b0f      	ldr	r3, [pc, #60]	; (80080ac <shci_send+0x78>)
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	2100      	movs	r1, #0
 8008074:	2000      	movs	r0, #0
 8008076:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8008078:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800807c:	f7f8 fed3 	bl	8000e26 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f103 0008 	add.w	r0, r3, #8
 8008086:	4b08      	ldr	r3, [pc, #32]	; (80080a8 <shci_send+0x74>)
 8008088:	6819      	ldr	r1, [r3, #0]
 800808a:	4b07      	ldr	r3, [pc, #28]	; (80080a8 <shci_send+0x74>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	789b      	ldrb	r3, [r3, #2]
 8008090:	3303      	adds	r3, #3
 8008092:	461a      	mov	r2, r3
 8008094:	f001 fd4e 	bl	8009b34 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008098:	2001      	movs	r0, #1
 800809a:	f000 f83b 	bl	8008114 <Cmd_SetStatus>

  return;
 800809e:	bf00      	nop
}
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	2000018c 	.word	0x2000018c
 80080ac:	200007b8 	.word	0x200007b8

080080b0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b086      	sub	sp, #24
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80080b8:	4a10      	ldr	r2, [pc, #64]	; (80080fc <TlInit+0x4c>)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80080be:	4810      	ldr	r0, [pc, #64]	; (8008100 <TlInit+0x50>)
 80080c0:	f000 faf2 	bl	80086a8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80080c4:	2001      	movs	r0, #1
 80080c6:	f000 f825 	bl	8008114 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80080ca:	4b0e      	ldr	r3, [pc, #56]	; (8008104 <TlInit+0x54>)
 80080cc:	2201      	movs	r2, #1
 80080ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80080d0:	4b0d      	ldr	r3, [pc, #52]	; (8008108 <TlInit+0x58>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00c      	beq.n	80080f2 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80080dc:	4b0b      	ldr	r3, [pc, #44]	; (800810c <TlInit+0x5c>)
 80080de:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80080e0:	4b0b      	ldr	r3, [pc, #44]	; (8008110 <TlInit+0x60>)
 80080e2:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80080e4:	4b08      	ldr	r3, [pc, #32]	; (8008108 <TlInit+0x58>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f107 020c 	add.w	r2, r7, #12
 80080ec:	4610      	mov	r0, r2
 80080ee:	4798      	blx	r3
  }

  return;
 80080f0:	bf00      	nop
 80080f2:	bf00      	nop
}
 80080f4:	3718      	adds	r7, #24
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	2000018c 	.word	0x2000018c
 8008100:	20000180 	.word	0x20000180
 8008104:	20000190 	.word	0x20000190
 8008108:	200007b8 	.word	0x200007b8
 800810c:	08008165 	.word	0x08008165
 8008110:	0800817d 	.word	0x0800817d

08008114 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	4603      	mov	r3, r0
 800811c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800811e:	79fb      	ldrb	r3, [r7, #7]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10b      	bne.n	800813c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8008124:	4b0d      	ldr	r3, [pc, #52]	; (800815c <Cmd_SetStatus+0x48>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d003      	beq.n	8008134 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800812c:	4b0b      	ldr	r3, [pc, #44]	; (800815c <Cmd_SetStatus+0x48>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2000      	movs	r0, #0
 8008132:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8008134:	4b0a      	ldr	r3, [pc, #40]	; (8008160 <Cmd_SetStatus+0x4c>)
 8008136:	2200      	movs	r2, #0
 8008138:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800813a:	e00b      	b.n	8008154 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800813c:	4b08      	ldr	r3, [pc, #32]	; (8008160 <Cmd_SetStatus+0x4c>)
 800813e:	2201      	movs	r2, #1
 8008140:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8008142:	4b06      	ldr	r3, [pc, #24]	; (800815c <Cmd_SetStatus+0x48>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d004      	beq.n	8008154 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800814a:	4b04      	ldr	r3, [pc, #16]	; (800815c <Cmd_SetStatus+0x48>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2001      	movs	r0, #1
 8008150:	4798      	blx	r3
  return;
 8008152:	bf00      	nop
 8008154:	bf00      	nop
}
 8008156:	3708      	adds	r7, #8
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	200007d8 	.word	0x200007d8
 8008160:	20000188 	.word	0x20000188

08008164 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800816c:	2000      	movs	r0, #0
 800816e:	f7f8 fe4f 	bl	8000e10 <shci_cmd_resp_release>

  return;
 8008172:	bf00      	nop
}
 8008174:	3708      	adds	r7, #8
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
	...

0800817c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8008184:	6879      	ldr	r1, [r7, #4]
 8008186:	4805      	ldr	r0, [pc, #20]	; (800819c <TlUserEvtReceived+0x20>)
 8008188:	f000 fae6 	bl	8008758 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800818c:	4803      	ldr	r0, [pc, #12]	; (800819c <TlUserEvtReceived+0x20>)
 800818e:	f7f8 fe33 	bl	8000df8 <shci_notify_asynch_evt>

  return;
 8008192:	bf00      	nop
}
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	20000180 	.word	0x20000180

080081a0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a05      	ldr	r2, [pc, #20]	; (80081c0 <shci_register_io_bus+0x20>)
 80081ac:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a04      	ldr	r2, [pc, #16]	; (80081c4 <shci_register_io_bus+0x24>)
 80081b2:	611a      	str	r2, [r3, #16]

  return;
 80081b4:	bf00      	nop
}
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr
 80081c0:	0800835d 	.word	0x0800835d
 80081c4:	080083b1 	.word	0x080083b1

080081c8 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80081cc:	f001 f946 	bl	800945c <HW_IPCC_Enable>

  return;
 80081d0:	bf00      	nop
}
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <TL_Init>:


void TL_Init( void )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80081d8:	4b10      	ldr	r3, [pc, #64]	; (800821c <TL_Init+0x48>)
 80081da:	4a11      	ldr	r2, [pc, #68]	; (8008220 <TL_Init+0x4c>)
 80081dc:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80081de:	4b0f      	ldr	r3, [pc, #60]	; (800821c <TL_Init+0x48>)
 80081e0:	4a10      	ldr	r2, [pc, #64]	; (8008224 <TL_Init+0x50>)
 80081e2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80081e4:	4b0d      	ldr	r3, [pc, #52]	; (800821c <TL_Init+0x48>)
 80081e6:	4a10      	ldr	r2, [pc, #64]	; (8008228 <TL_Init+0x54>)
 80081e8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80081ea:	4b0c      	ldr	r3, [pc, #48]	; (800821c <TL_Init+0x48>)
 80081ec:	4a0f      	ldr	r2, [pc, #60]	; (800822c <TL_Init+0x58>)
 80081ee:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80081f0:	4b0a      	ldr	r3, [pc, #40]	; (800821c <TL_Init+0x48>)
 80081f2:	4a0f      	ldr	r2, [pc, #60]	; (8008230 <TL_Init+0x5c>)
 80081f4:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80081f6:	4b09      	ldr	r3, [pc, #36]	; (800821c <TL_Init+0x48>)
 80081f8:	4a0e      	ldr	r2, [pc, #56]	; (8008234 <TL_Init+0x60>)
 80081fa:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80081fc:	4b07      	ldr	r3, [pc, #28]	; (800821c <TL_Init+0x48>)
 80081fe:	4a0e      	ldr	r2, [pc, #56]	; (8008238 <TL_Init+0x64>)
 8008200:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8008202:	4b06      	ldr	r3, [pc, #24]	; (800821c <TL_Init+0x48>)
 8008204:	4a0d      	ldr	r2, [pc, #52]	; (800823c <TL_Init+0x68>)
 8008206:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8008208:	4b04      	ldr	r3, [pc, #16]	; (800821c <TL_Init+0x48>)
 800820a:	4a0d      	ldr	r2, [pc, #52]	; (8008240 <TL_Init+0x6c>)
 800820c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800820e:	4b03      	ldr	r3, [pc, #12]	; (800821c <TL_Init+0x48>)
 8008210:	4a0c      	ldr	r2, [pc, #48]	; (8008244 <TL_Init+0x70>)
 8008212:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8008214:	f001 f936 	bl	8009484 <HW_IPCC_Init>

  return;
 8008218:	bf00      	nop
}
 800821a:	bd80      	pop	{r7, pc}
 800821c:	20030000 	.word	0x20030000
 8008220:	20030028 	.word	0x20030028
 8008224:	20030048 	.word	0x20030048
 8008228:	20030058 	.word	0x20030058
 800822c:	20030064 	.word	0x20030064
 8008230:	2003006c 	.word	0x2003006c
 8008234:	20030074 	.word	0x20030074
 8008238:	2003007c 	.word	0x2003007c
 800823c:	20030098 	.word	0x20030098
 8008240:	2003009c 	.word	0x2003009c
 8008244:	200300a8 	.word	0x200300a8

08008248 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8008254:	4811      	ldr	r0, [pc, #68]	; (800829c <TL_BLE_Init+0x54>)
 8008256:	f000 fa27 	bl	80086a8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800825a:	4b11      	ldr	r3, [pc, #68]	; (80082a0 <TL_BLE_Init+0x58>)
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	689a      	ldr	r2, [r3, #8]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	68da      	ldr	r2, [r3, #12]
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	4a0c      	ldr	r2, [pc, #48]	; (80082a4 <TL_BLE_Init+0x5c>)
 8008274:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	4a08      	ldr	r2, [pc, #32]	; (800829c <TL_BLE_Init+0x54>)
 800827a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800827c:	f001 f918 	bl	80094b0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a08      	ldr	r2, [pc, #32]	; (80082a8 <TL_BLE_Init+0x60>)
 8008286:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	4a07      	ldr	r2, [pc, #28]	; (80082ac <TL_BLE_Init+0x64>)
 800828e:	6013      	str	r3, [r2, #0]

  return 0;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	200300c4 	.word	0x200300c4
 80082a0:	20030000 	.word	0x20030000
 80082a4:	20030a48 	.word	0x20030a48
 80082a8:	200007e4 	.word	0x200007e4
 80082ac:	200007e8 	.word	0x200007e8

080082b0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	460b      	mov	r3, r1
 80082ba:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80082bc:	4b09      	ldr	r3, [pc, #36]	; (80082e4 <TL_BLE_SendCmd+0x34>)
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2201      	movs	r2, #1
 80082c4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80082c6:	4b07      	ldr	r3, [pc, #28]	; (80082e4 <TL_BLE_SendCmd+0x34>)
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4619      	mov	r1, r3
 80082ce:	2001      	movs	r0, #1
 80082d0:	f000 f96c 	bl	80085ac <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80082d4:	f001 f8f6 	bl	80094c4 <HW_IPCC_BLE_SendCmd>

  return 0;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3708      	adds	r7, #8
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	20030000 	.word	0x20030000

080082e8 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80082ee:	e01c      	b.n	800832a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80082f0:	1d3b      	adds	r3, r7, #4
 80082f2:	4619      	mov	r1, r3
 80082f4:	4812      	ldr	r0, [pc, #72]	; (8008340 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80082f6:	f000 fa76 	bl	80087e6 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	7a5b      	ldrb	r3, [r3, #9]
 80082fe:	2b0f      	cmp	r3, #15
 8008300:	d003      	beq.n	800830a <HW_IPCC_BLE_RxEvtNot+0x22>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	7a5b      	ldrb	r3, [r3, #9]
 8008306:	2b0e      	cmp	r3, #14
 8008308:	d105      	bne.n	8008316 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4619      	mov	r1, r3
 800830e:	2002      	movs	r0, #2
 8008310:	f000 f94c 	bl	80085ac <OutputDbgTrace>
 8008314:	e004      	b.n	8008320 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4619      	mov	r1, r3
 800831a:	2003      	movs	r0, #3
 800831c:	f000 f946 	bl	80085ac <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8008320:	4b08      	ldr	r3, [pc, #32]	; (8008344 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	4610      	mov	r0, r2
 8008328:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800832a:	4805      	ldr	r0, [pc, #20]	; (8008340 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800832c:	f000 f9cc 	bl	80086c8 <LST_is_empty>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d0dc      	beq.n	80082f0 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8008336:	bf00      	nop
}
 8008338:	3708      	adds	r7, #8
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	200300c4 	.word	0x200300c4
 8008344:	200007e4 	.word	0x200007e4

08008348 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800834c:	4b02      	ldr	r3, [pc, #8]	; (8008358 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4798      	blx	r3

  return;
 8008352:	bf00      	nop
}
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	200007e8 	.word	0x200007e8

0800835c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008368:	480d      	ldr	r0, [pc, #52]	; (80083a0 <TL_SYS_Init+0x44>)
 800836a:	f000 f99d 	bl	80086a8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800836e:	4b0d      	ldr	r3, [pc, #52]	; (80083a4 <TL_SYS_Init+0x48>)
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	689a      	ldr	r2, [r3, #8]
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	4a08      	ldr	r2, [pc, #32]	; (80083a0 <TL_SYS_Init+0x44>)
 8008380:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8008382:	f001 f8c1 	bl	8009508 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a07      	ldr	r2, [pc, #28]	; (80083a8 <TL_SYS_Init+0x4c>)
 800838c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	4a06      	ldr	r2, [pc, #24]	; (80083ac <TL_SYS_Init+0x50>)
 8008394:	6013      	str	r3, [r2, #0]

  return 0;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	200300cc 	.word	0x200300cc
 80083a4:	20030000 	.word	0x20030000
 80083a8:	200007ec 	.word	0x200007ec
 80083ac:	200007f0 	.word	0x200007f0

080083b0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	460b      	mov	r3, r1
 80083ba:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80083bc:	4b09      	ldr	r3, [pc, #36]	; (80083e4 <TL_SYS_SendCmd+0x34>)
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2210      	movs	r2, #16
 80083c4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80083c6:	4b07      	ldr	r3, [pc, #28]	; (80083e4 <TL_SYS_SendCmd+0x34>)
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4619      	mov	r1, r3
 80083ce:	2004      	movs	r0, #4
 80083d0:	f000 f8ec 	bl	80085ac <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80083d4:	f001 f8a2 	bl	800951c <HW_IPCC_SYS_SendCmd>

  return 0;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3708      	adds	r7, #8
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	20030000 	.word	0x20030000

080083e8 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80083ec:	4b07      	ldr	r3, [pc, #28]	; (800840c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4619      	mov	r1, r3
 80083f4:	2005      	movs	r0, #5
 80083f6:	f000 f8d9 	bl	80085ac <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80083fa:	4b05      	ldr	r3, [pc, #20]	; (8008410 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a03      	ldr	r2, [pc, #12]	; (800840c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008400:	68d2      	ldr	r2, [r2, #12]
 8008402:	6812      	ldr	r2, [r2, #0]
 8008404:	4610      	mov	r0, r2
 8008406:	4798      	blx	r3

  return;
 8008408:	bf00      	nop
}
 800840a:	bd80      	pop	{r7, pc}
 800840c:	20030000 	.word	0x20030000
 8008410:	200007ec 	.word	0x200007ec

08008414 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800841a:	e00e      	b.n	800843a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800841c:	1d3b      	adds	r3, r7, #4
 800841e:	4619      	mov	r1, r3
 8008420:	480b      	ldr	r0, [pc, #44]	; (8008450 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008422:	f000 f9e0 	bl	80087e6 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4619      	mov	r1, r3
 800842a:	2006      	movs	r0, #6
 800842c:	f000 f8be 	bl	80085ac <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008430:	4b08      	ldr	r3, [pc, #32]	; (8008454 <HW_IPCC_SYS_EvtNot+0x40>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	4610      	mov	r0, r2
 8008438:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800843a:	4805      	ldr	r0, [pc, #20]	; (8008450 <HW_IPCC_SYS_EvtNot+0x3c>)
 800843c:	f000 f944 	bl	80086c8 <LST_is_empty>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d0ea      	beq.n	800841c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8008446:	bf00      	nop
}
 8008448:	3708      	adds	r7, #8
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	200300cc 	.word	0x200300cc
 8008454:	200007f0 	.word	0x200007f0

08008458 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008460:	4817      	ldr	r0, [pc, #92]	; (80084c0 <TL_MM_Init+0x68>)
 8008462:	f000 f921 	bl	80086a8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8008466:	4817      	ldr	r0, [pc, #92]	; (80084c4 <TL_MM_Init+0x6c>)
 8008468:	f000 f91e 	bl	80086a8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800846c:	4b16      	ldr	r3, [pc, #88]	; (80084c8 <TL_MM_Init+0x70>)
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	4a16      	ldr	r2, [pc, #88]	; (80084cc <TL_MM_Init+0x74>)
 8008472:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8008474:	4b15      	ldr	r3, [pc, #84]	; (80084cc <TL_MM_Init+0x74>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	6892      	ldr	r2, [r2, #8]
 800847c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800847e:	4b13      	ldr	r3, [pc, #76]	; (80084cc <TL_MM_Init+0x74>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	68d2      	ldr	r2, [r2, #12]
 8008486:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8008488:	4b10      	ldr	r3, [pc, #64]	; (80084cc <TL_MM_Init+0x74>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a0c      	ldr	r2, [pc, #48]	; (80084c0 <TL_MM_Init+0x68>)
 800848e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008490:	4b0e      	ldr	r3, [pc, #56]	; (80084cc <TL_MM_Init+0x74>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	6812      	ldr	r2, [r2, #0]
 8008498:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800849a:	4b0c      	ldr	r3, [pc, #48]	; (80084cc <TL_MM_Init+0x74>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	6852      	ldr	r2, [r2, #4]
 80084a2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80084a4:	4b09      	ldr	r3, [pc, #36]	; (80084cc <TL_MM_Init+0x74>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	6912      	ldr	r2, [r2, #16]
 80084ac:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80084ae:	4b07      	ldr	r3, [pc, #28]	; (80084cc <TL_MM_Init+0x74>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	6952      	ldr	r2, [r2, #20]
 80084b6:	619a      	str	r2, [r3, #24]

  return;
 80084b8:	bf00      	nop
}
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	200300b4 	.word	0x200300b4
 80084c4:	200007dc 	.word	0x200007dc
 80084c8:	20030000 	.word	0x20030000
 80084cc:	200007f4 	.word	0x200007f4

080084d0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80084d8:	6879      	ldr	r1, [r7, #4]
 80084da:	4807      	ldr	r0, [pc, #28]	; (80084f8 <TL_MM_EvtDone+0x28>)
 80084dc:	f000 f93c 	bl	8008758 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80084e0:	6879      	ldr	r1, [r7, #4]
 80084e2:	2000      	movs	r0, #0
 80084e4:	f000 f862 	bl	80085ac <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80084e8:	4804      	ldr	r0, [pc, #16]	; (80084fc <TL_MM_EvtDone+0x2c>)
 80084ea:	f001 f83d 	bl	8009568 <HW_IPCC_MM_SendFreeBuf>

  return;
 80084ee:	bf00      	nop
}
 80084f0:	3708      	adds	r7, #8
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	200007dc 	.word	0x200007dc
 80084fc:	08008501 	.word	0x08008501

08008500 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008506:	e00c      	b.n	8008522 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008508:	1d3b      	adds	r3, r7, #4
 800850a:	4619      	mov	r1, r3
 800850c:	480a      	ldr	r0, [pc, #40]	; (8008538 <SendFreeBuf+0x38>)
 800850e:	f000 f96a 	bl	80087e6 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8008512:	4b0a      	ldr	r3, [pc, #40]	; (800853c <SendFreeBuf+0x3c>)
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	4611      	mov	r1, r2
 800851c:	4618      	mov	r0, r3
 800851e:	f000 f91b 	bl	8008758 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008522:	4805      	ldr	r0, [pc, #20]	; (8008538 <SendFreeBuf+0x38>)
 8008524:	f000 f8d0 	bl	80086c8 <LST_is_empty>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d0ec      	beq.n	8008508 <SendFreeBuf+0x8>
  }

  return;
 800852e:	bf00      	nop
}
 8008530:	3708      	adds	r7, #8
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	200007dc 	.word	0x200007dc
 800853c:	20030000 	.word	0x20030000

08008540 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8008540:	b580      	push	{r7, lr}
 8008542:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8008544:	4805      	ldr	r0, [pc, #20]	; (800855c <TL_TRACES_Init+0x1c>)
 8008546:	f000 f8af 	bl	80086a8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800854a:	4b05      	ldr	r3, [pc, #20]	; (8008560 <TL_TRACES_Init+0x20>)
 800854c:	695b      	ldr	r3, [r3, #20]
 800854e:	4a03      	ldr	r2, [pc, #12]	; (800855c <TL_TRACES_Init+0x1c>)
 8008550:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8008552:	f001 f83f 	bl	80095d4 <HW_IPCC_TRACES_Init>

  return;
 8008556:	bf00      	nop
}
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	200300bc 	.word	0x200300bc
 8008560:	20030000 	.word	0x20030000

08008564 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800856a:	e008      	b.n	800857e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800856c:	1d3b      	adds	r3, r7, #4
 800856e:	4619      	mov	r1, r3
 8008570:	4808      	ldr	r0, [pc, #32]	; (8008594 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008572:	f000 f938 	bl	80087e6 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4618      	mov	r0, r3
 800857a:	f000 f80d 	bl	8008598 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800857e:	4805      	ldr	r0, [pc, #20]	; (8008594 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008580:	f000 f8a2 	bl	80086c8 <LST_is_empty>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d0f0      	beq.n	800856c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800858a:	bf00      	nop
}
 800858c:	3708      	adds	r7, #8
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	200300bc 	.word	0x200300bc

08008598 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80085a0:	bf00      	nop
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	4603      	mov	r3, r0
 80085b4:	6039      	str	r1, [r7, #0]
 80085b6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80085b8:	79fb      	ldrb	r3, [r7, #7]
 80085ba:	2b06      	cmp	r3, #6
 80085bc:	d845      	bhi.n	800864a <OutputDbgTrace+0x9e>
 80085be:	a201      	add	r2, pc, #4	; (adr r2, 80085c4 <OutputDbgTrace+0x18>)
 80085c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c4:	080085e1 	.word	0x080085e1
 80085c8:	08008605 	.word	0x08008605
 80085cc:	0800860b 	.word	0x0800860b
 80085d0:	0800861f 	.word	0x0800861f
 80085d4:	0800862b 	.word	0x0800862b
 80085d8:	08008631 	.word	0x08008631
 80085dc:	0800863f 	.word	0x0800863f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	7a5b      	ldrb	r3, [r3, #9]
 80085e8:	2bff      	cmp	r3, #255	; 0xff
 80085ea:	d005      	beq.n	80085f8 <OutputDbgTrace+0x4c>
 80085ec:	2bff      	cmp	r3, #255	; 0xff
 80085ee:	dc05      	bgt.n	80085fc <OutputDbgTrace+0x50>
 80085f0:	2b0e      	cmp	r3, #14
 80085f2:	d005      	beq.n	8008600 <OutputDbgTrace+0x54>
 80085f4:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80085f6:	e001      	b.n	80085fc <OutputDbgTrace+0x50>
          break;
 80085f8:	bf00      	nop
 80085fa:	e027      	b.n	800864c <OutputDbgTrace+0xa0>
          break;
 80085fc:	bf00      	nop
 80085fe:	e025      	b.n	800864c <OutputDbgTrace+0xa0>
          break;
 8008600:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8008602:	e023      	b.n	800864c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008608:	e020      	b.n	800864c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	7a5b      	ldrb	r3, [r3, #9]
 8008612:	2b0e      	cmp	r3, #14
 8008614:	d001      	beq.n	800861a <OutputDbgTrace+0x6e>
 8008616:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008618:	e000      	b.n	800861c <OutputDbgTrace+0x70>
          break;
 800861a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800861c:	e016      	b.n	800864c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	7a5b      	ldrb	r3, [r3, #9]
 8008626:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008628:	e010      	b.n	800864c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800862e:	e00d      	b.n	800864c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	7a5b      	ldrb	r3, [r3, #9]
 8008638:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800863a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800863c:	e006      	b.n	800864c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	7a5b      	ldrb	r3, [r3, #9]
 8008646:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008648:	e000      	b.n	800864c <OutputDbgTrace+0xa0>

    default:
      break;
 800864a:	bf00      	nop
  }

  return;
 800864c:	bf00      	nop
}
 800864e:	3714      	adds	r7, #20
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	4603      	mov	r3, r0
 8008660:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8008662:	4b0f      	ldr	r3, [pc, #60]	; (80086a0 <OTP_Read+0x48>)
 8008664:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008666:	e002      	b.n	800866e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	3b08      	subs	r3, #8
 800866c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	3307      	adds	r3, #7
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	79fa      	ldrb	r2, [r7, #7]
 8008676:	429a      	cmp	r2, r3
 8008678:	d003      	beq.n	8008682 <OTP_Read+0x2a>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	4a09      	ldr	r2, [pc, #36]	; (80086a4 <OTP_Read+0x4c>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d1f2      	bne.n	8008668 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	3307      	adds	r3, #7
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	79fa      	ldrb	r2, [r7, #7]
 800868a:	429a      	cmp	r2, r3
 800868c:	d001      	beq.n	8008692 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800868e:	2300      	movs	r3, #0
 8008690:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8008692:	68fb      	ldr	r3, [r7, #12]
}
 8008694:	4618      	mov	r0, r3
 8008696:	3714      	adds	r7, #20
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr
 80086a0:	1fff73f8 	.word	0x1fff73f8
 80086a4:	1fff7000 	.word	0x1fff7000

080086a8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	605a      	str	r2, [r3, #4]
}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b087      	sub	sp, #28
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086d0:	f3ef 8310 	mrs	r3, PRIMASK
 80086d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80086d6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80086d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80086da:	b672      	cpsid	i
}
 80086dc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d102      	bne.n	80086ee <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80086e8:	2301      	movs	r3, #1
 80086ea:	75fb      	strb	r3, [r7, #23]
 80086ec:	e001      	b.n	80086f2 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80086ee:	2300      	movs	r3, #0
 80086f0:	75fb      	strb	r3, [r7, #23]
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	f383 8810 	msr	PRIMASK, r3
}
 80086fc:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80086fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008700:	4618      	mov	r0, r3
 8008702:	371c      	adds	r7, #28
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800870c:	b480      	push	{r7}
 800870e:	b087      	sub	sp, #28
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008716:	f3ef 8310 	mrs	r3, PRIMASK
 800871a:	60fb      	str	r3, [r7, #12]
  return(result);
 800871c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800871e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008720:	b672      	cpsid	i
}
 8008722:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	683a      	ldr	r2, [r7, #0]
 8008736:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	683a      	ldr	r2, [r7, #0]
 800873e:	605a      	str	r2, [r3, #4]
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	f383 8810 	msr	PRIMASK, r3
}
 800874a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800874c:	bf00      	nop
 800874e:	371c      	adds	r7, #28
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8008758:	b480      	push	{r7}
 800875a:	b087      	sub	sp, #28
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008762:	f3ef 8310 	mrs	r3, PRIMASK
 8008766:	60fb      	str	r3, [r7, #12]
  return(result);
 8008768:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800876a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800876c:	b672      	cpsid	i
}
 800876e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	685a      	ldr	r2, [r3, #4]
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	683a      	ldr	r2, [r7, #0]
 8008782:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	683a      	ldr	r2, [r7, #0]
 800878a:	601a      	str	r2, [r3, #0]
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	f383 8810 	msr	PRIMASK, r3
}
 8008796:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008798:	bf00      	nop
 800879a:	371c      	adds	r7, #28
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b087      	sub	sp, #28
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087ac:	f3ef 8310 	mrs	r3, PRIMASK
 80087b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80087b2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80087b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80087b6:	b672      	cpsid	i
}
 80087b8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	6812      	ldr	r2, [r2, #0]
 80087c2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	6852      	ldr	r2, [r2, #4]
 80087cc:	605a      	str	r2, [r3, #4]
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	f383 8810 	msr	PRIMASK, r3
}
 80087d8:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80087da:	bf00      	nop
 80087dc:	371c      	adds	r7, #28
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr

080087e6 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b086      	sub	sp, #24
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
 80087ee:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087f0:	f3ef 8310 	mrs	r3, PRIMASK
 80087f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80087f6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80087f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80087fa:	b672      	cpsid	i
}
 80087fc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4618      	mov	r0, r3
 800880c:	f7ff ffca 	bl	80087a4 <LST_remove_node>
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	f383 8810 	msr	PRIMASK, r3
}
 800881a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800881c:	bf00      	nop
 800881e:	3718      	adds	r7, #24
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8008824:	b480      	push	{r7}
 8008826:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8008828:	4b03      	ldr	r3, [pc, #12]	; (8008838 <LL_FLASH_GetUDN+0x14>)
 800882a:	681b      	ldr	r3, [r3, #0]
}
 800882c:	4618      	mov	r0, r3
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	1fff7580 	.word	0x1fff7580

0800883c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800883c:	b480      	push	{r7}
 800883e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8008840:	4b03      	ldr	r3, [pc, #12]	; (8008850 <LL_FLASH_GetDeviceID+0x14>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	b2db      	uxtb	r3, r3
}
 8008846:	4618      	mov	r0, r3
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr
 8008850:	1fff7584 	.word	0x1fff7584

08008854 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8008854:	b480      	push	{r7}
 8008856:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8008858:	4b03      	ldr	r3, [pc, #12]	; (8008868 <LL_FLASH_GetSTCompanyID+0x14>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	0a1b      	lsrs	r3, r3, #8
}
 800885e:	4618      	mov	r0, r3
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr
 8008868:	1fff7584 	.word	0x1fff7584

0800886c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800886c:	b5b0      	push	{r4, r5, r7, lr}
 800886e:	b08e      	sub	sp, #56	; 0x38
 8008870:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

	UTIL_SEQ_RegTask(1 << CFG_TASK_MY_TASK, UTIL_SEQ_RFU, myTask);
 8008872:	4a25      	ldr	r2, [pc, #148]	; (8008908 <APP_BLE_Init+0x9c>)
 8008874:	2100      	movs	r1, #0
 8008876:	2004      	movs	r0, #4
 8008878:	f000 ffee 	bl	8009858 <UTIL_SEQ_RegTask>
	UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 800887c:	2100      	movs	r1, #0
 800887e:	2004      	movs	r0, #4
 8008880:	f001 f80c 	bl	800989c <UTIL_SEQ_SetTask>

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8008884:	4b21      	ldr	r3, [pc, #132]	; (800890c <APP_BLE_Init+0xa0>)
 8008886:	1d3c      	adds	r4, r7, #4
 8008888:	461d      	mov	r5, r3
 800888a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800888c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800888e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008890:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008892:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008894:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008896:	682b      	ldr	r3, [r5, #0]
 8008898:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800889a:	f000 f8ff 	bl	8008a9c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800889e:	2101      	movs	r1, #1
 80088a0:	2002      	movs	r0, #2
 80088a2:	f000 febf 	bl	8009624 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80088a6:	4a1a      	ldr	r2, [pc, #104]	; (8008910 <APP_BLE_Init+0xa4>)
 80088a8:	2100      	movs	r1, #0
 80088aa:	2002      	movs	r0, #2
 80088ac:	f000 ffd4 	bl	8009858 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 80088b0:	1d3b      	adds	r3, r7, #4
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7ff f8cc 	bl	8007a50 <SHCI_C2_BLE_Init>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d001      	beq.n	80088c2 <APP_BLE_Init+0x56>
  {
    Error_Handler();
 80088be:	f7f9 fba3 	bl	8002008 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80088c2:	f000 f901 	bl	8008ac8 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80088c6:	f7ff f81d 	bl	8007904 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80088ca:	4b12      	ldr	r3, [pc, #72]	; (8008914 <APP_BLE_Init+0xa8>)
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80088d2:	4b10      	ldr	r3, [pc, #64]	; (8008914 <APP_BLE_Init+0xa8>)
 80088d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088d8:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80088da:	4a0f      	ldr	r2, [pc, #60]	; (8008918 <APP_BLE_Init+0xac>)
 80088dc:	2100      	movs	r1, #0
 80088de:	2001      	movs	r0, #1
 80088e0:	f000 ffba 	bl	8009858 <UTIL_SEQ_RegTask>
  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 80088e4:	2006      	movs	r0, #6
 80088e6:	f7fe fe80 	bl	80075ea <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 80088ea:	f000 facd 	bl	8008e88 <Custom_APP_Init>
/* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80088ee:	4b09      	ldr	r3, [pc, #36]	; (8008914 <APP_BLE_Init+0xa8>)
 80088f0:	2200      	movs	r2, #0
 80088f2:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80088f4:	4b07      	ldr	r3, [pc, #28]	; (8008914 <APP_BLE_Init+0xa8>)
 80088f6:	2200      	movs	r2, #0
 80088f8:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 80088fa:	2001      	movs	r0, #1
 80088fc:	f000 f97e 	bl	8008bfc <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8008900:	bf00      	nop
}
 8008902:	3738      	adds	r7, #56	; 0x38
 8008904:	46bd      	mov	sp, r7
 8008906:	bdb0      	pop	{r4, r5, r7, pc}
 8008908:	08008dcd 	.word	0x08008dcd
 800890c:	0800a4bc 	.word	0x0800a4bc
 8008910:	08007c6d 	.word	0x08007c6d
 8008914:	20000194 	.word	0x20000194
 8008918:	08008ce5 	.word	0x08008ce5

0800891c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b08a      	sub	sp, #40	; 0x28
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	3301      	adds	r3, #1
 8008928:	627b      	str	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 800892a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	2bff      	cmp	r3, #255	; 0xff
 8008930:	d053      	beq.n	80089da <SVCCTL_App_Notification+0xbe>
 8008932:	2bff      	cmp	r3, #255	; 0xff
 8008934:	f300 80a3 	bgt.w	8008a7e <SVCCTL_App_Notification+0x162>
 8008938:	2b05      	cmp	r3, #5
 800893a:	d002      	beq.n	8008942 <SVCCTL_App_Notification+0x26>
 800893c:	2b3e      	cmp	r3, #62	; 0x3e
 800893e:	d020      	beq.n	8008982 <SVCCTL_App_Notification+0x66>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8008940:	e09d      	b.n	8008a7e <SVCCTL_App_Notification+0x162>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8008942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008944:	3302      	adds	r3, #2
 8008946:	60bb      	str	r3, [r7, #8]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800894e:	b29a      	uxth	r2, r3
 8008950:	4b4f      	ldr	r3, [pc, #316]	; (8008a90 <SVCCTL_App_Notification+0x174>)
 8008952:	8adb      	ldrh	r3, [r3, #22]
 8008954:	429a      	cmp	r2, r3
 8008956:	d106      	bne.n	8008966 <SVCCTL_App_Notification+0x4a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8008958:	4b4d      	ldr	r3, [pc, #308]	; (8008a90 <SVCCTL_App_Notification+0x174>)
 800895a:	2200      	movs	r2, #0
 800895c:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800895e:	4b4c      	ldr	r3, [pc, #304]	; (8008a90 <SVCCTL_App_Notification+0x174>)
 8008960:	2200      	movs	r2, #0
 8008962:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8008966:	2001      	movs	r0, #1
 8008968:	f000 f948 	bl	8008bfc <Adv_Request>
      handleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800896c:	4b49      	ldr	r3, [pc, #292]	; (8008a94 <SVCCTL_App_Notification+0x178>)
 800896e:	2201      	movs	r2, #1
 8008970:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008972:	4b47      	ldr	r3, [pc, #284]	; (8008a90 <SVCCTL_App_Notification+0x174>)
 8008974:	8ada      	ldrh	r2, [r3, #22]
 8008976:	4b47      	ldr	r3, [pc, #284]	; (8008a94 <SVCCTL_App_Notification+0x178>)
 8008978:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&handleNotification);
 800897a:	4846      	ldr	r0, [pc, #280]	; (8008a94 <SVCCTL_App_Notification+0x178>)
 800897c:	f000 fa70 	bl	8008e60 <Custom_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8008980:	e080      	b.n	8008a84 <SVCCTL_App_Notification+0x168>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8008982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008984:	3302      	adds	r3, #2
 8008986:	613b      	str	r3, [r7, #16]
      switch (meta_evt->subevent)
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	2b01      	cmp	r3, #1
 800898e:	d001      	beq.n	8008994 <SVCCTL_App_Notification+0x78>
 8008990:	2b03      	cmp	r3, #3
          break;
 8008992:	e021      	b.n	80089d8 <SVCCTL_App_Notification+0xbc>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	3301      	adds	r3, #1
 8008998:	60fb      	str	r3, [r7, #12]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800899a:	4b3d      	ldr	r3, [pc, #244]	; (8008a90 <SVCCTL_App_Notification+0x174>)
 800899c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80089a0:	2b04      	cmp	r3, #4
 80089a2:	d104      	bne.n	80089ae <SVCCTL_App_Notification+0x92>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80089a4:	4b3a      	ldr	r3, [pc, #232]	; (8008a90 <SVCCTL_App_Notification+0x174>)
 80089a6:	2206      	movs	r2, #6
 80089a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80089ac:	e003      	b.n	80089b6 <SVCCTL_App_Notification+0x9a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80089ae:	4b38      	ldr	r3, [pc, #224]	; (8008a90 <SVCCTL_App_Notification+0x174>)
 80089b0:	2205      	movs	r2, #5
 80089b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80089bc:	b29a      	uxth	r2, r3
 80089be:	4b34      	ldr	r3, [pc, #208]	; (8008a90 <SVCCTL_App_Notification+0x174>)
 80089c0:	82da      	strh	r2, [r3, #22]
          handleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 80089c2:	4b34      	ldr	r3, [pc, #208]	; (8008a94 <SVCCTL_App_Notification+0x178>)
 80089c4:	2200      	movs	r2, #0
 80089c6:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80089c8:	4b31      	ldr	r3, [pc, #196]	; (8008a90 <SVCCTL_App_Notification+0x174>)
 80089ca:	8ada      	ldrh	r2, [r3, #22]
 80089cc:	4b31      	ldr	r3, [pc, #196]	; (8008a94 <SVCCTL_App_Notification+0x178>)
 80089ce:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&handleNotification);
 80089d0:	4830      	ldr	r0, [pc, #192]	; (8008a94 <SVCCTL_App_Notification+0x178>)
 80089d2:	f000 fa45 	bl	8008e60 <Custom_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80089d6:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 80089d8:	e054      	b.n	8008a84 <SVCCTL_App_Notification+0x168>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80089da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089dc:	3302      	adds	r3, #2
 80089de:	623b      	str	r3, [r7, #32]
      switch (blecore_evt->ecode)
 80089e0:	6a3b      	ldr	r3, [r7, #32]
 80089e2:	881b      	ldrh	r3, [r3, #0]
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089ea:	d042      	beq.n	8008a72 <SVCCTL_App_Notification+0x156>
 80089ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089f0:	dc47      	bgt.n	8008a82 <SVCCTL_App_Notification+0x166>
 80089f2:	2b04      	cmp	r3, #4
 80089f4:	d03f      	beq.n	8008a76 <SVCCTL_App_Notification+0x15a>
 80089f6:	2b04      	cmp	r3, #4
 80089f8:	db43      	blt.n	8008a82 <SVCCTL_App_Notification+0x166>
 80089fa:	f240 420a 	movw	r2, #1034	; 0x40a
 80089fe:	4293      	cmp	r3, r2
 8008a00:	dc3f      	bgt.n	8008a82 <SVCCTL_App_Notification+0x166>
 8008a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a06:	dd3c      	ble.n	8008a82 <SVCCTL_App_Notification+0x166>
 8008a08:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8008a0c:	2b09      	cmp	r3, #9
 8008a0e:	d838      	bhi.n	8008a82 <SVCCTL_App_Notification+0x166>
 8008a10:	a201      	add	r2, pc, #4	; (adr r2, 8008a18 <SVCCTL_App_Notification+0xfc>)
 8008a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a16:	bf00      	nop
 8008a18:	08008a6b 	.word	0x08008a6b
 8008a1c:	08008a41 	.word	0x08008a41
 8008a20:	08008a83 	.word	0x08008a83
 8008a24:	08008a83 	.word	0x08008a83
 8008a28:	08008a83 	.word	0x08008a83
 8008a2c:	08008a83 	.word	0x08008a83
 8008a30:	08008a7b 	.word	0x08008a7b
 8008a34:	08008a83 	.word	0x08008a83
 8008a38:	08008a4f 	.word	0x08008a4f
 8008a3c:	08008a7b 	.word	0x08008a7b
            aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8008a40:	4b13      	ldr	r3, [pc, #76]	; (8008a90 <SVCCTL_App_Notification+0x174>)
 8008a42:	8adb      	ldrh	r3, [r3, #22]
 8008a44:	4914      	ldr	r1, [pc, #80]	; (8008a98 <SVCCTL_App_Notification+0x17c>)
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7fe f826 	bl	8006a98 <aci_gap_pass_key_resp>
        break;
 8008a4c:	e016      	b.n	8008a7c <SVCCTL_App_Notification+0x160>
            evt_numeric_value = (aci_gap_numeric_comparison_value_event_rp0 *)blecore_evt->data;
 8008a4e:	6a3b      	ldr	r3, [r7, #32]
 8008a50:	3302      	adds	r3, #2
 8008a52:	61fb      	str	r3, [r7, #28]
            numeric_value = evt_numeric_value->Numeric_Value;
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8008a5a:	61bb      	str	r3, [r7, #24]
            aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8008a5c:	4b0c      	ldr	r3, [pc, #48]	; (8008a90 <SVCCTL_App_Notification+0x174>)
 8008a5e:	8adb      	ldrh	r3, [r3, #22]
 8008a60:	2101      	movs	r1, #1
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fe f9c2 	bl	8006dec <aci_gap_numeric_comparison_value_confirm_yesno>
        break;
 8008a68:	e008      	b.n	8008a7c <SVCCTL_App_Notification+0x160>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 8008a6a:	6a3b      	ldr	r3, [r7, #32]
 8008a6c:	3302      	adds	r3, #2
 8008a6e:	617b      	str	r3, [r7, #20]
        break;
 8008a70:	e004      	b.n	8008a7c <SVCCTL_App_Notification+0x160>
      break;
 8008a72:	bf00      	nop
 8008a74:	e005      	b.n	8008a82 <SVCCTL_App_Notification+0x166>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8008a76:	bf00      	nop
 8008a78:	e003      	b.n	8008a82 <SVCCTL_App_Notification+0x166>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8008a7a:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008a7c:	e001      	b.n	8008a82 <SVCCTL_App_Notification+0x166>
      break;
 8008a7e:	bf00      	nop
 8008a80:	e000      	b.n	8008a84 <SVCCTL_App_Notification+0x168>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008a82:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8008a84:	2301      	movs	r3, #1
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3728      	adds	r7, #40	; 0x28
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	20000194 	.word	0x20000194
 8008a94:	20000800 	.word	0x20000800
 8008a98:	0001b207 	.word	0x0001b207

08008a9c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8008aa2:	4b06      	ldr	r3, [pc, #24]	; (8008abc <Ble_Tl_Init+0x20>)
 8008aa4:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8008aa6:	4b06      	ldr	r3, [pc, #24]	; (8008ac0 <Ble_Tl_Init+0x24>)
 8008aa8:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8008aaa:	463b      	mov	r3, r7
 8008aac:	4619      	mov	r1, r3
 8008aae:	4805      	ldr	r0, [pc, #20]	; (8008ac4 <Ble_Tl_Init+0x28>)
 8008ab0:	f7ff f8c0 	bl	8007c34 <hci_init>

  return;
 8008ab4:	bf00      	nop
}
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	200300d4 	.word	0x200300d4
 8008ac0:	08008d95 	.word	0x08008d95
 8008ac4:	08008d5d 	.word	0x08008d5d

08008ac8 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 8008ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aca:	b08d      	sub	sp, #52	; 0x34
 8008acc:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8008ace:	2300      	movs	r3, #0
 8008ad0:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8008ad2:	f7fe fdde 	bl	8007692 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 8008ad6:	f000 f8c1 	bl	8008c5c <BleGetBdAddress>
 8008ada:	6178      	str	r0, [r7, #20]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8008adc:	697a      	ldr	r2, [r7, #20]
 8008ade:	2106      	movs	r1, #6
 8008ae0:	2000      	movs	r0, #0
 8008ae2:	f7fe fc96 	bl	8007412 <aci_hal_write_config_data>
#endif

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8008ae6:	4a40      	ldr	r2, [pc, #256]	; (8008be8 <Ble_Hci_Gap_Gatt_Init+0x120>)
 8008ae8:	2110      	movs	r1, #16
 8008aea:	2018      	movs	r0, #24
 8008aec:	f7fe fc91 	bl	8007412 <aci_hal_write_config_data>

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8008af0:	4a3e      	ldr	r2, [pc, #248]	; (8008bec <Ble_Hci_Gap_Gatt_Init+0x124>)
 8008af2:	2110      	movs	r1, #16
 8008af4:	2008      	movs	r0, #8
 8008af6:	f7fe fc8c 	bl	8007412 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8008afa:	2118      	movs	r1, #24
 8008afc:	2001      	movs	r0, #1
 8008afe:	f7fe fd0d 	bl	800751c <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8008b02:	f7fe f9da 	bl	8006eba <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 8008b06:	2300      	movs	r3, #0
 8008b08:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8008b0a:	7cfb      	ldrb	r3, [r7, #19]
 8008b0c:	f043 0301 	orr.w	r3, r3, #1
 8008b10:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8008b12:	7cfb      	ldrb	r3, [r7, #19]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d01d      	beq.n	8008b54 <Ble_Hci_Gap_Gatt_Init+0x8c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8008b18:	4b35      	ldr	r3, [pc, #212]	; (8008bf0 <Ble_Hci_Gap_Gatt_Init+0x128>)
 8008b1a:	60fb      	str	r3, [r7, #12]
    aci_gap_init(role,
 8008b1c:	f107 020a 	add.w	r2, r7, #10
 8008b20:	7cf8      	ldrb	r0, [r7, #19]
 8008b22:	1dbb      	adds	r3, r7, #6
 8008b24:	9301      	str	r3, [sp, #4]
 8008b26:	f107 0308 	add.w	r3, r7, #8
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	2208      	movs	r2, #8
 8008b30:	2100      	movs	r1, #0
 8008b32:	f7fe f818 	bl	8006b66 <aci_gap_init>
                 CFG_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle,
                 &gap_dev_name_char_handle,
                 &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8008b36:	897c      	ldrh	r4, [r7, #10]
 8008b38:	893d      	ldrh	r5, [r7, #8]
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	f7f7 fb20 	bl	8000180 <strlen>
 8008b40:	4603      	mov	r3, r0
 8008b42:	b2da      	uxtb	r2, r3
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	4613      	mov	r3, r2
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	4629      	mov	r1, r5
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f7fe fbb6 	bl	80072c0 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8008b54:	8978      	ldrh	r0, [r7, #10]
 8008b56:	88f9      	ldrh	r1, [r7, #6]
 8008b58:	1d3b      	adds	r3, r7, #4
 8008b5a:	9300      	str	r3, [sp, #0]
 8008b5c:	2302      	movs	r3, #2
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f7fe fbae 	bl	80072c0 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8008b64:	2202      	movs	r2, #2
 8008b66:	2102      	movs	r1, #2
 8008b68:	2000      	movs	r0, #0
 8008b6a:	f7fe fdb6 	bl	80076da <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8008b6e:	4b21      	ldr	r3, [pc, #132]	; (8008bf4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008b70:	2201      	movs	r2, #1
 8008b72:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8008b74:	4b1f      	ldr	r3, [pc, #124]	; (8008bf4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7fd fe75 	bl	8006868 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8008b7e:	4b1d      	ldr	r3, [pc, #116]	; (8008bf4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008b80:	2201      	movs	r2, #1
 8008b82:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8008b84:	4b1b      	ldr	r3, [pc, #108]	; (8008bf4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008b86:	2208      	movs	r2, #8
 8008b88:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8008b8a:	4b1a      	ldr	r3, [pc, #104]	; (8008bf4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008b8c:	2210      	movs	r2, #16
 8008b8e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8008b90:	4b18      	ldr	r3, [pc, #96]	; (8008bf4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8008b96:	4b17      	ldr	r3, [pc, #92]	; (8008bf4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008b98:	4a17      	ldr	r2, [pc, #92]	; (8008bf8 <Ble_Hci_Gap_Gatt_Init+0x130>)
 8008b9a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8008b9c:	4b15      	ldr	r3, [pc, #84]	; (8008bf4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8008ba2:	4b14      	ldr	r3, [pc, #80]	; (8008bf4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008ba4:	789c      	ldrb	r4, [r3, #2]
 8008ba6:	4b13      	ldr	r3, [pc, #76]	; (8008bf4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008ba8:	785d      	ldrb	r5, [r3, #1]
 8008baa:	4b12      	ldr	r3, [pc, #72]	; (8008bf4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008bac:	791b      	ldrb	r3, [r3, #4]
 8008bae:	4a11      	ldr	r2, [pc, #68]	; (8008bf4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008bb0:	7952      	ldrb	r2, [r2, #5]
 8008bb2:	4910      	ldr	r1, [pc, #64]	; (8008bf4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008bb4:	78c9      	ldrb	r1, [r1, #3]
 8008bb6:	480f      	ldr	r0, [pc, #60]	; (8008bf4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008bb8:	6880      	ldr	r0, [r0, #8]
 8008bba:	2600      	movs	r6, #0
 8008bbc:	9604      	str	r6, [sp, #16]
 8008bbe:	9003      	str	r0, [sp, #12]
 8008bc0:	9102      	str	r1, [sp, #8]
 8008bc2:	9201      	str	r2, [sp, #4]
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	2201      	movs	r2, #1
 8008bca:	4629      	mov	r1, r5
 8008bcc:	4620      	mov	r0, r4
 8008bce:	f7fd fe9f 	bl	8006910 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8008bd2:	4b08      	ldr	r3, [pc, #32]	; (8008bf4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008bd4:	789b      	ldrb	r3, [r3, #2]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d001      	beq.n	8008bde <Ble_Hci_Gap_Gatt_Init+0x116>
   {
     aci_gap_configure_whitelist();
 8008bda:	f7fe f8e3 	bl	8006da4 <aci_gap_configure_whitelist>
   }
}
 8008bde:	bf00      	nop
 8008be0:	371c      	adds	r7, #28
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008be6:	bf00      	nop
 8008be8:	0800d664 	.word	0x0800d664
 8008bec:	0800d674 	.word	0x0800d674
 8008bf0:	0800a4f0 	.word	0x0800a4f0
 8008bf4:	20000194 	.word	0x20000194
 8008bf8:	0001b207 	.word	0x0001b207

08008bfc <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b08c      	sub	sp, #48	; 0x30
 8008c00:	af08      	add	r7, sp, #32
 8008c02:	4603      	mov	r3, r0
 8008c04:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008c06:	2392      	movs	r3, #146	; 0x92
 8008c08:	73fb      	strb	r3, [r7, #15]

    BleApplicationContext.Device_Connection_Status = New_Status;
 8008c0a:	4a12      	ldr	r2, [pc, #72]	; (8008c54 <Adv_Request+0x58>)
 8008c0c:	79fb      	ldrb	r3, [r7, #7]
 8008c0e:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8008c12:	2300      	movs	r3, #0
 8008c14:	9306      	str	r3, [sp, #24]
 8008c16:	2300      	movs	r3, #0
 8008c18:	9305      	str	r3, [sp, #20]
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	9304      	str	r3, [sp, #16]
 8008c1e:	2300      	movs	r3, #0
 8008c20:	9303      	str	r3, [sp, #12]
 8008c22:	2300      	movs	r3, #0
 8008c24:	9302      	str	r3, [sp, #8]
 8008c26:	2300      	movs	r3, #0
 8008c28:	9301      	str	r3, [sp, #4]
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	9300      	str	r3, [sp, #0]
 8008c2e:	2300      	movs	r3, #0
 8008c30:	22a0      	movs	r2, #160	; 0xa0
 8008c32:	2180      	movs	r1, #128	; 0x80
 8008c34:	2000      	movs	r0, #0
 8008c36:	f7fd fd1d 	bl	8006674 <aci_gap_set_discoverable>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	73fb      	strb	r3, [r7, #15]
        0,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(ad_data), (uint8_t*) ad_data);
 8008c3e:	4906      	ldr	r1, [pc, #24]	; (8008c58 <Adv_Request+0x5c>)
 8008c40:	2008      	movs	r0, #8
 8008c42:	f7fe f83d 	bl	8006cc0 <aci_gap_update_adv_data>
 8008c46:	4603      	mov	r3, r0
 8008c48:	73fb      	strb	r3, [r7, #15]
    else
    {
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
    }

  return;
 8008c4a:	bf00      	nop
}
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	20000194 	.word	0x20000194
 8008c58:	20000030 	.word	0x20000030

08008c5c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b086      	sub	sp, #24
 8008c60:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8008c62:	f7ff fddf 	bl	8008824 <LL_FLASH_GetUDN>
 8008c66:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c6e:	d023      	beq.n	8008cb8 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8008c70:	f7ff fdf0 	bl	8008854 <LL_FLASH_GetSTCompanyID>
 8008c74:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8008c76:	f7ff fde1 	bl	800883c <LL_FLASH_GetDeviceID>
 8008c7a:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	b2da      	uxtb	r2, r3
 8008c80:	4b16      	ldr	r3, [pc, #88]	; (8008cdc <BleGetBdAddress+0x80>)
 8008c82:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	0a1b      	lsrs	r3, r3, #8
 8008c88:	b2da      	uxtb	r2, r3
 8008c8a:	4b14      	ldr	r3, [pc, #80]	; (8008cdc <BleGetBdAddress+0x80>)
 8008c8c:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	b2da      	uxtb	r2, r3
 8008c92:	4b12      	ldr	r3, [pc, #72]	; (8008cdc <BleGetBdAddress+0x80>)
 8008c94:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	b2da      	uxtb	r2, r3
 8008c9a:	4b10      	ldr	r3, [pc, #64]	; (8008cdc <BleGetBdAddress+0x80>)
 8008c9c:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	0a1b      	lsrs	r3, r3, #8
 8008ca2:	b2da      	uxtb	r2, r3
 8008ca4:	4b0d      	ldr	r3, [pc, #52]	; (8008cdc <BleGetBdAddress+0x80>)
 8008ca6:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	0c1b      	lsrs	r3, r3, #16
 8008cac:	b2da      	uxtb	r2, r3
 8008cae:	4b0b      	ldr	r3, [pc, #44]	; (8008cdc <BleGetBdAddress+0x80>)
 8008cb0:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8008cb2:	4b0a      	ldr	r3, [pc, #40]	; (8008cdc <BleGetBdAddress+0x80>)
 8008cb4:	617b      	str	r3, [r7, #20]
 8008cb6:	e00b      	b.n	8008cd0 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8008cb8:	2000      	movs	r0, #0
 8008cba:	f7ff fccd 	bl	8008658 <OTP_Read>
 8008cbe:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d002      	beq.n	8008ccc <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	617b      	str	r3, [r7, #20]
 8008cca:	e001      	b.n	8008cd0 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8008ccc:	4b04      	ldr	r3, [pc, #16]	; (8008ce0 <BleGetBdAddress+0x84>)
 8008cce:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 8008cd0:	697b      	ldr	r3, [r7, #20]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3718      	adds	r7, #24
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	200007f8 	.word	0x200007f8
 8008ce0:	0800d65c 	.word	0x0800d65c

08008ce4 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8008cea:	4b0a      	ldr	r3, [pc, #40]	; (8008d14 <Adv_Cancel+0x30>)
 8008cec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008cf0:	2b05      	cmp	r3, #5
 8008cf2:	d00a      	beq.n	8008d0a <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 8008cf8:	f7fd fc98 	bl	800662c <aci_gap_set_non_discoverable>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008d00:	4b04      	ldr	r3, [pc, #16]	; (8008d14 <Adv_Cancel+0x30>)
 8008d02:	2200      	movs	r2, #0
 8008d04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 8008d08:	bf00      	nop
 8008d0a:	bf00      	nop
}
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	20000194 	.word	0x20000194

08008d18 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8008d20:	2100      	movs	r1, #0
 8008d22:	2002      	movs	r0, #2
 8008d24:	f000 fdba 	bl	800989c <UTIL_SEQ_SetTask>
  return;
 8008d28:	bf00      	nop
}
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008d38:	2001      	movs	r0, #1
 8008d3a:	f000 fe1b 	bl	8009974 <UTIL_SEQ_SetEvt>
  return;
 8008d3e:	bf00      	nop
}
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b082      	sub	sp, #8
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008d4e:	2001      	movs	r0, #1
 8008d50:	f000 fe30 	bl	80099b4 <UTIL_SEQ_WaitEvt>
  return;
 8008d54:	bf00      	nop
}
 8008d56:	3708      	adds	r7, #8
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	3308      	adds	r3, #8
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fe fe1a 	bl	80079a8 <SVCCTL_UserEvtRx>
 8008d74:	4603      	mov	r3, r0
 8008d76:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8008d78:	7afb      	ldrb	r3, [r7, #11]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d003      	beq.n	8008d86 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2201      	movs	r2, #1
 8008d82:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8008d84:	e003      	b.n	8008d8e <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	701a      	strb	r2, [r3, #0]
  return;
 8008d8c:	bf00      	nop
}
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8008d9e:	79fb      	ldrb	r3, [r7, #7]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d002      	beq.n	8008daa <BLE_StatusNot+0x16>
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d006      	beq.n	8008db6 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8008da8:	e00b      	b.n	8008dc2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008daa:	2307      	movs	r3, #7
 8008dac:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	f000 fda0 	bl	80098f4 <UTIL_SEQ_PauseTask>
      break;
 8008db4:	e005      	b.n	8008dc2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008db6:	2307      	movs	r3, #7
 8008db8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8008dba:	68f8      	ldr	r0, [r7, #12]
 8008dbc:	f000 fdba 	bl	8009934 <UTIL_SEQ_ResumeTask>
      break;
 8008dc0:	bf00      	nop
  }
  return;
 8008dc2:	bf00      	nop
}
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
	...

08008dcc <myTask>:
static void Custom_Mycharnotify_Update_Char(void);
static void Custom_Mycharnotify_Send_Notification(void);

/* USER CODE BEGIN PFP */
	void myTask(void)
	{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	af00      	add	r7, sp, #0

		sprintf(NOTIFY_MSG, "Button Pressed!\r\n");
 8008dd0:	4911      	ldr	r1, [pc, #68]	; (8008e18 <myTask+0x4c>)
 8008dd2:	4812      	ldr	r0, [pc, #72]	; (8008e1c <myTask+0x50>)
 8008dd4:	f000 fede 	bl	8009b94 <siprintf>

		//Read the Button State
		if(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8008dd8:	2110      	movs	r1, #16
 8008dda:	4811      	ldr	r0, [pc, #68]	; (8008e20 <myTask+0x54>)
 8008ddc:	f7fa f96a 	bl	80030b4 <HAL_GPIO_ReadPin>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d111      	bne.n	8008e0a <myTask+0x3e>
		{

			UART_Transmit((uint8_t*)NOTIFY_MSG, strlen(NOTIFY_MSG));
 8008de6:	480d      	ldr	r0, [pc, #52]	; (8008e1c <myTask+0x50>)
 8008de8:	f7f7 f9ca 	bl	8000180 <strlen>
 8008dec:	4603      	mov	r3, r0
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	4619      	mov	r1, r3
 8008df2:	480a      	ldr	r0, [pc, #40]	; (8008e1c <myTask+0x50>)
 8008df4:	f7f9 f8ec 	bl	8001fd0 <UART_Transmit>

			UpdateCharData[0] ^= 0x1;
 8008df8:	4b0a      	ldr	r3, [pc, #40]	; (8008e24 <myTask+0x58>)
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	f083 0301 	eor.w	r3, r3, #1
 8008e00:	b2da      	uxtb	r2, r3
 8008e02:	4b08      	ldr	r3, [pc, #32]	; (8008e24 <myTask+0x58>)
 8008e04:	701a      	strb	r2, [r3, #0]
			Custom_Mycharnotify_Update_Char();		//Depends on Characteristic long name from CubeMX
 8008e06:	f000 f847 	bl	8008e98 <Custom_Mycharnotify_Update_Char>
		}
		UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	2004      	movs	r0, #4
 8008e0e:	f000 fd45 	bl	800989c <UTIL_SEQ_SetTask>
	}
 8008e12:	bf00      	nop
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	0800a4fc 	.word	0x0800a4fc
 8008e1c:	20000804 	.word	0x20000804
 8008e20:	48000800 	.word	0x48000800
 8008e24:	20000828 	.word	0x20000828

08008e28 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch(pNotification->Custom_Evt_Opcode)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	2b02      	cmp	r3, #2
 8008e36:	d006      	beq.n	8008e46 <Custom_STM_App_Notification+0x1e>
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	dc06      	bgt.n	8008e4a <Custom_STM_App_Notification+0x22>
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d006      	beq.n	8008e4e <Custom_STM_App_Notification+0x26>
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d006      	beq.n	8008e52 <Custom_STM_App_Notification+0x2a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8008e44:	e001      	b.n	8008e4a <Custom_STM_App_Notification+0x22>
      break;
 8008e46:	bf00      	nop
 8008e48:	e004      	b.n	8008e54 <Custom_STM_App_Notification+0x2c>
      break;
 8008e4a:	bf00      	nop
 8008e4c:	e002      	b.n	8008e54 <Custom_STM_App_Notification+0x2c>
      break;
 8008e4e:	bf00      	nop
 8008e50:	e000      	b.n	8008e54 <Custom_STM_App_Notification+0x2c>
      break;
 8008e52:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8008e54:	bf00      	nop
}
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch(pNotification->Custom_Evt_Opcode)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d002      	beq.n	8008e76 <Custom_APP_Notification+0x16>
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d002      	beq.n	8008e7a <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8008e74:	e002      	b.n	8008e7c <Custom_APP_Notification+0x1c>
      break;
 8008e76:	bf00      	nop
 8008e78:	e000      	b.n	8008e7c <Custom_APP_Notification+0x1c>
      break;
 8008e7a:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8008e7c:	bf00      	nop
}
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8008e8c:	bf00      	nop
}
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
	...

08008e98 <Custom_Mycharnotify_Update_Char>:
 *
 *************************************************************/

  /* LED_SVC */
void Custom_Mycharnotify_Update_Char(void) /* Property Read */
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	af00      	add	r7, sp, #0
  Custom_STM_App_Update_Char(CUSTOM_STM_MYCHARNOTIFY, (uint8_t *)UpdateCharData);
 8008e9c:	4902      	ldr	r1, [pc, #8]	; (8008ea8 <Custom_Mycharnotify_Update_Char+0x10>)
 8008e9e:	2001      	movs	r0, #1
 8008ea0:	f000 f92e 	bl	8009100 <Custom_STM_App_Update_Char>
  /* USER CODE BEGIN Mycharnotify_UC*/

  /* USER CODE END Mycharnotify_UC*/
  return;
 8008ea4:	bf00      	nop
}
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	20000828 	.word	0x20000828

08008eac <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b08c      	sub	sp, #48	; 0x30
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	62bb      	str	r3, [r7, #40]	; 0x28

  switch(event_pckt->evt)
 8008ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	2bff      	cmp	r3, #255	; 0xff
 8008ec6:	d169      	bne.n	8008f9c <Custom_STM_Event_Handler+0xf0>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8008ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eca:	3302      	adds	r3, #2
 8008ecc:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blecore_evt->ecode)
 8008ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed0:	881b      	ldrh	r3, [r3, #0]
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	f640 4214 	movw	r2, #3092	; 0xc14
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d059      	beq.n	8008f90 <Custom_STM_Event_Handler+0xe4>
 8008edc:	f640 4214 	movw	r2, #3092	; 0xc14
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	dc57      	bgt.n	8008f94 <Custom_STM_Event_Handler+0xe8>
 8008ee4:	f640 4201 	movw	r2, #3073	; 0xc01
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d003      	beq.n	8008ef4 <Custom_STM_Event_Handler+0x48>
 8008eec:	f640 4213 	movw	r2, #3091	; 0xc13
 8008ef0:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8008ef2:	e052      	b.n	8008f9a <Custom_STM_Event_Handler+0xee>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef6:	3302      	adds	r3, #2
 8008ef8:	623b      	str	r3, [r7, #32]
          if(attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8008efa:	6a3b      	ldr	r3, [r7, #32]
 8008efc:	885b      	ldrh	r3, [r3, #2]
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	461a      	mov	r2, r3
 8008f02:	4b2a      	ldr	r3, [pc, #168]	; (8008fac <Custom_STM_Event_Handler+0x100>)
 8008f04:	889b      	ldrh	r3, [r3, #4]
 8008f06:	3302      	adds	r3, #2
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d119      	bne.n	8008f40 <Custom_STM_Event_Handler+0x94>
            return_value = SVCCTL_EvtAckFlowEnable;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch(attribute_modified->Attr_Data[0])
 8008f12:	6a3b      	ldr	r3, [r7, #32]
 8008f14:	7a1b      	ldrb	r3, [r3, #8]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d002      	beq.n	8008f20 <Custom_STM_Event_Handler+0x74>
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d008      	beq.n	8008f30 <Custom_STM_Event_Handler+0x84>
              break;
 8008f1e:	e036      	b.n	8008f8e <Custom_STM_Event_Handler+0xe2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT;
 8008f20:	2302      	movs	r3, #2
 8008f22:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8008f24:	f107 030c 	add.w	r3, r7, #12
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7ff ff7d 	bl	8008e28 <Custom_STM_App_Notification>
                break;
 8008f2e:	e02e      	b.n	8008f8e <Custom_STM_Event_Handler+0xe2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT;
 8008f30:	2301      	movs	r3, #1
 8008f32:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8008f34:	f107 030c 	add.w	r3, r7, #12
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7ff ff75 	bl	8008e28 <Custom_STM_App_Notification>
                break;
 8008f3e:	e026      	b.n	8008f8e <Custom_STM_Event_Handler+0xe2>
          else if(attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8008f40:	6a3b      	ldr	r3, [r7, #32]
 8008f42:	885b      	ldrh	r3, [r3, #2]
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	461a      	mov	r2, r3
 8008f48:	4b18      	ldr	r3, [pc, #96]	; (8008fac <Custom_STM_Event_Handler+0x100>)
 8008f4a:	885b      	ldrh	r3, [r3, #2]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d122      	bne.n	8008f98 <Custom_STM_Event_Handler+0xec>
            return_value = SVCCTL_EvtAckFlowEnable;
 8008f52:	2301      	movs	r3, #1
 8008f54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            uint8_t x = attribute_modified->Attr_Data[0];
 8008f58:	6a3b      	ldr	r3, [r7, #32]
 8008f5a:	7a1b      	ldrb	r3, [r3, #8]
 8008f5c:	77fb      	strb	r3, [r7, #31]
            sprintf(BLE_MSG, "Write Value: %x\r\n", x);
 8008f5e:	7ffb      	ldrb	r3, [r7, #31]
 8008f60:	461a      	mov	r2, r3
 8008f62:	4913      	ldr	r1, [pc, #76]	; (8008fb0 <Custom_STM_Event_Handler+0x104>)
 8008f64:	4813      	ldr	r0, [pc, #76]	; (8008fb4 <Custom_STM_Event_Handler+0x108>)
 8008f66:	f000 fe15 	bl	8009b94 <siprintf>
            UART_Transmit((uint8_t*)BLE_MSG, strlen(BLE_MSG));
 8008f6a:	4812      	ldr	r0, [pc, #72]	; (8008fb4 <Custom_STM_Event_Handler+0x108>)
 8008f6c:	f7f7 f908 	bl	8000180 <strlen>
 8008f70:	4603      	mov	r3, r0
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	4619      	mov	r1, r3
 8008f76:	480f      	ldr	r0, [pc, #60]	; (8008fb4 <Custom_STM_Event_Handler+0x108>)
 8008f78:	f7f9 f82a 	bl	8001fd0 <UART_Transmit>
			if (attribute_modified->Attr_Data[0] == 0x22)
 8008f7c:	6a3b      	ldr	r3, [r7, #32]
 8008f7e:	7a1b      	ldrb	r3, [r3, #8]
 8008f80:	2b22      	cmp	r3, #34	; 0x22
 8008f82:	d109      	bne.n	8008f98 <Custom_STM_Event_Handler+0xec>
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8008f84:	2101      	movs	r1, #1
 8008f86:	480c      	ldr	r0, [pc, #48]	; (8008fb8 <Custom_STM_Event_Handler+0x10c>)
 8008f88:	f7fa f8c4 	bl	8003114 <HAL_GPIO_TogglePin>
          break;
 8008f8c:	e004      	b.n	8008f98 <Custom_STM_Event_Handler+0xec>
 8008f8e:	e003      	b.n	8008f98 <Custom_STM_Event_Handler+0xec>
          break;
 8008f90:	bf00      	nop
 8008f92:	e004      	b.n	8008f9e <Custom_STM_Event_Handler+0xf2>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8008f94:	bf00      	nop
 8008f96:	e002      	b.n	8008f9e <Custom_STM_Event_Handler+0xf2>
          break;
 8008f98:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008f9a:	e000      	b.n	8008f9e <Custom_STM_Event_Handler+0xf2>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8008f9c:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8008f9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}/* end Custom_STM_Event_Handler */
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3730      	adds	r7, #48	; 0x30
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	20000178 	.word	0x20000178
 8008fb0:	0800a510 	.word	0x0800a510
 8008fb4:	20000920 	.word	0x20000920
 8008fb8:	48000400 	.word	0x48000400

08008fbc <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b08a      	sub	sp, #40	; 0x28
 8008fc0:	af06      	add	r7, sp, #24
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8008fc2:	484b      	ldr	r0, [pc, #300]	; (80090f0 <SVCCTL_InitCustomSvc+0x134>)
 8008fc4:	f7fe fcd6 	bl	8007974 <SVCCTL_RegisterSvcHandler>
   *                                2 for myCharNotify +
   *                                1 for myCharNotify configuration descriptor +
   *                              = 6
   */

  COPY_LED_SVC_UUID(uuid.Char_UUID_128);
 8008fc8:	238f      	movs	r3, #143	; 0x8f
 8008fca:	703b      	strb	r3, [r7, #0]
 8008fcc:	23e5      	movs	r3, #229	; 0xe5
 8008fce:	707b      	strb	r3, [r7, #1]
 8008fd0:	23b3      	movs	r3, #179	; 0xb3
 8008fd2:	70bb      	strb	r3, [r7, #2]
 8008fd4:	23d5      	movs	r3, #213	; 0xd5
 8008fd6:	70fb      	strb	r3, [r7, #3]
 8008fd8:	232e      	movs	r3, #46	; 0x2e
 8008fda:	713b      	strb	r3, [r7, #4]
 8008fdc:	237f      	movs	r3, #127	; 0x7f
 8008fde:	717b      	strb	r3, [r7, #5]
 8008fe0:	234a      	movs	r3, #74	; 0x4a
 8008fe2:	71bb      	strb	r3, [r7, #6]
 8008fe4:	2398      	movs	r3, #152	; 0x98
 8008fe6:	71fb      	strb	r3, [r7, #7]
 8008fe8:	232a      	movs	r3, #42	; 0x2a
 8008fea:	723b      	strb	r3, [r7, #8]
 8008fec:	2348      	movs	r3, #72	; 0x48
 8008fee:	727b      	strb	r3, [r7, #9]
 8008ff0:	237a      	movs	r3, #122	; 0x7a
 8008ff2:	72bb      	strb	r3, [r7, #10]
 8008ff4:	23cc      	movs	r3, #204	; 0xcc
 8008ff6:	72fb      	strb	r3, [r7, #11]
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	733b      	strb	r3, [r7, #12]
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	737b      	strb	r3, [r7, #13]
 8009000:	2300      	movs	r3, #0
 8009002:	73bb      	strb	r3, [r7, #14]
 8009004:	2300      	movs	r3, #0
 8009006:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_service(UUID_TYPE_128,
 8009008:	4639      	mov	r1, r7
 800900a:	4b3a      	ldr	r3, [pc, #232]	; (80090f4 <SVCCTL_InitCustomSvc+0x138>)
 800900c:	9300      	str	r3, [sp, #0]
 800900e:	2306      	movs	r3, #6
 8009010:	2201      	movs	r2, #1
 8009012:	2002      	movs	r0, #2
 8009014:	f7fd ff76 	bl	8006f04 <aci_gatt_add_service>
                       &(CustomContext.CustomLed_SvcHdle));

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 8009018:	2319      	movs	r3, #25
 800901a:	703b      	strb	r3, [r7, #0]
 800901c:	23ed      	movs	r3, #237	; 0xed
 800901e:	707b      	strb	r3, [r7, #1]
 8009020:	2382      	movs	r3, #130	; 0x82
 8009022:	70bb      	strb	r3, [r7, #2]
 8009024:	23ae      	movs	r3, #174	; 0xae
 8009026:	70fb      	strb	r3, [r7, #3]
 8009028:	23ed      	movs	r3, #237	; 0xed
 800902a:	713b      	strb	r3, [r7, #4]
 800902c:	2321      	movs	r3, #33	; 0x21
 800902e:	717b      	strb	r3, [r7, #5]
 8009030:	234c      	movs	r3, #76	; 0x4c
 8009032:	71bb      	strb	r3, [r7, #6]
 8009034:	239d      	movs	r3, #157	; 0x9d
 8009036:	71fb      	strb	r3, [r7, #7]
 8009038:	2341      	movs	r3, #65	; 0x41
 800903a:	723b      	strb	r3, [r7, #8]
 800903c:	2345      	movs	r3, #69	; 0x45
 800903e:	727b      	strb	r3, [r7, #9]
 8009040:	2322      	movs	r3, #34	; 0x22
 8009042:	72bb      	strb	r3, [r7, #10]
 8009044:	238e      	movs	r3, #142	; 0x8e
 8009046:	72fb      	strb	r3, [r7, #11]
 8009048:	2300      	movs	r3, #0
 800904a:	733b      	strb	r3, [r7, #12]
 800904c:	2300      	movs	r3, #0
 800904e:	737b      	strb	r3, [r7, #13]
 8009050:	2300      	movs	r3, #0
 8009052:	73bb      	strb	r3, [r7, #14]
 8009054:	2300      	movs	r3, #0
 8009056:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomLed_SvcHdle,
 8009058:	4b26      	ldr	r3, [pc, #152]	; (80090f4 <SVCCTL_InitCustomSvc+0x138>)
 800905a:	8818      	ldrh	r0, [r3, #0]
 800905c:	2301      	movs	r3, #1
 800905e:	b29b      	uxth	r3, r3
 8009060:	463a      	mov	r2, r7
 8009062:	4925      	ldr	r1, [pc, #148]	; (80090f8 <SVCCTL_InitCustomSvc+0x13c>)
 8009064:	9105      	str	r1, [sp, #20]
 8009066:	2100      	movs	r1, #0
 8009068:	9104      	str	r1, [sp, #16]
 800906a:	2110      	movs	r1, #16
 800906c:	9103      	str	r1, [sp, #12]
 800906e:	2101      	movs	r1, #1
 8009070:	9102      	str	r1, [sp, #8]
 8009072:	2100      	movs	r1, #0
 8009074:	9101      	str	r1, [sp, #4]
 8009076:	2108      	movs	r1, #8
 8009078:	9100      	str	r1, [sp, #0]
 800907a:	2102      	movs	r1, #2
 800907c:	f7fe f818 	bl	80070b0 <aci_gatt_add_char>
                    CHAR_VALUE_LEN_CONSTANT,
                    &(CustomContext.CustomMycharwriteHdle));
  /**
   *  myCharNotify
   */
  COPY_MYCHARNOTIFY_UUID(uuid.Char_UUID_128);
 8009080:	2319      	movs	r3, #25
 8009082:	703b      	strb	r3, [r7, #0]
 8009084:	23ed      	movs	r3, #237	; 0xed
 8009086:	707b      	strb	r3, [r7, #1]
 8009088:	2382      	movs	r3, #130	; 0x82
 800908a:	70bb      	strb	r3, [r7, #2]
 800908c:	23ae      	movs	r3, #174	; 0xae
 800908e:	70fb      	strb	r3, [r7, #3]
 8009090:	23ed      	movs	r3, #237	; 0xed
 8009092:	713b      	strb	r3, [r7, #4]
 8009094:	2321      	movs	r3, #33	; 0x21
 8009096:	717b      	strb	r3, [r7, #5]
 8009098:	234c      	movs	r3, #76	; 0x4c
 800909a:	71bb      	strb	r3, [r7, #6]
 800909c:	239d      	movs	r3, #157	; 0x9d
 800909e:	71fb      	strb	r3, [r7, #7]
 80090a0:	2341      	movs	r3, #65	; 0x41
 80090a2:	723b      	strb	r3, [r7, #8]
 80090a4:	2345      	movs	r3, #69	; 0x45
 80090a6:	727b      	strb	r3, [r7, #9]
 80090a8:	2322      	movs	r3, #34	; 0x22
 80090aa:	72bb      	strb	r3, [r7, #10]
 80090ac:	238e      	movs	r3, #142	; 0x8e
 80090ae:	72fb      	strb	r3, [r7, #11]
 80090b0:	2301      	movs	r3, #1
 80090b2:	733b      	strb	r3, [r7, #12]
 80090b4:	2300      	movs	r3, #0
 80090b6:	737b      	strb	r3, [r7, #13]
 80090b8:	2300      	movs	r3, #0
 80090ba:	73bb      	strb	r3, [r7, #14]
 80090bc:	2300      	movs	r3, #0
 80090be:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomLed_SvcHdle,
 80090c0:	4b0c      	ldr	r3, [pc, #48]	; (80090f4 <SVCCTL_InitCustomSvc+0x138>)
 80090c2:	8818      	ldrh	r0, [r3, #0]
 80090c4:	2301      	movs	r3, #1
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	463a      	mov	r2, r7
 80090ca:	490c      	ldr	r1, [pc, #48]	; (80090fc <SVCCTL_InitCustomSvc+0x140>)
 80090cc:	9105      	str	r1, [sp, #20]
 80090ce:	2100      	movs	r1, #0
 80090d0:	9104      	str	r1, [sp, #16]
 80090d2:	2110      	movs	r1, #16
 80090d4:	9103      	str	r1, [sp, #12]
 80090d6:	2107      	movs	r1, #7
 80090d8:	9102      	str	r1, [sp, #8]
 80090da:	2100      	movs	r1, #0
 80090dc:	9101      	str	r1, [sp, #4]
 80090de:	2110      	movs	r1, #16
 80090e0:	9100      	str	r1, [sp, #0]
 80090e2:	2102      	movs	r1, #2
 80090e4:	f7fd ffe4 	bl	80070b0 <aci_gatt_add_char>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 80090e8:	bf00      	nop
}
 80090ea:	3710      	adds	r7, #16
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	08008ead 	.word	0x08008ead
 80090f4:	20000178 	.word	0x20000178
 80090f8:	2000017a 	.word	0x2000017a
 80090fc:	2000017c 	.word	0x2000017c

08009100 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b086      	sub	sp, #24
 8009104:	af02      	add	r7, sp, #8
 8009106:	4603      	mov	r3, r0
 8009108:	6039      	str	r1, [r7, #0]
 800910a:	71fb      	strb	r3, [r7, #7]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800910c:	2392      	movs	r3, #146	; 0x92
 800910e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch(CharOpcode)
 8009110:	79fb      	ldrb	r3, [r7, #7]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d002      	beq.n	800911c <Custom_STM_App_Update_Char+0x1c>
 8009116:	2b01      	cmp	r3, #1
 8009118:	d00e      	beq.n	8009138 <Custom_STM_App_Update_Char+0x38>

      /* USER CODE END CUSTOM_STM_Service_1_Char_2*/
      break;

    default:
      break;
 800911a:	e01b      	b.n	8009154 <Custom_STM_App_Update_Char+0x54>
      result = aci_gatt_update_char_value(CustomContext.CustomLed_SvcHdle,
 800911c:	4b10      	ldr	r3, [pc, #64]	; (8009160 <Custom_STM_App_Update_Char+0x60>)
 800911e:	8818      	ldrh	r0, [r3, #0]
 8009120:	4b0f      	ldr	r3, [pc, #60]	; (8009160 <Custom_STM_App_Update_Char+0x60>)
 8009122:	8859      	ldrh	r1, [r3, #2]
 8009124:	2201      	movs	r2, #1
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	9300      	str	r3, [sp, #0]
 800912a:	4613      	mov	r3, r2
 800912c:	2200      	movs	r2, #0
 800912e:	f7fe f8c7 	bl	80072c0 <aci_gatt_update_char_value>
 8009132:	4603      	mov	r3, r0
 8009134:	73fb      	strb	r3, [r7, #15]
      break;
 8009136:	e00d      	b.n	8009154 <Custom_STM_App_Update_Char+0x54>
      result = aci_gatt_update_char_value(CustomContext.CustomLed_SvcHdle,
 8009138:	4b09      	ldr	r3, [pc, #36]	; (8009160 <Custom_STM_App_Update_Char+0x60>)
 800913a:	8818      	ldrh	r0, [r3, #0]
 800913c:	4b08      	ldr	r3, [pc, #32]	; (8009160 <Custom_STM_App_Update_Char+0x60>)
 800913e:	8899      	ldrh	r1, [r3, #4]
 8009140:	2201      	movs	r2, #1
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	9300      	str	r3, [sp, #0]
 8009146:	4613      	mov	r3, r2
 8009148:	2200      	movs	r2, #0
 800914a:	f7fe f8b9 	bl	80072c0 <aci_gatt_update_char_value>
 800914e:	4603      	mov	r3, r0
 8009150:	73fb      	strb	r3, [r7, #15]
      break;
 8009152:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return result;
 8009154:	7bfb      	ldrb	r3, [r7, #15]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	20000178 	.word	0x20000178

08009164 <LL_PWR_EnableBootC2>:
{
 8009164:	b480      	push	{r7}
 8009166:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8009168:	4b05      	ldr	r3, [pc, #20]	; (8009180 <LL_PWR_EnableBootC2+0x1c>)
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	4a04      	ldr	r2, [pc, #16]	; (8009180 <LL_PWR_EnableBootC2+0x1c>)
 800916e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009172:	60d3      	str	r3, [r2, #12]
}
 8009174:	bf00      	nop
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	58000400 	.word	0x58000400

08009184 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800918c:	4b06      	ldr	r3, [pc, #24]	; (80091a8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800918e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8009192:	4905      	ldr	r1, [pc, #20]	; (80091a8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	4313      	orrs	r3, r2
 8009198:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800919c:	bf00      	nop
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr
 80091a8:	58000800 	.word	0x58000800

080091ac <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80091b4:	4b05      	ldr	r3, [pc, #20]	; (80091cc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80091b6:	6a1a      	ldr	r2, [r3, #32]
 80091b8:	4904      	ldr	r1, [pc, #16]	; (80091cc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4313      	orrs	r3, r2
 80091be:	620b      	str	r3, [r1, #32]
}
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr
 80091cc:	58000800 	.word	0x58000800

080091d0 <LL_AHB3_GRP1_EnableClock>:
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80091d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80091e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4013      	ands	r3, r2
 80091f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80091f4:	68fb      	ldr	r3, [r7, #12]
}
 80091f6:	bf00      	nop
 80091f8:	3714      	adds	r7, #20
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr

08009202 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8009202:	b480      	push	{r7}
 8009204:	b085      	sub	sp, #20
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800920a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800920e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8009212:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4313      	orrs	r3, r2
 800921a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800921e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009222:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4013      	ands	r3, r2
 800922a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800922c:	68fb      	ldr	r3, [r7, #12]
}
 800922e:	bf00      	nop
 8009230:	3714      	adds	r7, #20
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr

0800923a <LL_C1_IPCC_EnableIT_TXF>:
{
 800923a:	b480      	push	{r7}
 800923c:	b083      	sub	sp, #12
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	601a      	str	r2, [r3, #0]
}
 800924e:	bf00      	nop
 8009250:	370c      	adds	r7, #12
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr

0800925a <LL_C1_IPCC_EnableIT_RXO>:
{
 800925a:	b480      	push	{r7}
 800925c:	b083      	sub	sp, #12
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f043 0201 	orr.w	r2, r3, #1
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	601a      	str	r2, [r3, #0]
}
 800926e:	bf00      	nop
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr

0800927a <LL_C1_IPCC_EnableTransmitChannel>:
{
 800927a:	b480      	push	{r7}
 800927c:	b083      	sub	sp, #12
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
 8009282:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	685a      	ldr	r2, [r3, #4]
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	041b      	lsls	r3, r3, #16
 800928c:	43db      	mvns	r3, r3
 800928e:	401a      	ands	r2, r3
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	605a      	str	r2, [r3, #4]
}
 8009294:	bf00      	nop
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	685a      	ldr	r2, [r3, #4]
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	041b      	lsls	r3, r3, #16
 80092b2:	431a      	orrs	r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	605a      	str	r2, [r3, #4]
}
 80092b8:	bf00      	nop
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <LL_C1_IPCC_EnableReceiveChannel>:
{
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	685a      	ldr	r2, [r3, #4]
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	43db      	mvns	r3, r3
 80092d6:	401a      	ands	r2, r3
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	605a      	str	r2, [r3, #4]
}
 80092dc:	bf00      	nop
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <LL_C1_IPCC_ClearFlag_CHx>:
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	683a      	ldr	r2, [r7, #0]
 80092f6:	609a      	str	r2, [r3, #8]
}
 80092f8:	bf00      	nop
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <LL_C1_IPCC_SetFlag_CHx>:
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	041a      	lsls	r2, r3, #16
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	609a      	str	r2, [r3, #8]
}
 8009316:	bf00      	nop
 8009318:	370c      	adds	r7, #12
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr

08009322 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8009322:	b480      	push	{r7}
 8009324:	b083      	sub	sp, #12
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
 800932a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	68da      	ldr	r2, [r3, #12]
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	4013      	ands	r3, r2
 8009334:	683a      	ldr	r2, [r7, #0]
 8009336:	429a      	cmp	r2, r3
 8009338:	d101      	bne.n	800933e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800933a:	2301      	movs	r3, #1
 800933c:	e000      	b.n	8009340 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	69da      	ldr	r2, [r3, #28]
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	4013      	ands	r3, r2
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	429a      	cmp	r2, r3
 8009362:	d101      	bne.n	8009368 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8009364:	2301      	movs	r3, #1
 8009366:	e000      	b.n	800936a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8009368:	2300      	movs	r3, #0
}
 800936a:	4618      	mov	r0, r3
 800936c:	370c      	adds	r7, #12
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
	...

08009378 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8009378:	b580      	push	{r7, lr}
 800937a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800937c:	2102      	movs	r1, #2
 800937e:	4819      	ldr	r0, [pc, #100]	; (80093e4 <HW_IPCC_Rx_Handler+0x6c>)
 8009380:	f7ff ffe4 	bl	800934c <LL_C2_IPCC_IsActiveFlag_CHx>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d009      	beq.n	800939e <HW_IPCC_Rx_Handler+0x26>
 800938a:	4b16      	ldr	r3, [pc, #88]	; (80093e4 <HW_IPCC_Rx_Handler+0x6c>)
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	43db      	mvns	r3, r3
 8009390:	f003 0302 	and.w	r3, r3, #2
 8009394:	2b00      	cmp	r3, #0
 8009396:	d002      	beq.n	800939e <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8009398:	f000 f8da 	bl	8009550 <HW_IPCC_SYS_EvtHandler>
 800939c:	e01f      	b.n	80093de <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800939e:	2101      	movs	r1, #1
 80093a0:	4810      	ldr	r0, [pc, #64]	; (80093e4 <HW_IPCC_Rx_Handler+0x6c>)
 80093a2:	f7ff ffd3 	bl	800934c <LL_C2_IPCC_IsActiveFlag_CHx>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d008      	beq.n	80093be <HW_IPCC_Rx_Handler+0x46>
 80093ac:	4b0d      	ldr	r3, [pc, #52]	; (80093e4 <HW_IPCC_Rx_Handler+0x6c>)
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	f003 0301 	and.w	r3, r3, #1
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d102      	bne.n	80093be <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 80093b8:	f000 f88e 	bl	80094d8 <HW_IPCC_BLE_EvtHandler>
 80093bc:	e00f      	b.n	80093de <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80093be:	2108      	movs	r1, #8
 80093c0:	4808      	ldr	r0, [pc, #32]	; (80093e4 <HW_IPCC_Rx_Handler+0x6c>)
 80093c2:	f7ff ffc3 	bl	800934c <LL_C2_IPCC_IsActiveFlag_CHx>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d009      	beq.n	80093e0 <HW_IPCC_Rx_Handler+0x68>
 80093cc:	4b05      	ldr	r3, [pc, #20]	; (80093e4 <HW_IPCC_Rx_Handler+0x6c>)
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	43db      	mvns	r3, r3
 80093d2:	f003 0308 	and.w	r3, r3, #8
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d002      	beq.n	80093e0 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80093da:	f000 f905 	bl	80095e8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80093de:	bf00      	nop
 80093e0:	bf00      	nop
}
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	58000c00 	.word	0x58000c00

080093e8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80093ec:	2102      	movs	r1, #2
 80093ee:	481a      	ldr	r0, [pc, #104]	; (8009458 <HW_IPCC_Tx_Handler+0x70>)
 80093f0:	f7ff ff97 	bl	8009322 <LL_C1_IPCC_IsActiveFlag_CHx>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d109      	bne.n	800940e <HW_IPCC_Tx_Handler+0x26>
 80093fa:	4b17      	ldr	r3, [pc, #92]	; (8009458 <HW_IPCC_Tx_Handler+0x70>)
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	43db      	mvns	r3, r3
 8009400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009404:	2b00      	cmp	r3, #0
 8009406:	d002      	beq.n	800940e <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8009408:	f000 f896 	bl	8009538 <HW_IPCC_SYS_CmdEvtHandler>
 800940c:	e020      	b.n	8009450 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800940e:	2108      	movs	r1, #8
 8009410:	4811      	ldr	r0, [pc, #68]	; (8009458 <HW_IPCC_Tx_Handler+0x70>)
 8009412:	f7ff ff86 	bl	8009322 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d109      	bne.n	8009430 <HW_IPCC_Tx_Handler+0x48>
 800941c:	4b0e      	ldr	r3, [pc, #56]	; (8009458 <HW_IPCC_Tx_Handler+0x70>)
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	43db      	mvns	r3, r3
 8009422:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009426:	2b00      	cmp	r3, #0
 8009428:	d002      	beq.n	8009430 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 800942a:	f000 f8bf 	bl	80095ac <HW_IPCC_MM_FreeBufHandler>
 800942e:	e00f      	b.n	8009450 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8009430:	2120      	movs	r1, #32
 8009432:	4809      	ldr	r0, [pc, #36]	; (8009458 <HW_IPCC_Tx_Handler+0x70>)
 8009434:	f7ff ff75 	bl	8009322 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d109      	bne.n	8009452 <HW_IPCC_Tx_Handler+0x6a>
 800943e:	4b06      	ldr	r3, [pc, #24]	; (8009458 <HW_IPCC_Tx_Handler+0x70>)
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	43db      	mvns	r3, r3
 8009444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009448:	2b00      	cmp	r3, #0
 800944a:	d002      	beq.n	8009452 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800944c:	f000 f850 	bl	80094f0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8009450:	bf00      	nop
 8009452:	bf00      	nop
}
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	58000c00 	.word	0x58000c00

0800945c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800945c:	b580      	push	{r7, lr}
 800945e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8009460:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009464:	f7ff fecd 	bl	8009202 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8009468:	f44f 7000 	mov.w	r0, #512	; 0x200
 800946c:	f7ff fe8a 	bl	8009184 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8009470:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009474:	f7ff fe9a 	bl	80091ac <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8009478:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800947a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800947c:	f7ff fe72 	bl	8009164 <LL_PWR_EnableBootC2>

  return;
 8009480:	bf00      	nop
}
 8009482:	bd80      	pop	{r7, pc}

08009484 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8009484:	b580      	push	{r7, lr}
 8009486:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8009488:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800948c:	f7ff fea0 	bl	80091d0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8009490:	4806      	ldr	r0, [pc, #24]	; (80094ac <HW_IPCC_Init+0x28>)
 8009492:	f7ff fee2 	bl	800925a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8009496:	4805      	ldr	r0, [pc, #20]	; (80094ac <HW_IPCC_Init+0x28>)
 8009498:	f7ff fecf 	bl	800923a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800949c:	202c      	movs	r0, #44	; 0x2c
 800949e:	f7f9 fc54 	bl	8002d4a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80094a2:	202d      	movs	r0, #45	; 0x2d
 80094a4:	f7f9 fc51 	bl	8002d4a <HAL_NVIC_EnableIRQ>

  return;
 80094a8:	bf00      	nop
}
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	58000c00 	.word	0x58000c00

080094b0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80094b4:	2101      	movs	r1, #1
 80094b6:	4802      	ldr	r0, [pc, #8]	; (80094c0 <HW_IPCC_BLE_Init+0x10>)
 80094b8:	f7ff ff04 	bl	80092c4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80094bc:	bf00      	nop
}
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	58000c00 	.word	0x58000c00

080094c4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80094c8:	2101      	movs	r1, #1
 80094ca:	4802      	ldr	r0, [pc, #8]	; (80094d4 <HW_IPCC_BLE_SendCmd+0x10>)
 80094cc:	f7ff ff1a 	bl	8009304 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80094d0:	bf00      	nop
}
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	58000c00 	.word	0x58000c00

080094d8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80094dc:	f7fe ff04 	bl	80082e8 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80094e0:	2101      	movs	r1, #1
 80094e2:	4802      	ldr	r0, [pc, #8]	; (80094ec <HW_IPCC_BLE_EvtHandler+0x14>)
 80094e4:	f7ff ff00 	bl	80092e8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80094e8:	bf00      	nop
}
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	58000c00 	.word	0x58000c00

080094f0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80094f4:	2120      	movs	r1, #32
 80094f6:	4803      	ldr	r0, [pc, #12]	; (8009504 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80094f8:	f7ff fed2 	bl	80092a0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80094fc:	f7fe ff24 	bl	8008348 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8009500:	bf00      	nop
}
 8009502:	bd80      	pop	{r7, pc}
 8009504:	58000c00 	.word	0x58000c00

08009508 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8009508:	b580      	push	{r7, lr}
 800950a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800950c:	2102      	movs	r1, #2
 800950e:	4802      	ldr	r0, [pc, #8]	; (8009518 <HW_IPCC_SYS_Init+0x10>)
 8009510:	f7ff fed8 	bl	80092c4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009514:	bf00      	nop
}
 8009516:	bd80      	pop	{r7, pc}
 8009518:	58000c00 	.word	0x58000c00

0800951c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800951c:	b580      	push	{r7, lr}
 800951e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009520:	2102      	movs	r1, #2
 8009522:	4804      	ldr	r0, [pc, #16]	; (8009534 <HW_IPCC_SYS_SendCmd+0x18>)
 8009524:	f7ff feee 	bl	8009304 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009528:	2102      	movs	r1, #2
 800952a:	4802      	ldr	r0, [pc, #8]	; (8009534 <HW_IPCC_SYS_SendCmd+0x18>)
 800952c:	f7ff fea5 	bl	800927a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8009530:	bf00      	nop
}
 8009532:	bd80      	pop	{r7, pc}
 8009534:	58000c00 	.word	0x58000c00

08009538 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8009538:	b580      	push	{r7, lr}
 800953a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800953c:	2102      	movs	r1, #2
 800953e:	4803      	ldr	r0, [pc, #12]	; (800954c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8009540:	f7ff feae 	bl	80092a0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8009544:	f7fe ff50 	bl	80083e8 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8009548:	bf00      	nop
}
 800954a:	bd80      	pop	{r7, pc}
 800954c:	58000c00 	.word	0x58000c00

08009550 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8009550:	b580      	push	{r7, lr}
 8009552:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8009554:	f7fe ff5e 	bl	8008414 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009558:	2102      	movs	r1, #2
 800955a:	4802      	ldr	r0, [pc, #8]	; (8009564 <HW_IPCC_SYS_EvtHandler+0x14>)
 800955c:	f7ff fec4 	bl	80092e8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009560:	bf00      	nop
}
 8009562:	bd80      	pop	{r7, pc}
 8009564:	58000c00 	.word	0x58000c00

08009568 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8009570:	2108      	movs	r1, #8
 8009572:	480c      	ldr	r0, [pc, #48]	; (80095a4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009574:	f7ff fed5 	bl	8009322 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009578:	4603      	mov	r3, r0
 800957a:	2b00      	cmp	r3, #0
 800957c:	d007      	beq.n	800958e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800957e:	4a0a      	ldr	r2, [pc, #40]	; (80095a8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009584:	2108      	movs	r1, #8
 8009586:	4807      	ldr	r0, [pc, #28]	; (80095a4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009588:	f7ff fe77 	bl	800927a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800958c:	e006      	b.n	800959c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009592:	2108      	movs	r1, #8
 8009594:	4803      	ldr	r0, [pc, #12]	; (80095a4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009596:	f7ff feb5 	bl	8009304 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800959a:	bf00      	nop
}
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	58000c00 	.word	0x58000c00
 80095a8:	20000944 	.word	0x20000944

080095ac <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80095b0:	2108      	movs	r1, #8
 80095b2:	4806      	ldr	r0, [pc, #24]	; (80095cc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80095b4:	f7ff fe74 	bl	80092a0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80095b8:	4b05      	ldr	r3, [pc, #20]	; (80095d0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80095be:	2108      	movs	r1, #8
 80095c0:	4802      	ldr	r0, [pc, #8]	; (80095cc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80095c2:	f7ff fe9f 	bl	8009304 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80095c6:	bf00      	nop
}
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	58000c00 	.word	0x58000c00
 80095d0:	20000944 	.word	0x20000944

080095d4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80095d8:	2108      	movs	r1, #8
 80095da:	4802      	ldr	r0, [pc, #8]	; (80095e4 <HW_IPCC_TRACES_Init+0x10>)
 80095dc:	f7ff fe72 	bl	80092c4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80095e0:	bf00      	nop
}
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	58000c00 	.word	0x58000c00

080095e8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80095ec:	f7fe ffba 	bl	8008564 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80095f0:	2108      	movs	r1, #8
 80095f2:	4802      	ldr	r0, [pc, #8]	; (80095fc <HW_IPCC_TRACES_EvtHandler+0x14>)
 80095f4:	f7ff fe78 	bl	80092e8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80095f8:	bf00      	nop
}
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	58000c00 	.word	0x58000c00

08009600 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8009600:	b480      	push	{r7}
 8009602:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8009604:	4b05      	ldr	r3, [pc, #20]	; (800961c <UTIL_LPM_Init+0x1c>)
 8009606:	2200      	movs	r2, #0
 8009608:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800960a:	4b05      	ldr	r3, [pc, #20]	; (8009620 <UTIL_LPM_Init+0x20>)
 800960c:	2200      	movs	r2, #0
 800960e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8009610:	bf00      	nop
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	20000948 	.word	0x20000948
 8009620:	2000094c 	.word	0x2000094c

08009624 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8009624:	b480      	push	{r7}
 8009626:	b087      	sub	sp, #28
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	460b      	mov	r3, r1
 800962e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009630:	f3ef 8310 	mrs	r3, PRIMASK
 8009634:	613b      	str	r3, [r7, #16]
  return(result);
 8009636:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8009638:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800963a:	b672      	cpsid	i
}
 800963c:	bf00      	nop
  
  switch(state)
 800963e:	78fb      	ldrb	r3, [r7, #3]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d008      	beq.n	8009656 <UTIL_LPM_SetOffMode+0x32>
 8009644:	2b01      	cmp	r3, #1
 8009646:	d10e      	bne.n	8009666 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8009648:	4b0d      	ldr	r3, [pc, #52]	; (8009680 <UTIL_LPM_SetOffMode+0x5c>)
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4313      	orrs	r3, r2
 8009650:	4a0b      	ldr	r2, [pc, #44]	; (8009680 <UTIL_LPM_SetOffMode+0x5c>)
 8009652:	6013      	str	r3, [r2, #0]
      break;
 8009654:	e008      	b.n	8009668 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	43da      	mvns	r2, r3
 800965a:	4b09      	ldr	r3, [pc, #36]	; (8009680 <UTIL_LPM_SetOffMode+0x5c>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4013      	ands	r3, r2
 8009660:	4a07      	ldr	r2, [pc, #28]	; (8009680 <UTIL_LPM_SetOffMode+0x5c>)
 8009662:	6013      	str	r3, [r2, #0]
      break;
 8009664:	e000      	b.n	8009668 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8009666:	bf00      	nop
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f383 8810 	msr	PRIMASK, r3
}
 8009672:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8009674:	bf00      	nop
 8009676:	371c      	adds	r7, #28
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr
 8009680:	2000094c 	.word	0x2000094c

08009684 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b08c      	sub	sp, #48	; 0x30
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800968c:	4b6a      	ldr	r3, [pc, #424]	; (8009838 <UTIL_SEQ_Run+0x1b4>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	627b      	str	r3, [r7, #36]	; 0x24
  SuperMask &= Mask_bm;
 8009692:	4b69      	ldr	r3, [pc, #420]	; (8009838 <UTIL_SEQ_Run+0x1b4>)
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4013      	ands	r3, r2
 800969a:	4a67      	ldr	r2, [pc, #412]	; (8009838 <UTIL_SEQ_Run+0x1b4>)
 800969c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800969e:	4b67      	ldr	r3, [pc, #412]	; (800983c <UTIL_SEQ_Run+0x1b8>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80096a4:	e086      	b.n	80097b4 <UTIL_SEQ_Run+0x130>
  {
    counter = 0U;
 80096a6:	2300      	movs	r3, #0
 80096a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80096aa:	e002      	b.n	80096b2 <UTIL_SEQ_Run+0x2e>
    {
      counter++;
 80096ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ae:	3301      	adds	r3, #1
 80096b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80096b2:	4a63      	ldr	r2, [pc, #396]	; (8009840 <UTIL_SEQ_Run+0x1bc>)
 80096b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80096ba:	4b62      	ldr	r3, [pc, #392]	; (8009844 <UTIL_SEQ_Run+0x1c0>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	401a      	ands	r2, r3
 80096c0:	4b5d      	ldr	r3, [pc, #372]	; (8009838 <UTIL_SEQ_Run+0x1b4>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4013      	ands	r3, r2
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d0f0      	beq.n	80096ac <UTIL_SEQ_Run+0x28>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 80096ca:	4a5d      	ldr	r2, [pc, #372]	; (8009840 <UTIL_SEQ_Run+0x1bc>)
 80096cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ce:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80096d2:	4b5c      	ldr	r3, [pc, #368]	; (8009844 <UTIL_SEQ_Run+0x1c0>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	401a      	ands	r2, r3
 80096d8:	4b57      	ldr	r3, [pc, #348]	; (8009838 <UTIL_SEQ_Run+0x1b4>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4013      	ands	r3, r2
 80096de:	623b      	str	r3, [r7, #32]
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80096e0:	4a57      	ldr	r2, [pc, #348]	; (8009840 <UTIL_SEQ_Run+0x1bc>)
 80096e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e4:	00db      	lsls	r3, r3, #3
 80096e6:	4413      	add	r3, r2
 80096e8:	685a      	ldr	r2, [r3, #4]
 80096ea:	6a3b      	ldr	r3, [r7, #32]
 80096ec:	4013      	ands	r3, r2
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d106      	bne.n	8009700 <UTIL_SEQ_Run+0x7c>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80096f2:	4a53      	ldr	r2, [pc, #332]	; (8009840 <UTIL_SEQ_Run+0x1bc>)
 80096f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f6:	00db      	lsls	r3, r3, #3
 80096f8:	4413      	add	r3, r2
 80096fa:	f04f 32ff 	mov.w	r2, #4294967295
 80096fe:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8009700:	4a4f      	ldr	r2, [pc, #316]	; (8009840 <UTIL_SEQ_Run+0x1bc>)
 8009702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009704:	00db      	lsls	r3, r3, #3
 8009706:	4413      	add	r3, r2
 8009708:	685a      	ldr	r2, [r3, #4]
 800970a:	6a3b      	ldr	r3, [r7, #32]
 800970c:	4013      	ands	r3, r2
 800970e:	4618      	mov	r0, r3
 8009710:	f000 f9ac 	bl	8009a6c <SEQ_BitPosition>
 8009714:	4603      	mov	r3, r0
 8009716:	461a      	mov	r2, r3
 8009718:	4b4b      	ldr	r3, [pc, #300]	; (8009848 <UTIL_SEQ_Run+0x1c4>)
 800971a:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800971c:	4a48      	ldr	r2, [pc, #288]	; (8009840 <UTIL_SEQ_Run+0x1bc>)
 800971e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009720:	00db      	lsls	r3, r3, #3
 8009722:	4413      	add	r3, r2
 8009724:	685a      	ldr	r2, [r3, #4]
 8009726:	4b48      	ldr	r3, [pc, #288]	; (8009848 <UTIL_SEQ_Run+0x1c4>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	2101      	movs	r1, #1
 800972c:	fa01 f303 	lsl.w	r3, r1, r3
 8009730:	43db      	mvns	r3, r3
 8009732:	401a      	ands	r2, r3
 8009734:	4942      	ldr	r1, [pc, #264]	; (8009840 <UTIL_SEQ_Run+0x1bc>)
 8009736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009738:	00db      	lsls	r3, r3, #3
 800973a:	440b      	add	r3, r1
 800973c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800973e:	f3ef 8310 	mrs	r3, PRIMASK
 8009742:	617b      	str	r3, [r7, #20]
  return(result);
 8009744:	697b      	ldr	r3, [r7, #20]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009746:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009748:	b672      	cpsid	i
}
 800974a:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800974c:	4b3e      	ldr	r3, [pc, #248]	; (8009848 <UTIL_SEQ_Run+0x1c4>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2201      	movs	r2, #1
 8009752:	fa02 f303 	lsl.w	r3, r2, r3
 8009756:	43da      	mvns	r2, r3
 8009758:	4b38      	ldr	r3, [pc, #224]	; (800983c <UTIL_SEQ_Run+0x1b8>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4013      	ands	r3, r2
 800975e:	4a37      	ldr	r2, [pc, #220]	; (800983c <UTIL_SEQ_Run+0x1b8>)
 8009760:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009762:	2302      	movs	r3, #2
 8009764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009766:	e013      	b.n	8009790 <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8009768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800976a:	3b01      	subs	r3, #1
 800976c:	4a34      	ldr	r2, [pc, #208]	; (8009840 <UTIL_SEQ_Run+0x1bc>)
 800976e:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8009772:	4b35      	ldr	r3, [pc, #212]	; (8009848 <UTIL_SEQ_Run+0x1c4>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2201      	movs	r2, #1
 8009778:	fa02 f303 	lsl.w	r3, r2, r3
 800977c:	43da      	mvns	r2, r3
 800977e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009780:	3b01      	subs	r3, #1
 8009782:	400a      	ands	r2, r1
 8009784:	492e      	ldr	r1, [pc, #184]	; (8009840 <UTIL_SEQ_Run+0x1bc>)
 8009786:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800978a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978c:	3b01      	subs	r3, #1
 800978e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009792:	2b00      	cmp	r3, #0
 8009794:	d1e8      	bne.n	8009768 <UTIL_SEQ_Run+0xe4>
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	f383 8810 	msr	PRIMASK, r3
}
 80097a0:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80097a2:	4b29      	ldr	r3, [pc, #164]	; (8009848 <UTIL_SEQ_Run+0x1c4>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a29      	ldr	r2, [pc, #164]	; (800984c <UTIL_SEQ_Run+0x1c8>)
 80097a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097ac:	4798      	blx	r3
    
    local_taskset = TaskSet;
 80097ae:	4b23      	ldr	r3, [pc, #140]	; (800983c <UTIL_SEQ_Run+0x1b8>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80097b4:	4b23      	ldr	r3, [pc, #140]	; (8009844 <UTIL_SEQ_Run+0x1c0>)
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ba:	401a      	ands	r2, r3
 80097bc:	4b1e      	ldr	r3, [pc, #120]	; (8009838 <UTIL_SEQ_Run+0x1b4>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4013      	ands	r3, r2
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d007      	beq.n	80097d6 <UTIL_SEQ_Run+0x152>
 80097c6:	4b22      	ldr	r3, [pc, #136]	; (8009850 <UTIL_SEQ_Run+0x1cc>)
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	4b22      	ldr	r3, [pc, #136]	; (8009854 <UTIL_SEQ_Run+0x1d0>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4013      	ands	r3, r2
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f43f af68 	beq.w	80096a6 <UTIL_SEQ_Run+0x22>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80097d6:	4b1c      	ldr	r3, [pc, #112]	; (8009848 <UTIL_SEQ_Run+0x1c4>)
 80097d8:	f04f 32ff 	mov.w	r2, #4294967295
 80097dc:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80097de:	f000 f937 	bl	8009a50 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097e2:	f3ef 8310 	mrs	r3, PRIMASK
 80097e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80097e8:	68fb      	ldr	r3, [r7, #12]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80097ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 80097ec:	b672      	cpsid	i
}
 80097ee:	bf00      	nop
  local_taskset = TaskSet;
 80097f0:	4b12      	ldr	r3, [pc, #72]	; (800983c <UTIL_SEQ_Run+0x1b8>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 80097f6:	4b13      	ldr	r3, [pc, #76]	; (8009844 <UTIL_SEQ_Run+0x1c0>)
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fc:	401a      	ands	r2, r3
 80097fe:	4b0e      	ldr	r3, [pc, #56]	; (8009838 <UTIL_SEQ_Run+0x1b4>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4013      	ands	r3, r2
 8009804:	2b00      	cmp	r3, #0
 8009806:	d108      	bne.n	800981a <UTIL_SEQ_Run+0x196>
 8009808:	4b11      	ldr	r3, [pc, #68]	; (8009850 <UTIL_SEQ_Run+0x1cc>)
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	4b11      	ldr	r3, [pc, #68]	; (8009854 <UTIL_SEQ_Run+0x1d0>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4013      	ands	r3, r2
 8009812:	2b00      	cmp	r3, #0
 8009814:	d101      	bne.n	800981a <UTIL_SEQ_Run+0x196>
  {
	UTIL_SEQ_Idle( );
 8009816:	f7f7 fadb 	bl	8000dd0 <UTIL_SEQ_Idle>
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	f383 8810 	msr	PRIMASK, r3
}
 8009824:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 8009826:	f000 f91a 	bl	8009a5e <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800982a:	4a03      	ldr	r2, [pc, #12]	; (8009838 <UTIL_SEQ_Run+0x1b4>)
 800982c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982e:	6013      	str	r3, [r2, #0]

  return;
 8009830:	bf00      	nop
}
 8009832:	3730      	adds	r7, #48	; 0x30
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}
 8009838:	2000003c 	.word	0x2000003c
 800983c:	20000950 	.word	0x20000950
 8009840:	200009e0 	.word	0x200009e0
 8009844:	20000038 	.word	0x20000038
 8009848:	2000095c 	.word	0x2000095c
 800984c:	20000960 	.word	0x20000960
 8009850:	20000954 	.word	0x20000954
 8009854:	20000958 	.word	0x20000958

08009858 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b088      	sub	sp, #32
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009864:	f3ef 8310 	mrs	r3, PRIMASK
 8009868:	617b      	str	r3, [r7, #20]
  return(result);
 800986a:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800986c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800986e:	b672      	cpsid	i
}
 8009870:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f000 f8fa 	bl	8009a6c <SEQ_BitPosition>
 8009878:	4603      	mov	r3, r0
 800987a:	4619      	mov	r1, r3
 800987c:	4a06      	ldr	r2, [pc, #24]	; (8009898 <UTIL_SEQ_RegTask+0x40>)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	f383 8810 	msr	PRIMASK, r3
}
 800988e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8009890:	bf00      	nop
}
 8009892:	3720      	adds	r7, #32
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	20000960 	.word	0x20000960

0800989c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800989c:	b480      	push	{r7}
 800989e:	b087      	sub	sp, #28
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098a6:	f3ef 8310 	mrs	r3, PRIMASK
 80098aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80098ac:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80098ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80098b0:	b672      	cpsid	i
}
 80098b2:	bf00      	nop

  TaskSet |= TaskId_bm;
 80098b4:	4b0d      	ldr	r3, [pc, #52]	; (80098ec <UTIL_SEQ_SetTask+0x50>)
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	4a0b      	ldr	r2, [pc, #44]	; (80098ec <UTIL_SEQ_SetTask+0x50>)
 80098be:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80098c0:	4a0b      	ldr	r2, [pc, #44]	; (80098f0 <UTIL_SEQ_SetTask+0x54>)
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	431a      	orrs	r2, r3
 80098cc:	4908      	ldr	r1, [pc, #32]	; (80098f0 <UTIL_SEQ_SetTask+0x54>)
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	f383 8810 	msr	PRIMASK, r3
}
 80098de:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80098e0:	bf00      	nop
}
 80098e2:	371c      	adds	r7, #28
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr
 80098ec:	20000950 	.word	0x20000950
 80098f0:	200009e0 	.word	0x200009e0

080098f4 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80098f4:	b480      	push	{r7}
 80098f6:	b087      	sub	sp, #28
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098fc:	f3ef 8310 	mrs	r3, PRIMASK
 8009900:	60fb      	str	r3, [r7, #12]
  return(result);
 8009902:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009904:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009906:	b672      	cpsid	i
}
 8009908:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	43da      	mvns	r2, r3
 800990e:	4b08      	ldr	r3, [pc, #32]	; (8009930 <UTIL_SEQ_PauseTask+0x3c>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4013      	ands	r3, r2
 8009914:	4a06      	ldr	r2, [pc, #24]	; (8009930 <UTIL_SEQ_PauseTask+0x3c>)
 8009916:	6013      	str	r3, [r2, #0]
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	f383 8810 	msr	PRIMASK, r3
}
 8009922:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009924:	bf00      	nop
}
 8009926:	371c      	adds	r7, #28
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr
 8009930:	20000038 	.word	0x20000038

08009934 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009934:	b480      	push	{r7}
 8009936:	b087      	sub	sp, #28
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800993c:	f3ef 8310 	mrs	r3, PRIMASK
 8009940:	60fb      	str	r3, [r7, #12]
  return(result);
 8009942:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009944:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009946:	b672      	cpsid	i
}
 8009948:	bf00      	nop

  TaskMask |= TaskId_bm;
 800994a:	4b09      	ldr	r3, [pc, #36]	; (8009970 <UTIL_SEQ_ResumeTask+0x3c>)
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4313      	orrs	r3, r2
 8009952:	4a07      	ldr	r2, [pc, #28]	; (8009970 <UTIL_SEQ_ResumeTask+0x3c>)
 8009954:	6013      	str	r3, [r2, #0]
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	f383 8810 	msr	PRIMASK, r3
}
 8009960:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009962:	bf00      	nop
}
 8009964:	371c      	adds	r7, #28
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	20000038 	.word	0x20000038

08009974 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8009974:	b480      	push	{r7}
 8009976:	b087      	sub	sp, #28
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800997c:	f3ef 8310 	mrs	r3, PRIMASK
 8009980:	60fb      	str	r3, [r7, #12]
  return(result);
 8009982:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009984:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009986:	b672      	cpsid	i
}
 8009988:	bf00      	nop

  EvtSet |= EvtId_bm;
 800998a:	4b09      	ldr	r3, [pc, #36]	; (80099b0 <UTIL_SEQ_SetEvt+0x3c>)
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	4313      	orrs	r3, r2
 8009992:	4a07      	ldr	r2, [pc, #28]	; (80099b0 <UTIL_SEQ_SetEvt+0x3c>)
 8009994:	6013      	str	r3, [r2, #0]
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	f383 8810 	msr	PRIMASK, r3
}
 80099a0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80099a2:	bf00      	nop
}
 80099a4:	371c      	adds	r7, #28
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop
 80099b0:	20000954 	.word	0x20000954

080099b4 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b088      	sub	sp, #32
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80099bc:	4b21      	ldr	r3, [pc, #132]	; (8009a44 <UTIL_SEQ_WaitEvt+0x90>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80099c2:	4b20      	ldr	r3, [pc, #128]	; (8009a44 <UTIL_SEQ_WaitEvt+0x90>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ca:	d102      	bne.n	80099d2 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 80099cc:	2300      	movs	r3, #0
 80099ce:	61fb      	str	r3, [r7, #28]
 80099d0:	e005      	b.n	80099de <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 80099d2:	4b1c      	ldr	r3, [pc, #112]	; (8009a44 <UTIL_SEQ_WaitEvt+0x90>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2201      	movs	r2, #1
 80099d8:	fa02 f303 	lsl.w	r3, r2, r3
 80099dc:	61fb      	str	r3, [r7, #28]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80099de:	4b1a      	ldr	r3, [pc, #104]	; (8009a48 <UTIL_SEQ_WaitEvt+0x94>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80099e4:	4a18      	ldr	r2, [pc, #96]	; (8009a48 <UTIL_SEQ_WaitEvt+0x94>)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 80099ea:	e005      	b.n	80099f8 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 80099ec:	4b16      	ldr	r3, [pc, #88]	; (8009a48 <UTIL_SEQ_WaitEvt+0x94>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4619      	mov	r1, r3
 80099f2:	69f8      	ldr	r0, [r7, #28]
 80099f4:	f7f7 f9f3 	bl	8000dde <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 80099f8:	4b14      	ldr	r3, [pc, #80]	; (8009a4c <UTIL_SEQ_WaitEvt+0x98>)
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	4b12      	ldr	r3, [pc, #72]	; (8009a48 <UTIL_SEQ_WaitEvt+0x94>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4013      	ands	r3, r2
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d0f2      	beq.n	80099ec <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8009a06:	4a0f      	ldr	r2, [pc, #60]	; (8009a44 <UTIL_SEQ_WaitEvt+0x90>)
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8009a10:	60bb      	str	r3, [r7, #8]
  return(result);
 8009a12:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009a14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a16:	b672      	cpsid	i
}
 8009a18:	bf00      	nop

  EvtSet &= (~EvtWaited);
 8009a1a:	4b0b      	ldr	r3, [pc, #44]	; (8009a48 <UTIL_SEQ_WaitEvt+0x94>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	43da      	mvns	r2, r3
 8009a20:	4b0a      	ldr	r3, [pc, #40]	; (8009a4c <UTIL_SEQ_WaitEvt+0x98>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4013      	ands	r3, r2
 8009a26:	4a09      	ldr	r2, [pc, #36]	; (8009a4c <UTIL_SEQ_WaitEvt+0x98>)
 8009a28:	6013      	str	r3, [r2, #0]
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f383 8810 	msr	PRIMASK, r3
}
 8009a34:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8009a36:	4a04      	ldr	r2, [pc, #16]	; (8009a48 <UTIL_SEQ_WaitEvt+0x94>)
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	6013      	str	r3, [r2, #0]

  return;
 8009a3c:	bf00      	nop
}
 8009a3e:	3720      	adds	r7, #32
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	2000095c 	.word	0x2000095c
 8009a48:	20000958 	.word	0x20000958
 8009a4c:	20000954 	.word	0x20000954

08009a50 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8009a50:	b480      	push	{r7}
 8009a52:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009a54:	bf00      	nop
}
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr

08009a5e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8009a5e:	b480      	push	{r7}
 8009a60:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009a62:	bf00      	nop
}
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b085      	sub	sp, #20
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 8009a74:	2300      	movs	r3, #0
 8009a76:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	0c1b      	lsrs	r3, r3, #16
 8009a7c:	041b      	lsls	r3, r3, #16
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d104      	bne.n	8009a8c <SEQ_BitPosition+0x20>
 8009a82:	2310      	movs	r3, #16
 8009a84:	73fb      	strb	r3, [r7, #15]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	041b      	lsls	r3, r3, #16
 8009a8a:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d105      	bne.n	8009aa2 <SEQ_BitPosition+0x36>
 8009a96:	7bfb      	ldrb	r3, [r7, #15]
 8009a98:	3308      	adds	r3, #8
 8009a9a:	73fb      	strb	r3, [r7, #15]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	021b      	lsls	r3, r3, #8
 8009aa0:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d105      	bne.n	8009ab8 <SEQ_BitPosition+0x4c>
 8009aac:	7bfb      	ldrb	r3, [r7, #15]
 8009aae:	3304      	adds	r3, #4
 8009ab0:	73fb      	strb	r3, [r7, #15]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	011b      	lsls	r3, r3, #4
 8009ab6:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	0f1b      	lsrs	r3, r3, #28
 8009abc:	4a07      	ldr	r2, [pc, #28]	; (8009adc <SEQ_BitPosition+0x70>)
 8009abe:	5cd2      	ldrb	r2, [r2, r3]
 8009ac0:	7bfb      	ldrb	r3, [r7, #15]
 8009ac2:	4413      	add	r3, r2
 8009ac4:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8009ac6:	7bfb      	ldrb	r3, [r7, #15]
 8009ac8:	f1c3 031f 	rsb	r3, r3, #31
 8009acc:	b2db      	uxtb	r3, r3
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3714      	adds	r7, #20
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr
 8009ada:	bf00      	nop
 8009adc:	0800d684 	.word	0x0800d684

08009ae0 <__errno>:
 8009ae0:	4b01      	ldr	r3, [pc, #4]	; (8009ae8 <__errno+0x8>)
 8009ae2:	6818      	ldr	r0, [r3, #0]
 8009ae4:	4770      	bx	lr
 8009ae6:	bf00      	nop
 8009ae8:	20000040 	.word	0x20000040

08009aec <__libc_init_array>:
 8009aec:	b570      	push	{r4, r5, r6, lr}
 8009aee:	4d0d      	ldr	r5, [pc, #52]	; (8009b24 <__libc_init_array+0x38>)
 8009af0:	4c0d      	ldr	r4, [pc, #52]	; (8009b28 <__libc_init_array+0x3c>)
 8009af2:	1b64      	subs	r4, r4, r5
 8009af4:	10a4      	asrs	r4, r4, #2
 8009af6:	2600      	movs	r6, #0
 8009af8:	42a6      	cmp	r6, r4
 8009afa:	d109      	bne.n	8009b10 <__libc_init_array+0x24>
 8009afc:	4d0b      	ldr	r5, [pc, #44]	; (8009b2c <__libc_init_array+0x40>)
 8009afe:	4c0c      	ldr	r4, [pc, #48]	; (8009b30 <__libc_init_array+0x44>)
 8009b00:	f000 fc8e 	bl	800a420 <_init>
 8009b04:	1b64      	subs	r4, r4, r5
 8009b06:	10a4      	asrs	r4, r4, #2
 8009b08:	2600      	movs	r6, #0
 8009b0a:	42a6      	cmp	r6, r4
 8009b0c:	d105      	bne.n	8009b1a <__libc_init_array+0x2e>
 8009b0e:	bd70      	pop	{r4, r5, r6, pc}
 8009b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b14:	4798      	blx	r3
 8009b16:	3601      	adds	r6, #1
 8009b18:	e7ee      	b.n	8009af8 <__libc_init_array+0xc>
 8009b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b1e:	4798      	blx	r3
 8009b20:	3601      	adds	r6, #1
 8009b22:	e7f2      	b.n	8009b0a <__libc_init_array+0x1e>
 8009b24:	0800d730 	.word	0x0800d730
 8009b28:	0800d730 	.word	0x0800d730
 8009b2c:	0800d730 	.word	0x0800d730
 8009b30:	0800d734 	.word	0x0800d734

08009b34 <memcpy>:
 8009b34:	440a      	add	r2, r1
 8009b36:	4291      	cmp	r1, r2
 8009b38:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b3c:	d100      	bne.n	8009b40 <memcpy+0xc>
 8009b3e:	4770      	bx	lr
 8009b40:	b510      	push	{r4, lr}
 8009b42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b4a:	4291      	cmp	r1, r2
 8009b4c:	d1f9      	bne.n	8009b42 <memcpy+0xe>
 8009b4e:	bd10      	pop	{r4, pc}

08009b50 <memmove>:
 8009b50:	4288      	cmp	r0, r1
 8009b52:	b510      	push	{r4, lr}
 8009b54:	eb01 0402 	add.w	r4, r1, r2
 8009b58:	d902      	bls.n	8009b60 <memmove+0x10>
 8009b5a:	4284      	cmp	r4, r0
 8009b5c:	4623      	mov	r3, r4
 8009b5e:	d807      	bhi.n	8009b70 <memmove+0x20>
 8009b60:	1e43      	subs	r3, r0, #1
 8009b62:	42a1      	cmp	r1, r4
 8009b64:	d008      	beq.n	8009b78 <memmove+0x28>
 8009b66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b6e:	e7f8      	b.n	8009b62 <memmove+0x12>
 8009b70:	4402      	add	r2, r0
 8009b72:	4601      	mov	r1, r0
 8009b74:	428a      	cmp	r2, r1
 8009b76:	d100      	bne.n	8009b7a <memmove+0x2a>
 8009b78:	bd10      	pop	{r4, pc}
 8009b7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b82:	e7f7      	b.n	8009b74 <memmove+0x24>

08009b84 <memset>:
 8009b84:	4402      	add	r2, r0
 8009b86:	4603      	mov	r3, r0
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d100      	bne.n	8009b8e <memset+0xa>
 8009b8c:	4770      	bx	lr
 8009b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b92:	e7f9      	b.n	8009b88 <memset+0x4>

08009b94 <siprintf>:
 8009b94:	b40e      	push	{r1, r2, r3}
 8009b96:	b500      	push	{lr}
 8009b98:	b09c      	sub	sp, #112	; 0x70
 8009b9a:	ab1d      	add	r3, sp, #116	; 0x74
 8009b9c:	9002      	str	r0, [sp, #8]
 8009b9e:	9006      	str	r0, [sp, #24]
 8009ba0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ba4:	4809      	ldr	r0, [pc, #36]	; (8009bcc <siprintf+0x38>)
 8009ba6:	9107      	str	r1, [sp, #28]
 8009ba8:	9104      	str	r1, [sp, #16]
 8009baa:	4909      	ldr	r1, [pc, #36]	; (8009bd0 <siprintf+0x3c>)
 8009bac:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bb0:	9105      	str	r1, [sp, #20]
 8009bb2:	6800      	ldr	r0, [r0, #0]
 8009bb4:	9301      	str	r3, [sp, #4]
 8009bb6:	a902      	add	r1, sp, #8
 8009bb8:	f000 f8fe 	bl	8009db8 <_svfiprintf_r>
 8009bbc:	9b02      	ldr	r3, [sp, #8]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	701a      	strb	r2, [r3, #0]
 8009bc2:	b01c      	add	sp, #112	; 0x70
 8009bc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bc8:	b003      	add	sp, #12
 8009bca:	4770      	bx	lr
 8009bcc:	20000040 	.word	0x20000040
 8009bd0:	ffff0208 	.word	0xffff0208

08009bd4 <__retarget_lock_acquire_recursive>:
 8009bd4:	4770      	bx	lr

08009bd6 <__retarget_lock_release_recursive>:
 8009bd6:	4770      	bx	lr

08009bd8 <sbrk_aligned>:
 8009bd8:	b570      	push	{r4, r5, r6, lr}
 8009bda:	4e0e      	ldr	r6, [pc, #56]	; (8009c14 <sbrk_aligned+0x3c>)
 8009bdc:	460c      	mov	r4, r1
 8009bde:	6831      	ldr	r1, [r6, #0]
 8009be0:	4605      	mov	r5, r0
 8009be2:	b911      	cbnz	r1, 8009bea <sbrk_aligned+0x12>
 8009be4:	f000 fb7c 	bl	800a2e0 <_sbrk_r>
 8009be8:	6030      	str	r0, [r6, #0]
 8009bea:	4621      	mov	r1, r4
 8009bec:	4628      	mov	r0, r5
 8009bee:	f000 fb77 	bl	800a2e0 <_sbrk_r>
 8009bf2:	1c43      	adds	r3, r0, #1
 8009bf4:	d00a      	beq.n	8009c0c <sbrk_aligned+0x34>
 8009bf6:	1cc4      	adds	r4, r0, #3
 8009bf8:	f024 0403 	bic.w	r4, r4, #3
 8009bfc:	42a0      	cmp	r0, r4
 8009bfe:	d007      	beq.n	8009c10 <sbrk_aligned+0x38>
 8009c00:	1a21      	subs	r1, r4, r0
 8009c02:	4628      	mov	r0, r5
 8009c04:	f000 fb6c 	bl	800a2e0 <_sbrk_r>
 8009c08:	3001      	adds	r0, #1
 8009c0a:	d101      	bne.n	8009c10 <sbrk_aligned+0x38>
 8009c0c:	f04f 34ff 	mov.w	r4, #4294967295
 8009c10:	4620      	mov	r0, r4
 8009c12:	bd70      	pop	{r4, r5, r6, pc}
 8009c14:	200009f8 	.word	0x200009f8

08009c18 <_malloc_r>:
 8009c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c1c:	1ccd      	adds	r5, r1, #3
 8009c1e:	f025 0503 	bic.w	r5, r5, #3
 8009c22:	3508      	adds	r5, #8
 8009c24:	2d0c      	cmp	r5, #12
 8009c26:	bf38      	it	cc
 8009c28:	250c      	movcc	r5, #12
 8009c2a:	2d00      	cmp	r5, #0
 8009c2c:	4607      	mov	r7, r0
 8009c2e:	db01      	blt.n	8009c34 <_malloc_r+0x1c>
 8009c30:	42a9      	cmp	r1, r5
 8009c32:	d905      	bls.n	8009c40 <_malloc_r+0x28>
 8009c34:	230c      	movs	r3, #12
 8009c36:	603b      	str	r3, [r7, #0]
 8009c38:	2600      	movs	r6, #0
 8009c3a:	4630      	mov	r0, r6
 8009c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c40:	4e2e      	ldr	r6, [pc, #184]	; (8009cfc <_malloc_r+0xe4>)
 8009c42:	f000 fb5d 	bl	800a300 <__malloc_lock>
 8009c46:	6833      	ldr	r3, [r6, #0]
 8009c48:	461c      	mov	r4, r3
 8009c4a:	bb34      	cbnz	r4, 8009c9a <_malloc_r+0x82>
 8009c4c:	4629      	mov	r1, r5
 8009c4e:	4638      	mov	r0, r7
 8009c50:	f7ff ffc2 	bl	8009bd8 <sbrk_aligned>
 8009c54:	1c43      	adds	r3, r0, #1
 8009c56:	4604      	mov	r4, r0
 8009c58:	d14d      	bne.n	8009cf6 <_malloc_r+0xde>
 8009c5a:	6834      	ldr	r4, [r6, #0]
 8009c5c:	4626      	mov	r6, r4
 8009c5e:	2e00      	cmp	r6, #0
 8009c60:	d140      	bne.n	8009ce4 <_malloc_r+0xcc>
 8009c62:	6823      	ldr	r3, [r4, #0]
 8009c64:	4631      	mov	r1, r6
 8009c66:	4638      	mov	r0, r7
 8009c68:	eb04 0803 	add.w	r8, r4, r3
 8009c6c:	f000 fb38 	bl	800a2e0 <_sbrk_r>
 8009c70:	4580      	cmp	r8, r0
 8009c72:	d13a      	bne.n	8009cea <_malloc_r+0xd2>
 8009c74:	6821      	ldr	r1, [r4, #0]
 8009c76:	3503      	adds	r5, #3
 8009c78:	1a6d      	subs	r5, r5, r1
 8009c7a:	f025 0503 	bic.w	r5, r5, #3
 8009c7e:	3508      	adds	r5, #8
 8009c80:	2d0c      	cmp	r5, #12
 8009c82:	bf38      	it	cc
 8009c84:	250c      	movcc	r5, #12
 8009c86:	4629      	mov	r1, r5
 8009c88:	4638      	mov	r0, r7
 8009c8a:	f7ff ffa5 	bl	8009bd8 <sbrk_aligned>
 8009c8e:	3001      	adds	r0, #1
 8009c90:	d02b      	beq.n	8009cea <_malloc_r+0xd2>
 8009c92:	6823      	ldr	r3, [r4, #0]
 8009c94:	442b      	add	r3, r5
 8009c96:	6023      	str	r3, [r4, #0]
 8009c98:	e00e      	b.n	8009cb8 <_malloc_r+0xa0>
 8009c9a:	6822      	ldr	r2, [r4, #0]
 8009c9c:	1b52      	subs	r2, r2, r5
 8009c9e:	d41e      	bmi.n	8009cde <_malloc_r+0xc6>
 8009ca0:	2a0b      	cmp	r2, #11
 8009ca2:	d916      	bls.n	8009cd2 <_malloc_r+0xba>
 8009ca4:	1961      	adds	r1, r4, r5
 8009ca6:	42a3      	cmp	r3, r4
 8009ca8:	6025      	str	r5, [r4, #0]
 8009caa:	bf18      	it	ne
 8009cac:	6059      	strne	r1, [r3, #4]
 8009cae:	6863      	ldr	r3, [r4, #4]
 8009cb0:	bf08      	it	eq
 8009cb2:	6031      	streq	r1, [r6, #0]
 8009cb4:	5162      	str	r2, [r4, r5]
 8009cb6:	604b      	str	r3, [r1, #4]
 8009cb8:	4638      	mov	r0, r7
 8009cba:	f104 060b 	add.w	r6, r4, #11
 8009cbe:	f000 fb25 	bl	800a30c <__malloc_unlock>
 8009cc2:	f026 0607 	bic.w	r6, r6, #7
 8009cc6:	1d23      	adds	r3, r4, #4
 8009cc8:	1af2      	subs	r2, r6, r3
 8009cca:	d0b6      	beq.n	8009c3a <_malloc_r+0x22>
 8009ccc:	1b9b      	subs	r3, r3, r6
 8009cce:	50a3      	str	r3, [r4, r2]
 8009cd0:	e7b3      	b.n	8009c3a <_malloc_r+0x22>
 8009cd2:	6862      	ldr	r2, [r4, #4]
 8009cd4:	42a3      	cmp	r3, r4
 8009cd6:	bf0c      	ite	eq
 8009cd8:	6032      	streq	r2, [r6, #0]
 8009cda:	605a      	strne	r2, [r3, #4]
 8009cdc:	e7ec      	b.n	8009cb8 <_malloc_r+0xa0>
 8009cde:	4623      	mov	r3, r4
 8009ce0:	6864      	ldr	r4, [r4, #4]
 8009ce2:	e7b2      	b.n	8009c4a <_malloc_r+0x32>
 8009ce4:	4634      	mov	r4, r6
 8009ce6:	6876      	ldr	r6, [r6, #4]
 8009ce8:	e7b9      	b.n	8009c5e <_malloc_r+0x46>
 8009cea:	230c      	movs	r3, #12
 8009cec:	603b      	str	r3, [r7, #0]
 8009cee:	4638      	mov	r0, r7
 8009cf0:	f000 fb0c 	bl	800a30c <__malloc_unlock>
 8009cf4:	e7a1      	b.n	8009c3a <_malloc_r+0x22>
 8009cf6:	6025      	str	r5, [r4, #0]
 8009cf8:	e7de      	b.n	8009cb8 <_malloc_r+0xa0>
 8009cfa:	bf00      	nop
 8009cfc:	200009f4 	.word	0x200009f4

08009d00 <__ssputs_r>:
 8009d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d04:	688e      	ldr	r6, [r1, #8]
 8009d06:	429e      	cmp	r6, r3
 8009d08:	4682      	mov	sl, r0
 8009d0a:	460c      	mov	r4, r1
 8009d0c:	4690      	mov	r8, r2
 8009d0e:	461f      	mov	r7, r3
 8009d10:	d838      	bhi.n	8009d84 <__ssputs_r+0x84>
 8009d12:	898a      	ldrh	r2, [r1, #12]
 8009d14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d18:	d032      	beq.n	8009d80 <__ssputs_r+0x80>
 8009d1a:	6825      	ldr	r5, [r4, #0]
 8009d1c:	6909      	ldr	r1, [r1, #16]
 8009d1e:	eba5 0901 	sub.w	r9, r5, r1
 8009d22:	6965      	ldr	r5, [r4, #20]
 8009d24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	444b      	add	r3, r9
 8009d30:	106d      	asrs	r5, r5, #1
 8009d32:	429d      	cmp	r5, r3
 8009d34:	bf38      	it	cc
 8009d36:	461d      	movcc	r5, r3
 8009d38:	0553      	lsls	r3, r2, #21
 8009d3a:	d531      	bpl.n	8009da0 <__ssputs_r+0xa0>
 8009d3c:	4629      	mov	r1, r5
 8009d3e:	f7ff ff6b 	bl	8009c18 <_malloc_r>
 8009d42:	4606      	mov	r6, r0
 8009d44:	b950      	cbnz	r0, 8009d5c <__ssputs_r+0x5c>
 8009d46:	230c      	movs	r3, #12
 8009d48:	f8ca 3000 	str.w	r3, [sl]
 8009d4c:	89a3      	ldrh	r3, [r4, #12]
 8009d4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d52:	81a3      	strh	r3, [r4, #12]
 8009d54:	f04f 30ff 	mov.w	r0, #4294967295
 8009d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d5c:	6921      	ldr	r1, [r4, #16]
 8009d5e:	464a      	mov	r2, r9
 8009d60:	f7ff fee8 	bl	8009b34 <memcpy>
 8009d64:	89a3      	ldrh	r3, [r4, #12]
 8009d66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d6e:	81a3      	strh	r3, [r4, #12]
 8009d70:	6126      	str	r6, [r4, #16]
 8009d72:	6165      	str	r5, [r4, #20]
 8009d74:	444e      	add	r6, r9
 8009d76:	eba5 0509 	sub.w	r5, r5, r9
 8009d7a:	6026      	str	r6, [r4, #0]
 8009d7c:	60a5      	str	r5, [r4, #8]
 8009d7e:	463e      	mov	r6, r7
 8009d80:	42be      	cmp	r6, r7
 8009d82:	d900      	bls.n	8009d86 <__ssputs_r+0x86>
 8009d84:	463e      	mov	r6, r7
 8009d86:	6820      	ldr	r0, [r4, #0]
 8009d88:	4632      	mov	r2, r6
 8009d8a:	4641      	mov	r1, r8
 8009d8c:	f7ff fee0 	bl	8009b50 <memmove>
 8009d90:	68a3      	ldr	r3, [r4, #8]
 8009d92:	1b9b      	subs	r3, r3, r6
 8009d94:	60a3      	str	r3, [r4, #8]
 8009d96:	6823      	ldr	r3, [r4, #0]
 8009d98:	4433      	add	r3, r6
 8009d9a:	6023      	str	r3, [r4, #0]
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	e7db      	b.n	8009d58 <__ssputs_r+0x58>
 8009da0:	462a      	mov	r2, r5
 8009da2:	f000 fb05 	bl	800a3b0 <_realloc_r>
 8009da6:	4606      	mov	r6, r0
 8009da8:	2800      	cmp	r0, #0
 8009daa:	d1e1      	bne.n	8009d70 <__ssputs_r+0x70>
 8009dac:	6921      	ldr	r1, [r4, #16]
 8009dae:	4650      	mov	r0, sl
 8009db0:	f000 fab2 	bl	800a318 <_free_r>
 8009db4:	e7c7      	b.n	8009d46 <__ssputs_r+0x46>
	...

08009db8 <_svfiprintf_r>:
 8009db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dbc:	4698      	mov	r8, r3
 8009dbe:	898b      	ldrh	r3, [r1, #12]
 8009dc0:	061b      	lsls	r3, r3, #24
 8009dc2:	b09d      	sub	sp, #116	; 0x74
 8009dc4:	4607      	mov	r7, r0
 8009dc6:	460d      	mov	r5, r1
 8009dc8:	4614      	mov	r4, r2
 8009dca:	d50e      	bpl.n	8009dea <_svfiprintf_r+0x32>
 8009dcc:	690b      	ldr	r3, [r1, #16]
 8009dce:	b963      	cbnz	r3, 8009dea <_svfiprintf_r+0x32>
 8009dd0:	2140      	movs	r1, #64	; 0x40
 8009dd2:	f7ff ff21 	bl	8009c18 <_malloc_r>
 8009dd6:	6028      	str	r0, [r5, #0]
 8009dd8:	6128      	str	r0, [r5, #16]
 8009dda:	b920      	cbnz	r0, 8009de6 <_svfiprintf_r+0x2e>
 8009ddc:	230c      	movs	r3, #12
 8009dde:	603b      	str	r3, [r7, #0]
 8009de0:	f04f 30ff 	mov.w	r0, #4294967295
 8009de4:	e0d1      	b.n	8009f8a <_svfiprintf_r+0x1d2>
 8009de6:	2340      	movs	r3, #64	; 0x40
 8009de8:	616b      	str	r3, [r5, #20]
 8009dea:	2300      	movs	r3, #0
 8009dec:	9309      	str	r3, [sp, #36]	; 0x24
 8009dee:	2320      	movs	r3, #32
 8009df0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009df4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009df8:	2330      	movs	r3, #48	; 0x30
 8009dfa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009fa4 <_svfiprintf_r+0x1ec>
 8009dfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e02:	f04f 0901 	mov.w	r9, #1
 8009e06:	4623      	mov	r3, r4
 8009e08:	469a      	mov	sl, r3
 8009e0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e0e:	b10a      	cbz	r2, 8009e14 <_svfiprintf_r+0x5c>
 8009e10:	2a25      	cmp	r2, #37	; 0x25
 8009e12:	d1f9      	bne.n	8009e08 <_svfiprintf_r+0x50>
 8009e14:	ebba 0b04 	subs.w	fp, sl, r4
 8009e18:	d00b      	beq.n	8009e32 <_svfiprintf_r+0x7a>
 8009e1a:	465b      	mov	r3, fp
 8009e1c:	4622      	mov	r2, r4
 8009e1e:	4629      	mov	r1, r5
 8009e20:	4638      	mov	r0, r7
 8009e22:	f7ff ff6d 	bl	8009d00 <__ssputs_r>
 8009e26:	3001      	adds	r0, #1
 8009e28:	f000 80aa 	beq.w	8009f80 <_svfiprintf_r+0x1c8>
 8009e2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e2e:	445a      	add	r2, fp
 8009e30:	9209      	str	r2, [sp, #36]	; 0x24
 8009e32:	f89a 3000 	ldrb.w	r3, [sl]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f000 80a2 	beq.w	8009f80 <_svfiprintf_r+0x1c8>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e46:	f10a 0a01 	add.w	sl, sl, #1
 8009e4a:	9304      	str	r3, [sp, #16]
 8009e4c:	9307      	str	r3, [sp, #28]
 8009e4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e52:	931a      	str	r3, [sp, #104]	; 0x68
 8009e54:	4654      	mov	r4, sl
 8009e56:	2205      	movs	r2, #5
 8009e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e5c:	4851      	ldr	r0, [pc, #324]	; (8009fa4 <_svfiprintf_r+0x1ec>)
 8009e5e:	f7f6 f997 	bl	8000190 <memchr>
 8009e62:	9a04      	ldr	r2, [sp, #16]
 8009e64:	b9d8      	cbnz	r0, 8009e9e <_svfiprintf_r+0xe6>
 8009e66:	06d0      	lsls	r0, r2, #27
 8009e68:	bf44      	itt	mi
 8009e6a:	2320      	movmi	r3, #32
 8009e6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e70:	0711      	lsls	r1, r2, #28
 8009e72:	bf44      	itt	mi
 8009e74:	232b      	movmi	r3, #43	; 0x2b
 8009e76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e7a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e7e:	2b2a      	cmp	r3, #42	; 0x2a
 8009e80:	d015      	beq.n	8009eae <_svfiprintf_r+0xf6>
 8009e82:	9a07      	ldr	r2, [sp, #28]
 8009e84:	4654      	mov	r4, sl
 8009e86:	2000      	movs	r0, #0
 8009e88:	f04f 0c0a 	mov.w	ip, #10
 8009e8c:	4621      	mov	r1, r4
 8009e8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e92:	3b30      	subs	r3, #48	; 0x30
 8009e94:	2b09      	cmp	r3, #9
 8009e96:	d94e      	bls.n	8009f36 <_svfiprintf_r+0x17e>
 8009e98:	b1b0      	cbz	r0, 8009ec8 <_svfiprintf_r+0x110>
 8009e9a:	9207      	str	r2, [sp, #28]
 8009e9c:	e014      	b.n	8009ec8 <_svfiprintf_r+0x110>
 8009e9e:	eba0 0308 	sub.w	r3, r0, r8
 8009ea2:	fa09 f303 	lsl.w	r3, r9, r3
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	9304      	str	r3, [sp, #16]
 8009eaa:	46a2      	mov	sl, r4
 8009eac:	e7d2      	b.n	8009e54 <_svfiprintf_r+0x9c>
 8009eae:	9b03      	ldr	r3, [sp, #12]
 8009eb0:	1d19      	adds	r1, r3, #4
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	9103      	str	r1, [sp, #12]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	bfbb      	ittet	lt
 8009eba:	425b      	neglt	r3, r3
 8009ebc:	f042 0202 	orrlt.w	r2, r2, #2
 8009ec0:	9307      	strge	r3, [sp, #28]
 8009ec2:	9307      	strlt	r3, [sp, #28]
 8009ec4:	bfb8      	it	lt
 8009ec6:	9204      	strlt	r2, [sp, #16]
 8009ec8:	7823      	ldrb	r3, [r4, #0]
 8009eca:	2b2e      	cmp	r3, #46	; 0x2e
 8009ecc:	d10c      	bne.n	8009ee8 <_svfiprintf_r+0x130>
 8009ece:	7863      	ldrb	r3, [r4, #1]
 8009ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ed2:	d135      	bne.n	8009f40 <_svfiprintf_r+0x188>
 8009ed4:	9b03      	ldr	r3, [sp, #12]
 8009ed6:	1d1a      	adds	r2, r3, #4
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	9203      	str	r2, [sp, #12]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	bfb8      	it	lt
 8009ee0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ee4:	3402      	adds	r4, #2
 8009ee6:	9305      	str	r3, [sp, #20]
 8009ee8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009fb4 <_svfiprintf_r+0x1fc>
 8009eec:	7821      	ldrb	r1, [r4, #0]
 8009eee:	2203      	movs	r2, #3
 8009ef0:	4650      	mov	r0, sl
 8009ef2:	f7f6 f94d 	bl	8000190 <memchr>
 8009ef6:	b140      	cbz	r0, 8009f0a <_svfiprintf_r+0x152>
 8009ef8:	2340      	movs	r3, #64	; 0x40
 8009efa:	eba0 000a 	sub.w	r0, r0, sl
 8009efe:	fa03 f000 	lsl.w	r0, r3, r0
 8009f02:	9b04      	ldr	r3, [sp, #16]
 8009f04:	4303      	orrs	r3, r0
 8009f06:	3401      	adds	r4, #1
 8009f08:	9304      	str	r3, [sp, #16]
 8009f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f0e:	4826      	ldr	r0, [pc, #152]	; (8009fa8 <_svfiprintf_r+0x1f0>)
 8009f10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f14:	2206      	movs	r2, #6
 8009f16:	f7f6 f93b 	bl	8000190 <memchr>
 8009f1a:	2800      	cmp	r0, #0
 8009f1c:	d038      	beq.n	8009f90 <_svfiprintf_r+0x1d8>
 8009f1e:	4b23      	ldr	r3, [pc, #140]	; (8009fac <_svfiprintf_r+0x1f4>)
 8009f20:	bb1b      	cbnz	r3, 8009f6a <_svfiprintf_r+0x1b2>
 8009f22:	9b03      	ldr	r3, [sp, #12]
 8009f24:	3307      	adds	r3, #7
 8009f26:	f023 0307 	bic.w	r3, r3, #7
 8009f2a:	3308      	adds	r3, #8
 8009f2c:	9303      	str	r3, [sp, #12]
 8009f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f30:	4433      	add	r3, r6
 8009f32:	9309      	str	r3, [sp, #36]	; 0x24
 8009f34:	e767      	b.n	8009e06 <_svfiprintf_r+0x4e>
 8009f36:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f3a:	460c      	mov	r4, r1
 8009f3c:	2001      	movs	r0, #1
 8009f3e:	e7a5      	b.n	8009e8c <_svfiprintf_r+0xd4>
 8009f40:	2300      	movs	r3, #0
 8009f42:	3401      	adds	r4, #1
 8009f44:	9305      	str	r3, [sp, #20]
 8009f46:	4619      	mov	r1, r3
 8009f48:	f04f 0c0a 	mov.w	ip, #10
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f52:	3a30      	subs	r2, #48	; 0x30
 8009f54:	2a09      	cmp	r2, #9
 8009f56:	d903      	bls.n	8009f60 <_svfiprintf_r+0x1a8>
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d0c5      	beq.n	8009ee8 <_svfiprintf_r+0x130>
 8009f5c:	9105      	str	r1, [sp, #20]
 8009f5e:	e7c3      	b.n	8009ee8 <_svfiprintf_r+0x130>
 8009f60:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f64:	4604      	mov	r4, r0
 8009f66:	2301      	movs	r3, #1
 8009f68:	e7f0      	b.n	8009f4c <_svfiprintf_r+0x194>
 8009f6a:	ab03      	add	r3, sp, #12
 8009f6c:	9300      	str	r3, [sp, #0]
 8009f6e:	462a      	mov	r2, r5
 8009f70:	4b0f      	ldr	r3, [pc, #60]	; (8009fb0 <_svfiprintf_r+0x1f8>)
 8009f72:	a904      	add	r1, sp, #16
 8009f74:	4638      	mov	r0, r7
 8009f76:	f3af 8000 	nop.w
 8009f7a:	1c42      	adds	r2, r0, #1
 8009f7c:	4606      	mov	r6, r0
 8009f7e:	d1d6      	bne.n	8009f2e <_svfiprintf_r+0x176>
 8009f80:	89ab      	ldrh	r3, [r5, #12]
 8009f82:	065b      	lsls	r3, r3, #25
 8009f84:	f53f af2c 	bmi.w	8009de0 <_svfiprintf_r+0x28>
 8009f88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f8a:	b01d      	add	sp, #116	; 0x74
 8009f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f90:	ab03      	add	r3, sp, #12
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	462a      	mov	r2, r5
 8009f96:	4b06      	ldr	r3, [pc, #24]	; (8009fb0 <_svfiprintf_r+0x1f8>)
 8009f98:	a904      	add	r1, sp, #16
 8009f9a:	4638      	mov	r0, r7
 8009f9c:	f000 f87a 	bl	800a094 <_printf_i>
 8009fa0:	e7eb      	b.n	8009f7a <_svfiprintf_r+0x1c2>
 8009fa2:	bf00      	nop
 8009fa4:	0800d6f4 	.word	0x0800d6f4
 8009fa8:	0800d6fe 	.word	0x0800d6fe
 8009fac:	00000000 	.word	0x00000000
 8009fb0:	08009d01 	.word	0x08009d01
 8009fb4:	0800d6fa 	.word	0x0800d6fa

08009fb8 <_printf_common>:
 8009fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fbc:	4616      	mov	r6, r2
 8009fbe:	4699      	mov	r9, r3
 8009fc0:	688a      	ldr	r2, [r1, #8]
 8009fc2:	690b      	ldr	r3, [r1, #16]
 8009fc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	bfb8      	it	lt
 8009fcc:	4613      	movlt	r3, r2
 8009fce:	6033      	str	r3, [r6, #0]
 8009fd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009fd4:	4607      	mov	r7, r0
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	b10a      	cbz	r2, 8009fde <_printf_common+0x26>
 8009fda:	3301      	adds	r3, #1
 8009fdc:	6033      	str	r3, [r6, #0]
 8009fde:	6823      	ldr	r3, [r4, #0]
 8009fe0:	0699      	lsls	r1, r3, #26
 8009fe2:	bf42      	ittt	mi
 8009fe4:	6833      	ldrmi	r3, [r6, #0]
 8009fe6:	3302      	addmi	r3, #2
 8009fe8:	6033      	strmi	r3, [r6, #0]
 8009fea:	6825      	ldr	r5, [r4, #0]
 8009fec:	f015 0506 	ands.w	r5, r5, #6
 8009ff0:	d106      	bne.n	800a000 <_printf_common+0x48>
 8009ff2:	f104 0a19 	add.w	sl, r4, #25
 8009ff6:	68e3      	ldr	r3, [r4, #12]
 8009ff8:	6832      	ldr	r2, [r6, #0]
 8009ffa:	1a9b      	subs	r3, r3, r2
 8009ffc:	42ab      	cmp	r3, r5
 8009ffe:	dc26      	bgt.n	800a04e <_printf_common+0x96>
 800a000:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a004:	1e13      	subs	r3, r2, #0
 800a006:	6822      	ldr	r2, [r4, #0]
 800a008:	bf18      	it	ne
 800a00a:	2301      	movne	r3, #1
 800a00c:	0692      	lsls	r2, r2, #26
 800a00e:	d42b      	bmi.n	800a068 <_printf_common+0xb0>
 800a010:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a014:	4649      	mov	r1, r9
 800a016:	4638      	mov	r0, r7
 800a018:	47c0      	blx	r8
 800a01a:	3001      	adds	r0, #1
 800a01c:	d01e      	beq.n	800a05c <_printf_common+0xa4>
 800a01e:	6823      	ldr	r3, [r4, #0]
 800a020:	68e5      	ldr	r5, [r4, #12]
 800a022:	6832      	ldr	r2, [r6, #0]
 800a024:	f003 0306 	and.w	r3, r3, #6
 800a028:	2b04      	cmp	r3, #4
 800a02a:	bf08      	it	eq
 800a02c:	1aad      	subeq	r5, r5, r2
 800a02e:	68a3      	ldr	r3, [r4, #8]
 800a030:	6922      	ldr	r2, [r4, #16]
 800a032:	bf0c      	ite	eq
 800a034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a038:	2500      	movne	r5, #0
 800a03a:	4293      	cmp	r3, r2
 800a03c:	bfc4      	itt	gt
 800a03e:	1a9b      	subgt	r3, r3, r2
 800a040:	18ed      	addgt	r5, r5, r3
 800a042:	2600      	movs	r6, #0
 800a044:	341a      	adds	r4, #26
 800a046:	42b5      	cmp	r5, r6
 800a048:	d11a      	bne.n	800a080 <_printf_common+0xc8>
 800a04a:	2000      	movs	r0, #0
 800a04c:	e008      	b.n	800a060 <_printf_common+0xa8>
 800a04e:	2301      	movs	r3, #1
 800a050:	4652      	mov	r2, sl
 800a052:	4649      	mov	r1, r9
 800a054:	4638      	mov	r0, r7
 800a056:	47c0      	blx	r8
 800a058:	3001      	adds	r0, #1
 800a05a:	d103      	bne.n	800a064 <_printf_common+0xac>
 800a05c:	f04f 30ff 	mov.w	r0, #4294967295
 800a060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a064:	3501      	adds	r5, #1
 800a066:	e7c6      	b.n	8009ff6 <_printf_common+0x3e>
 800a068:	18e1      	adds	r1, r4, r3
 800a06a:	1c5a      	adds	r2, r3, #1
 800a06c:	2030      	movs	r0, #48	; 0x30
 800a06e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a072:	4422      	add	r2, r4
 800a074:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a078:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a07c:	3302      	adds	r3, #2
 800a07e:	e7c7      	b.n	800a010 <_printf_common+0x58>
 800a080:	2301      	movs	r3, #1
 800a082:	4622      	mov	r2, r4
 800a084:	4649      	mov	r1, r9
 800a086:	4638      	mov	r0, r7
 800a088:	47c0      	blx	r8
 800a08a:	3001      	adds	r0, #1
 800a08c:	d0e6      	beq.n	800a05c <_printf_common+0xa4>
 800a08e:	3601      	adds	r6, #1
 800a090:	e7d9      	b.n	800a046 <_printf_common+0x8e>
	...

0800a094 <_printf_i>:
 800a094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a098:	7e0f      	ldrb	r7, [r1, #24]
 800a09a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a09c:	2f78      	cmp	r7, #120	; 0x78
 800a09e:	4691      	mov	r9, r2
 800a0a0:	4680      	mov	r8, r0
 800a0a2:	460c      	mov	r4, r1
 800a0a4:	469a      	mov	sl, r3
 800a0a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a0aa:	d807      	bhi.n	800a0bc <_printf_i+0x28>
 800a0ac:	2f62      	cmp	r7, #98	; 0x62
 800a0ae:	d80a      	bhi.n	800a0c6 <_printf_i+0x32>
 800a0b0:	2f00      	cmp	r7, #0
 800a0b2:	f000 80d8 	beq.w	800a266 <_printf_i+0x1d2>
 800a0b6:	2f58      	cmp	r7, #88	; 0x58
 800a0b8:	f000 80a3 	beq.w	800a202 <_printf_i+0x16e>
 800a0bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a0c4:	e03a      	b.n	800a13c <_printf_i+0xa8>
 800a0c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a0ca:	2b15      	cmp	r3, #21
 800a0cc:	d8f6      	bhi.n	800a0bc <_printf_i+0x28>
 800a0ce:	a101      	add	r1, pc, #4	; (adr r1, 800a0d4 <_printf_i+0x40>)
 800a0d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a0d4:	0800a12d 	.word	0x0800a12d
 800a0d8:	0800a141 	.word	0x0800a141
 800a0dc:	0800a0bd 	.word	0x0800a0bd
 800a0e0:	0800a0bd 	.word	0x0800a0bd
 800a0e4:	0800a0bd 	.word	0x0800a0bd
 800a0e8:	0800a0bd 	.word	0x0800a0bd
 800a0ec:	0800a141 	.word	0x0800a141
 800a0f0:	0800a0bd 	.word	0x0800a0bd
 800a0f4:	0800a0bd 	.word	0x0800a0bd
 800a0f8:	0800a0bd 	.word	0x0800a0bd
 800a0fc:	0800a0bd 	.word	0x0800a0bd
 800a100:	0800a24d 	.word	0x0800a24d
 800a104:	0800a171 	.word	0x0800a171
 800a108:	0800a22f 	.word	0x0800a22f
 800a10c:	0800a0bd 	.word	0x0800a0bd
 800a110:	0800a0bd 	.word	0x0800a0bd
 800a114:	0800a26f 	.word	0x0800a26f
 800a118:	0800a0bd 	.word	0x0800a0bd
 800a11c:	0800a171 	.word	0x0800a171
 800a120:	0800a0bd 	.word	0x0800a0bd
 800a124:	0800a0bd 	.word	0x0800a0bd
 800a128:	0800a237 	.word	0x0800a237
 800a12c:	682b      	ldr	r3, [r5, #0]
 800a12e:	1d1a      	adds	r2, r3, #4
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	602a      	str	r2, [r5, #0]
 800a134:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a138:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a13c:	2301      	movs	r3, #1
 800a13e:	e0a3      	b.n	800a288 <_printf_i+0x1f4>
 800a140:	6820      	ldr	r0, [r4, #0]
 800a142:	6829      	ldr	r1, [r5, #0]
 800a144:	0606      	lsls	r6, r0, #24
 800a146:	f101 0304 	add.w	r3, r1, #4
 800a14a:	d50a      	bpl.n	800a162 <_printf_i+0xce>
 800a14c:	680e      	ldr	r6, [r1, #0]
 800a14e:	602b      	str	r3, [r5, #0]
 800a150:	2e00      	cmp	r6, #0
 800a152:	da03      	bge.n	800a15c <_printf_i+0xc8>
 800a154:	232d      	movs	r3, #45	; 0x2d
 800a156:	4276      	negs	r6, r6
 800a158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a15c:	485e      	ldr	r0, [pc, #376]	; (800a2d8 <_printf_i+0x244>)
 800a15e:	230a      	movs	r3, #10
 800a160:	e019      	b.n	800a196 <_printf_i+0x102>
 800a162:	680e      	ldr	r6, [r1, #0]
 800a164:	602b      	str	r3, [r5, #0]
 800a166:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a16a:	bf18      	it	ne
 800a16c:	b236      	sxthne	r6, r6
 800a16e:	e7ef      	b.n	800a150 <_printf_i+0xbc>
 800a170:	682b      	ldr	r3, [r5, #0]
 800a172:	6820      	ldr	r0, [r4, #0]
 800a174:	1d19      	adds	r1, r3, #4
 800a176:	6029      	str	r1, [r5, #0]
 800a178:	0601      	lsls	r1, r0, #24
 800a17a:	d501      	bpl.n	800a180 <_printf_i+0xec>
 800a17c:	681e      	ldr	r6, [r3, #0]
 800a17e:	e002      	b.n	800a186 <_printf_i+0xf2>
 800a180:	0646      	lsls	r6, r0, #25
 800a182:	d5fb      	bpl.n	800a17c <_printf_i+0xe8>
 800a184:	881e      	ldrh	r6, [r3, #0]
 800a186:	4854      	ldr	r0, [pc, #336]	; (800a2d8 <_printf_i+0x244>)
 800a188:	2f6f      	cmp	r7, #111	; 0x6f
 800a18a:	bf0c      	ite	eq
 800a18c:	2308      	moveq	r3, #8
 800a18e:	230a      	movne	r3, #10
 800a190:	2100      	movs	r1, #0
 800a192:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a196:	6865      	ldr	r5, [r4, #4]
 800a198:	60a5      	str	r5, [r4, #8]
 800a19a:	2d00      	cmp	r5, #0
 800a19c:	bfa2      	ittt	ge
 800a19e:	6821      	ldrge	r1, [r4, #0]
 800a1a0:	f021 0104 	bicge.w	r1, r1, #4
 800a1a4:	6021      	strge	r1, [r4, #0]
 800a1a6:	b90e      	cbnz	r6, 800a1ac <_printf_i+0x118>
 800a1a8:	2d00      	cmp	r5, #0
 800a1aa:	d04d      	beq.n	800a248 <_printf_i+0x1b4>
 800a1ac:	4615      	mov	r5, r2
 800a1ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800a1b2:	fb03 6711 	mls	r7, r3, r1, r6
 800a1b6:	5dc7      	ldrb	r7, [r0, r7]
 800a1b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a1bc:	4637      	mov	r7, r6
 800a1be:	42bb      	cmp	r3, r7
 800a1c0:	460e      	mov	r6, r1
 800a1c2:	d9f4      	bls.n	800a1ae <_printf_i+0x11a>
 800a1c4:	2b08      	cmp	r3, #8
 800a1c6:	d10b      	bne.n	800a1e0 <_printf_i+0x14c>
 800a1c8:	6823      	ldr	r3, [r4, #0]
 800a1ca:	07de      	lsls	r6, r3, #31
 800a1cc:	d508      	bpl.n	800a1e0 <_printf_i+0x14c>
 800a1ce:	6923      	ldr	r3, [r4, #16]
 800a1d0:	6861      	ldr	r1, [r4, #4]
 800a1d2:	4299      	cmp	r1, r3
 800a1d4:	bfde      	ittt	le
 800a1d6:	2330      	movle	r3, #48	; 0x30
 800a1d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a1dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a1e0:	1b52      	subs	r2, r2, r5
 800a1e2:	6122      	str	r2, [r4, #16]
 800a1e4:	f8cd a000 	str.w	sl, [sp]
 800a1e8:	464b      	mov	r3, r9
 800a1ea:	aa03      	add	r2, sp, #12
 800a1ec:	4621      	mov	r1, r4
 800a1ee:	4640      	mov	r0, r8
 800a1f0:	f7ff fee2 	bl	8009fb8 <_printf_common>
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	d14c      	bne.n	800a292 <_printf_i+0x1fe>
 800a1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1fc:	b004      	add	sp, #16
 800a1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a202:	4835      	ldr	r0, [pc, #212]	; (800a2d8 <_printf_i+0x244>)
 800a204:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a208:	6829      	ldr	r1, [r5, #0]
 800a20a:	6823      	ldr	r3, [r4, #0]
 800a20c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a210:	6029      	str	r1, [r5, #0]
 800a212:	061d      	lsls	r5, r3, #24
 800a214:	d514      	bpl.n	800a240 <_printf_i+0x1ac>
 800a216:	07df      	lsls	r7, r3, #31
 800a218:	bf44      	itt	mi
 800a21a:	f043 0320 	orrmi.w	r3, r3, #32
 800a21e:	6023      	strmi	r3, [r4, #0]
 800a220:	b91e      	cbnz	r6, 800a22a <_printf_i+0x196>
 800a222:	6823      	ldr	r3, [r4, #0]
 800a224:	f023 0320 	bic.w	r3, r3, #32
 800a228:	6023      	str	r3, [r4, #0]
 800a22a:	2310      	movs	r3, #16
 800a22c:	e7b0      	b.n	800a190 <_printf_i+0xfc>
 800a22e:	6823      	ldr	r3, [r4, #0]
 800a230:	f043 0320 	orr.w	r3, r3, #32
 800a234:	6023      	str	r3, [r4, #0]
 800a236:	2378      	movs	r3, #120	; 0x78
 800a238:	4828      	ldr	r0, [pc, #160]	; (800a2dc <_printf_i+0x248>)
 800a23a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a23e:	e7e3      	b.n	800a208 <_printf_i+0x174>
 800a240:	0659      	lsls	r1, r3, #25
 800a242:	bf48      	it	mi
 800a244:	b2b6      	uxthmi	r6, r6
 800a246:	e7e6      	b.n	800a216 <_printf_i+0x182>
 800a248:	4615      	mov	r5, r2
 800a24a:	e7bb      	b.n	800a1c4 <_printf_i+0x130>
 800a24c:	682b      	ldr	r3, [r5, #0]
 800a24e:	6826      	ldr	r6, [r4, #0]
 800a250:	6961      	ldr	r1, [r4, #20]
 800a252:	1d18      	adds	r0, r3, #4
 800a254:	6028      	str	r0, [r5, #0]
 800a256:	0635      	lsls	r5, r6, #24
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	d501      	bpl.n	800a260 <_printf_i+0x1cc>
 800a25c:	6019      	str	r1, [r3, #0]
 800a25e:	e002      	b.n	800a266 <_printf_i+0x1d2>
 800a260:	0670      	lsls	r0, r6, #25
 800a262:	d5fb      	bpl.n	800a25c <_printf_i+0x1c8>
 800a264:	8019      	strh	r1, [r3, #0]
 800a266:	2300      	movs	r3, #0
 800a268:	6123      	str	r3, [r4, #16]
 800a26a:	4615      	mov	r5, r2
 800a26c:	e7ba      	b.n	800a1e4 <_printf_i+0x150>
 800a26e:	682b      	ldr	r3, [r5, #0]
 800a270:	1d1a      	adds	r2, r3, #4
 800a272:	602a      	str	r2, [r5, #0]
 800a274:	681d      	ldr	r5, [r3, #0]
 800a276:	6862      	ldr	r2, [r4, #4]
 800a278:	2100      	movs	r1, #0
 800a27a:	4628      	mov	r0, r5
 800a27c:	f7f5 ff88 	bl	8000190 <memchr>
 800a280:	b108      	cbz	r0, 800a286 <_printf_i+0x1f2>
 800a282:	1b40      	subs	r0, r0, r5
 800a284:	6060      	str	r0, [r4, #4]
 800a286:	6863      	ldr	r3, [r4, #4]
 800a288:	6123      	str	r3, [r4, #16]
 800a28a:	2300      	movs	r3, #0
 800a28c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a290:	e7a8      	b.n	800a1e4 <_printf_i+0x150>
 800a292:	6923      	ldr	r3, [r4, #16]
 800a294:	462a      	mov	r2, r5
 800a296:	4649      	mov	r1, r9
 800a298:	4640      	mov	r0, r8
 800a29a:	47d0      	blx	sl
 800a29c:	3001      	adds	r0, #1
 800a29e:	d0ab      	beq.n	800a1f8 <_printf_i+0x164>
 800a2a0:	6823      	ldr	r3, [r4, #0]
 800a2a2:	079b      	lsls	r3, r3, #30
 800a2a4:	d413      	bmi.n	800a2ce <_printf_i+0x23a>
 800a2a6:	68e0      	ldr	r0, [r4, #12]
 800a2a8:	9b03      	ldr	r3, [sp, #12]
 800a2aa:	4298      	cmp	r0, r3
 800a2ac:	bfb8      	it	lt
 800a2ae:	4618      	movlt	r0, r3
 800a2b0:	e7a4      	b.n	800a1fc <_printf_i+0x168>
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	4632      	mov	r2, r6
 800a2b6:	4649      	mov	r1, r9
 800a2b8:	4640      	mov	r0, r8
 800a2ba:	47d0      	blx	sl
 800a2bc:	3001      	adds	r0, #1
 800a2be:	d09b      	beq.n	800a1f8 <_printf_i+0x164>
 800a2c0:	3501      	adds	r5, #1
 800a2c2:	68e3      	ldr	r3, [r4, #12]
 800a2c4:	9903      	ldr	r1, [sp, #12]
 800a2c6:	1a5b      	subs	r3, r3, r1
 800a2c8:	42ab      	cmp	r3, r5
 800a2ca:	dcf2      	bgt.n	800a2b2 <_printf_i+0x21e>
 800a2cc:	e7eb      	b.n	800a2a6 <_printf_i+0x212>
 800a2ce:	2500      	movs	r5, #0
 800a2d0:	f104 0619 	add.w	r6, r4, #25
 800a2d4:	e7f5      	b.n	800a2c2 <_printf_i+0x22e>
 800a2d6:	bf00      	nop
 800a2d8:	0800d705 	.word	0x0800d705
 800a2dc:	0800d716 	.word	0x0800d716

0800a2e0 <_sbrk_r>:
 800a2e0:	b538      	push	{r3, r4, r5, lr}
 800a2e2:	4d06      	ldr	r5, [pc, #24]	; (800a2fc <_sbrk_r+0x1c>)
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	4604      	mov	r4, r0
 800a2e8:	4608      	mov	r0, r1
 800a2ea:	602b      	str	r3, [r5, #0]
 800a2ec:	f7f8 fa86 	bl	80027fc <_sbrk>
 800a2f0:	1c43      	adds	r3, r0, #1
 800a2f2:	d102      	bne.n	800a2fa <_sbrk_r+0x1a>
 800a2f4:	682b      	ldr	r3, [r5, #0]
 800a2f6:	b103      	cbz	r3, 800a2fa <_sbrk_r+0x1a>
 800a2f8:	6023      	str	r3, [r4, #0]
 800a2fa:	bd38      	pop	{r3, r4, r5, pc}
 800a2fc:	200009fc 	.word	0x200009fc

0800a300 <__malloc_lock>:
 800a300:	4801      	ldr	r0, [pc, #4]	; (800a308 <__malloc_lock+0x8>)
 800a302:	f7ff bc67 	b.w	8009bd4 <__retarget_lock_acquire_recursive>
 800a306:	bf00      	nop
 800a308:	200009f0 	.word	0x200009f0

0800a30c <__malloc_unlock>:
 800a30c:	4801      	ldr	r0, [pc, #4]	; (800a314 <__malloc_unlock+0x8>)
 800a30e:	f7ff bc62 	b.w	8009bd6 <__retarget_lock_release_recursive>
 800a312:	bf00      	nop
 800a314:	200009f0 	.word	0x200009f0

0800a318 <_free_r>:
 800a318:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a31a:	2900      	cmp	r1, #0
 800a31c:	d044      	beq.n	800a3a8 <_free_r+0x90>
 800a31e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a322:	9001      	str	r0, [sp, #4]
 800a324:	2b00      	cmp	r3, #0
 800a326:	f1a1 0404 	sub.w	r4, r1, #4
 800a32a:	bfb8      	it	lt
 800a32c:	18e4      	addlt	r4, r4, r3
 800a32e:	f7ff ffe7 	bl	800a300 <__malloc_lock>
 800a332:	4a1e      	ldr	r2, [pc, #120]	; (800a3ac <_free_r+0x94>)
 800a334:	9801      	ldr	r0, [sp, #4]
 800a336:	6813      	ldr	r3, [r2, #0]
 800a338:	b933      	cbnz	r3, 800a348 <_free_r+0x30>
 800a33a:	6063      	str	r3, [r4, #4]
 800a33c:	6014      	str	r4, [r2, #0]
 800a33e:	b003      	add	sp, #12
 800a340:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a344:	f7ff bfe2 	b.w	800a30c <__malloc_unlock>
 800a348:	42a3      	cmp	r3, r4
 800a34a:	d908      	bls.n	800a35e <_free_r+0x46>
 800a34c:	6825      	ldr	r5, [r4, #0]
 800a34e:	1961      	adds	r1, r4, r5
 800a350:	428b      	cmp	r3, r1
 800a352:	bf01      	itttt	eq
 800a354:	6819      	ldreq	r1, [r3, #0]
 800a356:	685b      	ldreq	r3, [r3, #4]
 800a358:	1949      	addeq	r1, r1, r5
 800a35a:	6021      	streq	r1, [r4, #0]
 800a35c:	e7ed      	b.n	800a33a <_free_r+0x22>
 800a35e:	461a      	mov	r2, r3
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	b10b      	cbz	r3, 800a368 <_free_r+0x50>
 800a364:	42a3      	cmp	r3, r4
 800a366:	d9fa      	bls.n	800a35e <_free_r+0x46>
 800a368:	6811      	ldr	r1, [r2, #0]
 800a36a:	1855      	adds	r5, r2, r1
 800a36c:	42a5      	cmp	r5, r4
 800a36e:	d10b      	bne.n	800a388 <_free_r+0x70>
 800a370:	6824      	ldr	r4, [r4, #0]
 800a372:	4421      	add	r1, r4
 800a374:	1854      	adds	r4, r2, r1
 800a376:	42a3      	cmp	r3, r4
 800a378:	6011      	str	r1, [r2, #0]
 800a37a:	d1e0      	bne.n	800a33e <_free_r+0x26>
 800a37c:	681c      	ldr	r4, [r3, #0]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	6053      	str	r3, [r2, #4]
 800a382:	4421      	add	r1, r4
 800a384:	6011      	str	r1, [r2, #0]
 800a386:	e7da      	b.n	800a33e <_free_r+0x26>
 800a388:	d902      	bls.n	800a390 <_free_r+0x78>
 800a38a:	230c      	movs	r3, #12
 800a38c:	6003      	str	r3, [r0, #0]
 800a38e:	e7d6      	b.n	800a33e <_free_r+0x26>
 800a390:	6825      	ldr	r5, [r4, #0]
 800a392:	1961      	adds	r1, r4, r5
 800a394:	428b      	cmp	r3, r1
 800a396:	bf04      	itt	eq
 800a398:	6819      	ldreq	r1, [r3, #0]
 800a39a:	685b      	ldreq	r3, [r3, #4]
 800a39c:	6063      	str	r3, [r4, #4]
 800a39e:	bf04      	itt	eq
 800a3a0:	1949      	addeq	r1, r1, r5
 800a3a2:	6021      	streq	r1, [r4, #0]
 800a3a4:	6054      	str	r4, [r2, #4]
 800a3a6:	e7ca      	b.n	800a33e <_free_r+0x26>
 800a3a8:	b003      	add	sp, #12
 800a3aa:	bd30      	pop	{r4, r5, pc}
 800a3ac:	200009f4 	.word	0x200009f4

0800a3b0 <_realloc_r>:
 800a3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3b4:	4680      	mov	r8, r0
 800a3b6:	4614      	mov	r4, r2
 800a3b8:	460e      	mov	r6, r1
 800a3ba:	b921      	cbnz	r1, 800a3c6 <_realloc_r+0x16>
 800a3bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c0:	4611      	mov	r1, r2
 800a3c2:	f7ff bc29 	b.w	8009c18 <_malloc_r>
 800a3c6:	b92a      	cbnz	r2, 800a3d4 <_realloc_r+0x24>
 800a3c8:	f7ff ffa6 	bl	800a318 <_free_r>
 800a3cc:	4625      	mov	r5, r4
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3d4:	f000 f81b 	bl	800a40e <_malloc_usable_size_r>
 800a3d8:	4284      	cmp	r4, r0
 800a3da:	4607      	mov	r7, r0
 800a3dc:	d802      	bhi.n	800a3e4 <_realloc_r+0x34>
 800a3de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a3e2:	d812      	bhi.n	800a40a <_realloc_r+0x5a>
 800a3e4:	4621      	mov	r1, r4
 800a3e6:	4640      	mov	r0, r8
 800a3e8:	f7ff fc16 	bl	8009c18 <_malloc_r>
 800a3ec:	4605      	mov	r5, r0
 800a3ee:	2800      	cmp	r0, #0
 800a3f0:	d0ed      	beq.n	800a3ce <_realloc_r+0x1e>
 800a3f2:	42bc      	cmp	r4, r7
 800a3f4:	4622      	mov	r2, r4
 800a3f6:	4631      	mov	r1, r6
 800a3f8:	bf28      	it	cs
 800a3fa:	463a      	movcs	r2, r7
 800a3fc:	f7ff fb9a 	bl	8009b34 <memcpy>
 800a400:	4631      	mov	r1, r6
 800a402:	4640      	mov	r0, r8
 800a404:	f7ff ff88 	bl	800a318 <_free_r>
 800a408:	e7e1      	b.n	800a3ce <_realloc_r+0x1e>
 800a40a:	4635      	mov	r5, r6
 800a40c:	e7df      	b.n	800a3ce <_realloc_r+0x1e>

0800a40e <_malloc_usable_size_r>:
 800a40e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a412:	1f18      	subs	r0, r3, #4
 800a414:	2b00      	cmp	r3, #0
 800a416:	bfbc      	itt	lt
 800a418:	580b      	ldrlt	r3, [r1, r0]
 800a41a:	18c0      	addlt	r0, r0, r3
 800a41c:	4770      	bx	lr
	...

0800a420 <_init>:
 800a420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a422:	bf00      	nop
 800a424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a426:	bc08      	pop	{r3}
 800a428:	469e      	mov	lr, r3
 800a42a:	4770      	bx	lr

0800a42c <_fini>:
 800a42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42e:	bf00      	nop
 800a430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a432:	bc08      	pop	{r3}
 800a434:	469e      	mov	lr, r3
 800a436:	4770      	bx	lr
