
BLE_WB55_vid12_FromScratch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090ec  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  0800922c  0800922c  0001922c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080095b4  080095b4  000195b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080095bc  080095bc  000195bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080095c0  080095c0  000195c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000004  080095c4  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000084  08009644  00020084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003e  20000120  080096dd  00020120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000160  0800971b  00020160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 00000084  20000174  0800972c  00020174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000394  200001f8  080097b0  000201f8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000058c  080097b0  0002058c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 17 .debug_info   0002be4b  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00005623  00000000  00000000  0004c073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002600  00000000  00000000  00051698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002398  00000000  00000000  00053c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002ba55  00000000  00000000  00056030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00028803  00000000  00000000  00081a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000f62b9  00000000  00000000  000aa288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  001a0541  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000a33c  00000000  00000000  001a0594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f8 	.word	0x200001f8
 800015c:	00000000 	.word	0x00000000
 8000160:	08009214 	.word	0x08009214

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001fc 	.word	0x200001fc
 800017c:	08009214 	.word	0x08009214

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <APPD_EnableCPU2+0x34>)
 800053c:	1d3c      	adds	r4, r7, #4
 800053e:	461d      	mov	r5, r3
 8000540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000544:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000548:	c403      	stmia	r4!, {r0, r1}
 800054a:	8022      	strh	r2, [r4, #0]
 800054c:	3402      	adds	r4, #2
 800054e:	0c13      	lsrs	r3, r2, #16
 8000550:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000552:	f006 feef 	bl	8007334 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	4618      	mov	r0, r3
 800055a:	f006 f98a 	bl	8006872 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800055e:	bf00      	nop
}
 8000560:	3720      	adds	r7, #32
 8000562:	46bd      	mov	sp, r7
 8000564:	bdb0      	pop	{r4, r5, r7, pc}
 8000566:	bf00      	nop
 8000568:	0800922c 	.word	0x0800922c

0800056c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000574:	4b07      	ldr	r3, [pc, #28]	; (8000594 <LL_C2_PWR_SetPowerMode+0x28>)
 8000576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800057a:	f023 0207 	bic.w	r2, r3, #7
 800057e:	4905      	ldr	r1, [pc, #20]	; (8000594 <LL_C2_PWR_SetPowerMode+0x28>)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4313      	orrs	r3, r2
 8000584:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	58000400 	.word	0x58000400

08000598 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <LL_EXTI_EnableIT_32_63+0x24>)
 80005a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80005a6:	4905      	ldr	r1, [pc, #20]	; (80005bc <LL_EXTI_EnableIT_32_63+0x24>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4313      	orrs	r3, r2
 80005ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	58000800 	.word	0x58000800

080005c0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80005c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005cc:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80005ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80005d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80005da:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	021b      	lsls	r3, r3, #8
 80005e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005e6:	4313      	orrs	r3, r2
 80005e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	cafecafe 	.word	0xcafecafe

080005fc <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800060e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4313      	orrs	r3, r2
 8000616:	608b      	str	r3, [r1, #8]
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800062c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000630:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800064a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800064e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000652:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800065a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 800066c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000674:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000678:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800067c:	d101      	bne.n	8000682 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800067e:	2301      	movs	r3, #1
 8000680:	e000      	b.n	8000684 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000682:	2300      	movs	r3, #0
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800069a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80006a2:	d101      	bne.n	80006a8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80006a4:	2301      	movs	r3, #1
 80006a6:	e000      	b.n	80006aa <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80006bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80006cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4013      	ands	r3, r2
 80006d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006d8:	68fb      	ldr	r3, [r7, #12]
}
 80006da:	bf00      	nop
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
	...

080006e8 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <LL_DBGMCU_GetRevisionID+0x18>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	0c1b      	lsrs	r3, r3, #16
 80006f2:	b29b      	uxth	r3, r3
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e0042000 	.word	0xe0042000

08000704 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	685a      	ldr	r2, [r3, #4]
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	041b      	lsls	r3, r3, #16
 8000716:	431a      	orrs	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	605a      	str	r2, [r3, #4]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	685a      	ldr	r2, [r3, #4]
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	431a      	orrs	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	605a      	str	r2, [r3, #4]
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr

0800074a <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800074a:	b480      	push	{r7}
 800074c:	b083      	sub	sp, #12
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
 8000752:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	695a      	ldr	r2, [r3, #20]
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	041b      	lsls	r3, r3, #16
 800075c:	431a      	orrs	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	615a      	str	r2, [r3, #20]
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800076e:	b480      	push	{r7}
 8000770:	b083      	sub	sp, #12
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	695a      	ldr	r2, [r3, #20]
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	431a      	orrs	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	615a      	str	r2, [r3, #20]
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	683a      	ldr	r2, [r7, #0]
 800079e:	609a      	str	r2, [r3, #8]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	683a      	ldr	r2, [r7, #0]
 80007ba:	619a      	str	r2, [r3, #24]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	22ff      	movs	r2, #255	; 0xff
 80007d4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80007e2:	b480      	push	{r7}
 80007e4:	b083      	sub	sp, #12
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	22ca      	movs	r2, #202	; 0xca
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2253      	movs	r2, #83	; 0x53
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000802:	b480      	push	{r7}
 8000804:	b083      	sub	sp, #12
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
 800080a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	f023 0207 	bic.w	r2, r3, #7
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	431a      	orrs	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	609a      	str	r2, [r3, #8]
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <MX_APPE_Config+0x18>)
 800082e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000832:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 8000834:	f000 f824 	bl	8000880 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000838:	f000 f864 	bl	8000904 <Config_HSE>

  return;
 800083c:	bf00      	nop
}
 800083e:	bd80      	pop	{r7, pc}
 8000840:	58004000 	.word	0x58004000

08000844 <MX_APPE_Init>:

void MX_APPE_Init( void )
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  System_Init( );       /**< System initialization */
 8000848:	f000 f870 	bl	800092c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 800084c:	f000 f888 	bl	8000960 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000850:	4903      	ldr	r1, [pc, #12]	; (8000860 <MX_APPE_Init+0x1c>)
 8000852:	2000      	movs	r0, #0
 8000854:	f000 fdc0 	bl	80013d8 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000858:	f000 f890 	bl	800097c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 800085c:	bf00      	nop
}
 800085e:	bd80      	pop	{r7, pc}
 8000860:	2000025c 	.word	0x2000025c

08000864 <Init_Smps>:

void Init_Smps( void )
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  return;
 8000868:	bf00      	nop
}
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <Init_Exti>:

void Init_Exti( void )
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63( LL_EXTI_LINE_36 & LL_EXTI_LINE_38 );
 8000876:	2000      	movs	r0, #0
 8000878:	f7ff fe8e 	bl	8000598 <LL_EXTI_EnableIT_32_63>

  return;
 800087c:	bf00      	nop
}
 800087e:	bd80      	pop	{r7, pc}

08000880 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8000884:	f000 f804 	bl	8000890 <Reset_BackupDomain>

  Reset_IPCC();
 8000888:	f000 f81a 	bl	80008c0 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW */

  return;
 800088c:	bf00      	nop
}
 800088e:	bd80      	pop	{r7, pc}

08000890 <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000894:	f7ff fee8 	bl	8000668 <LL_RCC_IsActiveFlag_PINRST>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d00d      	beq.n	80008ba <Reset_BackupDomain+0x2a>
 800089e:	f7ff fef6 	bl	800068e <LL_RCC_IsActiveFlag_SFTRST>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d108      	bne.n	80008ba <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80008a8:	f002 f844 	bl	8002934 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80008ac:	f002 f842 	bl	8002934 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80008b0:	f7ff feb8 	bl	8000624 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80008b4:	f7ff fec7 	bl	8000646 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop
}
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80008c4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c8:	f7ff fef4 	bl	80006b4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80008cc:	213f      	movs	r1, #63	; 0x3f
 80008ce:	480c      	ldr	r0, [pc, #48]	; (8000900 <Reset_IPCC+0x40>)
 80008d0:	f7ff ff5e 	bl	8000790 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80008d4:	213f      	movs	r1, #63	; 0x3f
 80008d6:	480a      	ldr	r0, [pc, #40]	; (8000900 <Reset_IPCC+0x40>)
 80008d8:	f7ff ff68 	bl	80007ac <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80008dc:	213f      	movs	r1, #63	; 0x3f
 80008de:	4808      	ldr	r0, [pc, #32]	; (8000900 <Reset_IPCC+0x40>)
 80008e0:	f7ff ff10 	bl	8000704 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80008e4:	213f      	movs	r1, #63	; 0x3f
 80008e6:	4806      	ldr	r0, [pc, #24]	; (8000900 <Reset_IPCC+0x40>)
 80008e8:	f7ff ff2f 	bl	800074a <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80008ec:	213f      	movs	r1, #63	; 0x3f
 80008ee:	4804      	ldr	r0, [pc, #16]	; (8000900 <Reset_IPCC+0x40>)
 80008f0:	f7ff ff1a 	bl	8000728 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80008f4:	213f      	movs	r1, #63	; 0x3f
 80008f6:	4802      	ldr	r0, [pc, #8]	; (8000900 <Reset_IPCC+0x40>)
 80008f8:	f7ff ff39 	bl	800076e <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80008fc:	bf00      	nop
}
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	58000c00 	.word	0x58000c00

08000904 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800090a:	2000      	movs	r0, #0
 800090c:	f006 fd9e 	bl	800744c <OTP_Read>
 8000910:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d005      	beq.n	8000924 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	799b      	ldrb	r3, [r3, #6]
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fe4f 	bl	80005c0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000922:	bf00      	nop
 8000924:	bf00      	nop
}
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <System_Init>:

static void System_Init( void )
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  Init_Smps( );
 8000930:	f7ff ff98 	bl	8000864 <Init_Smps>

  Init_Exti( );
 8000934:	f7ff ff9d 	bl	8000872 <Init_Exti>

  Init_Rtc( );
 8000938:	f000 f802 	bl	8000940 <Init_Rtc>

  return;
 800093c:	bf00      	nop
}
 800093e:	bd80      	pop	{r7, pc}

08000940 <Init_Rtc>:

static void Init_Rtc( void )
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000944:	4805      	ldr	r0, [pc, #20]	; (800095c <Init_Rtc+0x1c>)
 8000946:	f7ff ff4c 	bl	80007e2 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800094a:	2100      	movs	r1, #0
 800094c:	4803      	ldr	r0, [pc, #12]	; (800095c <Init_Rtc+0x1c>)
 800094e:	f7ff ff58 	bl	8000802 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000952:	4802      	ldr	r0, [pc, #8]	; (800095c <Init_Rtc+0x1c>)
 8000954:	f7ff ff38 	bl	80007c8 <LL_RTC_EnableWriteProtection>

  return;
 8000958:	bf00      	nop
}
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40002800 	.word	0x40002800

08000960 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000964:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000968:	f7ff fe48 	bl	80005fc <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800096c:	f007 fd42 	bl	80083f4 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000970:	2004      	movs	r0, #4
 8000972:	f7ff fdfb 	bl	800056c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000976:	bf00      	nop
}
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000982:	f006 fb21 	bl	8006fc8 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000986:	4a11      	ldr	r2, [pc, #68]	; (80009cc <appe_Tl_Init+0x50>)
 8000988:	2100      	movs	r1, #0
 800098a:	2008      	movs	r0, #8
 800098c:	f007 fe5e 	bl	800864c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <appe_Tl_Init+0x54>)
 8000992:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <appe_Tl_Init+0x58>)
 8000996:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000998:	463b      	mov	r3, r7
 800099a:	4619      	mov	r1, r3
 800099c:	480e      	ldr	r0, [pc, #56]	; (80009d8 <appe_Tl_Init+0x5c>)
 800099e:	f006 f9d9 	bl	8006d54 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <appe_Tl_Init+0x60>)
 80009a4:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <appe_Tl_Init+0x64>)
 80009a8:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <appe_Tl_Init+0x68>)
 80009ac:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80009ae:	f240 533c 	movw	r3, #1340	; 0x53c
 80009b2:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80009b4:	f107 0308 	add.w	r3, r7, #8
 80009b8:	4618      	mov	r0, r3
 80009ba:	f006 fc47 	bl	800724c <TL_MM_Init>

  TL_Enable();
 80009be:	f006 fafd 	bl	8006fbc <TL_Enable>

  return;
 80009c2:	bf00      	nop
}
 80009c4:	3720      	adds	r7, #32
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	08006d8d 	.word	0x08006d8d
 80009d0:	20030724 	.word	0x20030724
 80009d4:	080009e9 	.word	0x080009e9
 80009d8:	08000a01 	.word	0x08000a01
 80009dc:	2003093c 	.word	0x2003093c
 80009e0:	20030830 	.word	0x20030830
 80009e4:	200301e8 	.word	0x200301e8

080009e8 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80009f2:	bf00      	nop
}
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
	...

08000a00 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	330b      	adds	r3, #11
 8000a0e:	61fb      	str	r3, [r7, #28]

  /* Read the firmware version of both the wireless firmware and the FUS */
  SHCI_GetWirelessFwInfo( &WirelessInfo );
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	4618      	mov	r0, r3
 8000a16:	f005 ff59 	bl	80068cc <SHCI_GetWirelessFwInfo>
  APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
  APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
  APP_DBG_MSG("FUS version %d.%d.%d\n\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

  switch(p_sys_event->subevtcode)
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000a24:	2b07      	cmp	r3, #7
 8000a26:	d81b      	bhi.n	8000a60 <APPE_SysUserEvtRx+0x60>
 8000a28:	a201      	add	r2, pc, #4	; (adr r2, 8000a30 <APPE_SysUserEvtRx+0x30>)
 8000a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2e:	bf00      	nop
 8000a30:	08000a51 	.word	0x08000a51
 8000a34:	08000a59 	.word	0x08000a59
 8000a38:	08000a61 	.word	0x08000a61
 8000a3c:	08000a61 	.word	0x08000a61
 8000a40:	08000a61 	.word	0x08000a61
 8000a44:	08000a61 	.word	0x08000a61
 8000a48:	08000a61 	.word	0x08000a61
 8000a4c:	08000a61 	.word	0x08000a61
  {
  case SHCI_SUB_EVT_CODE_READY:
    APPE_SysEvtReadyProcessing(pPayload);
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f000 f81c 	bl	8000a8e <APPE_SysEvtReadyProcessing>
    break;
 8000a56:	e004      	b.n	8000a62 <APPE_SysUserEvtRx+0x62>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APPE_SysEvtError(pPayload);
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f000 f807 	bl	8000a6c <APPE_SysEvtError>
    break;
 8000a5e:	e000      	b.n	8000a62 <APPE_SysUserEvtRx+0x62>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_ERASE\n");
    break;

  default:
    break;
 8000a60:	bf00      	nop
  }

  return;
 8000a62:	bf00      	nop
}
 8000a64:	3720      	adds	r7, #32
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop

08000a6c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( void * pPayload)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	330b      	adds	r3, #11
 8000a7a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	3302      	adds	r3, #2
 8000a80:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000a82:	bf00      	nop
}
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void * pPayload )
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b08a      	sub	sp, #40	; 0x28
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	330b      	adds	r3, #11
 8000aae:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000ab0:	6a3b      	ldr	r3, [r7, #32]
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	61fb      	str	r3, [r7, #28]

  if(p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d117      	bne.n	8000aee <APPE_SysEvtReadyProcessing+0x60>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2( );
 8000abe:	f7ff fd39 	bl	8000534 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000ac2:	230d      	movs	r3, #13
 8000ac4:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000ac6:	237f      	movs	r3, #127	; 0x7f
 8000ac8:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000aca:	f7ff fe0d 	bl	80006e8 <LL_DBGMCU_GetRevisionID>
 8000ace:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG("DBGMCU_GetRevisionID= %lx \n\n", RevisionID);

    config_param.RevisionID = RevisionID;
 8000ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	4618      	mov	r0, r3
 8000adc:	f005 fee0 	bl	80068a0 <SHCI_C2_Config>

    APP_BLE_Init( );
 8000ae0:	f006 fdbe 	bl	8007660 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f007 fc96 	bl	8008418 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n");
  }

  return;
 8000aec:	e007      	b.n	8000afe <APPE_SysEvtReadyProcessing+0x70>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d103      	bne.n	8000afe <APPE_SysEvtReadyProcessing+0x70>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
  return;
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
}
 8000b00:	3728      	adds	r7, #40	; 0x28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <MX_APPE_Process>:
    __WFI( );
  }
}

void MX_APPE_Process(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0e:	f007 fcb3 	bl	8008478 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8000b1a:	bf00      	nop
}
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b32:	f007 fca1 	bl	8008478 <UTIL_SEQ_Run>

  return;
 8000b36:	bf00      	nop
}
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000b46:	2100      	movs	r1, #0
 8000b48:	2008      	movs	r0, #8
 8000b4a:	f007 fda1 	bl	8008690 <UTIL_SEQ_SetTask>
  return;
 8000b4e:	bf00      	nop
}
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000b5e:	2002      	movs	r0, #2
 8000b60:	f007 fe02 	bl	8008768 <UTIL_SEQ_SetEvt>
  return;
 8000b64:	bf00      	nop
}
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000b74:	2002      	movs	r0, #2
 8000b76:	f007 fe17 	bl	80087a8 <UTIL_SEQ_WaitEvt>
  return;
 8000b7a:	bf00      	nop
}
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <LL_EXTI_EnableIT_0_31>:
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <LL_EXTI_EnableIT_0_31+0x24>)
 8000b8e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000b92:	4905      	ldr	r1, [pc, #20]	; (8000ba8 <LL_EXTI_EnableIT_0_31+0x24>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	58000800 	.word	0x58000800

08000bac <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4904      	ldr	r1, [pc, #16]	; (8000bcc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	600b      	str	r3, [r1, #0]

}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	58000800 	.word	0x58000800

08000bd0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <ReadRtcSsrValue+0x3c>)
 8000bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <ReadRtcSsrValue+0x3c>)
 8000be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000be6:	e005      	b.n	8000bf4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000bec:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <ReadRtcSsrValue+0x3c>)
 8000bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d1f5      	bne.n	8000be8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000bfc:	683b      	ldr	r3, [r7, #0]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	40002800 	.word	0x40002800

08000c10 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	460a      	mov	r2, r1
 8000c1a:	71fb      	strb	r3, [r7, #7]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000c20:	79ba      	ldrb	r2, [r7, #6]
 8000c22:	491d      	ldr	r1, [pc, #116]	; (8000c98 <LinkTimerAfter+0x88>)
 8000c24:	4613      	mov	r3, r2
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	4413      	add	r3, r2
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	440b      	add	r3, r1
 8000c2e:	3315      	adds	r3, #21
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
 8000c36:	2b06      	cmp	r3, #6
 8000c38:	d009      	beq.n	8000c4e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000c3a:	7bfa      	ldrb	r2, [r7, #15]
 8000c3c:	4916      	ldr	r1, [pc, #88]	; (8000c98 <LinkTimerAfter+0x88>)
 8000c3e:	4613      	mov	r3, r2
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	4413      	add	r3, r2
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	440b      	add	r3, r1
 8000c48:	3314      	adds	r3, #20
 8000c4a:	79fa      	ldrb	r2, [r7, #7]
 8000c4c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000c4e:	79fa      	ldrb	r2, [r7, #7]
 8000c50:	4911      	ldr	r1, [pc, #68]	; (8000c98 <LinkTimerAfter+0x88>)
 8000c52:	4613      	mov	r3, r2
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	4413      	add	r3, r2
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	440b      	add	r3, r1
 8000c5c:	3315      	adds	r3, #21
 8000c5e:	7bfa      	ldrb	r2, [r7, #15]
 8000c60:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000c62:	79fa      	ldrb	r2, [r7, #7]
 8000c64:	490c      	ldr	r1, [pc, #48]	; (8000c98 <LinkTimerAfter+0x88>)
 8000c66:	4613      	mov	r3, r2
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	4413      	add	r3, r2
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	440b      	add	r3, r1
 8000c70:	3314      	adds	r3, #20
 8000c72:	79ba      	ldrb	r2, [r7, #6]
 8000c74:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000c76:	79ba      	ldrb	r2, [r7, #6]
 8000c78:	4907      	ldr	r1, [pc, #28]	; (8000c98 <LinkTimerAfter+0x88>)
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	4413      	add	r3, r2
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	440b      	add	r3, r1
 8000c84:	3315      	adds	r3, #21
 8000c86:	79fa      	ldrb	r2, [r7, #7]
 8000c88:	701a      	strb	r2, [r3, #0]

  return;
 8000c8a:	bf00      	nop
}
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000084 	.word	0x20000084

08000c9c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	460a      	mov	r2, r1
 8000ca6:	71fb      	strb	r3, [r7, #7]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000cac:	4b29      	ldr	r3, [pc, #164]	; (8000d54 <LinkTimerBefore+0xb8>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	79ba      	ldrb	r2, [r7, #6]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d032      	beq.n	8000d1e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000cb8:	79ba      	ldrb	r2, [r7, #6]
 8000cba:	4927      	ldr	r1, [pc, #156]	; (8000d58 <LinkTimerBefore+0xbc>)
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	4413      	add	r3, r2
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	440b      	add	r3, r1
 8000cc6:	3314      	adds	r3, #20
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000ccc:	7bfa      	ldrb	r2, [r7, #15]
 8000cce:	4922      	ldr	r1, [pc, #136]	; (8000d58 <LinkTimerBefore+0xbc>)
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	440b      	add	r3, r1
 8000cda:	3315      	adds	r3, #21
 8000cdc:	79fa      	ldrb	r2, [r7, #7]
 8000cde:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000ce0:	79fa      	ldrb	r2, [r7, #7]
 8000ce2:	491d      	ldr	r1, [pc, #116]	; (8000d58 <LinkTimerBefore+0xbc>)
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	4413      	add	r3, r2
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	440b      	add	r3, r1
 8000cee:	3315      	adds	r3, #21
 8000cf0:	79ba      	ldrb	r2, [r7, #6]
 8000cf2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000cf4:	79fa      	ldrb	r2, [r7, #7]
 8000cf6:	4918      	ldr	r1, [pc, #96]	; (8000d58 <LinkTimerBefore+0xbc>)
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	4413      	add	r3, r2
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	440b      	add	r3, r1
 8000d02:	3314      	adds	r3, #20
 8000d04:	7bfa      	ldrb	r2, [r7, #15]
 8000d06:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000d08:	79ba      	ldrb	r2, [r7, #6]
 8000d0a:	4913      	ldr	r1, [pc, #76]	; (8000d58 <LinkTimerBefore+0xbc>)
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	4413      	add	r3, r2
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	440b      	add	r3, r1
 8000d16:	3314      	adds	r3, #20
 8000d18:	79fa      	ldrb	r2, [r7, #7]
 8000d1a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000d1c:	e014      	b.n	8000d48 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000d1e:	79fa      	ldrb	r2, [r7, #7]
 8000d20:	490d      	ldr	r1, [pc, #52]	; (8000d58 <LinkTimerBefore+0xbc>)
 8000d22:	4613      	mov	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	440b      	add	r3, r1
 8000d2c:	3315      	adds	r3, #21
 8000d2e:	79ba      	ldrb	r2, [r7, #6]
 8000d30:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000d32:	79ba      	ldrb	r2, [r7, #6]
 8000d34:	4908      	ldr	r1, [pc, #32]	; (8000d58 <LinkTimerBefore+0xbc>)
 8000d36:	4613      	mov	r3, r2
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	4413      	add	r3, r2
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	440b      	add	r3, r1
 8000d40:	3314      	adds	r3, #20
 8000d42:	79fa      	ldrb	r2, [r7, #7]
 8000d44:	701a      	strb	r2, [r3, #0]
  return;
 8000d46:	bf00      	nop
}
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000114 	.word	0x20000114
 8000d58:	20000084 	.word	0x20000084

08000d5c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d66:	4b4e      	ldr	r3, [pc, #312]	; (8000ea0 <linkTimer+0x144>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2b06      	cmp	r3, #6
 8000d6e:	d118      	bne.n	8000da2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000d70:	4b4b      	ldr	r3, [pc, #300]	; (8000ea0 <linkTimer+0x144>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4b4b      	ldr	r3, [pc, #300]	; (8000ea4 <linkTimer+0x148>)
 8000d78:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000d7a:	4a49      	ldr	r2, [pc, #292]	; (8000ea0 <linkTimer+0x144>)
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000d80:	79fa      	ldrb	r2, [r7, #7]
 8000d82:	4949      	ldr	r1, [pc, #292]	; (8000ea8 <linkTimer+0x14c>)
 8000d84:	4613      	mov	r3, r2
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	4413      	add	r3, r2
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	440b      	add	r3, r1
 8000d8e:	3315      	adds	r3, #21
 8000d90:	2206      	movs	r2, #6
 8000d92:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000d94:	4b45      	ldr	r3, [pc, #276]	; (8000eac <linkTimer+0x150>)
 8000d96:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	81fb      	strh	r3, [r7, #14]
 8000da0:	e078      	b.n	8000e94 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000da2:	f000 f909 	bl	8000fb8 <ReturnTimeElapsed>
 8000da6:	4603      	mov	r3, r0
 8000da8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000daa:	79fa      	ldrb	r2, [r7, #7]
 8000dac:	493e      	ldr	r1, [pc, #248]	; (8000ea8 <linkTimer+0x14c>)
 8000dae:	4613      	mov	r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	4413      	add	r3, r2
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	440b      	add	r3, r1
 8000db8:	3308      	adds	r3, #8
 8000dba:	6819      	ldr	r1, [r3, #0]
 8000dbc:	89fb      	ldrh	r3, [r7, #14]
 8000dbe:	79fa      	ldrb	r2, [r7, #7]
 8000dc0:	4419      	add	r1, r3
 8000dc2:	4839      	ldr	r0, [pc, #228]	; (8000ea8 <linkTimer+0x14c>)
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	4413      	add	r3, r2
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	4403      	add	r3, r0
 8000dce:	3308      	adds	r3, #8
 8000dd0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000dd2:	79fa      	ldrb	r2, [r7, #7]
 8000dd4:	4934      	ldr	r1, [pc, #208]	; (8000ea8 <linkTimer+0x14c>)
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	4413      	add	r3, r2
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	440b      	add	r3, r1
 8000de0:	3308      	adds	r3, #8
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000de6:	4b2e      	ldr	r3, [pc, #184]	; (8000ea0 <linkTimer+0x144>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	4619      	mov	r1, r3
 8000dee:	4a2e      	ldr	r2, [pc, #184]	; (8000ea8 <linkTimer+0x14c>)
 8000df0:	460b      	mov	r3, r1
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	440b      	add	r3, r1
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	4413      	add	r3, r2
 8000dfa:	3308      	adds	r3, #8
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d337      	bcc.n	8000e74 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000e04:	4b26      	ldr	r3, [pc, #152]	; (8000ea0 <linkTimer+0x144>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000e0a:	7b7a      	ldrb	r2, [r7, #13]
 8000e0c:	4926      	ldr	r1, [pc, #152]	; (8000ea8 <linkTimer+0x14c>)
 8000e0e:	4613      	mov	r3, r2
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	4413      	add	r3, r2
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	440b      	add	r3, r1
 8000e18:	3315      	adds	r3, #21
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000e1e:	e013      	b.n	8000e48 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000e20:	7b7a      	ldrb	r2, [r7, #13]
 8000e22:	4921      	ldr	r1, [pc, #132]	; (8000ea8 <linkTimer+0x14c>)
 8000e24:	4613      	mov	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4413      	add	r3, r2
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	440b      	add	r3, r1
 8000e2e:	3315      	adds	r3, #21
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000e34:	7b7a      	ldrb	r2, [r7, #13]
 8000e36:	491c      	ldr	r1, [pc, #112]	; (8000ea8 <linkTimer+0x14c>)
 8000e38:	4613      	mov	r3, r2
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	4413      	add	r3, r2
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	440b      	add	r3, r1
 8000e42:	3315      	adds	r3, #21
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000e48:	7b3b      	ldrb	r3, [r7, #12]
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d00b      	beq.n	8000e66 <linkTimer+0x10a>
 8000e4e:	7b3a      	ldrb	r2, [r7, #12]
 8000e50:	4915      	ldr	r1, [pc, #84]	; (8000ea8 <linkTimer+0x14c>)
 8000e52:	4613      	mov	r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	4413      	add	r3, r2
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	440b      	add	r3, r1
 8000e5c:	3308      	adds	r3, #8
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	68ba      	ldr	r2, [r7, #8]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d2dc      	bcs.n	8000e20 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000e66:	7b7a      	ldrb	r2, [r7, #13]
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fecf 	bl	8000c10 <LinkTimerAfter>
 8000e72:	e00f      	b.n	8000e94 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <linkTimer+0x144>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ff0c 	bl	8000c9c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <linkTimer+0x144>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <linkTimer+0x148>)
 8000e8c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <linkTimer+0x144>)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000e94:	89fb      	ldrh	r3, [r7, #14]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000114 	.word	0x20000114
 8000ea4:	20000115 	.word	0x20000115
 8000ea8:	20000084 	.word	0x20000084
 8000eac:	20000118 	.word	0x20000118

08000eb0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	460a      	mov	r2, r1
 8000eba:	71fb      	strb	r3, [r7, #7]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000ec0:	4b39      	ldr	r3, [pc, #228]	; (8000fa8 <UnlinkTimer+0xf8>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	79fa      	ldrb	r2, [r7, #7]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d111      	bne.n	8000ef0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000ecc:	4b36      	ldr	r3, [pc, #216]	; (8000fa8 <UnlinkTimer+0xf8>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4b36      	ldr	r3, [pc, #216]	; (8000fac <UnlinkTimer+0xfc>)
 8000ed4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000ed6:	79fa      	ldrb	r2, [r7, #7]
 8000ed8:	4935      	ldr	r1, [pc, #212]	; (8000fb0 <UnlinkTimer+0x100>)
 8000eda:	4613      	mov	r3, r2
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	4413      	add	r3, r2
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	440b      	add	r3, r1
 8000ee4:	3315      	adds	r3, #21
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4b2f      	ldr	r3, [pc, #188]	; (8000fa8 <UnlinkTimer+0xf8>)
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	e03e      	b.n	8000f6e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000ef0:	79fa      	ldrb	r2, [r7, #7]
 8000ef2:	492f      	ldr	r1, [pc, #188]	; (8000fb0 <UnlinkTimer+0x100>)
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	4413      	add	r3, r2
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	440b      	add	r3, r1
 8000efe:	3314      	adds	r3, #20
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000f04:	79fa      	ldrb	r2, [r7, #7]
 8000f06:	492a      	ldr	r1, [pc, #168]	; (8000fb0 <UnlinkTimer+0x100>)
 8000f08:	4613      	mov	r3, r2
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	4413      	add	r3, r2
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	440b      	add	r3, r1
 8000f12:	3315      	adds	r3, #21
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000f18:	79f9      	ldrb	r1, [r7, #7]
 8000f1a:	7bfa      	ldrb	r2, [r7, #15]
 8000f1c:	4824      	ldr	r0, [pc, #144]	; (8000fb0 <UnlinkTimer+0x100>)
 8000f1e:	460b      	mov	r3, r1
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	440b      	add	r3, r1
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	4403      	add	r3, r0
 8000f28:	3315      	adds	r3, #21
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b2d8      	uxtb	r0, r3
 8000f2e:	4920      	ldr	r1, [pc, #128]	; (8000fb0 <UnlinkTimer+0x100>)
 8000f30:	4613      	mov	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	4413      	add	r3, r2
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	440b      	add	r3, r1
 8000f3a:	3315      	adds	r3, #21
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f40:	7bbb      	ldrb	r3, [r7, #14]
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d013      	beq.n	8000f6e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000f46:	79f9      	ldrb	r1, [r7, #7]
 8000f48:	7bba      	ldrb	r2, [r7, #14]
 8000f4a:	4819      	ldr	r0, [pc, #100]	; (8000fb0 <UnlinkTimer+0x100>)
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	440b      	add	r3, r1
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	4403      	add	r3, r0
 8000f56:	3314      	adds	r3, #20
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	b2d8      	uxtb	r0, r3
 8000f5c:	4914      	ldr	r1, [pc, #80]	; (8000fb0 <UnlinkTimer+0x100>)
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	440b      	add	r3, r1
 8000f68:	3314      	adds	r3, #20
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000f6e:	79fa      	ldrb	r2, [r7, #7]
 8000f70:	490f      	ldr	r1, [pc, #60]	; (8000fb0 <UnlinkTimer+0x100>)
 8000f72:	4613      	mov	r3, r2
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	4413      	add	r3, r2
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	440b      	add	r3, r1
 8000f7c:	330c      	adds	r3, #12
 8000f7e:	2201      	movs	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <UnlinkTimer+0xf8>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b06      	cmp	r3, #6
 8000f8a:	d107      	bne.n	8000f9c <UnlinkTimer+0xec>
 8000f8c:	79bb      	ldrb	r3, [r7, #6]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d104      	bne.n	8000f9c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <UnlinkTimer+0x104>)
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	601a      	str	r2, [r3, #0]
  }

  return;
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
}
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	20000114 	.word	0x20000114
 8000fac:	20000115 	.word	0x20000115
 8000fb0:	20000084 	.word	0x20000084
 8000fb4:	20000118 	.word	0x20000118

08000fb8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000fbe:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <ReturnTimeElapsed+0x70>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc6:	d026      	beq.n	8001016 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000fc8:	f7ff fe02 	bl	8000bd0 <ReadRtcSsrValue>
 8000fcc:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000fce:	4b16      	ldr	r3, [pc, #88]	; (8001028 <ReturnTimeElapsed+0x70>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d805      	bhi.n	8000fe4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <ReturnTimeElapsed+0x70>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	e00a      	b.n	8000ffa <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <ReturnTimeElapsed+0x74>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <ReturnTimeElapsed+0x70>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	683a      	ldr	r2, [r7, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <ReturnTimeElapsed+0x78>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	fb02 f303 	mul.w	r3, r2, r3
 8001006:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001008:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <ReturnTimeElapsed+0x7c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	40d3      	lsrs	r3, r2
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	e001      	b.n	800101a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	b29b      	uxth	r3, r3
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000118 	.word	0x20000118
 800102c:	2000021a 	.word	0x2000021a
 8001030:	20000219 	.word	0x20000219
 8001034:	20000218 	.word	0x20000218

08001038 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d108      	bne.n	800105a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001048:	f7ff fdc2 	bl	8000bd0 <ReadRtcSsrValue>
 800104c:	4603      	mov	r3, r0
 800104e:	4a24      	ldr	r2, [pc, #144]	; (80010e0 <RestartWakeupCounter+0xa8>)
 8001050:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001052:	2003      	movs	r0, #3
 8001054:	f001 f9ed 	bl	8002432 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001058:	e03e      	b.n	80010d8 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d803      	bhi.n	8001068 <RestartWakeupCounter+0x30>
 8001060:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <RestartWakeupCounter+0xac>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d002      	beq.n	800106e <RestartWakeupCounter+0x36>
      Value -= 1;
 8001068:	88fb      	ldrh	r3, [r7, #6]
 800106a:	3b01      	subs	r3, #1
 800106c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800106e:	bf00      	nop
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <RestartWakeupCounter+0xb0>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	f003 0304 	and.w	r3, r3, #4
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0f7      	beq.n	8001070 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001080:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <RestartWakeupCounter+0xb0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <RestartWakeupCounter+0xb0>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001094:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <RestartWakeupCounter+0xb4>)
 8001098:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800109c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800109e:	2003      	movs	r0, #3
 80010a0:	f001 f9d5 	bl	800244e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <RestartWakeupCounter+0xb8>)
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	0c1b      	lsrs	r3, r3, #16
 80010aa:	041b      	lsls	r3, r3, #16
 80010ac:	88fa      	ldrh	r2, [r7, #6]
 80010ae:	4910      	ldr	r1, [pc, #64]	; (80010f0 <RestartWakeupCounter+0xb8>)
 80010b0:	4313      	orrs	r3, r2
 80010b2:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80010b4:	f7ff fd8c 	bl	8000bd0 <ReadRtcSsrValue>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4a09      	ldr	r2, [pc, #36]	; (80010e0 <RestartWakeupCounter+0xa8>)
 80010bc:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <RestartWakeupCounter+0xb0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <RestartWakeupCounter+0xb0>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80010d0:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80010d2:	f3af 8000 	nop.w
  return ;
 80010d6:	bf00      	nop
}
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000118 	.word	0x20000118
 80010e4:	20000218 	.word	0x20000218
 80010e8:	20000214 	.word	0x20000214
 80010ec:	58000800 	.word	0x58000800
 80010f0:	40002800 	.word	0x40002800

080010f4 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80010fa:	4b47      	ldr	r3, [pc, #284]	; (8001218 <RescheduleTimerList+0x124>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001106:	d108      	bne.n	800111a <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001108:	bf00      	nop
 800110a:	4b44      	ldr	r3, [pc, #272]	; (800121c <RescheduleTimerList+0x128>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f7      	bne.n	800110a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800111a:	4b40      	ldr	r3, [pc, #256]	; (800121c <RescheduleTimerList+0x128>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	4b3e      	ldr	r3, [pc, #248]	; (800121c <RescheduleTimerList+0x128>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800112c:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800112e:	4b3c      	ldr	r3, [pc, #240]	; (8001220 <RescheduleTimerList+0x12c>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001134:	7bfa      	ldrb	r2, [r7, #15]
 8001136:	493b      	ldr	r1, [pc, #236]	; (8001224 <RescheduleTimerList+0x130>)
 8001138:	4613      	mov	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	4413      	add	r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	440b      	add	r3, r1
 8001142:	3308      	adds	r3, #8
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001148:	f7ff ff36 	bl	8000fb8 <ReturnTimeElapsed>
 800114c:	4603      	mov	r3, r0
 800114e:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001150:	88fb      	ldrh	r3, [r7, #6]
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	429a      	cmp	r2, r3
 8001156:	d205      	bcs.n	8001164 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800115c:	4b32      	ldr	r3, [pc, #200]	; (8001228 <RescheduleTimerList+0x134>)
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
 8001162:	e04d      	b.n	8001200 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	4a31      	ldr	r2, [pc, #196]	; (800122c <RescheduleTimerList+0x138>)
 8001168:	8812      	ldrh	r2, [r2, #0]
 800116a:	b292      	uxth	r2, r2
 800116c:	4413      	add	r3, r2
 800116e:	461a      	mov	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	4293      	cmp	r3, r2
 8001174:	d906      	bls.n	8001184 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001176:	4b2d      	ldr	r3, [pc, #180]	; (800122c <RescheduleTimerList+0x138>)
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800117c:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <RescheduleTimerList+0x134>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
 8001182:	e03d      	b.n	8001200 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	b29a      	uxth	r2, r3
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800118e:	4b26      	ldr	r3, [pc, #152]	; (8001228 <RescheduleTimerList+0x134>)
 8001190:	2201      	movs	r2, #1
 8001192:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001194:	e034      	b.n	8001200 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001196:	7bfa      	ldrb	r2, [r7, #15]
 8001198:	4922      	ldr	r1, [pc, #136]	; (8001224 <RescheduleTimerList+0x130>)
 800119a:	4613      	mov	r3, r2
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	4413      	add	r3, r2
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	440b      	add	r3, r1
 80011a4:	3308      	adds	r3, #8
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d20a      	bcs.n	80011c4 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80011ae:	7bfa      	ldrb	r2, [r7, #15]
 80011b0:	491c      	ldr	r1, [pc, #112]	; (8001224 <RescheduleTimerList+0x130>)
 80011b2:	4613      	mov	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4413      	add	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	440b      	add	r3, r1
 80011bc:	3308      	adds	r3, #8
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	e013      	b.n	80011ec <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80011c4:	7bfa      	ldrb	r2, [r7, #15]
 80011c6:	4917      	ldr	r1, [pc, #92]	; (8001224 <RescheduleTimerList+0x130>)
 80011c8:	4613      	mov	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	4413      	add	r3, r2
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	440b      	add	r3, r1
 80011d2:	3308      	adds	r3, #8
 80011d4:	6819      	ldr	r1, [r3, #0]
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	7bfa      	ldrb	r2, [r7, #15]
 80011da:	1ac9      	subs	r1, r1, r3
 80011dc:	4811      	ldr	r0, [pc, #68]	; (8001224 <RescheduleTimerList+0x130>)
 80011de:	4613      	mov	r3, r2
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	4413      	add	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	4403      	add	r3, r0
 80011e8:	3308      	adds	r3, #8
 80011ea:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80011ec:	7bfa      	ldrb	r2, [r7, #15]
 80011ee:	490d      	ldr	r1, [pc, #52]	; (8001224 <RescheduleTimerList+0x130>)
 80011f0:	4613      	mov	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4413      	add	r3, r2
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	440b      	add	r3, r1
 80011fa:	3315      	adds	r3, #21
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	2b06      	cmp	r3, #6
 8001204:	d1c7      	bne.n	8001196 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001206:	89bb      	ldrh	r3, [r7, #12]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff15 	bl	8001038 <RestartWakeupCounter>

  return ;
 800120e:	bf00      	nop
}
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40002800 	.word	0x40002800
 800121c:	20000214 	.word	0x20000214
 8001220:	20000114 	.word	0x20000114
 8001224:	20000084 	.word	0x20000084
 8001228:	2000011c 	.word	0x2000011c
 800122c:	2000021c 	.word	0x2000021c

08001230 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001236:	f3ef 8310 	mrs	r3, PRIMASK
 800123a:	617b      	str	r3, [r7, #20]
  return(result);
 800123c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001240:	b672      	cpsid	i
}
 8001242:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001244:	4b5f      	ldr	r3, [pc, #380]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	22ca      	movs	r2, #202	; 0xca
 800124c:	625a      	str	r2, [r3, #36]	; 0x24
 800124e:	4b5d      	ldr	r3, [pc, #372]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2253      	movs	r2, #83	; 0x53
 8001256:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001258:	4b5a      	ldr	r3, [pc, #360]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	4b58      	ldr	r3, [pc, #352]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800126a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800126c:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <HW_TS_RTC_Wakeup_Handler+0x198>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001274:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001278:	4954      	ldr	r1, [pc, #336]	; (80013cc <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800127a:	4613      	mov	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4413      	add	r3, r2
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	440b      	add	r3, r1
 8001284:	330c      	adds	r3, #12
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d172      	bne.n	8001374 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800128e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001292:	494e      	ldr	r1, [pc, #312]	; (80013cc <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001294:	4613      	mov	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	440b      	add	r3, r1
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80012a2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80012a6:	4949      	ldr	r1, [pc, #292]	; (80013cc <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80012a8:	4613      	mov	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	4413      	add	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	440b      	add	r3, r1
 80012b2:	3310      	adds	r3, #16
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80012b8:	4b45      	ldr	r3, [pc, #276]	; (80013d0 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d050      	beq.n	8001364 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80012c2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80012c6:	4941      	ldr	r1, [pc, #260]	; (80013cc <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	440b      	add	r3, r1
 80012d2:	330d      	adds	r3, #13
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d126      	bne.n	800132a <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80012dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80012e0:	2101      	movs	r1, #1
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fde4 	bl	8000eb0 <UnlinkTimer>
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	f383 8810 	msr	PRIMASK, r3
}
 80012f2:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80012f4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80012f8:	4934      	ldr	r1, [pc, #208]	; (80013cc <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80012fa:	4613      	mov	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	4413      	add	r3, r2
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	440b      	add	r3, r1
 8001304:	3304      	adds	r3, #4
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800130c:	4611      	mov	r1, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f9d4 	bl	80016bc <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001314:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	22ca      	movs	r2, #202	; 0xca
 800131c:	625a      	str	r2, [r3, #36]	; 0x24
 800131e:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2253      	movs	r2, #83	; 0x53
 8001326:	625a      	str	r2, [r3, #36]	; 0x24
 8001328:	e014      	b.n	8001354 <HW_TS_RTC_Wakeup_Handler+0x124>
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f383 8810 	msr	PRIMASK, r3
}
 8001334:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001336:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f932 	bl	80015a4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001340:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	22ca      	movs	r2, #202	; 0xca
 8001348:	625a      	str	r2, [r3, #36]	; 0x24
 800134a:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2253      	movs	r2, #83	; 0x53
 8001352:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001354:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	4619      	mov	r1, r3
 800135c:	69b8      	ldr	r0, [r7, #24]
 800135e:	f000 fa35 	bl	80017cc <HW_TS_RTC_Int_AppNot>
 8001362:	e025      	b.n	80013b0 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8001364:	f7ff fec6 	bl	80010f4 <RescheduleTimerList>
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	f383 8810 	msr	PRIMASK, r3
}
 8001372:	e01d      	b.n	80013b0 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001374:	bf00      	nop
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f7      	beq.n	8001376 <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800139a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800139c:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 800139e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013a2:	60da      	str	r2, [r3, #12]
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f383 8810 	msr	PRIMASK, r3
}
 80013ae:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	22ff      	movs	r2, #255	; 0xff
 80013b8:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80013ba:	bf00      	nop
}
 80013bc:	3728      	adds	r7, #40	; 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000214 	.word	0x20000214
 80013c8:	20000114 	.word	0x20000114
 80013cc:	20000084 	.word	0x20000084
 80013d0:	2000011c 	.word	0x2000011c
 80013d4:	58000800 	.word	0x58000800

080013d8 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 80013e4:	4a64      	ldr	r2, [pc, #400]	; (8001578 <HW_TS_Init+0x1a0>)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80013ea:	4b63      	ldr	r3, [pc, #396]	; (8001578 <HW_TS_Init+0x1a0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	22ca      	movs	r2, #202	; 0xca
 80013f2:	625a      	str	r2, [r3, #36]	; 0x24
 80013f4:	4b60      	ldr	r3, [pc, #384]	; (8001578 <HW_TS_Init+0x1a0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2253      	movs	r2, #83	; 0x53
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80013fe:	4b5f      	ldr	r3, [pc, #380]	; (800157c <HW_TS_Init+0x1a4>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	4a5e      	ldr	r2, [pc, #376]	; (800157c <HW_TS_Init+0x1a4>)
 8001404:	f043 0320 	orr.w	r3, r3, #32
 8001408:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800140a:	4b5c      	ldr	r3, [pc, #368]	; (800157c <HW_TS_Init+0x1a4>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	b2db      	uxtb	r3, r3
 8001416:	f1c3 0304 	rsb	r3, r3, #4
 800141a:	b2da      	uxtb	r2, r3
 800141c:	4b58      	ldr	r3, [pc, #352]	; (8001580 <HW_TS_Init+0x1a8>)
 800141e:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001420:	4b56      	ldr	r3, [pc, #344]	; (800157c <HW_TS_Init+0x1a4>)
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001428:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800142c:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	fa92 f2a2 	rbit	r2, r2
 8001434:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	2a00      	cmp	r2, #0
 800143e:	d101      	bne.n	8001444 <HW_TS_Init+0x6c>
  {
    return 32U;
 8001440:	2220      	movs	r2, #32
 8001442:	e003      	b.n	800144c <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	fab2 f282 	clz	r2, r2
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	40d3      	lsrs	r3, r2
 800144e:	b2db      	uxtb	r3, r3
 8001450:	3301      	adds	r3, #1
 8001452:	b2da      	uxtb	r2, r3
 8001454:	4b4b      	ldr	r3, [pc, #300]	; (8001584 <HW_TS_Init+0x1ac>)
 8001456:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001458:	4b48      	ldr	r3, [pc, #288]	; (800157c <HW_TS_Init+0x1a4>)
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	b29b      	uxth	r3, r3
 800145e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001462:	b29b      	uxth	r3, r3
 8001464:	3301      	adds	r3, #1
 8001466:	b29a      	uxth	r2, r3
 8001468:	4b47      	ldr	r3, [pc, #284]	; (8001588 <HW_TS_Init+0x1b0>)
 800146a:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800146c:	4b46      	ldr	r3, [pc, #280]	; (8001588 <HW_TS_Init+0x1b0>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	3b01      	subs	r3, #1
 8001472:	4a44      	ldr	r2, [pc, #272]	; (8001584 <HW_TS_Init+0x1ac>)
 8001474:	7812      	ldrb	r2, [r2, #0]
 8001476:	fb02 f303 	mul.w	r3, r2, r3
 800147a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800147e:	4a40      	ldr	r2, [pc, #256]	; (8001580 <HW_TS_Init+0x1a8>)
 8001480:	7812      	ldrb	r2, [r2, #0]
 8001482:	40d3      	lsrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800148c:	4293      	cmp	r3, r2
 800148e:	d904      	bls.n	800149a <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001490:	4b3e      	ldr	r3, [pc, #248]	; (800158c <HW_TS_Init+0x1b4>)
 8001492:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001496:	801a      	strh	r2, [r3, #0]
 8001498:	e003      	b.n	80014a2 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	b29a      	uxth	r2, r3
 800149e:	4b3b      	ldr	r3, [pc, #236]	; (800158c <HW_TS_Init+0x1b4>)
 80014a0:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80014a2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80014a6:	f7ff fb81 	bl	8000bac <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80014aa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80014ae:	f7ff fb69 	bl	8000b84 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d143      	bne.n	8001540 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80014b8:	4b35      	ldr	r3, [pc, #212]	; (8001590 <HW_TS_Init+0x1b8>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80014be:	4b35      	ldr	r3, [pc, #212]	; (8001594 <HW_TS_Init+0x1bc>)
 80014c0:	f04f 32ff 	mov.w	r2, #4294967295
 80014c4:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	77fb      	strb	r3, [r7, #31]
 80014ca:	e00c      	b.n	80014e6 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80014cc:	7ffa      	ldrb	r2, [r7, #31]
 80014ce:	4932      	ldr	r1, [pc, #200]	; (8001598 <HW_TS_Init+0x1c0>)
 80014d0:	4613      	mov	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4413      	add	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	440b      	add	r3, r1
 80014da:	330c      	adds	r3, #12
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80014e0:	7ffb      	ldrb	r3, [r7, #31]
 80014e2:	3301      	adds	r3, #1
 80014e4:	77fb      	strb	r3, [r7, #31]
 80014e6:	7ffb      	ldrb	r3, [r7, #31]
 80014e8:	2b05      	cmp	r3, #5
 80014ea:	d9ef      	bls.n	80014cc <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80014ec:	4b2b      	ldr	r3, [pc, #172]	; (800159c <HW_TS_Init+0x1c4>)
 80014ee:	2206      	movs	r2, #6
 80014f0:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <HW_TS_Init+0x1a0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <HW_TS_Init+0x1a0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001504:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001506:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <HW_TS_Init+0x1a0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	b2da      	uxtb	r2, r3
 8001510:	4b19      	ldr	r3, [pc, #100]	; (8001578 <HW_TS_Init+0x1a0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800151a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800151c:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <HW_TS_Init+0x1c8>)
 800151e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001522:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001524:	2003      	movs	r0, #3
 8001526:	f000 ff92 	bl	800244e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800152a:	4b13      	ldr	r3, [pc, #76]	; (8001578 <HW_TS_Init+0x1a0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <HW_TS_Init+0x1a0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	e00a      	b.n	8001556 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001540:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <HW_TS_Init+0x1a0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154c:	2b00      	cmp	r3, #0
 800154e:	d002      	beq.n	8001556 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001550:	2003      	movs	r0, #3
 8001552:	f000 ff6e 	bl	8002432 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <HW_TS_Init+0x1a0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	22ff      	movs	r2, #255	; 0xff
 800155e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001560:	2200      	movs	r2, #0
 8001562:	2103      	movs	r1, #3
 8001564:	2003      	movs	r0, #3
 8001566:	f000 ff22 	bl	80023ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800156a:	2003      	movs	r0, #3
 800156c:	f000 ff39 	bl	80023e2 <HAL_NVIC_EnableIRQ>

  return;
 8001570:	bf00      	nop
}
 8001572:	3720      	adds	r7, #32
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000214 	.word	0x20000214
 800157c:	40002800 	.word	0x40002800
 8001580:	20000218 	.word	0x20000218
 8001584:	20000219 	.word	0x20000219
 8001588:	2000021a 	.word	0x2000021a
 800158c:	2000021c 	.word	0x2000021c
 8001590:	2000011c 	.word	0x2000011c
 8001594:	20000118 	.word	0x20000118
 8001598:	20000084 	.word	0x20000084
 800159c:	20000114 	.word	0x20000114
 80015a0:	58000800 	.word	0x58000800

080015a4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015ae:	f3ef 8310 	mrs	r3, PRIMASK
 80015b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80015b4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80015b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80015b8:	b672      	cpsid	i
}
 80015ba:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80015bc:	2003      	movs	r0, #3
 80015be:	f000 ff1e 	bl	80023fe <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80015c2:	4b38      	ldr	r3, [pc, #224]	; (80016a4 <HW_TS_Stop+0x100>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	22ca      	movs	r2, #202	; 0xca
 80015ca:	625a      	str	r2, [r3, #36]	; 0x24
 80015cc:	4b35      	ldr	r3, [pc, #212]	; (80016a4 <HW_TS_Stop+0x100>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2253      	movs	r2, #83	; 0x53
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80015d6:	79fa      	ldrb	r2, [r7, #7]
 80015d8:	4933      	ldr	r1, [pc, #204]	; (80016a8 <HW_TS_Stop+0x104>)
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	440b      	add	r3, r1
 80015e4:	330c      	adds	r3, #12
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d148      	bne.n	8001680 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fc5c 	bl	8000eb0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80015f8:	4b2c      	ldr	r3, [pc, #176]	; (80016ac <HW_TS_Stop+0x108>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80015fe:	7cfb      	ldrb	r3, [r7, #19]
 8001600:	2b06      	cmp	r3, #6
 8001602:	d135      	bne.n	8001670 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001604:	4b2a      	ldr	r3, [pc, #168]	; (80016b0 <HW_TS_Stop+0x10c>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800160c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001610:	d108      	bne.n	8001624 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001612:	bf00      	nop
 8001614:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <HW_TS_Stop+0x100>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1f7      	bne.n	8001614 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001624:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <HW_TS_Stop+0x100>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <HW_TS_Stop+0x100>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001636:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001638:	bf00      	nop
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <HW_TS_Stop+0x100>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f7      	beq.n	800163a <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800164a:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <HW_TS_Stop+0x100>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <HW_TS_Stop+0x100>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800165e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001660:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <HW_TS_Stop+0x110>)
 8001662:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001666:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001668:	2003      	movs	r0, #3
 800166a:	f000 fef0 	bl	800244e <HAL_NVIC_ClearPendingIRQ>
 800166e:	e007      	b.n	8001680 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <HW_TS_Stop+0x114>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	7cfa      	ldrb	r2, [r7, #19]
 8001678:	429a      	cmp	r2, r3
 800167a:	d001      	beq.n	8001680 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 800167c:	f7ff fd3a 	bl	80010f4 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HW_TS_Stop+0x100>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	22ff      	movs	r2, #255	; 0xff
 8001688:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800168a:	2003      	movs	r0, #3
 800168c:	f000 fea9 	bl	80023e2 <HAL_NVIC_EnableIRQ>
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	f383 8810 	msr	PRIMASK, r3
}
 800169a:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800169c:	bf00      	nop
}
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000214 	.word	0x20000214
 80016a8:	20000084 	.word	0x20000084
 80016ac:	20000114 	.word	0x20000114
 80016b0:	40002800 	.word	0x40002800
 80016b4:	58000800 	.word	0x58000800
 80016b8:	20000115 	.word	0x20000115

080016bc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	6039      	str	r1, [r7, #0]
 80016c6:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80016c8:	79fa      	ldrb	r2, [r7, #7]
 80016ca:	493c      	ldr	r1, [pc, #240]	; (80017bc <HW_TS_Start+0x100>)
 80016cc:	4613      	mov	r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4413      	add	r3, r2
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	440b      	add	r3, r1
 80016d6:	330c      	adds	r3, #12
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d103      	bne.n	80016e8 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff ff5e 	bl	80015a4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016e8:	f3ef 8310 	mrs	r3, PRIMASK
 80016ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80016ee:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80016f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80016f2:	b672      	cpsid	i
}
 80016f4:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80016f6:	2003      	movs	r0, #3
 80016f8:	f000 fe81 	bl	80023fe <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80016fc:	4b30      	ldr	r3, [pc, #192]	; (80017c0 <HW_TS_Start+0x104>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	22ca      	movs	r2, #202	; 0xca
 8001704:	625a      	str	r2, [r3, #36]	; 0x24
 8001706:	4b2e      	ldr	r3, [pc, #184]	; (80017c0 <HW_TS_Start+0x104>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2253      	movs	r2, #83	; 0x53
 800170e:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001710:	79fa      	ldrb	r2, [r7, #7]
 8001712:	492a      	ldr	r1, [pc, #168]	; (80017bc <HW_TS_Start+0x100>)
 8001714:	4613      	mov	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4413      	add	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	440b      	add	r3, r1
 800171e:	330c      	adds	r3, #12
 8001720:	2202      	movs	r2, #2
 8001722:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001724:	79fa      	ldrb	r2, [r7, #7]
 8001726:	4925      	ldr	r1, [pc, #148]	; (80017bc <HW_TS_Start+0x100>)
 8001728:	4613      	mov	r3, r2
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4413      	add	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	440b      	add	r3, r1
 8001732:	3308      	adds	r3, #8
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001738:	79fa      	ldrb	r2, [r7, #7]
 800173a:	4920      	ldr	r1, [pc, #128]	; (80017bc <HW_TS_Start+0x100>)
 800173c:	4613      	mov	r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4413      	add	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	440b      	add	r3, r1
 8001746:	3304      	adds	r3, #4
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fb04 	bl	8000d5c <linkTimer>
 8001754:	4603      	mov	r3, r0
 8001756:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001758:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <HW_TS_Start+0x108>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <HW_TS_Start+0x10c>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	7c7a      	ldrb	r2, [r7, #17]
 8001766:	429a      	cmp	r2, r3
 8001768:	d002      	beq.n	8001770 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 800176a:	f7ff fcc3 	bl	80010f4 <RescheduleTimerList>
 800176e:	e013      	b.n	8001798 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001770:	79fa      	ldrb	r2, [r7, #7]
 8001772:	4912      	ldr	r1, [pc, #72]	; (80017bc <HW_TS_Start+0x100>)
 8001774:	4613      	mov	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4413      	add	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	440b      	add	r3, r1
 800177e:	3308      	adds	r3, #8
 8001780:	6819      	ldr	r1, [r3, #0]
 8001782:	8a7b      	ldrh	r3, [r7, #18]
 8001784:	79fa      	ldrb	r2, [r7, #7]
 8001786:	1ac9      	subs	r1, r1, r3
 8001788:	480c      	ldr	r0, [pc, #48]	; (80017bc <HW_TS_Start+0x100>)
 800178a:	4613      	mov	r3, r2
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4413      	add	r3, r2
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	4403      	add	r3, r0
 8001794:	3308      	adds	r3, #8
 8001796:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001798:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <HW_TS_Start+0x104>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	22ff      	movs	r2, #255	; 0xff
 80017a0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80017a2:	2003      	movs	r0, #3
 80017a4:	f000 fe1d 	bl	80023e2 <HAL_NVIC_EnableIRQ>
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	f383 8810 	msr	PRIMASK, r3
}
 80017b2:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80017b4:	bf00      	nop
}
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000084 	.word	0x20000084
 80017c0:	20000214 	.word	0x20000214
 80017c4:	20000114 	.word	0x20000114
 80017c8:	20000115 	.word	0x20000115

080017cc <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	460b      	mov	r3, r1
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4798      	blx	r3

  return;
 80017de:	bf00      	nop
}
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <LL_RCC_LSE_SetDriveCapability>:
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80017ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f6:	f023 0218 	bic.w	r2, r3, #24
 80017fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4313      	orrs	r3, r2
 8001802:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <LL_AHB2_GRP1_EnableClock>:
{
 8001812:	b480      	push	{r7}
 8001814:	b085      	sub	sp, #20
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800181a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001820:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4313      	orrs	r3, r2
 8001828:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800182a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800182e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4013      	ands	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001836:	68fb      	ldr	r3, [r7, #12]
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//UART Message Buffer:
	char MSG[35] = {'\0'};
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	f107 0308 	add.w	r3, r7, #8
 8001852:	221f      	movs	r2, #31
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f007 f874 	bl	8008944 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800185c:	f000 fbe6 	bl	800202c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001860:	f7fe ffe2 	bl	8000828 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001864:	f000 f824 	bl	80018b0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001868:	f000 f884 	bl	8001974 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 800186c:	f000 f8a2 	bl	80019b4 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001870:	f000 f93c 	bl	8001aec <MX_GPIO_Init>
  MX_RF_Init();
 8001874:	f000 f8b2 	bl	80019dc <MX_RF_Init>
  MX_RTC_Init();
 8001878:	f000 f8b8 	bl	80019ec <MX_RTC_Init>
  MX_USART1_UART_Init();
 800187c:	f000 f8ea 	bl	8001a54 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001880:	f7fe ffe0 	bl	8000844 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  sprintf(MSG, "Initializing... \r\n");
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	4909      	ldr	r1, [pc, #36]	; (80018ac <main+0x68>)
 8001888:	4618      	mov	r0, r3
 800188a:	f007 f863 	bl	8008954 <siprintf>
  UART_Transmit((uint8_t*)MSG, strlen(MSG));
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fc75 	bl	8000180 <strlen>
 8001896:	4603      	mov	r3, r0
 8001898:	b29a      	uxth	r2, r3
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	4611      	mov	r1, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 f97e 	bl	8001ba0 <UART_Transmit>
  while (1)
  {


	  /* USER CODE END WHILE */
    MX_APPE_Process();
 80018a4:	f7ff f92f 	bl	8000b06 <MX_APPE_Process>
 80018a8:	e7fc      	b.n	80018a4 <main+0x60>
 80018aa:	bf00      	nop
 80018ac:	08009248 	.word	0x08009248

080018b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b09a      	sub	sp, #104	; 0x68
 80018b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018b6:	f107 0320 	add.w	r3, r7, #32
 80018ba:	2248      	movs	r2, #72	; 0x48
 80018bc:	2100      	movs	r1, #0
 80018be:	4618      	mov	r0, r3
 80018c0:	f007 f840 	bl	8008944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
 80018d0:	611a      	str	r2, [r3, #16]
 80018d2:	615a      	str	r2, [r3, #20]
 80018d4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80018d6:	f001 f82d 	bl	8002934 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80018da:	2000      	movs	r0, #0
 80018dc:	f7ff ff83 	bl	80017e6 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e0:	4b23      	ldr	r3, [pc, #140]	; (8001970 <SystemClock_Config+0xc0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018e8:	4a21      	ldr	r2, [pc, #132]	; (8001970 <SystemClock_Config+0xc0>)
 80018ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <SystemClock_Config+0xc0>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80018fc:	2327      	movs	r3, #39	; 0x27
 80018fe:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001900:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001906:	2301      	movs	r3, #1
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800190a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001910:	2301      	movs	r3, #1
 8001912:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001914:	2340      	movs	r3, #64	; 0x40
 8001916:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001918:	2300      	movs	r3, #0
 800191a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800191c:	23a0      	movs	r3, #160	; 0xa0
 800191e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001920:	2300      	movs	r3, #0
 8001922:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001924:	f107 0320 	add.w	r3, r7, #32
 8001928:	4618      	mov	r0, r3
 800192a:	f001 fb97 	bl	800305c <HAL_RCC_OscConfig>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001934:	f000 f950 	bl	8001bd8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001938:	236f      	movs	r3, #111	; 0x6f
 800193a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800193c:	2300      	movs	r3, #0
 800193e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001944:	2300      	movs	r3, #0
 8001946:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800194c:	2300      	movs	r3, #0
 800194e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001950:	2300      	movs	r3, #0
 8001952:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	2101      	movs	r1, #1
 8001958:	4618      	mov	r0, r3
 800195a:	f001 ff0d 	bl	8003778 <HAL_RCC_ClockConfig>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001964:	f000 f938 	bl	8001bd8 <Error_Handler>
  }
}
 8001968:	bf00      	nop
 800196a:	3768      	adds	r7, #104	; 0x68
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	58000400 	.word	0x58000400

08001974 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b094      	sub	sp, #80	; 0x50
 8001978:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800197a:	463b      	mov	r3, r7
 800197c:	2250      	movs	r2, #80	; 0x50
 800197e:	2100      	movs	r1, #0
 8001980:	4618      	mov	r0, r3
 8001982:	f006 ffdf 	bl	8008944 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001986:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800198a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800198c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001990:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001992:	2300      	movs	r3, #0
 8001994:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001996:	2300      	movs	r3, #0
 8001998:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800199a:	463b      	mov	r3, r7
 800199c:	4618      	mov	r0, r3
 800199e:	f002 fb28 	bl	8003ff2 <HAL_RCCEx_PeriphCLKConfig>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80019a8:	f000 f916 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80019ac:	bf00      	nop
 80019ae:	3750      	adds	r7, #80	; 0x50
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <MX_IPCC_Init+0x20>)
 80019ba:	4a07      	ldr	r2, [pc, #28]	; (80019d8 <MX_IPCC_Init+0x24>)
 80019bc:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80019be:	4805      	ldr	r0, [pc, #20]	; (80019d4 <MX_IPCC_Init+0x20>)
 80019c0:	f000 ff32 	bl	8002828 <HAL_IPCC_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80019ca:	f000 f905 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000220 	.word	0x20000220
 80019d8:	58000c00 	.word	0x58000c00

080019dc <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019f0:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <MX_RTC_Init+0x60>)
 80019f2:	4a17      	ldr	r2, [pc, #92]	; (8001a50 <MX_RTC_Init+0x64>)
 80019f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <MX_RTC_Init+0x60>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80019fc:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <MX_RTC_Init+0x60>)
 80019fe:	220f      	movs	r2, #15
 8001a00:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001a02:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <MX_RTC_Init+0x60>)
 8001a04:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001a08:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <MX_RTC_Init+0x60>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a10:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <MX_RTC_Init+0x60>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a16:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <MX_RTC_Init+0x60>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <MX_RTC_Init+0x60>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a22:	480a      	ldr	r0, [pc, #40]	; (8001a4c <MX_RTC_Init+0x60>)
 8001a24:	f002 fd6c 	bl	8004500 <HAL_RTC_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001a2e:	f000 f8d3 	bl	8001bd8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	4805      	ldr	r0, [pc, #20]	; (8001a4c <MX_RTC_Init+0x60>)
 8001a38:	f002 fe50 	bl	80046dc <HAL_RTCEx_SetWakeUpTimer_IT>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001a42:	f000 f8c9 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	2000025c 	.word	0x2000025c
 8001a50:	40002800 	.word	0x40002800

08001a54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a58:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001a5a:	4a23      	ldr	r2, [pc, #140]	; (8001ae8 <MX_USART1_UART_Init+0x94>)
 8001a5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a5e:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a66:	4b1f      	ldr	r3, [pc, #124]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a72:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a78:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a7e:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a84:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a8a:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a96:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a9c:	4811      	ldr	r0, [pc, #68]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001a9e:	f002 fef9 	bl	8004894 <HAL_UART_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001aa8:	f000 f896 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aac:	2100      	movs	r1, #0
 8001aae:	480d      	ldr	r0, [pc, #52]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001ab0:	f003 fbec 	bl	800528c <HAL_UARTEx_SetTxFifoThreshold>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001aba:	f000 f88d 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4808      	ldr	r0, [pc, #32]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001ac2:	f003 fc21 	bl	8005308 <HAL_UARTEx_SetRxFifoThreshold>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001acc:	f000 f884 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ad0:	4804      	ldr	r0, [pc, #16]	; (8001ae4 <MX_USART1_UART_Init+0x90>)
 8001ad2:	f003 fba2 	bl	800521a <HAL_UARTEx_DisableFifoMode>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001adc:	f000 f87c 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000280 	.word	0x20000280
 8001ae8:	40013800 	.word	0x40013800

08001aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b00:	2004      	movs	r0, #4
 8001b02:	f7ff fe86 	bl	8001812 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b06:	2002      	movs	r0, #2
 8001b08:	f7ff fe83 	bl	8001812 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f7ff fe80 	bl	8001812 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b12:	2008      	movs	r0, #8
 8001b14:	f7ff fe7d 	bl	8001812 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2123      	movs	r1, #35	; 0x23
 8001b1c:	481d      	ldr	r0, [pc, #116]	; (8001b94 <MX_GPIO_Init+0xa8>)
 8001b1e:	f000 fe2d 	bl	800277c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b22:	2310      	movs	r3, #16
 8001b24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b26:	2300      	movs	r3, #0
 8001b28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	4619      	mov	r1, r3
 8001b32:	4819      	ldr	r0, [pc, #100]	; (8001b98 <MX_GPIO_Init+0xac>)
 8001b34:	f000 fc9a 	bl	800246c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001b38:	2323      	movs	r3, #35	; 0x23
 8001b3a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	2300      	movs	r3, #0
 8001b46:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4811      	ldr	r0, [pc, #68]	; (8001b94 <MX_GPIO_Init+0xa8>)
 8001b4e:	f000 fc8d 	bl	800246c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b52:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2300      	movs	r3, #0
 8001b62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001b64:	230a      	movs	r3, #10
 8001b66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b70:	f000 fc7c 	bl	800246c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001b74:	2303      	movs	r3, #3
 8001b76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	4619      	mov	r1, r3
 8001b84:	4805      	ldr	r0, [pc, #20]	; (8001b9c <MX_GPIO_Init+0xb0>)
 8001b86:	f000 fc71 	bl	800246c <HAL_GPIO_Init>

}
 8001b8a:	bf00      	nop
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	48000400 	.word	0x48000400
 8001b98:	48000800 	.word	0x48000800
 8001b9c:	48000c00 	.word	0x48000c00

08001ba0 <UART_Transmit>:

/* USER CODE BEGIN 4 */

int UART_Transmit(uint8_t* data, uint16_t size){
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	807b      	strh	r3, [r7, #2]
	  HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, data, size, 0xffff);
 8001bac:	887a      	ldrh	r2, [r7, #2]
 8001bae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	4807      	ldr	r0, [pc, #28]	; (8001bd4 <UART_Transmit+0x34>)
 8001bb6:	f002 febd 	bl	8004934 <HAL_UART_Transmit>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK) {
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <UART_Transmit+0x28>
        //while (1);
        return 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	e000      	b.n	8001bca <UART_Transmit+0x2a>
    }
    return 1;
 8001bc8:	2301      	movs	r3, #1
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000280 	.word	0x20000280

08001bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001bdc:	b672      	cpsid	i
}
 8001bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <Error_Handler+0x8>

08001be2 <LL_RCC_EnableRTC>:
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_AHB2_GRP1_EnableClock>:
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4013      	ands	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c28:	68fb      	ldr	r3, [r7, #12]
}
 8001c2a:	bf00      	nop
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <LL_AHB3_GRP1_EnableClock>:
{
 8001c36:	b480      	push	{r7}
 8001c38:	b085      	sub	sp, #20
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4013      	ands	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
}
 8001c5c:	bf00      	nop
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
}
 8001c8e:	bf00      	nop
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b085      	sub	sp, #20
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ca8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001cd0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001cd4:	f7ff ffaf 	bl	8001c36 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2100      	movs	r1, #0
 8001cdc:	202e      	movs	r0, #46	; 0x2e
 8001cde:	f000 fb66 	bl	80023ae <HAL_NVIC_SetPriority>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001ce2:	202e      	movs	r0, #46	; 0x2e
 8001ce4:	f000 fb7d 	bl	80023e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a0d      	ldr	r2, [pc, #52]	; (8001d30 <HAL_IPCC_MspInit+0x44>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d113      	bne.n	8001d26 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001cfe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001d02:	f7ff ff98 	bl	8001c36 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2100      	movs	r1, #0
 8001d0a:	202c      	movs	r0, #44	; 0x2c
 8001d0c:	f000 fb4f 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001d10:	202c      	movs	r0, #44	; 0x2c
 8001d12:	f000 fb66 	bl	80023e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2100      	movs	r1, #0
 8001d1a:	202d      	movs	r0, #45	; 0x2d
 8001d1c:	f000 fb47 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001d20:	202d      	movs	r0, #45	; 0x2d
 8001d22:	f000 fb5e 	bl	80023e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	58000c00 	.word	0x58000c00

08001d34 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b096      	sub	sp, #88	; 0x58
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d3c:	f107 0308 	add.w	r3, r7, #8
 8001d40:	2250      	movs	r2, #80	; 0x50
 8001d42:	2100      	movs	r1, #0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f006 fdfd 	bl	8008944 <memset>
  if(hrtc->Instance==RTC)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <HAL_RTC_MspInit+0x64>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d11d      	bne.n	8001d90 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d58:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d5e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d60:	f107 0308 	add.w	r3, r7, #8
 8001d64:	4618      	mov	r0, r3
 8001d66:	f002 f944 	bl	8003ff2 <HAL_RCCEx_PeriphCLKConfig>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001d70:	f7ff ff32 	bl	8001bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d74:	f7ff ff35 	bl	8001be2 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001d78:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001d7c:	f7ff ff74 	bl	8001c68 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2100      	movs	r1, #0
 8001d84:	2003      	movs	r0, #3
 8001d86:	f000 fb12 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001d8a:	2003      	movs	r0, #3
 8001d8c:	f000 fb29 	bl	80023e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001d90:	bf00      	nop
 8001d92:	3758      	adds	r7, #88	; 0x58
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40002800 	.word	0x40002800

08001d9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b09c      	sub	sp, #112	; 0x70
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	2250      	movs	r2, #80	; 0x50
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f006 fdc1 	bl	8008944 <memset>
  if(huart->Instance==USART1)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a16      	ldr	r2, [pc, #88]	; (8001e20 <HAL_UART_MspInit+0x84>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d124      	bne.n	8001e16 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dd4:	f107 030c 	add.w	r3, r7, #12
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f002 f90a 	bl	8003ff2 <HAL_RCCEx_PeriphCLKConfig>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001de4:	f7ff fef8 	bl	8001bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001de8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001dec:	f7ff ff55 	bl	8001c9a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df0:	2002      	movs	r0, #2
 8001df2:	f7ff ff07 	bl	8001c04 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001df6:	23c0      	movs	r3, #192	; 0xc0
 8001df8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	2300      	movs	r3, #0
 8001e04:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e06:	2307      	movs	r3, #7
 8001e08:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4804      	ldr	r0, [pc, #16]	; (8001e24 <HAL_UART_MspInit+0x88>)
 8001e12:	f000 fb2b 	bl	800246c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e16:	bf00      	nop
 8001e18:	3770      	adds	r7, #112	; 0x70
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40013800 	.word	0x40013800
 8001e24:	48000400 	.word	0x48000400

08001e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e2c:	e7fe      	b.n	8001e2c <NMI_Handler+0x4>

08001e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e32:	e7fe      	b.n	8001e32 <HardFault_Handler+0x4>

08001e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e38:	e7fe      	b.n	8001e38 <MemManage_Handler+0x4>

08001e3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e3e:	e7fe      	b.n	8001e3e <BusFault_Handler+0x4>

08001e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <UsageFault_Handler+0x4>

08001e46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e74:	f000 f934 	bl	80020e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001e80:	f7ff f9d6 	bl	8001230 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001e8c:	f006 f96e 	bl	800816c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001e98:	f006 f9a0 	bl	80081dc <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001ea4:	f000 fc9c 	bl	80027e0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eb4:	4a14      	ldr	r2, [pc, #80]	; (8001f08 <_sbrk+0x5c>)
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <_sbrk+0x60>)
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec0:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <_sbrk+0x64>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d102      	bne.n	8001ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <_sbrk+0x64>)
 8001eca:	4a12      	ldr	r2, [pc, #72]	; (8001f14 <_sbrk+0x68>)
 8001ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <_sbrk+0x64>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d207      	bcs.n	8001eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001edc:	f006 fcfa 	bl	80088d4 <__errno>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	220c      	movs	r2, #12
 8001ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eea:	e009      	b.n	8001f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <_sbrk+0x64>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <_sbrk+0x64>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <_sbrk+0x64>)
 8001efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001efe:	68fb      	ldr	r3, [r7, #12]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20030000 	.word	0x20030000
 8001f0c:	00000400 	.word	0x00000400
 8001f10:	20000310 	.word	0x20000310
 8001f14:	20000590 	.word	0x20000590

08001f18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001f1c:	4b24      	ldr	r3, [pc, #144]	; (8001fb0 <SystemInit+0x98>)
 8001f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f22:	4a23      	ldr	r2, [pc, #140]	; (8001fb0 <SystemInit+0x98>)
 8001f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f40:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001f44:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f50:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <SystemInit+0x9c>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f62:	f023 0305 	bic.w	r3, r3, #5
 8001f66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f76:	f023 0301 	bic.w	r3, r3, #1
 8001f7a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f82:	4a0d      	ldr	r2, [pc, #52]	; (8001fb8 <SystemInit+0xa0>)
 8001f84:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8a:	4a0b      	ldr	r2, [pc, #44]	; (8001fb8 <SystemInit+0xa0>)
 8001f8c:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f9c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	619a      	str	r2, [r3, #24]
}
 8001fa6:	bf00      	nop
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00
 8001fb4:	faf6fefb 	.word	0xfaf6fefb
 8001fb8:	22041000 	.word	0x22041000

08001fbc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001fbc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fbe:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fc0:	3304      	adds	r3, #4

08001fc2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fc4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001fc6:	d3f9      	bcc.n	8001fbc <CopyDataInit>
  bx lr
 8001fc8:	4770      	bx	lr

08001fca <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001fca:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001fcc:	3004      	adds	r0, #4

08001fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001fce:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001fd0:	d3fb      	bcc.n	8001fca <FillZerobss>
  bx lr
 8001fd2:	4770      	bx	lr

08001fd4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fd4:	480c      	ldr	r0, [pc, #48]	; (8002008 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001fd6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fd8:	f7ff ff9e 	bl	8001f18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001fdc:	480b      	ldr	r0, [pc, #44]	; (800200c <LoopForever+0x8>)
 8001fde:	490c      	ldr	r1, [pc, #48]	; (8002010 <LoopForever+0xc>)
 8001fe0:	4a0c      	ldr	r2, [pc, #48]	; (8002014 <LoopForever+0x10>)
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f7ff ffed 	bl	8001fc2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001fe8:	480b      	ldr	r0, [pc, #44]	; (8002018 <LoopForever+0x14>)
 8001fea:	490c      	ldr	r1, [pc, #48]	; (800201c <LoopForever+0x18>)
 8001fec:	2300      	movs	r3, #0
 8001fee:	f7ff ffee 	bl	8001fce <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001ff2:	480b      	ldr	r0, [pc, #44]	; (8002020 <LoopForever+0x1c>)
 8001ff4:	490b      	ldr	r1, [pc, #44]	; (8002024 <LoopForever+0x20>)
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f7ff ffe9 	bl	8001fce <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ffc:	f006 fc70 	bl	80088e0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002000:	f7ff fc20 	bl	8001844 <main>

08002004 <LoopForever>:

LoopForever:
  b LoopForever
 8002004:	e7fe      	b.n	8002004 <LoopForever>
 8002006:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002008:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800200c:	20000004 	.word	0x20000004
 8002010:	20000084 	.word	0x20000084
 8002014:	080095c4 	.word	0x080095c4
  INIT_BSS _sbss, _ebss
 8002018:	200001f8 	.word	0x200001f8
 800201c:	2000058c 	.word	0x2000058c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002020:	200301e0 	.word	0x200301e0
 8002024:	20030a57 	.word	0x20030a57

08002028 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002028:	e7fe      	b.n	8002028 <ADC1_IRQHandler>
	...

0800202c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002036:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <HAL_Init+0x3c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a0b      	ldr	r2, [pc, #44]	; (8002068 <HAL_Init+0x3c>)
 800203c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002040:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002042:	2003      	movs	r0, #3
 8002044:	f000 f9a8 	bl	8002398 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002048:	2000      	movs	r0, #0
 800204a:	f000 f80f 	bl	800206c <HAL_InitTick>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d002      	beq.n	800205a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	71fb      	strb	r3, [r7, #7]
 8002058:	e001      	b.n	800205e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800205a:	f7ff fe37 	bl	8001ccc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800205e:	79fb      	ldrb	r3, [r7, #7]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	58004000 	.word	0x58004000

0800206c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002078:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <HAL_InitTick+0x6c>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d024      	beq.n	80020ca <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002080:	f001 fd26 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 8002084:	4602      	mov	r2, r0
 8002086:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <HAL_InitTick+0x6c>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	4619      	mov	r1, r3
 800208c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002090:	fbb3 f3f1 	udiv	r3, r3, r1
 8002094:	fbb2 f3f3 	udiv	r3, r2, r3
 8002098:	4618      	mov	r0, r3
 800209a:	f000 f9be 	bl	800241a <HAL_SYSTICK_Config>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10f      	bne.n	80020c4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b0f      	cmp	r3, #15
 80020a8:	d809      	bhi.n	80020be <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020aa:	2200      	movs	r2, #0
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	f04f 30ff 	mov.w	r0, #4294967295
 80020b2:	f000 f97c 	bl	80023ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020b6:	4a09      	ldr	r2, [pc, #36]	; (80020dc <HAL_InitTick+0x70>)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6013      	str	r3, [r2, #0]
 80020bc:	e007      	b.n	80020ce <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	73fb      	strb	r3, [r7, #15]
 80020c2:	e004      	b.n	80020ce <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	73fb      	strb	r3, [r7, #15]
 80020c8:	e001      	b.n	80020ce <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	2000000c 	.word	0x2000000c
 80020dc:	20000008 	.word	0x20000008

080020e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020e4:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_IncTick+0x20>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b06      	ldr	r3, [pc, #24]	; (8002104 <HAL_IncTick+0x24>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4413      	add	r3, r2
 80020f0:	4a04      	ldr	r2, [pc, #16]	; (8002104 <HAL_IncTick+0x24>)
 80020f2:	6013      	str	r3, [r2, #0]
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	2000000c 	.word	0x2000000c
 8002104:	20000314 	.word	0x20000314

08002108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return uwTick;
 800210c:	4b03      	ldr	r3, [pc, #12]	; (800211c <HAL_GetTick+0x14>)
 800210e:	681b      	ldr	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	20000314 	.word	0x20000314

08002120 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002124:	4b03      	ldr	r3, [pc, #12]	; (8002134 <HAL_GetTickPrio+0x14>)
 8002126:	681b      	ldr	r3, [r3, #0]
}
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	20000008 	.word	0x20000008

08002138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <__NVIC_SetPriorityGrouping+0x44>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002154:	4013      	ands	r3, r2
 8002156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002160:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800216a:	4a04      	ldr	r2, [pc, #16]	; (800217c <__NVIC_SetPriorityGrouping+0x44>)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	60d3      	str	r3, [r2, #12]
}
 8002170:	bf00      	nop
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002184:	4b04      	ldr	r3, [pc, #16]	; (8002198 <__NVIC_GetPriorityGrouping+0x18>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	0a1b      	lsrs	r3, r3, #8
 800218a:	f003 0307 	and.w	r3, r3, #7
}
 800218e:	4618      	mov	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	db0b      	blt.n	80021c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	f003 021f 	and.w	r2, r3, #31
 80021b4:	4907      	ldr	r1, [pc, #28]	; (80021d4 <__NVIC_EnableIRQ+0x38>)
 80021b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ba:	095b      	lsrs	r3, r3, #5
 80021bc:	2001      	movs	r0, #1
 80021be:	fa00 f202 	lsl.w	r2, r0, r2
 80021c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	e000e100 	.word	0xe000e100

080021d8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	db12      	blt.n	8002210 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	f003 021f 	and.w	r2, r3, #31
 80021f0:	490a      	ldr	r1, [pc, #40]	; (800221c <__NVIC_DisableIRQ+0x44>)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	095b      	lsrs	r3, r3, #5
 80021f8:	2001      	movs	r0, #1
 80021fa:	fa00 f202 	lsl.w	r2, r0, r2
 80021fe:	3320      	adds	r3, #32
 8002200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002204:	f3bf 8f4f 	dsb	sy
}
 8002208:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800220a:	f3bf 8f6f 	isb	sy
}
 800220e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	e000e100 	.word	0xe000e100

08002220 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	2b00      	cmp	r3, #0
 8002230:	db0c      	blt.n	800224c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	f003 021f 	and.w	r2, r3, #31
 8002238:	4907      	ldr	r1, [pc, #28]	; (8002258 <__NVIC_SetPendingIRQ+0x38>)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	095b      	lsrs	r3, r3, #5
 8002240:	2001      	movs	r0, #1
 8002242:	fa00 f202 	lsl.w	r2, r0, r2
 8002246:	3340      	adds	r3, #64	; 0x40
 8002248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000e100 	.word	0xe000e100

0800225c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	2b00      	cmp	r3, #0
 800226c:	db0c      	blt.n	8002288 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	f003 021f 	and.w	r2, r3, #31
 8002274:	4907      	ldr	r1, [pc, #28]	; (8002294 <__NVIC_ClearPendingIRQ+0x38>)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	2001      	movs	r0, #1
 800227e:	fa00 f202 	lsl.w	r2, r0, r2
 8002282:	3360      	adds	r3, #96	; 0x60
 8002284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	e000e100 	.word	0xe000e100

08002298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	6039      	str	r1, [r7, #0]
 80022a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	db0a      	blt.n	80022c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	490c      	ldr	r1, [pc, #48]	; (80022e4 <__NVIC_SetPriority+0x4c>)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	0112      	lsls	r2, r2, #4
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	440b      	add	r3, r1
 80022bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c0:	e00a      	b.n	80022d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4908      	ldr	r1, [pc, #32]	; (80022e8 <__NVIC_SetPriority+0x50>)
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	3b04      	subs	r3, #4
 80022d0:	0112      	lsls	r2, r2, #4
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	440b      	add	r3, r1
 80022d6:	761a      	strb	r2, [r3, #24]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000e100 	.word	0xe000e100
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	; 0x24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f1c3 0307 	rsb	r3, r3, #7
 8002306:	2b04      	cmp	r3, #4
 8002308:	bf28      	it	cs
 800230a:	2304      	movcs	r3, #4
 800230c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3304      	adds	r3, #4
 8002312:	2b06      	cmp	r3, #6
 8002314:	d902      	bls.n	800231c <NVIC_EncodePriority+0x30>
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3b03      	subs	r3, #3
 800231a:	e000      	b.n	800231e <NVIC_EncodePriority+0x32>
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	f04f 32ff 	mov.w	r2, #4294967295
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43da      	mvns	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	401a      	ands	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002334:	f04f 31ff 	mov.w	r1, #4294967295
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	43d9      	mvns	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	4313      	orrs	r3, r2
         );
}
 8002346:	4618      	mov	r0, r3
 8002348:	3724      	adds	r7, #36	; 0x24
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3b01      	subs	r3, #1
 8002360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002364:	d301      	bcc.n	800236a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002366:	2301      	movs	r3, #1
 8002368:	e00f      	b.n	800238a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236a:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <SysTick_Config+0x40>)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002372:	210f      	movs	r1, #15
 8002374:	f04f 30ff 	mov.w	r0, #4294967295
 8002378:	f7ff ff8e 	bl	8002298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <SysTick_Config+0x40>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002382:	4b04      	ldr	r3, [pc, #16]	; (8002394 <SysTick_Config+0x40>)
 8002384:	2207      	movs	r2, #7
 8002386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	e000e010 	.word	0xe000e010

08002398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff fec9 	bl	8002138 <__NVIC_SetPriorityGrouping>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023bc:	f7ff fee0 	bl	8002180 <__NVIC_GetPriorityGrouping>
 80023c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68b9      	ldr	r1, [r7, #8]
 80023c6:	6978      	ldr	r0, [r7, #20]
 80023c8:	f7ff ff90 	bl	80022ec <NVIC_EncodePriority>
 80023cc:	4602      	mov	r2, r0
 80023ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff5f 	bl	8002298 <__NVIC_SetPriority>
}
 80023da:	bf00      	nop
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	4603      	mov	r3, r0
 80023ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff fed3 	bl	800219c <__NVIC_EnableIRQ>
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fee3 	bl	80021d8 <__NVIC_DisableIRQ>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff ff96 	bl	8002354 <SysTick_Config>
 8002428:	4603      	mov	r3, r0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	4603      	mov	r3, r0
 800243a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800243c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff feed 	bl	8002220 <__NVIC_SetPendingIRQ>
}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	4603      	mov	r3, r0
 8002456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff fefd 	bl	800225c <__NVIC_ClearPendingIRQ>
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800246c:	b480      	push	{r7}
 800246e:	b087      	sub	sp, #28
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800247a:	e14c      	b.n	8002716 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	2101      	movs	r1, #1
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	fa01 f303 	lsl.w	r3, r1, r3
 8002488:	4013      	ands	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 813e 	beq.w	8002710 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	2b01      	cmp	r3, #1
 800249e:	d005      	beq.n	80024ac <HAL_GPIO_Init+0x40>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d130      	bne.n	800250e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	2203      	movs	r2, #3
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4013      	ands	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024e2:	2201      	movs	r2, #1
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43db      	mvns	r3, r3
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	091b      	lsrs	r3, r3, #4
 80024f8:	f003 0201 	and.w	r2, r3, #1
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	2b03      	cmp	r3, #3
 8002518:	d017      	beq.n	800254a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	2203      	movs	r2, #3
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4013      	ands	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d123      	bne.n	800259e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	08da      	lsrs	r2, r3, #3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3208      	adds	r2, #8
 800255e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002562:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	220f      	movs	r2, #15
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43db      	mvns	r3, r3
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	4013      	ands	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	691a      	ldr	r2, [r3, #16]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	08da      	lsrs	r2, r3, #3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3208      	adds	r2, #8
 8002598:	6939      	ldr	r1, [r7, #16]
 800259a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	2203      	movs	r2, #3
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43db      	mvns	r3, r3
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	4013      	ands	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f003 0203 	and.w	r2, r3, #3
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 8098 	beq.w	8002710 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80025e0:	4a54      	ldr	r2, [pc, #336]	; (8002734 <HAL_GPIO_Init+0x2c8>)
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	089b      	lsrs	r3, r3, #2
 80025e6:	3302      	adds	r3, #2
 80025e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	220f      	movs	r2, #15
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4013      	ands	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800260a:	d019      	beq.n	8002640 <HAL_GPIO_Init+0x1d4>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a4a      	ldr	r2, [pc, #296]	; (8002738 <HAL_GPIO_Init+0x2cc>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d013      	beq.n	800263c <HAL_GPIO_Init+0x1d0>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a49      	ldr	r2, [pc, #292]	; (800273c <HAL_GPIO_Init+0x2d0>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d00d      	beq.n	8002638 <HAL_GPIO_Init+0x1cc>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a48      	ldr	r2, [pc, #288]	; (8002740 <HAL_GPIO_Init+0x2d4>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d007      	beq.n	8002634 <HAL_GPIO_Init+0x1c8>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a47      	ldr	r2, [pc, #284]	; (8002744 <HAL_GPIO_Init+0x2d8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d101      	bne.n	8002630 <HAL_GPIO_Init+0x1c4>
 800262c:	2304      	movs	r3, #4
 800262e:	e008      	b.n	8002642 <HAL_GPIO_Init+0x1d6>
 8002630:	2307      	movs	r3, #7
 8002632:	e006      	b.n	8002642 <HAL_GPIO_Init+0x1d6>
 8002634:	2303      	movs	r3, #3
 8002636:	e004      	b.n	8002642 <HAL_GPIO_Init+0x1d6>
 8002638:	2302      	movs	r3, #2
 800263a:	e002      	b.n	8002642 <HAL_GPIO_Init+0x1d6>
 800263c:	2301      	movs	r3, #1
 800263e:	e000      	b.n	8002642 <HAL_GPIO_Init+0x1d6>
 8002640:	2300      	movs	r3, #0
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	f002 0203 	and.w	r2, r2, #3
 8002648:	0092      	lsls	r2, r2, #2
 800264a:	4093      	lsls	r3, r2
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002652:	4938      	ldr	r1, [pc, #224]	; (8002734 <HAL_GPIO_Init+0x2c8>)
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	089b      	lsrs	r3, r3, #2
 8002658:	3302      	adds	r3, #2
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002660:	4b39      	ldr	r3, [pc, #228]	; (8002748 <HAL_GPIO_Init+0x2dc>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	43db      	mvns	r3, r3
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4013      	ands	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4313      	orrs	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002684:	4a30      	ldr	r2, [pc, #192]	; (8002748 <HAL_GPIO_Init+0x2dc>)
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800268a:	4b2f      	ldr	r3, [pc, #188]	; (8002748 <HAL_GPIO_Init+0x2dc>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	43db      	mvns	r3, r3
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4013      	ands	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026ae:	4a26      	ldr	r2, [pc, #152]	; (8002748 <HAL_GPIO_Init+0x2dc>)
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80026b4:	4b24      	ldr	r3, [pc, #144]	; (8002748 <HAL_GPIO_Init+0x2dc>)
 80026b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	43db      	mvns	r3, r3
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4013      	ands	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026da:	4a1b      	ldr	r2, [pc, #108]	; (8002748 <HAL_GPIO_Init+0x2dc>)
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80026e2:	4b19      	ldr	r3, [pc, #100]	; (8002748 <HAL_GPIO_Init+0x2dc>)
 80026e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	43db      	mvns	r3, r3
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	4013      	ands	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	4313      	orrs	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002708:	4a0f      	ldr	r2, [pc, #60]	; (8002748 <HAL_GPIO_Init+0x2dc>)
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	3301      	adds	r3, #1
 8002714:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	fa22 f303 	lsr.w	r3, r2, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	f47f aeab 	bne.w	800247c <HAL_GPIO_Init+0x10>
  }
}
 8002726:	bf00      	nop
 8002728:	bf00      	nop
 800272a:	371c      	adds	r7, #28
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	40010000 	.word	0x40010000
 8002738:	48000400 	.word	0x48000400
 800273c:	48000800 	.word	0x48000800
 8002740:	48000c00 	.word	0x48000c00
 8002744:	48001000 	.word	0x48001000
 8002748:	58000800 	.word	0x58000800

0800274c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	887b      	ldrh	r3, [r7, #2]
 800275e:	4013      	ands	r3, r2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002764:	2301      	movs	r3, #1
 8002766:	73fb      	strb	r3, [r7, #15]
 8002768:	e001      	b.n	800276e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800276a:	2300      	movs	r3, #0
 800276c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800276e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	807b      	strh	r3, [r7, #2]
 8002788:	4613      	mov	r3, r2
 800278a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800278c:	787b      	ldrb	r3, [r7, #1]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002792:	887a      	ldrh	r2, [r7, #2]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002798:	e002      	b.n	80027a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800279a:	887a      	ldrh	r2, [r7, #2]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027be:	887a      	ldrh	r2, [r7, #2]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4013      	ands	r3, r2
 80027c4:	041a      	lsls	r2, r3, #16
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	43d9      	mvns	r1, r3
 80027ca:	887b      	ldrh	r3, [r7, #2]
 80027cc:	400b      	ands	r3, r1
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	619a      	str	r2, [r3, #24]
}
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80027e6:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <HAL_HSEM_IRQHandler+0x30>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80027ec:	4b08      	ldr	r3, [pc, #32]	; (8002810 <HAL_HSEM_IRQHandler+0x30>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	43db      	mvns	r3, r3
 80027f4:	4906      	ldr	r1, [pc, #24]	; (8002810 <HAL_HSEM_IRQHandler+0x30>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80027fa:	4a05      	ldr	r2, [pc, #20]	; (8002810 <HAL_HSEM_IRQHandler+0x30>)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f807 	bl	8002814 <HAL_HSEM_FreeCallback>
}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	58001500 	.word	0x58001500

08002814 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d01e      	beq.n	8002878 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800283a:	4b13      	ldr	r3, [pc, #76]	; (8002888 <HAL_IPCC_Init+0x60>)
 800283c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d102      	bne.n	8002850 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff fa4e 	bl	8001cec <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002850:	68b8      	ldr	r0, [r7, #8]
 8002852:	f000 f85b 	bl	800290c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f82c 	bl	80028c0 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002876:	e001      	b.n	800287c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800287c:	7bfb      	ldrb	r3, [r7, #15]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	58000c00 	.word	0x58000c00

0800288c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	4613      	mov	r3, r2
 8002898:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800289a:	bf00      	nop
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b085      	sub	sp, #20
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	4613      	mov	r3, r2
 80028b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80028b4:	bf00      	nop
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	e00f      	b.n	80028ee <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	4a0b      	ldr	r2, [pc, #44]	; (8002904 <IPCC_SetDefaultCallbacks+0x44>)
 80028d8:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	3306      	adds	r3, #6
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	4a08      	ldr	r2, [pc, #32]	; (8002908 <IPCC_SetDefaultCallbacks+0x48>)
 80028e6:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	3301      	adds	r3, #1
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b05      	cmp	r3, #5
 80028f2:	d9ec      	bls.n	80028ce <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	0800288d 	.word	0x0800288d
 8002908:	080028a7 	.word	0x080028a7

0800290c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8002920:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	223f      	movs	r2, #63	; 0x3f
 8002926:	609a      	str	r2, [r3, #8]
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a04      	ldr	r2, [pc, #16]	; (8002950 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800293e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002942:	6013      	str	r3, [r2, #0]
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	58000400 	.word	0x58000400

08002954 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002958:	4b04      	ldr	r3, [pc, #16]	; (800296c <HAL_PWREx_GetVoltageRange+0x18>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002960:	4618      	mov	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	58000400 	.word	0x58000400

08002970 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800297e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002982:	d101      	bne.n	8002988 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <LL_RCC_HSE_Enable>:
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a6:	6013      	str	r3, [r2, #0]
}
 80029a8:	bf00      	nop
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <LL_RCC_HSE_Disable>:
{
 80029b2:	b480      	push	{r7}
 80029b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80029b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c4:	6013      	str	r3, [r2, #0]
}
 80029c6:	bf00      	nop
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <LL_RCC_HSE_IsReady>:
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80029d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029e2:	d101      	bne.n	80029e8 <LL_RCC_HSE_IsReady+0x18>
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <LL_RCC_HSE_IsReady+0x1a>
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <LL_RCC_HSI_Enable>:
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80029f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a06:	6013      	str	r3, [r2, #0]
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <LL_RCC_HSI_Disable>:
{
 8002a12:	b480      	push	{r7}
 8002a14:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a24:	6013      	str	r3, [r2, #0]
}
 8002a26:	bf00      	nop
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <LL_RCC_HSI_IsReady>:
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a42:	d101      	bne.n	8002a48 <LL_RCC_HSI_IsReady+0x18>
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <LL_RCC_HSI_IsReady+0x1a>
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	061b      	lsls	r3, r3, #24
 8002a6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	604b      	str	r3, [r1, #4]
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <LL_RCC_HSI48_Enable>:
{
 8002a7e:	b480      	push	{r7}
 8002a80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002a96:	bf00      	nop
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <LL_RCC_HSI48_Disable>:
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002aac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ab0:	f023 0301 	bic.w	r3, r3, #1
 8002ab4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <LL_RCC_HSI48_IsReady>:
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d101      	bne.n	8002ada <LL_RCC_HSI48_IsReady+0x18>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <LL_RCC_HSI48_IsReady+0x1a>
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <LL_RCC_LSE_Enable>:
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002afe:	bf00      	nop
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <LL_RCC_LSE_Disable>:
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b18:	f023 0301 	bic.w	r3, r3, #1
 8002b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <LL_RCC_LSE_EnableBypass>:
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b3a:	f043 0304 	orr.w	r3, r3, #4
 8002b3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b42:	bf00      	nop
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <LL_RCC_LSE_DisableBypass>:
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b5c:	f023 0304 	bic.w	r3, r3, #4
 8002b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <LL_RCC_LSE_IsReady>:
{
 8002b6e:	b480      	push	{r7}
 8002b70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d101      	bne.n	8002b86 <LL_RCC_LSE_IsReady+0x18>
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <LL_RCC_LSE_IsReady+0x1a>
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <LL_RCC_LSI1_Enable>:
{
 8002b92:	b480      	push	{r7}
 8002b94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002baa:	bf00      	nop
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <LL_RCC_LSI1_Disable>:
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bc4:	f023 0301 	bic.w	r3, r3, #1
 8002bc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002bcc:	bf00      	nop
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <LL_RCC_LSI1_IsReady>:
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d101      	bne.n	8002bee <LL_RCC_LSI1_IsReady+0x18>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <LL_RCC_LSI1_IsReady+0x1a>
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <LL_RCC_LSI2_Enable>:
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c0a:	f043 0304 	orr.w	r3, r3, #4
 8002c0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c12:	bf00      	nop
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <LL_RCC_LSI2_Disable>:
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c2c:	f023 0304 	bic.w	r3, r3, #4
 8002c30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <LL_RCC_LSI2_IsReady>:
{
 8002c3e:	b480      	push	{r7}
 8002c40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d101      	bne.n	8002c56 <LL_RCC_LSI2_IsReady+0x18>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <LL_RCC_LSI2_IsReady+0x1a>
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <LL_RCC_LSI2_SetTrimming>:
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c72:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	021b      	lsls	r3, r3, #8
 8002c7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <LL_RCC_MSI_Enable>:
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	6013      	str	r3, [r2, #0]
}
 8002ca4:	bf00      	nop
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <LL_RCC_MSI_Disable>:
{
 8002cae:	b480      	push	{r7}
 8002cb0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cbc:	f023 0301 	bic.w	r3, r3, #1
 8002cc0:	6013      	str	r3, [r2, #0]
}
 8002cc2:	bf00      	nop
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <LL_RCC_MSI_IsReady>:
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d101      	bne.n	8002ce2 <LL_RCC_MSI_IsReady+0x16>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <LL_RCC_MSI_IsReady+0x18>
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <LL_RCC_MSI_SetRange>:
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <LL_RCC_MSI_GetRange>:
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d26:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2bb0      	cmp	r3, #176	; 0xb0
 8002d2c:	d901      	bls.n	8002d32 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002d2e:	23b0      	movs	r3, #176	; 0xb0
 8002d30:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002d32:	687b      	ldr	r3, [r7, #4]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	021b      	lsls	r3, r3, #8
 8002d56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	604b      	str	r3, [r1, #4]
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <LL_RCC_SetSysClkSource>:
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f023 0203 	bic.w	r2, r3, #3
 8002d7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	608b      	str	r3, [r1, #8]
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <LL_RCC_GetSysClkSource>:
{
 8002d92:	b480      	push	{r7}
 8002d94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 030c 	and.w	r3, r3, #12
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <LL_RCC_SetAHBPrescaler>:
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	608b      	str	r3, [r1, #8]
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <LL_C2_RCC_SetAHBPrescaler>:
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dde:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002de2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <LL_RCC_SetAHB4Prescaler>:
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e0e:	f023 020f 	bic.w	r2, r3, #15
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	091b      	lsrs	r3, r3, #4
 8002e16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <LL_RCC_SetAPB1Prescaler>:
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	608b      	str	r3, [r1, #8]
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <LL_RCC_SetAPB2Prescaler>:
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	608b      	str	r3, [r1, #8]
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <LL_RCC_GetAHBPrescaler>:
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <LL_RCC_GetAHB4Prescaler>:
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e9c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <LL_RCC_GetAPB1Prescaler>:
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <LL_RCC_GetAPB2Prescaler>:
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <LL_RCC_PLL_Enable>:
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ef2:	6013      	str	r3, [r2, #0]
}
 8002ef4:	bf00      	nop
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <LL_RCC_PLL_Disable>:
{
 8002efe:	b480      	push	{r7}
 8002f00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f10:	6013      	str	r3, [r2, #0]
}
 8002f12:	bf00      	nop
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <LL_RCC_PLL_IsReady>:
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f2e:	d101      	bne.n	8002f34 <LL_RCC_PLL_IsReady+0x18>
 8002f30:	2301      	movs	r3, #1
 8002f32:	e000      	b.n	8002f36 <LL_RCC_PLL_IsReady+0x1a>
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <LL_RCC_PLL_GetN>:
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	0a1b      	lsrs	r3, r3, #8
 8002f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <LL_RCC_PLL_GetR>:
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <LL_RCC_PLL_GetDivider>:
{
 8002f72:	b480      	push	{r7}
 8002f74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <LL_RCC_PLL_GetMainSource>:
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f003 0303 	and.w	r3, r3, #3
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <LL_RCC_IsActiveFlag_HPRE>:
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb4:	d101      	bne.n	8002fba <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fda:	d101      	bne.n	8002fe0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e000      	b.n	8002fe2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003000:	d101      	bne.n	8003006 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8003012:	b480      	push	{r7}
 8003014:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003020:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003024:	d101      	bne.n	800302a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8003036:	b480      	push	{r7}
 8003038:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800303a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003044:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003048:	d101      	bne.n	800304e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
	...

0800305c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800305c:	b590      	push	{r4, r7, lr}
 800305e:	b08d      	sub	sp, #52	; 0x34
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e37f      	b.n	800376e <HAL_RCC_OscConfig+0x712>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0320 	and.w	r3, r3, #32
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 8092 	beq.w	80031a0 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800307c:	f7ff fe89 	bl	8002d92 <LL_RCC_GetSysClkSource>
 8003080:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003082:	f7ff ff82 	bl	8002f8a <LL_RCC_PLL_GetMainSource>
 8003086:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308a:	2b00      	cmp	r3, #0
 800308c:	d005      	beq.n	800309a <HAL_RCC_OscConfig+0x3e>
 800308e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003090:	2b0c      	cmp	r3, #12
 8003092:	d14c      	bne.n	800312e <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003096:	2b01      	cmp	r3, #1
 8003098:	d149      	bne.n	800312e <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800309a:	f7ff fe17 	bl	8002ccc <LL_RCC_MSI_IsReady>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d005      	beq.n	80030b0 <HAL_RCC_OscConfig+0x54>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e35e      	b.n	800376e <HAL_RCC_OscConfig+0x712>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80030b4:	f7ff fe2f 	bl	8002d16 <LL_RCC_MSI_GetRange>
 80030b8:	4603      	mov	r3, r0
 80030ba:	429c      	cmp	r4, r3
 80030bc:	d914      	bls.n	80030e8 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fd44 	bl	8003b50 <RCC_SetFlashLatencyFromMSIRange>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e34d      	b.n	800376e <HAL_RCC_OscConfig+0x712>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fe09 	bl	8002cee <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff fe2d 	bl	8002d40 <LL_RCC_MSI_SetCalibTrimming>
 80030e6:	e013      	b.n	8003110 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff fdfe 	bl	8002cee <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff fe22 	bl	8002d40 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	4618      	mov	r0, r3
 8003102:	f000 fd25 	bl	8003b50 <RCC_SetFlashLatencyFromMSIRange>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e32e      	b.n	800376e <HAL_RCC_OscConfig+0x712>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003110:	f000 fcde 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 8003114:	4603      	mov	r3, r0
 8003116:	4aa5      	ldr	r2, [pc, #660]	; (80033ac <HAL_RCC_OscConfig+0x350>)
 8003118:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800311a:	4ba5      	ldr	r3, [pc, #660]	; (80033b0 <HAL_RCC_OscConfig+0x354>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7fe ffa4 	bl	800206c <HAL_InitTick>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d039      	beq.n	800319e <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e31f      	b.n	800376e <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d01e      	beq.n	8003174 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003136:	f7ff fdab 	bl	8002c90 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800313a:	f7fe ffe5 	bl	8002108 <HAL_GetTick>
 800313e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003142:	f7fe ffe1 	bl	8002108 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e30c      	b.n	800376e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003154:	f7ff fdba 	bl	8002ccc <LL_RCC_MSI_IsReady>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f1      	beq.n	8003142 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff fdc3 	bl	8002cee <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff fde7 	bl	8002d40 <LL_RCC_MSI_SetCalibTrimming>
 8003172:	e015      	b.n	80031a0 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003174:	f7ff fd9b 	bl	8002cae <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003178:	f7fe ffc6 	bl	8002108 <HAL_GetTick>
 800317c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003180:	f7fe ffc2 	bl	8002108 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e2ed      	b.n	800376e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003192:	f7ff fd9b 	bl	8002ccc <LL_RCC_MSI_IsReady>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1f1      	bne.n	8003180 <HAL_RCC_OscConfig+0x124>
 800319c:	e000      	b.n	80031a0 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800319e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d04e      	beq.n	800324a <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031ac:	f7ff fdf1 	bl	8002d92 <LL_RCC_GetSysClkSource>
 80031b0:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031b2:	f7ff feea 	bl	8002f8a <LL_RCC_PLL_GetMainSource>
 80031b6:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d005      	beq.n	80031ca <HAL_RCC_OscConfig+0x16e>
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	2b0c      	cmp	r3, #12
 80031c2:	d10d      	bne.n	80031e0 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	d10a      	bne.n	80031e0 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ca:	f7ff fc01 	bl	80029d0 <LL_RCC_HSE_IsReady>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d039      	beq.n	8003248 <HAL_RCC_OscConfig+0x1ec>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d135      	bne.n	8003248 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e2c6      	b.n	800376e <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e8:	d102      	bne.n	80031f0 <HAL_RCC_OscConfig+0x194>
 80031ea:	f7ff fbd3 	bl	8002994 <LL_RCC_HSE_Enable>
 80031ee:	e001      	b.n	80031f4 <HAL_RCC_OscConfig+0x198>
 80031f0:	f7ff fbdf 	bl	80029b2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d012      	beq.n	8003222 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fc:	f7fe ff84 	bl	8002108 <HAL_GetTick>
 8003200:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003204:	f7fe ff80 	bl	8002108 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b64      	cmp	r3, #100	; 0x64
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e2ab      	b.n	800376e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003216:	f7ff fbdb 	bl	80029d0 <LL_RCC_HSE_IsReady>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0f1      	beq.n	8003204 <HAL_RCC_OscConfig+0x1a8>
 8003220:	e013      	b.n	800324a <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003222:	f7fe ff71 	bl	8002108 <HAL_GetTick>
 8003226:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800322a:	f7fe ff6d 	bl	8002108 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b64      	cmp	r3, #100	; 0x64
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e298      	b.n	800376e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() != 0U)
 800323c:	f7ff fbc8 	bl	80029d0 <LL_RCC_HSE_IsReady>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f1      	bne.n	800322a <HAL_RCC_OscConfig+0x1ce>
 8003246:	e000      	b.n	800324a <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003248:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d051      	beq.n	80032fa <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003256:	f7ff fd9c 	bl	8002d92 <LL_RCC_GetSysClkSource>
 800325a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800325c:	f7ff fe95 	bl	8002f8a <LL_RCC_PLL_GetMainSource>
 8003260:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	2b04      	cmp	r3, #4
 8003266:	d005      	beq.n	8003274 <HAL_RCC_OscConfig+0x218>
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	2b0c      	cmp	r3, #12
 800326c:	d113      	bne.n	8003296 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d110      	bne.n	8003296 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003274:	f7ff fbdc 	bl	8002a30 <LL_RCC_HSI_IsReady>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_RCC_OscConfig+0x22e>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e271      	b.n	800376e <HAL_RCC_OscConfig+0x712>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fbe0 	bl	8002a54 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003294:	e031      	b.n	80032fa <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d019      	beq.n	80032d2 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800329e:	f7ff fba9 	bl	80029f4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a2:	f7fe ff31 	bl	8002108 <HAL_GetTick>
 80032a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032aa:	f7fe ff2d 	bl	8002108 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e258      	b.n	800376e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() == 0U)
 80032bc:	f7ff fbb8 	bl	8002a30 <LL_RCC_HSI_IsReady>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0f1      	beq.n	80032aa <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff fbc2 	bl	8002a54 <LL_RCC_HSI_SetCalibTrimming>
 80032d0:	e013      	b.n	80032fa <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032d2:	f7ff fb9e 	bl	8002a12 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d6:	f7fe ff17 	bl	8002108 <HAL_GetTick>
 80032da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032de:	f7fe ff13 	bl	8002108 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e23e      	b.n	800376e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() != 0U)
 80032f0:	f7ff fb9e 	bl	8002a30 <LL_RCC_HSI_IsReady>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f1      	bne.n	80032de <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d106      	bne.n	8003314 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 80a4 	beq.w	800345c <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d077      	beq.n	800340c <HAL_RCC_OscConfig+0x3b0>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0310 	and.w	r3, r3, #16
 8003324:	2b00      	cmp	r3, #0
 8003326:	d04b      	beq.n	80033c0 <HAL_RCC_OscConfig+0x364>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003328:	f7ff fc55 	bl	8002bd6 <LL_RCC_LSI1_IsReady>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d113      	bne.n	800335a <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003332:	f7ff fc2e 	bl	8002b92 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003336:	f7fe fee7 	bl	8002108 <HAL_GetTick>
 800333a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800333e:	f7fe fee3 	bl	8002108 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e20e      	b.n	800376e <HAL_RCC_OscConfig+0x712>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003350:	f7ff fc41 	bl	8002bd6 <LL_RCC_LSI1_IsReady>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0f1      	beq.n	800333e <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800335a:	f7ff fc4e 	bl	8002bfa <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335e:	f7fe fed3 	bl	8002108 <HAL_GetTick>
 8003362:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003366:	f7fe fecf 	bl	8002108 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b03      	cmp	r3, #3
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e1fa      	b.n	800376e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003378:	f7ff fc61 	bl	8002c3e <LL_RCC_LSI2_IsReady>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0f1      	beq.n	8003366 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff fc6b 	bl	8002c62 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800338c:	f7ff fc12 	bl	8002bb4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003390:	f7fe feba 	bl	8002108 <HAL_GetTick>
 8003394:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003396:	e00d      	b.n	80033b4 <HAL_RCC_OscConfig+0x358>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003398:	f7fe feb6 	bl	8002108 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d906      	bls.n	80033b4 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e1e1      	b.n	800376e <HAL_RCC_OscConfig+0x712>
 80033aa:	bf00      	nop
 80033ac:	20000004 	.word	0x20000004
 80033b0:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() != 0U)
 80033b4:	f7ff fc0f 	bl	8002bd6 <LL_RCC_LSI1_IsReady>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1ec      	bne.n	8003398 <HAL_RCC_OscConfig+0x33c>
 80033be:	e04d      	b.n	800345c <HAL_RCC_OscConfig+0x400>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80033c0:	f7ff fbe7 	bl	8002b92 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fe fea0 	bl	8002108 <HAL_GetTick>
 80033c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x382>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80033cc:	f7fe fe9c 	bl	8002108 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e1c7      	b.n	800376e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80033de:	f7ff fbfa 	bl	8002bd6 <LL_RCC_LSI1_IsReady>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0f1      	beq.n	80033cc <HAL_RCC_OscConfig+0x370>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80033e8:	f7ff fc18 	bl	8002c1c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x3a4>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80033ee:	f7fe fe8b 	bl	8002108 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e1b6      	b.n	800376e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003400:	f7ff fc1d 	bl	8002c3e <LL_RCC_LSI2_IsReady>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f1      	bne.n	80033ee <HAL_RCC_OscConfig+0x392>
 800340a:	e027      	b.n	800345c <HAL_RCC_OscConfig+0x400>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800340c:	f7ff fc06 	bl	8002c1c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003410:	f7fe fe7a 	bl	8002108 <HAL_GetTick>
 8003414:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x3ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003418:	f7fe fe76 	bl	8002108 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b03      	cmp	r3, #3
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e1a1      	b.n	800376e <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800342a:	f7ff fc08 	bl	8002c3e <LL_RCC_LSI2_IsReady>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1f1      	bne.n	8003418 <HAL_RCC_OscConfig+0x3bc>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003434:	f7ff fbbe 	bl	8002bb4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003438:	f7fe fe66 	bl	8002108 <HAL_GetTick>
 800343c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x3f6>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003440:	f7fe fe62 	bl	8002108 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e18d      	b.n	800376e <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003452:	f7ff fbc0 	bl	8002bd6 <LL_RCC_LSI1_IsReady>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1f1      	bne.n	8003440 <HAL_RCC_OscConfig+0x3e4>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d05b      	beq.n	8003520 <HAL_RCC_OscConfig+0x4c4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003468:	4ba7      	ldr	r3, [pc, #668]	; (8003708 <HAL_RCC_OscConfig+0x6ac>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003470:	2b00      	cmp	r3, #0
 8003472:	d114      	bne.n	800349e <HAL_RCC_OscConfig+0x442>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003474:	f7ff fa5e 	bl	8002934 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003478:	f7fe fe46 	bl	8002108 <HAL_GetTick>
 800347c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x436>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003480:	f7fe fe42 	bl	8002108 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e16d      	b.n	800376e <HAL_RCC_OscConfig+0x712>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003492:	4b9d      	ldr	r3, [pc, #628]	; (8003708 <HAL_RCC_OscConfig+0x6ac>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0f0      	beq.n	8003480 <HAL_RCC_OscConfig+0x424>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d102      	bne.n	80034ac <HAL_RCC_OscConfig+0x450>
 80034a6:	f7ff fb1e 	bl	8002ae6 <LL_RCC_LSE_Enable>
 80034aa:	e00c      	b.n	80034c6 <HAL_RCC_OscConfig+0x46a>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b05      	cmp	r3, #5
 80034b2:	d104      	bne.n	80034be <HAL_RCC_OscConfig+0x462>
 80034b4:	f7ff fb39 	bl	8002b2a <LL_RCC_LSE_EnableBypass>
 80034b8:	f7ff fb15 	bl	8002ae6 <LL_RCC_LSE_Enable>
 80034bc:	e003      	b.n	80034c6 <HAL_RCC_OscConfig+0x46a>
 80034be:	f7ff fb23 	bl	8002b08 <LL_RCC_LSE_Disable>
 80034c2:	f7ff fb43 	bl	8002b4c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d014      	beq.n	80034f8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ce:	f7fe fe1b 	bl	8002108 <HAL_GetTick>
 80034d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80034d4:	e00a      	b.n	80034ec <HAL_RCC_OscConfig+0x490>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d6:	f7fe fe17 	bl	8002108 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e140      	b.n	800376e <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() == 0U)
 80034ec:	f7ff fb3f 	bl	8002b6e <LL_RCC_LSE_IsReady>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0ef      	beq.n	80034d6 <HAL_RCC_OscConfig+0x47a>
 80034f6:	e013      	b.n	8003520 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f8:	f7fe fe06 	bl	8002108 <HAL_GetTick>
 80034fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80034fe:	e00a      	b.n	8003516 <HAL_RCC_OscConfig+0x4ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003500:	f7fe fe02 	bl	8002108 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f241 3288 	movw	r2, #5000	; 0x1388
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e12b      	b.n	800376e <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003516:	f7ff fb2a 	bl	8002b6e <LL_RCC_LSE_IsReady>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1ef      	bne.n	8003500 <HAL_RCC_OscConfig+0x4a4>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003528:	2b00      	cmp	r3, #0
 800352a:	d02c      	beq.n	8003586 <HAL_RCC_OscConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003530:	2b00      	cmp	r3, #0
 8003532:	d014      	beq.n	800355e <HAL_RCC_OscConfig+0x502>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003534:	f7ff faa3 	bl	8002a7e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003538:	f7fe fde6 	bl	8002108 <HAL_GetTick>
 800353c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x4f6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003540:	f7fe fde2 	bl	8002108 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e10d      	b.n	800376e <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003552:	f7ff fab6 	bl	8002ac2 <LL_RCC_HSI48_IsReady>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0f1      	beq.n	8003540 <HAL_RCC_OscConfig+0x4e4>
 800355c:	e013      	b.n	8003586 <HAL_RCC_OscConfig+0x52a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800355e:	f7ff fa9f 	bl	8002aa0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003562:	f7fe fdd1 	bl	8002108 <HAL_GetTick>
 8003566:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x520>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800356a:	f7fe fdcd 	bl	8002108 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e0f8      	b.n	800376e <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800357c:	f7ff faa1 	bl	8002ac2 <LL_RCC_HSI48_IsReady>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f1      	bne.n	800356a <HAL_RCC_OscConfig+0x50e>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 80ee 	beq.w	800376c <HAL_RCC_OscConfig+0x710>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003590:	f7ff fbff 	bl	8002d92 <LL_RCC_GetSysClkSource>
 8003594:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	f040 80b4 	bne.w	8003710 <HAL_RCC_OscConfig+0x6b4>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f003 0203 	and.w	r2, r3, #3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d123      	bne.n	80035fe <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d11c      	bne.n	80035fe <HAL_RCC_OscConfig+0x5a2>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	0a1b      	lsrs	r3, r3, #8
 80035c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d114      	bne.n	80035fe <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80035de:	429a      	cmp	r2, r3
 80035e0:	d10d      	bne.n	80035fe <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d106      	bne.n	80035fe <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d05d      	beq.n	80036ba <HAL_RCC_OscConfig+0x65e>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	2b0c      	cmp	r3, #12
 8003602:	d058      	beq.n	80036b6 <HAL_RCC_OscConfig+0x65a>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <HAL_RCC_OscConfig+0x5ba>

          {
            return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e0ab      	b.n	800376e <HAL_RCC_OscConfig+0x712>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003616:	f7ff fc72 	bl	8002efe <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800361a:	f7fe fd75 	bl	8002108 <HAL_GetTick>
 800361e:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x5d8>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003622:	f7fe fd71 	bl	8002108 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x5d8>
              {
                return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e09c      	b.n	800376e <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1ef      	bne.n	8003622 <HAL_RCC_OscConfig+0x5c6>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003646:	68da      	ldr	r2, [r3, #12]
 8003648:	4b30      	ldr	r3, [pc, #192]	; (800370c <HAL_RCC_OscConfig+0x6b0>)
 800364a:	4013      	ands	r3, r2
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003654:	4311      	orrs	r1, r2
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800365a:	0212      	lsls	r2, r2, #8
 800365c:	4311      	orrs	r1, r2
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003662:	4311      	orrs	r1, r2
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003668:	4311      	orrs	r1, r2
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800366e:	430a      	orrs	r2, r1
 8003670:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003674:	4313      	orrs	r3, r2
 8003676:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003678:	f7ff fc32 	bl	8002ee0 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800367c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800368a:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800368c:	f7fe fd3c 	bl	8002108 <HAL_GetTick>
 8003690:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x64a>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003694:	f7fe fd38 	bl	8002108 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x64a>
              {
                return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e063      	b.n	800376e <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0ef      	beq.n	8003694 <HAL_RCC_OscConfig+0x638>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036b4:	e05a      	b.n	800376c <HAL_RCC_OscConfig+0x710>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e059      	b.n	800376e <HAL_RCC_OscConfig+0x712>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d151      	bne.n	800376c <HAL_RCC_OscConfig+0x710>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036c8:	f7ff fc0a 	bl	8002ee0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036dc:	f7fe fd14 	bl	8002108 <HAL_GetTick>
 80036e0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x69a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e4:	f7fe fd10 	bl	8002108 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x69a>
            {
              return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e03b      	b.n	800376e <HAL_RCC_OscConfig+0x712>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0ef      	beq.n	80036e4 <HAL_RCC_OscConfig+0x688>
 8003704:	e032      	b.n	800376c <HAL_RCC_OscConfig+0x710>
 8003706:	bf00      	nop
 8003708:	58000400 	.word	0x58000400
 800370c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	2b0c      	cmp	r3, #12
 8003714:	d028      	beq.n	8003768 <HAL_RCC_OscConfig+0x70c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003716:	f7ff fbf2 	bl	8002efe <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800371a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003724:	f023 0303 	bic.w	r3, r3, #3
 8003728:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800372a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003734:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800373c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373e:	f7fe fce3 	bl	8002108 <HAL_GetTick>
 8003742:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003744:	e008      	b.n	8003758 <HAL_RCC_OscConfig+0x6fc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003746:	f7fe fcdf 	bl	8002108 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x6fc>
          {
            return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e00a      	b.n	800376e <HAL_RCC_OscConfig+0x712>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1ef      	bne.n	8003746 <HAL_RCC_OscConfig+0x6ea>
 8003766:	e001      	b.n	800376c <HAL_RCC_OscConfig+0x710>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e000      	b.n	800376e <HAL_RCC_OscConfig+0x712>
      }
    }
  }
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3734      	adds	r7, #52	; 0x34
 8003772:	46bd      	mov	sp, r7
 8003774:	bd90      	pop	{r4, r7, pc}
 8003776:	bf00      	nop

08003778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e12d      	b.n	80039e8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800378c:	4b98      	ldr	r3, [pc, #608]	; (80039f0 <HAL_RCC_ClockConfig+0x278>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d91b      	bls.n	80037d2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379a:	4b95      	ldr	r3, [pc, #596]	; (80039f0 <HAL_RCC_ClockConfig+0x278>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f023 0207 	bic.w	r2, r3, #7
 80037a2:	4993      	ldr	r1, [pc, #588]	; (80039f0 <HAL_RCC_ClockConfig+0x278>)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037aa:	f7fe fcad 	bl	8002108 <HAL_GetTick>
 80037ae:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b0:	e008      	b.n	80037c4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80037b2:	f7fe fca9 	bl	8002108 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e111      	b.n	80039e8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c4:	4b8a      	ldr	r3, [pc, #552]	; (80039f0 <HAL_RCC_ClockConfig+0x278>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d1ef      	bne.n	80037b2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d016      	beq.n	800380c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff fae1 	bl	8002daa <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037e8:	f7fe fc8e 	bl	8002108 <HAL_GetTick>
 80037ec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037f0:	f7fe fc8a 	bl	8002108 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e0f2      	b.n	80039e8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003802:	f7ff fbce 	bl	8002fa2 <LL_RCC_IsActiveFlag_HPRE>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0f1      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0320 	and.w	r3, r3, #32
 8003814:	2b00      	cmp	r3, #0
 8003816:	d016      	beq.n	8003846 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff fad8 	bl	8002dd2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003822:	f7fe fc71 	bl	8002108 <HAL_GetTick>
 8003826:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003828:	e008      	b.n	800383c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800382a:	f7fe fc6d 	bl	8002108 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d901      	bls.n	800383c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e0d5      	b.n	80039e8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800383c:	f7ff fbc3 	bl	8002fc6 <LL_RCC_IsActiveFlag_C2HPRE>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f1      	beq.n	800382a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d016      	beq.n	8003880 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff fad1 	bl	8002dfe <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800385c:	f7fe fc54 	bl	8002108 <HAL_GetTick>
 8003860:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003862:	e008      	b.n	8003876 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003864:	f7fe fc50 	bl	8002108 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e0b8      	b.n	80039e8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003876:	f7ff fbb9 	bl	8002fec <LL_RCC_IsActiveFlag_SHDHPRE>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0f1      	beq.n	8003864 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d016      	beq.n	80038ba <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff facb 	bl	8002e2c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003896:	f7fe fc37 	bl	8002108 <HAL_GetTick>
 800389a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800389e:	f7fe fc33 	bl	8002108 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e09b      	b.n	80039e8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80038b0:	f7ff fbaf 	bl	8003012 <LL_RCC_IsActiveFlag_PPRE1>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f1      	beq.n	800389e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d017      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff fac1 	bl	8002e54 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80038d2:	f7fe fc19 	bl	8002108 <HAL_GetTick>
 80038d6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80038d8:	e008      	b.n	80038ec <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80038da:	f7fe fc15 	bl	8002108 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e07d      	b.n	80039e8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80038ec:	f7ff fba3 	bl	8003036 <LL_RCC_IsActiveFlag_PPRE2>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0f1      	beq.n	80038da <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d043      	beq.n	800398a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d106      	bne.n	8003918 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800390a:	f7ff f861 	bl	80029d0 <LL_RCC_HSE_IsReady>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d11e      	bne.n	8003952 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e067      	b.n	80039e8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b03      	cmp	r3, #3
 800391e:	d106      	bne.n	800392e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003920:	f7ff fafc 	bl	8002f1c <LL_RCC_PLL_IsReady>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d113      	bne.n	8003952 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e05c      	b.n	80039e8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d106      	bne.n	8003944 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003936:	f7ff f9c9 	bl	8002ccc <LL_RCC_MSI_IsReady>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d108      	bne.n	8003952 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e051      	b.n	80039e8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003944:	f7ff f874 	bl	8002a30 <LL_RCC_HSI_IsReady>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e04a      	b.n	80039e8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff fa07 	bl	8002d6a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800395c:	f7fe fbd4 	bl	8002108 <HAL_GetTick>
 8003960:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003962:	e00a      	b.n	800397a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003964:	f7fe fbd0 	bl	8002108 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003972:	4293      	cmp	r3, r2
 8003974:	d901      	bls.n	800397a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e036      	b.n	80039e8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397a:	f7ff fa0a 	bl	8002d92 <LL_RCC_GetSysClkSource>
 800397e:	4602      	mov	r2, r0
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	429a      	cmp	r2, r3
 8003988:	d1ec      	bne.n	8003964 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800398a:	4b19      	ldr	r3, [pc, #100]	; (80039f0 <HAL_RCC_ClockConfig+0x278>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d21b      	bcs.n	80039d0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003998:	4b15      	ldr	r3, [pc, #84]	; (80039f0 <HAL_RCC_ClockConfig+0x278>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f023 0207 	bic.w	r2, r3, #7
 80039a0:	4913      	ldr	r1, [pc, #76]	; (80039f0 <HAL_RCC_ClockConfig+0x278>)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a8:	f7fe fbae 	bl	8002108 <HAL_GetTick>
 80039ac:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80039b0:	f7fe fbaa 	bl	8002108 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e012      	b.n	80039e8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c2:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <HAL_RCC_ClockConfig+0x278>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d1ef      	bne.n	80039b0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80039d0:	f000 f87e 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 80039d4:	4603      	mov	r3, r0
 80039d6:	4a07      	ldr	r2, [pc, #28]	; (80039f4 <HAL_RCC_ClockConfig+0x27c>)
 80039d8:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80039da:	f7fe fba1 	bl	8002120 <HAL_GetTickPrio>
 80039de:	4603      	mov	r3, r0
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fe fb43 	bl	800206c <HAL_InitTick>
 80039e6:	4603      	mov	r3, r0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	58004000 	.word	0x58004000
 80039f4:	20000004 	.word	0x20000004

080039f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039f8:	b590      	push	{r4, r7, lr}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039fe:	f7ff f9c8 	bl	8002d92 <LL_RCC_GetSysClkSource>
 8003a02:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10a      	bne.n	8003a20 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003a0a:	f7ff f984 	bl	8002d16 <LL_RCC_MSI_GetRange>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	091b      	lsrs	r3, r3, #4
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	4a2b      	ldr	r2, [pc, #172]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	e04b      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d102      	bne.n	8003a2c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a26:	4b28      	ldr	r3, [pc, #160]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	e045      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b08      	cmp	r3, #8
 8003a30:	d10a      	bne.n	8003a48 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a32:	f7fe ff9d 	bl	8002970 <LL_RCC_HSE_IsEnabledDiv2>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d102      	bne.n	8003a42 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003a3c:	4b22      	ldr	r3, [pc, #136]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	e03a      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003a42:	4b22      	ldr	r3, [pc, #136]	; (8003acc <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	e037      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003a48:	f7ff fa9f 	bl	8002f8a <LL_RCC_PLL_GetMainSource>
 8003a4c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d003      	beq.n	8003a5c <HAL_RCC_GetSysClockFreq+0x64>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2b03      	cmp	r3, #3
 8003a58:	d003      	beq.n	8003a62 <HAL_RCC_GetSysClockFreq+0x6a>
 8003a5a:	e00d      	b.n	8003a78 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003a5c:	4b1a      	ldr	r3, [pc, #104]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a5e:	60bb      	str	r3, [r7, #8]
        break;
 8003a60:	e015      	b.n	8003a8e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a62:	f7fe ff85 	bl	8002970 <LL_RCC_HSE_IsEnabledDiv2>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d102      	bne.n	8003a72 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003a6c:	4b16      	ldr	r3, [pc, #88]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a6e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003a70:	e00d      	b.n	8003a8e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003a72:	4b16      	ldr	r3, [pc, #88]	; (8003acc <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a74:	60bb      	str	r3, [r7, #8]
        break;
 8003a76:	e00a      	b.n	8003a8e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003a78:	f7ff f94d 	bl	8002d16 <LL_RCC_MSI_GetRange>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	091b      	lsrs	r3, r3, #4
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	4a0f      	ldr	r2, [pc, #60]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a8a:	60bb      	str	r3, [r7, #8]
        break;
 8003a8c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8003a8e:	f7ff fa57 	bl	8002f40 <LL_RCC_PLL_GetN>
 8003a92:	4602      	mov	r2, r0
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	fb03 f402 	mul.w	r4, r3, r2
 8003a9a:	f7ff fa6a 	bl	8002f72 <LL_RCC_PLL_GetDivider>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	fbb4 f4f3 	udiv	r4, r4, r3
 8003aa8:	f7ff fa57 	bl	8002f5a <LL_RCC_PLL_GetR>
 8003aac:	4603      	mov	r3, r0
 8003aae:	0f5b      	lsrs	r3, r3, #29
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	fbb4 f3f3 	udiv	r3, r4, r3
 8003ab6:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd90      	pop	{r4, r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	08009480 	.word	0x08009480
 8003ac8:	00f42400 	.word	0x00f42400
 8003acc:	01e84800 	.word	0x01e84800

08003ad0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad0:	b598      	push	{r3, r4, r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003ad4:	f7ff ff90 	bl	80039f8 <HAL_RCC_GetSysClockFreq>
 8003ad8:	4604      	mov	r4, r0
 8003ada:	f7ff f9cf 	bl	8002e7c <LL_RCC_GetAHBPrescaler>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	091b      	lsrs	r3, r3, #4
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	4a03      	ldr	r2, [pc, #12]	; (8003af4 <HAL_RCC_GetHCLKFreq+0x24>)
 8003ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aec:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	bd98      	pop	{r3, r4, r7, pc}
 8003af4:	08009420 	.word	0x08009420

08003af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af8:	b598      	push	{r3, r4, r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003afc:	f7ff ffe8 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 8003b00:	4604      	mov	r4, r0
 8003b02:	f7ff f9d5 	bl	8002eb0 <LL_RCC_GetAPB1Prescaler>
 8003b06:	4603      	mov	r3, r0
 8003b08:	0a1b      	lsrs	r3, r3, #8
 8003b0a:	f003 0307 	and.w	r3, r3, #7
 8003b0e:	4a04      	ldr	r2, [pc, #16]	; (8003b20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b14:	f003 031f 	and.w	r3, r3, #31
 8003b18:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	bd98      	pop	{r3, r4, r7, pc}
 8003b20:	08009460 	.word	0x08009460

08003b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b24:	b598      	push	{r3, r4, r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003b28:	f7ff ffd2 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 8003b2c:	4604      	mov	r4, r0
 8003b2e:	f7ff f9cb 	bl	8002ec8 <LL_RCC_GetAPB2Prescaler>
 8003b32:	4603      	mov	r3, r0
 8003b34:	0adb      	lsrs	r3, r3, #11
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	4a04      	ldr	r2, [pc, #16]	; (8003b4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b40:	f003 031f 	and.w	r3, r3, #31
 8003b44:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	bd98      	pop	{r3, r4, r7, pc}
 8003b4c:	08009460 	.word	0x08009460

08003b50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003b50:	b590      	push	{r4, r7, lr}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2bb0      	cmp	r3, #176	; 0xb0
 8003b5c:	d903      	bls.n	8003b66 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003b5e:	4b15      	ldr	r3, [pc, #84]	; (8003bb4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	e007      	b.n	8003b76 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	091b      	lsrs	r3, r3, #4
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	4a11      	ldr	r2, [pc, #68]	; (8003bb4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b74:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003b76:	f7ff f98d 	bl	8002e94 <LL_RCC_GetAHB4Prescaler>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	091b      	lsrs	r3, r3, #4
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	4a0d      	ldr	r2, [pc, #52]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4a0a      	ldr	r2, [pc, #40]	; (8003bbc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003b94:	fba2 2303 	umull	r2, r3, r2, r3
 8003b98:	0c9c      	lsrs	r4, r3, #18
 8003b9a:	f7fe fedb 	bl	8002954 <HAL_PWREx_GetVoltageRange>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	f000 f80c 	bl	8003bc0 <RCC_SetFlashLatency>
 8003ba8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd90      	pop	{r4, r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	08009480 	.word	0x08009480
 8003bb8:	08009420 	.word	0x08009420
 8003bbc:	431bde83 	.word	0x431bde83

08003bc0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003bc0:	b590      	push	{r4, r7, lr}
 8003bc2:	b093      	sub	sp, #76	; 0x4c
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003bca:	4b37      	ldr	r3, [pc, #220]	; (8003ca8 <RCC_SetFlashLatency+0xe8>)
 8003bcc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003bd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003bd6:	4a35      	ldr	r2, [pc, #212]	; (8003cac <RCC_SetFlashLatency+0xec>)
 8003bd8:	f107 031c 	add.w	r3, r7, #28
 8003bdc:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003be2:	4b33      	ldr	r3, [pc, #204]	; (8003cb0 <RCC_SetFlashLatency+0xf0>)
 8003be4:	f107 040c 	add.w	r4, r7, #12
 8003be8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003bee:	2300      	movs	r3, #0
 8003bf0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bf8:	d11a      	bne.n	8003c30 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	643b      	str	r3, [r7, #64]	; 0x40
 8003bfe:	e013      	b.n	8003c28 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	3348      	adds	r3, #72	; 0x48
 8003c06:	443b      	add	r3, r7
 8003c08:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d807      	bhi.n	8003c22 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	3348      	adds	r3, #72	; 0x48
 8003c18:	443b      	add	r3, r7
 8003c1a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003c1e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003c20:	e020      	b.n	8003c64 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c24:	3301      	adds	r3, #1
 8003c26:	643b      	str	r3, [r7, #64]	; 0x40
 8003c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	d9e8      	bls.n	8003c00 <RCC_SetFlashLatency+0x40>
 8003c2e:	e019      	b.n	8003c64 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c30:	2300      	movs	r3, #0
 8003c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c34:	e013      	b.n	8003c5e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	3348      	adds	r3, #72	; 0x48
 8003c3c:	443b      	add	r3, r7
 8003c3e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d807      	bhi.n	8003c58 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	3348      	adds	r3, #72	; 0x48
 8003c4e:	443b      	add	r3, r7
 8003c50:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003c54:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003c56:	e005      	b.n	8003c64 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d9e8      	bls.n	8003c36 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003c64:	4b13      	ldr	r3, [pc, #76]	; (8003cb4 <RCC_SetFlashLatency+0xf4>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f023 0207 	bic.w	r2, r3, #7
 8003c6c:	4911      	ldr	r1, [pc, #68]	; (8003cb4 <RCC_SetFlashLatency+0xf4>)
 8003c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c70:	4313      	orrs	r3, r2
 8003c72:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c74:	f7fe fa48 	bl	8002108 <HAL_GetTick>
 8003c78:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c7a:	e008      	b.n	8003c8e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c7c:	f7fe fa44 	bl	8002108 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e007      	b.n	8003c9e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c8e:	4b09      	ldr	r3, [pc, #36]	; (8003cb4 <RCC_SetFlashLatency+0xf4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d1ef      	bne.n	8003c7c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	374c      	adds	r7, #76	; 0x4c
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd90      	pop	{r4, r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	0800925c 	.word	0x0800925c
 8003cac:	0800926c 	.word	0x0800926c
 8003cb0:	08009278 	.word	0x08009278
 8003cb4:	58004000 	.word	0x58004000

08003cb8 <LL_RCC_LSE_IsEnabled>:
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <LL_RCC_LSE_IsEnabled+0x18>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e000      	b.n	8003cd2 <LL_RCC_LSE_IsEnabled+0x1a>
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <LL_RCC_LSE_IsReady>:
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d101      	bne.n	8003cf4 <LL_RCC_LSE_IsReady+0x18>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <LL_RCC_LSE_IsReady+0x1a>
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <LL_RCC_SetRFWKPClockSource>:
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <LL_RCC_SetSMPSClockSource>:
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	f023 0203 	bic.w	r2, r3, #3
 8003d3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <LL_RCC_SetSMPSPrescaler>:
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <LL_RCC_SetUSARTClockSource>:
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8c:	f023 0203 	bic.w	r2, r3, #3
 8003d90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <LL_RCC_SetLPUARTClockSource>:
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003dbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <LL_RCC_SetI2CClockSource>:
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	091b      	lsrs	r3, r3, #4
 8003de8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003dec:	43db      	mvns	r3, r3
 8003dee:	401a      	ands	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003df8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <LL_RCC_SetLPTIMClockSource>:
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	0c1b      	lsrs	r3, r3, #16
 8003e22:	041b      	lsls	r3, r3, #16
 8003e24:	43db      	mvns	r3, r3
 8003e26:	401a      	ands	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	041b      	lsls	r3, r3, #16
 8003e2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <LL_RCC_SetSAIClockSource>:
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <LL_RCC_SetRNGClockSource>:
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003e82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <LL_RCC_SetCLK48ClockSource>:
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eaa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003eae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <LL_RCC_SetUSBClockSource>:
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b082      	sub	sp, #8
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff ffe3 	bl	8003e9a <LL_RCC_SetCLK48ClockSource>
}
 8003ed4:	bf00      	nop
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <LL_RCC_SetADCClockSource>:
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ef0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <LL_RCC_SetRTCClockSource>:
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <LL_RCC_GetRTCClockSource>:
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f40:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <LL_RCC_ForceBackupDomainReset>:
{
 8003f4e:	b480      	push	{r7}
 8003f50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f66:	bf00      	nop
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f88:	bf00      	nop
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <LL_RCC_PLLSAI1_Enable>:
{
 8003f92:	b480      	push	{r7}
 8003f94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fa0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fa4:	6013      	str	r3, [r2, #0]
}
 8003fa6:	bf00      	nop
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <LL_RCC_PLLSAI1_Disable>:
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fc2:	6013      	str	r3, [r2, #0]
}
 8003fc4:	bf00      	nop
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <LL_RCC_PLLSAI1_IsReady>:
{
 8003fce:	b480      	push	{r7}
 8003fd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fe0:	d101      	bne.n	8003fe6 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b088      	sub	sp, #32
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003ffe:	2300      	movs	r3, #0
 8004000:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400a:	2b00      	cmp	r3, #0
 800400c:	d034      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004016:	d021      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004018:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800401c:	d81b      	bhi.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800401e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004022:	d01d      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004024:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004028:	d815      	bhi.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00b      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800402e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004032:	d110      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800403e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004042:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004044:	e00d      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3304      	adds	r3, #4
 800404a:	4618      	mov	r0, r3
 800404c:	f000 f947 	bl	80042de <RCCEx_PLLSAI1_ConfigNP>
 8004050:	4603      	mov	r3, r0
 8004052:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004054:	e005      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	77fb      	strb	r3, [r7, #31]
        break;
 800405a:	e002      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800405c:	bf00      	nop
 800405e:	e000      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004060:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004062:	7ffb      	ldrb	r3, [r7, #31]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d105      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff fee8 	bl	8003e42 <LL_RCC_SetSAIClockSource>
 8004072:	e001      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004074:	7ffb      	ldrb	r3, [r7, #31]
 8004076:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004080:	2b00      	cmp	r3, #0
 8004082:	d046      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004084:	f7ff ff56 	bl	8003f34 <LL_RCC_GetRTCClockSource>
 8004088:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	429a      	cmp	r2, r3
 8004092:	d03c      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004094:	f7fe fc4e 	bl	8002934 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d105      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7ff ff30 	bl	8003f08 <LL_RCC_SetRTCClockSource>
 80040a8:	e02e      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80040aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80040b4:	f7ff ff4b 	bl	8003f4e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80040b8:	f7ff ff5a 	bl	8003f70 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	4313      	orrs	r3, r2
 80040c8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80040ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80040d4:	f7ff fdf0 	bl	8003cb8 <LL_RCC_LSE_IsEnabled>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d114      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040de:	f7fe f813 	bl	8002108 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80040e4:	e00b      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e6:	f7fe f80f 	bl	8002108 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d902      	bls.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	77fb      	strb	r3, [r7, #31]
              break;
 80040fc:	e004      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80040fe:	f7ff fded 	bl	8003cdc <LL_RCC_LSE_IsReady>
 8004102:	4603      	mov	r3, r0
 8004104:	2b01      	cmp	r3, #1
 8004106:	d1ee      	bne.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004108:	7ffb      	ldrb	r3, [r7, #31]
 800410a:	77bb      	strb	r3, [r7, #30]
 800410c:	e001      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410e:	7ffb      	ldrb	r3, [r7, #31]
 8004110:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d004      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff fe2a 	bl	8003d7c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d004      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff fe35 	bl	8003da8 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0310 	and.w	r3, r3, #16
 8004146:	2b00      	cmp	r3, #0
 8004148:	d004      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	4618      	mov	r0, r3
 8004150:	f7ff fe5d 	bl	8003e0e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0320 	and.w	r3, r3, #32
 800415c:	2b00      	cmp	r3, #0
 800415e:	d004      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff fe52 	bl	8003e0e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b00      	cmp	r3, #0
 8004174:	d004      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff fe2a 	bl	8003dd4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	2b00      	cmp	r3, #0
 800418a:	d004      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff fe1f 	bl	8003dd4 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d022      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff fe8d 	bl	8003ec6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041b4:	d107      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80041b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041c4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041ce:	d10b      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3304      	adds	r3, #4
 80041d4:	4618      	mov	r0, r3
 80041d6:	f000 f8dd 	bl	8004394 <RCCEx_PLLSAI1_ConfigNQ>
 80041da:	4603      	mov	r3, r0
 80041dc:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80041de:	7ffb      	ldrb	r3, [r7, #31]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 80041e4:	7ffb      	ldrb	r3, [r7, #31]
 80041e6:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d02b      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041fc:	d008      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004206:	d003      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420c:	2b00      	cmp	r3, #0
 800420e:	d105      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff fe2a 	bl	8003e6e <LL_RCC_SetRNGClockSource>
 800421a:	e00a      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	2000      	movs	r0, #0
 8004228:	f7ff fe21 	bl	8003e6e <LL_RCC_SetRNGClockSource>
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f7ff fe34 	bl	8003e9a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004236:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800423a:	d107      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800423c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800424a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004254:	2b00      	cmp	r3, #0
 8004256:	d022      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff fe3d 	bl	8003edc <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004266:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800426a:	d107      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800426c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800427a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004280:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004284:	d10b      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3304      	adds	r3, #4
 800428a:	4618      	mov	r0, r3
 800428c:	f000 f8dd 	bl	800444a <RCCEx_PLLSAI1_ConfigNR>
 8004290:	4603      	mov	r3, r0
 8004292:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004294:	7ffb      	ldrb	r3, [r7, #31]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 800429a:	7ffb      	ldrb	r3, [r7, #31]
 800429c:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d004      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff fd26 	bl	8003d00 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d009      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff fd45 	bl	8003d54 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7ff fd2c 	bl	8003d2c <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80042d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3720      	adds	r7, #32
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b084      	sub	sp, #16
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80042ea:	f7ff fe61 	bl	8003fb0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80042ee:	f7fd ff0b 	bl	8002108 <HAL_GetTick>
 80042f2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80042f4:	e009      	b.n	800430a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042f6:	f7fd ff07 	bl	8002108 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d902      	bls.n	800430a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	73fb      	strb	r3, [r7, #15]
      break;
 8004308:	e004      	b.n	8004314 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800430a:	f7ff fe60 	bl	8003fce <LL_RCC_PLLSAI1_IsReady>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1f0      	bne.n	80042f6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004314:	7bfb      	ldrb	r3, [r7, #15]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d137      	bne.n	800438a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800431a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	021b      	lsls	r3, r3, #8
 800432a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800432e:	4313      	orrs	r3, r2
 8004330:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004344:	4313      	orrs	r3, r2
 8004346:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004348:	f7ff fe23 	bl	8003f92 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800434c:	f7fd fedc 	bl	8002108 <HAL_GetTick>
 8004350:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004352:	e009      	b.n	8004368 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004354:	f7fd fed8 	bl	8002108 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d902      	bls.n	8004368 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	73fb      	strb	r3, [r7, #15]
        break;
 8004366:	e004      	b.n	8004372 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004368:	f7ff fe31 	bl	8003fce <LL_RCC_PLLSAI1_IsReady>
 800436c:	4603      	mov	r3, r0
 800436e:	2b01      	cmp	r3, #1
 8004370:	d1f0      	bne.n	8004354 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004372:	7bfb      	ldrb	r3, [r7, #15]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d108      	bne.n	800438a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800437c:	691a      	ldr	r2, [r3, #16]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004386:	4313      	orrs	r3, r2
 8004388:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800438a:	7bfb      	ldrb	r3, [r7, #15]
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80043a0:	f7ff fe06 	bl	8003fb0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80043a4:	f7fd feb0 	bl	8002108 <HAL_GetTick>
 80043a8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80043aa:	e009      	b.n	80043c0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043ac:	f7fd feac 	bl	8002108 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d902      	bls.n	80043c0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	73fb      	strb	r3, [r7, #15]
      break;
 80043be:	e004      	b.n	80043ca <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80043c0:	f7ff fe05 	bl	8003fce <LL_RCC_PLLSAI1_IsReady>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80043ca:	7bfb      	ldrb	r3, [r7, #15]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d137      	bne.n	8004440 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80043d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	021b      	lsls	r3, r3, #8
 80043e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043e4:	4313      	orrs	r3, r2
 80043e6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80043e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043fa:	4313      	orrs	r3, r2
 80043fc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80043fe:	f7ff fdc8 	bl	8003f92 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004402:	f7fd fe81 	bl	8002108 <HAL_GetTick>
 8004406:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004408:	e009      	b.n	800441e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800440a:	f7fd fe7d 	bl	8002108 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d902      	bls.n	800441e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	73fb      	strb	r3, [r7, #15]
        break;
 800441c:	e004      	b.n	8004428 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800441e:	f7ff fdd6 	bl	8003fce <LL_RCC_PLLSAI1_IsReady>
 8004422:	4603      	mov	r3, r0
 8004424:	2b01      	cmp	r3, #1
 8004426:	d1f0      	bne.n	800440a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004428:	7bfb      	ldrb	r3, [r7, #15]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d108      	bne.n	8004440 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800442e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004432:	691a      	ldr	r2, [r3, #16]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800443c:	4313      	orrs	r3, r2
 800443e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004440:	7bfb      	ldrb	r3, [r7, #15]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004456:	f7ff fdab 	bl	8003fb0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800445a:	f7fd fe55 	bl	8002108 <HAL_GetTick>
 800445e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004460:	e009      	b.n	8004476 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004462:	f7fd fe51 	bl	8002108 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d902      	bls.n	8004476 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	73fb      	strb	r3, [r7, #15]
      break;
 8004474:	e004      	b.n	8004480 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004476:	f7ff fdaa 	bl	8003fce <LL_RCC_PLLSAI1_IsReady>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1f0      	bne.n	8004462 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004480:	7bfb      	ldrb	r3, [r7, #15]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d137      	bne.n	80044f6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	021b      	lsls	r3, r3, #8
 8004496:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800449a:	4313      	orrs	r3, r2
 800449c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800449e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044b0:	4313      	orrs	r3, r2
 80044b2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80044b4:	f7ff fd6d 	bl	8003f92 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b8:	f7fd fe26 	bl	8002108 <HAL_GetTick>
 80044bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80044be:	e009      	b.n	80044d4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044c0:	f7fd fe22 	bl	8002108 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d902      	bls.n	80044d4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	73fb      	strb	r3, [r7, #15]
        break;
 80044d2:	e004      	b.n	80044de <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80044d4:	f7ff fd7b 	bl	8003fce <LL_RCC_PLLSAI1_IsReady>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d1f0      	bne.n	80044c0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80044de:	7bfb      	ldrb	r3, [r7, #15]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d108      	bne.n	80044f6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80044e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044f2:	4313      	orrs	r3, r2
 80044f4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e090      	b.n	8004634 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7fd fc04 	bl	8001d34 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	22ca      	movs	r2, #202	; 0xca
 800453a:	625a      	str	r2, [r3, #36]	; 0x24
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2253      	movs	r2, #83	; 0x53
 8004542:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f89f 	bl	8004688 <RTC_EnterInitMode>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d009      	beq.n	8004564 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	22ff      	movs	r2, #255	; 0xff
 8004556:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2204      	movs	r2, #4
 800455c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e067      	b.n	8004634 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6812      	ldr	r2, [r2, #0]
 800456e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004576:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6899      	ldr	r1, [r3, #8]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	431a      	orrs	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	68d2      	ldr	r2, [r2, #12]
 800459e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6919      	ldr	r1, [r3, #16]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	041a      	lsls	r2, r3, #16
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045c2:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0203 	bic.w	r2, r2, #3
 80045d2:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69da      	ldr	r2, [r3, #28]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	431a      	orrs	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 0320 	and.w	r3, r3, #32
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d113      	bne.n	8004622 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f81e 	bl	800463c <HAL_RTC_WaitForSynchro>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00d      	beq.n	8004622 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	22ff      	movs	r2, #255	; 0xff
 800460c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2204      	movs	r2, #4
 8004612:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e008      	b.n	8004634 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	22ff      	movs	r2, #255	; 0xff
 8004628:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8004632:	2300      	movs	r3, #0
  }
}
 8004634:	4618      	mov	r0, r3
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004652:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004654:	f7fd fd58 	bl	8002108 <HAL_GetTick>
 8004658:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800465a:	e009      	b.n	8004670 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800465c:	f7fd fd54 	bl	8002108 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800466a:	d901      	bls.n	8004670 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e007      	b.n	8004680 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0ee      	beq.n	800465c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469a:	2b00      	cmp	r3, #0
 800469c:	d119      	bne.n	80046d2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f04f 32ff 	mov.w	r2, #4294967295
 80046a6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80046a8:	f7fd fd2e 	bl	8002108 <HAL_GetTick>
 80046ac:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80046ae:	e009      	b.n	80046c4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80046b0:	f7fd fd2a 	bl	8002108 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046be:	d901      	bls.n	80046c4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e007      	b.n	80046d4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0ee      	beq.n	80046b0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80046f2:	2302      	movs	r3, #2
 80046f4:	e0a8      	b.n	8004848 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2202      	movs	r2, #2
 8004702:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	22ca      	movs	r2, #202	; 0xca
 800470c:	625a      	str	r2, [r3, #36]	; 0x24
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2253      	movs	r2, #83	; 0x53
 8004714:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004720:	2b00      	cmp	r3, #0
 8004722:	d020      	beq.n	8004766 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8004724:	f7fd fcf0 	bl	8002108 <HAL_GetTick>
 8004728:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800472a:	e015      	b.n	8004758 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800472c:	f7fd fcec 	bl	8002108 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800473a:	d90d      	bls.n	8004758 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	22ff      	movs	r2, #255	; 0xff
 8004742:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2203      	movs	r2, #3
 8004748:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e077      	b.n	8004848 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f003 0304 	and.w	r3, r3, #4
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1e2      	bne.n	800472c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004774:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	b2da      	uxtb	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004786:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004788:	f7fd fcbe 	bl	8002108 <HAL_GetTick>
 800478c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800478e:	e015      	b.n	80047bc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004790:	f7fd fcba 	bl	8002108 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800479e:	d90d      	bls.n	80047bc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	22ff      	movs	r2, #255	; 0xff
 80047a6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2203      	movs	r2, #3
 80047ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e045      	b.n	8004848 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f003 0304 	and.w	r3, r3, #4
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0e2      	beq.n	8004790 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689a      	ldr	r2, [r3, #8]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0207 	bic.w	r2, r2, #7
 80047e0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6899      	ldr	r1, [r3, #8]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80047f2:	4b17      	ldr	r3, [pc, #92]	; (8004850 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80047f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047f8:	4a15      	ldr	r2, [pc, #84]	; (8004850 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80047fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047fe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004802:	4b13      	ldr	r3, [pc, #76]	; (8004850 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a12      	ldr	r2, [pc, #72]	; (8004850 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004808:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800480c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800481c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800482c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	22ff      	movs	r2, #255	; 0xff
 8004834:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3718      	adds	r7, #24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	58000800 	.word	0x58000800

08004854 <LL_RCC_GetUSARTClockSource>:
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800485c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004860:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4013      	ands	r3, r2
}
 8004868:	4618      	mov	r0, r3
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <LL_RCC_GetLPUARTClockSource>:
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800487c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004880:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4013      	ands	r3, r2
}
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e042      	b.n	800492c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d106      	bne.n	80048be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7fd fa6f 	bl	8001d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2224      	movs	r2, #36	; 0x24
 80048c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 0201 	bic.w	r2, r2, #1
 80048d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f8c2 	bl	8004a60 <UART_SetConfig>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d101      	bne.n	80048e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e022      	b.n	800492c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fade 	bl	8004eb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004902:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004912:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0201 	orr.w	r2, r2, #1
 8004922:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 fb65 	bl	8004ff4 <UART_CheckIdleState>
 800492a:	4603      	mov	r3, r0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b08a      	sub	sp, #40	; 0x28
 8004938:	af02      	add	r7, sp, #8
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	603b      	str	r3, [r7, #0]
 8004940:	4613      	mov	r3, r2
 8004942:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800494a:	2b20      	cmp	r3, #32
 800494c:	f040 8083 	bne.w	8004a56 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <HAL_UART_Transmit+0x28>
 8004956:	88fb      	ldrh	r3, [r7, #6]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e07b      	b.n	8004a58 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004966:	2b01      	cmp	r3, #1
 8004968:	d101      	bne.n	800496e <HAL_UART_Transmit+0x3a>
 800496a:	2302      	movs	r3, #2
 800496c:	e074      	b.n	8004a58 <HAL_UART_Transmit+0x124>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2221      	movs	r2, #33	; 0x21
 8004982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004986:	f7fd fbbf 	bl	8002108 <HAL_GetTick>
 800498a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	88fa      	ldrh	r2, [r7, #6]
 8004990:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	88fa      	ldrh	r2, [r7, #6]
 8004998:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a4:	d108      	bne.n	80049b8 <HAL_UART_Transmit+0x84>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d104      	bne.n	80049b8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80049ae:	2300      	movs	r3, #0
 80049b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	61bb      	str	r3, [r7, #24]
 80049b6:	e003      	b.n	80049c0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049bc:	2300      	movs	r3, #0
 80049be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80049c8:	e02c      	b.n	8004a24 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2200      	movs	r2, #0
 80049d2:	2180      	movs	r1, #128	; 0x80
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 fb58 	bl	800508a <UART_WaitOnFlagUntilTimeout>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e039      	b.n	8004a58 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10b      	bne.n	8004a02 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	881b      	ldrh	r3, [r3, #0]
 80049ee:	461a      	mov	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	3302      	adds	r3, #2
 80049fe:	61bb      	str	r3, [r7, #24]
 8004a00:	e007      	b.n	8004a12 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	781a      	ldrb	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1cc      	bne.n	80049ca <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	2200      	movs	r2, #0
 8004a38:	2140      	movs	r1, #64	; 0x40
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 fb25 	bl	800508a <UART_WaitOnFlagUntilTimeout>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e006      	b.n	8004a58 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	e000      	b.n	8004a58 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004a56:	2302      	movs	r3, #2
  }
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3720      	adds	r7, #32
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a64:	b08c      	sub	sp, #48	; 0x30
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	4baf      	ldr	r3, [pc, #700]	; (8004d4c <UART_SetConfig+0x2ec>)
 8004a90:	4013      	ands	r3, r2
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	6812      	ldr	r2, [r2, #0]
 8004a96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4aa4      	ldr	r2, [pc, #656]	; (8004d50 <UART_SetConfig+0x2f0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d004      	beq.n	8004acc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004ad6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	6812      	ldr	r2, [r2, #0]
 8004ade:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ae0:	430b      	orrs	r3, r1
 8004ae2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aea:	f023 010f 	bic.w	r1, r3, #15
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a95      	ldr	r2, [pc, #596]	; (8004d54 <UART_SetConfig+0x2f4>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d125      	bne.n	8004b50 <UART_SetConfig+0xf0>
 8004b04:	2003      	movs	r0, #3
 8004b06:	f7ff fea5 	bl	8004854 <LL_RCC_GetUSARTClockSource>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b03      	cmp	r3, #3
 8004b0e:	d81b      	bhi.n	8004b48 <UART_SetConfig+0xe8>
 8004b10:	a201      	add	r2, pc, #4	; (adr r2, 8004b18 <UART_SetConfig+0xb8>)
 8004b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b16:	bf00      	nop
 8004b18:	08004b29 	.word	0x08004b29
 8004b1c:	08004b39 	.word	0x08004b39
 8004b20:	08004b31 	.word	0x08004b31
 8004b24:	08004b41 	.word	0x08004b41
 8004b28:	2301      	movs	r3, #1
 8004b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b2e:	e042      	b.n	8004bb6 <UART_SetConfig+0x156>
 8004b30:	2302      	movs	r3, #2
 8004b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b36:	e03e      	b.n	8004bb6 <UART_SetConfig+0x156>
 8004b38:	2304      	movs	r3, #4
 8004b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b3e:	e03a      	b.n	8004bb6 <UART_SetConfig+0x156>
 8004b40:	2308      	movs	r3, #8
 8004b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b46:	e036      	b.n	8004bb6 <UART_SetConfig+0x156>
 8004b48:	2310      	movs	r3, #16
 8004b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b4e:	e032      	b.n	8004bb6 <UART_SetConfig+0x156>
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a7e      	ldr	r2, [pc, #504]	; (8004d50 <UART_SetConfig+0x2f0>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d12a      	bne.n	8004bb0 <UART_SetConfig+0x150>
 8004b5a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004b5e:	f7ff fe89 	bl	8004874 <LL_RCC_GetLPUARTClockSource>
 8004b62:	4603      	mov	r3, r0
 8004b64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b68:	d01a      	beq.n	8004ba0 <UART_SetConfig+0x140>
 8004b6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b6e:	d81b      	bhi.n	8004ba8 <UART_SetConfig+0x148>
 8004b70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b74:	d00c      	beq.n	8004b90 <UART_SetConfig+0x130>
 8004b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b7a:	d815      	bhi.n	8004ba8 <UART_SetConfig+0x148>
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <UART_SetConfig+0x128>
 8004b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b84:	d008      	beq.n	8004b98 <UART_SetConfig+0x138>
 8004b86:	e00f      	b.n	8004ba8 <UART_SetConfig+0x148>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b8e:	e012      	b.n	8004bb6 <UART_SetConfig+0x156>
 8004b90:	2302      	movs	r3, #2
 8004b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b96:	e00e      	b.n	8004bb6 <UART_SetConfig+0x156>
 8004b98:	2304      	movs	r3, #4
 8004b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b9e:	e00a      	b.n	8004bb6 <UART_SetConfig+0x156>
 8004ba0:	2308      	movs	r3, #8
 8004ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ba6:	e006      	b.n	8004bb6 <UART_SetConfig+0x156>
 8004ba8:	2310      	movs	r3, #16
 8004baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bae:	e002      	b.n	8004bb6 <UART_SetConfig+0x156>
 8004bb0:	2310      	movs	r3, #16
 8004bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a65      	ldr	r2, [pc, #404]	; (8004d50 <UART_SetConfig+0x2f0>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	f040 8097 	bne.w	8004cf0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d823      	bhi.n	8004c12 <UART_SetConfig+0x1b2>
 8004bca:	a201      	add	r2, pc, #4	; (adr r2, 8004bd0 <UART_SetConfig+0x170>)
 8004bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd0:	08004bf5 	.word	0x08004bf5
 8004bd4:	08004c13 	.word	0x08004c13
 8004bd8:	08004bfd 	.word	0x08004bfd
 8004bdc:	08004c13 	.word	0x08004c13
 8004be0:	08004c03 	.word	0x08004c03
 8004be4:	08004c13 	.word	0x08004c13
 8004be8:	08004c13 	.word	0x08004c13
 8004bec:	08004c13 	.word	0x08004c13
 8004bf0:	08004c0b 	.word	0x08004c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bf4:	f7fe ff80 	bl	8003af8 <HAL_RCC_GetPCLK1Freq>
 8004bf8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bfa:	e010      	b.n	8004c1e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bfc:	4b56      	ldr	r3, [pc, #344]	; (8004d58 <UART_SetConfig+0x2f8>)
 8004bfe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c00:	e00d      	b.n	8004c1e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c02:	f7fe fef9 	bl	80039f8 <HAL_RCC_GetSysClockFreq>
 8004c06:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c08:	e009      	b.n	8004c1e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c10:	e005      	b.n	8004c1e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 812b 	beq.w	8004e7c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	4a4c      	ldr	r2, [pc, #304]	; (8004d5c <UART_SetConfig+0x2fc>)
 8004c2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c30:	461a      	mov	r2, r3
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c38:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	4413      	add	r3, r2
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d305      	bcc.n	8004c56 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d903      	bls.n	8004c5e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c5c:	e10e      	b.n	8004e7c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	2200      	movs	r2, #0
 8004c62:	60bb      	str	r3, [r7, #8]
 8004c64:	60fa      	str	r2, [r7, #12]
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	4a3c      	ldr	r2, [pc, #240]	; (8004d5c <UART_SetConfig+0x2fc>)
 8004c6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2200      	movs	r2, #0
 8004c74:	603b      	str	r3, [r7, #0]
 8004c76:	607a      	str	r2, [r7, #4]
 8004c78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c80:	f7fb fad6 	bl	8000230 <__aeabi_uldivmod>
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	4610      	mov	r0, r2
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	020b      	lsls	r3, r1, #8
 8004c96:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c9a:	0202      	lsls	r2, r0, #8
 8004c9c:	6979      	ldr	r1, [r7, #20]
 8004c9e:	6849      	ldr	r1, [r1, #4]
 8004ca0:	0849      	lsrs	r1, r1, #1
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	460c      	mov	r4, r1
 8004ca6:	4605      	mov	r5, r0
 8004ca8:	eb12 0804 	adds.w	r8, r2, r4
 8004cac:	eb43 0905 	adc.w	r9, r3, r5
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	469a      	mov	sl, r3
 8004cb8:	4693      	mov	fp, r2
 8004cba:	4652      	mov	r2, sl
 8004cbc:	465b      	mov	r3, fp
 8004cbe:	4640      	mov	r0, r8
 8004cc0:	4649      	mov	r1, r9
 8004cc2:	f7fb fab5 	bl	8000230 <__aeabi_uldivmod>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4613      	mov	r3, r2
 8004ccc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cd4:	d308      	bcc.n	8004ce8 <UART_SetConfig+0x288>
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cdc:	d204      	bcs.n	8004ce8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6a3a      	ldr	r2, [r7, #32]
 8004ce4:	60da      	str	r2, [r3, #12]
 8004ce6:	e0c9      	b.n	8004e7c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004cee:	e0c5      	b.n	8004e7c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf8:	d16e      	bne.n	8004dd8 <UART_SetConfig+0x378>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004cfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	2b07      	cmp	r3, #7
 8004d02:	d82d      	bhi.n	8004d60 <UART_SetConfig+0x300>
 8004d04:	a201      	add	r2, pc, #4	; (adr r2, 8004d0c <UART_SetConfig+0x2ac>)
 8004d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0a:	bf00      	nop
 8004d0c:	08004d2d 	.word	0x08004d2d
 8004d10:	08004d35 	.word	0x08004d35
 8004d14:	08004d61 	.word	0x08004d61
 8004d18:	08004d3b 	.word	0x08004d3b
 8004d1c:	08004d61 	.word	0x08004d61
 8004d20:	08004d61 	.word	0x08004d61
 8004d24:	08004d61 	.word	0x08004d61
 8004d28:	08004d43 	.word	0x08004d43
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d2c:	f7fe fefa 	bl	8003b24 <HAL_RCC_GetPCLK2Freq>
 8004d30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d32:	e01b      	b.n	8004d6c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d34:	4b08      	ldr	r3, [pc, #32]	; (8004d58 <UART_SetConfig+0x2f8>)
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d38:	e018      	b.n	8004d6c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d3a:	f7fe fe5d 	bl	80039f8 <HAL_RCC_GetSysClockFreq>
 8004d3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d40:	e014      	b.n	8004d6c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d48:	e010      	b.n	8004d6c <UART_SetConfig+0x30c>
 8004d4a:	bf00      	nop
 8004d4c:	cfff69f3 	.word	0xcfff69f3
 8004d50:	40008000 	.word	0x40008000
 8004d54:	40013800 	.word	0x40013800
 8004d58:	00f42400 	.word	0x00f42400
 8004d5c:	080094c0 	.word	0x080094c0
      default:
        pclk = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 8084 	beq.w	8004e7c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	4a4b      	ldr	r2, [pc, #300]	; (8004ea8 <UART_SetConfig+0x448>)
 8004d7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d86:	005a      	lsls	r2, r3, #1
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	085b      	lsrs	r3, r3, #1
 8004d8e:	441a      	add	r2, r3
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	2b0f      	cmp	r3, #15
 8004da0:	d916      	bls.n	8004dd0 <UART_SetConfig+0x370>
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da8:	d212      	bcs.n	8004dd0 <UART_SetConfig+0x370>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	f023 030f 	bic.w	r3, r3, #15
 8004db2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	085b      	lsrs	r3, r3, #1
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	f003 0307 	and.w	r3, r3, #7
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	8bfb      	ldrh	r3, [r7, #30]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	8bfa      	ldrh	r2, [r7, #30]
 8004dcc:	60da      	str	r2, [r3, #12]
 8004dce:	e055      	b.n	8004e7c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004dd6:	e051      	b.n	8004e7c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	2b07      	cmp	r3, #7
 8004de0:	d821      	bhi.n	8004e26 <UART_SetConfig+0x3c6>
 8004de2:	a201      	add	r2, pc, #4	; (adr r2, 8004de8 <UART_SetConfig+0x388>)
 8004de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de8:	08004e09 	.word	0x08004e09
 8004dec:	08004e11 	.word	0x08004e11
 8004df0:	08004e27 	.word	0x08004e27
 8004df4:	08004e17 	.word	0x08004e17
 8004df8:	08004e27 	.word	0x08004e27
 8004dfc:	08004e27 	.word	0x08004e27
 8004e00:	08004e27 	.word	0x08004e27
 8004e04:	08004e1f 	.word	0x08004e1f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e08:	f7fe fe8c 	bl	8003b24 <HAL_RCC_GetPCLK2Freq>
 8004e0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e0e:	e010      	b.n	8004e32 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e10:	4b26      	ldr	r3, [pc, #152]	; (8004eac <UART_SetConfig+0x44c>)
 8004e12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e14:	e00d      	b.n	8004e32 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e16:	f7fe fdef 	bl	80039f8 <HAL_RCC_GetSysClockFreq>
 8004e1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e1c:	e009      	b.n	8004e32 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e24:	e005      	b.n	8004e32 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e30:	bf00      	nop
    }

    if (pclk != 0U)
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d021      	beq.n	8004e7c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	4a1a      	ldr	r2, [pc, #104]	; (8004ea8 <UART_SetConfig+0x448>)
 8004e3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e42:	461a      	mov	r2, r3
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	085b      	lsrs	r3, r3, #1
 8004e50:	441a      	add	r2, r3
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	2b0f      	cmp	r3, #15
 8004e62:	d908      	bls.n	8004e76 <UART_SetConfig+0x416>
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e6a:	d204      	bcs.n	8004e76 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = usartdiv;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6a3a      	ldr	r2, [r7, #32]
 8004e72:	60da      	str	r2, [r3, #12]
 8004e74:	e002      	b.n	8004e7c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	2200      	movs	r2, #0
 8004e96:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004e98:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3730      	adds	r7, #48	; 0x30
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ea6:	bf00      	nop
 8004ea8:	080094c0 	.word	0x080094c0
 8004eac:	00f42400 	.word	0x00f42400

08004eb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f00:	f003 0304 	and.w	r3, r3, #4
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00a      	beq.n	8004f1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f22:	f003 0308 	and.w	r3, r3, #8
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f44:	f003 0310 	and.w	r3, r3, #16
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00a      	beq.n	8004f62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f66:	f003 0320 	and.w	r3, r3, #32
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d01a      	beq.n	8004fc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004faa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fae:	d10a      	bne.n	8004fc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	605a      	str	r2, [r3, #4]
  }
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af02      	add	r7, sp, #8
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005004:	f7fd f880 	bl	8002108 <HAL_GetTick>
 8005008:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0308 	and.w	r3, r3, #8
 8005014:	2b08      	cmp	r3, #8
 8005016:	d10e      	bne.n	8005036 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005018:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f82f 	bl	800508a <UART_WaitOnFlagUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e025      	b.n	8005082 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	2b04      	cmp	r3, #4
 8005042:	d10e      	bne.n	8005062 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005044:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f819 	bl	800508a <UART_WaitOnFlagUntilTimeout>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e00f      	b.n	8005082 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2220      	movs	r2, #32
 8005066:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2220      	movs	r2, #32
 800506e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b09c      	sub	sp, #112	; 0x70
 800508e:	af00      	add	r7, sp, #0
 8005090:	60f8      	str	r0, [r7, #12]
 8005092:	60b9      	str	r1, [r7, #8]
 8005094:	603b      	str	r3, [r7, #0]
 8005096:	4613      	mov	r3, r2
 8005098:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800509a:	e0a9      	b.n	80051f0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800509c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800509e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a2:	f000 80a5 	beq.w	80051f0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050a6:	f7fd f82f 	bl	8002108 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d302      	bcc.n	80050bc <UART_WaitOnFlagUntilTimeout+0x32>
 80050b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d140      	bne.n	800513e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050c4:	e853 3f00 	ldrex	r3, [r3]
 80050c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80050ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050d0:	667b      	str	r3, [r7, #100]	; 0x64
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	461a      	mov	r2, r3
 80050d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050dc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80050e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050e2:	e841 2300 	strex	r3, r2, [r1]
 80050e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80050e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1e6      	bne.n	80050bc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3308      	adds	r3, #8
 80050f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f8:	e853 3f00 	ldrex	r3, [r3]
 80050fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005100:	f023 0301 	bic.w	r3, r3, #1
 8005104:	663b      	str	r3, [r7, #96]	; 0x60
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	3308      	adds	r3, #8
 800510c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800510e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005110:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005112:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005114:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005116:	e841 2300 	strex	r3, r2, [r1]
 800511a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800511c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1e5      	bne.n	80050ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2220      	movs	r2, #32
 8005126:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2220      	movs	r2, #32
 800512e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e069      	b.n	8005212 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b00      	cmp	r3, #0
 800514a:	d051      	beq.n	80051f0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800515a:	d149      	bne.n	80051f0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005164:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516e:	e853 3f00 	ldrex	r3, [r3]
 8005172:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800517a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	461a      	mov	r2, r3
 8005182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005184:	637b      	str	r3, [r7, #52]	; 0x34
 8005186:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005188:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800518a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800518c:	e841 2300 	strex	r3, r2, [r1]
 8005190:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1e6      	bne.n	8005166 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3308      	adds	r3, #8
 800519e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	e853 3f00 	ldrex	r3, [r3]
 80051a6:	613b      	str	r3, [r7, #16]
   return(result);
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	f023 0301 	bic.w	r3, r3, #1
 80051ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3308      	adds	r3, #8
 80051b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80051b8:	623a      	str	r2, [r7, #32]
 80051ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051bc:	69f9      	ldr	r1, [r7, #28]
 80051be:	6a3a      	ldr	r2, [r7, #32]
 80051c0:	e841 2300 	strex	r3, r2, [r1]
 80051c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1e5      	bne.n	8005198 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2220      	movs	r2, #32
 80051d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2220      	movs	r2, #32
 80051e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e010      	b.n	8005212 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	69da      	ldr	r2, [r3, #28]
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	4013      	ands	r3, r2
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	bf0c      	ite	eq
 8005200:	2301      	moveq	r3, #1
 8005202:	2300      	movne	r3, #0
 8005204:	b2db      	uxtb	r3, r3
 8005206:	461a      	mov	r2, r3
 8005208:	79fb      	ldrb	r3, [r7, #7]
 800520a:	429a      	cmp	r2, r3
 800520c:	f43f af46 	beq.w	800509c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3770      	adds	r7, #112	; 0x70
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800521a:	b480      	push	{r7}
 800521c:	b085      	sub	sp, #20
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005228:	2b01      	cmp	r3, #1
 800522a:	d101      	bne.n	8005230 <HAL_UARTEx_DisableFifoMode+0x16>
 800522c:	2302      	movs	r3, #2
 800522e:	e027      	b.n	8005280 <HAL_UARTEx_DisableFifoMode+0x66>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2224      	movs	r2, #36	; 0x24
 800523c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 0201 	bic.w	r2, r2, #1
 8005256:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800525e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2220      	movs	r2, #32
 8005272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800529c:	2b01      	cmp	r3, #1
 800529e:	d101      	bne.n	80052a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80052a0:	2302      	movs	r3, #2
 80052a2:	e02d      	b.n	8005300 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2224      	movs	r2, #36	; 0x24
 80052b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0201 	bic.w	r2, r2, #1
 80052ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f84f 	bl	8005384 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2220      	movs	r2, #32
 80052f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005318:	2b01      	cmp	r3, #1
 800531a:	d101      	bne.n	8005320 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800531c:	2302      	movs	r3, #2
 800531e:	e02d      	b.n	800537c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2224      	movs	r2, #36	; 0x24
 800532c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0201 	bic.w	r2, r2, #1
 8005346:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f811 	bl	8005384 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2220      	movs	r2, #32
 800536e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005390:	2b00      	cmp	r3, #0
 8005392:	d108      	bne.n	80053a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80053a4:	e031      	b.n	800540a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80053a6:	2308      	movs	r3, #8
 80053a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80053aa:	2308      	movs	r3, #8
 80053ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	0e5b      	lsrs	r3, r3, #25
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	f003 0307 	and.w	r3, r3, #7
 80053bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	0f5b      	lsrs	r3, r3, #29
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053ce:	7bbb      	ldrb	r3, [r7, #14]
 80053d0:	7b3a      	ldrb	r2, [r7, #12]
 80053d2:	4911      	ldr	r1, [pc, #68]	; (8005418 <UARTEx_SetNbDataToProcess+0x94>)
 80053d4:	5c8a      	ldrb	r2, [r1, r2]
 80053d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80053da:	7b3a      	ldrb	r2, [r7, #12]
 80053dc:	490f      	ldr	r1, [pc, #60]	; (800541c <UARTEx_SetNbDataToProcess+0x98>)
 80053de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053ec:	7bfb      	ldrb	r3, [r7, #15]
 80053ee:	7b7a      	ldrb	r2, [r7, #13]
 80053f0:	4909      	ldr	r1, [pc, #36]	; (8005418 <UARTEx_SetNbDataToProcess+0x94>)
 80053f2:	5c8a      	ldrb	r2, [r1, r2]
 80053f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80053f8:	7b7a      	ldrb	r2, [r7, #13]
 80053fa:	4908      	ldr	r1, [pc, #32]	; (800541c <UARTEx_SetNbDataToProcess+0x98>)
 80053fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8005402:	b29a      	uxth	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800540a:	bf00      	nop
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	080094d8 	.word	0x080094d8
 800541c:	080094e0 	.word	0x080094e0

08005420 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b088      	sub	sp, #32
 8005424:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005426:	2300      	movs	r3, #0
 8005428:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800542a:	f107 0308 	add.w	r3, r7, #8
 800542e:	2218      	movs	r2, #24
 8005430:	2100      	movs	r1, #0
 8005432:	4618      	mov	r0, r3
 8005434:	f001 f8d8 	bl	80065e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005438:	233f      	movs	r3, #63	; 0x3f
 800543a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800543c:	2381      	movs	r3, #129	; 0x81
 800543e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005440:	1dfb      	adds	r3, r7, #7
 8005442:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005444:	2301      	movs	r3, #1
 8005446:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005448:	f107 0308 	add.w	r3, r7, #8
 800544c:	2100      	movs	r1, #0
 800544e:	4618      	mov	r0, r3
 8005450:	f001 fb54 	bl	8006afc <hci_send_req>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	da01      	bge.n	800545e <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800545a:	23ff      	movs	r3, #255	; 0xff
 800545c:	e000      	b.n	8005460 <aci_gap_set_non_discoverable+0x40>
  return status;
 800545e:	79fb      	ldrb	r3, [r7, #7]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3720      	adds	r7, #32
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8005468:	b5b0      	push	{r4, r5, r7, lr}
 800546a:	b0ce      	sub	sp, #312	; 0x138
 800546c:	af00      	add	r7, sp, #0
 800546e:	4605      	mov	r5, r0
 8005470:	460c      	mov	r4, r1
 8005472:	4610      	mov	r0, r2
 8005474:	4619      	mov	r1, r3
 8005476:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800547a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800547e:	462a      	mov	r2, r5
 8005480:	701a      	strb	r2, [r3, #0]
 8005482:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005486:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800548a:	4622      	mov	r2, r4
 800548c:	801a      	strh	r2, [r3, #0]
 800548e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005492:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8005496:	4602      	mov	r2, r0
 8005498:	801a      	strh	r2, [r3, #0]
 800549a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800549e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80054a2:	460a      	mov	r2, r1
 80054a4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80054a6:	f107 0310 	add.w	r3, r7, #16
 80054aa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80054ae:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80054b2:	3308      	adds	r3, #8
 80054b4:	f107 0210 	add.w	r2, r7, #16
 80054b8:	4413      	add	r3, r2
 80054ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80054be:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80054c2:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80054c6:	4413      	add	r3, r2
 80054c8:	3309      	adds	r3, #9
 80054ca:	f107 0210 	add.w	r2, r7, #16
 80054ce:	4413      	add	r3, r2
 80054d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80054d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80054d8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80054dc:	2200      	movs	r2, #0
 80054de:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80054e0:	2300      	movs	r3, #0
 80054e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 80054e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054ea:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80054ee:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80054f2:	7812      	ldrb	r2, [r2, #0]
 80054f4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80054f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80054fa:	3301      	adds	r3, #1
 80054fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8005500:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005504:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005508:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800550c:	8812      	ldrh	r2, [r2, #0]
 800550e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8005512:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005516:	3302      	adds	r3, #2
 8005518:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800551c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005520:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005524:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8005528:	8812      	ldrh	r2, [r2, #0]
 800552a:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800552e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005532:	3302      	adds	r3, #2
 8005534:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8005538:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800553c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005540:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8005544:	7812      	ldrb	r2, [r2, #0]
 8005546:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005548:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800554c:	3301      	adds	r3, #1
 800554e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8005552:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005556:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800555a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800555c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005560:	3301      	adds	r3, #1
 8005562:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8005566:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800556a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800556e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8005570:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005574:	3301      	adds	r3, #1
 8005576:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800557a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800557e:	3308      	adds	r3, #8
 8005580:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005584:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8005588:	4618      	mov	r0, r3
 800558a:	f001 f81d 	bl	80065c8 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800558e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8005592:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005596:	4413      	add	r3, r2
 8005598:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800559c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80055a0:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80055a4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80055a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80055aa:	3301      	adds	r3, #1
 80055ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80055b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80055b4:	3301      	adds	r3, #1
 80055b6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80055ba:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80055be:	4618      	mov	r0, r3
 80055c0:	f001 f802 	bl	80065c8 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80055c4:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80055c8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80055cc:	4413      	add	r3, r2
 80055ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 80055d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055d6:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80055da:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80055dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80055e0:	3302      	adds	r3, #2
 80055e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 80055e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ea:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80055ee:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80055f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80055f4:	3302      	adds	r3, #2
 80055f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80055fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80055fe:	2218      	movs	r2, #24
 8005600:	2100      	movs	r1, #0
 8005602:	4618      	mov	r0, r3
 8005604:	f000 fff0 	bl	80065e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005608:	233f      	movs	r3, #63	; 0x3f
 800560a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800560e:	2383      	movs	r3, #131	; 0x83
 8005610:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005614:	f107 0310 	add.w	r3, r7, #16
 8005618:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800561c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005620:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005624:	f107 030f 	add.w	r3, r7, #15
 8005628:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800562c:	2301      	movs	r3, #1
 800562e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005632:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005636:	2100      	movs	r1, #0
 8005638:	4618      	mov	r0, r3
 800563a:	f001 fa5f 	bl	8006afc <hci_send_req>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	da01      	bge.n	8005648 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8005644:	23ff      	movs	r3, #255	; 0xff
 8005646:	e004      	b.n	8005652 <aci_gap_set_discoverable+0x1ea>
  return status;
 8005648:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800564c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005650:	781b      	ldrb	r3, [r3, #0]
}
 8005652:	4618      	mov	r0, r3
 8005654:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8005658:	46bd      	mov	sp, r7
 800565a:	bdb0      	pop	{r4, r5, r7, pc}

0800565c <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b0cc      	sub	sp, #304	; 0x130
 8005660:	af00      	add	r7, sp, #0
 8005662:	4602      	mov	r2, r0
 8005664:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005668:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800566c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800566e:	f107 0310 	add.w	r3, r7, #16
 8005672:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800567a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800567e:	2200      	movs	r2, #0
 8005680:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005682:	2300      	movs	r3, #0
 8005684:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8005688:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800568c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005690:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005694:	7812      	ldrb	r2, [r2, #0]
 8005696:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005698:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800569c:	3301      	adds	r3, #1
 800569e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80056a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80056a6:	2218      	movs	r2, #24
 80056a8:	2100      	movs	r1, #0
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 ff9c 	bl	80065e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80056b0:	233f      	movs	r3, #63	; 0x3f
 80056b2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80056b6:	2385      	movs	r3, #133	; 0x85
 80056b8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80056bc:	f107 0310 	add.w	r3, r7, #16
 80056c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80056c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80056c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80056cc:	f107 030f 	add.w	r3, r7, #15
 80056d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80056d4:	2301      	movs	r3, #1
 80056d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80056da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80056de:	2100      	movs	r1, #0
 80056e0:	4618      	mov	r0, r3
 80056e2:	f001 fa0b 	bl	8006afc <hci_send_req>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	da01      	bge.n	80056f0 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80056ec:	23ff      	movs	r3, #255	; 0xff
 80056ee:	e004      	b.n	80056fa <aci_gap_set_io_capability+0x9e>
  return status;
 80056f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80056f8:	781b      	ldrb	r3, [r3, #0]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8005704:	b5b0      	push	{r4, r5, r7, lr}
 8005706:	b0cc      	sub	sp, #304	; 0x130
 8005708:	af00      	add	r7, sp, #0
 800570a:	4605      	mov	r5, r0
 800570c:	460c      	mov	r4, r1
 800570e:	4610      	mov	r0, r2
 8005710:	4619      	mov	r1, r3
 8005712:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005716:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800571a:	462a      	mov	r2, r5
 800571c:	701a      	strb	r2, [r3, #0]
 800571e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005722:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005726:	4622      	mov	r2, r4
 8005728:	701a      	strb	r2, [r3, #0]
 800572a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800572e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8005732:	4602      	mov	r2, r0
 8005734:	701a      	strb	r2, [r3, #0]
 8005736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800573a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800573e:	460a      	mov	r2, r1
 8005740:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8005742:	f107 0310 	add.w	r3, r7, #16
 8005746:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800574a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800574e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005752:	2200      	movs	r2, #0
 8005754:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005756:	2300      	movs	r3, #0
 8005758:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800575c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005760:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005764:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005768:	7812      	ldrb	r2, [r2, #0]
 800576a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800576c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005770:	3301      	adds	r3, #1
 8005772:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8005776:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800577a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800577e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005782:	7812      	ldrb	r2, [r2, #0]
 8005784:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005786:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800578a:	3301      	adds	r3, #1
 800578c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8005790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005794:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005798:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800579c:	7812      	ldrb	r2, [r2, #0]
 800579e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80057a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057a4:	3301      	adds	r3, #1
 80057a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80057aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80057b2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80057b6:	7812      	ldrb	r2, [r2, #0]
 80057b8:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80057ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057be:	3301      	adds	r3, #1
 80057c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80057c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057c8:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80057cc:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80057ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057d2:	3301      	adds	r3, #1
 80057d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80057d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057dc:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80057e0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80057e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057e6:	3301      	adds	r3, #1
 80057e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80057ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057f0:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80057f4:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80057f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057fa:	3301      	adds	r3, #1
 80057fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8005800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005804:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8005808:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800580c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005810:	3304      	adds	r3, #4
 8005812:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8005816:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800581a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800581e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8005820:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005824:	3301      	adds	r3, #1
 8005826:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800582a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800582e:	2218      	movs	r2, #24
 8005830:	2100      	movs	r1, #0
 8005832:	4618      	mov	r0, r3
 8005834:	f000 fed8 	bl	80065e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005838:	233f      	movs	r3, #63	; 0x3f
 800583a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800583e:	2386      	movs	r3, #134	; 0x86
 8005840:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005844:	f107 0310 	add.w	r3, r7, #16
 8005848:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800584c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005850:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005854:	f107 030f 	add.w	r3, r7, #15
 8005858:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800585c:	2301      	movs	r3, #1
 800585e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005862:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005866:	2100      	movs	r1, #0
 8005868:	4618      	mov	r0, r3
 800586a:	f001 f947 	bl	8006afc <hci_send_req>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	da01      	bge.n	8005878 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8005874:	23ff      	movs	r3, #255	; 0xff
 8005876:	e004      	b.n	8005882 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8005878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005880:	781b      	ldrb	r3, [r3, #0]
}
 8005882:	4618      	mov	r0, r3
 8005884:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005888:	46bd      	mov	sp, r7
 800588a:	bdb0      	pop	{r4, r5, r7, pc}

0800588c <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b0cc      	sub	sp, #304	; 0x130
 8005890:	af00      	add	r7, sp, #0
 8005892:	4602      	mov	r2, r0
 8005894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005898:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800589c:	6019      	str	r1, [r3, #0]
 800589e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80058a6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80058a8:	f107 0310 	add.w	r3, r7, #16
 80058ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80058b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80058b8:	2200      	movs	r2, #0
 80058ba:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80058bc:	2300      	movs	r3, #0
 80058be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80058c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058ca:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80058ce:	8812      	ldrh	r2, [r2, #0]
 80058d0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80058d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80058d6:	3302      	adds	r3, #2
 80058d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 80058dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058e4:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80058e8:	6812      	ldr	r2, [r2, #0]
 80058ea:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80058ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80058f2:	3304      	adds	r3, #4
 80058f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80058f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80058fc:	2218      	movs	r2, #24
 80058fe:	2100      	movs	r1, #0
 8005900:	4618      	mov	r0, r3
 8005902:	f000 fe71 	bl	80065e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005906:	233f      	movs	r3, #63	; 0x3f
 8005908:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 800590c:	2388      	movs	r3, #136	; 0x88
 800590e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005912:	f107 0310 	add.w	r3, r7, #16
 8005916:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800591a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800591e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005922:	f107 030f 	add.w	r3, r7, #15
 8005926:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800592a:	2301      	movs	r3, #1
 800592c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005930:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005934:	2100      	movs	r1, #0
 8005936:	4618      	mov	r0, r3
 8005938:	f001 f8e0 	bl	8006afc <hci_send_req>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	da01      	bge.n	8005946 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8005942:	23ff      	movs	r3, #255	; 0xff
 8005944:	e004      	b.n	8005950 <aci_gap_pass_key_resp+0xc4>
  return status;
 8005946:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800594a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800594e:	781b      	ldrb	r3, [r3, #0]
}
 8005950:	4618      	mov	r0, r3
 8005952:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800595a:	b590      	push	{r4, r7, lr}
 800595c:	b0cd      	sub	sp, #308	; 0x134
 800595e:	af00      	add	r7, sp, #0
 8005960:	4604      	mov	r4, r0
 8005962:	4608      	mov	r0, r1
 8005964:	4611      	mov	r1, r2
 8005966:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800596a:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800596e:	6013      	str	r3, [r2, #0]
 8005970:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005974:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005978:	4622      	mov	r2, r4
 800597a:	701a      	strb	r2, [r3, #0]
 800597c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005980:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005984:	4602      	mov	r2, r0
 8005986:	701a      	strb	r2, [r3, #0]
 8005988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598c:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8005990:	460a      	mov	r2, r1
 8005992:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8005994:	f107 0310 	add.w	r3, r7, #16
 8005998:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800599c:	f107 0308 	add.w	r3, r7, #8
 80059a0:	2207      	movs	r2, #7
 80059a2:	2100      	movs	r1, #0
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 fe1f 	bl	80065e8 <Osal_MemSet>
  int index_input = 0;
 80059aa:	2300      	movs	r3, #0
 80059ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80059b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80059b8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80059bc:	7812      	ldrb	r2, [r2, #0]
 80059be:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80059c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80059c4:	3301      	adds	r3, #1
 80059c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80059ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80059d2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80059d6:	7812      	ldrb	r2, [r2, #0]
 80059d8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80059da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80059de:	3301      	adds	r3, #1
 80059e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 80059e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80059ec:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80059f0:	7812      	ldrb	r2, [r2, #0]
 80059f2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80059f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80059f8:	3301      	adds	r3, #1
 80059fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80059fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a02:	2218      	movs	r2, #24
 8005a04:	2100      	movs	r1, #0
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 fdee 	bl	80065e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005a0c:	233f      	movs	r3, #63	; 0x3f
 8005a0e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8005a12:	238a      	movs	r3, #138	; 0x8a
 8005a14:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005a18:	f107 0310 	add.w	r3, r7, #16
 8005a1c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005a20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a24:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8005a28:	f107 0308 	add.w	r3, r7, #8
 8005a2c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8005a30:	2307      	movs	r3, #7
 8005a32:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005a36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f001 f85d 	bl	8006afc <hci_send_req>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	da01      	bge.n	8005a4c <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8005a48:	23ff      	movs	r3, #255	; 0xff
 8005a4a:	e02e      	b.n	8005aaa <aci_gap_init+0x150>
  if ( resp.Status )
 8005a4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a50:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d005      	beq.n	8005a66 <aci_gap_init+0x10c>
    return resp.Status;
 8005a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a5e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	e021      	b.n	8005aaa <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8005a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a6a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005a6e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8005a80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a84:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005a88:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005a92:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8005a94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a98:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005a9c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8005aa6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd90      	pop	{r4, r7, pc}

08005ab4 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b0cc      	sub	sp, #304	; 0x130
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	4602      	mov	r2, r0
 8005abc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ac4:	6019      	str	r1, [r3, #0]
 8005ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aca:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005ace:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8005ad0:	f107 0310 	add.w	r3, r7, #16
 8005ad4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005ad8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005adc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8005aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005af2:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005af6:	7812      	ldrb	r2, [r2, #0]
 8005af8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005afa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005afe:	3301      	adds	r3, #1
 8005b00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8005b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b08:	1c58      	adds	r0, r3, #1
 8005b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b0e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005b12:	781a      	ldrb	r2, [r3, #0]
 8005b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b1c:	6819      	ldr	r1, [r3, #0]
 8005b1e:	f000 fd53 	bl	80065c8 <Osal_MemCpy>
  index_input += AdvDataLen;
 8005b22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b26:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005b30:	4413      	add	r3, r2
 8005b32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005b36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b3a:	2218      	movs	r2, #24
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 fd52 	bl	80065e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005b44:	233f      	movs	r3, #63	; 0x3f
 8005b46:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8005b4a:	238e      	movs	r3, #142	; 0x8e
 8005b4c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005b50:	f107 0310 	add.w	r3, r7, #16
 8005b54:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005b58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b5c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005b60:	f107 030f 	add.w	r3, r7, #15
 8005b64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005b6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b72:	2100      	movs	r1, #0
 8005b74:	4618      	mov	r0, r3
 8005b76:	f000 ffc1 	bl	8006afc <hci_send_req>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	da01      	bge.n	8005b84 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8005b80:	23ff      	movs	r3, #255	; 0xff
 8005b82:	e004      	b.n	8005b8e <aci_gap_update_adv_data+0xda>
  return status;
 8005b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b88:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005b8c:	781b      	ldrb	r3, [r3, #0]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b088      	sub	sp, #32
 8005b9c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005ba2:	f107 0308 	add.w	r3, r7, #8
 8005ba6:	2218      	movs	r2, #24
 8005ba8:	2100      	movs	r1, #0
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 fd1c 	bl	80065e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005bb0:	233f      	movs	r3, #63	; 0x3f
 8005bb2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8005bb4:	2392      	movs	r3, #146	; 0x92
 8005bb6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005bb8:	1dfb      	adds	r3, r7, #7
 8005bba:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005bc0:	f107 0308 	add.w	r3, r7, #8
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 ff98 	bl	8006afc <hci_send_req>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	da01      	bge.n	8005bd6 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005bd2:	23ff      	movs	r3, #255	; 0xff
 8005bd4:	e000      	b.n	8005bd8 <aci_gap_configure_whitelist+0x40>
  return status;
 8005bd6:	79fb      	ldrb	r3, [r7, #7]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3720      	adds	r7, #32
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b0cc      	sub	sp, #304	; 0x130
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	4602      	mov	r2, r0
 8005be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bec:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005bf0:	801a      	strh	r2, [r3, #0]
 8005bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf6:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8005bfa:	460a      	mov	r2, r1
 8005bfc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8005bfe:	f107 0310 	add.w	r3, r7, #16
 8005c02:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c0a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005c0e:	2200      	movs	r2, #0
 8005c10:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005c12:	2300      	movs	r3, #0
 8005c14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8005c18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c1c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c20:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005c24:	8812      	ldrh	r2, [r2, #0]
 8005c26:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005c28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c2c:	3302      	adds	r3, #2
 8005c2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8005c32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c36:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c3a:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8005c3e:	7812      	ldrb	r2, [r2, #0]
 8005c40:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005c42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c46:	3301      	adds	r3, #1
 8005c48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005c4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c50:	2218      	movs	r2, #24
 8005c52:	2100      	movs	r1, #0
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 fcc7 	bl	80065e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005c5a:	233f      	movs	r3, #63	; 0x3f
 8005c5c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8005c60:	23a5      	movs	r3, #165	; 0xa5
 8005c62:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005c66:	f107 0310 	add.w	r3, r7, #16
 8005c6a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005c6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c72:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005c76:	f107 030f 	add.w	r3, r7, #15
 8005c7a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005c84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c88:	2100      	movs	r1, #0
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 ff36 	bl	8006afc <hci_send_req>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	da01      	bge.n	8005c9a <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8005c96:	23ff      	movs	r3, #255	; 0xff
 8005c98:	e004      	b.n	8005ca4 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8005c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c9e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005ca2:	781b      	ldrb	r3, [r3, #0]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b088      	sub	sp, #32
 8005cb2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005cb8:	f107 0308 	add.w	r3, r7, #8
 8005cbc:	2218      	movs	r2, #24
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f000 fc91 	bl	80065e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005cc6:	233f      	movs	r3, #63	; 0x3f
 8005cc8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8005cca:	f240 1301 	movw	r3, #257	; 0x101
 8005cce:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005cd0:	1dfb      	adds	r3, r7, #7
 8005cd2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005cd8:	f107 0308 	add.w	r3, r7, #8
 8005cdc:	2100      	movs	r1, #0
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 ff0c 	bl	8006afc <hci_send_req>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	da01      	bge.n	8005cee <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8005cea:	23ff      	movs	r3, #255	; 0xff
 8005cec:	e000      	b.n	8005cf0 <aci_gatt_init+0x42>
  return status;
 8005cee:	79fb      	ldrb	r3, [r7, #7]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3720      	adds	r7, #32
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8005cf8:	b590      	push	{r4, r7, lr}
 8005cfa:	b0cf      	sub	sp, #316	; 0x13c
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	4604      	mov	r4, r0
 8005d00:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8005d04:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8005d08:	6001      	str	r1, [r0, #0]
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d12:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005d16:	4622      	mov	r2, r4
 8005d18:	701a      	strb	r2, [r3, #0]
 8005d1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d1e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005d22:	4602      	mov	r2, r0
 8005d24:	701a      	strb	r2, [r3, #0]
 8005d26:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d2a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005d2e:	460a      	mov	r2, r1
 8005d30:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8005d32:	f107 0310 	add.w	r3, r7, #16
 8005d36:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8005d3a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d3e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d00a      	beq.n	8005d5e <aci_gatt_add_service+0x66>
 8005d48:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d4c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d101      	bne.n	8005d5a <aci_gatt_add_service+0x62>
 8005d56:	2311      	movs	r3, #17
 8005d58:	e002      	b.n	8005d60 <aci_gatt_add_service+0x68>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e000      	b.n	8005d60 <aci_gatt_add_service+0x68>
 8005d5e:	2303      	movs	r3, #3
 8005d60:	f107 0210 	add.w	r2, r7, #16
 8005d64:	4413      	add	r3, r2
 8005d66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005d6a:	f107 030c 	add.w	r3, r7, #12
 8005d6e:	2203      	movs	r2, #3
 8005d70:	2100      	movs	r1, #0
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 fc38 	bl	80065e8 <Osal_MemSet>
  int index_input = 0;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8005d7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005d82:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005d86:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8005d8a:	7812      	ldrb	r2, [r2, #0]
 8005d8c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005d8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005d92:	3301      	adds	r3, #1
 8005d94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8005d98:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d9c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d002      	beq.n	8005dac <aci_gatt_add_service+0xb4>
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d004      	beq.n	8005db4 <aci_gatt_add_service+0xbc>
 8005daa:	e007      	b.n	8005dbc <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8005dac:	2302      	movs	r3, #2
 8005dae:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8005db2:	e005      	b.n	8005dc0 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8005db4:	2310      	movs	r3, #16
 8005db6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8005dba:	e001      	b.n	8005dc0 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8005dbc:	2397      	movs	r3, #151	; 0x97
 8005dbe:	e06c      	b.n	8005e9a <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8005dc0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005dc4:	1c58      	adds	r0, r3, #1
 8005dc6:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8005dca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005dce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005dd2:	6819      	ldr	r1, [r3, #0]
 8005dd4:	f000 fbf8 	bl	80065c8 <Osal_MemCpy>
    index_input += size;
 8005dd8:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8005ddc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005de0:	4413      	add	r3, r2
 8005de2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8005de6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dea:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005dee:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8005df2:	7812      	ldrb	r2, [r2, #0]
 8005df4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005df6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8005e00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e04:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005e08:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8005e0c:	7812      	ldrb	r2, [r2, #0]
 8005e0e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8005e10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e14:	3301      	adds	r3, #1
 8005e16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005e1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e1e:	2218      	movs	r2, #24
 8005e20:	2100      	movs	r1, #0
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 fbe0 	bl	80065e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005e28:	233f      	movs	r3, #63	; 0x3f
 8005e2a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8005e2e:	f44f 7381 	mov.w	r3, #258	; 0x102
 8005e32:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005e36:	f107 0310 	add.w	r3, r7, #16
 8005e3a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005e3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e42:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8005e46:	f107 030c 	add.w	r3, r7, #12
 8005e4a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8005e4e:	2303      	movs	r3, #3
 8005e50:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005e54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e58:	2100      	movs	r1, #0
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 fe4e 	bl	8006afc <hci_send_req>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	da01      	bge.n	8005e6a <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8005e66:	23ff      	movs	r3, #255	; 0xff
 8005e68:	e017      	b.n	8005e9a <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8005e6a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d005      	beq.n	8005e84 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8005e78:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	e00a      	b.n	8005e9a <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8005e84:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e8c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8005e96:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd90      	pop	{r4, r7, pc}

08005ea4 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8005ea4:	b590      	push	{r4, r7, lr}
 8005ea6:	b0d1      	sub	sp, #324	; 0x144
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	4604      	mov	r4, r0
 8005eac:	4608      	mov	r0, r1
 8005eae:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8005eb2:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8005eb6:	600a      	str	r2, [r1, #0]
 8005eb8:	4619      	mov	r1, r3
 8005eba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005ebe:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005ec2:	4622      	mov	r2, r4
 8005ec4:	801a      	strh	r2, [r3, #0]
 8005ec6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005eca:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005ece:	4602      	mov	r2, r0
 8005ed0:	701a      	strb	r2, [r3, #0]
 8005ed2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005ed6:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8005eda:	460a      	mov	r2, r1
 8005edc:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8005ede:	f107 0318 	add.w	r3, r7, #24
 8005ee2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8005ee6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005eea:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d00a      	beq.n	8005f0a <aci_gatt_add_char+0x66>
 8005ef4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005ef8:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d101      	bne.n	8005f06 <aci_gatt_add_char+0x62>
 8005f02:	2313      	movs	r3, #19
 8005f04:	e002      	b.n	8005f0c <aci_gatt_add_char+0x68>
 8005f06:	2303      	movs	r3, #3
 8005f08:	e000      	b.n	8005f0c <aci_gatt_add_char+0x68>
 8005f0a:	2305      	movs	r3, #5
 8005f0c:	f107 0218 	add.w	r2, r7, #24
 8005f10:	4413      	add	r3, r2
 8005f12:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005f16:	f107 0314 	add.w	r3, r7, #20
 8005f1a:	2203      	movs	r2, #3
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 fb62 	bl	80065e8 <Osal_MemSet>
  int index_input = 0;
 8005f24:	2300      	movs	r3, #0
 8005f26:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8005f2a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005f2e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005f32:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8005f36:	8812      	ldrh	r2, [r2, #0]
 8005f38:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005f3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005f3e:	3302      	adds	r3, #2
 8005f40:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8005f44:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005f48:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005f4c:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8005f50:	7812      	ldrb	r2, [r2, #0]
 8005f52:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005f54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005f58:	3301      	adds	r3, #1
 8005f5a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8005f5e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005f62:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d002      	beq.n	8005f72 <aci_gatt_add_char+0xce>
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d004      	beq.n	8005f7a <aci_gatt_add_char+0xd6>
 8005f70:	e007      	b.n	8005f82 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8005f72:	2302      	movs	r3, #2
 8005f74:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8005f78:	e005      	b.n	8005f86 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8005f7a:	2310      	movs	r3, #16
 8005f7c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8005f80:	e001      	b.n	8005f86 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8005f82:	2397      	movs	r3, #151	; 0x97
 8005f84:	e091      	b.n	80060aa <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8005f86:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005f8a:	1cd8      	adds	r0, r3, #3
 8005f8c:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8005f90:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005f94:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005f98:	6819      	ldr	r1, [r3, #0]
 8005f9a:	f000 fb15 	bl	80065c8 <Osal_MemCpy>
    index_input += size;
 8005f9e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8005fa2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8005fac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fb0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005fb4:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8005fb8:	8812      	ldrh	r2, [r2, #0]
 8005fba:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005fbc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005fc0:	3302      	adds	r3, #2
 8005fc2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8005fc6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fca:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8005fce:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8005fd0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8005fda:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fde:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005fe2:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8005fe4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005fe8:	3301      	adds	r3, #1
 8005fea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8005fee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ff2:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8005ff6:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8005ff8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8006002:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006006:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800600a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800600c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006010:	3301      	adds	r3, #1
 8006012:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8006016:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800601a:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800601e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8006020:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006024:	3301      	adds	r3, #1
 8006026:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800602a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800602e:	2218      	movs	r2, #24
 8006030:	2100      	movs	r1, #0
 8006032:	4618      	mov	r0, r3
 8006034:	f000 fad8 	bl	80065e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006038:	233f      	movs	r3, #63	; 0x3f
 800603a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800603e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006042:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8006046:	f107 0318 	add.w	r3, r7, #24
 800604a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800604e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006052:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8006056:	f107 0314 	add.w	r3, r7, #20
 800605a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800605e:	2303      	movs	r3, #3
 8006060:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006064:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006068:	2100      	movs	r1, #0
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fd46 	bl	8006afc <hci_send_req>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	da01      	bge.n	800607a <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8006076:	23ff      	movs	r3, #255	; 0xff
 8006078:	e017      	b.n	80060aa <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800607a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800607e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d005      	beq.n	8006094 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8006088:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800608c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	e00a      	b.n	80060aa <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8006094:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006098:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800609c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80060a6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd90      	pop	{r4, r7, pc}

080060b4 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80060b4:	b5b0      	push	{r4, r5, r7, lr}
 80060b6:	b0cc      	sub	sp, #304	; 0x130
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	4605      	mov	r5, r0
 80060bc:	460c      	mov	r4, r1
 80060be:	4610      	mov	r0, r2
 80060c0:	4619      	mov	r1, r3
 80060c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80060ca:	462a      	mov	r2, r5
 80060cc:	801a      	strh	r2, [r3, #0]
 80060ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060d6:	4622      	mov	r2, r4
 80060d8:	801a      	strh	r2, [r3, #0]
 80060da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060de:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80060e2:	4602      	mov	r2, r0
 80060e4:	701a      	strb	r2, [r3, #0]
 80060e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ea:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80060ee:	460a      	mov	r2, r1
 80060f0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80060f2:	f107 0310 	add.w	r3, r7, #16
 80060f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80060fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060fe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006102:	2200      	movs	r2, #0
 8006104:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006106:	2300      	movs	r3, #0
 8006108:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800610c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006110:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006114:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006118:	8812      	ldrh	r2, [r2, #0]
 800611a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800611c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006120:	3302      	adds	r3, #2
 8006122:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8006126:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800612a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800612e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006132:	8812      	ldrh	r2, [r2, #0]
 8006134:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8006136:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800613a:	3302      	adds	r3, #2
 800613c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8006140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006144:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006148:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800614c:	7812      	ldrb	r2, [r2, #0]
 800614e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006150:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006154:	3301      	adds	r3, #1
 8006156:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800615a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800615e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006162:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8006166:	7812      	ldrb	r2, [r2, #0]
 8006168:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800616a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800616e:	3301      	adds	r3, #1
 8006170:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8006174:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006178:	1d98      	adds	r0, r3, #6
 800617a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800617e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	461a      	mov	r2, r3
 8006186:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800618a:	f000 fa1d 	bl	80065c8 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800618e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006192:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800619c:	4413      	add	r3, r2
 800619e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80061a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80061a6:	2218      	movs	r2, #24
 80061a8:	2100      	movs	r1, #0
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 fa1c 	bl	80065e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80061b0:	233f      	movs	r3, #63	; 0x3f
 80061b2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80061b6:	f44f 7383 	mov.w	r3, #262	; 0x106
 80061ba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80061be:	f107 0310 	add.w	r3, r7, #16
 80061c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80061c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80061ce:	f107 030f 	add.w	r3, r7, #15
 80061d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80061d6:	2301      	movs	r3, #1
 80061d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80061dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80061e0:	2100      	movs	r1, #0
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 fc8a 	bl	8006afc <hci_send_req>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	da01      	bge.n	80061f2 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80061ee:	23ff      	movs	r3, #255	; 0xff
 80061f0:	e004      	b.n	80061fc <aci_gatt_update_char_value+0x148>
  return status;
 80061f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80061fa:	781b      	ldrb	r3, [r3, #0]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006202:	46bd      	mov	sp, r7
 8006204:	bdb0      	pop	{r4, r5, r7, pc}

08006206 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b0cc      	sub	sp, #304	; 0x130
 800620a:	af00      	add	r7, sp, #0
 800620c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006210:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006214:	601a      	str	r2, [r3, #0]
 8006216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800621a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800621e:	4602      	mov	r2, r0
 8006220:	701a      	strb	r2, [r3, #0]
 8006222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006226:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800622a:	460a      	mov	r2, r1
 800622c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800622e:	f107 0310 	add.w	r3, r7, #16
 8006232:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800623a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800623e:	2200      	movs	r2, #0
 8006240:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006242:	2300      	movs	r3, #0
 8006244:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8006248:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800624c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006250:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006254:	7812      	ldrb	r2, [r2, #0]
 8006256:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006258:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800625c:	3301      	adds	r3, #1
 800625e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8006262:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006266:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800626a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800626e:	7812      	ldrb	r2, [r2, #0]
 8006270:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006272:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006276:	3301      	adds	r3, #1
 8006278:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800627c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006280:	1c98      	adds	r0, r3, #2
 8006282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006286:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800628a:	781a      	ldrb	r2, [r3, #0]
 800628c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006290:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006294:	6819      	ldr	r1, [r3, #0]
 8006296:	f000 f997 	bl	80065c8 <Osal_MemCpy>
  index_input += Length;
 800629a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800629e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80062a8:	4413      	add	r3, r2
 80062aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80062ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062b2:	2218      	movs	r2, #24
 80062b4:	2100      	movs	r1, #0
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 f996 	bl	80065e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80062bc:	233f      	movs	r3, #63	; 0x3f
 80062be:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80062c2:	230c      	movs	r3, #12
 80062c4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80062c8:	f107 0310 	add.w	r3, r7, #16
 80062cc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80062d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80062d8:	f107 030f 	add.w	r3, r7, #15
 80062dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80062e0:	2301      	movs	r3, #1
 80062e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80062e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062ea:	2100      	movs	r1, #0
 80062ec:	4618      	mov	r0, r3
 80062ee:	f000 fc05 	bl	8006afc <hci_send_req>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	da01      	bge.n	80062fc <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80062f8:	23ff      	movs	r3, #255	; 0xff
 80062fa:	e004      	b.n	8006306 <aci_hal_write_config_data+0x100>
  return status;
 80062fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006300:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006304:	781b      	ldrb	r3, [r3, #0]
}
 8006306:	4618      	mov	r0, r3
 8006308:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b0cc      	sub	sp, #304	; 0x130
 8006314:	af00      	add	r7, sp, #0
 8006316:	4602      	mov	r2, r0
 8006318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800631c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006320:	701a      	strb	r2, [r3, #0]
 8006322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006326:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800632a:	460a      	mov	r2, r1
 800632c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800632e:	f107 0310 	add.w	r3, r7, #16
 8006332:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800633a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800633e:	2200      	movs	r2, #0
 8006340:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006342:	2300      	movs	r3, #0
 8006344:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8006348:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800634c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006350:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006354:	7812      	ldrb	r2, [r2, #0]
 8006356:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006358:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800635c:	3301      	adds	r3, #1
 800635e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8006362:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006366:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800636a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800636e:	7812      	ldrb	r2, [r2, #0]
 8006370:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006372:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006376:	3301      	adds	r3, #1
 8006378:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800637c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006380:	2218      	movs	r2, #24
 8006382:	2100      	movs	r1, #0
 8006384:	4618      	mov	r0, r3
 8006386:	f000 f92f 	bl	80065e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800638a:	233f      	movs	r3, #63	; 0x3f
 800638c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8006390:	230f      	movs	r3, #15
 8006392:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006396:	f107 0310 	add.w	r3, r7, #16
 800639a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800639e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80063a6:	f107 030f 	add.w	r3, r7, #15
 80063aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80063ae:	2301      	movs	r3, #1
 80063b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80063b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063b8:	2100      	movs	r1, #0
 80063ba:	4618      	mov	r0, r3
 80063bc:	f000 fb9e 	bl	8006afc <hci_send_req>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	da01      	bge.n	80063ca <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80063c6:	23ff      	movs	r3, #255	; 0xff
 80063c8:	e004      	b.n	80063d4 <aci_hal_set_tx_power_level+0xc4>
  return status;
 80063ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ce:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80063d2:	781b      	ldrb	r3, [r3, #0]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b0cc      	sub	sp, #304	; 0x130
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	4602      	mov	r2, r0
 80063e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ea:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80063ee:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80063f0:	f107 0310 	add.w	r3, r7, #16
 80063f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80063f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063fc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006400:	2200      	movs	r2, #0
 8006402:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006404:	2300      	movs	r3, #0
 8006406:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800640a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800640e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006412:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006416:	8812      	ldrh	r2, [r2, #0]
 8006418:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800641a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800641e:	3302      	adds	r3, #2
 8006420:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006424:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006428:	2218      	movs	r2, #24
 800642a:	2100      	movs	r1, #0
 800642c:	4618      	mov	r0, r3
 800642e:	f000 f8db 	bl	80065e8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006432:	233f      	movs	r3, #63	; 0x3f
 8006434:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8006438:	2318      	movs	r3, #24
 800643a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800643e:	f107 0310 	add.w	r3, r7, #16
 8006442:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006446:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800644a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800644e:	f107 030f 	add.w	r3, r7, #15
 8006452:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006456:	2301      	movs	r3, #1
 8006458:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800645c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006460:	2100      	movs	r1, #0
 8006462:	4618      	mov	r0, r3
 8006464:	f000 fb4a 	bl	8006afc <hci_send_req>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	da01      	bge.n	8006472 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800646e:	23ff      	movs	r3, #255	; 0xff
 8006470:	e004      	b.n	800647c <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8006472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006476:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800647a:	781b      	ldrb	r3, [r3, #0]
}
 800647c:	4618      	mov	r0, r3
 800647e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b088      	sub	sp, #32
 800648a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800648c:	2300      	movs	r3, #0
 800648e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006490:	f107 0308 	add.w	r3, r7, #8
 8006494:	2218      	movs	r2, #24
 8006496:	2100      	movs	r1, #0
 8006498:	4618      	mov	r0, r3
 800649a:	f000 f8a5 	bl	80065e8 <Osal_MemSet>
  rq.ogf = 0x03;
 800649e:	2303      	movs	r3, #3
 80064a0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80064a2:	2303      	movs	r3, #3
 80064a4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80064a6:	1dfb      	adds	r3, r7, #7
 80064a8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80064aa:	2301      	movs	r3, #1
 80064ac:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80064ae:	f107 0308 	add.w	r3, r7, #8
 80064b2:	2100      	movs	r1, #0
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 fb21 	bl	8006afc <hci_send_req>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	da01      	bge.n	80064c4 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80064c0:	23ff      	movs	r3, #255	; 0xff
 80064c2:	e000      	b.n	80064c6 <hci_reset+0x40>
  return status;
 80064c4:	79fb      	ldrb	r3, [r7, #7]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3720      	adds	r7, #32
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80064ce:	b590      	push	{r4, r7, lr}
 80064d0:	b0cd      	sub	sp, #308	; 0x134
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	4604      	mov	r4, r0
 80064d6:	4608      	mov	r0, r1
 80064d8:	4611      	mov	r1, r2
 80064da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064de:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80064e2:	4622      	mov	r2, r4
 80064e4:	701a      	strb	r2, [r3, #0]
 80064e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ea:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80064ee:	4602      	mov	r2, r0
 80064f0:	701a      	strb	r2, [r3, #0]
 80064f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f6:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80064fa:	460a      	mov	r2, r1
 80064fc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80064fe:	f107 0310 	add.w	r3, r7, #16
 8006502:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800650a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800650e:	2200      	movs	r2, #0
 8006510:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006512:	2300      	movs	r3, #0
 8006514:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8006518:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800651c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006520:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006524:	7812      	ldrb	r2, [r2, #0]
 8006526:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006528:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800652c:	3301      	adds	r3, #1
 800652e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8006532:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006536:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800653a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800653e:	7812      	ldrb	r2, [r2, #0]
 8006540:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006542:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006546:	3301      	adds	r3, #1
 8006548:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800654c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006550:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006554:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006558:	7812      	ldrb	r2, [r2, #0]
 800655a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800655c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006560:	3301      	adds	r3, #1
 8006562:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006566:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800656a:	2218      	movs	r2, #24
 800656c:	2100      	movs	r1, #0
 800656e:	4618      	mov	r0, r3
 8006570:	f000 f83a 	bl	80065e8 <Osal_MemSet>
  rq.ogf = 0x08;
 8006574:	2308      	movs	r3, #8
 8006576:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800657a:	2331      	movs	r3, #49	; 0x31
 800657c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006580:	f107 0310 	add.w	r3, r7, #16
 8006584:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006588:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800658c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006590:	f107 030f 	add.w	r3, r7, #15
 8006594:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006598:	2301      	movs	r3, #1
 800659a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800659e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80065a2:	2100      	movs	r1, #0
 80065a4:	4618      	mov	r0, r3
 80065a6:	f000 faa9 	bl	8006afc <hci_send_req>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	da01      	bge.n	80065b4 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80065b0:	23ff      	movs	r3, #255	; 0xff
 80065b2:	e004      	b.n	80065be <hci_le_set_default_phy+0xf0>
  return status;
 80065b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80065bc:	781b      	ldrb	r3, [r3, #0]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd90      	pop	{r4, r7, pc}

080065c8 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	68b9      	ldr	r1, [r7, #8]
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f002 f9a5 	bl	8008928 <memcpy>
 80065de:	4603      	mov	r3, r0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	68b9      	ldr	r1, [r7, #8]
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f002 f9a3 	bl	8008944 <memset>
 80065fe:	4603      	mov	r3, r0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8006608:	b480      	push	{r7}
 800660a:	af00      	add	r7, sp, #0
  return;
 800660c:	bf00      	nop
}
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8006616:	b480      	push	{r7}
 8006618:	af00      	add	r7, sp, #0
  return;
 800661a:	bf00      	nop
}
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8006624:	b480      	push	{r7}
 8006626:	af00      	add	r7, sp, #0
  return;
 8006628:	bf00      	nop
}
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8006632:	b480      	push	{r7}
 8006634:	af00      	add	r7, sp, #0
  return;
 8006636:	bf00      	nop
}
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8006640:	b480      	push	{r7}
 8006642:	af00      	add	r7, sp, #0
  return;
 8006644:	bf00      	nop
}
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800664e:	b480      	push	{r7}
 8006650:	af00      	add	r7, sp, #0
  return;
 8006652:	bf00      	nop
}
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800665c:	b480      	push	{r7}
 800665e:	af00      	add	r7, sp, #0
  return;
 8006660:	bf00      	nop
}
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800666a:	b480      	push	{r7}
 800666c:	af00      	add	r7, sp, #0
  return;
 800666e:	bf00      	nop
}
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8006678:	b480      	push	{r7}
 800667a:	af00      	add	r7, sp, #0
  return;
 800667c:	bf00      	nop
}
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8006686:	b480      	push	{r7}
 8006688:	af00      	add	r7, sp, #0
  return;
 800668a:	bf00      	nop
}
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8006694:	b480      	push	{r7}
 8006696:	af00      	add	r7, sp, #0
  return;
 8006698:	bf00      	nop
}
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80066a2:	b480      	push	{r7}
 80066a4:	af00      	add	r7, sp, #0
  return;
 80066a6:	bf00      	nop
}
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 80066b0:	b480      	push	{r7}
 80066b2:	af00      	add	r7, sp, #0
  return;
 80066b4:	bf00      	nop
}
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 80066be:	b480      	push	{r7}
 80066c0:	af00      	add	r7, sp, #0
  return;
 80066c2:	bf00      	nop
}
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80066cc:	b480      	push	{r7}
 80066ce:	af00      	add	r7, sp, #0
  return;
 80066d0:	bf00      	nop
}
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80066da:	b480      	push	{r7}
 80066dc:	af00      	add	r7, sp, #0
  return;
 80066de:	bf00      	nop
}
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80066e8:	b480      	push	{r7}
 80066ea:	af00      	add	r7, sp, #0
  return;
 80066ec:	bf00      	nop
}
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
	...

080066f8 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80066fc:	4b04      	ldr	r3, [pc, #16]	; (8006710 <SVCCTL_Init+0x18>)
 80066fe:	2200      	movs	r2, #0
 8006700:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8006702:	4b04      	ldr	r3, [pc, #16]	; (8006714 <SVCCTL_Init+0x1c>)
 8006704:	2200      	movs	r2, #0
 8006706:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8006708:	f000 f806 	bl	8006718 <SVCCTL_SvcInit>

  return;
 800670c:	bf00      	nop
}
 800670e:	bd80      	pop	{r7, pc}
 8006710:	20000120 	.word	0x20000120
 8006714:	20000140 	.word	0x20000140

08006718 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	af00      	add	r7, sp, #0
  BAS_Init();
 800671c:	f7ff ff74 	bl	8006608 <BAS_Init>

  BLS_Init();
 8006720:	f7ff ff79 	bl	8006616 <BLS_Init>

  CRS_STM_Init();
 8006724:	f7ff ff7e 	bl	8006624 <CRS_STM_Init>

  DIS_Init();
 8006728:	f7ff ff83 	bl	8006632 <DIS_Init>

  EDS_STM_Init();
 800672c:	f7ff ff88 	bl	8006640 <EDS_STM_Init>

  HIDS_Init();
 8006730:	f7ff ff8d 	bl	800664e <HIDS_Init>

  HRS_Init();
 8006734:	f7ff ff92 	bl	800665c <HRS_Init>

  HTS_Init();
 8006738:	f7ff ff97 	bl	800666a <HTS_Init>

  IAS_Init();
 800673c:	f7ff ff9c 	bl	8006678 <IAS_Init>

  LLS_Init();
 8006740:	f7ff ffa1 	bl	8006686 <LLS_Init>

  TPS_Init();
 8006744:	f7ff ffa6 	bl	8006694 <TPS_Init>

  MOTENV_STM_Init();
 8006748:	f7ff ffab 	bl	80066a2 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800674c:	f7ff ffb0 	bl	80066b0 <P2PS_STM_Init>

  ZDD_STM_Init();
 8006750:	f7ff ffb5 	bl	80066be <ZDD_STM_Init>

  OTAS_STM_Init();
 8006754:	f7ff ffba 	bl	80066cc <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8006758:	f7ff ffc6 	bl	80066e8 <BVOPUS_STM_Init>

  MESH_Init();
 800675c:	f7ff ffbd 	bl	80066da <MESH_Init>

  SVCCTL_InitCustomSvc();
 8006760:	f001 fb26 	bl	8007db0 <SVCCTL_InitCustomSvc>
  
  return;
 8006764:	bf00      	nop
}
 8006766:	bd80      	pop	{r7, pc}

08006768 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8006770:	4b09      	ldr	r3, [pc, #36]	; (8006798 <SVCCTL_RegisterSvcHandler+0x30>)
 8006772:	7f1b      	ldrb	r3, [r3, #28]
 8006774:	4619      	mov	r1, r3
 8006776:	4a08      	ldr	r2, [pc, #32]	; (8006798 <SVCCTL_RegisterSvcHandler+0x30>)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800677e:	4b06      	ldr	r3, [pc, #24]	; (8006798 <SVCCTL_RegisterSvcHandler+0x30>)
 8006780:	7f1b      	ldrb	r3, [r3, #28]
 8006782:	3301      	adds	r3, #1
 8006784:	b2da      	uxtb	r2, r3
 8006786:	4b04      	ldr	r3, [pc, #16]	; (8006798 <SVCCTL_RegisterSvcHandler+0x30>)
 8006788:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800678a:	bf00      	nop
}
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	20000120 	.word	0x20000120

0800679c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	3301      	adds	r3, #1
 80067a8:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80067aa:	2300      	movs	r3, #0
 80067ac:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	2bff      	cmp	r3, #255	; 0xff
 80067b4:	d125      	bne.n	8006802 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	3302      	adds	r3, #2
 80067ba:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	881b      	ldrh	r3, [r3, #0]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80067c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067ca:	d118      	bne.n	80067fe <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80067cc:	2300      	movs	r3, #0
 80067ce:	757b      	strb	r3, [r7, #21]
 80067d0:	e00d      	b.n	80067ee <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80067d2:	7d7b      	ldrb	r3, [r7, #21]
 80067d4:	4a1a      	ldr	r2, [pc, #104]	; (8006840 <SVCCTL_UserEvtRx+0xa4>)
 80067d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	4798      	blx	r3
 80067de:	4603      	mov	r3, r0
 80067e0:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80067e2:	7dfb      	ldrb	r3, [r7, #23]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d108      	bne.n	80067fa <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80067e8:	7d7b      	ldrb	r3, [r7, #21]
 80067ea:	3301      	adds	r3, #1
 80067ec:	757b      	strb	r3, [r7, #21]
 80067ee:	4b14      	ldr	r3, [pc, #80]	; (8006840 <SVCCTL_UserEvtRx+0xa4>)
 80067f0:	7f1b      	ldrb	r3, [r3, #28]
 80067f2:	7d7a      	ldrb	r2, [r7, #21]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d3ec      	bcc.n	80067d2 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80067f8:	e002      	b.n	8006800 <SVCCTL_UserEvtRx+0x64>
              break;
 80067fa:	bf00      	nop
          break;
 80067fc:	e000      	b.n	8006800 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80067fe:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8006800:	e000      	b.n	8006804 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8006802:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8006804:	7dfb      	ldrb	r3, [r7, #23]
 8006806:	2b02      	cmp	r3, #2
 8006808:	d00f      	beq.n	800682a <SVCCTL_UserEvtRx+0x8e>
 800680a:	2b02      	cmp	r3, #2
 800680c:	dc10      	bgt.n	8006830 <SVCCTL_UserEvtRx+0x94>
 800680e:	2b00      	cmp	r3, #0
 8006810:	d002      	beq.n	8006818 <SVCCTL_UserEvtRx+0x7c>
 8006812:	2b01      	cmp	r3, #1
 8006814:	d006      	beq.n	8006824 <SVCCTL_UserEvtRx+0x88>
 8006816:	e00b      	b.n	8006830 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 ff79 	bl	8007710 <SVCCTL_App_Notification>
 800681e:	4603      	mov	r3, r0
 8006820:	75bb      	strb	r3, [r7, #22]
      break;
 8006822:	e008      	b.n	8006836 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006824:	2301      	movs	r3, #1
 8006826:	75bb      	strb	r3, [r7, #22]
      break;
 8006828:	e005      	b.n	8006836 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800682a:	2300      	movs	r3, #0
 800682c:	75bb      	strb	r3, [r7, #22]
      break;
 800682e:	e002      	b.n	8006836 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006830:	2301      	movs	r3, #1
 8006832:	75bb      	strb	r3, [r7, #22]
      break;
 8006834:	bf00      	nop
  }

  return (return_status);
 8006836:	7dbb      	ldrb	r3, [r7, #22]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3718      	adds	r7, #24
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	20000120 	.word	0x20000120

08006844 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b088      	sub	sp, #32
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800684c:	f107 030c 	add.w	r3, r7, #12
 8006850:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	2125      	movs	r1, #37	; 0x25
 800685c:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8006860:	f000 fae2 	bl	8006e28 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	330b      	adds	r3, #11
 8006868:	78db      	ldrb	r3, [r3, #3]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3720      	adds	r7, #32
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b088      	sub	sp, #32
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800687a:	f107 030c 	add.w	r3, r7, #12
 800687e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	210f      	movs	r1, #15
 800688a:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800688e:	f000 facb 	bl	8006e28 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	330b      	adds	r3, #11
 8006896:	78db      	ldrb	r3, [r3, #3]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3720      	adds	r7, #32
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b088      	sub	sp, #32
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80068a8:	f107 030c 	add.w	r3, r7, #12
 80068ac:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	210e      	movs	r1, #14
 80068b4:	f64f 4075 	movw	r0, #64629	; 0xfc75
 80068b8:	f000 fab6 	bl	8006e28 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	330b      	adds	r3, #11
 80068c0:	78db      	ldrb	r3, [r3, #3]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3720      	adds	r7, #32
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
	...

080068cc <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80068cc:	b480      	push	{r7}
 80068ce:	b08b      	sub	sp, #44	; 0x2c
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80068d4:	2300      	movs	r3, #0
 80068d6:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80068d8:	2300      	movs	r3, #0
 80068da:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80068dc:	2300      	movs	r3, #0
 80068de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80068e0:	2300      	movs	r3, #0
 80068e2:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80068e4:	2300      	movs	r3, #0
 80068e6:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80068e8:	2300      	movs	r3, #0
 80068ea:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80068ec:	2300      	movs	r3, #0
 80068ee:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80068f0:	2300      	movs	r3, #0
 80068f2:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80068f4:	4b4a      	ldr	r3, [pc, #296]	; (8006a20 <SHCI_GetWirelessFwInfo+0x154>)
 80068f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80068fc:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006906:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a44      	ldr	r2, [pc, #272]	; (8006a24 <SHCI_GetWirelessFwInfo+0x158>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d10f      	bne.n	8006938 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	617b      	str	r3, [r7, #20]
 8006936:	e01a      	b.n	800696e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006940:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8006944:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	0e1b      	lsrs	r3, r3, #24
 8006972:	b2da      	uxtb	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	0c1b      	lsrs	r3, r3, #16
 800697c:	b2da      	uxtb	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006984:	0a1b      	lsrs	r3, r3, #8
 8006986:	b2da      	uxtb	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	091b      	lsrs	r3, r3, #4
 8006990:	b2db      	uxtb	r3, r3
 8006992:	f003 030f 	and.w	r3, r3, #15
 8006996:	b2da      	uxtb	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800699c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	f003 030f 	and.w	r3, r3, #15
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80069aa:	6a3b      	ldr	r3, [r7, #32]
 80069ac:	0e1b      	lsrs	r3, r3, #24
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	0c1b      	lsrs	r3, r3, #16
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	0a1b      	lsrs	r3, r3, #8
 80069c2:	b2da      	uxtb	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80069c8:	6a3b      	ldr	r3, [r7, #32]
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	0e1b      	lsrs	r3, r3, #24
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	0c1b      	lsrs	r3, r3, #16
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	0a1b      	lsrs	r3, r3, #8
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	0e1b      	lsrs	r3, r3, #24
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	0c1b      	lsrs	r3, r3, #16
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	b2da      	uxtb	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	372c      	adds	r7, #44	; 0x2c
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	58004000 	.word	0x58004000
 8006a24:	a94656b9 	.word	0xa94656b9

08006a28 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	4a08      	ldr	r2, [pc, #32]	; (8006a58 <hci_init+0x30>)
 8006a38:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8006a3a:	4a08      	ldr	r2, [pc, #32]	; (8006a5c <hci_init+0x34>)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8006a40:	4806      	ldr	r0, [pc, #24]	; (8006a5c <hci_init+0x34>)
 8006a42:	f000 f973 	bl	8006d2c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 f8d4 	bl	8006bf8 <TlInit>

  return;
 8006a50:	bf00      	nop
}
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	20000340 	.word	0x20000340
 8006a5c:	20000318 	.word	0x20000318

08006a60 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006a66:	4822      	ldr	r0, [pc, #136]	; (8006af0 <hci_user_evt_proc+0x90>)
 8006a68:	f000 fd28 	bl	80074bc <LST_is_empty>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d12b      	bne.n	8006aca <hci_user_evt_proc+0x6a>
 8006a72:	4b20      	ldr	r3, [pc, #128]	; (8006af4 <hci_user_evt_proc+0x94>)
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d027      	beq.n	8006aca <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006a7a:	f107 030c 	add.w	r3, r7, #12
 8006a7e:	4619      	mov	r1, r3
 8006a80:	481b      	ldr	r0, [pc, #108]	; (8006af0 <hci_user_evt_proc+0x90>)
 8006a82:	f000 fdaa 	bl	80075da <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8006a86:	4b1c      	ldr	r3, [pc, #112]	; (8006af8 <hci_user_evt_proc+0x98>)
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00c      	beq.n	8006aa8 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8006a92:	2301      	movs	r3, #1
 8006a94:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006a96:	4b18      	ldr	r3, [pc, #96]	; (8006af8 <hci_user_evt_proc+0x98>)
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	1d3a      	adds	r2, r7, #4
 8006a9c:	4610      	mov	r0, r2
 8006a9e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8006aa0:	793a      	ldrb	r2, [r7, #4]
 8006aa2:	4b14      	ldr	r3, [pc, #80]	; (8006af4 <hci_user_evt_proc+0x94>)
 8006aa4:	701a      	strb	r2, [r3, #0]
 8006aa6:	e002      	b.n	8006aae <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006aa8:	4b12      	ldr	r3, [pc, #72]	; (8006af4 <hci_user_evt_proc+0x94>)
 8006aaa:	2201      	movs	r2, #1
 8006aac:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8006aae:	4b11      	ldr	r3, [pc, #68]	; (8006af4 <hci_user_evt_proc+0x94>)
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d004      	beq.n	8006ac0 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f000 fc03 	bl	80072c4 <TL_MM_EvtDone>
 8006abe:	e004      	b.n	8006aca <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	480a      	ldr	r0, [pc, #40]	; (8006af0 <hci_user_evt_proc+0x90>)
 8006ac6:	f000 fd1b 	bl	8007500 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006aca:	4809      	ldr	r0, [pc, #36]	; (8006af0 <hci_user_evt_proc+0x90>)
 8006acc:	f000 fcf6 	bl	80074bc <LST_is_empty>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d107      	bne.n	8006ae6 <hci_user_evt_proc+0x86>
 8006ad6:	4b07      	ldr	r3, [pc, #28]	; (8006af4 <hci_user_evt_proc+0x94>)
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d003      	beq.n	8006ae6 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8006ade:	4804      	ldr	r0, [pc, #16]	; (8006af0 <hci_user_evt_proc+0x90>)
 8006ae0:	f001 f814 	bl	8007b0c <hci_notify_asynch_evt>
  }


  return;
 8006ae4:	bf00      	nop
 8006ae6:	bf00      	nop
}
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20000148 	.word	0x20000148
 8006af4:	20000154 	.word	0x20000154
 8006af8:	20000318 	.word	0x20000318

08006afc <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b088      	sub	sp, #32
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	460b      	mov	r3, r1
 8006b06:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8006b08:	2000      	movs	r0, #0
 8006b0a:	f000 f8cb 	bl	8006ca4 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	885b      	ldrh	r3, [r3, #2]
 8006b16:	b21b      	sxth	r3, r3
 8006b18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b1c:	b21a      	sxth	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	029b      	lsls	r3, r3, #10
 8006b24:	b21b      	sxth	r3, r3
 8006b26:	4313      	orrs	r3, r2
 8006b28:	b21b      	sxth	r3, r3
 8006b2a:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	b2d9      	uxtb	r1, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	689a      	ldr	r2, [r3, #8]
 8006b36:	8bbb      	ldrh	r3, [r7, #28]
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f000 f88d 	bl	8006c58 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8006b3e:	e04e      	b.n	8006bde <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8006b40:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8006b44:	f000 fff9 	bl	8007b3a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006b48:	e043      	b.n	8006bd2 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8006b4a:	f107 030c 	add.w	r3, r7, #12
 8006b4e:	4619      	mov	r1, r3
 8006b50:	4828      	ldr	r0, [pc, #160]	; (8006bf4 <hci_send_req+0xf8>)
 8006b52:	f000 fd42 	bl	80075da <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	7a5b      	ldrb	r3, [r3, #9]
 8006b5a:	2b0f      	cmp	r3, #15
 8006b5c:	d114      	bne.n	8006b88 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	330b      	adds	r3, #11
 8006b62:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	885b      	ldrh	r3, [r3, #2]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	8bba      	ldrh	r2, [r7, #28]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d104      	bne.n	8006b7a <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	7812      	ldrb	r2, [r2, #0]
 8006b78:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	785b      	ldrb	r3, [r3, #1]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d027      	beq.n	8006bd2 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006b82:	2301      	movs	r3, #1
 8006b84:	77fb      	strb	r3, [r7, #31]
 8006b86:	e024      	b.n	8006bd2 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	330b      	adds	r3, #11
 8006b8c:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	8bba      	ldrh	r2, [r7, #28]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d114      	bne.n	8006bc6 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	7a9b      	ldrb	r3, [r3, #10]
 8006ba0:	3b03      	subs	r3, #3
 8006ba2:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	695a      	ldr	r2, [r3, #20]
 8006ba8:	7dfb      	ldrb	r3, [r7, #23]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	bfa8      	it	ge
 8006bae:	461a      	movge	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6918      	ldr	r0, [r3, #16]
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	1cd9      	adds	r1, r3, #3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	695b      	ldr	r3, [r3, #20]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	f001 feb1 	bl	8008928 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d001      	beq.n	8006bd2 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006bd2:	4808      	ldr	r0, [pc, #32]	; (8006bf4 <hci_send_req+0xf8>)
 8006bd4:	f000 fc72 	bl	80074bc <LST_is_empty>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d0b5      	beq.n	8006b4a <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8006bde:	7ffb      	ldrb	r3, [r7, #31]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d0ad      	beq.n	8006b40 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8006be4:	2001      	movs	r0, #1
 8006be6:	f000 f85d 	bl	8006ca4 <NotifyCmdStatus>

  return 0;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3720      	adds	r7, #32
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	20000338 	.word	0x20000338

08006bf8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8006c00:	480f      	ldr	r0, [pc, #60]	; (8006c40 <TlInit+0x48>)
 8006c02:	f000 fc4b 	bl	800749c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8006c06:	4a0f      	ldr	r2, [pc, #60]	; (8006c44 <TlInit+0x4c>)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8006c0c:	480e      	ldr	r0, [pc, #56]	; (8006c48 <TlInit+0x50>)
 8006c0e:	f000 fc45 	bl	800749c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006c12:	4b0e      	ldr	r3, [pc, #56]	; (8006c4c <TlInit+0x54>)
 8006c14:	2201      	movs	r2, #1
 8006c16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8006c18:	4b0d      	ldr	r3, [pc, #52]	; (8006c50 <TlInit+0x58>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00a      	beq.n	8006c36 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8006c24:	4b0b      	ldr	r3, [pc, #44]	; (8006c54 <TlInit+0x5c>)
 8006c26:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8006c28:	4b09      	ldr	r3, [pc, #36]	; (8006c50 <TlInit+0x58>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f107 0208 	add.w	r2, r7, #8
 8006c30:	4610      	mov	r0, r2
 8006c32:	4798      	blx	r3
  }

  return;
 8006c34:	bf00      	nop
 8006c36:	bf00      	nop
}
 8006c38:	3718      	adds	r7, #24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	20000338 	.word	0x20000338
 8006c44:	20000150 	.word	0x20000150
 8006c48:	20000148 	.word	0x20000148
 8006c4c:	20000154 	.word	0x20000154
 8006c50:	20000318 	.word	0x20000318
 8006c54:	08006ce5 	.word	0x08006ce5

08006c58 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	4603      	mov	r3, r0
 8006c60:	603a      	str	r2, [r7, #0]
 8006c62:	80fb      	strh	r3, [r7, #6]
 8006c64:	460b      	mov	r3, r1
 8006c66:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8006c68:	4b0c      	ldr	r3, [pc, #48]	; (8006c9c <SendCmd+0x44>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	88fa      	ldrh	r2, [r7, #6]
 8006c6e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8006c72:	4b0a      	ldr	r3, [pc, #40]	; (8006c9c <SendCmd+0x44>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	797a      	ldrb	r2, [r7, #5]
 8006c78:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8006c7a:	4b08      	ldr	r3, [pc, #32]	; (8006c9c <SendCmd+0x44>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	330c      	adds	r3, #12
 8006c80:	797a      	ldrb	r2, [r7, #5]
 8006c82:	6839      	ldr	r1, [r7, #0]
 8006c84:	4618      	mov	r0, r3
 8006c86:	f001 fe4f 	bl	8008928 <memcpy>

  hciContext.io.Send(0,0);
 8006c8a:	4b05      	ldr	r3, [pc, #20]	; (8006ca0 <SendCmd+0x48>)
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	2100      	movs	r1, #0
 8006c90:	2000      	movs	r0, #0
 8006c92:	4798      	blx	r3

  return;
 8006c94:	bf00      	nop
}
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	20000150 	.word	0x20000150
 8006ca0:	20000318 	.word	0x20000318

08006ca4 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	4603      	mov	r3, r0
 8006cac:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8006cae:	79fb      	ldrb	r3, [r7, #7]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d108      	bne.n	8006cc6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8006cb4:	4b0a      	ldr	r3, [pc, #40]	; (8006ce0 <NotifyCmdStatus+0x3c>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00d      	beq.n	8006cd8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8006cbc:	4b08      	ldr	r3, [pc, #32]	; (8006ce0 <NotifyCmdStatus+0x3c>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8006cc4:	e008      	b.n	8006cd8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8006cc6:	4b06      	ldr	r3, [pc, #24]	; (8006ce0 <NotifyCmdStatus+0x3c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d004      	beq.n	8006cd8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8006cce:	4b04      	ldr	r3, [pc, #16]	; (8006ce0 <NotifyCmdStatus+0x3c>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2001      	movs	r0, #1
 8006cd4:	4798      	blx	r3
  return;
 8006cd6:	bf00      	nop
 8006cd8:	bf00      	nop
}
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	20000340 	.word	0x20000340

08006ce4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	7a5b      	ldrb	r3, [r3, #9]
 8006cf0:	2b0f      	cmp	r3, #15
 8006cf2:	d003      	beq.n	8006cfc <TlEvtReceived+0x18>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	7a5b      	ldrb	r3, [r3, #9]
 8006cf8:	2b0e      	cmp	r3, #14
 8006cfa:	d107      	bne.n	8006d0c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8006cfc:	6879      	ldr	r1, [r7, #4]
 8006cfe:	4809      	ldr	r0, [pc, #36]	; (8006d24 <TlEvtReceived+0x40>)
 8006d00:	f000 fc24 	bl	800754c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8006d04:	2000      	movs	r0, #0
 8006d06:	f000 ff0d 	bl	8007b24 <hci_cmd_resp_release>
 8006d0a:	e006      	b.n	8006d1a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8006d0c:	6879      	ldr	r1, [r7, #4]
 8006d0e:	4806      	ldr	r0, [pc, #24]	; (8006d28 <TlEvtReceived+0x44>)
 8006d10:	f000 fc1c 	bl	800754c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006d14:	4804      	ldr	r0, [pc, #16]	; (8006d28 <TlEvtReceived+0x44>)
 8006d16:	f000 fef9 	bl	8007b0c <hci_notify_asynch_evt>
  }

  return;
 8006d1a:	bf00      	nop
}
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	20000338 	.word	0x20000338
 8006d28:	20000148 	.word	0x20000148

08006d2c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a05      	ldr	r2, [pc, #20]	; (8006d4c <hci_register_io_bus+0x20>)
 8006d38:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a04      	ldr	r2, [pc, #16]	; (8006d50 <hci_register_io_bus+0x24>)
 8006d3e:	611a      	str	r2, [r3, #16]

  return;
 8006d40:	bf00      	nop
}
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr
 8006d4c:	0800703d 	.word	0x0800703d
 8006d50:	080070a5 	.word	0x080070a5

08006d54 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	4a08      	ldr	r2, [pc, #32]	; (8006d84 <shci_init+0x30>)
 8006d64:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8006d66:	4a08      	ldr	r2, [pc, #32]	; (8006d88 <shci_init+0x34>)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8006d6c:	4806      	ldr	r0, [pc, #24]	; (8006d88 <shci_init+0x34>)
 8006d6e:	f000 f911 	bl	8006f94 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 f894 	bl	8006ea4 <TlInit>

  return;
 8006d7c:	bf00      	nop
}
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	20000364 	.word	0x20000364
 8006d88:	20000344 	.word	0x20000344

08006d8c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006d92:	4822      	ldr	r0, [pc, #136]	; (8006e1c <shci_user_evt_proc+0x90>)
 8006d94:	f000 fb92 	bl	80074bc <LST_is_empty>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d12b      	bne.n	8006df6 <shci_user_evt_proc+0x6a>
 8006d9e:	4b20      	ldr	r3, [pc, #128]	; (8006e20 <shci_user_evt_proc+0x94>)
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d027      	beq.n	8006df6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006da6:	f107 030c 	add.w	r3, r7, #12
 8006daa:	4619      	mov	r1, r3
 8006dac:	481b      	ldr	r0, [pc, #108]	; (8006e1c <shci_user_evt_proc+0x90>)
 8006dae:	f000 fc14 	bl	80075da <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8006db2:	4b1c      	ldr	r3, [pc, #112]	; (8006e24 <shci_user_evt_proc+0x98>)
 8006db4:	69db      	ldr	r3, [r3, #28]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00c      	beq.n	8006dd4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006dc2:	4b18      	ldr	r3, [pc, #96]	; (8006e24 <shci_user_evt_proc+0x98>)
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	1d3a      	adds	r2, r7, #4
 8006dc8:	4610      	mov	r0, r2
 8006dca:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8006dcc:	793a      	ldrb	r2, [r7, #4]
 8006dce:	4b14      	ldr	r3, [pc, #80]	; (8006e20 <shci_user_evt_proc+0x94>)
 8006dd0:	701a      	strb	r2, [r3, #0]
 8006dd2:	e002      	b.n	8006dda <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006dd4:	4b12      	ldr	r3, [pc, #72]	; (8006e20 <shci_user_evt_proc+0x94>)
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8006dda:	4b11      	ldr	r3, [pc, #68]	; (8006e20 <shci_user_evt_proc+0x94>)
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d004      	beq.n	8006dec <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 fa6d 	bl	80072c4 <TL_MM_EvtDone>
 8006dea:	e004      	b.n	8006df6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	4619      	mov	r1, r3
 8006df0:	480a      	ldr	r0, [pc, #40]	; (8006e1c <shci_user_evt_proc+0x90>)
 8006df2:	f000 fb85 	bl	8007500 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006df6:	4809      	ldr	r0, [pc, #36]	; (8006e1c <shci_user_evt_proc+0x90>)
 8006df8:	f000 fb60 	bl	80074bc <LST_is_empty>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d107      	bne.n	8006e12 <shci_user_evt_proc+0x86>
 8006e02:	4b07      	ldr	r3, [pc, #28]	; (8006e20 <shci_user_evt_proc+0x94>)
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8006e0a:	4804      	ldr	r0, [pc, #16]	; (8006e1c <shci_user_evt_proc+0x90>)
 8006e0c:	f7f9 fe97 	bl	8000b3e <shci_notify_asynch_evt>
  }


  return;
 8006e10:	bf00      	nop
 8006e12:	bf00      	nop
}
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	20000160 	.word	0x20000160
 8006e20:	20000170 	.word	0x20000170
 8006e24:	20000344 	.word	0x20000344

08006e28 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60ba      	str	r2, [r7, #8]
 8006e30:	607b      	str	r3, [r7, #4]
 8006e32:	4603      	mov	r3, r0
 8006e34:	81fb      	strh	r3, [r7, #14]
 8006e36:	460b      	mov	r3, r1
 8006e38:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8006e3a:	2000      	movs	r0, #0
 8006e3c:	f000 f864 	bl	8006f08 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8006e40:	4b16      	ldr	r3, [pc, #88]	; (8006e9c <shci_send+0x74>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	89fa      	ldrh	r2, [r7, #14]
 8006e46:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8006e4a:	4b14      	ldr	r3, [pc, #80]	; (8006e9c <shci_send+0x74>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	7b7a      	ldrb	r2, [r7, #13]
 8006e50:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8006e52:	4b12      	ldr	r3, [pc, #72]	; (8006e9c <shci_send+0x74>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	330c      	adds	r3, #12
 8006e58:	7b7a      	ldrb	r2, [r7, #13]
 8006e5a:	68b9      	ldr	r1, [r7, #8]
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f001 fd63 	bl	8008928 <memcpy>

  shciContext.io.Send(0,0);
 8006e62:	4b0f      	ldr	r3, [pc, #60]	; (8006ea0 <shci_send+0x78>)
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	2100      	movs	r1, #0
 8006e68:	2000      	movs	r0, #0
 8006e6a:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8006e6c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8006e70:	f7f9 fe7c 	bl	8000b6c <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f103 0008 	add.w	r0, r3, #8
 8006e7a:	4b08      	ldr	r3, [pc, #32]	; (8006e9c <shci_send+0x74>)
 8006e7c:	6819      	ldr	r1, [r3, #0]
 8006e7e:	4b07      	ldr	r3, [pc, #28]	; (8006e9c <shci_send+0x74>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	789b      	ldrb	r3, [r3, #2]
 8006e84:	3303      	adds	r3, #3
 8006e86:	461a      	mov	r2, r3
 8006e88:	f001 fd4e 	bl	8008928 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8006e8c:	2001      	movs	r0, #1
 8006e8e:	f000 f83b 	bl	8006f08 <Cmd_SetStatus>

  return;
 8006e92:	bf00      	nop
}
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	2000016c 	.word	0x2000016c
 8006ea0:	20000344 	.word	0x20000344

08006ea4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8006eac:	4a10      	ldr	r2, [pc, #64]	; (8006ef0 <TlInit+0x4c>)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8006eb2:	4810      	ldr	r0, [pc, #64]	; (8006ef4 <TlInit+0x50>)
 8006eb4:	f000 faf2 	bl	800749c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8006eb8:	2001      	movs	r0, #1
 8006eba:	f000 f825 	bl	8006f08 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006ebe:	4b0e      	ldr	r3, [pc, #56]	; (8006ef8 <TlInit+0x54>)
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8006ec4:	4b0d      	ldr	r3, [pc, #52]	; (8006efc <TlInit+0x58>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00c      	beq.n	8006ee6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8006ed0:	4b0b      	ldr	r3, [pc, #44]	; (8006f00 <TlInit+0x5c>)
 8006ed2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8006ed4:	4b0b      	ldr	r3, [pc, #44]	; (8006f04 <TlInit+0x60>)
 8006ed6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8006ed8:	4b08      	ldr	r3, [pc, #32]	; (8006efc <TlInit+0x58>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f107 020c 	add.w	r2, r7, #12
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	4798      	blx	r3
  }

  return;
 8006ee4:	bf00      	nop
 8006ee6:	bf00      	nop
}
 8006ee8:	3718      	adds	r7, #24
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	2000016c 	.word	0x2000016c
 8006ef4:	20000160 	.word	0x20000160
 8006ef8:	20000170 	.word	0x20000170
 8006efc:	20000344 	.word	0x20000344
 8006f00:	08006f59 	.word	0x08006f59
 8006f04:	08006f71 	.word	0x08006f71

08006f08 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	4603      	mov	r3, r0
 8006f10:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8006f12:	79fb      	ldrb	r3, [r7, #7]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10b      	bne.n	8006f30 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8006f18:	4b0d      	ldr	r3, [pc, #52]	; (8006f50 <Cmd_SetStatus+0x48>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d003      	beq.n	8006f28 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8006f20:	4b0b      	ldr	r3, [pc, #44]	; (8006f50 <Cmd_SetStatus+0x48>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2000      	movs	r0, #0
 8006f26:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8006f28:	4b0a      	ldr	r3, [pc, #40]	; (8006f54 <Cmd_SetStatus+0x4c>)
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8006f2e:	e00b      	b.n	8006f48 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8006f30:	4b08      	ldr	r3, [pc, #32]	; (8006f54 <Cmd_SetStatus+0x4c>)
 8006f32:	2201      	movs	r2, #1
 8006f34:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8006f36:	4b06      	ldr	r3, [pc, #24]	; (8006f50 <Cmd_SetStatus+0x48>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d004      	beq.n	8006f48 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8006f3e:	4b04      	ldr	r3, [pc, #16]	; (8006f50 <Cmd_SetStatus+0x48>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2001      	movs	r0, #1
 8006f44:	4798      	blx	r3
  return;
 8006f46:	bf00      	nop
 8006f48:	bf00      	nop
}
 8006f4a:	3708      	adds	r7, #8
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	20000364 	.word	0x20000364
 8006f54:	20000168 	.word	0x20000168

08006f58 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8006f60:	2000      	movs	r0, #0
 8006f62:	f7f9 fdf8 	bl	8000b56 <shci_cmd_resp_release>

  return;
 8006f66:	bf00      	nop
}
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
	...

08006f70 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8006f78:	6879      	ldr	r1, [r7, #4]
 8006f7a:	4805      	ldr	r0, [pc, #20]	; (8006f90 <TlUserEvtReceived+0x20>)
 8006f7c:	f000 fae6 	bl	800754c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006f80:	4803      	ldr	r0, [pc, #12]	; (8006f90 <TlUserEvtReceived+0x20>)
 8006f82:	f7f9 fddc 	bl	8000b3e <shci_notify_asynch_evt>

  return;
 8006f86:	bf00      	nop
}
 8006f88:	3708      	adds	r7, #8
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	20000160 	.word	0x20000160

08006f94 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a05      	ldr	r2, [pc, #20]	; (8006fb4 <shci_register_io_bus+0x20>)
 8006fa0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a04      	ldr	r2, [pc, #16]	; (8006fb8 <shci_register_io_bus+0x24>)
 8006fa6:	611a      	str	r2, [r3, #16]

  return;
 8006fa8:	bf00      	nop
}
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr
 8006fb4:	08007151 	.word	0x08007151
 8006fb8:	080071a5 	.word	0x080071a5

08006fbc <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8006fc0:	f001 f946 	bl	8008250 <HW_IPCC_Enable>

  return;
 8006fc4:	bf00      	nop
}
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <TL_Init>:


void TL_Init( void )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8006fcc:	4b10      	ldr	r3, [pc, #64]	; (8007010 <TL_Init+0x48>)
 8006fce:	4a11      	ldr	r2, [pc, #68]	; (8007014 <TL_Init+0x4c>)
 8006fd0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8006fd2:	4b0f      	ldr	r3, [pc, #60]	; (8007010 <TL_Init+0x48>)
 8006fd4:	4a10      	ldr	r2, [pc, #64]	; (8007018 <TL_Init+0x50>)
 8006fd6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8006fd8:	4b0d      	ldr	r3, [pc, #52]	; (8007010 <TL_Init+0x48>)
 8006fda:	4a10      	ldr	r2, [pc, #64]	; (800701c <TL_Init+0x54>)
 8006fdc:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8006fde:	4b0c      	ldr	r3, [pc, #48]	; (8007010 <TL_Init+0x48>)
 8006fe0:	4a0f      	ldr	r2, [pc, #60]	; (8007020 <TL_Init+0x58>)
 8006fe2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8006fe4:	4b0a      	ldr	r3, [pc, #40]	; (8007010 <TL_Init+0x48>)
 8006fe6:	4a0f      	ldr	r2, [pc, #60]	; (8007024 <TL_Init+0x5c>)
 8006fe8:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8006fea:	4b09      	ldr	r3, [pc, #36]	; (8007010 <TL_Init+0x48>)
 8006fec:	4a0e      	ldr	r2, [pc, #56]	; (8007028 <TL_Init+0x60>)
 8006fee:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8006ff0:	4b07      	ldr	r3, [pc, #28]	; (8007010 <TL_Init+0x48>)
 8006ff2:	4a0e      	ldr	r2, [pc, #56]	; (800702c <TL_Init+0x64>)
 8006ff4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8006ff6:	4b06      	ldr	r3, [pc, #24]	; (8007010 <TL_Init+0x48>)
 8006ff8:	4a0d      	ldr	r2, [pc, #52]	; (8007030 <TL_Init+0x68>)
 8006ffa:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8006ffc:	4b04      	ldr	r3, [pc, #16]	; (8007010 <TL_Init+0x48>)
 8006ffe:	4a0d      	ldr	r2, [pc, #52]	; (8007034 <TL_Init+0x6c>)
 8007000:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8007002:	4b03      	ldr	r3, [pc, #12]	; (8007010 <TL_Init+0x48>)
 8007004:	4a0c      	ldr	r2, [pc, #48]	; (8007038 <TL_Init+0x70>)
 8007006:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8007008:	f001 f936 	bl	8008278 <HW_IPCC_Init>

  return;
 800700c:	bf00      	nop
}
 800700e:	bd80      	pop	{r7, pc}
 8007010:	20030000 	.word	0x20030000
 8007014:	20030028 	.word	0x20030028
 8007018:	20030048 	.word	0x20030048
 800701c:	20030058 	.word	0x20030058
 8007020:	20030064 	.word	0x20030064
 8007024:	2003006c 	.word	0x2003006c
 8007028:	20030074 	.word	0x20030074
 800702c:	2003007c 	.word	0x2003007c
 8007030:	20030098 	.word	0x20030098
 8007034:	2003009c 	.word	0x2003009c
 8007038:	200300a8 	.word	0x200300a8

0800703c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8007048:	4811      	ldr	r0, [pc, #68]	; (8007090 <TL_BLE_Init+0x54>)
 800704a:	f000 fa27 	bl	800749c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800704e:	4b11      	ldr	r3, [pc, #68]	; (8007094 <TL_BLE_Init+0x58>)
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	689a      	ldr	r2, [r3, #8]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	68da      	ldr	r2, [r3, #12]
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	4a0c      	ldr	r2, [pc, #48]	; (8007098 <TL_BLE_Init+0x5c>)
 8007068:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	4a08      	ldr	r2, [pc, #32]	; (8007090 <TL_BLE_Init+0x54>)
 800706e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8007070:	f001 f918 	bl	80082a4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a08      	ldr	r2, [pc, #32]	; (800709c <TL_BLE_Init+0x60>)
 800707a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	4a07      	ldr	r2, [pc, #28]	; (80070a0 <TL_BLE_Init+0x64>)
 8007082:	6013      	str	r3, [r2, #0]

  return 0;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	200300c4 	.word	0x200300c4
 8007094:	20030000 	.word	0x20030000
 8007098:	20030a48 	.word	0x20030a48
 800709c:	20000370 	.word	0x20000370
 80070a0:	20000374 	.word	0x20000374

080070a4 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	460b      	mov	r3, r1
 80070ae:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80070b0:	4b09      	ldr	r3, [pc, #36]	; (80070d8 <TL_BLE_SendCmd+0x34>)
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2201      	movs	r2, #1
 80070b8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80070ba:	4b07      	ldr	r3, [pc, #28]	; (80070d8 <TL_BLE_SendCmd+0x34>)
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4619      	mov	r1, r3
 80070c2:	2001      	movs	r0, #1
 80070c4:	f000 f96c 	bl	80073a0 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80070c8:	f001 f8f6 	bl	80082b8 <HW_IPCC_BLE_SendCmd>

  return 0;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	20030000 	.word	0x20030000

080070dc <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80070e2:	e01c      	b.n	800711e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80070e4:	1d3b      	adds	r3, r7, #4
 80070e6:	4619      	mov	r1, r3
 80070e8:	4812      	ldr	r0, [pc, #72]	; (8007134 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80070ea:	f000 fa76 	bl	80075da <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	7a5b      	ldrb	r3, [r3, #9]
 80070f2:	2b0f      	cmp	r3, #15
 80070f4:	d003      	beq.n	80070fe <HW_IPCC_BLE_RxEvtNot+0x22>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	7a5b      	ldrb	r3, [r3, #9]
 80070fa:	2b0e      	cmp	r3, #14
 80070fc:	d105      	bne.n	800710a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4619      	mov	r1, r3
 8007102:	2002      	movs	r0, #2
 8007104:	f000 f94c 	bl	80073a0 <OutputDbgTrace>
 8007108:	e004      	b.n	8007114 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4619      	mov	r1, r3
 800710e:	2003      	movs	r0, #3
 8007110:	f000 f946 	bl	80073a0 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8007114:	4b08      	ldr	r3, [pc, #32]	; (8007138 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	4610      	mov	r0, r2
 800711c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800711e:	4805      	ldr	r0, [pc, #20]	; (8007134 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007120:	f000 f9cc 	bl	80074bc <LST_is_empty>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d0dc      	beq.n	80070e4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800712a:	bf00      	nop
}
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	200300c4 	.word	0x200300c4
 8007138:	20000370 	.word	0x20000370

0800713c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8007140:	4b02      	ldr	r3, [pc, #8]	; (800714c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4798      	blx	r3

  return;
 8007146:	bf00      	nop
}
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	20000374 	.word	0x20000374

08007150 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800715c:	480d      	ldr	r0, [pc, #52]	; (8007194 <TL_SYS_Init+0x44>)
 800715e:	f000 f99d 	bl	800749c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8007162:	4b0d      	ldr	r3, [pc, #52]	; (8007198 <TL_SYS_Init+0x48>)
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	689a      	ldr	r2, [r3, #8]
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	4a08      	ldr	r2, [pc, #32]	; (8007194 <TL_SYS_Init+0x44>)
 8007174:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8007176:	f001 f8c1 	bl	80082fc <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a07      	ldr	r2, [pc, #28]	; (800719c <TL_SYS_Init+0x4c>)
 8007180:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	4a06      	ldr	r2, [pc, #24]	; (80071a0 <TL_SYS_Init+0x50>)
 8007188:	6013      	str	r3, [r2, #0]

  return 0;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	200300cc 	.word	0x200300cc
 8007198:	20030000 	.word	0x20030000
 800719c:	20000378 	.word	0x20000378
 80071a0:	2000037c 	.word	0x2000037c

080071a4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	460b      	mov	r3, r1
 80071ae:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80071b0:	4b09      	ldr	r3, [pc, #36]	; (80071d8 <TL_SYS_SendCmd+0x34>)
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2210      	movs	r2, #16
 80071b8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80071ba:	4b07      	ldr	r3, [pc, #28]	; (80071d8 <TL_SYS_SendCmd+0x34>)
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4619      	mov	r1, r3
 80071c2:	2004      	movs	r0, #4
 80071c4:	f000 f8ec 	bl	80073a0 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80071c8:	f001 f8a2 	bl	8008310 <HW_IPCC_SYS_SendCmd>

  return 0;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	20030000 	.word	0x20030000

080071dc <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80071e0:	4b07      	ldr	r3, [pc, #28]	; (8007200 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4619      	mov	r1, r3
 80071e8:	2005      	movs	r0, #5
 80071ea:	f000 f8d9 	bl	80073a0 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80071ee:	4b05      	ldr	r3, [pc, #20]	; (8007204 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a03      	ldr	r2, [pc, #12]	; (8007200 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80071f4:	68d2      	ldr	r2, [r2, #12]
 80071f6:	6812      	ldr	r2, [r2, #0]
 80071f8:	4610      	mov	r0, r2
 80071fa:	4798      	blx	r3

  return;
 80071fc:	bf00      	nop
}
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	20030000 	.word	0x20030000
 8007204:	20000378 	.word	0x20000378

08007208 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800720e:	e00e      	b.n	800722e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8007210:	1d3b      	adds	r3, r7, #4
 8007212:	4619      	mov	r1, r3
 8007214:	480b      	ldr	r0, [pc, #44]	; (8007244 <HW_IPCC_SYS_EvtNot+0x3c>)
 8007216:	f000 f9e0 	bl	80075da <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4619      	mov	r1, r3
 800721e:	2006      	movs	r0, #6
 8007220:	f000 f8be 	bl	80073a0 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8007224:	4b08      	ldr	r3, [pc, #32]	; (8007248 <HW_IPCC_SYS_EvtNot+0x40>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	4610      	mov	r0, r2
 800722c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800722e:	4805      	ldr	r0, [pc, #20]	; (8007244 <HW_IPCC_SYS_EvtNot+0x3c>)
 8007230:	f000 f944 	bl	80074bc <LST_is_empty>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d0ea      	beq.n	8007210 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800723a:	bf00      	nop
}
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	200300cc 	.word	0x200300cc
 8007248:	2000037c 	.word	0x2000037c

0800724c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8007254:	4817      	ldr	r0, [pc, #92]	; (80072b4 <TL_MM_Init+0x68>)
 8007256:	f000 f921 	bl	800749c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800725a:	4817      	ldr	r0, [pc, #92]	; (80072b8 <TL_MM_Init+0x6c>)
 800725c:	f000 f91e 	bl	800749c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8007260:	4b16      	ldr	r3, [pc, #88]	; (80072bc <TL_MM_Init+0x70>)
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	4a16      	ldr	r2, [pc, #88]	; (80072c0 <TL_MM_Init+0x74>)
 8007266:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8007268:	4b15      	ldr	r3, [pc, #84]	; (80072c0 <TL_MM_Init+0x74>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	6892      	ldr	r2, [r2, #8]
 8007270:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8007272:	4b13      	ldr	r3, [pc, #76]	; (80072c0 <TL_MM_Init+0x74>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	68d2      	ldr	r2, [r2, #12]
 800727a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800727c:	4b10      	ldr	r3, [pc, #64]	; (80072c0 <TL_MM_Init+0x74>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a0c      	ldr	r2, [pc, #48]	; (80072b4 <TL_MM_Init+0x68>)
 8007282:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8007284:	4b0e      	ldr	r3, [pc, #56]	; (80072c0 <TL_MM_Init+0x74>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	6812      	ldr	r2, [r2, #0]
 800728c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800728e:	4b0c      	ldr	r3, [pc, #48]	; (80072c0 <TL_MM_Init+0x74>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	6852      	ldr	r2, [r2, #4]
 8007296:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8007298:	4b09      	ldr	r3, [pc, #36]	; (80072c0 <TL_MM_Init+0x74>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	6912      	ldr	r2, [r2, #16]
 80072a0:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80072a2:	4b07      	ldr	r3, [pc, #28]	; (80072c0 <TL_MM_Init+0x74>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	6952      	ldr	r2, [r2, #20]
 80072aa:	619a      	str	r2, [r3, #24]

  return;
 80072ac:	bf00      	nop
}
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	200300b4 	.word	0x200300b4
 80072b8:	20000368 	.word	0x20000368
 80072bc:	20030000 	.word	0x20030000
 80072c0:	20000380 	.word	0x20000380

080072c4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80072cc:	6879      	ldr	r1, [r7, #4]
 80072ce:	4807      	ldr	r0, [pc, #28]	; (80072ec <TL_MM_EvtDone+0x28>)
 80072d0:	f000 f93c 	bl	800754c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80072d4:	6879      	ldr	r1, [r7, #4]
 80072d6:	2000      	movs	r0, #0
 80072d8:	f000 f862 	bl	80073a0 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80072dc:	4804      	ldr	r0, [pc, #16]	; (80072f0 <TL_MM_EvtDone+0x2c>)
 80072de:	f001 f83d 	bl	800835c <HW_IPCC_MM_SendFreeBuf>

  return;
 80072e2:	bf00      	nop
}
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	20000368 	.word	0x20000368
 80072f0:	080072f5 	.word	0x080072f5

080072f4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80072fa:	e00c      	b.n	8007316 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80072fc:	1d3b      	adds	r3, r7, #4
 80072fe:	4619      	mov	r1, r3
 8007300:	480a      	ldr	r0, [pc, #40]	; (800732c <SendFreeBuf+0x38>)
 8007302:	f000 f96a 	bl	80075da <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8007306:	4b0a      	ldr	r3, [pc, #40]	; (8007330 <SendFreeBuf+0x3c>)
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	4611      	mov	r1, r2
 8007310:	4618      	mov	r0, r3
 8007312:	f000 f91b 	bl	800754c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8007316:	4805      	ldr	r0, [pc, #20]	; (800732c <SendFreeBuf+0x38>)
 8007318:	f000 f8d0 	bl	80074bc <LST_is_empty>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d0ec      	beq.n	80072fc <SendFreeBuf+0x8>
  }

  return;
 8007322:	bf00      	nop
}
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	20000368 	.word	0x20000368
 8007330:	20030000 	.word	0x20030000

08007334 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8007338:	4805      	ldr	r0, [pc, #20]	; (8007350 <TL_TRACES_Init+0x1c>)
 800733a:	f000 f8af 	bl	800749c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800733e:	4b05      	ldr	r3, [pc, #20]	; (8007354 <TL_TRACES_Init+0x20>)
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	4a03      	ldr	r2, [pc, #12]	; (8007350 <TL_TRACES_Init+0x1c>)
 8007344:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8007346:	f001 f83f 	bl	80083c8 <HW_IPCC_TRACES_Init>

  return;
 800734a:	bf00      	nop
}
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	200300bc 	.word	0x200300bc
 8007354:	20030000 	.word	0x20030000

08007358 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800735e:	e008      	b.n	8007372 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8007360:	1d3b      	adds	r3, r7, #4
 8007362:	4619      	mov	r1, r3
 8007364:	4808      	ldr	r0, [pc, #32]	; (8007388 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007366:	f000 f938 	bl	80075da <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4618      	mov	r0, r3
 800736e:	f000 f80d 	bl	800738c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007372:	4805      	ldr	r0, [pc, #20]	; (8007388 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007374:	f000 f8a2 	bl	80074bc <LST_is_empty>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d0f0      	beq.n	8007360 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800737e:	bf00      	nop
}
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	200300bc 	.word	0x200300bc

0800738c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	4603      	mov	r3, r0
 80073a8:	6039      	str	r1, [r7, #0]
 80073aa:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80073ac:	79fb      	ldrb	r3, [r7, #7]
 80073ae:	2b06      	cmp	r3, #6
 80073b0:	d845      	bhi.n	800743e <OutputDbgTrace+0x9e>
 80073b2:	a201      	add	r2, pc, #4	; (adr r2, 80073b8 <OutputDbgTrace+0x18>)
 80073b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b8:	080073d5 	.word	0x080073d5
 80073bc:	080073f9 	.word	0x080073f9
 80073c0:	080073ff 	.word	0x080073ff
 80073c4:	08007413 	.word	0x08007413
 80073c8:	0800741f 	.word	0x0800741f
 80073cc:	08007425 	.word	0x08007425
 80073d0:	08007433 	.word	0x08007433
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	7a5b      	ldrb	r3, [r3, #9]
 80073dc:	2bff      	cmp	r3, #255	; 0xff
 80073de:	d005      	beq.n	80073ec <OutputDbgTrace+0x4c>
 80073e0:	2bff      	cmp	r3, #255	; 0xff
 80073e2:	dc05      	bgt.n	80073f0 <OutputDbgTrace+0x50>
 80073e4:	2b0e      	cmp	r3, #14
 80073e6:	d005      	beq.n	80073f4 <OutputDbgTrace+0x54>
 80073e8:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80073ea:	e001      	b.n	80073f0 <OutputDbgTrace+0x50>
          break;
 80073ec:	bf00      	nop
 80073ee:	e027      	b.n	8007440 <OutputDbgTrace+0xa0>
          break;
 80073f0:	bf00      	nop
 80073f2:	e025      	b.n	8007440 <OutputDbgTrace+0xa0>
          break;
 80073f4:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80073f6:	e023      	b.n	8007440 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80073fc:	e020      	b.n	8007440 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	7a5b      	ldrb	r3, [r3, #9]
 8007406:	2b0e      	cmp	r3, #14
 8007408:	d001      	beq.n	800740e <OutputDbgTrace+0x6e>
 800740a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800740c:	e000      	b.n	8007410 <OutputDbgTrace+0x70>
          break;
 800740e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007410:	e016      	b.n	8007440 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	7a5b      	ldrb	r3, [r3, #9]
 800741a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800741c:	e010      	b.n	8007440 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007422:	e00d      	b.n	8007440 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	7a5b      	ldrb	r3, [r3, #9]
 800742c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800742e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007430:	e006      	b.n	8007440 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	7a5b      	ldrb	r3, [r3, #9]
 800743a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800743c:	e000      	b.n	8007440 <OutputDbgTrace+0xa0>

    default:
      break;
 800743e:	bf00      	nop
  }

  return;
 8007440:	bf00      	nop
}
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	4603      	mov	r3, r0
 8007454:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8007456:	4b0f      	ldr	r3, [pc, #60]	; (8007494 <OTP_Read+0x48>)
 8007458:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800745a:	e002      	b.n	8007462 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	3b08      	subs	r3, #8
 8007460:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	3307      	adds	r3, #7
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	79fa      	ldrb	r2, [r7, #7]
 800746a:	429a      	cmp	r2, r3
 800746c:	d003      	beq.n	8007476 <OTP_Read+0x2a>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	4a09      	ldr	r2, [pc, #36]	; (8007498 <OTP_Read+0x4c>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d1f2      	bne.n	800745c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	3307      	adds	r3, #7
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	79fa      	ldrb	r2, [r7, #7]
 800747e:	429a      	cmp	r2, r3
 8007480:	d001      	beq.n	8007486 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8007482:	2300      	movs	r3, #0
 8007484:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8007486:	68fb      	ldr	r3, [r7, #12]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr
 8007494:	1fff73f8 	.word	0x1fff73f8
 8007498:	1fff7000 	.word	0x1fff7000

0800749c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	605a      	str	r2, [r3, #4]
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80074bc:	b480      	push	{r7}
 80074be:	b087      	sub	sp, #28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074c4:	f3ef 8310 	mrs	r3, PRIMASK
 80074c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80074ca:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80074cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80074ce:	b672      	cpsid	i
}
 80074d0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d102      	bne.n	80074e2 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80074dc:	2301      	movs	r3, #1
 80074de:	75fb      	strb	r3, [r7, #23]
 80074e0:	e001      	b.n	80074e6 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80074e2:	2300      	movs	r3, #0
 80074e4:	75fb      	strb	r3, [r7, #23]
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	f383 8810 	msr	PRIMASK, r3
}
 80074f0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80074f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	371c      	adds	r7, #28
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8007500:	b480      	push	{r7}
 8007502:	b087      	sub	sp, #28
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800750a:	f3ef 8310 	mrs	r3, PRIMASK
 800750e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007510:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007512:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007514:	b672      	cpsid	i
}
 8007516:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	683a      	ldr	r2, [r7, #0]
 8007532:	605a      	str	r2, [r3, #4]
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	f383 8810 	msr	PRIMASK, r3
}
 800753e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007540:	bf00      	nop
 8007542:	371c      	adds	r7, #28
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800754c:	b480      	push	{r7}
 800754e:	b087      	sub	sp, #28
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007556:	f3ef 8310 	mrs	r3, PRIMASK
 800755a:	60fb      	str	r3, [r7, #12]
  return(result);
 800755c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800755e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007560:	b672      	cpsid	i
}
 8007562:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	685a      	ldr	r2, [r3, #4]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	683a      	ldr	r2, [r7, #0]
 8007576:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	683a      	ldr	r2, [r7, #0]
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	f383 8810 	msr	PRIMASK, r3
}
 800758a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800758c:	bf00      	nop
 800758e:	371c      	adds	r7, #28
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8007598:	b480      	push	{r7}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075a0:	f3ef 8310 	mrs	r3, PRIMASK
 80075a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80075a6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80075a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80075aa:	b672      	cpsid	i
}
 80075ac:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	6812      	ldr	r2, [r2, #0]
 80075b6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	6852      	ldr	r2, [r2, #4]
 80075c0:	605a      	str	r2, [r3, #4]
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	f383 8810 	msr	PRIMASK, r3
}
 80075cc:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80075ce:	bf00      	nop
 80075d0:	371c      	adds	r7, #28
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b086      	sub	sp, #24
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075e4:	f3ef 8310 	mrs	r3, PRIMASK
 80075e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80075ea:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80075ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80075ee:	b672      	cpsid	i
}
 80075f0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4618      	mov	r0, r3
 8007600:	f7ff ffca 	bl	8007598 <LST_remove_node>
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	f383 8810 	msr	PRIMASK, r3
}
 800760e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007610:	bf00      	nop
 8007612:	3718      	adds	r7, #24
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8007618:	b480      	push	{r7}
 800761a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800761c:	4b03      	ldr	r3, [pc, #12]	; (800762c <LL_FLASH_GetUDN+0x14>)
 800761e:	681b      	ldr	r3, [r3, #0]
}
 8007620:	4618      	mov	r0, r3
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	1fff7580 	.word	0x1fff7580

08007630 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8007630:	b480      	push	{r7}
 8007632:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8007634:	4b03      	ldr	r3, [pc, #12]	; (8007644 <LL_FLASH_GetDeviceID+0x14>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	b2db      	uxtb	r3, r3
}
 800763a:	4618      	mov	r0, r3
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr
 8007644:	1fff7584 	.word	0x1fff7584

08007648 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8007648:	b480      	push	{r7}
 800764a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800764c:	4b03      	ldr	r3, [pc, #12]	; (800765c <LL_FLASH_GetSTCompanyID+0x14>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	0a1b      	lsrs	r3, r3, #8
}
 8007652:	4618      	mov	r0, r3
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr
 800765c:	1fff7584 	.word	0x1fff7584

08007660 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8007660:	b5b0      	push	{r4, r5, r7, lr}
 8007662:	b08e      	sub	sp, #56	; 0x38
 8007664:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

	UTIL_SEQ_RegTask(1 << CFG_TASK_MY_TASK, UTIL_SEQ_RFU, myTask);
 8007666:	4a25      	ldr	r2, [pc, #148]	; (80076fc <APP_BLE_Init+0x9c>)
 8007668:	2100      	movs	r1, #0
 800766a:	2004      	movs	r0, #4
 800766c:	f000 ffee 	bl	800864c <UTIL_SEQ_RegTask>
	UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 8007670:	2100      	movs	r1, #0
 8007672:	2004      	movs	r0, #4
 8007674:	f001 f80c 	bl	8008690 <UTIL_SEQ_SetTask>

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8007678:	4b21      	ldr	r3, [pc, #132]	; (8007700 <APP_BLE_Init+0xa0>)
 800767a:	1d3c      	adds	r4, r7, #4
 800767c:	461d      	mov	r5, r3
 800767e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800768a:	682b      	ldr	r3, [r5, #0]
 800768c:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800768e:	f000 f8ff 	bl	8007890 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8007692:	2101      	movs	r1, #1
 8007694:	2002      	movs	r0, #2
 8007696:	f000 febf 	bl	8008418 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800769a:	4a1a      	ldr	r2, [pc, #104]	; (8007704 <APP_BLE_Init+0xa4>)
 800769c:	2100      	movs	r1, #0
 800769e:	2002      	movs	r0, #2
 80076a0:	f000 ffd4 	bl	800864c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 80076a4:	1d3b      	adds	r3, r7, #4
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7ff f8cc 	bl	8006844 <SHCI_C2_BLE_Init>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d001      	beq.n	80076b6 <APP_BLE_Init+0x56>
  {
    Error_Handler();
 80076b2:	f7fa fa91 	bl	8001bd8 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80076b6:	f000 f901 	bl	80078bc <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80076ba:	f7ff f81d 	bl	80066f8 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80076be:	4b12      	ldr	r3, [pc, #72]	; (8007708 <APP_BLE_Init+0xa8>)
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80076c6:	4b10      	ldr	r3, [pc, #64]	; (8007708 <APP_BLE_Init+0xa8>)
 80076c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80076cc:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80076ce:	4a0f      	ldr	r2, [pc, #60]	; (800770c <APP_BLE_Init+0xac>)
 80076d0:	2100      	movs	r1, #0
 80076d2:	2001      	movs	r0, #1
 80076d4:	f000 ffba 	bl	800864c <UTIL_SEQ_RegTask>
  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 80076d8:	2006      	movs	r0, #6
 80076da:	f7fe fe80 	bl	80063de <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 80076de:	f000 facd 	bl	8007c7c <Custom_APP_Init>
/* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80076e2:	4b09      	ldr	r3, [pc, #36]	; (8007708 <APP_BLE_Init+0xa8>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80076e8:	4b07      	ldr	r3, [pc, #28]	; (8007708 <APP_BLE_Init+0xa8>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 80076ee:	2001      	movs	r0, #1
 80076f0:	f000 f97e 	bl	80079f0 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 80076f4:	bf00      	nop
}
 80076f6:	3738      	adds	r7, #56	; 0x38
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bdb0      	pop	{r4, r5, r7, pc}
 80076fc:	08007bc1 	.word	0x08007bc1
 8007700:	08009288 	.word	0x08009288
 8007704:	08006a61 	.word	0x08006a61
 8007708:	20000174 	.word	0x20000174
 800770c:	08007ad9 	.word	0x08007ad9

08007710 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b08a      	sub	sp, #40	; 0x28
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	3301      	adds	r3, #1
 800771c:	627b      	str	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 800771e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	2bff      	cmp	r3, #255	; 0xff
 8007724:	d053      	beq.n	80077ce <SVCCTL_App_Notification+0xbe>
 8007726:	2bff      	cmp	r3, #255	; 0xff
 8007728:	f300 80a3 	bgt.w	8007872 <SVCCTL_App_Notification+0x162>
 800772c:	2b05      	cmp	r3, #5
 800772e:	d002      	beq.n	8007736 <SVCCTL_App_Notification+0x26>
 8007730:	2b3e      	cmp	r3, #62	; 0x3e
 8007732:	d020      	beq.n	8007776 <SVCCTL_App_Notification+0x66>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8007734:	e09d      	b.n	8007872 <SVCCTL_App_Notification+0x162>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007738:	3302      	adds	r3, #2
 800773a:	60bb      	str	r3, [r7, #8]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007742:	b29a      	uxth	r2, r3
 8007744:	4b4f      	ldr	r3, [pc, #316]	; (8007884 <SVCCTL_App_Notification+0x174>)
 8007746:	8adb      	ldrh	r3, [r3, #22]
 8007748:	429a      	cmp	r2, r3
 800774a:	d106      	bne.n	800775a <SVCCTL_App_Notification+0x4a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800774c:	4b4d      	ldr	r3, [pc, #308]	; (8007884 <SVCCTL_App_Notification+0x174>)
 800774e:	2200      	movs	r2, #0
 8007750:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007752:	4b4c      	ldr	r3, [pc, #304]	; (8007884 <SVCCTL_App_Notification+0x174>)
 8007754:	2200      	movs	r2, #0
 8007756:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800775a:	2001      	movs	r0, #1
 800775c:	f000 f948 	bl	80079f0 <Adv_Request>
      handleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8007760:	4b49      	ldr	r3, [pc, #292]	; (8007888 <SVCCTL_App_Notification+0x178>)
 8007762:	2201      	movs	r2, #1
 8007764:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007766:	4b47      	ldr	r3, [pc, #284]	; (8007884 <SVCCTL_App_Notification+0x174>)
 8007768:	8ada      	ldrh	r2, [r3, #22]
 800776a:	4b47      	ldr	r3, [pc, #284]	; (8007888 <SVCCTL_App_Notification+0x178>)
 800776c:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&handleNotification);
 800776e:	4846      	ldr	r0, [pc, #280]	; (8007888 <SVCCTL_App_Notification+0x178>)
 8007770:	f000 fa70 	bl	8007c54 <Custom_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8007774:	e080      	b.n	8007878 <SVCCTL_App_Notification+0x168>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8007776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007778:	3302      	adds	r3, #2
 800777a:	613b      	str	r3, [r7, #16]
      switch (meta_evt->subevent)
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d001      	beq.n	8007788 <SVCCTL_App_Notification+0x78>
 8007784:	2b03      	cmp	r3, #3
          break;
 8007786:	e021      	b.n	80077cc <SVCCTL_App_Notification+0xbc>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	3301      	adds	r3, #1
 800778c:	60fb      	str	r3, [r7, #12]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800778e:	4b3d      	ldr	r3, [pc, #244]	; (8007884 <SVCCTL_App_Notification+0x174>)
 8007790:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007794:	2b04      	cmp	r3, #4
 8007796:	d104      	bne.n	80077a2 <SVCCTL_App_Notification+0x92>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8007798:	4b3a      	ldr	r3, [pc, #232]	; (8007884 <SVCCTL_App_Notification+0x174>)
 800779a:	2206      	movs	r2, #6
 800779c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80077a0:	e003      	b.n	80077aa <SVCCTL_App_Notification+0x9a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80077a2:	4b38      	ldr	r3, [pc, #224]	; (8007884 <SVCCTL_App_Notification+0x174>)
 80077a4:	2205      	movs	r2, #5
 80077a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	4b34      	ldr	r3, [pc, #208]	; (8007884 <SVCCTL_App_Notification+0x174>)
 80077b4:	82da      	strh	r2, [r3, #22]
          handleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 80077b6:	4b34      	ldr	r3, [pc, #208]	; (8007888 <SVCCTL_App_Notification+0x178>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80077bc:	4b31      	ldr	r3, [pc, #196]	; (8007884 <SVCCTL_App_Notification+0x174>)
 80077be:	8ada      	ldrh	r2, [r3, #22]
 80077c0:	4b31      	ldr	r3, [pc, #196]	; (8007888 <SVCCTL_App_Notification+0x178>)
 80077c2:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&handleNotification);
 80077c4:	4830      	ldr	r0, [pc, #192]	; (8007888 <SVCCTL_App_Notification+0x178>)
 80077c6:	f000 fa45 	bl	8007c54 <Custom_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80077ca:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 80077cc:	e054      	b.n	8007878 <SVCCTL_App_Notification+0x168>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80077ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d0:	3302      	adds	r3, #2
 80077d2:	623b      	str	r3, [r7, #32]
      switch (blecore_evt->ecode)
 80077d4:	6a3b      	ldr	r3, [r7, #32]
 80077d6:	881b      	ldrh	r3, [r3, #0]
 80077d8:	b29b      	uxth	r3, r3
 80077da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077de:	d042      	beq.n	8007866 <SVCCTL_App_Notification+0x156>
 80077e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077e4:	dc47      	bgt.n	8007876 <SVCCTL_App_Notification+0x166>
 80077e6:	2b04      	cmp	r3, #4
 80077e8:	d03f      	beq.n	800786a <SVCCTL_App_Notification+0x15a>
 80077ea:	2b04      	cmp	r3, #4
 80077ec:	db43      	blt.n	8007876 <SVCCTL_App_Notification+0x166>
 80077ee:	f240 420a 	movw	r2, #1034	; 0x40a
 80077f2:	4293      	cmp	r3, r2
 80077f4:	dc3f      	bgt.n	8007876 <SVCCTL_App_Notification+0x166>
 80077f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077fa:	dd3c      	ble.n	8007876 <SVCCTL_App_Notification+0x166>
 80077fc:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8007800:	2b09      	cmp	r3, #9
 8007802:	d838      	bhi.n	8007876 <SVCCTL_App_Notification+0x166>
 8007804:	a201      	add	r2, pc, #4	; (adr r2, 800780c <SVCCTL_App_Notification+0xfc>)
 8007806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780a:	bf00      	nop
 800780c:	0800785f 	.word	0x0800785f
 8007810:	08007835 	.word	0x08007835
 8007814:	08007877 	.word	0x08007877
 8007818:	08007877 	.word	0x08007877
 800781c:	08007877 	.word	0x08007877
 8007820:	08007877 	.word	0x08007877
 8007824:	0800786f 	.word	0x0800786f
 8007828:	08007877 	.word	0x08007877
 800782c:	08007843 	.word	0x08007843
 8007830:	0800786f 	.word	0x0800786f
            aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8007834:	4b13      	ldr	r3, [pc, #76]	; (8007884 <SVCCTL_App_Notification+0x174>)
 8007836:	8adb      	ldrh	r3, [r3, #22]
 8007838:	4914      	ldr	r1, [pc, #80]	; (800788c <SVCCTL_App_Notification+0x17c>)
 800783a:	4618      	mov	r0, r3
 800783c:	f7fe f826 	bl	800588c <aci_gap_pass_key_resp>
        break;
 8007840:	e016      	b.n	8007870 <SVCCTL_App_Notification+0x160>
            evt_numeric_value = (aci_gap_numeric_comparison_value_event_rp0 *)blecore_evt->data;
 8007842:	6a3b      	ldr	r3, [r7, #32]
 8007844:	3302      	adds	r3, #2
 8007846:	61fb      	str	r3, [r7, #28]
            numeric_value = evt_numeric_value->Numeric_Value;
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800784e:	61bb      	str	r3, [r7, #24]
            aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8007850:	4b0c      	ldr	r3, [pc, #48]	; (8007884 <SVCCTL_App_Notification+0x174>)
 8007852:	8adb      	ldrh	r3, [r3, #22]
 8007854:	2101      	movs	r1, #1
 8007856:	4618      	mov	r0, r3
 8007858:	f7fe f9c2 	bl	8005be0 <aci_gap_numeric_comparison_value_confirm_yesno>
        break;
 800785c:	e008      	b.n	8007870 <SVCCTL_App_Notification+0x160>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 800785e:	6a3b      	ldr	r3, [r7, #32]
 8007860:	3302      	adds	r3, #2
 8007862:	617b      	str	r3, [r7, #20]
        break;
 8007864:	e004      	b.n	8007870 <SVCCTL_App_Notification+0x160>
      break;
 8007866:	bf00      	nop
 8007868:	e005      	b.n	8007876 <SVCCTL_App_Notification+0x166>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800786a:	bf00      	nop
 800786c:	e003      	b.n	8007876 <SVCCTL_App_Notification+0x166>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800786e:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007870:	e001      	b.n	8007876 <SVCCTL_App_Notification+0x166>
      break;
 8007872:	bf00      	nop
 8007874:	e000      	b.n	8007878 <SVCCTL_App_Notification+0x168>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007876:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8007878:	2301      	movs	r3, #1
}
 800787a:	4618      	mov	r0, r3
 800787c:	3728      	adds	r7, #40	; 0x28
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	20000174 	.word	0x20000174
 8007888:	2000038c 	.word	0x2000038c
 800788c:	0001b207 	.word	0x0001b207

08007890 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8007896:	4b06      	ldr	r3, [pc, #24]	; (80078b0 <Ble_Tl_Init+0x20>)
 8007898:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800789a:	4b06      	ldr	r3, [pc, #24]	; (80078b4 <Ble_Tl_Init+0x24>)
 800789c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800789e:	463b      	mov	r3, r7
 80078a0:	4619      	mov	r1, r3
 80078a2:	4805      	ldr	r0, [pc, #20]	; (80078b8 <Ble_Tl_Init+0x28>)
 80078a4:	f7ff f8c0 	bl	8006a28 <hci_init>

  return;
 80078a8:	bf00      	nop
}
 80078aa:	3708      	adds	r7, #8
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	200300d4 	.word	0x200300d4
 80078b4:	08007b89 	.word	0x08007b89
 80078b8:	08007b51 	.word	0x08007b51

080078bc <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 80078bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078be:	b08d      	sub	sp, #52	; 0x34
 80078c0:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 80078c2:	2300      	movs	r3, #0
 80078c4:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 80078c6:	f7fe fdde 	bl	8006486 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 80078ca:	f000 f8c1 	bl	8007a50 <BleGetBdAddress>
 80078ce:	6178      	str	r0, [r7, #20]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80078d0:	697a      	ldr	r2, [r7, #20]
 80078d2:	2106      	movs	r1, #6
 80078d4:	2000      	movs	r0, #0
 80078d6:	f7fe fc96 	bl	8006206 <aci_hal_write_config_data>
#endif

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 80078da:	4a40      	ldr	r2, [pc, #256]	; (80079dc <Ble_Hci_Gap_Gatt_Init+0x120>)
 80078dc:	2110      	movs	r1, #16
 80078de:	2018      	movs	r0, #24
 80078e0:	f7fe fc91 	bl	8006206 <aci_hal_write_config_data>

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 80078e4:	4a3e      	ldr	r2, [pc, #248]	; (80079e0 <Ble_Hci_Gap_Gatt_Init+0x124>)
 80078e6:	2110      	movs	r1, #16
 80078e8:	2008      	movs	r0, #8
 80078ea:	f7fe fc8c 	bl	8006206 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80078ee:	2118      	movs	r1, #24
 80078f0:	2001      	movs	r0, #1
 80078f2:	f7fe fd0d 	bl	8006310 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 80078f6:	f7fe f9da 	bl	8005cae <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 80078fa:	2300      	movs	r3, #0
 80078fc:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80078fe:	7cfb      	ldrb	r3, [r7, #19]
 8007900:	f043 0301 	orr.w	r3, r3, #1
 8007904:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8007906:	7cfb      	ldrb	r3, [r7, #19]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d01d      	beq.n	8007948 <Ble_Hci_Gap_Gatt_Init+0x8c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800790c:	4b35      	ldr	r3, [pc, #212]	; (80079e4 <Ble_Hci_Gap_Gatt_Init+0x128>)
 800790e:	60fb      	str	r3, [r7, #12]
    aci_gap_init(role,
 8007910:	f107 020a 	add.w	r2, r7, #10
 8007914:	7cf8      	ldrb	r0, [r7, #19]
 8007916:	1dbb      	adds	r3, r7, #6
 8007918:	9301      	str	r3, [sp, #4]
 800791a:	f107 0308 	add.w	r3, r7, #8
 800791e:	9300      	str	r3, [sp, #0]
 8007920:	4613      	mov	r3, r2
 8007922:	2208      	movs	r2, #8
 8007924:	2100      	movs	r1, #0
 8007926:	f7fe f818 	bl	800595a <aci_gap_init>
                 CFG_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle,
                 &gap_dev_name_char_handle,
                 &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800792a:	897c      	ldrh	r4, [r7, #10]
 800792c:	893d      	ldrh	r5, [r7, #8]
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	f7f8 fc26 	bl	8000180 <strlen>
 8007934:	4603      	mov	r3, r0
 8007936:	b2da      	uxtb	r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	4613      	mov	r3, r2
 800793e:	2200      	movs	r2, #0
 8007940:	4629      	mov	r1, r5
 8007942:	4620      	mov	r0, r4
 8007944:	f7fe fbb6 	bl	80060b4 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8007948:	8978      	ldrh	r0, [r7, #10]
 800794a:	88f9      	ldrh	r1, [r7, #6]
 800794c:	1d3b      	adds	r3, r7, #4
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	2302      	movs	r3, #2
 8007952:	2200      	movs	r2, #0
 8007954:	f7fe fbae 	bl	80060b4 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8007958:	2202      	movs	r2, #2
 800795a:	2102      	movs	r1, #2
 800795c:	2000      	movs	r0, #0
 800795e:	f7fe fdb6 	bl	80064ce <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8007962:	4b21      	ldr	r3, [pc, #132]	; (80079e8 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8007964:	2201      	movs	r2, #1
 8007966:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8007968:	4b1f      	ldr	r3, [pc, #124]	; (80079e8 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	4618      	mov	r0, r3
 800796e:	f7fd fe75 	bl	800565c <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8007972:	4b1d      	ldr	r3, [pc, #116]	; (80079e8 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8007974:	2201      	movs	r2, #1
 8007976:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8007978:	4b1b      	ldr	r3, [pc, #108]	; (80079e8 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800797a:	2208      	movs	r2, #8
 800797c:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800797e:	4b1a      	ldr	r3, [pc, #104]	; (80079e8 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8007980:	2210      	movs	r2, #16
 8007982:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8007984:	4b18      	ldr	r3, [pc, #96]	; (80079e8 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8007986:	2200      	movs	r2, #0
 8007988:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800798a:	4b17      	ldr	r3, [pc, #92]	; (80079e8 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800798c:	4a17      	ldr	r2, [pc, #92]	; (80079ec <Ble_Hci_Gap_Gatt_Init+0x130>)
 800798e:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8007990:	4b15      	ldr	r3, [pc, #84]	; (80079e8 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8007992:	2200      	movs	r2, #0
 8007994:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8007996:	4b14      	ldr	r3, [pc, #80]	; (80079e8 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8007998:	789c      	ldrb	r4, [r3, #2]
 800799a:	4b13      	ldr	r3, [pc, #76]	; (80079e8 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800799c:	785d      	ldrb	r5, [r3, #1]
 800799e:	4b12      	ldr	r3, [pc, #72]	; (80079e8 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 80079a0:	791b      	ldrb	r3, [r3, #4]
 80079a2:	4a11      	ldr	r2, [pc, #68]	; (80079e8 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 80079a4:	7952      	ldrb	r2, [r2, #5]
 80079a6:	4910      	ldr	r1, [pc, #64]	; (80079e8 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 80079a8:	78c9      	ldrb	r1, [r1, #3]
 80079aa:	480f      	ldr	r0, [pc, #60]	; (80079e8 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 80079ac:	6880      	ldr	r0, [r0, #8]
 80079ae:	2600      	movs	r6, #0
 80079b0:	9604      	str	r6, [sp, #16]
 80079b2:	9003      	str	r0, [sp, #12]
 80079b4:	9102      	str	r1, [sp, #8]
 80079b6:	9201      	str	r2, [sp, #4]
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	2300      	movs	r3, #0
 80079bc:	2201      	movs	r2, #1
 80079be:	4629      	mov	r1, r5
 80079c0:	4620      	mov	r0, r4
 80079c2:	f7fd fe9f 	bl	8005704 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80079c6:	4b08      	ldr	r3, [pc, #32]	; (80079e8 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 80079c8:	789b      	ldrb	r3, [r3, #2]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <Ble_Hci_Gap_Gatt_Init+0x116>
   {
     aci_gap_configure_whitelist();
 80079ce:	f7fe f8e3 	bl	8005b98 <aci_gap_configure_whitelist>
   }
}
 80079d2:	bf00      	nop
 80079d4:	371c      	adds	r7, #28
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079da:	bf00      	nop
 80079dc:	080094f0 	.word	0x080094f0
 80079e0:	08009500 	.word	0x08009500
 80079e4:	080092bc 	.word	0x080092bc
 80079e8:	20000174 	.word	0x20000174
 80079ec:	0001b207 	.word	0x0001b207

080079f0 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b08c      	sub	sp, #48	; 0x30
 80079f4:	af08      	add	r7, sp, #32
 80079f6:	4603      	mov	r3, r0
 80079f8:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80079fa:	2392      	movs	r3, #146	; 0x92
 80079fc:	73fb      	strb	r3, [r7, #15]

    BleApplicationContext.Device_Connection_Status = New_Status;
 80079fe:	4a12      	ldr	r2, [pc, #72]	; (8007a48 <Adv_Request+0x58>)
 8007a00:	79fb      	ldrb	r3, [r7, #7]
 8007a02:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8007a06:	2300      	movs	r3, #0
 8007a08:	9306      	str	r3, [sp, #24]
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	9305      	str	r3, [sp, #20]
 8007a0e:	2300      	movs	r3, #0
 8007a10:	9304      	str	r3, [sp, #16]
 8007a12:	2300      	movs	r3, #0
 8007a14:	9303      	str	r3, [sp, #12]
 8007a16:	2300      	movs	r3, #0
 8007a18:	9302      	str	r3, [sp, #8]
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	9301      	str	r3, [sp, #4]
 8007a1e:	2300      	movs	r3, #0
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	2300      	movs	r3, #0
 8007a24:	22a0      	movs	r2, #160	; 0xa0
 8007a26:	2180      	movs	r1, #128	; 0x80
 8007a28:	2000      	movs	r0, #0
 8007a2a:	f7fd fd1d 	bl	8005468 <aci_gap_set_discoverable>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	73fb      	strb	r3, [r7, #15]
        0,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(ad_data), (uint8_t*) ad_data);
 8007a32:	4906      	ldr	r1, [pc, #24]	; (8007a4c <Adv_Request+0x5c>)
 8007a34:	2008      	movs	r0, #8
 8007a36:	f7fe f83d 	bl	8005ab4 <aci_gap_update_adv_data>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	73fb      	strb	r3, [r7, #15]
    else
    {
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
    }

  return;
 8007a3e:	bf00      	nop
}
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	20000174 	.word	0x20000174
 8007a4c:	20000010 	.word	0x20000010

08007a50 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8007a56:	f7ff fddf 	bl	8007618 <LL_FLASH_GetUDN>
 8007a5a:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a62:	d023      	beq.n	8007aac <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8007a64:	f7ff fdf0 	bl	8007648 <LL_FLASH_GetSTCompanyID>
 8007a68:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8007a6a:	f7ff fde1 	bl	8007630 <LL_FLASH_GetDeviceID>
 8007a6e:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	b2da      	uxtb	r2, r3
 8007a74:	4b16      	ldr	r3, [pc, #88]	; (8007ad0 <BleGetBdAddress+0x80>)
 8007a76:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	0a1b      	lsrs	r3, r3, #8
 8007a7c:	b2da      	uxtb	r2, r3
 8007a7e:	4b14      	ldr	r3, [pc, #80]	; (8007ad0 <BleGetBdAddress+0x80>)
 8007a80:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	b2da      	uxtb	r2, r3
 8007a86:	4b12      	ldr	r3, [pc, #72]	; (8007ad0 <BleGetBdAddress+0x80>)
 8007a88:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	4b10      	ldr	r3, [pc, #64]	; (8007ad0 <BleGetBdAddress+0x80>)
 8007a90:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	0a1b      	lsrs	r3, r3, #8
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	4b0d      	ldr	r3, [pc, #52]	; (8007ad0 <BleGetBdAddress+0x80>)
 8007a9a:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	0c1b      	lsrs	r3, r3, #16
 8007aa0:	b2da      	uxtb	r2, r3
 8007aa2:	4b0b      	ldr	r3, [pc, #44]	; (8007ad0 <BleGetBdAddress+0x80>)
 8007aa4:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8007aa6:	4b0a      	ldr	r3, [pc, #40]	; (8007ad0 <BleGetBdAddress+0x80>)
 8007aa8:	617b      	str	r3, [r7, #20]
 8007aaa:	e00b      	b.n	8007ac4 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8007aac:	2000      	movs	r0, #0
 8007aae:	f7ff fccd 	bl	800744c <OTP_Read>
 8007ab2:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d002      	beq.n	8007ac0 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	617b      	str	r3, [r7, #20]
 8007abe:	e001      	b.n	8007ac4 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8007ac0:	4b04      	ldr	r3, [pc, #16]	; (8007ad4 <BleGetBdAddress+0x84>)
 8007ac2:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 8007ac4:	697b      	ldr	r3, [r7, #20]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	20000384 	.word	0x20000384
 8007ad4:	080094e8 	.word	0x080094e8

08007ad8 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8007ade:	4b0a      	ldr	r3, [pc, #40]	; (8007b08 <Adv_Cancel+0x30>)
 8007ae0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ae4:	2b05      	cmp	r3, #5
 8007ae6:	d00a      	beq.n	8007afe <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 8007aec:	f7fd fc98 	bl	8005420 <aci_gap_set_non_discoverable>
 8007af0:	4603      	mov	r3, r0
 8007af2:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007af4:	4b04      	ldr	r3, [pc, #16]	; (8007b08 <Adv_Cancel+0x30>)
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 8007afc:	bf00      	nop
 8007afe:	bf00      	nop
}
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	20000174 	.word	0x20000174

08007b0c <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8007b14:	2100      	movs	r1, #0
 8007b16:	2002      	movs	r0, #2
 8007b18:	f000 fdba 	bl	8008690 <UTIL_SEQ_SetTask>
  return;
 8007b1c:	bf00      	nop
}
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007b2c:	2001      	movs	r0, #1
 8007b2e:	f000 fe1b 	bl	8008768 <UTIL_SEQ_SetEvt>
  return;
 8007b32:	bf00      	nop
}
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b082      	sub	sp, #8
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007b42:	2001      	movs	r0, #1
 8007b44:	f000 fe30 	bl	80087a8 <UTIL_SEQ_WaitEvt>
  return;
 8007b48:	bf00      	nop
}
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	3308      	adds	r3, #8
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7fe fe1a 	bl	800679c <SVCCTL_UserEvtRx>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8007b6c:	7afb      	ldrb	r3, [r7, #11]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2201      	movs	r2, #1
 8007b76:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8007b78:	e003      	b.n	8007b82 <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	701a      	strb	r2, [r3, #0]
  return;
 8007b80:	bf00      	nop
}
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	4603      	mov	r3, r0
 8007b90:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8007b92:	79fb      	ldrb	r3, [r7, #7]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d002      	beq.n	8007b9e <BLE_StatusNot+0x16>
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d006      	beq.n	8007baa <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8007b9c:	e00b      	b.n	8007bb6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007b9e:	2307      	movs	r3, #7
 8007ba0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f000 fda0 	bl	80086e8 <UTIL_SEQ_PauseTask>
      break;
 8007ba8:	e005      	b.n	8007bb6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007baa:	2307      	movs	r3, #7
 8007bac:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f000 fdba 	bl	8008728 <UTIL_SEQ_ResumeTask>
      break;
 8007bb4:	bf00      	nop
  }
  return;
 8007bb6:	bf00      	nop
}
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
	...

08007bc0 <myTask>:
static void Custom_Mycharnotify_Update_Char(void);
static void Custom_Mycharnotify_Send_Notification(void);

/* USER CODE BEGIN PFP */
	void myTask(void)
	{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	af00      	add	r7, sp, #0

		sprintf(NOTIFY_MSG, "Button Pressed!\r\n");
 8007bc4:	4911      	ldr	r1, [pc, #68]	; (8007c0c <myTask+0x4c>)
 8007bc6:	4812      	ldr	r0, [pc, #72]	; (8007c10 <myTask+0x50>)
 8007bc8:	f000 fec4 	bl	8008954 <siprintf>

		//Read the Button State
		if(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8007bcc:	2110      	movs	r1, #16
 8007bce:	4811      	ldr	r0, [pc, #68]	; (8007c14 <myTask+0x54>)
 8007bd0:	f7fa fdbc 	bl	800274c <HAL_GPIO_ReadPin>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d111      	bne.n	8007bfe <myTask+0x3e>
		{

			UART_Transmit((uint8_t*)NOTIFY_MSG, strlen(NOTIFY_MSG));
 8007bda:	480d      	ldr	r0, [pc, #52]	; (8007c10 <myTask+0x50>)
 8007bdc:	f7f8 fad0 	bl	8000180 <strlen>
 8007be0:	4603      	mov	r3, r0
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	4619      	mov	r1, r3
 8007be6:	480a      	ldr	r0, [pc, #40]	; (8007c10 <myTask+0x50>)
 8007be8:	f7f9 ffda 	bl	8001ba0 <UART_Transmit>

			UpdateCharData[0] ^= 0x1;
 8007bec:	4b0a      	ldr	r3, [pc, #40]	; (8007c18 <myTask+0x58>)
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	f083 0301 	eor.w	r3, r3, #1
 8007bf4:	b2da      	uxtb	r2, r3
 8007bf6:	4b08      	ldr	r3, [pc, #32]	; (8007c18 <myTask+0x58>)
 8007bf8:	701a      	strb	r2, [r3, #0]
			Custom_Mycharnotify_Update_Char();		//Depends on Characteristic long name from CubeMX
 8007bfa:	f000 f847 	bl	8007c8c <Custom_Mycharnotify_Update_Char>
		}
		UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 8007bfe:	2100      	movs	r1, #0
 8007c00:	2004      	movs	r0, #4
 8007c02:	f000 fd45 	bl	8008690 <UTIL_SEQ_SetTask>
	}
 8007c06:	bf00      	nop
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	080092c8 	.word	0x080092c8
 8007c10:	20000390 	.word	0x20000390
 8007c14:	48000800 	.word	0x48000800
 8007c18:	200003b4 	.word	0x200003b4

08007c1c <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch(pNotification->Custom_Evt_Opcode)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d006      	beq.n	8007c3a <Custom_STM_App_Notification+0x1e>
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	dc06      	bgt.n	8007c3e <Custom_STM_App_Notification+0x22>
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d006      	beq.n	8007c42 <Custom_STM_App_Notification+0x26>
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d006      	beq.n	8007c46 <Custom_STM_App_Notification+0x2a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8007c38:	e001      	b.n	8007c3e <Custom_STM_App_Notification+0x22>
      break;
 8007c3a:	bf00      	nop
 8007c3c:	e004      	b.n	8007c48 <Custom_STM_App_Notification+0x2c>
      break;
 8007c3e:	bf00      	nop
 8007c40:	e002      	b.n	8007c48 <Custom_STM_App_Notification+0x2c>
      break;
 8007c42:	bf00      	nop
 8007c44:	e000      	b.n	8007c48 <Custom_STM_App_Notification+0x2c>
      break;
 8007c46:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8007c48:	bf00      	nop
}
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch(pNotification->Custom_Evt_Opcode)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d002      	beq.n	8007c6a <Custom_APP_Notification+0x16>
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d002      	beq.n	8007c6e <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8007c68:	e002      	b.n	8007c70 <Custom_APP_Notification+0x1c>
      break;
 8007c6a:	bf00      	nop
 8007c6c:	e000      	b.n	8007c70 <Custom_APP_Notification+0x1c>
      break;
 8007c6e:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8007c70:	bf00      	nop
}
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8007c80:	bf00      	nop
}
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
	...

08007c8c <Custom_Mycharnotify_Update_Char>:
 *
 *************************************************************/

  /* LED_SVC */
void Custom_Mycharnotify_Update_Char(void) /* Property Read */
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	af00      	add	r7, sp, #0
  Custom_STM_App_Update_Char(CUSTOM_STM_MYCHARNOTIFY, (uint8_t *)UpdateCharData);
 8007c90:	4902      	ldr	r1, [pc, #8]	; (8007c9c <Custom_Mycharnotify_Update_Char+0x10>)
 8007c92:	2001      	movs	r0, #1
 8007c94:	f000 f92e 	bl	8007ef4 <Custom_STM_App_Update_Char>
  /* USER CODE BEGIN Mycharnotify_UC*/

  /* USER CODE END Mycharnotify_UC*/
  return;
 8007c98:	bf00      	nop
}
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	200003b4 	.word	0x200003b4

08007ca0 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b08c      	sub	sp, #48	; 0x30
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	62bb      	str	r3, [r7, #40]	; 0x28

  switch(event_pckt->evt)
 8007cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	2bff      	cmp	r3, #255	; 0xff
 8007cba:	d169      	bne.n	8007d90 <Custom_STM_Event_Handler+0xf0>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8007cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbe:	3302      	adds	r3, #2
 8007cc0:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blecore_evt->ecode)
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc4:	881b      	ldrh	r3, [r3, #0]
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	f640 4214 	movw	r2, #3092	; 0xc14
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d059      	beq.n	8007d84 <Custom_STM_Event_Handler+0xe4>
 8007cd0:	f640 4214 	movw	r2, #3092	; 0xc14
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	dc57      	bgt.n	8007d88 <Custom_STM_Event_Handler+0xe8>
 8007cd8:	f640 4201 	movw	r2, #3073	; 0xc01
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d003      	beq.n	8007ce8 <Custom_STM_Event_Handler+0x48>
 8007ce0:	f640 4213 	movw	r2, #3091	; 0xc13
 8007ce4:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8007ce6:	e052      	b.n	8007d8e <Custom_STM_Event_Handler+0xee>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cea:	3302      	adds	r3, #2
 8007cec:	623b      	str	r3, [r7, #32]
          if(attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8007cee:	6a3b      	ldr	r3, [r7, #32]
 8007cf0:	885b      	ldrh	r3, [r3, #2]
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	4b2a      	ldr	r3, [pc, #168]	; (8007da0 <Custom_STM_Event_Handler+0x100>)
 8007cf8:	889b      	ldrh	r3, [r3, #4]
 8007cfa:	3302      	adds	r3, #2
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d119      	bne.n	8007d34 <Custom_STM_Event_Handler+0x94>
            return_value = SVCCTL_EvtAckFlowEnable;
 8007d00:	2301      	movs	r3, #1
 8007d02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch(attribute_modified->Attr_Data[0])
 8007d06:	6a3b      	ldr	r3, [r7, #32]
 8007d08:	7a1b      	ldrb	r3, [r3, #8]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d002      	beq.n	8007d14 <Custom_STM_Event_Handler+0x74>
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d008      	beq.n	8007d24 <Custom_STM_Event_Handler+0x84>
              break;
 8007d12:	e036      	b.n	8007d82 <Custom_STM_Event_Handler+0xe2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT;
 8007d14:	2302      	movs	r3, #2
 8007d16:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8007d18:	f107 030c 	add.w	r3, r7, #12
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7ff ff7d 	bl	8007c1c <Custom_STM_App_Notification>
                break;
 8007d22:	e02e      	b.n	8007d82 <Custom_STM_Event_Handler+0xe2>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT;
 8007d24:	2301      	movs	r3, #1
 8007d26:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8007d28:	f107 030c 	add.w	r3, r7, #12
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7ff ff75 	bl	8007c1c <Custom_STM_App_Notification>
                break;
 8007d32:	e026      	b.n	8007d82 <Custom_STM_Event_Handler+0xe2>
          else if(attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8007d34:	6a3b      	ldr	r3, [r7, #32]
 8007d36:	885b      	ldrh	r3, [r3, #2]
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	4b18      	ldr	r3, [pc, #96]	; (8007da0 <Custom_STM_Event_Handler+0x100>)
 8007d3e:	885b      	ldrh	r3, [r3, #2]
 8007d40:	3301      	adds	r3, #1
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d122      	bne.n	8007d8c <Custom_STM_Event_Handler+0xec>
            return_value = SVCCTL_EvtAckFlowEnable;
 8007d46:	2301      	movs	r3, #1
 8007d48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            uint8_t x = attribute_modified->Attr_Data[0];
 8007d4c:	6a3b      	ldr	r3, [r7, #32]
 8007d4e:	7a1b      	ldrb	r3, [r3, #8]
 8007d50:	77fb      	strb	r3, [r7, #31]
            sprintf(BLE_MSG, "Write Value: %x\r\n", x);
 8007d52:	7ffb      	ldrb	r3, [r7, #31]
 8007d54:	461a      	mov	r2, r3
 8007d56:	4913      	ldr	r1, [pc, #76]	; (8007da4 <Custom_STM_Event_Handler+0x104>)
 8007d58:	4813      	ldr	r0, [pc, #76]	; (8007da8 <Custom_STM_Event_Handler+0x108>)
 8007d5a:	f000 fdfb 	bl	8008954 <siprintf>
            UART_Transmit((uint8_t*)BLE_MSG, strlen(BLE_MSG));
 8007d5e:	4812      	ldr	r0, [pc, #72]	; (8007da8 <Custom_STM_Event_Handler+0x108>)
 8007d60:	f7f8 fa0e 	bl	8000180 <strlen>
 8007d64:	4603      	mov	r3, r0
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	4619      	mov	r1, r3
 8007d6a:	480f      	ldr	r0, [pc, #60]	; (8007da8 <Custom_STM_Event_Handler+0x108>)
 8007d6c:	f7f9 ff18 	bl	8001ba0 <UART_Transmit>
			if (attribute_modified->Attr_Data[0] == 0x22)
 8007d70:	6a3b      	ldr	r3, [r7, #32]
 8007d72:	7a1b      	ldrb	r3, [r3, #8]
 8007d74:	2b22      	cmp	r3, #34	; 0x22
 8007d76:	d109      	bne.n	8007d8c <Custom_STM_Event_Handler+0xec>
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8007d78:	2101      	movs	r1, #1
 8007d7a:	480c      	ldr	r0, [pc, #48]	; (8007dac <Custom_STM_Event_Handler+0x10c>)
 8007d7c:	f7fa fd16 	bl	80027ac <HAL_GPIO_TogglePin>
          break;
 8007d80:	e004      	b.n	8007d8c <Custom_STM_Event_Handler+0xec>
 8007d82:	e003      	b.n	8007d8c <Custom_STM_Event_Handler+0xec>
          break;
 8007d84:	bf00      	nop
 8007d86:	e004      	b.n	8007d92 <Custom_STM_Event_Handler+0xf2>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8007d88:	bf00      	nop
 8007d8a:	e002      	b.n	8007d92 <Custom_STM_Event_Handler+0xf2>
          break;
 8007d8c:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007d8e:	e000      	b.n	8007d92 <Custom_STM_Event_Handler+0xf2>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8007d90:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8007d92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}/* end Custom_STM_Event_Handler */
 8007d96:	4618      	mov	r0, r3
 8007d98:	3730      	adds	r7, #48	; 0x30
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	20000158 	.word	0x20000158
 8007da4:	080092dc 	.word	0x080092dc
 8007da8:	200004ac 	.word	0x200004ac
 8007dac:	48000400 	.word	0x48000400

08007db0 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b08a      	sub	sp, #40	; 0x28
 8007db4:	af06      	add	r7, sp, #24
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8007db6:	484b      	ldr	r0, [pc, #300]	; (8007ee4 <SVCCTL_InitCustomSvc+0x134>)
 8007db8:	f7fe fcd6 	bl	8006768 <SVCCTL_RegisterSvcHandler>
   *                                2 for myCharNotify +
   *                                1 for myCharNotify configuration descriptor +
   *                              = 6
   */

  COPY_LED_SVC_UUID(uuid.Char_UUID_128);
 8007dbc:	238f      	movs	r3, #143	; 0x8f
 8007dbe:	703b      	strb	r3, [r7, #0]
 8007dc0:	23e5      	movs	r3, #229	; 0xe5
 8007dc2:	707b      	strb	r3, [r7, #1]
 8007dc4:	23b3      	movs	r3, #179	; 0xb3
 8007dc6:	70bb      	strb	r3, [r7, #2]
 8007dc8:	23d5      	movs	r3, #213	; 0xd5
 8007dca:	70fb      	strb	r3, [r7, #3]
 8007dcc:	232e      	movs	r3, #46	; 0x2e
 8007dce:	713b      	strb	r3, [r7, #4]
 8007dd0:	237f      	movs	r3, #127	; 0x7f
 8007dd2:	717b      	strb	r3, [r7, #5]
 8007dd4:	234a      	movs	r3, #74	; 0x4a
 8007dd6:	71bb      	strb	r3, [r7, #6]
 8007dd8:	2398      	movs	r3, #152	; 0x98
 8007dda:	71fb      	strb	r3, [r7, #7]
 8007ddc:	232a      	movs	r3, #42	; 0x2a
 8007dde:	723b      	strb	r3, [r7, #8]
 8007de0:	2348      	movs	r3, #72	; 0x48
 8007de2:	727b      	strb	r3, [r7, #9]
 8007de4:	237a      	movs	r3, #122	; 0x7a
 8007de6:	72bb      	strb	r3, [r7, #10]
 8007de8:	23cc      	movs	r3, #204	; 0xcc
 8007dea:	72fb      	strb	r3, [r7, #11]
 8007dec:	2300      	movs	r3, #0
 8007dee:	733b      	strb	r3, [r7, #12]
 8007df0:	2300      	movs	r3, #0
 8007df2:	737b      	strb	r3, [r7, #13]
 8007df4:	2300      	movs	r3, #0
 8007df6:	73bb      	strb	r3, [r7, #14]
 8007df8:	2300      	movs	r3, #0
 8007dfa:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_service(UUID_TYPE_128,
 8007dfc:	4639      	mov	r1, r7
 8007dfe:	4b3a      	ldr	r3, [pc, #232]	; (8007ee8 <SVCCTL_InitCustomSvc+0x138>)
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	2306      	movs	r3, #6
 8007e04:	2201      	movs	r2, #1
 8007e06:	2002      	movs	r0, #2
 8007e08:	f7fd ff76 	bl	8005cf8 <aci_gatt_add_service>
                       &(CustomContext.CustomLed_SvcHdle));

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 8007e0c:	2319      	movs	r3, #25
 8007e0e:	703b      	strb	r3, [r7, #0]
 8007e10:	23ed      	movs	r3, #237	; 0xed
 8007e12:	707b      	strb	r3, [r7, #1]
 8007e14:	2382      	movs	r3, #130	; 0x82
 8007e16:	70bb      	strb	r3, [r7, #2]
 8007e18:	23ae      	movs	r3, #174	; 0xae
 8007e1a:	70fb      	strb	r3, [r7, #3]
 8007e1c:	23ed      	movs	r3, #237	; 0xed
 8007e1e:	713b      	strb	r3, [r7, #4]
 8007e20:	2321      	movs	r3, #33	; 0x21
 8007e22:	717b      	strb	r3, [r7, #5]
 8007e24:	234c      	movs	r3, #76	; 0x4c
 8007e26:	71bb      	strb	r3, [r7, #6]
 8007e28:	239d      	movs	r3, #157	; 0x9d
 8007e2a:	71fb      	strb	r3, [r7, #7]
 8007e2c:	2341      	movs	r3, #65	; 0x41
 8007e2e:	723b      	strb	r3, [r7, #8]
 8007e30:	2345      	movs	r3, #69	; 0x45
 8007e32:	727b      	strb	r3, [r7, #9]
 8007e34:	2322      	movs	r3, #34	; 0x22
 8007e36:	72bb      	strb	r3, [r7, #10]
 8007e38:	238e      	movs	r3, #142	; 0x8e
 8007e3a:	72fb      	strb	r3, [r7, #11]
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	733b      	strb	r3, [r7, #12]
 8007e40:	2300      	movs	r3, #0
 8007e42:	737b      	strb	r3, [r7, #13]
 8007e44:	2300      	movs	r3, #0
 8007e46:	73bb      	strb	r3, [r7, #14]
 8007e48:	2300      	movs	r3, #0
 8007e4a:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomLed_SvcHdle,
 8007e4c:	4b26      	ldr	r3, [pc, #152]	; (8007ee8 <SVCCTL_InitCustomSvc+0x138>)
 8007e4e:	8818      	ldrh	r0, [r3, #0]
 8007e50:	2301      	movs	r3, #1
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	463a      	mov	r2, r7
 8007e56:	4925      	ldr	r1, [pc, #148]	; (8007eec <SVCCTL_InitCustomSvc+0x13c>)
 8007e58:	9105      	str	r1, [sp, #20]
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	9104      	str	r1, [sp, #16]
 8007e5e:	2110      	movs	r1, #16
 8007e60:	9103      	str	r1, [sp, #12]
 8007e62:	2101      	movs	r1, #1
 8007e64:	9102      	str	r1, [sp, #8]
 8007e66:	2100      	movs	r1, #0
 8007e68:	9101      	str	r1, [sp, #4]
 8007e6a:	2108      	movs	r1, #8
 8007e6c:	9100      	str	r1, [sp, #0]
 8007e6e:	2102      	movs	r1, #2
 8007e70:	f7fe f818 	bl	8005ea4 <aci_gatt_add_char>
                    CHAR_VALUE_LEN_CONSTANT,
                    &(CustomContext.CustomMycharwriteHdle));
  /**
   *  myCharNotify
   */
  COPY_MYCHARNOTIFY_UUID(uuid.Char_UUID_128);
 8007e74:	2319      	movs	r3, #25
 8007e76:	703b      	strb	r3, [r7, #0]
 8007e78:	23ed      	movs	r3, #237	; 0xed
 8007e7a:	707b      	strb	r3, [r7, #1]
 8007e7c:	2382      	movs	r3, #130	; 0x82
 8007e7e:	70bb      	strb	r3, [r7, #2]
 8007e80:	23ae      	movs	r3, #174	; 0xae
 8007e82:	70fb      	strb	r3, [r7, #3]
 8007e84:	23ed      	movs	r3, #237	; 0xed
 8007e86:	713b      	strb	r3, [r7, #4]
 8007e88:	2321      	movs	r3, #33	; 0x21
 8007e8a:	717b      	strb	r3, [r7, #5]
 8007e8c:	234c      	movs	r3, #76	; 0x4c
 8007e8e:	71bb      	strb	r3, [r7, #6]
 8007e90:	239d      	movs	r3, #157	; 0x9d
 8007e92:	71fb      	strb	r3, [r7, #7]
 8007e94:	2341      	movs	r3, #65	; 0x41
 8007e96:	723b      	strb	r3, [r7, #8]
 8007e98:	2345      	movs	r3, #69	; 0x45
 8007e9a:	727b      	strb	r3, [r7, #9]
 8007e9c:	2322      	movs	r3, #34	; 0x22
 8007e9e:	72bb      	strb	r3, [r7, #10]
 8007ea0:	238e      	movs	r3, #142	; 0x8e
 8007ea2:	72fb      	strb	r3, [r7, #11]
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	733b      	strb	r3, [r7, #12]
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	737b      	strb	r3, [r7, #13]
 8007eac:	2300      	movs	r3, #0
 8007eae:	73bb      	strb	r3, [r7, #14]
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomLed_SvcHdle,
 8007eb4:	4b0c      	ldr	r3, [pc, #48]	; (8007ee8 <SVCCTL_InitCustomSvc+0x138>)
 8007eb6:	8818      	ldrh	r0, [r3, #0]
 8007eb8:	2301      	movs	r3, #1
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	463a      	mov	r2, r7
 8007ebe:	490c      	ldr	r1, [pc, #48]	; (8007ef0 <SVCCTL_InitCustomSvc+0x140>)
 8007ec0:	9105      	str	r1, [sp, #20]
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	9104      	str	r1, [sp, #16]
 8007ec6:	2110      	movs	r1, #16
 8007ec8:	9103      	str	r1, [sp, #12]
 8007eca:	2107      	movs	r1, #7
 8007ecc:	9102      	str	r1, [sp, #8]
 8007ece:	2100      	movs	r1, #0
 8007ed0:	9101      	str	r1, [sp, #4]
 8007ed2:	2110      	movs	r1, #16
 8007ed4:	9100      	str	r1, [sp, #0]
 8007ed6:	2102      	movs	r1, #2
 8007ed8:	f7fd ffe4 	bl	8005ea4 <aci_gatt_add_char>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8007edc:	bf00      	nop
}
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	08007ca1 	.word	0x08007ca1
 8007ee8:	20000158 	.word	0x20000158
 8007eec:	2000015a 	.word	0x2000015a
 8007ef0:	2000015c 	.word	0x2000015c

08007ef4 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af02      	add	r7, sp, #8
 8007efa:	4603      	mov	r3, r0
 8007efc:	6039      	str	r1, [r7, #0]
 8007efe:	71fb      	strb	r3, [r7, #7]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8007f00:	2392      	movs	r3, #146	; 0x92
 8007f02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch(CharOpcode)
 8007f04:	79fb      	ldrb	r3, [r7, #7]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d002      	beq.n	8007f10 <Custom_STM_App_Update_Char+0x1c>
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d00e      	beq.n	8007f2c <Custom_STM_App_Update_Char+0x38>

      /* USER CODE END CUSTOM_STM_Service_1_Char_2*/
      break;

    default:
      break;
 8007f0e:	e01b      	b.n	8007f48 <Custom_STM_App_Update_Char+0x54>
      result = aci_gatt_update_char_value(CustomContext.CustomLed_SvcHdle,
 8007f10:	4b10      	ldr	r3, [pc, #64]	; (8007f54 <Custom_STM_App_Update_Char+0x60>)
 8007f12:	8818      	ldrh	r0, [r3, #0]
 8007f14:	4b0f      	ldr	r3, [pc, #60]	; (8007f54 <Custom_STM_App_Update_Char+0x60>)
 8007f16:	8859      	ldrh	r1, [r3, #2]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	4613      	mov	r3, r2
 8007f20:	2200      	movs	r2, #0
 8007f22:	f7fe f8c7 	bl	80060b4 <aci_gatt_update_char_value>
 8007f26:	4603      	mov	r3, r0
 8007f28:	73fb      	strb	r3, [r7, #15]
      break;
 8007f2a:	e00d      	b.n	8007f48 <Custom_STM_App_Update_Char+0x54>
      result = aci_gatt_update_char_value(CustomContext.CustomLed_SvcHdle,
 8007f2c:	4b09      	ldr	r3, [pc, #36]	; (8007f54 <Custom_STM_App_Update_Char+0x60>)
 8007f2e:	8818      	ldrh	r0, [r3, #0]
 8007f30:	4b08      	ldr	r3, [pc, #32]	; (8007f54 <Custom_STM_App_Update_Char+0x60>)
 8007f32:	8899      	ldrh	r1, [r3, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f7fe f8b9 	bl	80060b4 <aci_gatt_update_char_value>
 8007f42:	4603      	mov	r3, r0
 8007f44:	73fb      	strb	r3, [r7, #15]
      break;
 8007f46:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return result;
 8007f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	20000158 	.word	0x20000158

08007f58 <LL_PWR_EnableBootC2>:
{
 8007f58:	b480      	push	{r7}
 8007f5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8007f5c:	4b05      	ldr	r3, [pc, #20]	; (8007f74 <LL_PWR_EnableBootC2+0x1c>)
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	4a04      	ldr	r2, [pc, #16]	; (8007f74 <LL_PWR_EnableBootC2+0x1c>)
 8007f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f66:	60d3      	str	r3, [r2, #12]
}
 8007f68:	bf00      	nop
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	58000400 	.word	0x58000400

08007f78 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8007f80:	4b06      	ldr	r3, [pc, #24]	; (8007f9c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8007f82:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8007f86:	4905      	ldr	r1, [pc, #20]	; (8007f9c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8007f90:	bf00      	nop
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr
 8007f9c:	58000800 	.word	0x58000800

08007fa0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8007fa8:	4b05      	ldr	r3, [pc, #20]	; (8007fc0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007faa:	6a1a      	ldr	r2, [r3, #32]
 8007fac:	4904      	ldr	r1, [pc, #16]	; (8007fc0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	620b      	str	r3, [r1, #32]
}
 8007fb4:	bf00      	nop
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr
 8007fc0:	58000800 	.word	0x58000800

08007fc4 <LL_AHB3_GRP1_EnableClock>:
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8007fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007fd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8007fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fe0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
}
 8007fea:	bf00      	nop
 8007fec:	3714      	adds	r7, #20
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b085      	sub	sp, #20
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8007ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008002:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8008006:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4313      	orrs	r3, r2
 800800e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8008012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008016:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4013      	ands	r3, r2
 800801e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008020:	68fb      	ldr	r3, [r7, #12]
}
 8008022:	bf00      	nop
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr

0800802e <LL_C1_IPCC_EnableIT_TXF>:
{
 800802e:	b480      	push	{r7}
 8008030:	b083      	sub	sp, #12
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	601a      	str	r2, [r3, #0]
}
 8008042:	bf00      	nop
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <LL_C1_IPCC_EnableIT_RXO>:
{
 800804e:	b480      	push	{r7}
 8008050:	b083      	sub	sp, #12
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f043 0201 	orr.w	r2, r3, #1
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	601a      	str	r2, [r3, #0]
}
 8008062:	bf00      	nop
 8008064:	370c      	adds	r7, #12
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr

0800806e <LL_C1_IPCC_EnableTransmitChannel>:
{
 800806e:	b480      	push	{r7}
 8008070:	b083      	sub	sp, #12
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
 8008076:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	685a      	ldr	r2, [r3, #4]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	041b      	lsls	r3, r3, #16
 8008080:	43db      	mvns	r3, r3
 8008082:	401a      	ands	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	605a      	str	r2, [r3, #4]
}
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685a      	ldr	r2, [r3, #4]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	041b      	lsls	r3, r3, #16
 80080a6:	431a      	orrs	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	605a      	str	r2, [r3, #4]
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <LL_C1_IPCC_EnableReceiveChannel>:
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	685a      	ldr	r2, [r3, #4]
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	43db      	mvns	r3, r3
 80080ca:	401a      	ands	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	605a      	str	r2, [r3, #4]
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <LL_C1_IPCC_ClearFlag_CHx>:
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	683a      	ldr	r2, [r7, #0]
 80080ea:	609a      	str	r2, [r3, #8]
}
 80080ec:	bf00      	nop
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <LL_C1_IPCC_SetFlag_CHx>:
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	041a      	lsls	r2, r3, #16
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	609a      	str	r2, [r3, #8]
}
 800810a:	bf00      	nop
 800810c:	370c      	adds	r7, #12
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr

08008116 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8008116:	b480      	push	{r7}
 8008118:	b083      	sub	sp, #12
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	68da      	ldr	r2, [r3, #12]
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	4013      	ands	r3, r2
 8008128:	683a      	ldr	r2, [r7, #0]
 800812a:	429a      	cmp	r2, r3
 800812c:	d101      	bne.n	8008132 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800812e:	2301      	movs	r3, #1
 8008130:	e000      	b.n	8008134 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	69da      	ldr	r2, [r3, #28]
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	4013      	ands	r3, r2
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	429a      	cmp	r2, r3
 8008156:	d101      	bne.n	800815c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8008158:	2301      	movs	r3, #1
 800815a:	e000      	b.n	800815e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	370c      	adds	r7, #12
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
	...

0800816c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800816c:	b580      	push	{r7, lr}
 800816e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8008170:	2102      	movs	r1, #2
 8008172:	4819      	ldr	r0, [pc, #100]	; (80081d8 <HW_IPCC_Rx_Handler+0x6c>)
 8008174:	f7ff ffe4 	bl	8008140 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d009      	beq.n	8008192 <HW_IPCC_Rx_Handler+0x26>
 800817e:	4b16      	ldr	r3, [pc, #88]	; (80081d8 <HW_IPCC_Rx_Handler+0x6c>)
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	43db      	mvns	r3, r3
 8008184:	f003 0302 	and.w	r3, r3, #2
 8008188:	2b00      	cmp	r3, #0
 800818a:	d002      	beq.n	8008192 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800818c:	f000 f8da 	bl	8008344 <HW_IPCC_SYS_EvtHandler>
 8008190:	e01f      	b.n	80081d2 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8008192:	2101      	movs	r1, #1
 8008194:	4810      	ldr	r0, [pc, #64]	; (80081d8 <HW_IPCC_Rx_Handler+0x6c>)
 8008196:	f7ff ffd3 	bl	8008140 <LL_C2_IPCC_IsActiveFlag_CHx>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d008      	beq.n	80081b2 <HW_IPCC_Rx_Handler+0x46>
 80081a0:	4b0d      	ldr	r3, [pc, #52]	; (80081d8 <HW_IPCC_Rx_Handler+0x6c>)
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	f003 0301 	and.w	r3, r3, #1
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d102      	bne.n	80081b2 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 80081ac:	f000 f88e 	bl	80082cc <HW_IPCC_BLE_EvtHandler>
 80081b0:	e00f      	b.n	80081d2 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80081b2:	2108      	movs	r1, #8
 80081b4:	4808      	ldr	r0, [pc, #32]	; (80081d8 <HW_IPCC_Rx_Handler+0x6c>)
 80081b6:	f7ff ffc3 	bl	8008140 <LL_C2_IPCC_IsActiveFlag_CHx>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d009      	beq.n	80081d4 <HW_IPCC_Rx_Handler+0x68>
 80081c0:	4b05      	ldr	r3, [pc, #20]	; (80081d8 <HW_IPCC_Rx_Handler+0x6c>)
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	43db      	mvns	r3, r3
 80081c6:	f003 0308 	and.w	r3, r3, #8
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d002      	beq.n	80081d4 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80081ce:	f000 f905 	bl	80083dc <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80081d2:	bf00      	nop
 80081d4:	bf00      	nop
}
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	58000c00 	.word	0x58000c00

080081dc <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80081e0:	2102      	movs	r1, #2
 80081e2:	481a      	ldr	r0, [pc, #104]	; (800824c <HW_IPCC_Tx_Handler+0x70>)
 80081e4:	f7ff ff97 	bl	8008116 <LL_C1_IPCC_IsActiveFlag_CHx>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d109      	bne.n	8008202 <HW_IPCC_Tx_Handler+0x26>
 80081ee:	4b17      	ldr	r3, [pc, #92]	; (800824c <HW_IPCC_Tx_Handler+0x70>)
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	43db      	mvns	r3, r3
 80081f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80081fc:	f000 f896 	bl	800832c <HW_IPCC_SYS_CmdEvtHandler>
 8008200:	e020      	b.n	8008244 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8008202:	2108      	movs	r1, #8
 8008204:	4811      	ldr	r0, [pc, #68]	; (800824c <HW_IPCC_Tx_Handler+0x70>)
 8008206:	f7ff ff86 	bl	8008116 <LL_C1_IPCC_IsActiveFlag_CHx>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d109      	bne.n	8008224 <HW_IPCC_Tx_Handler+0x48>
 8008210:	4b0e      	ldr	r3, [pc, #56]	; (800824c <HW_IPCC_Tx_Handler+0x70>)
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	43db      	mvns	r3, r3
 8008216:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d002      	beq.n	8008224 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 800821e:	f000 f8bf 	bl	80083a0 <HW_IPCC_MM_FreeBufHandler>
 8008222:	e00f      	b.n	8008244 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8008224:	2120      	movs	r1, #32
 8008226:	4809      	ldr	r0, [pc, #36]	; (800824c <HW_IPCC_Tx_Handler+0x70>)
 8008228:	f7ff ff75 	bl	8008116 <LL_C1_IPCC_IsActiveFlag_CHx>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d109      	bne.n	8008246 <HW_IPCC_Tx_Handler+0x6a>
 8008232:	4b06      	ldr	r3, [pc, #24]	; (800824c <HW_IPCC_Tx_Handler+0x70>)
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	43db      	mvns	r3, r3
 8008238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800823c:	2b00      	cmp	r3, #0
 800823e:	d002      	beq.n	8008246 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8008240:	f000 f850 	bl	80082e4 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8008244:	bf00      	nop
 8008246:	bf00      	nop
}
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	58000c00 	.word	0x58000c00

08008250 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8008254:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008258:	f7ff fecd 	bl	8007ff6 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800825c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008260:	f7ff fe8a 	bl	8007f78 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8008264:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008268:	f7ff fe9a 	bl	8007fa0 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800826c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800826e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8008270:	f7ff fe72 	bl	8007f58 <LL_PWR_EnableBootC2>

  return;
 8008274:	bf00      	nop
}
 8008276:	bd80      	pop	{r7, pc}

08008278 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8008278:	b580      	push	{r7, lr}
 800827a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800827c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008280:	f7ff fea0 	bl	8007fc4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8008284:	4806      	ldr	r0, [pc, #24]	; (80082a0 <HW_IPCC_Init+0x28>)
 8008286:	f7ff fee2 	bl	800804e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800828a:	4805      	ldr	r0, [pc, #20]	; (80082a0 <HW_IPCC_Init+0x28>)
 800828c:	f7ff fecf 	bl	800802e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8008290:	202c      	movs	r0, #44	; 0x2c
 8008292:	f7fa f8a6 	bl	80023e2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8008296:	202d      	movs	r0, #45	; 0x2d
 8008298:	f7fa f8a3 	bl	80023e2 <HAL_NVIC_EnableIRQ>

  return;
 800829c:	bf00      	nop
}
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	58000c00 	.word	0x58000c00

080082a4 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80082a8:	2101      	movs	r1, #1
 80082aa:	4802      	ldr	r0, [pc, #8]	; (80082b4 <HW_IPCC_BLE_Init+0x10>)
 80082ac:	f7ff ff04 	bl	80080b8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80082b0:	bf00      	nop
}
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	58000c00 	.word	0x58000c00

080082b8 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80082bc:	2101      	movs	r1, #1
 80082be:	4802      	ldr	r0, [pc, #8]	; (80082c8 <HW_IPCC_BLE_SendCmd+0x10>)
 80082c0:	f7ff ff1a 	bl	80080f8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80082c4:	bf00      	nop
}
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	58000c00 	.word	0x58000c00

080082cc <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80082d0:	f7fe ff04 	bl	80070dc <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80082d4:	2101      	movs	r1, #1
 80082d6:	4802      	ldr	r0, [pc, #8]	; (80082e0 <HW_IPCC_BLE_EvtHandler+0x14>)
 80082d8:	f7ff ff00 	bl	80080dc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80082dc:	bf00      	nop
}
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	58000c00 	.word	0x58000c00

080082e4 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80082e8:	2120      	movs	r1, #32
 80082ea:	4803      	ldr	r0, [pc, #12]	; (80082f8 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80082ec:	f7ff fed2 	bl	8008094 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80082f0:	f7fe ff24 	bl	800713c <HW_IPCC_BLE_AclDataAckNot>

  return;
 80082f4:	bf00      	nop
}
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	58000c00 	.word	0x58000c00

080082fc <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008300:	2102      	movs	r1, #2
 8008302:	4802      	ldr	r0, [pc, #8]	; (800830c <HW_IPCC_SYS_Init+0x10>)
 8008304:	f7ff fed8 	bl	80080b8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008308:	bf00      	nop
}
 800830a:	bd80      	pop	{r7, pc}
 800830c:	58000c00 	.word	0x58000c00

08008310 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8008310:	b580      	push	{r7, lr}
 8008312:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008314:	2102      	movs	r1, #2
 8008316:	4804      	ldr	r0, [pc, #16]	; (8008328 <HW_IPCC_SYS_SendCmd+0x18>)
 8008318:	f7ff feee 	bl	80080f8 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800831c:	2102      	movs	r1, #2
 800831e:	4802      	ldr	r0, [pc, #8]	; (8008328 <HW_IPCC_SYS_SendCmd+0x18>)
 8008320:	f7ff fea5 	bl	800806e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8008324:	bf00      	nop
}
 8008326:	bd80      	pop	{r7, pc}
 8008328:	58000c00 	.word	0x58000c00

0800832c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800832c:	b580      	push	{r7, lr}
 800832e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008330:	2102      	movs	r1, #2
 8008332:	4803      	ldr	r0, [pc, #12]	; (8008340 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8008334:	f7ff feae 	bl	8008094 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8008338:	f7fe ff50 	bl	80071dc <HW_IPCC_SYS_CmdEvtNot>

  return;
 800833c:	bf00      	nop
}
 800833e:	bd80      	pop	{r7, pc}
 8008340:	58000c00 	.word	0x58000c00

08008344 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8008344:	b580      	push	{r7, lr}
 8008346:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8008348:	f7fe ff5e 	bl	8007208 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800834c:	2102      	movs	r1, #2
 800834e:	4802      	ldr	r0, [pc, #8]	; (8008358 <HW_IPCC_SYS_EvtHandler+0x14>)
 8008350:	f7ff fec4 	bl	80080dc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008354:	bf00      	nop
}
 8008356:	bd80      	pop	{r7, pc}
 8008358:	58000c00 	.word	0x58000c00

0800835c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8008364:	2108      	movs	r1, #8
 8008366:	480c      	ldr	r0, [pc, #48]	; (8008398 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008368:	f7ff fed5 	bl	8008116 <LL_C1_IPCC_IsActiveFlag_CHx>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d007      	beq.n	8008382 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8008372:	4a0a      	ldr	r2, [pc, #40]	; (800839c <HW_IPCC_MM_SendFreeBuf+0x40>)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008378:	2108      	movs	r1, #8
 800837a:	4807      	ldr	r0, [pc, #28]	; (8008398 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800837c:	f7ff fe77 	bl	800806e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8008380:	e006      	b.n	8008390 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008386:	2108      	movs	r1, #8
 8008388:	4803      	ldr	r0, [pc, #12]	; (8008398 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800838a:	f7ff feb5 	bl	80080f8 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800838e:	bf00      	nop
}
 8008390:	3708      	adds	r7, #8
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	58000c00 	.word	0x58000c00
 800839c:	200004d0 	.word	0x200004d0

080083a0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80083a4:	2108      	movs	r1, #8
 80083a6:	4806      	ldr	r0, [pc, #24]	; (80083c0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80083a8:	f7ff fe74 	bl	8008094 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80083ac:	4b05      	ldr	r3, [pc, #20]	; (80083c4 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80083b2:	2108      	movs	r1, #8
 80083b4:	4802      	ldr	r0, [pc, #8]	; (80083c0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80083b6:	f7ff fe9f 	bl	80080f8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80083ba:	bf00      	nop
}
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	58000c00 	.word	0x58000c00
 80083c4:	200004d0 	.word	0x200004d0

080083c8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80083cc:	2108      	movs	r1, #8
 80083ce:	4802      	ldr	r0, [pc, #8]	; (80083d8 <HW_IPCC_TRACES_Init+0x10>)
 80083d0:	f7ff fe72 	bl	80080b8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80083d4:	bf00      	nop
}
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	58000c00 	.word	0x58000c00

080083dc <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80083e0:	f7fe ffba 	bl	8007358 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80083e4:	2108      	movs	r1, #8
 80083e6:	4802      	ldr	r0, [pc, #8]	; (80083f0 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80083e8:	f7ff fe78 	bl	80080dc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80083ec:	bf00      	nop
}
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	58000c00 	.word	0x58000c00

080083f4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80083f4:	b480      	push	{r7}
 80083f6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80083f8:	4b05      	ldr	r3, [pc, #20]	; (8008410 <UTIL_LPM_Init+0x1c>)
 80083fa:	2200      	movs	r2, #0
 80083fc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80083fe:	4b05      	ldr	r3, [pc, #20]	; (8008414 <UTIL_LPM_Init+0x20>)
 8008400:	2200      	movs	r2, #0
 8008402:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8008404:	bf00      	nop
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	200004d4 	.word	0x200004d4
 8008414:	200004d8 	.word	0x200004d8

08008418 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8008418:	b480      	push	{r7}
 800841a:	b087      	sub	sp, #28
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	460b      	mov	r3, r1
 8008422:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008424:	f3ef 8310 	mrs	r3, PRIMASK
 8008428:	613b      	str	r3, [r7, #16]
  return(result);
 800842a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800842c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800842e:	b672      	cpsid	i
}
 8008430:	bf00      	nop
  
  switch(state)
 8008432:	78fb      	ldrb	r3, [r7, #3]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d008      	beq.n	800844a <UTIL_LPM_SetOffMode+0x32>
 8008438:	2b01      	cmp	r3, #1
 800843a:	d10e      	bne.n	800845a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800843c:	4b0d      	ldr	r3, [pc, #52]	; (8008474 <UTIL_LPM_SetOffMode+0x5c>)
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4313      	orrs	r3, r2
 8008444:	4a0b      	ldr	r2, [pc, #44]	; (8008474 <UTIL_LPM_SetOffMode+0x5c>)
 8008446:	6013      	str	r3, [r2, #0]
      break;
 8008448:	e008      	b.n	800845c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	43da      	mvns	r2, r3
 800844e:	4b09      	ldr	r3, [pc, #36]	; (8008474 <UTIL_LPM_SetOffMode+0x5c>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4013      	ands	r3, r2
 8008454:	4a07      	ldr	r2, [pc, #28]	; (8008474 <UTIL_LPM_SetOffMode+0x5c>)
 8008456:	6013      	str	r3, [r2, #0]
      break;
 8008458:	e000      	b.n	800845c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800845a:	bf00      	nop
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f383 8810 	msr	PRIMASK, r3
}
 8008466:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8008468:	bf00      	nop
 800846a:	371c      	adds	r7, #28
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr
 8008474:	200004d8 	.word	0x200004d8

08008478 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b08c      	sub	sp, #48	; 0x30
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8008480:	4b6a      	ldr	r3, [pc, #424]	; (800862c <UTIL_SEQ_Run+0x1b4>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	627b      	str	r3, [r7, #36]	; 0x24
  SuperMask &= Mask_bm;
 8008486:	4b69      	ldr	r3, [pc, #420]	; (800862c <UTIL_SEQ_Run+0x1b4>)
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4013      	ands	r3, r2
 800848e:	4a67      	ldr	r2, [pc, #412]	; (800862c <UTIL_SEQ_Run+0x1b4>)
 8008490:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8008492:	4b67      	ldr	r3, [pc, #412]	; (8008630 <UTIL_SEQ_Run+0x1b8>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8008498:	e086      	b.n	80085a8 <UTIL_SEQ_Run+0x130>
  {
    counter = 0U;
 800849a:	2300      	movs	r3, #0
 800849c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800849e:	e002      	b.n	80084a6 <UTIL_SEQ_Run+0x2e>
    {
      counter++;
 80084a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a2:	3301      	adds	r3, #1
 80084a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80084a6:	4a63      	ldr	r2, [pc, #396]	; (8008634 <UTIL_SEQ_Run+0x1bc>)
 80084a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084aa:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80084ae:	4b62      	ldr	r3, [pc, #392]	; (8008638 <UTIL_SEQ_Run+0x1c0>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	401a      	ands	r2, r3
 80084b4:	4b5d      	ldr	r3, [pc, #372]	; (800862c <UTIL_SEQ_Run+0x1b4>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4013      	ands	r3, r2
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d0f0      	beq.n	80084a0 <UTIL_SEQ_Run+0x28>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 80084be:	4a5d      	ldr	r2, [pc, #372]	; (8008634 <UTIL_SEQ_Run+0x1bc>)
 80084c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80084c6:	4b5c      	ldr	r3, [pc, #368]	; (8008638 <UTIL_SEQ_Run+0x1c0>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	401a      	ands	r2, r3
 80084cc:	4b57      	ldr	r3, [pc, #348]	; (800862c <UTIL_SEQ_Run+0x1b4>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4013      	ands	r3, r2
 80084d2:	623b      	str	r3, [r7, #32]
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80084d4:	4a57      	ldr	r2, [pc, #348]	; (8008634 <UTIL_SEQ_Run+0x1bc>)
 80084d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d8:	00db      	lsls	r3, r3, #3
 80084da:	4413      	add	r3, r2
 80084dc:	685a      	ldr	r2, [r3, #4]
 80084de:	6a3b      	ldr	r3, [r7, #32]
 80084e0:	4013      	ands	r3, r2
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d106      	bne.n	80084f4 <UTIL_SEQ_Run+0x7c>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80084e6:	4a53      	ldr	r2, [pc, #332]	; (8008634 <UTIL_SEQ_Run+0x1bc>)
 80084e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ea:	00db      	lsls	r3, r3, #3
 80084ec:	4413      	add	r3, r2
 80084ee:	f04f 32ff 	mov.w	r2, #4294967295
 80084f2:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80084f4:	4a4f      	ldr	r2, [pc, #316]	; (8008634 <UTIL_SEQ_Run+0x1bc>)
 80084f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f8:	00db      	lsls	r3, r3, #3
 80084fa:	4413      	add	r3, r2
 80084fc:	685a      	ldr	r2, [r3, #4]
 80084fe:	6a3b      	ldr	r3, [r7, #32]
 8008500:	4013      	ands	r3, r2
 8008502:	4618      	mov	r0, r3
 8008504:	f000 f9ac 	bl	8008860 <SEQ_BitPosition>
 8008508:	4603      	mov	r3, r0
 800850a:	461a      	mov	r2, r3
 800850c:	4b4b      	ldr	r3, [pc, #300]	; (800863c <UTIL_SEQ_Run+0x1c4>)
 800850e:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8008510:	4a48      	ldr	r2, [pc, #288]	; (8008634 <UTIL_SEQ_Run+0x1bc>)
 8008512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008514:	00db      	lsls	r3, r3, #3
 8008516:	4413      	add	r3, r2
 8008518:	685a      	ldr	r2, [r3, #4]
 800851a:	4b48      	ldr	r3, [pc, #288]	; (800863c <UTIL_SEQ_Run+0x1c4>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2101      	movs	r1, #1
 8008520:	fa01 f303 	lsl.w	r3, r1, r3
 8008524:	43db      	mvns	r3, r3
 8008526:	401a      	ands	r2, r3
 8008528:	4942      	ldr	r1, [pc, #264]	; (8008634 <UTIL_SEQ_Run+0x1bc>)
 800852a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800852c:	00db      	lsls	r3, r3, #3
 800852e:	440b      	add	r3, r1
 8008530:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008532:	f3ef 8310 	mrs	r3, PRIMASK
 8008536:	617b      	str	r3, [r7, #20]
  return(result);
 8008538:	697b      	ldr	r3, [r7, #20]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800853a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800853c:	b672      	cpsid	i
}
 800853e:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8008540:	4b3e      	ldr	r3, [pc, #248]	; (800863c <UTIL_SEQ_Run+0x1c4>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2201      	movs	r2, #1
 8008546:	fa02 f303 	lsl.w	r3, r2, r3
 800854a:	43da      	mvns	r2, r3
 800854c:	4b38      	ldr	r3, [pc, #224]	; (8008630 <UTIL_SEQ_Run+0x1b8>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4013      	ands	r3, r2
 8008552:	4a37      	ldr	r2, [pc, #220]	; (8008630 <UTIL_SEQ_Run+0x1b8>)
 8008554:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008556:	2302      	movs	r3, #2
 8008558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800855a:	e013      	b.n	8008584 <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800855c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855e:	3b01      	subs	r3, #1
 8008560:	4a34      	ldr	r2, [pc, #208]	; (8008634 <UTIL_SEQ_Run+0x1bc>)
 8008562:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8008566:	4b35      	ldr	r3, [pc, #212]	; (800863c <UTIL_SEQ_Run+0x1c4>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2201      	movs	r2, #1
 800856c:	fa02 f303 	lsl.w	r3, r2, r3
 8008570:	43da      	mvns	r2, r3
 8008572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008574:	3b01      	subs	r3, #1
 8008576:	400a      	ands	r2, r1
 8008578:	492e      	ldr	r1, [pc, #184]	; (8008634 <UTIL_SEQ_Run+0x1bc>)
 800857a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800857e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008580:	3b01      	subs	r3, #1
 8008582:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1e8      	bne.n	800855c <UTIL_SEQ_Run+0xe4>
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	f383 8810 	msr	PRIMASK, r3
}
 8008594:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8008596:	4b29      	ldr	r3, [pc, #164]	; (800863c <UTIL_SEQ_Run+0x1c4>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a29      	ldr	r2, [pc, #164]	; (8008640 <UTIL_SEQ_Run+0x1c8>)
 800859c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085a0:	4798      	blx	r3
    
    local_taskset = TaskSet;
 80085a2:	4b23      	ldr	r3, [pc, #140]	; (8008630 <UTIL_SEQ_Run+0x1b8>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80085a8:	4b23      	ldr	r3, [pc, #140]	; (8008638 <UTIL_SEQ_Run+0x1c0>)
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ae:	401a      	ands	r2, r3
 80085b0:	4b1e      	ldr	r3, [pc, #120]	; (800862c <UTIL_SEQ_Run+0x1b4>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4013      	ands	r3, r2
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d007      	beq.n	80085ca <UTIL_SEQ_Run+0x152>
 80085ba:	4b22      	ldr	r3, [pc, #136]	; (8008644 <UTIL_SEQ_Run+0x1cc>)
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	4b22      	ldr	r3, [pc, #136]	; (8008648 <UTIL_SEQ_Run+0x1d0>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4013      	ands	r3, r2
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	f43f af68 	beq.w	800849a <UTIL_SEQ_Run+0x22>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80085ca:	4b1c      	ldr	r3, [pc, #112]	; (800863c <UTIL_SEQ_Run+0x1c4>)
 80085cc:	f04f 32ff 	mov.w	r2, #4294967295
 80085d0:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80085d2:	f000 f937 	bl	8008844 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085d6:	f3ef 8310 	mrs	r3, PRIMASK
 80085da:	60fb      	str	r3, [r7, #12]
  return(result);
 80085dc:	68fb      	ldr	r3, [r7, #12]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80085de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 80085e0:	b672      	cpsid	i
}
 80085e2:	bf00      	nop
  local_taskset = TaskSet;
 80085e4:	4b12      	ldr	r3, [pc, #72]	; (8008630 <UTIL_SEQ_Run+0x1b8>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 80085ea:	4b13      	ldr	r3, [pc, #76]	; (8008638 <UTIL_SEQ_Run+0x1c0>)
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f0:	401a      	ands	r2, r3
 80085f2:	4b0e      	ldr	r3, [pc, #56]	; (800862c <UTIL_SEQ_Run+0x1b4>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4013      	ands	r3, r2
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d108      	bne.n	800860e <UTIL_SEQ_Run+0x196>
 80085fc:	4b11      	ldr	r3, [pc, #68]	; (8008644 <UTIL_SEQ_Run+0x1cc>)
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	4b11      	ldr	r3, [pc, #68]	; (8008648 <UTIL_SEQ_Run+0x1d0>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4013      	ands	r3, r2
 8008606:	2b00      	cmp	r3, #0
 8008608:	d101      	bne.n	800860e <UTIL_SEQ_Run+0x196>
  {
	UTIL_SEQ_Idle( );
 800860a:	f7f8 fa84 	bl	8000b16 <UTIL_SEQ_Idle>
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	f383 8810 	msr	PRIMASK, r3
}
 8008618:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800861a:	f000 f91a 	bl	8008852 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800861e:	4a03      	ldr	r2, [pc, #12]	; (800862c <UTIL_SEQ_Run+0x1b4>)
 8008620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008622:	6013      	str	r3, [r2, #0]

  return;
 8008624:	bf00      	nop
}
 8008626:	3730      	adds	r7, #48	; 0x30
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	2000001c 	.word	0x2000001c
 8008630:	200004dc 	.word	0x200004dc
 8008634:	2000056c 	.word	0x2000056c
 8008638:	20000018 	.word	0x20000018
 800863c:	200004e8 	.word	0x200004e8
 8008640:	200004ec 	.word	0x200004ec
 8008644:	200004e0 	.word	0x200004e0
 8008648:	200004e4 	.word	0x200004e4

0800864c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b088      	sub	sp, #32
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008658:	f3ef 8310 	mrs	r3, PRIMASK
 800865c:	617b      	str	r3, [r7, #20]
  return(result);
 800865e:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8008660:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008662:	b672      	cpsid	i
}
 8008664:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f000 f8fa 	bl	8008860 <SEQ_BitPosition>
 800866c:	4603      	mov	r3, r0
 800866e:	4619      	mov	r1, r3
 8008670:	4a06      	ldr	r2, [pc, #24]	; (800868c <UTIL_SEQ_RegTask+0x40>)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	f383 8810 	msr	PRIMASK, r3
}
 8008682:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8008684:	bf00      	nop
}
 8008686:	3720      	adds	r7, #32
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	200004ec 	.word	0x200004ec

08008690 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8008690:	b480      	push	{r7}
 8008692:	b087      	sub	sp, #28
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800869a:	f3ef 8310 	mrs	r3, PRIMASK
 800869e:	60fb      	str	r3, [r7, #12]
  return(result);
 80086a0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80086a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80086a4:	b672      	cpsid	i
}
 80086a6:	bf00      	nop

  TaskSet |= TaskId_bm;
 80086a8:	4b0d      	ldr	r3, [pc, #52]	; (80086e0 <UTIL_SEQ_SetTask+0x50>)
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	4a0b      	ldr	r2, [pc, #44]	; (80086e0 <UTIL_SEQ_SetTask+0x50>)
 80086b2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80086b4:	4a0b      	ldr	r2, [pc, #44]	; (80086e4 <UTIL_SEQ_SetTask+0x54>)
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	431a      	orrs	r2, r3
 80086c0:	4908      	ldr	r1, [pc, #32]	; (80086e4 <UTIL_SEQ_SetTask+0x54>)
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	f383 8810 	msr	PRIMASK, r3
}
 80086d2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80086d4:	bf00      	nop
}
 80086d6:	371c      	adds	r7, #28
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr
 80086e0:	200004dc 	.word	0x200004dc
 80086e4:	2000056c 	.word	0x2000056c

080086e8 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80086e8:	b480      	push	{r7}
 80086ea:	b087      	sub	sp, #28
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086f0:	f3ef 8310 	mrs	r3, PRIMASK
 80086f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80086f6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80086f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80086fa:	b672      	cpsid	i
}
 80086fc:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	43da      	mvns	r2, r3
 8008702:	4b08      	ldr	r3, [pc, #32]	; (8008724 <UTIL_SEQ_PauseTask+0x3c>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4013      	ands	r3, r2
 8008708:	4a06      	ldr	r2, [pc, #24]	; (8008724 <UTIL_SEQ_PauseTask+0x3c>)
 800870a:	6013      	str	r3, [r2, #0]
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	f383 8810 	msr	PRIMASK, r3
}
 8008716:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008718:	bf00      	nop
}
 800871a:	371c      	adds	r7, #28
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr
 8008724:	20000018 	.word	0x20000018

08008728 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008728:	b480      	push	{r7}
 800872a:	b087      	sub	sp, #28
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008730:	f3ef 8310 	mrs	r3, PRIMASK
 8008734:	60fb      	str	r3, [r7, #12]
  return(result);
 8008736:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008738:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800873a:	b672      	cpsid	i
}
 800873c:	bf00      	nop

  TaskMask |= TaskId_bm;
 800873e:	4b09      	ldr	r3, [pc, #36]	; (8008764 <UTIL_SEQ_ResumeTask+0x3c>)
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4313      	orrs	r3, r2
 8008746:	4a07      	ldr	r2, [pc, #28]	; (8008764 <UTIL_SEQ_ResumeTask+0x3c>)
 8008748:	6013      	str	r3, [r2, #0]
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	f383 8810 	msr	PRIMASK, r3
}
 8008754:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008756:	bf00      	nop
}
 8008758:	371c      	adds	r7, #28
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	20000018 	.word	0x20000018

08008768 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8008768:	b480      	push	{r7}
 800876a:	b087      	sub	sp, #28
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008770:	f3ef 8310 	mrs	r3, PRIMASK
 8008774:	60fb      	str	r3, [r7, #12]
  return(result);
 8008776:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008778:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800877a:	b672      	cpsid	i
}
 800877c:	bf00      	nop

  EvtSet |= EvtId_bm;
 800877e:	4b09      	ldr	r3, [pc, #36]	; (80087a4 <UTIL_SEQ_SetEvt+0x3c>)
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4313      	orrs	r3, r2
 8008786:	4a07      	ldr	r2, [pc, #28]	; (80087a4 <UTIL_SEQ_SetEvt+0x3c>)
 8008788:	6013      	str	r3, [r2, #0]
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	f383 8810 	msr	PRIMASK, r3
}
 8008794:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008796:	bf00      	nop
}
 8008798:	371c      	adds	r7, #28
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	200004e0 	.word	0x200004e0

080087a8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b088      	sub	sp, #32
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80087b0:	4b21      	ldr	r3, [pc, #132]	; (8008838 <UTIL_SEQ_WaitEvt+0x90>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80087b6:	4b20      	ldr	r3, [pc, #128]	; (8008838 <UTIL_SEQ_WaitEvt+0x90>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087be:	d102      	bne.n	80087c6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 80087c0:	2300      	movs	r3, #0
 80087c2:	61fb      	str	r3, [r7, #28]
 80087c4:	e005      	b.n	80087d2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 80087c6:	4b1c      	ldr	r3, [pc, #112]	; (8008838 <UTIL_SEQ_WaitEvt+0x90>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2201      	movs	r2, #1
 80087cc:	fa02 f303 	lsl.w	r3, r2, r3
 80087d0:	61fb      	str	r3, [r7, #28]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80087d2:	4b1a      	ldr	r3, [pc, #104]	; (800883c <UTIL_SEQ_WaitEvt+0x94>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80087d8:	4a18      	ldr	r2, [pc, #96]	; (800883c <UTIL_SEQ_WaitEvt+0x94>)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 80087de:	e005      	b.n	80087ec <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 80087e0:	4b16      	ldr	r3, [pc, #88]	; (800883c <UTIL_SEQ_WaitEvt+0x94>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4619      	mov	r1, r3
 80087e6:	69f8      	ldr	r0, [r7, #28]
 80087e8:	f7f8 f99c 	bl	8000b24 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 80087ec:	4b14      	ldr	r3, [pc, #80]	; (8008840 <UTIL_SEQ_WaitEvt+0x98>)
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	4b12      	ldr	r3, [pc, #72]	; (800883c <UTIL_SEQ_WaitEvt+0x94>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4013      	ands	r3, r2
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d0f2      	beq.n	80087e0 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80087fa:	4a0f      	ldr	r2, [pc, #60]	; (8008838 <UTIL_SEQ_WaitEvt+0x90>)
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008800:	f3ef 8310 	mrs	r3, PRIMASK
 8008804:	60bb      	str	r3, [r7, #8]
  return(result);
 8008806:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008808:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800880a:	b672      	cpsid	i
}
 800880c:	bf00      	nop

  EvtSet &= (~EvtWaited);
 800880e:	4b0b      	ldr	r3, [pc, #44]	; (800883c <UTIL_SEQ_WaitEvt+0x94>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	43da      	mvns	r2, r3
 8008814:	4b0a      	ldr	r3, [pc, #40]	; (8008840 <UTIL_SEQ_WaitEvt+0x98>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4013      	ands	r3, r2
 800881a:	4a09      	ldr	r2, [pc, #36]	; (8008840 <UTIL_SEQ_WaitEvt+0x98>)
 800881c:	6013      	str	r3, [r2, #0]
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f383 8810 	msr	PRIMASK, r3
}
 8008828:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800882a:	4a04      	ldr	r2, [pc, #16]	; (800883c <UTIL_SEQ_WaitEvt+0x94>)
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	6013      	str	r3, [r2, #0]

  return;
 8008830:	bf00      	nop
}
 8008832:	3720      	adds	r7, #32
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	200004e8 	.word	0x200004e8
 800883c:	200004e4 	.word	0x200004e4
 8008840:	200004e0 	.word	0x200004e0

08008844 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8008844:	b480      	push	{r7}
 8008846:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8008848:	bf00      	nop
}
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr

08008852 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8008852:	b480      	push	{r7}
 8008854:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8008856:	bf00      	nop
}
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 8008868:	2300      	movs	r3, #0
 800886a:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	0c1b      	lsrs	r3, r3, #16
 8008870:	041b      	lsls	r3, r3, #16
 8008872:	2b00      	cmp	r3, #0
 8008874:	d104      	bne.n	8008880 <SEQ_BitPosition+0x20>
 8008876:	2310      	movs	r3, #16
 8008878:	73fb      	strb	r3, [r7, #15]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	041b      	lsls	r3, r3, #16
 800887e:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008886:	2b00      	cmp	r3, #0
 8008888:	d105      	bne.n	8008896 <SEQ_BitPosition+0x36>
 800888a:	7bfb      	ldrb	r3, [r7, #15]
 800888c:	3308      	adds	r3, #8
 800888e:	73fb      	strb	r3, [r7, #15]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	021b      	lsls	r3, r3, #8
 8008894:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800889c:	2b00      	cmp	r3, #0
 800889e:	d105      	bne.n	80088ac <SEQ_BitPosition+0x4c>
 80088a0:	7bfb      	ldrb	r3, [r7, #15]
 80088a2:	3304      	adds	r3, #4
 80088a4:	73fb      	strb	r3, [r7, #15]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	011b      	lsls	r3, r3, #4
 80088aa:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	0f1b      	lsrs	r3, r3, #28
 80088b0:	4a07      	ldr	r2, [pc, #28]	; (80088d0 <SEQ_BitPosition+0x70>)
 80088b2:	5cd2      	ldrb	r2, [r2, r3]
 80088b4:	7bfb      	ldrb	r3, [r7, #15]
 80088b6:	4413      	add	r3, r2
 80088b8:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80088ba:	7bfb      	ldrb	r3, [r7, #15]
 80088bc:	f1c3 031f 	rsb	r3, r3, #31
 80088c0:	b2db      	uxtb	r3, r3
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3714      	adds	r7, #20
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	08009510 	.word	0x08009510

080088d4 <__errno>:
 80088d4:	4b01      	ldr	r3, [pc, #4]	; (80088dc <__errno+0x8>)
 80088d6:	6818      	ldr	r0, [r3, #0]
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	20000020 	.word	0x20000020

080088e0 <__libc_init_array>:
 80088e0:	b570      	push	{r4, r5, r6, lr}
 80088e2:	4d0d      	ldr	r5, [pc, #52]	; (8008918 <__libc_init_array+0x38>)
 80088e4:	4c0d      	ldr	r4, [pc, #52]	; (800891c <__libc_init_array+0x3c>)
 80088e6:	1b64      	subs	r4, r4, r5
 80088e8:	10a4      	asrs	r4, r4, #2
 80088ea:	2600      	movs	r6, #0
 80088ec:	42a6      	cmp	r6, r4
 80088ee:	d109      	bne.n	8008904 <__libc_init_array+0x24>
 80088f0:	4d0b      	ldr	r5, [pc, #44]	; (8008920 <__libc_init_array+0x40>)
 80088f2:	4c0c      	ldr	r4, [pc, #48]	; (8008924 <__libc_init_array+0x44>)
 80088f4:	f000 fc8e 	bl	8009214 <_init>
 80088f8:	1b64      	subs	r4, r4, r5
 80088fa:	10a4      	asrs	r4, r4, #2
 80088fc:	2600      	movs	r6, #0
 80088fe:	42a6      	cmp	r6, r4
 8008900:	d105      	bne.n	800890e <__libc_init_array+0x2e>
 8008902:	bd70      	pop	{r4, r5, r6, pc}
 8008904:	f855 3b04 	ldr.w	r3, [r5], #4
 8008908:	4798      	blx	r3
 800890a:	3601      	adds	r6, #1
 800890c:	e7ee      	b.n	80088ec <__libc_init_array+0xc>
 800890e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008912:	4798      	blx	r3
 8008914:	3601      	adds	r6, #1
 8008916:	e7f2      	b.n	80088fe <__libc_init_array+0x1e>
 8008918:	080095bc 	.word	0x080095bc
 800891c:	080095bc 	.word	0x080095bc
 8008920:	080095bc 	.word	0x080095bc
 8008924:	080095c0 	.word	0x080095c0

08008928 <memcpy>:
 8008928:	440a      	add	r2, r1
 800892a:	4291      	cmp	r1, r2
 800892c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008930:	d100      	bne.n	8008934 <memcpy+0xc>
 8008932:	4770      	bx	lr
 8008934:	b510      	push	{r4, lr}
 8008936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800893a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800893e:	4291      	cmp	r1, r2
 8008940:	d1f9      	bne.n	8008936 <memcpy+0xe>
 8008942:	bd10      	pop	{r4, pc}

08008944 <memset>:
 8008944:	4402      	add	r2, r0
 8008946:	4603      	mov	r3, r0
 8008948:	4293      	cmp	r3, r2
 800894a:	d100      	bne.n	800894e <memset+0xa>
 800894c:	4770      	bx	lr
 800894e:	f803 1b01 	strb.w	r1, [r3], #1
 8008952:	e7f9      	b.n	8008948 <memset+0x4>

08008954 <siprintf>:
 8008954:	b40e      	push	{r1, r2, r3}
 8008956:	b500      	push	{lr}
 8008958:	b09c      	sub	sp, #112	; 0x70
 800895a:	ab1d      	add	r3, sp, #116	; 0x74
 800895c:	9002      	str	r0, [sp, #8]
 800895e:	9006      	str	r0, [sp, #24]
 8008960:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008964:	4809      	ldr	r0, [pc, #36]	; (800898c <siprintf+0x38>)
 8008966:	9107      	str	r1, [sp, #28]
 8008968:	9104      	str	r1, [sp, #16]
 800896a:	4909      	ldr	r1, [pc, #36]	; (8008990 <siprintf+0x3c>)
 800896c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008970:	9105      	str	r1, [sp, #20]
 8008972:	6800      	ldr	r0, [r0, #0]
 8008974:	9301      	str	r3, [sp, #4]
 8008976:	a902      	add	r1, sp, #8
 8008978:	f000 f8fe 	bl	8008b78 <_svfiprintf_r>
 800897c:	9b02      	ldr	r3, [sp, #8]
 800897e:	2200      	movs	r2, #0
 8008980:	701a      	strb	r2, [r3, #0]
 8008982:	b01c      	add	sp, #112	; 0x70
 8008984:	f85d eb04 	ldr.w	lr, [sp], #4
 8008988:	b003      	add	sp, #12
 800898a:	4770      	bx	lr
 800898c:	20000020 	.word	0x20000020
 8008990:	ffff0208 	.word	0xffff0208

08008994 <__retarget_lock_acquire_recursive>:
 8008994:	4770      	bx	lr

08008996 <__retarget_lock_release_recursive>:
 8008996:	4770      	bx	lr

08008998 <sbrk_aligned>:
 8008998:	b570      	push	{r4, r5, r6, lr}
 800899a:	4e0e      	ldr	r6, [pc, #56]	; (80089d4 <sbrk_aligned+0x3c>)
 800899c:	460c      	mov	r4, r1
 800899e:	6831      	ldr	r1, [r6, #0]
 80089a0:	4605      	mov	r5, r0
 80089a2:	b911      	cbnz	r1, 80089aa <sbrk_aligned+0x12>
 80089a4:	f000 fb7c 	bl	80090a0 <_sbrk_r>
 80089a8:	6030      	str	r0, [r6, #0]
 80089aa:	4621      	mov	r1, r4
 80089ac:	4628      	mov	r0, r5
 80089ae:	f000 fb77 	bl	80090a0 <_sbrk_r>
 80089b2:	1c43      	adds	r3, r0, #1
 80089b4:	d00a      	beq.n	80089cc <sbrk_aligned+0x34>
 80089b6:	1cc4      	adds	r4, r0, #3
 80089b8:	f024 0403 	bic.w	r4, r4, #3
 80089bc:	42a0      	cmp	r0, r4
 80089be:	d007      	beq.n	80089d0 <sbrk_aligned+0x38>
 80089c0:	1a21      	subs	r1, r4, r0
 80089c2:	4628      	mov	r0, r5
 80089c4:	f000 fb6c 	bl	80090a0 <_sbrk_r>
 80089c8:	3001      	adds	r0, #1
 80089ca:	d101      	bne.n	80089d0 <sbrk_aligned+0x38>
 80089cc:	f04f 34ff 	mov.w	r4, #4294967295
 80089d0:	4620      	mov	r0, r4
 80089d2:	bd70      	pop	{r4, r5, r6, pc}
 80089d4:	20000584 	.word	0x20000584

080089d8 <_malloc_r>:
 80089d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089dc:	1ccd      	adds	r5, r1, #3
 80089de:	f025 0503 	bic.w	r5, r5, #3
 80089e2:	3508      	adds	r5, #8
 80089e4:	2d0c      	cmp	r5, #12
 80089e6:	bf38      	it	cc
 80089e8:	250c      	movcc	r5, #12
 80089ea:	2d00      	cmp	r5, #0
 80089ec:	4607      	mov	r7, r0
 80089ee:	db01      	blt.n	80089f4 <_malloc_r+0x1c>
 80089f0:	42a9      	cmp	r1, r5
 80089f2:	d905      	bls.n	8008a00 <_malloc_r+0x28>
 80089f4:	230c      	movs	r3, #12
 80089f6:	603b      	str	r3, [r7, #0]
 80089f8:	2600      	movs	r6, #0
 80089fa:	4630      	mov	r0, r6
 80089fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a00:	4e2e      	ldr	r6, [pc, #184]	; (8008abc <_malloc_r+0xe4>)
 8008a02:	f000 fb77 	bl	80090f4 <__malloc_lock>
 8008a06:	6833      	ldr	r3, [r6, #0]
 8008a08:	461c      	mov	r4, r3
 8008a0a:	bb34      	cbnz	r4, 8008a5a <_malloc_r+0x82>
 8008a0c:	4629      	mov	r1, r5
 8008a0e:	4638      	mov	r0, r7
 8008a10:	f7ff ffc2 	bl	8008998 <sbrk_aligned>
 8008a14:	1c43      	adds	r3, r0, #1
 8008a16:	4604      	mov	r4, r0
 8008a18:	d14d      	bne.n	8008ab6 <_malloc_r+0xde>
 8008a1a:	6834      	ldr	r4, [r6, #0]
 8008a1c:	4626      	mov	r6, r4
 8008a1e:	2e00      	cmp	r6, #0
 8008a20:	d140      	bne.n	8008aa4 <_malloc_r+0xcc>
 8008a22:	6823      	ldr	r3, [r4, #0]
 8008a24:	4631      	mov	r1, r6
 8008a26:	4638      	mov	r0, r7
 8008a28:	eb04 0803 	add.w	r8, r4, r3
 8008a2c:	f000 fb38 	bl	80090a0 <_sbrk_r>
 8008a30:	4580      	cmp	r8, r0
 8008a32:	d13a      	bne.n	8008aaa <_malloc_r+0xd2>
 8008a34:	6821      	ldr	r1, [r4, #0]
 8008a36:	3503      	adds	r5, #3
 8008a38:	1a6d      	subs	r5, r5, r1
 8008a3a:	f025 0503 	bic.w	r5, r5, #3
 8008a3e:	3508      	adds	r5, #8
 8008a40:	2d0c      	cmp	r5, #12
 8008a42:	bf38      	it	cc
 8008a44:	250c      	movcc	r5, #12
 8008a46:	4629      	mov	r1, r5
 8008a48:	4638      	mov	r0, r7
 8008a4a:	f7ff ffa5 	bl	8008998 <sbrk_aligned>
 8008a4e:	3001      	adds	r0, #1
 8008a50:	d02b      	beq.n	8008aaa <_malloc_r+0xd2>
 8008a52:	6823      	ldr	r3, [r4, #0]
 8008a54:	442b      	add	r3, r5
 8008a56:	6023      	str	r3, [r4, #0]
 8008a58:	e00e      	b.n	8008a78 <_malloc_r+0xa0>
 8008a5a:	6822      	ldr	r2, [r4, #0]
 8008a5c:	1b52      	subs	r2, r2, r5
 8008a5e:	d41e      	bmi.n	8008a9e <_malloc_r+0xc6>
 8008a60:	2a0b      	cmp	r2, #11
 8008a62:	d916      	bls.n	8008a92 <_malloc_r+0xba>
 8008a64:	1961      	adds	r1, r4, r5
 8008a66:	42a3      	cmp	r3, r4
 8008a68:	6025      	str	r5, [r4, #0]
 8008a6a:	bf18      	it	ne
 8008a6c:	6059      	strne	r1, [r3, #4]
 8008a6e:	6863      	ldr	r3, [r4, #4]
 8008a70:	bf08      	it	eq
 8008a72:	6031      	streq	r1, [r6, #0]
 8008a74:	5162      	str	r2, [r4, r5]
 8008a76:	604b      	str	r3, [r1, #4]
 8008a78:	4638      	mov	r0, r7
 8008a7a:	f104 060b 	add.w	r6, r4, #11
 8008a7e:	f000 fb3f 	bl	8009100 <__malloc_unlock>
 8008a82:	f026 0607 	bic.w	r6, r6, #7
 8008a86:	1d23      	adds	r3, r4, #4
 8008a88:	1af2      	subs	r2, r6, r3
 8008a8a:	d0b6      	beq.n	80089fa <_malloc_r+0x22>
 8008a8c:	1b9b      	subs	r3, r3, r6
 8008a8e:	50a3      	str	r3, [r4, r2]
 8008a90:	e7b3      	b.n	80089fa <_malloc_r+0x22>
 8008a92:	6862      	ldr	r2, [r4, #4]
 8008a94:	42a3      	cmp	r3, r4
 8008a96:	bf0c      	ite	eq
 8008a98:	6032      	streq	r2, [r6, #0]
 8008a9a:	605a      	strne	r2, [r3, #4]
 8008a9c:	e7ec      	b.n	8008a78 <_malloc_r+0xa0>
 8008a9e:	4623      	mov	r3, r4
 8008aa0:	6864      	ldr	r4, [r4, #4]
 8008aa2:	e7b2      	b.n	8008a0a <_malloc_r+0x32>
 8008aa4:	4634      	mov	r4, r6
 8008aa6:	6876      	ldr	r6, [r6, #4]
 8008aa8:	e7b9      	b.n	8008a1e <_malloc_r+0x46>
 8008aaa:	230c      	movs	r3, #12
 8008aac:	603b      	str	r3, [r7, #0]
 8008aae:	4638      	mov	r0, r7
 8008ab0:	f000 fb26 	bl	8009100 <__malloc_unlock>
 8008ab4:	e7a1      	b.n	80089fa <_malloc_r+0x22>
 8008ab6:	6025      	str	r5, [r4, #0]
 8008ab8:	e7de      	b.n	8008a78 <_malloc_r+0xa0>
 8008aba:	bf00      	nop
 8008abc:	20000580 	.word	0x20000580

08008ac0 <__ssputs_r>:
 8008ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac4:	688e      	ldr	r6, [r1, #8]
 8008ac6:	429e      	cmp	r6, r3
 8008ac8:	4682      	mov	sl, r0
 8008aca:	460c      	mov	r4, r1
 8008acc:	4690      	mov	r8, r2
 8008ace:	461f      	mov	r7, r3
 8008ad0:	d838      	bhi.n	8008b44 <__ssputs_r+0x84>
 8008ad2:	898a      	ldrh	r2, [r1, #12]
 8008ad4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ad8:	d032      	beq.n	8008b40 <__ssputs_r+0x80>
 8008ada:	6825      	ldr	r5, [r4, #0]
 8008adc:	6909      	ldr	r1, [r1, #16]
 8008ade:	eba5 0901 	sub.w	r9, r5, r1
 8008ae2:	6965      	ldr	r5, [r4, #20]
 8008ae4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ae8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008aec:	3301      	adds	r3, #1
 8008aee:	444b      	add	r3, r9
 8008af0:	106d      	asrs	r5, r5, #1
 8008af2:	429d      	cmp	r5, r3
 8008af4:	bf38      	it	cc
 8008af6:	461d      	movcc	r5, r3
 8008af8:	0553      	lsls	r3, r2, #21
 8008afa:	d531      	bpl.n	8008b60 <__ssputs_r+0xa0>
 8008afc:	4629      	mov	r1, r5
 8008afe:	f7ff ff6b 	bl	80089d8 <_malloc_r>
 8008b02:	4606      	mov	r6, r0
 8008b04:	b950      	cbnz	r0, 8008b1c <__ssputs_r+0x5c>
 8008b06:	230c      	movs	r3, #12
 8008b08:	f8ca 3000 	str.w	r3, [sl]
 8008b0c:	89a3      	ldrh	r3, [r4, #12]
 8008b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b12:	81a3      	strh	r3, [r4, #12]
 8008b14:	f04f 30ff 	mov.w	r0, #4294967295
 8008b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b1c:	6921      	ldr	r1, [r4, #16]
 8008b1e:	464a      	mov	r2, r9
 8008b20:	f7ff ff02 	bl	8008928 <memcpy>
 8008b24:	89a3      	ldrh	r3, [r4, #12]
 8008b26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b2e:	81a3      	strh	r3, [r4, #12]
 8008b30:	6126      	str	r6, [r4, #16]
 8008b32:	6165      	str	r5, [r4, #20]
 8008b34:	444e      	add	r6, r9
 8008b36:	eba5 0509 	sub.w	r5, r5, r9
 8008b3a:	6026      	str	r6, [r4, #0]
 8008b3c:	60a5      	str	r5, [r4, #8]
 8008b3e:	463e      	mov	r6, r7
 8008b40:	42be      	cmp	r6, r7
 8008b42:	d900      	bls.n	8008b46 <__ssputs_r+0x86>
 8008b44:	463e      	mov	r6, r7
 8008b46:	6820      	ldr	r0, [r4, #0]
 8008b48:	4632      	mov	r2, r6
 8008b4a:	4641      	mov	r1, r8
 8008b4c:	f000 fab8 	bl	80090c0 <memmove>
 8008b50:	68a3      	ldr	r3, [r4, #8]
 8008b52:	1b9b      	subs	r3, r3, r6
 8008b54:	60a3      	str	r3, [r4, #8]
 8008b56:	6823      	ldr	r3, [r4, #0]
 8008b58:	4433      	add	r3, r6
 8008b5a:	6023      	str	r3, [r4, #0]
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	e7db      	b.n	8008b18 <__ssputs_r+0x58>
 8008b60:	462a      	mov	r2, r5
 8008b62:	f000 fb1f 	bl	80091a4 <_realloc_r>
 8008b66:	4606      	mov	r6, r0
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	d1e1      	bne.n	8008b30 <__ssputs_r+0x70>
 8008b6c:	6921      	ldr	r1, [r4, #16]
 8008b6e:	4650      	mov	r0, sl
 8008b70:	f000 facc 	bl	800910c <_free_r>
 8008b74:	e7c7      	b.n	8008b06 <__ssputs_r+0x46>
	...

08008b78 <_svfiprintf_r>:
 8008b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b7c:	4698      	mov	r8, r3
 8008b7e:	898b      	ldrh	r3, [r1, #12]
 8008b80:	061b      	lsls	r3, r3, #24
 8008b82:	b09d      	sub	sp, #116	; 0x74
 8008b84:	4607      	mov	r7, r0
 8008b86:	460d      	mov	r5, r1
 8008b88:	4614      	mov	r4, r2
 8008b8a:	d50e      	bpl.n	8008baa <_svfiprintf_r+0x32>
 8008b8c:	690b      	ldr	r3, [r1, #16]
 8008b8e:	b963      	cbnz	r3, 8008baa <_svfiprintf_r+0x32>
 8008b90:	2140      	movs	r1, #64	; 0x40
 8008b92:	f7ff ff21 	bl	80089d8 <_malloc_r>
 8008b96:	6028      	str	r0, [r5, #0]
 8008b98:	6128      	str	r0, [r5, #16]
 8008b9a:	b920      	cbnz	r0, 8008ba6 <_svfiprintf_r+0x2e>
 8008b9c:	230c      	movs	r3, #12
 8008b9e:	603b      	str	r3, [r7, #0]
 8008ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba4:	e0d1      	b.n	8008d4a <_svfiprintf_r+0x1d2>
 8008ba6:	2340      	movs	r3, #64	; 0x40
 8008ba8:	616b      	str	r3, [r5, #20]
 8008baa:	2300      	movs	r3, #0
 8008bac:	9309      	str	r3, [sp, #36]	; 0x24
 8008bae:	2320      	movs	r3, #32
 8008bb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bb8:	2330      	movs	r3, #48	; 0x30
 8008bba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008d64 <_svfiprintf_r+0x1ec>
 8008bbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bc2:	f04f 0901 	mov.w	r9, #1
 8008bc6:	4623      	mov	r3, r4
 8008bc8:	469a      	mov	sl, r3
 8008bca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bce:	b10a      	cbz	r2, 8008bd4 <_svfiprintf_r+0x5c>
 8008bd0:	2a25      	cmp	r2, #37	; 0x25
 8008bd2:	d1f9      	bne.n	8008bc8 <_svfiprintf_r+0x50>
 8008bd4:	ebba 0b04 	subs.w	fp, sl, r4
 8008bd8:	d00b      	beq.n	8008bf2 <_svfiprintf_r+0x7a>
 8008bda:	465b      	mov	r3, fp
 8008bdc:	4622      	mov	r2, r4
 8008bde:	4629      	mov	r1, r5
 8008be0:	4638      	mov	r0, r7
 8008be2:	f7ff ff6d 	bl	8008ac0 <__ssputs_r>
 8008be6:	3001      	adds	r0, #1
 8008be8:	f000 80aa 	beq.w	8008d40 <_svfiprintf_r+0x1c8>
 8008bec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bee:	445a      	add	r2, fp
 8008bf0:	9209      	str	r2, [sp, #36]	; 0x24
 8008bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f000 80a2 	beq.w	8008d40 <_svfiprintf_r+0x1c8>
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8008c02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c06:	f10a 0a01 	add.w	sl, sl, #1
 8008c0a:	9304      	str	r3, [sp, #16]
 8008c0c:	9307      	str	r3, [sp, #28]
 8008c0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c12:	931a      	str	r3, [sp, #104]	; 0x68
 8008c14:	4654      	mov	r4, sl
 8008c16:	2205      	movs	r2, #5
 8008c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c1c:	4851      	ldr	r0, [pc, #324]	; (8008d64 <_svfiprintf_r+0x1ec>)
 8008c1e:	f7f7 fab7 	bl	8000190 <memchr>
 8008c22:	9a04      	ldr	r2, [sp, #16]
 8008c24:	b9d8      	cbnz	r0, 8008c5e <_svfiprintf_r+0xe6>
 8008c26:	06d0      	lsls	r0, r2, #27
 8008c28:	bf44      	itt	mi
 8008c2a:	2320      	movmi	r3, #32
 8008c2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c30:	0711      	lsls	r1, r2, #28
 8008c32:	bf44      	itt	mi
 8008c34:	232b      	movmi	r3, #43	; 0x2b
 8008c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c3a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c3e:	2b2a      	cmp	r3, #42	; 0x2a
 8008c40:	d015      	beq.n	8008c6e <_svfiprintf_r+0xf6>
 8008c42:	9a07      	ldr	r2, [sp, #28]
 8008c44:	4654      	mov	r4, sl
 8008c46:	2000      	movs	r0, #0
 8008c48:	f04f 0c0a 	mov.w	ip, #10
 8008c4c:	4621      	mov	r1, r4
 8008c4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c52:	3b30      	subs	r3, #48	; 0x30
 8008c54:	2b09      	cmp	r3, #9
 8008c56:	d94e      	bls.n	8008cf6 <_svfiprintf_r+0x17e>
 8008c58:	b1b0      	cbz	r0, 8008c88 <_svfiprintf_r+0x110>
 8008c5a:	9207      	str	r2, [sp, #28]
 8008c5c:	e014      	b.n	8008c88 <_svfiprintf_r+0x110>
 8008c5e:	eba0 0308 	sub.w	r3, r0, r8
 8008c62:	fa09 f303 	lsl.w	r3, r9, r3
 8008c66:	4313      	orrs	r3, r2
 8008c68:	9304      	str	r3, [sp, #16]
 8008c6a:	46a2      	mov	sl, r4
 8008c6c:	e7d2      	b.n	8008c14 <_svfiprintf_r+0x9c>
 8008c6e:	9b03      	ldr	r3, [sp, #12]
 8008c70:	1d19      	adds	r1, r3, #4
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	9103      	str	r1, [sp, #12]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	bfbb      	ittet	lt
 8008c7a:	425b      	neglt	r3, r3
 8008c7c:	f042 0202 	orrlt.w	r2, r2, #2
 8008c80:	9307      	strge	r3, [sp, #28]
 8008c82:	9307      	strlt	r3, [sp, #28]
 8008c84:	bfb8      	it	lt
 8008c86:	9204      	strlt	r2, [sp, #16]
 8008c88:	7823      	ldrb	r3, [r4, #0]
 8008c8a:	2b2e      	cmp	r3, #46	; 0x2e
 8008c8c:	d10c      	bne.n	8008ca8 <_svfiprintf_r+0x130>
 8008c8e:	7863      	ldrb	r3, [r4, #1]
 8008c90:	2b2a      	cmp	r3, #42	; 0x2a
 8008c92:	d135      	bne.n	8008d00 <_svfiprintf_r+0x188>
 8008c94:	9b03      	ldr	r3, [sp, #12]
 8008c96:	1d1a      	adds	r2, r3, #4
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	9203      	str	r2, [sp, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	bfb8      	it	lt
 8008ca0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ca4:	3402      	adds	r4, #2
 8008ca6:	9305      	str	r3, [sp, #20]
 8008ca8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008d74 <_svfiprintf_r+0x1fc>
 8008cac:	7821      	ldrb	r1, [r4, #0]
 8008cae:	2203      	movs	r2, #3
 8008cb0:	4650      	mov	r0, sl
 8008cb2:	f7f7 fa6d 	bl	8000190 <memchr>
 8008cb6:	b140      	cbz	r0, 8008cca <_svfiprintf_r+0x152>
 8008cb8:	2340      	movs	r3, #64	; 0x40
 8008cba:	eba0 000a 	sub.w	r0, r0, sl
 8008cbe:	fa03 f000 	lsl.w	r0, r3, r0
 8008cc2:	9b04      	ldr	r3, [sp, #16]
 8008cc4:	4303      	orrs	r3, r0
 8008cc6:	3401      	adds	r4, #1
 8008cc8:	9304      	str	r3, [sp, #16]
 8008cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cce:	4826      	ldr	r0, [pc, #152]	; (8008d68 <_svfiprintf_r+0x1f0>)
 8008cd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cd4:	2206      	movs	r2, #6
 8008cd6:	f7f7 fa5b 	bl	8000190 <memchr>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d038      	beq.n	8008d50 <_svfiprintf_r+0x1d8>
 8008cde:	4b23      	ldr	r3, [pc, #140]	; (8008d6c <_svfiprintf_r+0x1f4>)
 8008ce0:	bb1b      	cbnz	r3, 8008d2a <_svfiprintf_r+0x1b2>
 8008ce2:	9b03      	ldr	r3, [sp, #12]
 8008ce4:	3307      	adds	r3, #7
 8008ce6:	f023 0307 	bic.w	r3, r3, #7
 8008cea:	3308      	adds	r3, #8
 8008cec:	9303      	str	r3, [sp, #12]
 8008cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cf0:	4433      	add	r3, r6
 8008cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8008cf4:	e767      	b.n	8008bc6 <_svfiprintf_r+0x4e>
 8008cf6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cfa:	460c      	mov	r4, r1
 8008cfc:	2001      	movs	r0, #1
 8008cfe:	e7a5      	b.n	8008c4c <_svfiprintf_r+0xd4>
 8008d00:	2300      	movs	r3, #0
 8008d02:	3401      	adds	r4, #1
 8008d04:	9305      	str	r3, [sp, #20]
 8008d06:	4619      	mov	r1, r3
 8008d08:	f04f 0c0a 	mov.w	ip, #10
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d12:	3a30      	subs	r2, #48	; 0x30
 8008d14:	2a09      	cmp	r2, #9
 8008d16:	d903      	bls.n	8008d20 <_svfiprintf_r+0x1a8>
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d0c5      	beq.n	8008ca8 <_svfiprintf_r+0x130>
 8008d1c:	9105      	str	r1, [sp, #20]
 8008d1e:	e7c3      	b.n	8008ca8 <_svfiprintf_r+0x130>
 8008d20:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d24:	4604      	mov	r4, r0
 8008d26:	2301      	movs	r3, #1
 8008d28:	e7f0      	b.n	8008d0c <_svfiprintf_r+0x194>
 8008d2a:	ab03      	add	r3, sp, #12
 8008d2c:	9300      	str	r3, [sp, #0]
 8008d2e:	462a      	mov	r2, r5
 8008d30:	4b0f      	ldr	r3, [pc, #60]	; (8008d70 <_svfiprintf_r+0x1f8>)
 8008d32:	a904      	add	r1, sp, #16
 8008d34:	4638      	mov	r0, r7
 8008d36:	f3af 8000 	nop.w
 8008d3a:	1c42      	adds	r2, r0, #1
 8008d3c:	4606      	mov	r6, r0
 8008d3e:	d1d6      	bne.n	8008cee <_svfiprintf_r+0x176>
 8008d40:	89ab      	ldrh	r3, [r5, #12]
 8008d42:	065b      	lsls	r3, r3, #25
 8008d44:	f53f af2c 	bmi.w	8008ba0 <_svfiprintf_r+0x28>
 8008d48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d4a:	b01d      	add	sp, #116	; 0x74
 8008d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d50:	ab03      	add	r3, sp, #12
 8008d52:	9300      	str	r3, [sp, #0]
 8008d54:	462a      	mov	r2, r5
 8008d56:	4b06      	ldr	r3, [pc, #24]	; (8008d70 <_svfiprintf_r+0x1f8>)
 8008d58:	a904      	add	r1, sp, #16
 8008d5a:	4638      	mov	r0, r7
 8008d5c:	f000 f87a 	bl	8008e54 <_printf_i>
 8008d60:	e7eb      	b.n	8008d3a <_svfiprintf_r+0x1c2>
 8008d62:	bf00      	nop
 8008d64:	08009580 	.word	0x08009580
 8008d68:	0800958a 	.word	0x0800958a
 8008d6c:	00000000 	.word	0x00000000
 8008d70:	08008ac1 	.word	0x08008ac1
 8008d74:	08009586 	.word	0x08009586

08008d78 <_printf_common>:
 8008d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d7c:	4616      	mov	r6, r2
 8008d7e:	4699      	mov	r9, r3
 8008d80:	688a      	ldr	r2, [r1, #8]
 8008d82:	690b      	ldr	r3, [r1, #16]
 8008d84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	bfb8      	it	lt
 8008d8c:	4613      	movlt	r3, r2
 8008d8e:	6033      	str	r3, [r6, #0]
 8008d90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d94:	4607      	mov	r7, r0
 8008d96:	460c      	mov	r4, r1
 8008d98:	b10a      	cbz	r2, 8008d9e <_printf_common+0x26>
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	6033      	str	r3, [r6, #0]
 8008d9e:	6823      	ldr	r3, [r4, #0]
 8008da0:	0699      	lsls	r1, r3, #26
 8008da2:	bf42      	ittt	mi
 8008da4:	6833      	ldrmi	r3, [r6, #0]
 8008da6:	3302      	addmi	r3, #2
 8008da8:	6033      	strmi	r3, [r6, #0]
 8008daa:	6825      	ldr	r5, [r4, #0]
 8008dac:	f015 0506 	ands.w	r5, r5, #6
 8008db0:	d106      	bne.n	8008dc0 <_printf_common+0x48>
 8008db2:	f104 0a19 	add.w	sl, r4, #25
 8008db6:	68e3      	ldr	r3, [r4, #12]
 8008db8:	6832      	ldr	r2, [r6, #0]
 8008dba:	1a9b      	subs	r3, r3, r2
 8008dbc:	42ab      	cmp	r3, r5
 8008dbe:	dc26      	bgt.n	8008e0e <_printf_common+0x96>
 8008dc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008dc4:	1e13      	subs	r3, r2, #0
 8008dc6:	6822      	ldr	r2, [r4, #0]
 8008dc8:	bf18      	it	ne
 8008dca:	2301      	movne	r3, #1
 8008dcc:	0692      	lsls	r2, r2, #26
 8008dce:	d42b      	bmi.n	8008e28 <_printf_common+0xb0>
 8008dd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008dd4:	4649      	mov	r1, r9
 8008dd6:	4638      	mov	r0, r7
 8008dd8:	47c0      	blx	r8
 8008dda:	3001      	adds	r0, #1
 8008ddc:	d01e      	beq.n	8008e1c <_printf_common+0xa4>
 8008dde:	6823      	ldr	r3, [r4, #0]
 8008de0:	68e5      	ldr	r5, [r4, #12]
 8008de2:	6832      	ldr	r2, [r6, #0]
 8008de4:	f003 0306 	and.w	r3, r3, #6
 8008de8:	2b04      	cmp	r3, #4
 8008dea:	bf08      	it	eq
 8008dec:	1aad      	subeq	r5, r5, r2
 8008dee:	68a3      	ldr	r3, [r4, #8]
 8008df0:	6922      	ldr	r2, [r4, #16]
 8008df2:	bf0c      	ite	eq
 8008df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008df8:	2500      	movne	r5, #0
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	bfc4      	itt	gt
 8008dfe:	1a9b      	subgt	r3, r3, r2
 8008e00:	18ed      	addgt	r5, r5, r3
 8008e02:	2600      	movs	r6, #0
 8008e04:	341a      	adds	r4, #26
 8008e06:	42b5      	cmp	r5, r6
 8008e08:	d11a      	bne.n	8008e40 <_printf_common+0xc8>
 8008e0a:	2000      	movs	r0, #0
 8008e0c:	e008      	b.n	8008e20 <_printf_common+0xa8>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	4652      	mov	r2, sl
 8008e12:	4649      	mov	r1, r9
 8008e14:	4638      	mov	r0, r7
 8008e16:	47c0      	blx	r8
 8008e18:	3001      	adds	r0, #1
 8008e1a:	d103      	bne.n	8008e24 <_printf_common+0xac>
 8008e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e24:	3501      	adds	r5, #1
 8008e26:	e7c6      	b.n	8008db6 <_printf_common+0x3e>
 8008e28:	18e1      	adds	r1, r4, r3
 8008e2a:	1c5a      	adds	r2, r3, #1
 8008e2c:	2030      	movs	r0, #48	; 0x30
 8008e2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e32:	4422      	add	r2, r4
 8008e34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e3c:	3302      	adds	r3, #2
 8008e3e:	e7c7      	b.n	8008dd0 <_printf_common+0x58>
 8008e40:	2301      	movs	r3, #1
 8008e42:	4622      	mov	r2, r4
 8008e44:	4649      	mov	r1, r9
 8008e46:	4638      	mov	r0, r7
 8008e48:	47c0      	blx	r8
 8008e4a:	3001      	adds	r0, #1
 8008e4c:	d0e6      	beq.n	8008e1c <_printf_common+0xa4>
 8008e4e:	3601      	adds	r6, #1
 8008e50:	e7d9      	b.n	8008e06 <_printf_common+0x8e>
	...

08008e54 <_printf_i>:
 8008e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e58:	7e0f      	ldrb	r7, [r1, #24]
 8008e5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e5c:	2f78      	cmp	r7, #120	; 0x78
 8008e5e:	4691      	mov	r9, r2
 8008e60:	4680      	mov	r8, r0
 8008e62:	460c      	mov	r4, r1
 8008e64:	469a      	mov	sl, r3
 8008e66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e6a:	d807      	bhi.n	8008e7c <_printf_i+0x28>
 8008e6c:	2f62      	cmp	r7, #98	; 0x62
 8008e6e:	d80a      	bhi.n	8008e86 <_printf_i+0x32>
 8008e70:	2f00      	cmp	r7, #0
 8008e72:	f000 80d8 	beq.w	8009026 <_printf_i+0x1d2>
 8008e76:	2f58      	cmp	r7, #88	; 0x58
 8008e78:	f000 80a3 	beq.w	8008fc2 <_printf_i+0x16e>
 8008e7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e84:	e03a      	b.n	8008efc <_printf_i+0xa8>
 8008e86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e8a:	2b15      	cmp	r3, #21
 8008e8c:	d8f6      	bhi.n	8008e7c <_printf_i+0x28>
 8008e8e:	a101      	add	r1, pc, #4	; (adr r1, 8008e94 <_printf_i+0x40>)
 8008e90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e94:	08008eed 	.word	0x08008eed
 8008e98:	08008f01 	.word	0x08008f01
 8008e9c:	08008e7d 	.word	0x08008e7d
 8008ea0:	08008e7d 	.word	0x08008e7d
 8008ea4:	08008e7d 	.word	0x08008e7d
 8008ea8:	08008e7d 	.word	0x08008e7d
 8008eac:	08008f01 	.word	0x08008f01
 8008eb0:	08008e7d 	.word	0x08008e7d
 8008eb4:	08008e7d 	.word	0x08008e7d
 8008eb8:	08008e7d 	.word	0x08008e7d
 8008ebc:	08008e7d 	.word	0x08008e7d
 8008ec0:	0800900d 	.word	0x0800900d
 8008ec4:	08008f31 	.word	0x08008f31
 8008ec8:	08008fef 	.word	0x08008fef
 8008ecc:	08008e7d 	.word	0x08008e7d
 8008ed0:	08008e7d 	.word	0x08008e7d
 8008ed4:	0800902f 	.word	0x0800902f
 8008ed8:	08008e7d 	.word	0x08008e7d
 8008edc:	08008f31 	.word	0x08008f31
 8008ee0:	08008e7d 	.word	0x08008e7d
 8008ee4:	08008e7d 	.word	0x08008e7d
 8008ee8:	08008ff7 	.word	0x08008ff7
 8008eec:	682b      	ldr	r3, [r5, #0]
 8008eee:	1d1a      	adds	r2, r3, #4
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	602a      	str	r2, [r5, #0]
 8008ef4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ef8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008efc:	2301      	movs	r3, #1
 8008efe:	e0a3      	b.n	8009048 <_printf_i+0x1f4>
 8008f00:	6820      	ldr	r0, [r4, #0]
 8008f02:	6829      	ldr	r1, [r5, #0]
 8008f04:	0606      	lsls	r6, r0, #24
 8008f06:	f101 0304 	add.w	r3, r1, #4
 8008f0a:	d50a      	bpl.n	8008f22 <_printf_i+0xce>
 8008f0c:	680e      	ldr	r6, [r1, #0]
 8008f0e:	602b      	str	r3, [r5, #0]
 8008f10:	2e00      	cmp	r6, #0
 8008f12:	da03      	bge.n	8008f1c <_printf_i+0xc8>
 8008f14:	232d      	movs	r3, #45	; 0x2d
 8008f16:	4276      	negs	r6, r6
 8008f18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f1c:	485e      	ldr	r0, [pc, #376]	; (8009098 <_printf_i+0x244>)
 8008f1e:	230a      	movs	r3, #10
 8008f20:	e019      	b.n	8008f56 <_printf_i+0x102>
 8008f22:	680e      	ldr	r6, [r1, #0]
 8008f24:	602b      	str	r3, [r5, #0]
 8008f26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f2a:	bf18      	it	ne
 8008f2c:	b236      	sxthne	r6, r6
 8008f2e:	e7ef      	b.n	8008f10 <_printf_i+0xbc>
 8008f30:	682b      	ldr	r3, [r5, #0]
 8008f32:	6820      	ldr	r0, [r4, #0]
 8008f34:	1d19      	adds	r1, r3, #4
 8008f36:	6029      	str	r1, [r5, #0]
 8008f38:	0601      	lsls	r1, r0, #24
 8008f3a:	d501      	bpl.n	8008f40 <_printf_i+0xec>
 8008f3c:	681e      	ldr	r6, [r3, #0]
 8008f3e:	e002      	b.n	8008f46 <_printf_i+0xf2>
 8008f40:	0646      	lsls	r6, r0, #25
 8008f42:	d5fb      	bpl.n	8008f3c <_printf_i+0xe8>
 8008f44:	881e      	ldrh	r6, [r3, #0]
 8008f46:	4854      	ldr	r0, [pc, #336]	; (8009098 <_printf_i+0x244>)
 8008f48:	2f6f      	cmp	r7, #111	; 0x6f
 8008f4a:	bf0c      	ite	eq
 8008f4c:	2308      	moveq	r3, #8
 8008f4e:	230a      	movne	r3, #10
 8008f50:	2100      	movs	r1, #0
 8008f52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f56:	6865      	ldr	r5, [r4, #4]
 8008f58:	60a5      	str	r5, [r4, #8]
 8008f5a:	2d00      	cmp	r5, #0
 8008f5c:	bfa2      	ittt	ge
 8008f5e:	6821      	ldrge	r1, [r4, #0]
 8008f60:	f021 0104 	bicge.w	r1, r1, #4
 8008f64:	6021      	strge	r1, [r4, #0]
 8008f66:	b90e      	cbnz	r6, 8008f6c <_printf_i+0x118>
 8008f68:	2d00      	cmp	r5, #0
 8008f6a:	d04d      	beq.n	8009008 <_printf_i+0x1b4>
 8008f6c:	4615      	mov	r5, r2
 8008f6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f72:	fb03 6711 	mls	r7, r3, r1, r6
 8008f76:	5dc7      	ldrb	r7, [r0, r7]
 8008f78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f7c:	4637      	mov	r7, r6
 8008f7e:	42bb      	cmp	r3, r7
 8008f80:	460e      	mov	r6, r1
 8008f82:	d9f4      	bls.n	8008f6e <_printf_i+0x11a>
 8008f84:	2b08      	cmp	r3, #8
 8008f86:	d10b      	bne.n	8008fa0 <_printf_i+0x14c>
 8008f88:	6823      	ldr	r3, [r4, #0]
 8008f8a:	07de      	lsls	r6, r3, #31
 8008f8c:	d508      	bpl.n	8008fa0 <_printf_i+0x14c>
 8008f8e:	6923      	ldr	r3, [r4, #16]
 8008f90:	6861      	ldr	r1, [r4, #4]
 8008f92:	4299      	cmp	r1, r3
 8008f94:	bfde      	ittt	le
 8008f96:	2330      	movle	r3, #48	; 0x30
 8008f98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008fa0:	1b52      	subs	r2, r2, r5
 8008fa2:	6122      	str	r2, [r4, #16]
 8008fa4:	f8cd a000 	str.w	sl, [sp]
 8008fa8:	464b      	mov	r3, r9
 8008faa:	aa03      	add	r2, sp, #12
 8008fac:	4621      	mov	r1, r4
 8008fae:	4640      	mov	r0, r8
 8008fb0:	f7ff fee2 	bl	8008d78 <_printf_common>
 8008fb4:	3001      	adds	r0, #1
 8008fb6:	d14c      	bne.n	8009052 <_printf_i+0x1fe>
 8008fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fbc:	b004      	add	sp, #16
 8008fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fc2:	4835      	ldr	r0, [pc, #212]	; (8009098 <_printf_i+0x244>)
 8008fc4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008fc8:	6829      	ldr	r1, [r5, #0]
 8008fca:	6823      	ldr	r3, [r4, #0]
 8008fcc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008fd0:	6029      	str	r1, [r5, #0]
 8008fd2:	061d      	lsls	r5, r3, #24
 8008fd4:	d514      	bpl.n	8009000 <_printf_i+0x1ac>
 8008fd6:	07df      	lsls	r7, r3, #31
 8008fd8:	bf44      	itt	mi
 8008fda:	f043 0320 	orrmi.w	r3, r3, #32
 8008fde:	6023      	strmi	r3, [r4, #0]
 8008fe0:	b91e      	cbnz	r6, 8008fea <_printf_i+0x196>
 8008fe2:	6823      	ldr	r3, [r4, #0]
 8008fe4:	f023 0320 	bic.w	r3, r3, #32
 8008fe8:	6023      	str	r3, [r4, #0]
 8008fea:	2310      	movs	r3, #16
 8008fec:	e7b0      	b.n	8008f50 <_printf_i+0xfc>
 8008fee:	6823      	ldr	r3, [r4, #0]
 8008ff0:	f043 0320 	orr.w	r3, r3, #32
 8008ff4:	6023      	str	r3, [r4, #0]
 8008ff6:	2378      	movs	r3, #120	; 0x78
 8008ff8:	4828      	ldr	r0, [pc, #160]	; (800909c <_printf_i+0x248>)
 8008ffa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ffe:	e7e3      	b.n	8008fc8 <_printf_i+0x174>
 8009000:	0659      	lsls	r1, r3, #25
 8009002:	bf48      	it	mi
 8009004:	b2b6      	uxthmi	r6, r6
 8009006:	e7e6      	b.n	8008fd6 <_printf_i+0x182>
 8009008:	4615      	mov	r5, r2
 800900a:	e7bb      	b.n	8008f84 <_printf_i+0x130>
 800900c:	682b      	ldr	r3, [r5, #0]
 800900e:	6826      	ldr	r6, [r4, #0]
 8009010:	6961      	ldr	r1, [r4, #20]
 8009012:	1d18      	adds	r0, r3, #4
 8009014:	6028      	str	r0, [r5, #0]
 8009016:	0635      	lsls	r5, r6, #24
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	d501      	bpl.n	8009020 <_printf_i+0x1cc>
 800901c:	6019      	str	r1, [r3, #0]
 800901e:	e002      	b.n	8009026 <_printf_i+0x1d2>
 8009020:	0670      	lsls	r0, r6, #25
 8009022:	d5fb      	bpl.n	800901c <_printf_i+0x1c8>
 8009024:	8019      	strh	r1, [r3, #0]
 8009026:	2300      	movs	r3, #0
 8009028:	6123      	str	r3, [r4, #16]
 800902a:	4615      	mov	r5, r2
 800902c:	e7ba      	b.n	8008fa4 <_printf_i+0x150>
 800902e:	682b      	ldr	r3, [r5, #0]
 8009030:	1d1a      	adds	r2, r3, #4
 8009032:	602a      	str	r2, [r5, #0]
 8009034:	681d      	ldr	r5, [r3, #0]
 8009036:	6862      	ldr	r2, [r4, #4]
 8009038:	2100      	movs	r1, #0
 800903a:	4628      	mov	r0, r5
 800903c:	f7f7 f8a8 	bl	8000190 <memchr>
 8009040:	b108      	cbz	r0, 8009046 <_printf_i+0x1f2>
 8009042:	1b40      	subs	r0, r0, r5
 8009044:	6060      	str	r0, [r4, #4]
 8009046:	6863      	ldr	r3, [r4, #4]
 8009048:	6123      	str	r3, [r4, #16]
 800904a:	2300      	movs	r3, #0
 800904c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009050:	e7a8      	b.n	8008fa4 <_printf_i+0x150>
 8009052:	6923      	ldr	r3, [r4, #16]
 8009054:	462a      	mov	r2, r5
 8009056:	4649      	mov	r1, r9
 8009058:	4640      	mov	r0, r8
 800905a:	47d0      	blx	sl
 800905c:	3001      	adds	r0, #1
 800905e:	d0ab      	beq.n	8008fb8 <_printf_i+0x164>
 8009060:	6823      	ldr	r3, [r4, #0]
 8009062:	079b      	lsls	r3, r3, #30
 8009064:	d413      	bmi.n	800908e <_printf_i+0x23a>
 8009066:	68e0      	ldr	r0, [r4, #12]
 8009068:	9b03      	ldr	r3, [sp, #12]
 800906a:	4298      	cmp	r0, r3
 800906c:	bfb8      	it	lt
 800906e:	4618      	movlt	r0, r3
 8009070:	e7a4      	b.n	8008fbc <_printf_i+0x168>
 8009072:	2301      	movs	r3, #1
 8009074:	4632      	mov	r2, r6
 8009076:	4649      	mov	r1, r9
 8009078:	4640      	mov	r0, r8
 800907a:	47d0      	blx	sl
 800907c:	3001      	adds	r0, #1
 800907e:	d09b      	beq.n	8008fb8 <_printf_i+0x164>
 8009080:	3501      	adds	r5, #1
 8009082:	68e3      	ldr	r3, [r4, #12]
 8009084:	9903      	ldr	r1, [sp, #12]
 8009086:	1a5b      	subs	r3, r3, r1
 8009088:	42ab      	cmp	r3, r5
 800908a:	dcf2      	bgt.n	8009072 <_printf_i+0x21e>
 800908c:	e7eb      	b.n	8009066 <_printf_i+0x212>
 800908e:	2500      	movs	r5, #0
 8009090:	f104 0619 	add.w	r6, r4, #25
 8009094:	e7f5      	b.n	8009082 <_printf_i+0x22e>
 8009096:	bf00      	nop
 8009098:	08009591 	.word	0x08009591
 800909c:	080095a2 	.word	0x080095a2

080090a0 <_sbrk_r>:
 80090a0:	b538      	push	{r3, r4, r5, lr}
 80090a2:	4d06      	ldr	r5, [pc, #24]	; (80090bc <_sbrk_r+0x1c>)
 80090a4:	2300      	movs	r3, #0
 80090a6:	4604      	mov	r4, r0
 80090a8:	4608      	mov	r0, r1
 80090aa:	602b      	str	r3, [r5, #0]
 80090ac:	f7f8 fefe 	bl	8001eac <_sbrk>
 80090b0:	1c43      	adds	r3, r0, #1
 80090b2:	d102      	bne.n	80090ba <_sbrk_r+0x1a>
 80090b4:	682b      	ldr	r3, [r5, #0]
 80090b6:	b103      	cbz	r3, 80090ba <_sbrk_r+0x1a>
 80090b8:	6023      	str	r3, [r4, #0]
 80090ba:	bd38      	pop	{r3, r4, r5, pc}
 80090bc:	20000588 	.word	0x20000588

080090c0 <memmove>:
 80090c0:	4288      	cmp	r0, r1
 80090c2:	b510      	push	{r4, lr}
 80090c4:	eb01 0402 	add.w	r4, r1, r2
 80090c8:	d902      	bls.n	80090d0 <memmove+0x10>
 80090ca:	4284      	cmp	r4, r0
 80090cc:	4623      	mov	r3, r4
 80090ce:	d807      	bhi.n	80090e0 <memmove+0x20>
 80090d0:	1e43      	subs	r3, r0, #1
 80090d2:	42a1      	cmp	r1, r4
 80090d4:	d008      	beq.n	80090e8 <memmove+0x28>
 80090d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090de:	e7f8      	b.n	80090d2 <memmove+0x12>
 80090e0:	4402      	add	r2, r0
 80090e2:	4601      	mov	r1, r0
 80090e4:	428a      	cmp	r2, r1
 80090e6:	d100      	bne.n	80090ea <memmove+0x2a>
 80090e8:	bd10      	pop	{r4, pc}
 80090ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090f2:	e7f7      	b.n	80090e4 <memmove+0x24>

080090f4 <__malloc_lock>:
 80090f4:	4801      	ldr	r0, [pc, #4]	; (80090fc <__malloc_lock+0x8>)
 80090f6:	f7ff bc4d 	b.w	8008994 <__retarget_lock_acquire_recursive>
 80090fa:	bf00      	nop
 80090fc:	2000057c 	.word	0x2000057c

08009100 <__malloc_unlock>:
 8009100:	4801      	ldr	r0, [pc, #4]	; (8009108 <__malloc_unlock+0x8>)
 8009102:	f7ff bc48 	b.w	8008996 <__retarget_lock_release_recursive>
 8009106:	bf00      	nop
 8009108:	2000057c 	.word	0x2000057c

0800910c <_free_r>:
 800910c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800910e:	2900      	cmp	r1, #0
 8009110:	d044      	beq.n	800919c <_free_r+0x90>
 8009112:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009116:	9001      	str	r0, [sp, #4]
 8009118:	2b00      	cmp	r3, #0
 800911a:	f1a1 0404 	sub.w	r4, r1, #4
 800911e:	bfb8      	it	lt
 8009120:	18e4      	addlt	r4, r4, r3
 8009122:	f7ff ffe7 	bl	80090f4 <__malloc_lock>
 8009126:	4a1e      	ldr	r2, [pc, #120]	; (80091a0 <_free_r+0x94>)
 8009128:	9801      	ldr	r0, [sp, #4]
 800912a:	6813      	ldr	r3, [r2, #0]
 800912c:	b933      	cbnz	r3, 800913c <_free_r+0x30>
 800912e:	6063      	str	r3, [r4, #4]
 8009130:	6014      	str	r4, [r2, #0]
 8009132:	b003      	add	sp, #12
 8009134:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009138:	f7ff bfe2 	b.w	8009100 <__malloc_unlock>
 800913c:	42a3      	cmp	r3, r4
 800913e:	d908      	bls.n	8009152 <_free_r+0x46>
 8009140:	6825      	ldr	r5, [r4, #0]
 8009142:	1961      	adds	r1, r4, r5
 8009144:	428b      	cmp	r3, r1
 8009146:	bf01      	itttt	eq
 8009148:	6819      	ldreq	r1, [r3, #0]
 800914a:	685b      	ldreq	r3, [r3, #4]
 800914c:	1949      	addeq	r1, r1, r5
 800914e:	6021      	streq	r1, [r4, #0]
 8009150:	e7ed      	b.n	800912e <_free_r+0x22>
 8009152:	461a      	mov	r2, r3
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	b10b      	cbz	r3, 800915c <_free_r+0x50>
 8009158:	42a3      	cmp	r3, r4
 800915a:	d9fa      	bls.n	8009152 <_free_r+0x46>
 800915c:	6811      	ldr	r1, [r2, #0]
 800915e:	1855      	adds	r5, r2, r1
 8009160:	42a5      	cmp	r5, r4
 8009162:	d10b      	bne.n	800917c <_free_r+0x70>
 8009164:	6824      	ldr	r4, [r4, #0]
 8009166:	4421      	add	r1, r4
 8009168:	1854      	adds	r4, r2, r1
 800916a:	42a3      	cmp	r3, r4
 800916c:	6011      	str	r1, [r2, #0]
 800916e:	d1e0      	bne.n	8009132 <_free_r+0x26>
 8009170:	681c      	ldr	r4, [r3, #0]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	6053      	str	r3, [r2, #4]
 8009176:	4421      	add	r1, r4
 8009178:	6011      	str	r1, [r2, #0]
 800917a:	e7da      	b.n	8009132 <_free_r+0x26>
 800917c:	d902      	bls.n	8009184 <_free_r+0x78>
 800917e:	230c      	movs	r3, #12
 8009180:	6003      	str	r3, [r0, #0]
 8009182:	e7d6      	b.n	8009132 <_free_r+0x26>
 8009184:	6825      	ldr	r5, [r4, #0]
 8009186:	1961      	adds	r1, r4, r5
 8009188:	428b      	cmp	r3, r1
 800918a:	bf04      	itt	eq
 800918c:	6819      	ldreq	r1, [r3, #0]
 800918e:	685b      	ldreq	r3, [r3, #4]
 8009190:	6063      	str	r3, [r4, #4]
 8009192:	bf04      	itt	eq
 8009194:	1949      	addeq	r1, r1, r5
 8009196:	6021      	streq	r1, [r4, #0]
 8009198:	6054      	str	r4, [r2, #4]
 800919a:	e7ca      	b.n	8009132 <_free_r+0x26>
 800919c:	b003      	add	sp, #12
 800919e:	bd30      	pop	{r4, r5, pc}
 80091a0:	20000580 	.word	0x20000580

080091a4 <_realloc_r>:
 80091a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091a8:	4680      	mov	r8, r0
 80091aa:	4614      	mov	r4, r2
 80091ac:	460e      	mov	r6, r1
 80091ae:	b921      	cbnz	r1, 80091ba <_realloc_r+0x16>
 80091b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091b4:	4611      	mov	r1, r2
 80091b6:	f7ff bc0f 	b.w	80089d8 <_malloc_r>
 80091ba:	b92a      	cbnz	r2, 80091c8 <_realloc_r+0x24>
 80091bc:	f7ff ffa6 	bl	800910c <_free_r>
 80091c0:	4625      	mov	r5, r4
 80091c2:	4628      	mov	r0, r5
 80091c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091c8:	f000 f81b 	bl	8009202 <_malloc_usable_size_r>
 80091cc:	4284      	cmp	r4, r0
 80091ce:	4607      	mov	r7, r0
 80091d0:	d802      	bhi.n	80091d8 <_realloc_r+0x34>
 80091d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80091d6:	d812      	bhi.n	80091fe <_realloc_r+0x5a>
 80091d8:	4621      	mov	r1, r4
 80091da:	4640      	mov	r0, r8
 80091dc:	f7ff fbfc 	bl	80089d8 <_malloc_r>
 80091e0:	4605      	mov	r5, r0
 80091e2:	2800      	cmp	r0, #0
 80091e4:	d0ed      	beq.n	80091c2 <_realloc_r+0x1e>
 80091e6:	42bc      	cmp	r4, r7
 80091e8:	4622      	mov	r2, r4
 80091ea:	4631      	mov	r1, r6
 80091ec:	bf28      	it	cs
 80091ee:	463a      	movcs	r2, r7
 80091f0:	f7ff fb9a 	bl	8008928 <memcpy>
 80091f4:	4631      	mov	r1, r6
 80091f6:	4640      	mov	r0, r8
 80091f8:	f7ff ff88 	bl	800910c <_free_r>
 80091fc:	e7e1      	b.n	80091c2 <_realloc_r+0x1e>
 80091fe:	4635      	mov	r5, r6
 8009200:	e7df      	b.n	80091c2 <_realloc_r+0x1e>

08009202 <_malloc_usable_size_r>:
 8009202:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009206:	1f18      	subs	r0, r3, #4
 8009208:	2b00      	cmp	r3, #0
 800920a:	bfbc      	itt	lt
 800920c:	580b      	ldrlt	r3, [r1, r0]
 800920e:	18c0      	addlt	r0, r0, r3
 8009210:	4770      	bx	lr
	...

08009214 <_init>:
 8009214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009216:	bf00      	nop
 8009218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800921a:	bc08      	pop	{r3}
 800921c:	469e      	mov	lr, r3
 800921e:	4770      	bx	lr

08009220 <_fini>:
 8009220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009222:	bf00      	nop
 8009224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009226:	bc08      	pop	{r3}
 8009228:	469e      	mov	lr, r3
 800922a:	4770      	bx	lr
