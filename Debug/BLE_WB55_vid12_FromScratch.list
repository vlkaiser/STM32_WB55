
BLE_WB55_vid12_FromScratch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1e0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c30  0800a320  0800a320  0001a320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800af50  0800af50  0001af50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800af58  0800af58  0001af58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800af5c  0800af5c  0001af5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  20000004  0800af60  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  2000008c  0800afe8  0002008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003e  20000128  0800b081  00020128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000168  0800b0bf  00020168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 00000084  2000017c  0800b0d0  0002017c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000007e8  20000200  0800b154  00020200  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200009e8  0800b154  000209e8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 17 .debug_info   00030a92  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00006157  00000000  00000000  00050cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002a50  00000000  00000000  00056e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002780  00000000  00000000  00059870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002d53d  00000000  00000000  0005bff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0002f395  00000000  00000000  0008952d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000f9e6a  00000000  00000000  000b88c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  001b272c  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000b558  00000000  00000000  001b277c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000200 	.word	0x20000200
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a308 	.word	0x0800a308

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000204 	.word	0x20000204
 800017c:	0800a308 	.word	0x0800a308

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <drawBitmap>:
*/
/**************************************************************************/

void drawBitmap(int16_t x, int16_t y, uint8_t *bitmap, int16_t w,
        int16_t h, uint16_t color, uint16_t bg)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
 800053a:	60ba      	str	r2, [r7, #8]
 800053c:	461a      	mov	r2, r3
 800053e:	4603      	mov	r3, r0
 8000540:	81fb      	strh	r3, [r7, #14]
 8000542:	460b      	mov	r3, r1
 8000544:	81bb      	strh	r3, [r7, #12]
 8000546:	4613      	mov	r3, r2
 8000548:	80fb      	strh	r3, [r7, #6]

    ssd1306_Fill(bg);		//Clear the screen
 800054a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800054c:	b2db      	uxtb	r3, r3
 800054e:	4618      	mov	r0, r3
 8000550:	f001 fd72 	bl	8002038 <ssd1306_Fill>

	int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000554:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000558:	3307      	adds	r3, #7
 800055a:	2b00      	cmp	r3, #0
 800055c:	da00      	bge.n	8000560 <drawBitmap+0x2c>
 800055e:	3307      	adds	r3, #7
 8000560:	10db      	asrs	r3, r3, #3
 8000562:	833b      	strh	r3, [r7, #24]
	uint8_t byte = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	75fb      	strb	r3, [r7, #23]

	//Height
	for (int16_t j = 0; j < h; j++, y++)
 8000568:	2300      	movs	r3, #0
 800056a:	83fb      	strh	r3, [r7, #30]
 800056c:	e068      	b.n	8000640 <drawBitmap+0x10c>
	{
		//Width
		for (int16_t i = 0; i < w; i++)
 800056e:	2300      	movs	r3, #0
 8000570:	83bb      	strh	r3, [r7, #28]
 8000572:	e053      	b.n	800061c <drawBitmap+0xe8>
		{
				byte = bitmap[j * byteWidth + i / 8];		// Row/Col of byte
 8000574:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000578:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800057c:	fb03 f202 	mul.w	r2, r3, r2
 8000580:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000584:	2b00      	cmp	r3, #0
 8000586:	da00      	bge.n	800058a <drawBitmap+0x56>
 8000588:	3307      	adds	r3, #7
 800058a:	10db      	asrs	r3, r3, #3
 800058c:	b21b      	sxth	r3, r3
 800058e:	4413      	add	r3, r2
 8000590:	461a      	mov	r2, r3
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4413      	add	r3, r2
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	75fb      	strb	r3, [r7, #23]

				for (int8_t cnt = 0; cnt < 8; cnt ++)
 800059a:	2300      	movs	r3, #0
 800059c:	76fb      	strb	r3, [r7, #27]
 800059e:	e02f      	b.n	8000600 <drawBitmap+0xcc>
				{
					//Shift left to right through byte to get each bit if the return val > 0, there is a 1 in that space.
					if ( (byte & (0x80 >> cnt)) == 0)
 80005a0:	7dfa      	ldrb	r2, [r7, #23]
 80005a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80005a6:	2180      	movs	r1, #128	; 0x80
 80005a8:	fa41 f303 	asr.w	r3, r1, r3
 80005ac:	4013      	ands	r3, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d110      	bne.n	80005d4 <drawBitmap+0xa0>
					{
						//  If 0, Background
						ssd1306_DrawPixel( x + i + cnt, y, bg);
 80005b2:	89fb      	ldrh	r3, [r7, #14]
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	8bbb      	ldrh	r3, [r7, #28]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	4413      	add	r3, r2
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	7efb      	ldrb	r3, [r7, #27]
 80005c0:	4413      	add	r3, r2
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	89ba      	ldrh	r2, [r7, #12]
 80005c6:	b2d1      	uxtb	r1, r2
 80005c8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80005ca:	b2d2      	uxtb	r2, r2
 80005cc:	4618      	mov	r0, r3
 80005ce:	f001 fd7f 	bl	80020d0 <ssd1306_DrawPixel>
 80005d2:	e00f      	b.n	80005f4 <drawBitmap+0xc0>
					}
					else
					{
						//if not 0, Pixel Color
						ssd1306_DrawPixel( x + i + cnt, y, color );
 80005d4:	89fb      	ldrh	r3, [r7, #14]
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	8bbb      	ldrh	r3, [r7, #28]
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	4413      	add	r3, r2
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	7efb      	ldrb	r3, [r7, #27]
 80005e2:	4413      	add	r3, r2
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	89ba      	ldrh	r2, [r7, #12]
 80005e8:	b2d1      	uxtb	r1, r2
 80005ea:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80005ec:	b2d2      	uxtb	r2, r2
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 fd6e 	bl	80020d0 <ssd1306_DrawPixel>
				for (int8_t cnt = 0; cnt < 8; cnt ++)
 80005f4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	3301      	adds	r3, #1
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	76fb      	strb	r3, [r7, #27]
 8000600:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000604:	2b07      	cmp	r3, #7
 8000606:	ddcb      	ble.n	80005a0 <drawBitmap+0x6c>
					}
				}
				// Increment x-pos by 1 byte
				i = i + 7;
 8000608:	8bbb      	ldrh	r3, [r7, #28]
 800060a:	3307      	adds	r3, #7
 800060c:	b29b      	uxth	r3, r3
 800060e:	83bb      	strh	r3, [r7, #28]
		for (int16_t i = 0; i < w; i++)
 8000610:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000614:	b29b      	uxth	r3, r3
 8000616:	3301      	adds	r3, #1
 8000618:	b29b      	uxth	r3, r3
 800061a:	83bb      	strh	r3, [r7, #28]
 800061c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000620:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000624:	429a      	cmp	r2, r3
 8000626:	dba5      	blt.n	8000574 <drawBitmap+0x40>
	for (int16_t j = 0; j < h; j++, y++)
 8000628:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800062c:	b29b      	uxth	r3, r3
 800062e:	3301      	adds	r3, #1
 8000630:	b29b      	uxth	r3, r3
 8000632:	83fb      	strh	r3, [r7, #30]
 8000634:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000638:	b29b      	uxth	r3, r3
 800063a:	3301      	adds	r3, #1
 800063c:	b29b      	uxth	r3, r3
 800063e:	81bb      	strh	r3, [r7, #12]
 8000640:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8000644:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000648:	429a      	cmp	r2, r3
 800064a:	db90      	blt.n	800056e <drawBitmap+0x3a>
			}
		}

	  ssd1306_UpdateScreen();
 800064c:	f001 fd18 	bl	8002080 <ssd1306_UpdateScreen>
	  return;
 8000650:	bf00      	nop

}
 8000652:	3720      	adds	r7, #32
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <writeSmFont>:

    @note	If you don't want overlapping text, clear the screen.
*/
/**************************************************************************/
void writeSmFont(int16_t x, int16_t y, uint16_t color, char* str)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4603      	mov	r3, r0
 8000662:	81fb      	strh	r3, [r7, #14]
 8000664:	460b      	mov	r3, r1
 8000666:	81bb      	strh	r3, [r7, #12]
 8000668:	4613      	mov	r3, r2
 800066a:	817b      	strh	r3, [r7, #10]
	ssd1306_SetCursor(x, y);
 800066c:	89fb      	ldrh	r3, [r7, #14]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	89ba      	ldrh	r2, [r7, #12]
 8000672:	b2d2      	uxtb	r2, r2
 8000674:	4611      	mov	r1, r2
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fe38 	bl	80022ec <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_7x10, color);
 800067c:	897b      	ldrh	r3, [r7, #10]
 800067e:	b2db      	uxtb	r3, r3
 8000680:	4a05      	ldr	r2, [pc, #20]	; (8000698 <writeSmFont+0x40>)
 8000682:	ca06      	ldmia	r2, {r1, r2}
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f001 fe0b 	bl	80022a0 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 800068a:	f001 fcf9 	bl	8002080 <ssd1306_UpdateScreen>
	return;
 800068e:	bf00      	nop
}
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000004 	.word	0x20000004

0800069c <clearScreen>:
	ssd1306_UpdateScreen();
	return;
}

void clearScreen(uint16_t color)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	80fb      	strh	r3, [r7, #6]
	ssd1306_Fill(color);
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 fcc4 	bl	8002038 <ssd1306_Fill>
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 80006b8:	b5b0      	push	{r4, r5, r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <APPD_EnableCPU2+0x34>)
 80006c0:	1d3c      	adds	r4, r7, #4
 80006c2:	461d      	mov	r5, r3
 80006c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006cc:	c403      	stmia	r4!, {r0, r1}
 80006ce:	8022      	strh	r2, [r4, #0]
 80006d0:	3402      	adds	r4, #2
 80006d2:	0c13      	lsrs	r3, r2, #16
 80006d4:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80006d6:	f007 fea3 	bl	8008420 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	4618      	mov	r0, r3
 80006de:	f007 f93e 	bl	800795e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80006e2:	bf00      	nop
}
 80006e4:	3720      	adds	r7, #32
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bdb0      	pop	{r4, r5, r7, pc}
 80006ea:	bf00      	nop
 80006ec:	0800a320 	.word	0x0800a320

080006f0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <LL_C2_PWR_SetPowerMode+0x28>)
 80006fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006fe:	f023 0207 	bic.w	r2, r3, #7
 8000702:	4905      	ldr	r1, [pc, #20]	; (8000718 <LL_C2_PWR_SetPowerMode+0x28>)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4313      	orrs	r3, r2
 8000708:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	58000400 	.word	0x58000400

0800071c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <LL_EXTI_EnableIT_32_63+0x24>)
 8000726:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800072a:	4905      	ldr	r1, [pc, #20]	; (8000740 <LL_EXTI_EnableIT_32_63+0x24>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4313      	orrs	r3, r2
 8000730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	58000800 	.word	0x58000800

08000744 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800074c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000750:	4a0a      	ldr	r2, [pc, #40]	; (800077c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000752:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800075a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800075e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	021b      	lsls	r3, r3, #8
 8000766:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800076a:	4313      	orrs	r3, r2
 800076c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	cafecafe 	.word	0xcafecafe

08000780 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800078c:	689b      	ldr	r3, [r3, #8]
 800078e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000792:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4313      	orrs	r3, r2
 800079a:	608b      	str	r3, [r1, #8]
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80007ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80007ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80007f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80007fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000800:	d101      	bne.n	8000806 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000802:	2301      	movs	r3, #1
 8000804:	e000      	b.n	8000808 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000806:	2300      	movs	r3, #0
}
 8000808:	4618      	mov	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800081a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800081e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000822:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000826:	d101      	bne.n	800082c <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000828:	2301      	movs	r3, #1
 800082a:	e000      	b.n	800082e <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000844:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000846:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4313      	orrs	r3, r2
 800084e:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000854:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4013      	ands	r3, r2
 800085a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800085c:	68fb      	ldr	r3, [r7, #12]
}
 800085e:	bf00      	nop
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
	...

0800086c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000870:	4b04      	ldr	r3, [pc, #16]	; (8000884 <LL_DBGMCU_GetRevisionID+0x18>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	0c1b      	lsrs	r3, r3, #16
 8000876:	b29b      	uxth	r3, r3
}
 8000878:	4618      	mov	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	e0042000 	.word	0xe0042000

08000888 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	685a      	ldr	r2, [r3, #4]
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	041b      	lsls	r3, r3, #16
 800089a:	431a      	orrs	r2, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	605a      	str	r2, [r3, #4]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	685a      	ldr	r2, [r3, #4]
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	431a      	orrs	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	605a      	str	r2, [r3, #4]
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b083      	sub	sp, #12
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
 80008d6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	695a      	ldr	r2, [r3, #20]
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	041b      	lsls	r3, r3, #16
 80008e0:	431a      	orrs	r2, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	615a      	str	r2, [r3, #20]
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80008f2:	b480      	push	{r7}
 80008f4:	b083      	sub	sp, #12
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
 80008fa:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	695a      	ldr	r2, [r3, #20]
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	431a      	orrs	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	615a      	str	r2, [r3, #20]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	683a      	ldr	r2, [r7, #0]
 8000922:	609a      	str	r2, [r3, #8]
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	683a      	ldr	r2, [r7, #0]
 800093e:	619a      	str	r2, [r3, #24]
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <LL_LPM_EnableSleep+0x1c>)
 8000952:	691b      	ldr	r3, [r3, #16]
 8000954:	4a04      	ldr	r2, [pc, #16]	; (8000968 <LL_LPM_EnableSleep+0x1c>)
 8000956:	f023 0304 	bic.w	r3, r3, #4
 800095a:	6113      	str	r3, [r2, #16]
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	22ff      	movs	r2, #255	; 0xff
 8000978:	625a      	str	r2, [r3, #36]	; 0x24
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000986:	b480      	push	{r7}
 8000988:	b083      	sub	sp, #12
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	22ca      	movs	r2, #202	; 0xca
 8000992:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2253      	movs	r2, #83	; 0x53
 8000998:	625a      	str	r2, [r3, #36]	; 0x24
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
 80009ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	f023 0207 	bic.w	r2, r3, #7
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	431a      	orrs	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	609a      	str	r2, [r3, #8]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <MX_APPE_Config+0x18>)
 80009d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009d6:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 80009d8:	f000 f824 	bl	8000a24 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80009dc:	f000 f864 	bl	8000aa8 <Config_HSE>

  return;
 80009e0:	bf00      	nop
}
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	58004000 	.word	0x58004000

080009e8 <MX_APPE_Init>:

void MX_APPE_Init( void )
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  System_Init( );       /**< System initialization */
 80009ec:	f000 f870 	bl	8000ad0 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80009f0:	f000 f888 	bl	8000b04 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80009f4:	4903      	ldr	r1, [pc, #12]	; (8000a04 <MX_APPE_Init+0x1c>)
 80009f6:	2000      	movs	r0, #0
 80009f8:	f000 fde4 	bl	80015c4 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80009fc:	f000 f890 	bl	8000b20 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000a00:	bf00      	nop
}
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200002b0 	.word	0x200002b0

08000a08 <Init_Smps>:

void Init_Smps( void )
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  return;
 8000a0c:	bf00      	nop
}
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <Init_Exti>:

void Init_Exti( void )
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63( LL_EXTI_LINE_36 & LL_EXTI_LINE_38 );
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f7ff fe7e 	bl	800071c <LL_EXTI_EnableIT_32_63>

  return;
 8000a20:	bf00      	nop
}
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8000a28:	f000 f804 	bl	8000a34 <Reset_BackupDomain>

  Reset_IPCC();
 8000a2c:	f000 f81a 	bl	8000a64 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW */

  return;
 8000a30:	bf00      	nop
}
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000a38:	f7ff fed8 	bl	80007ec <LL_RCC_IsActiveFlag_PINRST>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d00d      	beq.n	8000a5e <Reset_BackupDomain+0x2a>
 8000a42:	f7ff fee6 	bl	8000812 <LL_RCC_IsActiveFlag_SFTRST>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d108      	bne.n	8000a5e <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000a4c:	f002 ffe8 	bl	8003a20 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000a50:	f002 ffe6 	bl	8003a20 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000a54:	f7ff fea8 	bl	80007a8 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000a58:	f7ff feb7 	bl	80007ca <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000a5c:	bf00      	nop
 8000a5e:	bf00      	nop
}
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000a68:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000a6c:	f7ff fee4 	bl	8000838 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000a70:	213f      	movs	r1, #63	; 0x3f
 8000a72:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <Reset_IPCC+0x40>)
 8000a74:	f7ff ff4e 	bl	8000914 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000a78:	213f      	movs	r1, #63	; 0x3f
 8000a7a:	480a      	ldr	r0, [pc, #40]	; (8000aa4 <Reset_IPCC+0x40>)
 8000a7c:	f7ff ff58 	bl	8000930 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000a80:	213f      	movs	r1, #63	; 0x3f
 8000a82:	4808      	ldr	r0, [pc, #32]	; (8000aa4 <Reset_IPCC+0x40>)
 8000a84:	f7ff ff00 	bl	8000888 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000a88:	213f      	movs	r1, #63	; 0x3f
 8000a8a:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <Reset_IPCC+0x40>)
 8000a8c:	f7ff ff1f 	bl	80008ce <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000a90:	213f      	movs	r1, #63	; 0x3f
 8000a92:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <Reset_IPCC+0x40>)
 8000a94:	f7ff ff0a 	bl	80008ac <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000a98:	213f      	movs	r1, #63	; 0x3f
 8000a9a:	4802      	ldr	r0, [pc, #8]	; (8000aa4 <Reset_IPCC+0x40>)
 8000a9c:	f7ff ff29 	bl	80008f2 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000aa0:	bf00      	nop
}
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	58000c00 	.word	0x58000c00

08000aa8 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f007 fd42 	bl	8008538 <OTP_Read>
 8000ab4:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d005      	beq.n	8000ac8 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	799b      	ldrb	r3, [r3, #6]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fe3f 	bl	8000744 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000ac6:	bf00      	nop
 8000ac8:	bf00      	nop
}
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <System_Init>:

static void System_Init( void )
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  Init_Smps( );
 8000ad4:	f7ff ff98 	bl	8000a08 <Init_Smps>

  Init_Exti( );
 8000ad8:	f7ff ff9d 	bl	8000a16 <Init_Exti>

  Init_Rtc( );
 8000adc:	f000 f802 	bl	8000ae4 <Init_Rtc>

  return;
 8000ae0:	bf00      	nop
}
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <Init_Rtc>:

static void Init_Rtc( void )
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000ae8:	4805      	ldr	r0, [pc, #20]	; (8000b00 <Init_Rtc+0x1c>)
 8000aea:	f7ff ff4c 	bl	8000986 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000aee:	2100      	movs	r1, #0
 8000af0:	4803      	ldr	r0, [pc, #12]	; (8000b00 <Init_Rtc+0x1c>)
 8000af2:	f7ff ff58 	bl	80009a6 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000af6:	4802      	ldr	r0, [pc, #8]	; (8000b00 <Init_Rtc+0x1c>)
 8000af8:	f7ff ff38 	bl	800096c <LL_RTC_EnableWriteProtection>

  return;
 8000afc:	bf00      	nop
}
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40002800 	.word	0x40002800

08000b04 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000b08:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000b0c:	f7ff fe38 	bl	8000780 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000b10:	f008 fcea 	bl	80094e8 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000b14:	2004      	movs	r0, #4
 8000b16:	f7ff fdeb 	bl	80006f0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000b1a:	bf00      	nop
}
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b088      	sub	sp, #32
 8000b24:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000b26:	f007 fac5 	bl	80080b4 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000b2a:	4a11      	ldr	r2, [pc, #68]	; (8000b70 <appe_Tl_Init+0x50>)
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2008      	movs	r0, #8
 8000b30:	f008 fe06 	bl	8009740 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <appe_Tl_Init+0x54>)
 8000b36:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <appe_Tl_Init+0x58>)
 8000b3a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480e      	ldr	r0, [pc, #56]	; (8000b7c <appe_Tl_Init+0x5c>)
 8000b42:	f007 f97d 	bl	8007e40 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <appe_Tl_Init+0x60>)
 8000b48:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <appe_Tl_Init+0x64>)
 8000b4c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <appe_Tl_Init+0x68>)
 8000b50:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000b52:	f240 533c 	movw	r3, #1340	; 0x53c
 8000b56:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000b58:	f107 0308 	add.w	r3, r7, #8
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f007 fbeb 	bl	8008338 <TL_MM_Init>

  TL_Enable();
 8000b62:	f007 faa1 	bl	80080a8 <TL_Enable>

  return;
 8000b66:	bf00      	nop
}
 8000b68:	3720      	adds	r7, #32
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	08007e79 	.word	0x08007e79
 8000b74:	20030724 	.word	0x20030724
 8000b78:	08000b8d 	.word	0x08000b8d
 8000b7c:	08000ba5 	.word	0x08000ba5
 8000b80:	2003093c 	.word	0x2003093c
 8000b84:	20030830 	.word	0x20030830
 8000b88:	200301e8 	.word	0x200301e8

08000b8c <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000b96:	bf00      	nop
}
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	330b      	adds	r3, #11
 8000bb2:	61fb      	str	r3, [r7, #28]

  /* Read the firmware version of both the wireless firmware and the FUS */
  SHCI_GetWirelessFwInfo( &WirelessInfo );
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f006 fefd 	bl	80079b8 <SHCI_GetWirelessFwInfo>
  APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
  APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
  APP_DBG_MSG("FUS version %d.%d.%d\n\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

  switch(p_sys_event->subevtcode)
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000bc8:	2b07      	cmp	r3, #7
 8000bca:	d81b      	bhi.n	8000c04 <APPE_SysUserEvtRx+0x60>
 8000bcc:	a201      	add	r2, pc, #4	; (adr r2, 8000bd4 <APPE_SysUserEvtRx+0x30>)
 8000bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd2:	bf00      	nop
 8000bd4:	08000bf5 	.word	0x08000bf5
 8000bd8:	08000bfd 	.word	0x08000bfd
 8000bdc:	08000c05 	.word	0x08000c05
 8000be0:	08000c05 	.word	0x08000c05
 8000be4:	08000c05 	.word	0x08000c05
 8000be8:	08000c05 	.word	0x08000c05
 8000bec:	08000c05 	.word	0x08000c05
 8000bf0:	08000c05 	.word	0x08000c05
  {
  case SHCI_SUB_EVT_CODE_READY:
    APPE_SysEvtReadyProcessing(pPayload);
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f000 f81c 	bl	8000c32 <APPE_SysEvtReadyProcessing>
    break;
 8000bfa:	e004      	b.n	8000c06 <APPE_SysUserEvtRx+0x62>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APPE_SysEvtError(pPayload);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f000 f807 	bl	8000c10 <APPE_SysEvtError>
    break;
 8000c02:	e000      	b.n	8000c06 <APPE_SysUserEvtRx+0x62>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_ERASE\n");
    break;

  default:
    break;
 8000c04:	bf00      	nop
  }

  return;
 8000c06:	bf00      	nop
}
 8000c08:	3720      	adds	r7, #32
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop

08000c10 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( void * pPayload)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	330b      	adds	r3, #11
 8000c1e:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	3302      	adds	r3, #2
 8000c24:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000c26:	bf00      	nop
}
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void * pPayload )
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b08a      	sub	sp, #40	; 0x28
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000c3a:	f107 030c 	add.w	r3, r7, #12
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	330b      	adds	r3, #11
 8000c52:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000c54:	6a3b      	ldr	r3, [r7, #32]
 8000c56:	3302      	adds	r3, #2
 8000c58:	61fb      	str	r3, [r7, #28]

  if(p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d117      	bne.n	8000c92 <APPE_SysEvtReadyProcessing+0x60>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2( );
 8000c62:	f7ff fd29 	bl	80006b8 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000c66:	230d      	movs	r3, #13
 8000c68:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000c6a:	237f      	movs	r3, #127	; 0x7f
 8000c6c:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000c6e:	f7ff fdfd 	bl	800086c <LL_DBGMCU_GetRevisionID>
 8000c72:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG("DBGMCU_GetRevisionID= %lx \n\n", RevisionID);

    config_param.RevisionID = RevisionID;
 8000c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 8000c7a:	f107 030c 	add.w	r3, r7, #12
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f006 fe84 	bl	800798c <SHCI_C2_Config>

    APP_BLE_Init( );
 8000c84:	f007 fd62 	bl	800874c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f008 fc3e 	bl	800950c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n");
  }

  return;
 8000c90:	e007      	b.n	8000ca2 <APPE_SysEvtReadyProcessing+0x70>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d103      	bne.n	8000ca2 <APPE_SysEvtReadyProcessing+0x70>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
  return;
 8000ca0:	bf00      	nop
 8000ca2:	bf00      	nop
}
 8000ca4:	3728      	adds	r7, #40	; 0x28
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b084      	sub	sp, #16
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb2:	f001 fe41 	bl	8002938 <HAL_GetTick>
 8000cb6:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc2:	d00a      	beq.n	8000cda <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000cc4:	f001 fe50 	bl	8002968 <HAL_GetTickFreq>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	461a      	mov	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4413      	add	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cd2:	e002      	b.n	8000cda <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000cd4:	f7ff fe3a 	bl	800094c <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8000cd8:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000cda:	f001 fe2d 	bl	8002938 <HAL_GetTick>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	68fa      	ldr	r2, [r7, #12]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d8f4      	bhi.n	8000cd4 <HAL_Delay+0x2a>
  }
}
 8000cea:	bf00      	nop
 8000cec:	bf00      	nop
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cfc:	f008 fc36 	bl	800956c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8000d08:	bf00      	nop
}
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
 8000d1a:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f008 fc24 	bl	800956c <UTIL_SEQ_Run>

  return;
 8000d24:	bf00      	nop
}
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000d34:	2100      	movs	r1, #0
 8000d36:	2008      	movs	r0, #8
 8000d38:	f008 fd24 	bl	8009784 <UTIL_SEQ_SetTask>
  return;
 8000d3c:	bf00      	nop
}
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000d4c:	2002      	movs	r0, #2
 8000d4e:	f008 fd85 	bl	800985c <UTIL_SEQ_SetEvt>
  return;
 8000d52:	bf00      	nop
}
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000d62:	2002      	movs	r0, #2
 8000d64:	f008 fd9a 	bl	800989c <UTIL_SEQ_WaitEvt>
  return;
 8000d68:	bf00      	nop
}
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <LL_EXTI_EnableIT_0_31>:
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <LL_EXTI_EnableIT_0_31+0x24>)
 8000d7a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000d7e:	4905      	ldr	r1, [pc, #20]	; (8000d94 <LL_EXTI_EnableIT_0_31+0x24>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	58000800 	.word	0x58000800

08000d98 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4904      	ldr	r1, [pc, #16]	; (8000db8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	600b      	str	r3, [r1, #0]

}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	58000800 	.word	0x58000800

08000dbc <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <ReadRtcSsrValue+0x3c>)
 8000dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <ReadRtcSsrValue+0x3c>)
 8000dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000dd2:	e005      	b.n	8000de0 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <ReadRtcSsrValue+0x3c>)
 8000dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d1f5      	bne.n	8000dd4 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000de8:	683b      	ldr	r3, [r7, #0]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40002800 	.word	0x40002800

08000dfc <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	460a      	mov	r2, r1
 8000e06:	71fb      	strb	r3, [r7, #7]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000e0c:	79ba      	ldrb	r2, [r7, #6]
 8000e0e:	491d      	ldr	r1, [pc, #116]	; (8000e84 <LinkTimerAfter+0x88>)
 8000e10:	4613      	mov	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	440b      	add	r3, r1
 8000e1a:	3315      	adds	r3, #21
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d009      	beq.n	8000e3a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000e26:	7bfa      	ldrb	r2, [r7, #15]
 8000e28:	4916      	ldr	r1, [pc, #88]	; (8000e84 <LinkTimerAfter+0x88>)
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	4413      	add	r3, r2
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	440b      	add	r3, r1
 8000e34:	3314      	adds	r3, #20
 8000e36:	79fa      	ldrb	r2, [r7, #7]
 8000e38:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000e3a:	79fa      	ldrb	r2, [r7, #7]
 8000e3c:	4911      	ldr	r1, [pc, #68]	; (8000e84 <LinkTimerAfter+0x88>)
 8000e3e:	4613      	mov	r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	4413      	add	r3, r2
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	440b      	add	r3, r1
 8000e48:	3315      	adds	r3, #21
 8000e4a:	7bfa      	ldrb	r2, [r7, #15]
 8000e4c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000e4e:	79fa      	ldrb	r2, [r7, #7]
 8000e50:	490c      	ldr	r1, [pc, #48]	; (8000e84 <LinkTimerAfter+0x88>)
 8000e52:	4613      	mov	r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	4413      	add	r3, r2
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	440b      	add	r3, r1
 8000e5c:	3314      	adds	r3, #20
 8000e5e:	79ba      	ldrb	r2, [r7, #6]
 8000e60:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000e62:	79ba      	ldrb	r2, [r7, #6]
 8000e64:	4907      	ldr	r1, [pc, #28]	; (8000e84 <LinkTimerAfter+0x88>)
 8000e66:	4613      	mov	r3, r2
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	440b      	add	r3, r1
 8000e70:	3315      	adds	r3, #21
 8000e72:	79fa      	ldrb	r2, [r7, #7]
 8000e74:	701a      	strb	r2, [r3, #0]

  return;
 8000e76:	bf00      	nop
}
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	2000008c 	.word	0x2000008c

08000e88 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	460a      	mov	r2, r1
 8000e92:	71fb      	strb	r3, [r7, #7]
 8000e94:	4613      	mov	r3, r2
 8000e96:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000e98:	4b29      	ldr	r3, [pc, #164]	; (8000f40 <LinkTimerBefore+0xb8>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	79ba      	ldrb	r2, [r7, #6]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d032      	beq.n	8000f0a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000ea4:	79ba      	ldrb	r2, [r7, #6]
 8000ea6:	4927      	ldr	r1, [pc, #156]	; (8000f44 <LinkTimerBefore+0xbc>)
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	4413      	add	r3, r2
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	440b      	add	r3, r1
 8000eb2:	3314      	adds	r3, #20
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000eb8:	7bfa      	ldrb	r2, [r7, #15]
 8000eba:	4922      	ldr	r1, [pc, #136]	; (8000f44 <LinkTimerBefore+0xbc>)
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	4413      	add	r3, r2
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	440b      	add	r3, r1
 8000ec6:	3315      	adds	r3, #21
 8000ec8:	79fa      	ldrb	r2, [r7, #7]
 8000eca:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000ecc:	79fa      	ldrb	r2, [r7, #7]
 8000ece:	491d      	ldr	r1, [pc, #116]	; (8000f44 <LinkTimerBefore+0xbc>)
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4413      	add	r3, r2
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	440b      	add	r3, r1
 8000eda:	3315      	adds	r3, #21
 8000edc:	79ba      	ldrb	r2, [r7, #6]
 8000ede:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000ee0:	79fa      	ldrb	r2, [r7, #7]
 8000ee2:	4918      	ldr	r1, [pc, #96]	; (8000f44 <LinkTimerBefore+0xbc>)
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	4413      	add	r3, r2
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	440b      	add	r3, r1
 8000eee:	3314      	adds	r3, #20
 8000ef0:	7bfa      	ldrb	r2, [r7, #15]
 8000ef2:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000ef4:	79ba      	ldrb	r2, [r7, #6]
 8000ef6:	4913      	ldr	r1, [pc, #76]	; (8000f44 <LinkTimerBefore+0xbc>)
 8000ef8:	4613      	mov	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4413      	add	r3, r2
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	440b      	add	r3, r1
 8000f02:	3314      	adds	r3, #20
 8000f04:	79fa      	ldrb	r2, [r7, #7]
 8000f06:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000f08:	e014      	b.n	8000f34 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000f0a:	79fa      	ldrb	r2, [r7, #7]
 8000f0c:	490d      	ldr	r1, [pc, #52]	; (8000f44 <LinkTimerBefore+0xbc>)
 8000f0e:	4613      	mov	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4413      	add	r3, r2
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	440b      	add	r3, r1
 8000f18:	3315      	adds	r3, #21
 8000f1a:	79ba      	ldrb	r2, [r7, #6]
 8000f1c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000f1e:	79ba      	ldrb	r2, [r7, #6]
 8000f20:	4908      	ldr	r1, [pc, #32]	; (8000f44 <LinkTimerBefore+0xbc>)
 8000f22:	4613      	mov	r3, r2
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	4413      	add	r3, r2
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	440b      	add	r3, r1
 8000f2c:	3314      	adds	r3, #20
 8000f2e:	79fa      	ldrb	r2, [r7, #7]
 8000f30:	701a      	strb	r2, [r3, #0]
  return;
 8000f32:	bf00      	nop
}
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	2000011c 	.word	0x2000011c
 8000f44:	2000008c 	.word	0x2000008c

08000f48 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f52:	4b4e      	ldr	r3, [pc, #312]	; (800108c <linkTimer+0x144>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b06      	cmp	r3, #6
 8000f5a:	d118      	bne.n	8000f8e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000f5c:	4b4b      	ldr	r3, [pc, #300]	; (800108c <linkTimer+0x144>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4b4b      	ldr	r3, [pc, #300]	; (8001090 <linkTimer+0x148>)
 8000f64:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000f66:	4a49      	ldr	r2, [pc, #292]	; (800108c <linkTimer+0x144>)
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000f6c:	79fa      	ldrb	r2, [r7, #7]
 8000f6e:	4949      	ldr	r1, [pc, #292]	; (8001094 <linkTimer+0x14c>)
 8000f70:	4613      	mov	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	4413      	add	r3, r2
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	440b      	add	r3, r1
 8000f7a:	3315      	adds	r3, #21
 8000f7c:	2206      	movs	r2, #6
 8000f7e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000f80:	4b45      	ldr	r3, [pc, #276]	; (8001098 <linkTimer+0x150>)
 8000f82:	f04f 32ff 	mov.w	r2, #4294967295
 8000f86:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	81fb      	strh	r3, [r7, #14]
 8000f8c:	e078      	b.n	8001080 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000f8e:	f000 f909 	bl	80011a4 <ReturnTimeElapsed>
 8000f92:	4603      	mov	r3, r0
 8000f94:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000f96:	79fa      	ldrb	r2, [r7, #7]
 8000f98:	493e      	ldr	r1, [pc, #248]	; (8001094 <linkTimer+0x14c>)
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	4413      	add	r3, r2
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	440b      	add	r3, r1
 8000fa4:	3308      	adds	r3, #8
 8000fa6:	6819      	ldr	r1, [r3, #0]
 8000fa8:	89fb      	ldrh	r3, [r7, #14]
 8000faa:	79fa      	ldrb	r2, [r7, #7]
 8000fac:	4419      	add	r1, r3
 8000fae:	4839      	ldr	r0, [pc, #228]	; (8001094 <linkTimer+0x14c>)
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	4403      	add	r3, r0
 8000fba:	3308      	adds	r3, #8
 8000fbc:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000fbe:	79fa      	ldrb	r2, [r7, #7]
 8000fc0:	4934      	ldr	r1, [pc, #208]	; (8001094 <linkTimer+0x14c>)
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	4413      	add	r3, r2
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	440b      	add	r3, r1
 8000fcc:	3308      	adds	r3, #8
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000fd2:	4b2e      	ldr	r3, [pc, #184]	; (800108c <linkTimer+0x144>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4a2e      	ldr	r2, [pc, #184]	; (8001094 <linkTimer+0x14c>)
 8000fdc:	460b      	mov	r3, r1
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	440b      	add	r3, r1
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	3308      	adds	r3, #8
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d337      	bcc.n	8001060 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000ff0:	4b26      	ldr	r3, [pc, #152]	; (800108c <linkTimer+0x144>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000ff6:	7b7a      	ldrb	r2, [r7, #13]
 8000ff8:	4926      	ldr	r1, [pc, #152]	; (8001094 <linkTimer+0x14c>)
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	4413      	add	r3, r2
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	440b      	add	r3, r1
 8001004:	3315      	adds	r3, #21
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800100a:	e013      	b.n	8001034 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 800100c:	7b7a      	ldrb	r2, [r7, #13]
 800100e:	4921      	ldr	r1, [pc, #132]	; (8001094 <linkTimer+0x14c>)
 8001010:	4613      	mov	r3, r2
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	4413      	add	r3, r2
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	440b      	add	r3, r1
 800101a:	3315      	adds	r3, #21
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001020:	7b7a      	ldrb	r2, [r7, #13]
 8001022:	491c      	ldr	r1, [pc, #112]	; (8001094 <linkTimer+0x14c>)
 8001024:	4613      	mov	r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4413      	add	r3, r2
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	440b      	add	r3, r1
 800102e:	3315      	adds	r3, #21
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001034:	7b3b      	ldrb	r3, [r7, #12]
 8001036:	2b06      	cmp	r3, #6
 8001038:	d00b      	beq.n	8001052 <linkTimer+0x10a>
 800103a:	7b3a      	ldrb	r2, [r7, #12]
 800103c:	4915      	ldr	r1, [pc, #84]	; (8001094 <linkTimer+0x14c>)
 800103e:	4613      	mov	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	440b      	add	r3, r1
 8001048:	3308      	adds	r3, #8
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	68ba      	ldr	r2, [r7, #8]
 800104e:	429a      	cmp	r2, r3
 8001050:	d2dc      	bcs.n	800100c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001052:	7b7a      	ldrb	r2, [r7, #13]
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	4611      	mov	r1, r2
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fecf 	bl	8000dfc <LinkTimerAfter>
 800105e:	e00f      	b.n	8001080 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001060:	4b0a      	ldr	r3, [pc, #40]	; (800108c <linkTimer+0x144>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b2da      	uxtb	r2, r3
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	4611      	mov	r1, r2
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff0c 	bl	8000e88 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <linkTimer+0x144>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <linkTimer+0x148>)
 8001078:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800107a:	4a04      	ldr	r2, [pc, #16]	; (800108c <linkTimer+0x144>)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001080:	89fb      	ldrh	r3, [r7, #14]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2000011c 	.word	0x2000011c
 8001090:	2000011d 	.word	0x2000011d
 8001094:	2000008c 	.word	0x2000008c
 8001098:	20000120 	.word	0x20000120

0800109c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	460a      	mov	r2, r1
 80010a6:	71fb      	strb	r3, [r7, #7]
 80010a8:	4613      	mov	r3, r2
 80010aa:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80010ac:	4b39      	ldr	r3, [pc, #228]	; (8001194 <UnlinkTimer+0xf8>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	79fa      	ldrb	r2, [r7, #7]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d111      	bne.n	80010dc <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80010b8:	4b36      	ldr	r3, [pc, #216]	; (8001194 <UnlinkTimer+0xf8>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4b36      	ldr	r3, [pc, #216]	; (8001198 <UnlinkTimer+0xfc>)
 80010c0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80010c2:	79fa      	ldrb	r2, [r7, #7]
 80010c4:	4935      	ldr	r1, [pc, #212]	; (800119c <UnlinkTimer+0x100>)
 80010c6:	4613      	mov	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4413      	add	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	440b      	add	r3, r1
 80010d0:	3315      	adds	r3, #21
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4b2f      	ldr	r3, [pc, #188]	; (8001194 <UnlinkTimer+0xf8>)
 80010d8:	701a      	strb	r2, [r3, #0]
 80010da:	e03e      	b.n	800115a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80010dc:	79fa      	ldrb	r2, [r7, #7]
 80010de:	492f      	ldr	r1, [pc, #188]	; (800119c <UnlinkTimer+0x100>)
 80010e0:	4613      	mov	r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4413      	add	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	440b      	add	r3, r1
 80010ea:	3314      	adds	r3, #20
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80010f0:	79fa      	ldrb	r2, [r7, #7]
 80010f2:	492a      	ldr	r1, [pc, #168]	; (800119c <UnlinkTimer+0x100>)
 80010f4:	4613      	mov	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	4413      	add	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	440b      	add	r3, r1
 80010fe:	3315      	adds	r3, #21
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001104:	79f9      	ldrb	r1, [r7, #7]
 8001106:	7bfa      	ldrb	r2, [r7, #15]
 8001108:	4824      	ldr	r0, [pc, #144]	; (800119c <UnlinkTimer+0x100>)
 800110a:	460b      	mov	r3, r1
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	440b      	add	r3, r1
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	4403      	add	r3, r0
 8001114:	3315      	adds	r3, #21
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b2d8      	uxtb	r0, r3
 800111a:	4920      	ldr	r1, [pc, #128]	; (800119c <UnlinkTimer+0x100>)
 800111c:	4613      	mov	r3, r2
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	4413      	add	r3, r2
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	440b      	add	r3, r1
 8001126:	3315      	adds	r3, #21
 8001128:	4602      	mov	r2, r0
 800112a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800112c:	7bbb      	ldrb	r3, [r7, #14]
 800112e:	2b06      	cmp	r3, #6
 8001130:	d013      	beq.n	800115a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001132:	79f9      	ldrb	r1, [r7, #7]
 8001134:	7bba      	ldrb	r2, [r7, #14]
 8001136:	4819      	ldr	r0, [pc, #100]	; (800119c <UnlinkTimer+0x100>)
 8001138:	460b      	mov	r3, r1
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	440b      	add	r3, r1
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	4403      	add	r3, r0
 8001142:	3314      	adds	r3, #20
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b2d8      	uxtb	r0, r3
 8001148:	4914      	ldr	r1, [pc, #80]	; (800119c <UnlinkTimer+0x100>)
 800114a:	4613      	mov	r3, r2
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4413      	add	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	440b      	add	r3, r1
 8001154:	3314      	adds	r3, #20
 8001156:	4602      	mov	r2, r0
 8001158:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800115a:	79fa      	ldrb	r2, [r7, #7]
 800115c:	490f      	ldr	r1, [pc, #60]	; (800119c <UnlinkTimer+0x100>)
 800115e:	4613      	mov	r3, r2
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	4413      	add	r3, r2
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	440b      	add	r3, r1
 8001168:	330c      	adds	r3, #12
 800116a:	2201      	movs	r2, #1
 800116c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <UnlinkTimer+0xf8>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b06      	cmp	r3, #6
 8001176:	d107      	bne.n	8001188 <UnlinkTimer+0xec>
 8001178:	79bb      	ldrb	r3, [r7, #6]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d104      	bne.n	8001188 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <UnlinkTimer+0x104>)
 8001180:	f04f 32ff 	mov.w	r2, #4294967295
 8001184:	601a      	str	r2, [r3, #0]
  }

  return;
 8001186:	bf00      	nop
 8001188:	bf00      	nop
}
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	2000011c 	.word	0x2000011c
 8001198:	2000011d 	.word	0x2000011d
 800119c:	2000008c 	.word	0x2000008c
 80011a0:	20000120 	.word	0x20000120

080011a4 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80011aa:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <ReturnTimeElapsed+0x70>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b2:	d026      	beq.n	8001202 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80011b4:	f7ff fe02 	bl	8000dbc <ReadRtcSsrValue>
 80011b8:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80011ba:	4b16      	ldr	r3, [pc, #88]	; (8001214 <ReturnTimeElapsed+0x70>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d805      	bhi.n	80011d0 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <ReturnTimeElapsed+0x70>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	e00a      	b.n	80011e6 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <ReturnTimeElapsed+0x74>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80011dc:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <ReturnTimeElapsed+0x70>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <ReturnTimeElapsed+0x78>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	fb02 f303 	mul.w	r3, r2, r3
 80011f2:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80011f4:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <ReturnTimeElapsed+0x7c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	40d3      	lsrs	r3, r2
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	e001      	b.n	8001206 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	b29b      	uxth	r3, r3
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000120 	.word	0x20000120
 8001218:	20000222 	.word	0x20000222
 800121c:	20000221 	.word	0x20000221
 8001220:	20000220 	.word	0x20000220

08001224 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d108      	bne.n	8001246 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001234:	f7ff fdc2 	bl	8000dbc <ReadRtcSsrValue>
 8001238:	4603      	mov	r3, r0
 800123a:	4a24      	ldr	r2, [pc, #144]	; (80012cc <RestartWakeupCounter+0xa8>)
 800123c:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800123e:	2003      	movs	r0, #3
 8001240:	f001 fd1b 	bl	8002c7a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001244:	e03e      	b.n	80012c4 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d803      	bhi.n	8001254 <RestartWakeupCounter+0x30>
 800124c:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <RestartWakeupCounter+0xac>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d002      	beq.n	800125a <RestartWakeupCounter+0x36>
      Value -= 1;
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	3b01      	subs	r3, #1
 8001258:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800125a:	bf00      	nop
 800125c:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <RestartWakeupCounter+0xb0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0f7      	beq.n	800125c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <RestartWakeupCounter+0xb0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <RestartWakeupCounter+0xb0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001280:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <RestartWakeupCounter+0xb4>)
 8001284:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001288:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800128a:	2003      	movs	r0, #3
 800128c:	f001 fd03 	bl	8002c96 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <RestartWakeupCounter+0xb8>)
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	0c1b      	lsrs	r3, r3, #16
 8001296:	041b      	lsls	r3, r3, #16
 8001298:	88fa      	ldrh	r2, [r7, #6]
 800129a:	4910      	ldr	r1, [pc, #64]	; (80012dc <RestartWakeupCounter+0xb8>)
 800129c:	4313      	orrs	r3, r2
 800129e:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80012a0:	f7ff fd8c 	bl	8000dbc <ReadRtcSsrValue>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4a09      	ldr	r2, [pc, #36]	; (80012cc <RestartWakeupCounter+0xa8>)
 80012a8:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <RestartWakeupCounter+0xb0>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <RestartWakeupCounter+0xb0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80012bc:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80012be:	f3af 8000 	nop.w
  return ;
 80012c2:	bf00      	nop
}
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000120 	.word	0x20000120
 80012d0:	20000220 	.word	0x20000220
 80012d4:	2000021c 	.word	0x2000021c
 80012d8:	58000800 	.word	0x58000800
 80012dc:	40002800 	.word	0x40002800

080012e0 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80012e6:	4b47      	ldr	r3, [pc, #284]	; (8001404 <RescheduleTimerList+0x124>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012f2:	d108      	bne.n	8001306 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80012f4:	bf00      	nop
 80012f6:	4b44      	ldr	r3, [pc, #272]	; (8001408 <RescheduleTimerList+0x128>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f7      	bne.n	80012f6 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001306:	4b40      	ldr	r3, [pc, #256]	; (8001408 <RescheduleTimerList+0x128>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	4b3e      	ldr	r3, [pc, #248]	; (8001408 <RescheduleTimerList+0x128>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001318:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800131a:	4b3c      	ldr	r3, [pc, #240]	; (800140c <RescheduleTimerList+0x12c>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	493b      	ldr	r1, [pc, #236]	; (8001410 <RescheduleTimerList+0x130>)
 8001324:	4613      	mov	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4413      	add	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	440b      	add	r3, r1
 800132e:	3308      	adds	r3, #8
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001334:	f7ff ff36 	bl	80011a4 <ReturnTimeElapsed>
 8001338:	4603      	mov	r3, r0
 800133a:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	429a      	cmp	r2, r3
 8001342:	d205      	bcs.n	8001350 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001348:	4b32      	ldr	r3, [pc, #200]	; (8001414 <RescheduleTimerList+0x134>)
 800134a:	2201      	movs	r2, #1
 800134c:	701a      	strb	r2, [r3, #0]
 800134e:	e04d      	b.n	80013ec <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	4a31      	ldr	r2, [pc, #196]	; (8001418 <RescheduleTimerList+0x138>)
 8001354:	8812      	ldrh	r2, [r2, #0]
 8001356:	b292      	uxth	r2, r2
 8001358:	4413      	add	r3, r2
 800135a:	461a      	mov	r2, r3
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	4293      	cmp	r3, r2
 8001360:	d906      	bls.n	8001370 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001362:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <RescheduleTimerList+0x138>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001368:	4b2a      	ldr	r3, [pc, #168]	; (8001414 <RescheduleTimerList+0x134>)
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
 800136e:	e03d      	b.n	80013ec <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	b29a      	uxth	r2, r3
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800137a:	4b26      	ldr	r3, [pc, #152]	; (8001414 <RescheduleTimerList+0x134>)
 800137c:	2201      	movs	r2, #1
 800137e:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001380:	e034      	b.n	80013ec <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001382:	7bfa      	ldrb	r2, [r7, #15]
 8001384:	4922      	ldr	r1, [pc, #136]	; (8001410 <RescheduleTimerList+0x130>)
 8001386:	4613      	mov	r3, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	4413      	add	r3, r2
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	440b      	add	r3, r1
 8001390:	3308      	adds	r3, #8
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	429a      	cmp	r2, r3
 8001398:	d20a      	bcs.n	80013b0 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800139a:	7bfa      	ldrb	r2, [r7, #15]
 800139c:	491c      	ldr	r1, [pc, #112]	; (8001410 <RescheduleTimerList+0x130>)
 800139e:	4613      	mov	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	4413      	add	r3, r2
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	440b      	add	r3, r1
 80013a8:	3308      	adds	r3, #8
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	e013      	b.n	80013d8 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80013b0:	7bfa      	ldrb	r2, [r7, #15]
 80013b2:	4917      	ldr	r1, [pc, #92]	; (8001410 <RescheduleTimerList+0x130>)
 80013b4:	4613      	mov	r3, r2
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4413      	add	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	440b      	add	r3, r1
 80013be:	3308      	adds	r3, #8
 80013c0:	6819      	ldr	r1, [r3, #0]
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	7bfa      	ldrb	r2, [r7, #15]
 80013c6:	1ac9      	subs	r1, r1, r3
 80013c8:	4811      	ldr	r0, [pc, #68]	; (8001410 <RescheduleTimerList+0x130>)
 80013ca:	4613      	mov	r3, r2
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	4413      	add	r3, r2
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	4403      	add	r3, r0
 80013d4:	3308      	adds	r3, #8
 80013d6:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80013d8:	7bfa      	ldrb	r2, [r7, #15]
 80013da:	490d      	ldr	r1, [pc, #52]	; (8001410 <RescheduleTimerList+0x130>)
 80013dc:	4613      	mov	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	440b      	add	r3, r1
 80013e6:	3315      	adds	r3, #21
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d1c7      	bne.n	8001382 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80013f2:	89bb      	ldrh	r3, [r7, #12]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff15 	bl	8001224 <RestartWakeupCounter>

  return ;
 80013fa:	bf00      	nop
}
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40002800 	.word	0x40002800
 8001408:	2000021c 	.word	0x2000021c
 800140c:	2000011c 	.word	0x2000011c
 8001410:	2000008c 	.word	0x2000008c
 8001414:	20000124 	.word	0x20000124
 8001418:	20000224 	.word	0x20000224

0800141c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001422:	f3ef 8310 	mrs	r3, PRIMASK
 8001426:	617b      	str	r3, [r7, #20]
  return(result);
 8001428:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800142c:	b672      	cpsid	i
}
 800142e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001430:	4b5f      	ldr	r3, [pc, #380]	; (80015b0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	22ca      	movs	r2, #202	; 0xca
 8001438:	625a      	str	r2, [r3, #36]	; 0x24
 800143a:	4b5d      	ldr	r3, [pc, #372]	; (80015b0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2253      	movs	r2, #83	; 0x53
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001444:	4b5a      	ldr	r3, [pc, #360]	; (80015b0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	4b58      	ldr	r3, [pc, #352]	; (80015b0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001456:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001458:	4b56      	ldr	r3, [pc, #344]	; (80015b4 <HW_TS_RTC_Wakeup_Handler+0x198>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001460:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001464:	4954      	ldr	r1, [pc, #336]	; (80015b8 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	440b      	add	r3, r1
 8001470:	330c      	adds	r3, #12
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d172      	bne.n	8001560 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800147a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800147e:	494e      	ldr	r1, [pc, #312]	; (80015b8 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001480:	4613      	mov	r3, r2
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4413      	add	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	440b      	add	r3, r1
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800148e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001492:	4949      	ldr	r1, [pc, #292]	; (80015b8 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001494:	4613      	mov	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	440b      	add	r3, r1
 800149e:	3310      	adds	r3, #16
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80014a4:	4b45      	ldr	r3, [pc, #276]	; (80015bc <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d050      	beq.n	8001550 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80014ae:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80014b2:	4941      	ldr	r1, [pc, #260]	; (80015b8 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80014b4:	4613      	mov	r3, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	4413      	add	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	440b      	add	r3, r1
 80014be:	330d      	adds	r3, #13
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d126      	bne.n	8001516 <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80014c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014cc:	2101      	movs	r1, #1
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fde4 	bl	800109c <UnlinkTimer>
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	f383 8810 	msr	PRIMASK, r3
}
 80014de:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80014e0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80014e4:	4934      	ldr	r1, [pc, #208]	; (80015b8 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80014e6:	4613      	mov	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	4413      	add	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	440b      	add	r3, r1
 80014f0:	3304      	adds	r3, #4
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014f8:	4611      	mov	r1, r2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f9d4 	bl	80018a8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001500:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	22ca      	movs	r2, #202	; 0xca
 8001508:	625a      	str	r2, [r3, #36]	; 0x24
 800150a:	4b29      	ldr	r3, [pc, #164]	; (80015b0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2253      	movs	r2, #83	; 0x53
 8001512:	625a      	str	r2, [r3, #36]	; 0x24
 8001514:	e014      	b.n	8001540 <HW_TS_RTC_Wakeup_Handler+0x124>
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f383 8810 	msr	PRIMASK, r3
}
 8001520:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001522:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f932 	bl	8001790 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800152c:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	22ca      	movs	r2, #202	; 0xca
 8001534:	625a      	str	r2, [r3, #36]	; 0x24
 8001536:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2253      	movs	r2, #83	; 0x53
 800153e:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001540:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001544:	69fa      	ldr	r2, [r7, #28]
 8001546:	4619      	mov	r1, r3
 8001548:	69b8      	ldr	r0, [r7, #24]
 800154a:	f000 fa35 	bl	80019b8 <HW_TS_RTC_Int_AppNot>
 800154e:	e025      	b.n	800159c <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8001550:	f7ff fec6 	bl	80012e0 <RescheduleTimerList>
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	f383 8810 	msr	PRIMASK, r3
}
 800155e:	e01d      	b.n	800159c <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001560:	bf00      	nop
 8001562:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f7      	beq.n	8001562 <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001572:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	b2da      	uxtb	r2, r3
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001586:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001588:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 800158a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f383 8810 	msr	PRIMASK, r3
}
 800159a:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	22ff      	movs	r2, #255	; 0xff
 80015a4:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80015a6:	bf00      	nop
}
 80015a8:	3728      	adds	r7, #40	; 0x28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	2000021c 	.word	0x2000021c
 80015b4:	2000011c 	.word	0x2000011c
 80015b8:	2000008c 	.word	0x2000008c
 80015bc:	20000124 	.word	0x20000124
 80015c0:	58000800 	.word	0x58000800

080015c4 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	6039      	str	r1, [r7, #0]
 80015ce:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 80015d0:	4a64      	ldr	r2, [pc, #400]	; (8001764 <HW_TS_Init+0x1a0>)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80015d6:	4b63      	ldr	r3, [pc, #396]	; (8001764 <HW_TS_Init+0x1a0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	22ca      	movs	r2, #202	; 0xca
 80015de:	625a      	str	r2, [r3, #36]	; 0x24
 80015e0:	4b60      	ldr	r3, [pc, #384]	; (8001764 <HW_TS_Init+0x1a0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2253      	movs	r2, #83	; 0x53
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80015ea:	4b5f      	ldr	r3, [pc, #380]	; (8001768 <HW_TS_Init+0x1a4>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	4a5e      	ldr	r2, [pc, #376]	; (8001768 <HW_TS_Init+0x1a4>)
 80015f0:	f043 0320 	orr.w	r3, r3, #32
 80015f4:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80015f6:	4b5c      	ldr	r3, [pc, #368]	; (8001768 <HW_TS_Init+0x1a4>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	b2db      	uxtb	r3, r3
 8001602:	f1c3 0304 	rsb	r3, r3, #4
 8001606:	b2da      	uxtb	r2, r3
 8001608:	4b58      	ldr	r3, [pc, #352]	; (800176c <HW_TS_Init+0x1a8>)
 800160a:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800160c:	4b56      	ldr	r3, [pc, #344]	; (8001768 <HW_TS_Init+0x1a4>)
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001614:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001618:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	fa92 f2a2 	rbit	r2, r2
 8001620:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	2a00      	cmp	r2, #0
 800162a:	d101      	bne.n	8001630 <HW_TS_Init+0x6c>
  {
    return 32U;
 800162c:	2220      	movs	r2, #32
 800162e:	e003      	b.n	8001638 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	fab2 f282 	clz	r2, r2
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	40d3      	lsrs	r3, r2
 800163a:	b2db      	uxtb	r3, r3
 800163c:	3301      	adds	r3, #1
 800163e:	b2da      	uxtb	r2, r3
 8001640:	4b4b      	ldr	r3, [pc, #300]	; (8001770 <HW_TS_Init+0x1ac>)
 8001642:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001644:	4b48      	ldr	r3, [pc, #288]	; (8001768 <HW_TS_Init+0x1a4>)
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	b29b      	uxth	r3, r3
 800164a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800164e:	b29b      	uxth	r3, r3
 8001650:	3301      	adds	r3, #1
 8001652:	b29a      	uxth	r2, r3
 8001654:	4b47      	ldr	r3, [pc, #284]	; (8001774 <HW_TS_Init+0x1b0>)
 8001656:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001658:	4b46      	ldr	r3, [pc, #280]	; (8001774 <HW_TS_Init+0x1b0>)
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	3b01      	subs	r3, #1
 800165e:	4a44      	ldr	r2, [pc, #272]	; (8001770 <HW_TS_Init+0x1ac>)
 8001660:	7812      	ldrb	r2, [r2, #0]
 8001662:	fb02 f303 	mul.w	r3, r2, r3
 8001666:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800166a:	4a40      	ldr	r2, [pc, #256]	; (800176c <HW_TS_Init+0x1a8>)
 800166c:	7812      	ldrb	r2, [r2, #0]
 800166e:	40d3      	lsrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001678:	4293      	cmp	r3, r2
 800167a:	d904      	bls.n	8001686 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800167c:	4b3e      	ldr	r3, [pc, #248]	; (8001778 <HW_TS_Init+0x1b4>)
 800167e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001682:	801a      	strh	r2, [r3, #0]
 8001684:	e003      	b.n	800168e <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	b29a      	uxth	r2, r3
 800168a:	4b3b      	ldr	r3, [pc, #236]	; (8001778 <HW_TS_Init+0x1b4>)
 800168c:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800168e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001692:	f7ff fb81 	bl	8000d98 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001696:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800169a:	f7ff fb69 	bl	8000d70 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d143      	bne.n	800172c <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80016a4:	4b35      	ldr	r3, [pc, #212]	; (800177c <HW_TS_Init+0x1b8>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80016aa:	4b35      	ldr	r3, [pc, #212]	; (8001780 <HW_TS_Init+0x1bc>)
 80016ac:	f04f 32ff 	mov.w	r2, #4294967295
 80016b0:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	77fb      	strb	r3, [r7, #31]
 80016b6:	e00c      	b.n	80016d2 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80016b8:	7ffa      	ldrb	r2, [r7, #31]
 80016ba:	4932      	ldr	r1, [pc, #200]	; (8001784 <HW_TS_Init+0x1c0>)
 80016bc:	4613      	mov	r3, r2
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	4413      	add	r3, r2
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	440b      	add	r3, r1
 80016c6:	330c      	adds	r3, #12
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80016cc:	7ffb      	ldrb	r3, [r7, #31]
 80016ce:	3301      	adds	r3, #1
 80016d0:	77fb      	strb	r3, [r7, #31]
 80016d2:	7ffb      	ldrb	r3, [r7, #31]
 80016d4:	2b05      	cmp	r3, #5
 80016d6:	d9ef      	bls.n	80016b8 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80016d8:	4b2b      	ldr	r3, [pc, #172]	; (8001788 <HW_TS_Init+0x1c4>)
 80016da:	2206      	movs	r2, #6
 80016dc:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80016de:	4b21      	ldr	r3, [pc, #132]	; (8001764 <HW_TS_Init+0x1a0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <HW_TS_Init+0x1a0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016f0:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80016f2:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <HW_TS_Init+0x1a0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	4b19      	ldr	r3, [pc, #100]	; (8001764 <HW_TS_Init+0x1a0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001706:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001708:	4b20      	ldr	r3, [pc, #128]	; (800178c <HW_TS_Init+0x1c8>)
 800170a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800170e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001710:	2003      	movs	r0, #3
 8001712:	f001 fac0 	bl	8002c96 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <HW_TS_Init+0x1a0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <HW_TS_Init+0x1a0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	e00a      	b.n	8001742 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 800172c:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <HW_TS_Init+0x1a0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001738:	2b00      	cmp	r3, #0
 800173a:	d002      	beq.n	8001742 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800173c:	2003      	movs	r0, #3
 800173e:	f001 fa9c 	bl	8002c7a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001742:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HW_TS_Init+0x1a0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	22ff      	movs	r2, #255	; 0xff
 800174a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800174c:	2200      	movs	r2, #0
 800174e:	2103      	movs	r1, #3
 8001750:	2003      	movs	r0, #3
 8001752:	f001 fa50 	bl	8002bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001756:	2003      	movs	r0, #3
 8001758:	f001 fa67 	bl	8002c2a <HAL_NVIC_EnableIRQ>

  return;
 800175c:	bf00      	nop
}
 800175e:	3720      	adds	r7, #32
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	2000021c 	.word	0x2000021c
 8001768:	40002800 	.word	0x40002800
 800176c:	20000220 	.word	0x20000220
 8001770:	20000221 	.word	0x20000221
 8001774:	20000222 	.word	0x20000222
 8001778:	20000224 	.word	0x20000224
 800177c:	20000124 	.word	0x20000124
 8001780:	20000120 	.word	0x20000120
 8001784:	2000008c 	.word	0x2000008c
 8001788:	2000011c 	.word	0x2000011c
 800178c:	58000800 	.word	0x58000800

08001790 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800179a:	f3ef 8310 	mrs	r3, PRIMASK
 800179e:	60fb      	str	r3, [r7, #12]
  return(result);
 80017a0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80017a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80017a4:	b672      	cpsid	i
}
 80017a6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80017a8:	2003      	movs	r0, #3
 80017aa:	f001 fa4c 	bl	8002c46 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80017ae:	4b38      	ldr	r3, [pc, #224]	; (8001890 <HW_TS_Stop+0x100>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	22ca      	movs	r2, #202	; 0xca
 80017b6:	625a      	str	r2, [r3, #36]	; 0x24
 80017b8:	4b35      	ldr	r3, [pc, #212]	; (8001890 <HW_TS_Stop+0x100>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2253      	movs	r2, #83	; 0x53
 80017c0:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80017c2:	79fa      	ldrb	r2, [r7, #7]
 80017c4:	4933      	ldr	r1, [pc, #204]	; (8001894 <HW_TS_Stop+0x104>)
 80017c6:	4613      	mov	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	440b      	add	r3, r1
 80017d0:	330c      	adds	r3, #12
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d148      	bne.n	800186c <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	2100      	movs	r1, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fc5c 	bl	800109c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80017e4:	4b2c      	ldr	r3, [pc, #176]	; (8001898 <HW_TS_Stop+0x108>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80017ea:	7cfb      	ldrb	r3, [r7, #19]
 80017ec:	2b06      	cmp	r3, #6
 80017ee:	d135      	bne.n	800185c <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80017f0:	4b2a      	ldr	r3, [pc, #168]	; (800189c <HW_TS_Stop+0x10c>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fc:	d108      	bne.n	8001810 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80017fe:	bf00      	nop
 8001800:	4b23      	ldr	r3, [pc, #140]	; (8001890 <HW_TS_Stop+0x100>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1f7      	bne.n	8001800 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001810:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <HW_TS_Stop+0x100>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <HW_TS_Stop+0x100>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001822:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001824:	bf00      	nop
 8001826:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <HW_TS_Stop+0x100>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f7      	beq.n	8001826 <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001836:	4b16      	ldr	r3, [pc, #88]	; (8001890 <HW_TS_Stop+0x100>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	4b13      	ldr	r3, [pc, #76]	; (8001890 <HW_TS_Stop+0x100>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800184a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800184c:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <HW_TS_Stop+0x110>)
 800184e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001852:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001854:	2003      	movs	r0, #3
 8001856:	f001 fa1e 	bl	8002c96 <HAL_NVIC_ClearPendingIRQ>
 800185a:	e007      	b.n	800186c <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <HW_TS_Stop+0x114>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	7cfa      	ldrb	r2, [r7, #19]
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 8001868:	f7ff fd3a 	bl	80012e0 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <HW_TS_Stop+0x100>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	22ff      	movs	r2, #255	; 0xff
 8001874:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001876:	2003      	movs	r0, #3
 8001878:	f001 f9d7 	bl	8002c2a <HAL_NVIC_EnableIRQ>
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	f383 8810 	msr	PRIMASK, r3
}
 8001886:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001888:	bf00      	nop
}
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	2000021c 	.word	0x2000021c
 8001894:	2000008c 	.word	0x2000008c
 8001898:	2000011c 	.word	0x2000011c
 800189c:	40002800 	.word	0x40002800
 80018a0:	58000800 	.word	0x58000800
 80018a4:	2000011d 	.word	0x2000011d

080018a8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	6039      	str	r1, [r7, #0]
 80018b2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80018b4:	79fa      	ldrb	r2, [r7, #7]
 80018b6:	493c      	ldr	r1, [pc, #240]	; (80019a8 <HW_TS_Start+0x100>)
 80018b8:	4613      	mov	r3, r2
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	4413      	add	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	440b      	add	r3, r1
 80018c2:	330c      	adds	r3, #12
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d103      	bne.n	80018d4 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff ff5e 	bl	8001790 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018d4:	f3ef 8310 	mrs	r3, PRIMASK
 80018d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80018da:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80018dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80018de:	b672      	cpsid	i
}
 80018e0:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80018e2:	2003      	movs	r0, #3
 80018e4:	f001 f9af 	bl	8002c46 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80018e8:	4b30      	ldr	r3, [pc, #192]	; (80019ac <HW_TS_Start+0x104>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	22ca      	movs	r2, #202	; 0xca
 80018f0:	625a      	str	r2, [r3, #36]	; 0x24
 80018f2:	4b2e      	ldr	r3, [pc, #184]	; (80019ac <HW_TS_Start+0x104>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2253      	movs	r2, #83	; 0x53
 80018fa:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80018fc:	79fa      	ldrb	r2, [r7, #7]
 80018fe:	492a      	ldr	r1, [pc, #168]	; (80019a8 <HW_TS_Start+0x100>)
 8001900:	4613      	mov	r3, r2
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4413      	add	r3, r2
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	440b      	add	r3, r1
 800190a:	330c      	adds	r3, #12
 800190c:	2202      	movs	r2, #2
 800190e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001910:	79fa      	ldrb	r2, [r7, #7]
 8001912:	4925      	ldr	r1, [pc, #148]	; (80019a8 <HW_TS_Start+0x100>)
 8001914:	4613      	mov	r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4413      	add	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	440b      	add	r3, r1
 800191e:	3308      	adds	r3, #8
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001924:	79fa      	ldrb	r2, [r7, #7]
 8001926:	4920      	ldr	r1, [pc, #128]	; (80019a8 <HW_TS_Start+0x100>)
 8001928:	4613      	mov	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	440b      	add	r3, r1
 8001932:	3304      	adds	r3, #4
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fb04 	bl	8000f48 <linkTimer>
 8001940:	4603      	mov	r3, r0
 8001942:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001944:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <HW_TS_Start+0x108>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800194a:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <HW_TS_Start+0x10c>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	7c7a      	ldrb	r2, [r7, #17]
 8001952:	429a      	cmp	r2, r3
 8001954:	d002      	beq.n	800195c <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 8001956:	f7ff fcc3 	bl	80012e0 <RescheduleTimerList>
 800195a:	e013      	b.n	8001984 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800195c:	79fa      	ldrb	r2, [r7, #7]
 800195e:	4912      	ldr	r1, [pc, #72]	; (80019a8 <HW_TS_Start+0x100>)
 8001960:	4613      	mov	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4413      	add	r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	440b      	add	r3, r1
 800196a:	3308      	adds	r3, #8
 800196c:	6819      	ldr	r1, [r3, #0]
 800196e:	8a7b      	ldrh	r3, [r7, #18]
 8001970:	79fa      	ldrb	r2, [r7, #7]
 8001972:	1ac9      	subs	r1, r1, r3
 8001974:	480c      	ldr	r0, [pc, #48]	; (80019a8 <HW_TS_Start+0x100>)
 8001976:	4613      	mov	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	4413      	add	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	4403      	add	r3, r0
 8001980:	3308      	adds	r3, #8
 8001982:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001984:	4b09      	ldr	r3, [pc, #36]	; (80019ac <HW_TS_Start+0x104>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	22ff      	movs	r2, #255	; 0xff
 800198c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800198e:	2003      	movs	r0, #3
 8001990:	f001 f94b 	bl	8002c2a <HAL_NVIC_EnableIRQ>
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	f383 8810 	msr	PRIMASK, r3
}
 800199e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80019a0:	bf00      	nop
}
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	2000008c 	.word	0x2000008c
 80019ac:	2000021c 	.word	0x2000021c
 80019b0:	2000011c 	.word	0x2000011c
 80019b4:	2000011d 	.word	0x2000011d

080019b8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	460b      	mov	r3, r1
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4798      	blx	r3

  return;
 80019ca:	bf00      	nop
}
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <LL_RCC_LSE_SetDriveCapability>:
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80019da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e2:	f023 0218 	bic.w	r2, r3, #24
 80019e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <LL_AHB2_GRP1_EnableClock>:
{
 80019fe:	b480      	push	{r7}
 8001a00:	b085      	sub	sp, #20
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a22:	68fb      	ldr	r3, [r7, #12]
}
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <drawLogo>:
* 						- Remember to init ssd1306_Init();
* 						- I2C Config - Pull-up, Max output speed = HIGH
* 						- I2C Clock: PCLK1
******************************************************************************************************/

void drawLogo() {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af04      	add	r7, sp, #16

	drawBitmap(7, 20, (uint8_t *)JaktoolLogoBMP, JaktoolLogoWidth, JaktoolLogoHeight, White, Black);
 8001a36:	2300      	movs	r3, #0
 8001a38:	9302      	str	r3, [sp, #8]
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	9301      	str	r3, [sp, #4]
 8001a3e:	2315      	movs	r3, #21
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	2373      	movs	r3, #115	; 0x73
 8001a44:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <drawLogo+0x2c>)
 8001a46:	2114      	movs	r1, #20
 8001a48:	2007      	movs	r0, #7
 8001a4a:	f7fe fd73 	bl	8000534 <drawBitmap>
	HAL_Delay(150);
 8001a4e:	2096      	movs	r0, #150	; 0x96
 8001a50:	f7ff f92b 	bl	8000caa <HAL_Delay>

}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	0800a514 	.word	0x0800a514

08001a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	; 0x28
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	//UART Message Buffer:
	char MSG[35] = {'\0'};
 8001a66:	2300      	movs	r3, #0
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	f107 0308 	add.w	r3, r7, #8
 8001a6e:	221f      	movs	r2, #31
 8001a70:	2100      	movs	r1, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f007 fffa 	bl	8009a6c <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a78:	f000 fef0 	bl	800285c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001a7c:	f7fe ffa6 	bl	80009cc <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a80:	f000 f834 	bl	8001aec <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001a84:	f000 f894 	bl	8001bb0 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8001a88:	f000 f8f2 	bl	8001c70 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a8c:	f000 f98c 	bl	8001da8 <MX_GPIO_Init>
  MX_RF_Init();
 8001a90:	f000 f902 	bl	8001c98 <MX_RF_Init>
  MX_RTC_Init();
 8001a94:	f000 f908 	bl	8001ca8 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001a98:	f000 f93a 	bl	8001d10 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001a9c:	f000 f8a8 	bl	8001bf0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Initialize OLED
  ssd1306_Init();
 8001aa0:	f000 fa60 	bl	8001f64 <ssd1306_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001aa4:	f7fe ffa0 	bl	80009e8 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  drawLogo();
 8001aa8:	f7ff ffc2 	bl	8001a30 <drawLogo>
  HAL_Delay(150);
 8001aac:	2096      	movs	r0, #150	; 0x96
 8001aae:	f7ff f8fc 	bl	8000caa <HAL_Delay>

  sprintf(MSG, "Initializing... \r\n");
 8001ab2:	1d3b      	adds	r3, r7, #4
 8001ab4:	490c      	ldr	r1, [pc, #48]	; (8001ae8 <main+0x88>)
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f007 ffe0 	bl	8009a7c <siprintf>
  UART_Transmit((uint8_t*)MSG, strlen(MSG));
 8001abc:	1d3b      	adds	r3, r7, #4
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fb5e 	bl	8000180 <strlen>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	4611      	mov	r1, r2
 8001acc:	4618      	mov	r0, r3
 8001ace:	f000 f9c5 	bl	8001e5c <UART_Transmit>

  clearScreen(Black);
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f7fe fde2 	bl	800069c <clearScreen>
  OLED_Transmit_Line1((uint8_t*)MSG);
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 f9da 	bl	8001e94 <OLED_Transmit_Line1>

  while (1)
  {

    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001ae0:	f7ff f908 	bl	8000cf4 <MX_APPE_Process>
 8001ae4:	e7fc      	b.n	8001ae0 <main+0x80>
 8001ae6:	bf00      	nop
 8001ae8:	0800a33c 	.word	0x0800a33c

08001aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b09a      	sub	sp, #104	; 0x68
 8001af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001af2:	f107 0320 	add.w	r3, r7, #32
 8001af6:	2248      	movs	r2, #72	; 0x48
 8001af8:	2100      	movs	r1, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f007 ffb6 	bl	8009a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	60da      	str	r2, [r3, #12]
 8001b0c:	611a      	str	r2, [r3, #16]
 8001b0e:	615a      	str	r2, [r3, #20]
 8001b10:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b12:	f001 ff85 	bl	8003a20 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001b16:	2000      	movs	r0, #0
 8001b18:	f7ff ff5b 	bl	80019d2 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b1c:	4b23      	ldr	r3, [pc, #140]	; (8001bac <SystemClock_Config+0xc0>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b24:	4a21      	ldr	r2, [pc, #132]	; (8001bac <SystemClock_Config+0xc0>)
 8001b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <SystemClock_Config+0xc0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b34:	603b      	str	r3, [r7, #0]
 8001b36:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001b38:	2327      	movs	r3, #39	; 0x27
 8001b3a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b42:	2301      	movs	r3, #1
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b50:	2340      	movs	r3, #64	; 0x40
 8001b52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001b54:	2300      	movs	r3, #0
 8001b56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001b58:	23a0      	movs	r3, #160	; 0xa0
 8001b5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b60:	f107 0320 	add.w	r3, r7, #32
 8001b64:	4618      	mov	r0, r3
 8001b66:	f002 faef 	bl	8004148 <HAL_RCC_OscConfig>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001b70:	f000 f9ba 	bl	8001ee8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001b74:	236f      	movs	r3, #111	; 0x6f
 8001b76:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001b7c:	2380      	movs	r3, #128	; 0x80
 8001b7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b80:	2300      	movs	r3, #0
 8001b82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	2101      	movs	r1, #1
 8001b94:	4618      	mov	r0, r3
 8001b96:	f002 fe65 	bl	8004864 <HAL_RCC_ClockConfig>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001ba0:	f000 f9a2 	bl	8001ee8 <Error_Handler>
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	3768      	adds	r7, #104	; 0x68
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	58000400 	.word	0x58000400

08001bb0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b094      	sub	sp, #80	; 0x50
 8001bb4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bb6:	463b      	mov	r3, r7
 8001bb8:	2250      	movs	r2, #80	; 0x50
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f007 ff55 	bl	8009a6c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001bc2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001bc6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001bc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bcc:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bd6:	463b      	mov	r3, r7
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f003 fa80 	bl	80050de <HAL_RCCEx_PeriphCLKConfig>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001be4:	f000 f980 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001be8:	bf00      	nop
 8001bea:	3750      	adds	r7, #80	; 0x50
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001bf6:	4a1c      	ldr	r2, [pc, #112]	; (8001c68 <MX_I2C1_Init+0x78>)
 8001bf8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8001bfa:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001bfc:	4a1b      	ldr	r2, [pc, #108]	; (8001c6c <MX_I2C1_Init+0x7c>)
 8001bfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c00:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c06:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c0c:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c12:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c24:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c2a:	480e      	ldr	r0, [pc, #56]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c2c:	f001 fa20 	bl	8003070 <HAL_I2C_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c36:	f000 f957 	bl	8001ee8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4809      	ldr	r0, [pc, #36]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c3e:	f001 fdd1 	bl	80037e4 <HAL_I2CEx_ConfigAnalogFilter>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c48:	f000 f94e 	bl	8001ee8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4805      	ldr	r0, [pc, #20]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c50:	f001 fe13 	bl	800387a <HAL_I2CEx_ConfigDigitalFilter>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c5a:	f000 f945 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000228 	.word	0x20000228
 8001c68:	40005400 	.word	0x40005400
 8001c6c:	00303d5b 	.word	0x00303d5b

08001c70 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <MX_IPCC_Init+0x20>)
 8001c76:	4a07      	ldr	r2, [pc, #28]	; (8001c94 <MX_IPCC_Init+0x24>)
 8001c78:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001c7a:	4805      	ldr	r0, [pc, #20]	; (8001c90 <MX_IPCC_Init+0x20>)
 8001c7c:	f001 fe4a 	bl	8003914 <HAL_IPCC_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001c86:	f000 f92f 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000274 	.word	0x20000274
 8001c94:	58000c00 	.word	0x58000c00

08001c98 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001cac:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <MX_RTC_Init+0x60>)
 8001cae:	4a17      	ldr	r2, [pc, #92]	; (8001d0c <MX_RTC_Init+0x64>)
 8001cb0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <MX_RTC_Init+0x60>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001cb8:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <MX_RTC_Init+0x60>)
 8001cba:	220f      	movs	r2, #15
 8001cbc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001cbe:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <MX_RTC_Init+0x60>)
 8001cc0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001cc4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <MX_RTC_Init+0x60>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ccc:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <MX_RTC_Init+0x60>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <MX_RTC_Init+0x60>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <MX_RTC_Init+0x60>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cde:	480a      	ldr	r0, [pc, #40]	; (8001d08 <MX_RTC_Init+0x60>)
 8001ce0:	f003 fc84 	bl	80055ec <HAL_RTC_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001cea:	f000 f8fd 	bl	8001ee8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <MX_RTC_Init+0x60>)
 8001cf4:	f003 fd68 	bl	80057c8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001cfe:	f000 f8f3 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200002b0 	.word	0x200002b0
 8001d0c:	40002800 	.word	0x40002800

08001d10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d14:	4b22      	ldr	r3, [pc, #136]	; (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d16:	4a23      	ldr	r2, [pc, #140]	; (8001da4 <MX_USART1_UART_Init+0x94>)
 8001d18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d1a:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d22:	4b1f      	ldr	r3, [pc, #124]	; (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d28:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d2e:	4b1c      	ldr	r3, [pc, #112]	; (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d34:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d36:	220c      	movs	r2, #12
 8001d38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3a:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d40:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d46:	4b16      	ldr	r3, [pc, #88]	; (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d4c:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d52:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d58:	4811      	ldr	r0, [pc, #68]	; (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d5a:	f003 fe11 	bl	8005980 <HAL_UART_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001d64:	f000 f8c0 	bl	8001ee8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d68:	2100      	movs	r1, #0
 8001d6a:	480d      	ldr	r0, [pc, #52]	; (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d6c:	f004 fb04 	bl	8006378 <HAL_UARTEx_SetTxFifoThreshold>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d76:	f000 f8b7 	bl	8001ee8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4808      	ldr	r0, [pc, #32]	; (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d7e:	f004 fb39 	bl	80063f4 <HAL_UARTEx_SetRxFifoThreshold>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d88:	f000 f8ae 	bl	8001ee8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d8c:	4804      	ldr	r0, [pc, #16]	; (8001da0 <MX_USART1_UART_Init+0x90>)
 8001d8e:	f004 faba 	bl	8006306 <HAL_UARTEx_DisableFifoMode>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001d98:	f000 f8a6 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	200002d4 	.word	0x200002d4
 8001da4:	40013800 	.word	0x40013800

08001da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dae:	1d3b      	adds	r3, r7, #4
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dbc:	2004      	movs	r0, #4
 8001dbe:	f7ff fe1e 	bl	80019fe <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc2:	2002      	movs	r0, #2
 8001dc4:	f7ff fe1b 	bl	80019fe <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc8:	2001      	movs	r0, #1
 8001dca:	f7ff fe18 	bl	80019fe <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dce:	2008      	movs	r0, #8
 8001dd0:	f7ff fe15 	bl	80019fe <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2123      	movs	r1, #35	; 0x23
 8001dd8:	481d      	ldr	r0, [pc, #116]	; (8001e50 <MX_GPIO_Init+0xa8>)
 8001dda:	f001 f8f3 	bl	8002fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001dde:	2310      	movs	r3, #16
 8001de0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001de6:	2301      	movs	r3, #1
 8001de8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	4619      	mov	r1, r3
 8001dee:	4819      	ldr	r0, [pc, #100]	; (8001e54 <MX_GPIO_Init+0xac>)
 8001df0:	f000 ff60 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001df4:	2323      	movs	r3, #35	; 0x23
 8001df6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e00:	2300      	movs	r3, #0
 8001e02:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	4619      	mov	r1, r3
 8001e08:	4811      	ldr	r0, [pc, #68]	; (8001e50 <MX_GPIO_Init+0xa8>)
 8001e0a:	f000 ff53 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e12:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001e20:	230a      	movs	r3, #10
 8001e22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e24:	1d3b      	adds	r3, r7, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e2c:	f000 ff42 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001e30:	2303      	movs	r3, #3
 8001e32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e3c:	1d3b      	adds	r3, r7, #4
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4805      	ldr	r0, [pc, #20]	; (8001e58 <MX_GPIO_Init+0xb0>)
 8001e42:	f000 ff37 	bl	8002cb4 <HAL_GPIO_Init>

}
 8001e46:	bf00      	nop
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	48000400 	.word	0x48000400
 8001e54:	48000800 	.word	0x48000800
 8001e58:	48000c00 	.word	0x48000c00

08001e5c <UART_Transmit>:
* 						- size: sizeof Message : strlen(MSG)
* @return				- 0 if success, 1 if fail
*
* @note					- Simplifies Write to UART from anywhere that inherits main.h
******************************************************************************************************/
int UART_Transmit(uint8_t* data, uint16_t size){
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	807b      	strh	r3, [r7, #2]
	  HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, data, size, 0xffff);
 8001e68:	887a      	ldrh	r2, [r7, #2]
 8001e6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	4807      	ldr	r0, [pc, #28]	; (8001e90 <UART_Transmit+0x34>)
 8001e72:	f003 fdd5 	bl	8005a20 <HAL_UART_Transmit>
 8001e76:	4603      	mov	r3, r0
 8001e78:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK) {
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <UART_Transmit+0x28>
        //while (1);
        return 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	e000      	b.n	8001e86 <UART_Transmit+0x2a>
    }
    return 1;
 8001e84:	2301      	movs	r3, #1
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	200002d4 	.word	0x200002d4

08001e94 <OLED_Transmit_Line1>:
* @param[in]			- data: Message : char MSG[35] = {'\0'};
* @return				- void
*
* @note					- Simplifies Write to OLED from anywhere that inherits main.h
******************************************************************************************************/
void OLED_Transmit_Line1(uint8_t* data){
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]

	writeSmFont(0, 2, White, data);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	2102      	movs	r1, #2
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f7fe fbd8 	bl	8000658 <writeSmFont>

}
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <OLED_Transmit_Line2>:
* @param[in]			- data: Message : char MSG[35] = {'\0'};
* @return				- void
*
* @note					- Simplifies Write to OLED from anywhere that inherits main.h
******************************************************************************************************/
void OLED_Transmit_Line2(uint8_t* data){
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

	writeSmFont(0, 26, White, data);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	211a      	movs	r1, #26
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7fe fbca 	bl	8000658 <writeSmFont>

}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <OLED_Transmit_Line3>:
* @param[in]			- data: Message : char MSG[35] = {'\0'};
* @return				- void
*
* @note					- Simplifies Write to OLED from anywhere that inherits main.h
******************************************************************************************************/
void OLED_Transmit_Line3(uint8_t* data){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]

	writeSmFont(0, 50, White, data);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	2132      	movs	r1, #50	; 0x32
 8001eda:	2000      	movs	r0, #0
 8001edc:	f7fe fbbc 	bl	8000658 <writeSmFont>

}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001eec:	b672      	cpsid	i
}
 8001eee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <Error_Handler+0x8>

08001ef2 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af04      	add	r7, sp, #16
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0e:	9302      	str	r3, [sp, #8]
 8001f10:	2301      	movs	r3, #1
 8001f12:	9301      	str	r3, [sp, #4]
 8001f14:	1dfb      	adds	r3, r7, #7
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	2301      	movs	r3, #1
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2178      	movs	r1, #120	; 0x78
 8001f1e:	4803      	ldr	r0, [pc, #12]	; (8001f2c <ssd1306_WriteCommand+0x2c>)
 8001f20:	f001 f936 	bl	8003190 <HAL_I2C_Mem_Write>
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000228 	.word	0x20000228

08001f30 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af04      	add	r7, sp, #16
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f42:	9202      	str	r2, [sp, #8]
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	2240      	movs	r2, #64	; 0x40
 8001f4e:	2178      	movs	r1, #120	; 0x78
 8001f50:	4803      	ldr	r0, [pc, #12]	; (8001f60 <ssd1306_WriteData+0x30>)
 8001f52:	f001 f91d 	bl	8003190 <HAL_I2C_Mem_Write>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000228 	.word	0x20000228

08001f64 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001f68:	f7ff ffc3 	bl	8001ef2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001f6c:	2064      	movs	r0, #100	; 0x64
 8001f6e:	f7fe fe9c 	bl	8000caa <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001f72:	2000      	movs	r0, #0
 8001f74:	f000 f9e6 	bl	8002344 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001f78:	2020      	movs	r0, #32
 8001f7a:	f7ff ffc1 	bl	8001f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f7ff ffbe 	bl	8001f00 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001f84:	20b0      	movs	r0, #176	; 0xb0
 8001f86:	f7ff ffbb 	bl	8001f00 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001f8a:	20c8      	movs	r0, #200	; 0xc8
 8001f8c:	f7ff ffb8 	bl	8001f00 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001f90:	2000      	movs	r0, #0
 8001f92:	f7ff ffb5 	bl	8001f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001f96:	2010      	movs	r0, #16
 8001f98:	f7ff ffb2 	bl	8001f00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001f9c:	2040      	movs	r0, #64	; 0x40
 8001f9e:	f7ff ffaf 	bl	8001f00 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001fa2:	20ff      	movs	r0, #255	; 0xff
 8001fa4:	f000 f9ba 	bl	800231c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001fa8:	20a1      	movs	r0, #161	; 0xa1
 8001faa:	f7ff ffa9 	bl	8001f00 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001fae:	20a6      	movs	r0, #166	; 0xa6
 8001fb0:	f7ff ffa6 	bl	8001f00 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001fb4:	20a8      	movs	r0, #168	; 0xa8
 8001fb6:	f7ff ffa3 	bl	8001f00 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001fba:	203f      	movs	r0, #63	; 0x3f
 8001fbc:	f7ff ffa0 	bl	8001f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001fc0:	20a4      	movs	r0, #164	; 0xa4
 8001fc2:	f7ff ff9d 	bl	8001f00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001fc6:	20d3      	movs	r0, #211	; 0xd3
 8001fc8:	f7ff ff9a 	bl	8001f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f7ff ff97 	bl	8001f00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001fd2:	20d5      	movs	r0, #213	; 0xd5
 8001fd4:	f7ff ff94 	bl	8001f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001fd8:	20f0      	movs	r0, #240	; 0xf0
 8001fda:	f7ff ff91 	bl	8001f00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001fde:	20d9      	movs	r0, #217	; 0xd9
 8001fe0:	f7ff ff8e 	bl	8001f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001fe4:	2022      	movs	r0, #34	; 0x22
 8001fe6:	f7ff ff8b 	bl	8001f00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001fea:	20da      	movs	r0, #218	; 0xda
 8001fec:	f7ff ff88 	bl	8001f00 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001ff0:	2012      	movs	r0, #18
 8001ff2:	f7ff ff85 	bl	8001f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001ff6:	20db      	movs	r0, #219	; 0xdb
 8001ff8:	f7ff ff82 	bl	8001f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001ffc:	2020      	movs	r0, #32
 8001ffe:	f7ff ff7f 	bl	8001f00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002002:	208d      	movs	r0, #141	; 0x8d
 8002004:	f7ff ff7c 	bl	8001f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002008:	2014      	movs	r0, #20
 800200a:	f7ff ff79 	bl	8001f00 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800200e:	2001      	movs	r0, #1
 8002010:	f000 f998 	bl	8002344 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002014:	2000      	movs	r0, #0
 8002016:	f000 f80f 	bl	8002038 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800201a:	f000 f831 	bl	8002080 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800201e:	4b05      	ldr	r3, [pc, #20]	; (8002034 <ssd1306_Init+0xd0>)
 8002020:	2200      	movs	r2, #0
 8002022:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002024:	4b03      	ldr	r3, [pc, #12]	; (8002034 <ssd1306_Init+0xd0>)
 8002026:	2200      	movs	r2, #0
 8002028:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800202a:	4b02      	ldr	r3, [pc, #8]	; (8002034 <ssd1306_Init+0xd0>)
 800202c:	2201      	movs	r2, #1
 800202e:	715a      	strb	r2, [r3, #5]
}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000764 	.word	0x20000764

08002038 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	e00d      	b.n	8002064 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <ssd1306_Fill+0x1a>
 800204e:	2100      	movs	r1, #0
 8002050:	e000      	b.n	8002054 <ssd1306_Fill+0x1c>
 8002052:	21ff      	movs	r1, #255	; 0xff
 8002054:	4a09      	ldr	r2, [pc, #36]	; (800207c <ssd1306_Fill+0x44>)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4413      	add	r3, r2
 800205a:	460a      	mov	r2, r1
 800205c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	3301      	adds	r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800206a:	d3ed      	bcc.n	8002048 <ssd1306_Fill+0x10>
    }
}
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000364 	.word	0x20000364

08002080 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002086:	2300      	movs	r3, #0
 8002088:	71fb      	strb	r3, [r7, #7]
 800208a:	e016      	b.n	80020ba <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	3b50      	subs	r3, #80	; 0x50
 8002090:	b2db      	uxtb	r3, r3
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff ff34 	bl	8001f00 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8002098:	2000      	movs	r0, #0
 800209a:	f7ff ff31 	bl	8001f00 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800209e:	2010      	movs	r0, #16
 80020a0:	f7ff ff2e 	bl	8001f00 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	01db      	lsls	r3, r3, #7
 80020a8:	4a08      	ldr	r2, [pc, #32]	; (80020cc <ssd1306_UpdateScreen+0x4c>)
 80020aa:	4413      	add	r3, r2
 80020ac:	2180      	movs	r1, #128	; 0x80
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff ff3e 	bl	8001f30 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	3301      	adds	r3, #1
 80020b8:	71fb      	strb	r3, [r7, #7]
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	2b07      	cmp	r3, #7
 80020be:	d9e5      	bls.n	800208c <ssd1306_UpdateScreen+0xc>
    }
}
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000364 	.word	0x20000364

080020d0 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
 80020da:	460b      	mov	r3, r1
 80020dc:	71bb      	strb	r3, [r7, #6]
 80020de:	4613      	mov	r3, r2
 80020e0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	db48      	blt.n	800217c <ssd1306_DrawPixel+0xac>
 80020ea:	79bb      	ldrb	r3, [r7, #6]
 80020ec:	2b3f      	cmp	r3, #63	; 0x3f
 80020ee:	d845      	bhi.n	800217c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80020f0:	4b25      	ldr	r3, [pc, #148]	; (8002188 <ssd1306_DrawPixel+0xb8>)
 80020f2:	791b      	ldrb	r3, [r3, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d006      	beq.n	8002106 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 80020f8:	797b      	ldrb	r3, [r7, #5]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	bf0c      	ite	eq
 80020fe:	2301      	moveq	r3, #1
 8002100:	2300      	movne	r3, #0
 8002102:	b2db      	uxtb	r3, r3
 8002104:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8002106:	797b      	ldrb	r3, [r7, #5]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d11a      	bne.n	8002142 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800210c:	79fa      	ldrb	r2, [r7, #7]
 800210e:	79bb      	ldrb	r3, [r7, #6]
 8002110:	08db      	lsrs	r3, r3, #3
 8002112:	b2d8      	uxtb	r0, r3
 8002114:	4603      	mov	r3, r0
 8002116:	01db      	lsls	r3, r3, #7
 8002118:	4413      	add	r3, r2
 800211a:	4a1c      	ldr	r2, [pc, #112]	; (800218c <ssd1306_DrawPixel+0xbc>)
 800211c:	5cd3      	ldrb	r3, [r2, r3]
 800211e:	b25a      	sxtb	r2, r3
 8002120:	79bb      	ldrb	r3, [r7, #6]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	2101      	movs	r1, #1
 8002128:	fa01 f303 	lsl.w	r3, r1, r3
 800212c:	b25b      	sxtb	r3, r3
 800212e:	4313      	orrs	r3, r2
 8002130:	b259      	sxtb	r1, r3
 8002132:	79fa      	ldrb	r2, [r7, #7]
 8002134:	4603      	mov	r3, r0
 8002136:	01db      	lsls	r3, r3, #7
 8002138:	4413      	add	r3, r2
 800213a:	b2c9      	uxtb	r1, r1
 800213c:	4a13      	ldr	r2, [pc, #76]	; (800218c <ssd1306_DrawPixel+0xbc>)
 800213e:	54d1      	strb	r1, [r2, r3]
 8002140:	e01d      	b.n	800217e <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002142:	79fa      	ldrb	r2, [r7, #7]
 8002144:	79bb      	ldrb	r3, [r7, #6]
 8002146:	08db      	lsrs	r3, r3, #3
 8002148:	b2d8      	uxtb	r0, r3
 800214a:	4603      	mov	r3, r0
 800214c:	01db      	lsls	r3, r3, #7
 800214e:	4413      	add	r3, r2
 8002150:	4a0e      	ldr	r2, [pc, #56]	; (800218c <ssd1306_DrawPixel+0xbc>)
 8002152:	5cd3      	ldrb	r3, [r2, r3]
 8002154:	b25a      	sxtb	r2, r3
 8002156:	79bb      	ldrb	r3, [r7, #6]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	2101      	movs	r1, #1
 800215e:	fa01 f303 	lsl.w	r3, r1, r3
 8002162:	b25b      	sxtb	r3, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	b25b      	sxtb	r3, r3
 8002168:	4013      	ands	r3, r2
 800216a:	b259      	sxtb	r1, r3
 800216c:	79fa      	ldrb	r2, [r7, #7]
 800216e:	4603      	mov	r3, r0
 8002170:	01db      	lsls	r3, r3, #7
 8002172:	4413      	add	r3, r2
 8002174:	b2c9      	uxtb	r1, r1
 8002176:	4a05      	ldr	r2, [pc, #20]	; (800218c <ssd1306_DrawPixel+0xbc>)
 8002178:	54d1      	strb	r1, [r2, r3]
 800217a:	e000      	b.n	800217e <ssd1306_DrawPixel+0xae>
        return;
 800217c:	bf00      	nop
    }
}
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	20000764 	.word	0x20000764
 800218c:	20000364 	.word	0x20000364

08002190 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002190:	b590      	push	{r4, r7, lr}
 8002192:	b089      	sub	sp, #36	; 0x24
 8002194:	af00      	add	r7, sp, #0
 8002196:	4604      	mov	r4, r0
 8002198:	1d38      	adds	r0, r7, #4
 800219a:	e880 0006 	stmia.w	r0, {r1, r2}
 800219e:	461a      	mov	r2, r3
 80021a0:	4623      	mov	r3, r4
 80021a2:	73fb      	strb	r3, [r7, #15]
 80021a4:	4613      	mov	r3, r2
 80021a6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	2b1f      	cmp	r3, #31
 80021ac:	d902      	bls.n	80021b4 <ssd1306_WriteChar+0x24>
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	2b7e      	cmp	r3, #126	; 0x7e
 80021b2:	d901      	bls.n	80021b8 <ssd1306_WriteChar+0x28>
        return 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	e06d      	b.n	8002294 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80021b8:	4b38      	ldr	r3, [pc, #224]	; (800229c <ssd1306_WriteChar+0x10c>)
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	793b      	ldrb	r3, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	2b80      	cmp	r3, #128	; 0x80
 80021c4:	dc06      	bgt.n	80021d4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80021c6:	4b35      	ldr	r3, [pc, #212]	; (800229c <ssd1306_WriteChar+0x10c>)
 80021c8:	885b      	ldrh	r3, [r3, #2]
 80021ca:	461a      	mov	r2, r3
 80021cc:	797b      	ldrb	r3, [r7, #5]
 80021ce:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80021d0:	2b40      	cmp	r3, #64	; 0x40
 80021d2:	dd01      	ble.n	80021d8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	e05d      	b.n	8002294 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80021d8:	2300      	movs	r3, #0
 80021da:	61fb      	str	r3, [r7, #28]
 80021dc:	e04c      	b.n	8002278 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	3b20      	subs	r3, #32
 80021e4:	7979      	ldrb	r1, [r7, #5]
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4619      	mov	r1, r3
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	440b      	add	r3, r1
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	4413      	add	r3, r2
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80021f8:	2300      	movs	r3, #0
 80021fa:	61bb      	str	r3, [r7, #24]
 80021fc:	e034      	b.n	8002268 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d012      	beq.n	8002234 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800220e:	4b23      	ldr	r3, [pc, #140]	; (800229c <ssd1306_WriteChar+0x10c>)
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	b2da      	uxtb	r2, r3
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	4413      	add	r3, r2
 800221a:	b2d8      	uxtb	r0, r3
 800221c:	4b1f      	ldr	r3, [pc, #124]	; (800229c <ssd1306_WriteChar+0x10c>)
 800221e:	885b      	ldrh	r3, [r3, #2]
 8002220:	b2da      	uxtb	r2, r3
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	b2db      	uxtb	r3, r3
 8002226:	4413      	add	r3, r2
 8002228:	b2db      	uxtb	r3, r3
 800222a:	7bba      	ldrb	r2, [r7, #14]
 800222c:	4619      	mov	r1, r3
 800222e:	f7ff ff4f 	bl	80020d0 <ssd1306_DrawPixel>
 8002232:	e016      	b.n	8002262 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002234:	4b19      	ldr	r3, [pc, #100]	; (800229c <ssd1306_WriteChar+0x10c>)
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	b2da      	uxtb	r2, r3
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	b2db      	uxtb	r3, r3
 800223e:	4413      	add	r3, r2
 8002240:	b2d8      	uxtb	r0, r3
 8002242:	4b16      	ldr	r3, [pc, #88]	; (800229c <ssd1306_WriteChar+0x10c>)
 8002244:	885b      	ldrh	r3, [r3, #2]
 8002246:	b2da      	uxtb	r2, r3
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	4413      	add	r3, r2
 800224e:	b2d9      	uxtb	r1, r3
 8002250:	7bbb      	ldrb	r3, [r7, #14]
 8002252:	2b00      	cmp	r3, #0
 8002254:	bf0c      	ite	eq
 8002256:	2301      	moveq	r3, #1
 8002258:	2300      	movne	r3, #0
 800225a:	b2db      	uxtb	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	f7ff ff37 	bl	80020d0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	3301      	adds	r3, #1
 8002266:	61bb      	str	r3, [r7, #24]
 8002268:	793b      	ldrb	r3, [r7, #4]
 800226a:	461a      	mov	r2, r3
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	4293      	cmp	r3, r2
 8002270:	d3c5      	bcc.n	80021fe <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3301      	adds	r3, #1
 8002276:	61fb      	str	r3, [r7, #28]
 8002278:	797b      	ldrb	r3, [r7, #5]
 800227a:	461a      	mov	r2, r3
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	4293      	cmp	r3, r2
 8002280:	d3ad      	bcc.n	80021de <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <ssd1306_WriteChar+0x10c>)
 8002284:	881a      	ldrh	r2, [r3, #0]
 8002286:	793b      	ldrb	r3, [r7, #4]
 8002288:	b29b      	uxth	r3, r3
 800228a:	4413      	add	r3, r2
 800228c:	b29a      	uxth	r2, r3
 800228e:	4b03      	ldr	r3, [pc, #12]	; (800229c <ssd1306_WriteChar+0x10c>)
 8002290:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002292:	7bfb      	ldrb	r3, [r7, #15]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3724      	adds	r7, #36	; 0x24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd90      	pop	{r4, r7, pc}
 800229c:	20000764 	.word	0x20000764

080022a0 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	1d38      	adds	r0, r7, #4
 80022aa:	e880 0006 	stmia.w	r0, {r1, r2}
 80022ae:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80022b0:	e012      	b.n	80022d8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	7818      	ldrb	r0, [r3, #0]
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	1d3a      	adds	r2, r7, #4
 80022ba:	ca06      	ldmia	r2, {r1, r2}
 80022bc:	f7ff ff68 	bl	8002190 <ssd1306_WriteChar>
 80022c0:	4603      	mov	r3, r0
 80022c2:	461a      	mov	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d002      	beq.n	80022d2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	e008      	b.n	80022e4 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	3301      	adds	r3, #1
 80022d6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1e8      	bne.n	80022b2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	781b      	ldrb	r3, [r3, #0]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	460a      	mov	r2, r1
 80022f6:	71fb      	strb	r3, [r7, #7]
 80022f8:	4613      	mov	r3, r2
 80022fa:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	b29a      	uxth	r2, r3
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <ssd1306_SetCursor+0x2c>)
 8002302:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002304:	79bb      	ldrb	r3, [r7, #6]
 8002306:	b29a      	uxth	r2, r3
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <ssd1306_SetCursor+0x2c>)
 800230a:	805a      	strh	r2, [r3, #2]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	20000764 	.word	0x20000764

0800231c <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002326:	2381      	movs	r3, #129	; 0x81
 8002328:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800232a:	7bfb      	ldrb	r3, [r7, #15]
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff fde7 	bl	8001f00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fde3 	bl	8001f00 <ssd1306_WriteCommand>
}
 800233a:	bf00      	nop
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002354:	23af      	movs	r3, #175	; 0xaf
 8002356:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002358:	4b08      	ldr	r3, [pc, #32]	; (800237c <ssd1306_SetDisplayOn+0x38>)
 800235a:	2201      	movs	r2, #1
 800235c:	719a      	strb	r2, [r3, #6]
 800235e:	e004      	b.n	800236a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002360:	23ae      	movs	r3, #174	; 0xae
 8002362:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <ssd1306_SetDisplayOn+0x38>)
 8002366:	2200      	movs	r2, #0
 8002368:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 800236a:	7bfb      	ldrb	r3, [r7, #15]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fdc7 	bl	8001f00 <ssd1306_WriteCommand>
}
 8002372:	bf00      	nop
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000764 	.word	0x20000764

08002380 <LL_RCC_EnableRTC>:
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <LL_AHB2_GRP1_EnableClock>:
{
 80023a2:	b480      	push	{r7}
 80023a4:	b085      	sub	sp, #20
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80023aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80023ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4013      	ands	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023c6:	68fb      	ldr	r3, [r7, #12]
}
 80023c8:	bf00      	nop
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <LL_AHB3_GRP1_EnableClock>:
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80023dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80023ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4013      	ands	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023f8:	68fb      	ldr	r3, [r7, #12]
}
 80023fa:	bf00      	nop
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002406:	b480      	push	{r7}
 8002408:	b085      	sub	sp, #20
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800240e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002412:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002414:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4313      	orrs	r3, r2
 800241c:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800241e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002422:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4013      	ands	r3, r2
 8002428:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800242a:	68fb      	ldr	r3, [r7, #12]
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002444:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002446:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4313      	orrs	r3, r2
 800244e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002454:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4013      	ands	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800245c:	68fb      	ldr	r3, [r7, #12]
}
 800245e:	bf00      	nop
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800246e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002472:	f7ff ffaf 	bl	80023d4 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002476:	2200      	movs	r2, #0
 8002478:	2100      	movs	r1, #0
 800247a:	202e      	movs	r0, #46	; 0x2e
 800247c:	f000 fbbb 	bl	8002bf6 <HAL_NVIC_SetPriority>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002480:	202e      	movs	r0, #46	; 0x2e
 8002482:	f000 fbd2 	bl	8002c2a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b09c      	sub	sp, #112	; 0x70
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002494:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024a4:	f107 030c 	add.w	r3, r7, #12
 80024a8:	2250      	movs	r2, #80	; 0x50
 80024aa:	2100      	movs	r1, #0
 80024ac:	4618      	mov	r0, r3
 80024ae:	f007 fadd 	bl	8009a6c <memset>
  if(hi2c->Instance==I2C1)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a17      	ldr	r2, [pc, #92]	; (8002514 <HAL_I2C_MspInit+0x88>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d126      	bne.n	800250a <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80024bc:	2304      	movs	r3, #4
 80024be:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80024c0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024c6:	f107 030c 	add.w	r3, r7, #12
 80024ca:	4618      	mov	r0, r3
 80024cc:	f002 fe07 	bl	80050de <HAL_RCCEx_PeriphCLKConfig>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80024d6:	f7ff fd07 	bl	8001ee8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024da:	2002      	movs	r0, #2
 80024dc:	f7ff ff61 	bl	80023a2 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024e4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024e6:	2312      	movs	r3, #18
 80024e8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024ea:	2301      	movs	r3, #1
 80024ec:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024ee:	2302      	movs	r3, #2
 80024f0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024f2:	2304      	movs	r3, #4
 80024f4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80024fa:	4619      	mov	r1, r3
 80024fc:	4806      	ldr	r0, [pc, #24]	; (8002518 <HAL_I2C_MspInit+0x8c>)
 80024fe:	f000 fbd9 	bl	8002cb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002502:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002506:	f7ff ff7e 	bl	8002406 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800250a:	bf00      	nop
 800250c:	3770      	adds	r7, #112	; 0x70
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40005400 	.word	0x40005400
 8002518:	48000400 	.word	0x48000400

0800251c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a0d      	ldr	r2, [pc, #52]	; (8002560 <HAL_IPCC_MspInit+0x44>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d113      	bne.n	8002556 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800252e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002532:	f7ff ff4f 	bl	80023d4 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	202c      	movs	r0, #44	; 0x2c
 800253c:	f000 fb5b 	bl	8002bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002540:	202c      	movs	r0, #44	; 0x2c
 8002542:	f000 fb72 	bl	8002c2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	202d      	movs	r0, #45	; 0x2d
 800254c:	f000 fb53 	bl	8002bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002550:	202d      	movs	r0, #45	; 0x2d
 8002552:	f000 fb6a 	bl	8002c2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	58000c00 	.word	0x58000c00

08002564 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b096      	sub	sp, #88	; 0x58
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800256c:	f107 0308 	add.w	r3, r7, #8
 8002570:	2250      	movs	r2, #80	; 0x50
 8002572:	2100      	movs	r1, #0
 8002574:	4618      	mov	r0, r3
 8002576:	f007 fa79 	bl	8009a6c <memset>
  if(hrtc->Instance==RTC)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <HAL_RTC_MspInit+0x64>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d11d      	bne.n	80025c0 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002584:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002588:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800258a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800258e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002590:	f107 0308 	add.w	r3, r7, #8
 8002594:	4618      	mov	r0, r3
 8002596:	f002 fda2 	bl	80050de <HAL_RCCEx_PeriphCLKConfig>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80025a0:	f7ff fca2 	bl	8001ee8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80025a4:	f7ff feec 	bl	8002380 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80025a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80025ac:	f7ff ff2b 	bl	8002406 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80025b0:	2200      	movs	r2, #0
 80025b2:	2100      	movs	r1, #0
 80025b4:	2003      	movs	r0, #3
 80025b6:	f000 fb1e 	bl	8002bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80025ba:	2003      	movs	r0, #3
 80025bc:	f000 fb35 	bl	8002c2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80025c0:	bf00      	nop
 80025c2:	3758      	adds	r7, #88	; 0x58
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40002800 	.word	0x40002800

080025cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b09c      	sub	sp, #112	; 0x70
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025e4:	f107 030c 	add.w	r3, r7, #12
 80025e8:	2250      	movs	r2, #80	; 0x50
 80025ea:	2100      	movs	r1, #0
 80025ec:	4618      	mov	r0, r3
 80025ee:	f007 fa3d 	bl	8009a6c <memset>
  if(huart->Instance==USART1)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a16      	ldr	r2, [pc, #88]	; (8002650 <HAL_UART_MspInit+0x84>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d124      	bne.n	8002646 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80025fc:	2301      	movs	r3, #1
 80025fe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002600:	2300      	movs	r3, #0
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002604:	f107 030c 	add.w	r3, r7, #12
 8002608:	4618      	mov	r0, r3
 800260a:	f002 fd68 	bl	80050de <HAL_RCCEx_PeriphCLKConfig>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002614:	f7ff fc68 	bl	8001ee8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002618:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800261c:	f7ff ff0c 	bl	8002438 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002620:	2002      	movs	r0, #2
 8002622:	f7ff febe 	bl	80023a2 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002626:	23c0      	movs	r3, #192	; 0xc0
 8002628:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262a:	2302      	movs	r3, #2
 800262c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	2300      	movs	r3, #0
 8002630:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002632:	2300      	movs	r3, #0
 8002634:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002636:	2307      	movs	r3, #7
 8002638:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800263e:	4619      	mov	r1, r3
 8002640:	4804      	ldr	r0, [pc, #16]	; (8002654 <HAL_UART_MspInit+0x88>)
 8002642:	f000 fb37 	bl	8002cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002646:	bf00      	nop
 8002648:	3770      	adds	r7, #112	; 0x70
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40013800 	.word	0x40013800
 8002654:	48000400 	.word	0x48000400

08002658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800265c:	e7fe      	b.n	800265c <NMI_Handler+0x4>

0800265e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800265e:	b480      	push	{r7}
 8002660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002662:	e7fe      	b.n	8002662 <HardFault_Handler+0x4>

08002664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002668:	e7fe      	b.n	8002668 <MemManage_Handler+0x4>

0800266a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800266a:	b480      	push	{r7}
 800266c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800266e:	e7fe      	b.n	800266e <BusFault_Handler+0x4>

08002670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002674:	e7fe      	b.n	8002674 <UsageFault_Handler+0x4>

08002676 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002692:	b480      	push	{r7}
 8002694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026a4:	f000 f934 	bl	8002910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}

080026ac <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80026b0:	f7fe feb4 	bl	800141c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80026b4:	bf00      	nop
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80026bc:	f006 fdd0 	bl	8009260 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80026c0:	bf00      	nop
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80026c8:	f006 fe02 	bl	80092d0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80026cc:	bf00      	nop
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80026d4:	f000 fca8 	bl	8003028 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80026d8:	bf00      	nop
 80026da:	bd80      	pop	{r7, pc}

080026dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026e4:	4a14      	ldr	r2, [pc, #80]	; (8002738 <_sbrk+0x5c>)
 80026e6:	4b15      	ldr	r3, [pc, #84]	; (800273c <_sbrk+0x60>)
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026f0:	4b13      	ldr	r3, [pc, #76]	; (8002740 <_sbrk+0x64>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d102      	bne.n	80026fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026f8:	4b11      	ldr	r3, [pc, #68]	; (8002740 <_sbrk+0x64>)
 80026fa:	4a12      	ldr	r2, [pc, #72]	; (8002744 <_sbrk+0x68>)
 80026fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <_sbrk+0x64>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4413      	add	r3, r2
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	429a      	cmp	r2, r3
 800270a:	d207      	bcs.n	800271c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800270c:	f007 f95c 	bl	80099c8 <__errno>
 8002710:	4603      	mov	r3, r0
 8002712:	220c      	movs	r2, #12
 8002714:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002716:	f04f 33ff 	mov.w	r3, #4294967295
 800271a:	e009      	b.n	8002730 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800271c:	4b08      	ldr	r3, [pc, #32]	; (8002740 <_sbrk+0x64>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002722:	4b07      	ldr	r3, [pc, #28]	; (8002740 <_sbrk+0x64>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4413      	add	r3, r2
 800272a:	4a05      	ldr	r2, [pc, #20]	; (8002740 <_sbrk+0x64>)
 800272c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800272e:	68fb      	ldr	r3, [r7, #12]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	20030000 	.word	0x20030000
 800273c:	00000400 	.word	0x00000400
 8002740:	2000076c 	.word	0x2000076c
 8002744:	200009e8 	.word	0x200009e8

08002748 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800274c:	4b24      	ldr	r3, [pc, #144]	; (80027e0 <SystemInit+0x98>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002752:	4a23      	ldr	r2, [pc, #140]	; (80027e0 <SystemInit+0x98>)
 8002754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800275c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800276c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002770:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002774:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002780:	4b18      	ldr	r3, [pc, #96]	; (80027e4 <SystemInit+0x9c>)
 8002782:	4013      	ands	r3, r2
 8002784:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800278a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800278e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002792:	f023 0305 	bic.w	r3, r3, #5
 8002796:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800279a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800279e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027a6:	f023 0301 	bic.w	r3, r3, #1
 80027aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80027ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b2:	4a0d      	ldr	r2, [pc, #52]	; (80027e8 <SystemInit+0xa0>)
 80027b4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80027b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ba:	4a0b      	ldr	r2, [pc, #44]	; (80027e8 <SystemInit+0xa0>)
 80027bc:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027cc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80027ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d2:	2200      	movs	r2, #0
 80027d4:	619a      	str	r2, [r3, #24]
}
 80027d6:	bf00      	nop
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	e000ed00 	.word	0xe000ed00
 80027e4:	faf6fefb 	.word	0xfaf6fefb
 80027e8:	22041000 	.word	0x22041000

080027ec <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80027ec:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027ee:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027f0:	3304      	adds	r3, #4

080027f2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027f2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027f4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80027f6:	d3f9      	bcc.n	80027ec <CopyDataInit>
  bx lr
 80027f8:	4770      	bx	lr

080027fa <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80027fa:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80027fc:	3004      	adds	r0, #4

080027fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80027fe:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002800:	d3fb      	bcc.n	80027fa <FillZerobss>
  bx lr
 8002802:	4770      	bx	lr

08002804 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002804:	480c      	ldr	r0, [pc, #48]	; (8002838 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002806:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002808:	f7ff ff9e 	bl	8002748 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800280c:	480b      	ldr	r0, [pc, #44]	; (800283c <LoopForever+0x8>)
 800280e:	490c      	ldr	r1, [pc, #48]	; (8002840 <LoopForever+0xc>)
 8002810:	4a0c      	ldr	r2, [pc, #48]	; (8002844 <LoopForever+0x10>)
 8002812:	2300      	movs	r3, #0
 8002814:	f7ff ffed 	bl	80027f2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002818:	480b      	ldr	r0, [pc, #44]	; (8002848 <LoopForever+0x14>)
 800281a:	490c      	ldr	r1, [pc, #48]	; (800284c <LoopForever+0x18>)
 800281c:	2300      	movs	r3, #0
 800281e:	f7ff ffee 	bl	80027fe <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002822:	480b      	ldr	r0, [pc, #44]	; (8002850 <LoopForever+0x1c>)
 8002824:	490b      	ldr	r1, [pc, #44]	; (8002854 <LoopForever+0x20>)
 8002826:	2300      	movs	r3, #0
 8002828:	f7ff ffe9 	bl	80027fe <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800282c:	f007 f8d2 	bl	80099d4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002830:	f7ff f916 	bl	8001a60 <main>

08002834 <LoopForever>:

LoopForever:
  b LoopForever
 8002834:	e7fe      	b.n	8002834 <LoopForever>
 8002836:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002838:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800283c:	20000004 	.word	0x20000004
 8002840:	2000008c 	.word	0x2000008c
 8002844:	0800af60 	.word	0x0800af60
  INIT_BSS _sbss, _ebss
 8002848:	20000200 	.word	0x20000200
 800284c:	200009e8 	.word	0x200009e8
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002850:	200301e0 	.word	0x200301e0
 8002854:	20030a57 	.word	0x20030a57

08002858 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002858:	e7fe      	b.n	8002858 <ADC1_IRQHandler>
	...

0800285c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002866:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <HAL_Init+0x3c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a0b      	ldr	r2, [pc, #44]	; (8002898 <HAL_Init+0x3c>)
 800286c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002870:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002872:	2003      	movs	r0, #3
 8002874:	f000 f9b4 	bl	8002be0 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002878:	2000      	movs	r0, #0
 800287a:	f000 f80f 	bl	800289c <HAL_InitTick>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d002      	beq.n	800288a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	71fb      	strb	r3, [r7, #7]
 8002888:	e001      	b.n	800288e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800288a:	f7ff fdee 	bl	800246a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800288e:	79fb      	ldrb	r3, [r7, #7]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	58004000 	.word	0x58004000

0800289c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80028a8:	4b17      	ldr	r3, [pc, #92]	; (8002908 <HAL_InitTick+0x6c>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d024      	beq.n	80028fa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80028b0:	f002 f984 	bl	8004bbc <HAL_RCC_GetHCLKFreq>
 80028b4:	4602      	mov	r2, r0
 80028b6:	4b14      	ldr	r3, [pc, #80]	; (8002908 <HAL_InitTick+0x6c>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	4619      	mov	r1, r3
 80028bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80028c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 f9ca 	bl	8002c62 <HAL_SYSTICK_Config>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10f      	bne.n	80028f4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b0f      	cmp	r3, #15
 80028d8:	d809      	bhi.n	80028ee <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028da:	2200      	movs	r2, #0
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	f04f 30ff 	mov.w	r0, #4294967295
 80028e2:	f000 f988 	bl	8002bf6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028e6:	4a09      	ldr	r2, [pc, #36]	; (800290c <HAL_InitTick+0x70>)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	e007      	b.n	80028fe <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	73fb      	strb	r3, [r7, #15]
 80028f2:	e004      	b.n	80028fe <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	73fb      	strb	r3, [r7, #15]
 80028f8:	e001      	b.n	80028fe <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	20000014 	.word	0x20000014
 800290c:	20000010 	.word	0x20000010

08002910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002914:	4b06      	ldr	r3, [pc, #24]	; (8002930 <HAL_IncTick+0x20>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	461a      	mov	r2, r3
 800291a:	4b06      	ldr	r3, [pc, #24]	; (8002934 <HAL_IncTick+0x24>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4413      	add	r3, r2
 8002920:	4a04      	ldr	r2, [pc, #16]	; (8002934 <HAL_IncTick+0x24>)
 8002922:	6013      	str	r3, [r2, #0]
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	20000014 	.word	0x20000014
 8002934:	20000770 	.word	0x20000770

08002938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  return uwTick;
 800293c:	4b03      	ldr	r3, [pc, #12]	; (800294c <HAL_GetTick+0x14>)
 800293e:	681b      	ldr	r3, [r3, #0]
}
 8002940:	4618      	mov	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	20000770 	.word	0x20000770

08002950 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002954:	4b03      	ldr	r3, [pc, #12]	; (8002964 <HAL_GetTickPrio+0x14>)
 8002956:	681b      	ldr	r3, [r3, #0]
}
 8002958:	4618      	mov	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	20000010 	.word	0x20000010

08002968 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800296c:	4b03      	ldr	r3, [pc, #12]	; (800297c <HAL_GetTickFreq+0x14>)
 800296e:	781b      	ldrb	r3, [r3, #0]
}
 8002970:	4618      	mov	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	20000014 	.word	0x20000014

08002980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002990:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800299c:	4013      	ands	r3, r2
 800299e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029b2:	4a04      	ldr	r2, [pc, #16]	; (80029c4 <__NVIC_SetPriorityGrouping+0x44>)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	60d3      	str	r3, [r2, #12]
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029cc:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <__NVIC_GetPriorityGrouping+0x18>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	0a1b      	lsrs	r3, r3, #8
 80029d2:	f003 0307 	and.w	r3, r3, #7
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	db0b      	blt.n	8002a0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	f003 021f 	and.w	r2, r3, #31
 80029fc:	4907      	ldr	r1, [pc, #28]	; (8002a1c <__NVIC_EnableIRQ+0x38>)
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	2001      	movs	r0, #1
 8002a06:	fa00 f202 	lsl.w	r2, r0, r2
 8002a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	e000e100 	.word	0xe000e100

08002a20 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	db12      	blt.n	8002a58 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	f003 021f 	and.w	r2, r3, #31
 8002a38:	490a      	ldr	r1, [pc, #40]	; (8002a64 <__NVIC_DisableIRQ+0x44>)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	2001      	movs	r0, #1
 8002a42:	fa00 f202 	lsl.w	r2, r0, r2
 8002a46:	3320      	adds	r3, #32
 8002a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a4c:	f3bf 8f4f 	dsb	sy
}
 8002a50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002a52:	f3bf 8f6f 	isb	sy
}
 8002a56:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	e000e100 	.word	0xe000e100

08002a68 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	db0c      	blt.n	8002a94 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	f003 021f 	and.w	r2, r3, #31
 8002a80:	4907      	ldr	r1, [pc, #28]	; (8002aa0 <__NVIC_SetPendingIRQ+0x38>)
 8002a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	2001      	movs	r0, #1
 8002a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a8e:	3340      	adds	r3, #64	; 0x40
 8002a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	e000e100 	.word	0xe000e100

08002aa4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	db0c      	blt.n	8002ad0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	f003 021f 	and.w	r2, r3, #31
 8002abc:	4907      	ldr	r1, [pc, #28]	; (8002adc <__NVIC_ClearPendingIRQ+0x38>)
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aca:	3360      	adds	r3, #96	; 0x60
 8002acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000e100 	.word	0xe000e100

08002ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	6039      	str	r1, [r7, #0]
 8002aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	db0a      	blt.n	8002b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	490c      	ldr	r1, [pc, #48]	; (8002b2c <__NVIC_SetPriority+0x4c>)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	0112      	lsls	r2, r2, #4
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	440b      	add	r3, r1
 8002b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b08:	e00a      	b.n	8002b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	4908      	ldr	r1, [pc, #32]	; (8002b30 <__NVIC_SetPriority+0x50>)
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	3b04      	subs	r3, #4
 8002b18:	0112      	lsls	r2, r2, #4
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	761a      	strb	r2, [r3, #24]
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000e100 	.word	0xe000e100
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b089      	sub	sp, #36	; 0x24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f1c3 0307 	rsb	r3, r3, #7
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	bf28      	it	cs
 8002b52:	2304      	movcs	r3, #4
 8002b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	2b06      	cmp	r3, #6
 8002b5c:	d902      	bls.n	8002b64 <NVIC_EncodePriority+0x30>
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	3b03      	subs	r3, #3
 8002b62:	e000      	b.n	8002b66 <NVIC_EncodePriority+0x32>
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b68:	f04f 32ff 	mov.w	r2, #4294967295
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43da      	mvns	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	401a      	ands	r2, r3
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	fa01 f303 	lsl.w	r3, r1, r3
 8002b86:	43d9      	mvns	r1, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b8c:	4313      	orrs	r3, r2
         );
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3724      	adds	r7, #36	; 0x24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
	...

08002b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bac:	d301      	bcc.n	8002bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e00f      	b.n	8002bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <SysTick_Config+0x40>)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bba:	210f      	movs	r1, #15
 8002bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc0:	f7ff ff8e 	bl	8002ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <SysTick_Config+0x40>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bca:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <SysTick_Config+0x40>)
 8002bcc:	2207      	movs	r2, #7
 8002bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	e000e010 	.word	0xe000e010

08002be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff fec9 	bl	8002980 <__NVIC_SetPriorityGrouping>
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b086      	sub	sp, #24
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	607a      	str	r2, [r7, #4]
 8002c02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c04:	f7ff fee0 	bl	80029c8 <__NVIC_GetPriorityGrouping>
 8002c08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	6978      	ldr	r0, [r7, #20]
 8002c10:	f7ff ff90 	bl	8002b34 <NVIC_EncodePriority>
 8002c14:	4602      	mov	r2, r0
 8002c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff ff5f 	bl	8002ae0 <__NVIC_SetPriority>
}
 8002c22:	bf00      	nop
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	4603      	mov	r3, r0
 8002c32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fed3 	bl	80029e4 <__NVIC_EnableIRQ>
}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fee3 	bl	8002a20 <__NVIC_DisableIRQ>
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7ff ff96 	bl	8002b9c <SysTick_Config>
 8002c70:	4603      	mov	r3, r0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	4603      	mov	r3, r0
 8002c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff feed 	bl	8002a68 <__NVIC_SetPendingIRQ>
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff fefd 	bl	8002aa4 <__NVIC_ClearPendingIRQ>
}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b087      	sub	sp, #28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cc2:	e14c      	b.n	8002f5e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	2101      	movs	r1, #1
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 813e 	beq.w	8002f58 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 0303 	and.w	r3, r3, #3
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d005      	beq.n	8002cf4 <HAL_GPIO_Init+0x40>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 0303 	and.w	r3, r3, #3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d130      	bne.n	8002d56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	2203      	movs	r2, #3
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	68da      	ldr	r2, [r3, #12]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43db      	mvns	r3, r3
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4013      	ands	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	091b      	lsrs	r3, r3, #4
 8002d40:	f003 0201 	and.w	r2, r3, #1
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	d017      	beq.n	8002d92 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43db      	mvns	r3, r3
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4013      	ands	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d123      	bne.n	8002de6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	08da      	lsrs	r2, r3, #3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3208      	adds	r2, #8
 8002da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002daa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	220f      	movs	r2, #15
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	691a      	ldr	r2, [r3, #16]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	08da      	lsrs	r2, r3, #3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3208      	adds	r2, #8
 8002de0:	6939      	ldr	r1, [r7, #16]
 8002de2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	2203      	movs	r2, #3
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f003 0203 	and.w	r2, r3, #3
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 8098 	beq.w	8002f58 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002e28:	4a54      	ldr	r2, [pc, #336]	; (8002f7c <HAL_GPIO_Init+0x2c8>)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	089b      	lsrs	r3, r3, #2
 8002e2e:	3302      	adds	r3, #2
 8002e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	220f      	movs	r2, #15
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e52:	d019      	beq.n	8002e88 <HAL_GPIO_Init+0x1d4>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a4a      	ldr	r2, [pc, #296]	; (8002f80 <HAL_GPIO_Init+0x2cc>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d013      	beq.n	8002e84 <HAL_GPIO_Init+0x1d0>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a49      	ldr	r2, [pc, #292]	; (8002f84 <HAL_GPIO_Init+0x2d0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d00d      	beq.n	8002e80 <HAL_GPIO_Init+0x1cc>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a48      	ldr	r2, [pc, #288]	; (8002f88 <HAL_GPIO_Init+0x2d4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d007      	beq.n	8002e7c <HAL_GPIO_Init+0x1c8>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a47      	ldr	r2, [pc, #284]	; (8002f8c <HAL_GPIO_Init+0x2d8>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d101      	bne.n	8002e78 <HAL_GPIO_Init+0x1c4>
 8002e74:	2304      	movs	r3, #4
 8002e76:	e008      	b.n	8002e8a <HAL_GPIO_Init+0x1d6>
 8002e78:	2307      	movs	r3, #7
 8002e7a:	e006      	b.n	8002e8a <HAL_GPIO_Init+0x1d6>
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e004      	b.n	8002e8a <HAL_GPIO_Init+0x1d6>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e002      	b.n	8002e8a <HAL_GPIO_Init+0x1d6>
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <HAL_GPIO_Init+0x1d6>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	f002 0203 	and.w	r2, r2, #3
 8002e90:	0092      	lsls	r2, r2, #2
 8002e92:	4093      	lsls	r3, r2
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e9a:	4938      	ldr	r1, [pc, #224]	; (8002f7c <HAL_GPIO_Init+0x2c8>)
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	089b      	lsrs	r3, r3, #2
 8002ea0:	3302      	adds	r3, #2
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ea8:	4b39      	ldr	r3, [pc, #228]	; (8002f90 <HAL_GPIO_Init+0x2dc>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ecc:	4a30      	ldr	r2, [pc, #192]	; (8002f90 <HAL_GPIO_Init+0x2dc>)
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002ed2:	4b2f      	ldr	r3, [pc, #188]	; (8002f90 <HAL_GPIO_Init+0x2dc>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	43db      	mvns	r3, r3
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ef6:	4a26      	ldr	r2, [pc, #152]	; (8002f90 <HAL_GPIO_Init+0x2dc>)
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002efc:	4b24      	ldr	r3, [pc, #144]	; (8002f90 <HAL_GPIO_Init+0x2dc>)
 8002efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f22:	4a1b      	ldr	r2, [pc, #108]	; (8002f90 <HAL_GPIO_Init+0x2dc>)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002f2a:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <HAL_GPIO_Init+0x2dc>)
 8002f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f50:	4a0f      	ldr	r2, [pc, #60]	; (8002f90 <HAL_GPIO_Init+0x2dc>)
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	fa22 f303 	lsr.w	r3, r2, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f47f aeab 	bne.w	8002cc4 <HAL_GPIO_Init+0x10>
  }
}
 8002f6e:	bf00      	nop
 8002f70:	bf00      	nop
 8002f72:	371c      	adds	r7, #28
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	40010000 	.word	0x40010000
 8002f80:	48000400 	.word	0x48000400
 8002f84:	48000800 	.word	0x48000800
 8002f88:	48000c00 	.word	0x48000c00
 8002f8c:	48001000 	.word	0x48001000
 8002f90:	58000800 	.word	0x58000800

08002f94 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	887b      	ldrh	r3, [r7, #2]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d002      	beq.n	8002fb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fac:	2301      	movs	r3, #1
 8002fae:	73fb      	strb	r3, [r7, #15]
 8002fb0:	e001      	b.n	8002fb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	807b      	strh	r3, [r7, #2]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fd4:	787b      	ldrb	r3, [r7, #1]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fda:	887a      	ldrh	r2, [r7, #2]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fe0:	e002      	b.n	8002fe8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fe2:	887a      	ldrh	r2, [r7, #2]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003006:	887a      	ldrh	r2, [r7, #2]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4013      	ands	r3, r2
 800300c:	041a      	lsls	r2, r3, #16
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	43d9      	mvns	r1, r3
 8003012:	887b      	ldrh	r3, [r7, #2]
 8003014:	400b      	ands	r3, r1
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	619a      	str	r2, [r3, #24]
}
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800302e:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <HAL_HSEM_IRQHandler+0x30>)
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003034:	4b08      	ldr	r3, [pc, #32]	; (8003058 <HAL_HSEM_IRQHandler+0x30>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	43db      	mvns	r3, r3
 800303c:	4906      	ldr	r1, [pc, #24]	; (8003058 <HAL_HSEM_IRQHandler+0x30>)
 800303e:	4013      	ands	r3, r2
 8003040:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003042:	4a05      	ldr	r2, [pc, #20]	; (8003058 <HAL_HSEM_IRQHandler+0x30>)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f807 	bl	800305c <HAL_HSEM_FreeCallback>
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	58001500 	.word	0x58001500

0800305c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e081      	b.n	8003186 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d106      	bne.n	800309c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff f9f8 	bl	800248c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2224      	movs	r2, #36	; 0x24
 80030a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0201 	bic.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d107      	bne.n	80030ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	e006      	b.n	80030f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80030f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d104      	bne.n	800310a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003108:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800311c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800312c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691a      	ldr	r2, [r3, #16]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69d9      	ldr	r1, [r3, #28]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1a      	ldr	r2, [r3, #32]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2220      	movs	r2, #32
 8003172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af02      	add	r7, sp, #8
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	4608      	mov	r0, r1
 800319a:	4611      	mov	r1, r2
 800319c:	461a      	mov	r2, r3
 800319e:	4603      	mov	r3, r0
 80031a0:	817b      	strh	r3, [r7, #10]
 80031a2:	460b      	mov	r3, r1
 80031a4:	813b      	strh	r3, [r7, #8]
 80031a6:	4613      	mov	r3, r2
 80031a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b20      	cmp	r3, #32
 80031b4:	f040 80f9 	bne.w	80033aa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <HAL_I2C_Mem_Write+0x34>
 80031be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d105      	bne.n	80031d0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0ed      	b.n	80033ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d101      	bne.n	80031de <HAL_I2C_Mem_Write+0x4e>
 80031da:	2302      	movs	r3, #2
 80031dc:	e0e6      	b.n	80033ac <HAL_I2C_Mem_Write+0x21c>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031e6:	f7ff fba7 	bl	8002938 <HAL_GetTick>
 80031ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	2319      	movs	r3, #25
 80031f2:	2201      	movs	r2, #1
 80031f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 f955 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0d1      	b.n	80033ac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2221      	movs	r2, #33	; 0x21
 800320c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2240      	movs	r2, #64	; 0x40
 8003214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a3a      	ldr	r2, [r7, #32]
 8003222:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003228:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003230:	88f8      	ldrh	r0, [r7, #6]
 8003232:	893a      	ldrh	r2, [r7, #8]
 8003234:	8979      	ldrh	r1, [r7, #10]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	9301      	str	r3, [sp, #4]
 800323a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	4603      	mov	r3, r0
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 f8b9 	bl	80033b8 <I2C_RequestMemoryWrite>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0a9      	b.n	80033ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325c:	b29b      	uxth	r3, r3
 800325e:	2bff      	cmp	r3, #255	; 0xff
 8003260:	d90e      	bls.n	8003280 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	22ff      	movs	r2, #255	; 0xff
 8003266:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326c:	b2da      	uxtb	r2, r3
 800326e:	8979      	ldrh	r1, [r7, #10]
 8003270:	2300      	movs	r3, #0
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 fa81 	bl	8003780 <I2C_TransferConfig>
 800327e:	e00f      	b.n	80032a0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003284:	b29a      	uxth	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328e:	b2da      	uxtb	r2, r3
 8003290:	8979      	ldrh	r1, [r7, #10]
 8003292:	2300      	movs	r3, #0
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 fa70 	bl	8003780 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f93f 	bl	8003528 <I2C_WaitOnTXISFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e07b      	b.n	80033ac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	781a      	ldrb	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d034      	beq.n	8003358 <HAL_I2C_Mem_Write+0x1c8>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d130      	bne.n	8003358 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fc:	2200      	movs	r2, #0
 80032fe:	2180      	movs	r1, #128	; 0x80
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 f8d1 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e04d      	b.n	80033ac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003314:	b29b      	uxth	r3, r3
 8003316:	2bff      	cmp	r3, #255	; 0xff
 8003318:	d90e      	bls.n	8003338 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	22ff      	movs	r2, #255	; 0xff
 800331e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003324:	b2da      	uxtb	r2, r3
 8003326:	8979      	ldrh	r1, [r7, #10]
 8003328:	2300      	movs	r3, #0
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 fa25 	bl	8003780 <I2C_TransferConfig>
 8003336:	e00f      	b.n	8003358 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003346:	b2da      	uxtb	r2, r3
 8003348:	8979      	ldrh	r1, [r7, #10]
 800334a:	2300      	movs	r3, #0
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 fa14 	bl	8003780 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335c:	b29b      	uxth	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d19e      	bne.n	80032a0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f91e 	bl	80035a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e01a      	b.n	80033ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2220      	movs	r2, #32
 800337c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6859      	ldr	r1, [r3, #4]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	4b0a      	ldr	r3, [pc, #40]	; (80033b4 <HAL_I2C_Mem_Write+0x224>)
 800338a:	400b      	ands	r3, r1
 800338c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2220      	movs	r2, #32
 8003392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	e000      	b.n	80033ac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80033aa:	2302      	movs	r3, #2
  }
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	fe00e800 	.word	0xfe00e800

080033b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af02      	add	r7, sp, #8
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	4608      	mov	r0, r1
 80033c2:	4611      	mov	r1, r2
 80033c4:	461a      	mov	r2, r3
 80033c6:	4603      	mov	r3, r0
 80033c8:	817b      	strh	r3, [r7, #10]
 80033ca:	460b      	mov	r3, r1
 80033cc:	813b      	strh	r3, [r7, #8]
 80033ce:	4613      	mov	r3, r2
 80033d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80033d2:	88fb      	ldrh	r3, [r7, #6]
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	8979      	ldrh	r1, [r7, #10]
 80033d8:	4b20      	ldr	r3, [pc, #128]	; (800345c <I2C_RequestMemoryWrite+0xa4>)
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 f9cd 	bl	8003780 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033e6:	69fa      	ldr	r2, [r7, #28]
 80033e8:	69b9      	ldr	r1, [r7, #24]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 f89c 	bl	8003528 <I2C_WaitOnTXISFlagUntilTimeout>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e02c      	b.n	8003454 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d105      	bne.n	800340c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003400:	893b      	ldrh	r3, [r7, #8]
 8003402:	b2da      	uxtb	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	629a      	str	r2, [r3, #40]	; 0x28
 800340a:	e015      	b.n	8003438 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800340c:	893b      	ldrh	r3, [r7, #8]
 800340e:	0a1b      	lsrs	r3, r3, #8
 8003410:	b29b      	uxth	r3, r3
 8003412:	b2da      	uxtb	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800341a:	69fa      	ldr	r2, [r7, #28]
 800341c:	69b9      	ldr	r1, [r7, #24]
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 f882 	bl	8003528 <I2C_WaitOnTXISFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e012      	b.n	8003454 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800342e:	893b      	ldrh	r3, [r7, #8]
 8003430:	b2da      	uxtb	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	2200      	movs	r2, #0
 8003440:	2180      	movs	r1, #128	; 0x80
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 f830 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e000      	b.n	8003454 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	80002000 	.word	0x80002000

08003460 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b02      	cmp	r3, #2
 8003474:	d103      	bne.n	800347e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2200      	movs	r2, #0
 800347c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b01      	cmp	r3, #1
 800348a:	d007      	beq.n	800349c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699a      	ldr	r2, [r3, #24]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0201 	orr.w	r2, r2, #1
 800349a:	619a      	str	r2, [r3, #24]
  }
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	4613      	mov	r3, r2
 80034b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034b8:	e022      	b.n	8003500 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c0:	d01e      	beq.n	8003500 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c2:	f7ff fa39 	bl	8002938 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d302      	bcc.n	80034d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d113      	bne.n	8003500 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034dc:	f043 0220 	orr.w	r2, r3, #32
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e00f      	b.n	8003520 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699a      	ldr	r2, [r3, #24]
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4013      	ands	r3, r2
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	429a      	cmp	r2, r3
 800350e:	bf0c      	ite	eq
 8003510:	2301      	moveq	r3, #1
 8003512:	2300      	movne	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	461a      	mov	r2, r3
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	429a      	cmp	r2, r3
 800351c:	d0cd      	beq.n	80034ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003534:	e02c      	b.n	8003590 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	68b9      	ldr	r1, [r7, #8]
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 f870 	bl	8003620 <I2C_IsErrorOccurred>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e02a      	b.n	80035a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003550:	d01e      	beq.n	8003590 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003552:	f7ff f9f1 	bl	8002938 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	429a      	cmp	r2, r3
 8003560:	d302      	bcc.n	8003568 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d113      	bne.n	8003590 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356c:	f043 0220 	orr.w	r2, r3, #32
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e007      	b.n	80035a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b02      	cmp	r3, #2
 800359c:	d1cb      	bne.n	8003536 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035b4:	e028      	b.n	8003608 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	68b9      	ldr	r1, [r7, #8]
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 f830 	bl	8003620 <I2C_IsErrorOccurred>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e026      	b.n	8003618 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ca:	f7ff f9b5 	bl	8002938 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d302      	bcc.n	80035e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d113      	bne.n	8003608 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e4:	f043 0220 	orr.w	r2, r3, #32
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e007      	b.n	8003618 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	2b20      	cmp	r3, #32
 8003614:	d1cf      	bne.n	80035b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	77fb      	strb	r3, [r7, #31]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	617b      	str	r3, [r7, #20]
  uint32_t error_code = 0;
 8003638:	2300      	movs	r3, #0
 800363a:	61bb      	str	r3, [r7, #24]

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f003 0310 	and.w	r3, r3, #16
 8003642:	2b00      	cmp	r3, #0
 8003644:	d040      	beq.n	80036c8 <I2C_IsErrorOccurred+0xa8>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003650:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003654:	d01d      	beq.n	8003692 <I2C_IsErrorOccurred+0x72>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003664:	605a      	str	r2, [r3, #4]
    }

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003666:	e014      	b.n	8003692 <I2C_IsErrorOccurred+0x72>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366e:	d010      	beq.n	8003692 <I2C_IsErrorOccurred+0x72>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003670:	f7ff f962 	bl	8002938 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	429a      	cmp	r2, r3
 800367e:	d302      	bcc.n	8003686 <I2C_IsErrorOccurred+0x66>
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d105      	bne.n	8003692 <I2C_IsErrorOccurred+0x72>
        {
          error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	f043 0320 	orr.w	r3, r3, #32
 800368c:	61bb      	str	r3, [r7, #24]

          status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	77fb      	strb	r3, [r7, #31]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b20      	cmp	r3, #32
 800369e:	d002      	beq.n	80036a6 <I2C_IsErrorOccurred+0x86>
 80036a0:	7ffb      	ldrb	r3, [r7, #31]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0e0      	beq.n	8003668 <I2C_IsErrorOccurred+0x48>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80036a6:	7ffb      	ldrb	r3, [r7, #31]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d103      	bne.n	80036b4 <I2C_IsErrorOccurred+0x94>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2220      	movs	r2, #32
 80036b2:	61da      	str	r2, [r3, #28]
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2210      	movs	r2, #16
 80036ba:	61da      	str	r2, [r3, #28]

    error_code |= HAL_I2C_ERROR_AF;
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	f043 0304 	orr.w	r3, r3, #4
 80036c2:	61bb      	str	r3, [r7, #24]

    status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	617b      	str	r3, [r7, #20]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <I2C_IsErrorOccurred+0xd0>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	61bb      	str	r3, [r7, #24]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <I2C_IsErrorOccurred+0xf0>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	f043 0308 	orr.w	r3, r3, #8
 8003700:	61bb      	str	r3, [r7, #24]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800370a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <I2C_IsErrorOccurred+0x110>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	f043 0302 	orr.w	r3, r3, #2
 8003720:	61bb      	str	r3, [r7, #24]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f44f 7200 	mov.w	r2, #512	; 0x200
 800372a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	77fb      	strb	r3, [r7, #31]
  }

  if (status != HAL_OK)
 8003730:	7ffb      	ldrb	r3, [r7, #31]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d01c      	beq.n	8003770 <I2C_IsErrorOccurred+0x150>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f7ff fe92 	bl	8003460 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6859      	ldr	r1, [r3, #4]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	4b0d      	ldr	r3, [pc, #52]	; (800377c <I2C_IsErrorOccurred+0x15c>)
 8003748:	400b      	ands	r3, r1
 800374a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	431a      	orrs	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003770:	7ffb      	ldrb	r3, [r7, #31]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3720      	adds	r7, #32
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	fe00e800 	.word	0xfe00e800

08003780 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	607b      	str	r3, [r7, #4]
 800378a:	460b      	mov	r3, r1
 800378c:	817b      	strh	r3, [r7, #10]
 800378e:	4613      	mov	r3, r2
 8003790:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003792:	897b      	ldrh	r3, [r7, #10]
 8003794:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003798:	7a7b      	ldrb	r3, [r7, #9]
 800379a:	041b      	lsls	r3, r3, #16
 800379c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037a0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037ae:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	0d5b      	lsrs	r3, r3, #21
 80037ba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80037be:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <I2C_TransferConfig+0x60>)
 80037c0:	430b      	orrs	r3, r1
 80037c2:	43db      	mvns	r3, r3
 80037c4:	ea02 0103 	and.w	r1, r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80037d2:	bf00      	nop
 80037d4:	371c      	adds	r7, #28
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	03ff63ff 	.word	0x03ff63ff

080037e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	d138      	bne.n	800386c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003804:	2302      	movs	r3, #2
 8003806:	e032      	b.n	800386e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0201 	bic.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003836:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6819      	ldr	r1, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0201 	orr.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	e000      	b.n	800386e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800386c:	2302      	movs	r3, #2
  }
}
 800386e:	4618      	mov	r0, r3
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800387a:	b480      	push	{r7}
 800387c:	b085      	sub	sp, #20
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b20      	cmp	r3, #32
 800388e:	d139      	bne.n	8003904 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003896:	2b01      	cmp	r3, #1
 8003898:	d101      	bne.n	800389e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800389a:	2302      	movs	r3, #2
 800389c:	e033      	b.n	8003906 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2224      	movs	r2, #36	; 0x24
 80038aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0201 	bic.w	r2, r2, #1
 80038bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	021b      	lsls	r3, r3, #8
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 0201 	orr.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	e000      	b.n	8003906 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003904:	2302      	movs	r3, #2
  }
}
 8003906:	4618      	mov	r0, r3
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d01e      	beq.n	8003964 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003926:	4b13      	ldr	r3, [pc, #76]	; (8003974 <HAL_IPCC_Init+0x60>)
 8003928:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d102      	bne.n	800393c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fe fdf0 	bl	800251c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800393c:	68b8      	ldr	r0, [r7, #8]
 800393e:	f000 f85b 	bl	80039f8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f82c 	bl	80039ac <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003962:	e001      	b.n	8003968 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003968:	7bfb      	ldrb	r3, [r7, #15]
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	58000c00 	.word	0x58000c00

08003978 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	4613      	mov	r3, r2
 8003984:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003986:	bf00      	nop
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003992:	b480      	push	{r7}
 8003994:	b085      	sub	sp, #20
 8003996:	af00      	add	r7, sp, #0
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	4613      	mov	r3, r2
 800399e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80039a0:	bf00      	nop
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80039b4:	2300      	movs	r3, #0
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	e00f      	b.n	80039da <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	4a0b      	ldr	r2, [pc, #44]	; (80039f0 <IPCC_SetDefaultCallbacks+0x44>)
 80039c4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	3306      	adds	r3, #6
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	4a08      	ldr	r2, [pc, #32]	; (80039f4 <IPCC_SetDefaultCallbacks+0x48>)
 80039d2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	3301      	adds	r3, #1
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2b05      	cmp	r3, #5
 80039de:	d9ec      	bls.n	80039ba <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80039e0:	bf00      	nop
 80039e2:	bf00      	nop
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	08003979 	.word	0x08003979
 80039f4:	08003993 	.word	0x08003993

080039f8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8003a0c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	223f      	movs	r2, #63	; 0x3f
 8003a12:	609a      	str	r2, [r3, #8]
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a24:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a04      	ldr	r2, [pc, #16]	; (8003a3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a2e:	6013      	str	r3, [r2, #0]
}
 8003a30:	bf00      	nop
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	58000400 	.word	0x58000400

08003a40 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a44:	4b04      	ldr	r3, [pc, #16]	; (8003a58 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	58000400 	.word	0x58000400

08003a5c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a6e:	d101      	bne.n	8003a74 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003a70:	2301      	movs	r3, #1
 8003a72:	e000      	b.n	8003a76 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <LL_RCC_HSE_Enable>:
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a92:	6013      	str	r3, [r2, #0]
}
 8003a94:	bf00      	nop
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <LL_RCC_HSE_Disable>:
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab0:	6013      	str	r3, [r2, #0]
}
 8003ab2:	bf00      	nop
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <LL_RCC_HSE_IsReady>:
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ace:	d101      	bne.n	8003ad4 <LL_RCC_HSE_IsReady+0x18>
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e000      	b.n	8003ad6 <LL_RCC_HSE_IsReady+0x1a>
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <LL_RCC_HSI_Enable>:
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af2:	6013      	str	r3, [r2, #0]
}
 8003af4:	bf00      	nop
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <LL_RCC_HSI_Disable>:
{
 8003afe:	b480      	push	{r7}
 8003b00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b10:	6013      	str	r3, [r2, #0]
}
 8003b12:	bf00      	nop
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <LL_RCC_HSI_IsReady>:
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b2e:	d101      	bne.n	8003b34 <LL_RCC_HSI_IsReady+0x18>
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <LL_RCC_HSI_IsReady+0x1a>
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	061b      	lsls	r3, r3, #24
 8003b56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	604b      	str	r3, [r1, #4]
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <LL_RCC_HSI48_Enable>:
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003b82:	bf00      	nop
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <LL_RCC_HSI48_Disable>:
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b9c:	f023 0301 	bic.w	r3, r3, #1
 8003ba0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003ba4:	bf00      	nop
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <LL_RCC_HSI48_IsReady>:
{
 8003bae:	b480      	push	{r7}
 8003bb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d101      	bne.n	8003bc6 <LL_RCC_HSI48_IsReady+0x18>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e000      	b.n	8003bc8 <LL_RCC_HSI48_IsReady+0x1a>
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <LL_RCC_LSE_Enable>:
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003bea:	bf00      	nop
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <LL_RCC_LSE_Disable>:
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c04:	f023 0301 	bic.w	r3, r3, #1
 8003c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c0c:	bf00      	nop
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <LL_RCC_LSE_EnableBypass>:
{
 8003c16:	b480      	push	{r7}
 8003c18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c26:	f043 0304 	orr.w	r3, r3, #4
 8003c2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c2e:	bf00      	nop
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <LL_RCC_LSE_DisableBypass>:
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c48:	f023 0304 	bic.w	r3, r3, #4
 8003c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c50:	bf00      	nop
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <LL_RCC_LSE_IsReady>:
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d101      	bne.n	8003c72 <LL_RCC_LSE_IsReady+0x18>
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e000      	b.n	8003c74 <LL_RCC_LSE_IsReady+0x1a>
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <LL_RCC_LSI1_Enable>:
{
 8003c7e:	b480      	push	{r7}
 8003c80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c8e:	f043 0301 	orr.w	r3, r3, #1
 8003c92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003c96:	bf00      	nop
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <LL_RCC_LSI1_Disable>:
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cb0:	f023 0301 	bic.w	r3, r3, #1
 8003cb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003cb8:	bf00      	nop
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <LL_RCC_LSI1_IsReady>:
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d101      	bne.n	8003cda <LL_RCC_LSI1_IsReady+0x18>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <LL_RCC_LSI1_IsReady+0x1a>
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <LL_RCC_LSI2_Enable>:
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cf6:	f043 0304 	orr.w	r3, r3, #4
 8003cfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003cfe:	bf00      	nop
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <LL_RCC_LSI2_Disable>:
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d18:	f023 0304 	bic.w	r3, r3, #4
 8003d1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003d20:	bf00      	nop
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <LL_RCC_LSI2_IsReady>:
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d36:	f003 0308 	and.w	r3, r3, #8
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d101      	bne.n	8003d42 <LL_RCC_LSI2_IsReady+0x18>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <LL_RCC_LSI2_IsReady+0x1a>
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <LL_RCC_LSI2_SetTrimming>:
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d5e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	021b      	lsls	r3, r3, #8
 8003d66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <LL_RCC_MSI_Enable>:
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	6013      	str	r3, [r2, #0]
}
 8003d90:	bf00      	nop
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <LL_RCC_MSI_Disable>:
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003da8:	f023 0301 	bic.w	r3, r3, #1
 8003dac:	6013      	str	r3, [r2, #0]
}
 8003dae:	bf00      	nop
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <LL_RCC_MSI_IsReady>:
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d101      	bne.n	8003dce <LL_RCC_MSI_IsReady+0x16>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <LL_RCC_MSI_IsReady+0x18>
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <LL_RCC_MSI_SetRange>:
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	600b      	str	r3, [r1, #0]
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <LL_RCC_MSI_GetRange>:
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e12:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2bb0      	cmp	r3, #176	; 0xb0
 8003e18:	d901      	bls.n	8003e1e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003e1a:	23b0      	movs	r3, #176	; 0xb0
 8003e1c:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003e1e:	687b      	ldr	r3, [r7, #4]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <LL_RCC_MSI_SetCalibTrimming>:
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	021b      	lsls	r3, r3, #8
 8003e42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e46:	4313      	orrs	r3, r2
 8003e48:	604b      	str	r3, [r1, #4]
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <LL_RCC_SetSysClkSource>:
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f023 0203 	bic.w	r2, r3, #3
 8003e68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	608b      	str	r3, [r1, #8]
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <LL_RCC_GetSysClkSource>:
{
 8003e7e:	b480      	push	{r7}
 8003e80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 030c 	and.w	r3, r3, #12
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <LL_RCC_SetAHBPrescaler>:
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ea8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	608b      	str	r3, [r1, #8]
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <LL_C2_RCC_SetAHBPrescaler>:
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ece:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ed2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <LL_RCC_SetAHB4Prescaler>:
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003efa:	f023 020f 	bic.w	r2, r3, #15
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	091b      	lsrs	r3, r3, #4
 8003f02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <LL_RCC_SetAPB1Prescaler>:
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	608b      	str	r3, [r1, #8]
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <LL_RCC_SetAPB2Prescaler>:
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	608b      	str	r3, [r1, #8]
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <LL_RCC_GetAHBPrescaler>:
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <LL_RCC_GetAHB4Prescaler>:
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f88:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f8c:	011b      	lsls	r3, r3, #4
 8003f8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <LL_RCC_GetAPB1Prescaler>:
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <LL_RCC_GetAPB2Prescaler>:
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <LL_RCC_PLL_Enable>:
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fde:	6013      	str	r3, [r2, #0]
}
 8003fe0:	bf00      	nop
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <LL_RCC_PLL_Disable>:
{
 8003fea:	b480      	push	{r7}
 8003fec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ff8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ffc:	6013      	str	r3, [r2, #0]
}
 8003ffe:	bf00      	nop
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <LL_RCC_PLL_IsReady>:
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800400c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004016:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800401a:	d101      	bne.n	8004020 <LL_RCC_PLL_IsReady+0x18>
 800401c:	2301      	movs	r3, #1
 800401e:	e000      	b.n	8004022 <LL_RCC_PLL_IsReady+0x1a>
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <LL_RCC_PLL_GetN>:
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	0a1b      	lsrs	r3, r3, #8
 8004038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800403c:	4618      	mov	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <LL_RCC_PLL_GetR>:
{
 8004046:	b480      	push	{r7}
 8004048:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800404a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004054:	4618      	mov	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <LL_RCC_PLL_GetDivider>:
{
 800405e:	b480      	push	{r7}
 8004060:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800406c:	4618      	mov	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <LL_RCC_PLL_GetMainSource>:
{
 8004076:	b480      	push	{r7}
 8004078:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800407a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f003 0303 	and.w	r3, r3, #3
}
 8004084:	4618      	mov	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <LL_RCC_IsActiveFlag_HPRE>:
{
 800408e:	b480      	push	{r7}
 8004090:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800409c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a0:	d101      	bne.n	80040a6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80040b2:	b480      	push	{r7}
 80040b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80040b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80040be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040c6:	d101      	bne.n	80040cc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80040c8:	2301      	movs	r3, #1
 80040ca:	e000      	b.n	80040ce <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80040dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80040e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ec:	d101      	bne.n	80040f2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <LL_RCC_IsActiveFlag_PPRE1>:
{
 80040fe:	b480      	push	{r7}
 8004100:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004110:	d101      	bne.n	8004116 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8004122:	b480      	push	{r7}
 8004124:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004130:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004134:	d101      	bne.n	800413a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
	...

08004148 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004148:	b590      	push	{r4, r7, lr}
 800414a:	b08d      	sub	sp, #52	; 0x34
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e37f      	b.n	800485a <HAL_RCC_OscConfig+0x712>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0320 	and.w	r3, r3, #32
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 8092 	beq.w	800428c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004168:	f7ff fe89 	bl	8003e7e <LL_RCC_GetSysClkSource>
 800416c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800416e:	f7ff ff82 	bl	8004076 <LL_RCC_PLL_GetMainSource>
 8004172:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004176:	2b00      	cmp	r3, #0
 8004178:	d005      	beq.n	8004186 <HAL_RCC_OscConfig+0x3e>
 800417a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417c:	2b0c      	cmp	r3, #12
 800417e:	d14c      	bne.n	800421a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004182:	2b01      	cmp	r3, #1
 8004184:	d149      	bne.n	800421a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004186:	f7ff fe17 	bl	8003db8 <LL_RCC_MSI_IsReady>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d005      	beq.n	800419c <HAL_RCC_OscConfig+0x54>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e35e      	b.n	800485a <HAL_RCC_OscConfig+0x712>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80041a0:	f7ff fe2f 	bl	8003e02 <LL_RCC_MSI_GetRange>
 80041a4:	4603      	mov	r3, r0
 80041a6:	429c      	cmp	r4, r3
 80041a8:	d914      	bls.n	80041d4 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fd44 	bl	8004c3c <RCC_SetFlashLatencyFromMSIRange>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e34d      	b.n	800485a <HAL_RCC_OscConfig+0x712>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff fe09 	bl	8003dda <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7ff fe2d 	bl	8003e2c <LL_RCC_MSI_SetCalibTrimming>
 80041d2:	e013      	b.n	80041fc <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff fdfe 	bl	8003dda <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff fe22 	bl	8003e2c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 fd25 	bl	8004c3c <RCC_SetFlashLatencyFromMSIRange>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e32e      	b.n	800485a <HAL_RCC_OscConfig+0x712>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80041fc:	f000 fcde 	bl	8004bbc <HAL_RCC_GetHCLKFreq>
 8004200:	4603      	mov	r3, r0
 8004202:	4aa5      	ldr	r2, [pc, #660]	; (8004498 <HAL_RCC_OscConfig+0x350>)
 8004204:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004206:	4ba5      	ldr	r3, [pc, #660]	; (800449c <HAL_RCC_OscConfig+0x354>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f7fe fb46 	bl	800289c <HAL_InitTick>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d039      	beq.n	800428a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e31f      	b.n	800485a <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d01e      	beq.n	8004260 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004222:	f7ff fdab 	bl	8003d7c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004226:	f7fe fb87 	bl	8002938 <HAL_GetTick>
 800422a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800422e:	f7fe fb83 	bl	8002938 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e30c      	b.n	800485a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004240:	f7ff fdba 	bl	8003db8 <LL_RCC_MSI_IsReady>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0f1      	beq.n	800422e <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff fdc3 	bl	8003dda <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff fde7 	bl	8003e2c <LL_RCC_MSI_SetCalibTrimming>
 800425e:	e015      	b.n	800428c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004260:	f7ff fd9b 	bl	8003d9a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004264:	f7fe fb68 	bl	8002938 <HAL_GetTick>
 8004268:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800426c:	f7fe fb64 	bl	8002938 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e2ed      	b.n	800485a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() != 0U)
 800427e:	f7ff fd9b 	bl	8003db8 <LL_RCC_MSI_IsReady>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1f1      	bne.n	800426c <HAL_RCC_OscConfig+0x124>
 8004288:	e000      	b.n	800428c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800428a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d04e      	beq.n	8004336 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004298:	f7ff fdf1 	bl	8003e7e <LL_RCC_GetSysClkSource>
 800429c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800429e:	f7ff feea 	bl	8004076 <LL_RCC_PLL_GetMainSource>
 80042a2:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	2b08      	cmp	r3, #8
 80042a8:	d005      	beq.n	80042b6 <HAL_RCC_OscConfig+0x16e>
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	2b0c      	cmp	r3, #12
 80042ae:	d10d      	bne.n	80042cc <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d10a      	bne.n	80042cc <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b6:	f7ff fc01 	bl	8003abc <LL_RCC_HSE_IsReady>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d039      	beq.n	8004334 <HAL_RCC_OscConfig+0x1ec>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d135      	bne.n	8004334 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e2c6      	b.n	800485a <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d4:	d102      	bne.n	80042dc <HAL_RCC_OscConfig+0x194>
 80042d6:	f7ff fbd3 	bl	8003a80 <LL_RCC_HSE_Enable>
 80042da:	e001      	b.n	80042e0 <HAL_RCC_OscConfig+0x198>
 80042dc:	f7ff fbdf 	bl	8003a9e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d012      	beq.n	800430e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e8:	f7fe fb26 	bl	8002938 <HAL_GetTick>
 80042ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f0:	f7fe fb22 	bl	8002938 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b64      	cmp	r3, #100	; 0x64
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e2ab      	b.n	800485a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004302:	f7ff fbdb 	bl	8003abc <LL_RCC_HSE_IsReady>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0f1      	beq.n	80042f0 <HAL_RCC_OscConfig+0x1a8>
 800430c:	e013      	b.n	8004336 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430e:	f7fe fb13 	bl	8002938 <HAL_GetTick>
 8004312:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004316:	f7fe fb0f 	bl	8002938 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b64      	cmp	r3, #100	; 0x64
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e298      	b.n	800485a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004328:	f7ff fbc8 	bl	8003abc <LL_RCC_HSE_IsReady>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f1      	bne.n	8004316 <HAL_RCC_OscConfig+0x1ce>
 8004332:	e000      	b.n	8004336 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004334:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d051      	beq.n	80043e6 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004342:	f7ff fd9c 	bl	8003e7e <LL_RCC_GetSysClkSource>
 8004346:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004348:	f7ff fe95 	bl	8004076 <LL_RCC_PLL_GetMainSource>
 800434c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	2b04      	cmp	r3, #4
 8004352:	d005      	beq.n	8004360 <HAL_RCC_OscConfig+0x218>
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	2b0c      	cmp	r3, #12
 8004358:	d113      	bne.n	8004382 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2b02      	cmp	r3, #2
 800435e:	d110      	bne.n	8004382 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004360:	f7ff fbdc 	bl	8003b1c <LL_RCC_HSI_IsReady>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d005      	beq.n	8004376 <HAL_RCC_OscConfig+0x22e>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e271      	b.n	800485a <HAL_RCC_OscConfig+0x712>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff fbe0 	bl	8003b40 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004380:	e031      	b.n	80043e6 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d019      	beq.n	80043be <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800438a:	f7ff fba9 	bl	8003ae0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438e:	f7fe fad3 	bl	8002938 <HAL_GetTick>
 8004392:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004396:	f7fe facf 	bl	8002938 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e258      	b.n	800485a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() == 0U)
 80043a8:	f7ff fbb8 	bl	8003b1c <LL_RCC_HSI_IsReady>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0f1      	beq.n	8004396 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff fbc2 	bl	8003b40 <LL_RCC_HSI_SetCalibTrimming>
 80043bc:	e013      	b.n	80043e6 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043be:	f7ff fb9e 	bl	8003afe <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c2:	f7fe fab9 	bl	8002938 <HAL_GetTick>
 80043c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80043c8:	e008      	b.n	80043dc <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ca:	f7fe fab5 	bl	8002938 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e23e      	b.n	800485a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() != 0U)
 80043dc:	f7ff fb9e 	bl	8003b1c <LL_RCC_HSI_IsReady>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f1      	bne.n	80043ca <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d106      	bne.n	8004400 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 80a4 	beq.w	8004548 <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d077      	beq.n	80044f8 <HAL_RCC_OscConfig+0x3b0>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0310 	and.w	r3, r3, #16
 8004410:	2b00      	cmp	r3, #0
 8004412:	d04b      	beq.n	80044ac <HAL_RCC_OscConfig+0x364>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004414:	f7ff fc55 	bl	8003cc2 <LL_RCC_LSI1_IsReady>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d113      	bne.n	8004446 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800441e:	f7ff fc2e 	bl	8003c7e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004422:	f7fe fa89 	bl	8002938 <HAL_GetTick>
 8004426:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800442a:	f7fe fa85 	bl	8002938 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e20e      	b.n	800485a <HAL_RCC_OscConfig+0x712>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800443c:	f7ff fc41 	bl	8003cc2 <LL_RCC_LSI1_IsReady>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0f1      	beq.n	800442a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004446:	f7ff fc4e 	bl	8003ce6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444a:	f7fe fa75 	bl	8002938 <HAL_GetTick>
 800444e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004450:	e008      	b.n	8004464 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004452:	f7fe fa71 	bl	8002938 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b03      	cmp	r3, #3
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e1fa      	b.n	800485a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004464:	f7ff fc61 	bl	8003d2a <LL_RCC_LSI2_IsReady>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0f1      	beq.n	8004452 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff fc6b 	bl	8003d4e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004478:	f7ff fc12 	bl	8003ca0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447c:	f7fe fa5c 	bl	8002938 <HAL_GetTick>
 8004480:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004482:	e00d      	b.n	80044a0 <HAL_RCC_OscConfig+0x358>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004484:	f7fe fa58 	bl	8002938 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d906      	bls.n	80044a0 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e1e1      	b.n	800485a <HAL_RCC_OscConfig+0x712>
 8004496:	bf00      	nop
 8004498:	2000000c 	.word	0x2000000c
 800449c:	20000010 	.word	0x20000010
        while (LL_RCC_LSI1_IsReady() != 0U)
 80044a0:	f7ff fc0f 	bl	8003cc2 <LL_RCC_LSI1_IsReady>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1ec      	bne.n	8004484 <HAL_RCC_OscConfig+0x33c>
 80044aa:	e04d      	b.n	8004548 <HAL_RCC_OscConfig+0x400>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80044ac:	f7ff fbe7 	bl	8003c7e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b0:	f7fe fa42 	bl	8002938 <HAL_GetTick>
 80044b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x382>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80044b8:	f7fe fa3e 	bl	8002938 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e1c7      	b.n	800485a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80044ca:	f7ff fbfa 	bl	8003cc2 <LL_RCC_LSI1_IsReady>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0f1      	beq.n	80044b8 <HAL_RCC_OscConfig+0x370>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80044d4:	f7ff fc18 	bl	8003d08 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x3a4>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80044da:	f7fe fa2d 	bl	8002938 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e1b6      	b.n	800485a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80044ec:	f7ff fc1d 	bl	8003d2a <LL_RCC_LSI2_IsReady>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f1      	bne.n	80044da <HAL_RCC_OscConfig+0x392>
 80044f6:	e027      	b.n	8004548 <HAL_RCC_OscConfig+0x400>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80044f8:	f7ff fc06 	bl	8003d08 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044fc:	f7fe fa1c 	bl	8002938 <HAL_GetTick>
 8004500:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0x3ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004504:	f7fe fa18 	bl	8002938 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b03      	cmp	r3, #3
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e1a1      	b.n	800485a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004516:	f7ff fc08 	bl	8003d2a <LL_RCC_LSI2_IsReady>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1f1      	bne.n	8004504 <HAL_RCC_OscConfig+0x3bc>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004520:	f7ff fbbe 	bl	8003ca0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004524:	f7fe fa08 	bl	8002938 <HAL_GetTick>
 8004528:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x3f6>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800452c:	f7fe fa04 	bl	8002938 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e18d      	b.n	800485a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800453e:	f7ff fbc0 	bl	8003cc2 <LL_RCC_LSI1_IsReady>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1f1      	bne.n	800452c <HAL_RCC_OscConfig+0x3e4>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b00      	cmp	r3, #0
 8004552:	d05b      	beq.n	800460c <HAL_RCC_OscConfig+0x4c4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004554:	4ba7      	ldr	r3, [pc, #668]	; (80047f4 <HAL_RCC_OscConfig+0x6ac>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455c:	2b00      	cmp	r3, #0
 800455e:	d114      	bne.n	800458a <HAL_RCC_OscConfig+0x442>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004560:	f7ff fa5e 	bl	8003a20 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004564:	f7fe f9e8 	bl	8002938 <HAL_GetTick>
 8004568:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x436>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800456c:	f7fe f9e4 	bl	8002938 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e16d      	b.n	800485a <HAL_RCC_OscConfig+0x712>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800457e:	4b9d      	ldr	r3, [pc, #628]	; (80047f4 <HAL_RCC_OscConfig+0x6ac>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0f0      	beq.n	800456c <HAL_RCC_OscConfig+0x424>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d102      	bne.n	8004598 <HAL_RCC_OscConfig+0x450>
 8004592:	f7ff fb1e 	bl	8003bd2 <LL_RCC_LSE_Enable>
 8004596:	e00c      	b.n	80045b2 <HAL_RCC_OscConfig+0x46a>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	2b05      	cmp	r3, #5
 800459e:	d104      	bne.n	80045aa <HAL_RCC_OscConfig+0x462>
 80045a0:	f7ff fb39 	bl	8003c16 <LL_RCC_LSE_EnableBypass>
 80045a4:	f7ff fb15 	bl	8003bd2 <LL_RCC_LSE_Enable>
 80045a8:	e003      	b.n	80045b2 <HAL_RCC_OscConfig+0x46a>
 80045aa:	f7ff fb23 	bl	8003bf4 <LL_RCC_LSE_Disable>
 80045ae:	f7ff fb43 	bl	8003c38 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d014      	beq.n	80045e4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ba:	f7fe f9bd 	bl	8002938 <HAL_GetTick>
 80045be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80045c0:	e00a      	b.n	80045d8 <HAL_RCC_OscConfig+0x490>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c2:	f7fe f9b9 	bl	8002938 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e140      	b.n	800485a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() == 0U)
 80045d8:	f7ff fb3f 	bl	8003c5a <LL_RCC_LSE_IsReady>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0ef      	beq.n	80045c2 <HAL_RCC_OscConfig+0x47a>
 80045e2:	e013      	b.n	800460c <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e4:	f7fe f9a8 	bl	8002938 <HAL_GetTick>
 80045e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80045ea:	e00a      	b.n	8004602 <HAL_RCC_OscConfig+0x4ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ec:	f7fe f9a4 	bl	8002938 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e12b      	b.n	800485a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004602:	f7ff fb2a 	bl	8003c5a <LL_RCC_LSE_IsReady>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1ef      	bne.n	80045ec <HAL_RCC_OscConfig+0x4a4>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004614:	2b00      	cmp	r3, #0
 8004616:	d02c      	beq.n	8004672 <HAL_RCC_OscConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461c:	2b00      	cmp	r3, #0
 800461e:	d014      	beq.n	800464a <HAL_RCC_OscConfig+0x502>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004620:	f7ff faa3 	bl	8003b6a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004624:	f7fe f988 	bl	8002938 <HAL_GetTick>
 8004628:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x4f6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800462c:	f7fe f984 	bl	8002938 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e10d      	b.n	800485a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800463e:	f7ff fab6 	bl	8003bae <LL_RCC_HSI48_IsReady>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0f1      	beq.n	800462c <HAL_RCC_OscConfig+0x4e4>
 8004648:	e013      	b.n	8004672 <HAL_RCC_OscConfig+0x52a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800464a:	f7ff fa9f 	bl	8003b8c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464e:	f7fe f973 	bl	8002938 <HAL_GetTick>
 8004652:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x520>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004656:	f7fe f96f 	bl	8002938 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e0f8      	b.n	800485a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004668:	f7ff faa1 	bl	8003bae <LL_RCC_HSI48_IsReady>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f1      	bne.n	8004656 <HAL_RCC_OscConfig+0x50e>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 80ee 	beq.w	8004858 <HAL_RCC_OscConfig+0x710>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800467c:	f7ff fbff 	bl	8003e7e <LL_RCC_GetSysClkSource>
 8004680:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	2b02      	cmp	r3, #2
 8004690:	f040 80b4 	bne.w	80047fc <HAL_RCC_OscConfig+0x6b4>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f003 0203 	and.w	r2, r3, #3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	429a      	cmp	r2, r3
 80046a0:	d123      	bne.n	80046ea <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d11c      	bne.n	80046ea <HAL_RCC_OscConfig+0x5a2>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	0a1b      	lsrs	r3, r3, #8
 80046b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046bc:	429a      	cmp	r2, r3
 80046be:	d114      	bne.n	80046ea <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d10d      	bne.n	80046ea <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046d8:	429a      	cmp	r2, r3
 80046da:	d106      	bne.n	80046ea <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d05d      	beq.n	80047a6 <HAL_RCC_OscConfig+0x65e>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	2b0c      	cmp	r3, #12
 80046ee:	d058      	beq.n	80047a2 <HAL_RCC_OscConfig+0x65a>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <HAL_RCC_OscConfig+0x5ba>

          {
            return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e0ab      	b.n	800485a <HAL_RCC_OscConfig+0x712>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004702:	f7ff fc72 	bl	8003fea <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004706:	f7fe f917 	bl	8002938 <HAL_GetTick>
 800470a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x5d8>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800470e:	f7fe f913 	bl	8002938 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x5d8>
              {
                return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e09c      	b.n	800485a <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1ef      	bne.n	800470e <HAL_RCC_OscConfig+0x5c6>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800472e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	4b30      	ldr	r3, [pc, #192]	; (80047f8 <HAL_RCC_OscConfig+0x6b0>)
 8004736:	4013      	ands	r3, r2
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004740:	4311      	orrs	r1, r2
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004746:	0212      	lsls	r2, r2, #8
 8004748:	4311      	orrs	r1, r2
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800474e:	4311      	orrs	r1, r2
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004754:	4311      	orrs	r1, r2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800475a:	430a      	orrs	r2, r1
 800475c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004760:	4313      	orrs	r3, r2
 8004762:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004764:	f7ff fc32 	bl	8003fcc <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004776:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004778:	f7fe f8de 	bl	8002938 <HAL_GetTick>
 800477c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x64a>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004780:	f7fe f8da 	bl	8002938 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x64a>
              {
                return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e063      	b.n	800485a <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0ef      	beq.n	8004780 <HAL_RCC_OscConfig+0x638>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047a0:	e05a      	b.n	8004858 <HAL_RCC_OscConfig+0x710>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e059      	b.n	800485a <HAL_RCC_OscConfig+0x712>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d151      	bne.n	8004858 <HAL_RCC_OscConfig+0x710>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80047b4:	f7ff fc0a 	bl	8003fcc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047c8:	f7fe f8b6 	bl	8002938 <HAL_GetTick>
 80047cc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x69a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d0:	f7fe f8b2 	bl	8002938 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x69a>
            {
              return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e03b      	b.n	800485a <HAL_RCC_OscConfig+0x712>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0ef      	beq.n	80047d0 <HAL_RCC_OscConfig+0x688>
 80047f0:	e032      	b.n	8004858 <HAL_RCC_OscConfig+0x710>
 80047f2:	bf00      	nop
 80047f4:	58000400 	.word	0x58000400
 80047f8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	2b0c      	cmp	r3, #12
 8004800:	d028      	beq.n	8004854 <HAL_RCC_OscConfig+0x70c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004802:	f7ff fbf2 	bl	8003fea <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004810:	f023 0303 	bic.w	r3, r3, #3
 8004814:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8004816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004820:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004828:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482a:	f7fe f885 	bl	8002938 <HAL_GetTick>
 800482e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004830:	e008      	b.n	8004844 <HAL_RCC_OscConfig+0x6fc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004832:	f7fe f881 	bl	8002938 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x6fc>
          {
            return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e00a      	b.n	800485a <HAL_RCC_OscConfig+0x712>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1ef      	bne.n	8004832 <HAL_RCC_OscConfig+0x6ea>
 8004852:	e001      	b.n	8004858 <HAL_RCC_OscConfig+0x710>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e000      	b.n	800485a <HAL_RCC_OscConfig+0x712>
      }
    }
  }
  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3734      	adds	r7, #52	; 0x34
 800485e:	46bd      	mov	sp, r7
 8004860:	bd90      	pop	{r4, r7, pc}
 8004862:	bf00      	nop

08004864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e12d      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004878:	4b98      	ldr	r3, [pc, #608]	; (8004adc <HAL_RCC_ClockConfig+0x278>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d91b      	bls.n	80048be <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004886:	4b95      	ldr	r3, [pc, #596]	; (8004adc <HAL_RCC_ClockConfig+0x278>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f023 0207 	bic.w	r2, r3, #7
 800488e:	4993      	ldr	r1, [pc, #588]	; (8004adc <HAL_RCC_ClockConfig+0x278>)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	4313      	orrs	r3, r2
 8004894:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004896:	f7fe f84f 	bl	8002938 <HAL_GetTick>
 800489a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800489c:	e008      	b.n	80048b0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800489e:	f7fe f84b 	bl	8002938 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e111      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b0:	4b8a      	ldr	r3, [pc, #552]	; (8004adc <HAL_RCC_ClockConfig+0x278>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d1ef      	bne.n	800489e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d016      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7ff fae1 	bl	8003e96 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048d4:	f7fe f830 	bl	8002938 <HAL_GetTick>
 80048d8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80048da:	e008      	b.n	80048ee <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048dc:	f7fe f82c 	bl	8002938 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e0f2      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80048ee:	f7ff fbce 	bl	800408e <LL_RCC_IsActiveFlag_HPRE>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d0f1      	beq.n	80048dc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0320 	and.w	r3, r3, #32
 8004900:	2b00      	cmp	r3, #0
 8004902:	d016      	beq.n	8004932 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff fad8 	bl	8003ebe <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800490e:	f7fe f813 	bl	8002938 <HAL_GetTick>
 8004912:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004914:	e008      	b.n	8004928 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004916:	f7fe f80f 	bl	8002938 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d901      	bls.n	8004928 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e0d5      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004928:	f7ff fbc3 	bl	80040b2 <LL_RCC_IsActiveFlag_C2HPRE>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0f1      	beq.n	8004916 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493a:	2b00      	cmp	r3, #0
 800493c:	d016      	beq.n	800496c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff fad1 	bl	8003eea <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004948:	f7fd fff6 	bl	8002938 <HAL_GetTick>
 800494c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800494e:	e008      	b.n	8004962 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004950:	f7fd fff2 	bl	8002938 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e0b8      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004962:	f7ff fbb9 	bl	80040d8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0f1      	beq.n	8004950 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	d016      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff facb 	bl	8003f18 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004982:	f7fd ffd9 	bl	8002938 <HAL_GetTick>
 8004986:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004988:	e008      	b.n	800499c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800498a:	f7fd ffd5 	bl	8002938 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d901      	bls.n	800499c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e09b      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800499c:	f7ff fbaf 	bl	80040fe <LL_RCC_IsActiveFlag_PPRE1>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f1      	beq.n	800498a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d017      	beq.n	80049e2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7ff fac1 	bl	8003f40 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80049be:	f7fd ffbb 	bl	8002938 <HAL_GetTick>
 80049c2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80049c4:	e008      	b.n	80049d8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80049c6:	f7fd ffb7 	bl	8002938 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d901      	bls.n	80049d8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e07d      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80049d8:	f7ff fba3 	bl	8004122 <LL_RCC_IsActiveFlag_PPRE2>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0f1      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d043      	beq.n	8004a76 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d106      	bne.n	8004a04 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80049f6:	f7ff f861 	bl	8003abc <LL_RCC_HSE_IsReady>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d11e      	bne.n	8004a3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e067      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2b03      	cmp	r3, #3
 8004a0a:	d106      	bne.n	8004a1a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004a0c:	f7ff fafc 	bl	8004008 <LL_RCC_PLL_IsReady>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d113      	bne.n	8004a3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e05c      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004a22:	f7ff f9c9 	bl	8003db8 <LL_RCC_MSI_IsReady>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d108      	bne.n	8004a3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e051      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004a30:	f7ff f874 	bl	8003b1c <LL_RCC_HSI_IsReady>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e04a      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7ff fa07 	bl	8003e56 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a48:	f7fd ff76 	bl	8002938 <HAL_GetTick>
 8004a4c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4e:	e00a      	b.n	8004a66 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a50:	f7fd ff72 	bl	8002938 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e036      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a66:	f7ff fa0a 	bl	8003e7e <LL_RCC_GetSysClkSource>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d1ec      	bne.n	8004a50 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a76:	4b19      	ldr	r3, [pc, #100]	; (8004adc <HAL_RCC_ClockConfig+0x278>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d21b      	bcs.n	8004abc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a84:	4b15      	ldr	r3, [pc, #84]	; (8004adc <HAL_RCC_ClockConfig+0x278>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f023 0207 	bic.w	r2, r3, #7
 8004a8c:	4913      	ldr	r1, [pc, #76]	; (8004adc <HAL_RCC_ClockConfig+0x278>)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a94:	f7fd ff50 	bl	8002938 <HAL_GetTick>
 8004a98:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004a9c:	f7fd ff4c 	bl	8002938 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e012      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aae:	4b0b      	ldr	r3, [pc, #44]	; (8004adc <HAL_RCC_ClockConfig+0x278>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d1ef      	bne.n	8004a9c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004abc:	f000 f87e 	bl	8004bbc <HAL_RCC_GetHCLKFreq>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	4a07      	ldr	r2, [pc, #28]	; (8004ae0 <HAL_RCC_ClockConfig+0x27c>)
 8004ac4:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004ac6:	f7fd ff43 	bl	8002950 <HAL_GetTickPrio>
 8004aca:	4603      	mov	r3, r0
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fd fee5 	bl	800289c <HAL_InitTick>
 8004ad2:	4603      	mov	r3, r0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	58004000 	.word	0x58004000
 8004ae0:	2000000c 	.word	0x2000000c

08004ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ae4:	b590      	push	{r4, r7, lr}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aea:	f7ff f9c8 	bl	8003e7e <LL_RCC_GetSysClkSource>
 8004aee:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10a      	bne.n	8004b0c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004af6:	f7ff f984 	bl	8003e02 <LL_RCC_MSI_GetRange>
 8004afa:	4603      	mov	r3, r0
 8004afc:	091b      	lsrs	r3, r3, #4
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	4a2b      	ldr	r2, [pc, #172]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	e04b      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d102      	bne.n	8004b18 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b12:	4b28      	ldr	r3, [pc, #160]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	e045      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b08      	cmp	r3, #8
 8004b1c:	d10a      	bne.n	8004b34 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004b1e:	f7fe ff9d 	bl	8003a5c <LL_RCC_HSE_IsEnabledDiv2>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d102      	bne.n	8004b2e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004b28:	4b22      	ldr	r3, [pc, #136]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	e03a      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004b2e:	4b22      	ldr	r3, [pc, #136]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	e037      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004b34:	f7ff fa9f 	bl	8004076 <LL_RCC_PLL_GetMainSource>
 8004b38:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d003      	beq.n	8004b48 <HAL_RCC_GetSysClockFreq+0x64>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	2b03      	cmp	r3, #3
 8004b44:	d003      	beq.n	8004b4e <HAL_RCC_GetSysClockFreq+0x6a>
 8004b46:	e00d      	b.n	8004b64 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004b48:	4b1a      	ldr	r3, [pc, #104]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b4a:	60bb      	str	r3, [r7, #8]
        break;
 8004b4c:	e015      	b.n	8004b7a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004b4e:	f7fe ff85 	bl	8003a5c <LL_RCC_HSE_IsEnabledDiv2>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d102      	bne.n	8004b5e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004b58:	4b16      	ldr	r3, [pc, #88]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b5a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004b5c:	e00d      	b.n	8004b7a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004b5e:	4b16      	ldr	r3, [pc, #88]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004b60:	60bb      	str	r3, [r7, #8]
        break;
 8004b62:	e00a      	b.n	8004b7a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004b64:	f7ff f94d 	bl	8003e02 <LL_RCC_MSI_GetRange>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	091b      	lsrs	r3, r3, #4
 8004b6c:	f003 030f 	and.w	r3, r3, #15
 8004b70:	4a0f      	ldr	r2, [pc, #60]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b76:	60bb      	str	r3, [r7, #8]
        break;
 8004b78:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8004b7a:	f7ff fa57 	bl	800402c <LL_RCC_PLL_GetN>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	fb03 f402 	mul.w	r4, r3, r2
 8004b86:	f7ff fa6a 	bl	800405e <LL_RCC_PLL_GetDivider>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	091b      	lsrs	r3, r3, #4
 8004b8e:	3301      	adds	r3, #1
 8004b90:	fbb4 f4f3 	udiv	r4, r4, r3
 8004b94:	f7ff fa57 	bl	8004046 <LL_RCC_PLL_GetR>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	0f5b      	lsrs	r3, r3, #29
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	fbb4 f3f3 	udiv	r3, r4, r3
 8004ba2:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd90      	pop	{r4, r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	0800ae1c 	.word	0x0800ae1c
 8004bb4:	00f42400 	.word	0x00f42400
 8004bb8:	01e84800 	.word	0x01e84800

08004bbc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bbc:	b598      	push	{r3, r4, r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004bc0:	f7ff ff90 	bl	8004ae4 <HAL_RCC_GetSysClockFreq>
 8004bc4:	4604      	mov	r4, r0
 8004bc6:	f7ff f9cf 	bl	8003f68 <LL_RCC_GetAHBPrescaler>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	091b      	lsrs	r3, r3, #4
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	4a03      	ldr	r2, [pc, #12]	; (8004be0 <HAL_RCC_GetHCLKFreq+0x24>)
 8004bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bd8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	bd98      	pop	{r3, r4, r7, pc}
 8004be0:	0800adbc 	.word	0x0800adbc

08004be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004be4:	b598      	push	{r3, r4, r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004be8:	f7ff ffe8 	bl	8004bbc <HAL_RCC_GetHCLKFreq>
 8004bec:	4604      	mov	r4, r0
 8004bee:	f7ff f9d5 	bl	8003f9c <LL_RCC_GetAPB1Prescaler>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	0a1b      	lsrs	r3, r3, #8
 8004bf6:	f003 0307 	and.w	r3, r3, #7
 8004bfa:	4a04      	ldr	r2, [pc, #16]	; (8004c0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c00:	f003 031f 	and.w	r3, r3, #31
 8004c04:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	bd98      	pop	{r3, r4, r7, pc}
 8004c0c:	0800adfc 	.word	0x0800adfc

08004c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c10:	b598      	push	{r3, r4, r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004c14:	f7ff ffd2 	bl	8004bbc <HAL_RCC_GetHCLKFreq>
 8004c18:	4604      	mov	r4, r0
 8004c1a:	f7ff f9cb 	bl	8003fb4 <LL_RCC_GetAPB2Prescaler>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	0adb      	lsrs	r3, r3, #11
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	4a04      	ldr	r2, [pc, #16]	; (8004c38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c2c:	f003 031f 	and.w	r3, r3, #31
 8004c30:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	bd98      	pop	{r3, r4, r7, pc}
 8004c38:	0800adfc 	.word	0x0800adfc

08004c3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004c3c:	b590      	push	{r4, r7, lr}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2bb0      	cmp	r3, #176	; 0xb0
 8004c48:	d903      	bls.n	8004c52 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004c4a:	4b15      	ldr	r3, [pc, #84]	; (8004ca0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4e:	60fb      	str	r3, [r7, #12]
 8004c50:	e007      	b.n	8004c62 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	091b      	lsrs	r3, r3, #4
 8004c56:	f003 030f 	and.w	r3, r3, #15
 8004c5a:	4a11      	ldr	r2, [pc, #68]	; (8004ca0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c60:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004c62:	f7ff f98d 	bl	8003f80 <LL_RCC_GetAHB4Prescaler>
 8004c66:	4603      	mov	r3, r0
 8004c68:	091b      	lsrs	r3, r3, #4
 8004c6a:	f003 030f 	and.w	r3, r3, #15
 8004c6e:	4a0d      	ldr	r2, [pc, #52]	; (8004ca4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ca8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004c80:	fba2 2303 	umull	r2, r3, r2, r3
 8004c84:	0c9c      	lsrs	r4, r3, #18
 8004c86:	f7fe fedb 	bl	8003a40 <HAL_PWREx_GetVoltageRange>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4620      	mov	r0, r4
 8004c90:	f000 f80c 	bl	8004cac <RCC_SetFlashLatency>
 8004c94:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd90      	pop	{r4, r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	0800ae1c 	.word	0x0800ae1c
 8004ca4:	0800adbc 	.word	0x0800adbc
 8004ca8:	431bde83 	.word	0x431bde83

08004cac <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004cac:	b590      	push	{r4, r7, lr}
 8004cae:	b093      	sub	sp, #76	; 0x4c
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004cb6:	4b37      	ldr	r3, [pc, #220]	; (8004d94 <RCC_SetFlashLatency+0xe8>)
 8004cb8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004cbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004cbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004cc2:	4a35      	ldr	r2, [pc, #212]	; (8004d98 <RCC_SetFlashLatency+0xec>)
 8004cc4:	f107 031c 	add.w	r3, r7, #28
 8004cc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8004cca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004cce:	4b33      	ldr	r3, [pc, #204]	; (8004d9c <RCC_SetFlashLatency+0xf0>)
 8004cd0:	f107 040c 	add.w	r4, r7, #12
 8004cd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004cd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004cda:	2300      	movs	r3, #0
 8004cdc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ce4:	d11a      	bne.n	8004d1c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	643b      	str	r3, [r7, #64]	; 0x40
 8004cea:	e013      	b.n	8004d14 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	3348      	adds	r3, #72	; 0x48
 8004cf2:	443b      	add	r3, r7
 8004cf4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d807      	bhi.n	8004d0e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	3348      	adds	r3, #72	; 0x48
 8004d04:	443b      	add	r3, r7
 8004d06:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004d0a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004d0c:	e020      	b.n	8004d50 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d10:	3301      	adds	r3, #1
 8004d12:	643b      	str	r3, [r7, #64]	; 0x40
 8004d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d16:	2b03      	cmp	r3, #3
 8004d18:	d9e8      	bls.n	8004cec <RCC_SetFlashLatency+0x40>
 8004d1a:	e019      	b.n	8004d50 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d20:	e013      	b.n	8004d4a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	3348      	adds	r3, #72	; 0x48
 8004d28:	443b      	add	r3, r7
 8004d2a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d807      	bhi.n	8004d44 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	3348      	adds	r3, #72	; 0x48
 8004d3a:	443b      	add	r3, r7
 8004d3c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004d40:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004d42:	e005      	b.n	8004d50 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d46:	3301      	adds	r3, #1
 8004d48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d9e8      	bls.n	8004d22 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8004d50:	4b13      	ldr	r3, [pc, #76]	; (8004da0 <RCC_SetFlashLatency+0xf4>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f023 0207 	bic.w	r2, r3, #7
 8004d58:	4911      	ldr	r1, [pc, #68]	; (8004da0 <RCC_SetFlashLatency+0xf4>)
 8004d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004d60:	f7fd fdea 	bl	8002938 <HAL_GetTick>
 8004d64:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004d66:	e008      	b.n	8004d7a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004d68:	f7fd fde6 	bl	8002938 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d901      	bls.n	8004d7a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e007      	b.n	8004d8a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004d7a:	4b09      	ldr	r3, [pc, #36]	; (8004da0 <RCC_SetFlashLatency+0xf4>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d1ef      	bne.n	8004d68 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	374c      	adds	r7, #76	; 0x4c
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd90      	pop	{r4, r7, pc}
 8004d92:	bf00      	nop
 8004d94:	0800a350 	.word	0x0800a350
 8004d98:	0800a360 	.word	0x0800a360
 8004d9c:	0800a36c 	.word	0x0800a36c
 8004da0:	58004000 	.word	0x58004000

08004da4 <LL_RCC_LSE_IsEnabled>:
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d101      	bne.n	8004dbc <LL_RCC_LSE_IsEnabled+0x18>
 8004db8:	2301      	movs	r3, #1
 8004dba:	e000      	b.n	8004dbe <LL_RCC_LSE_IsEnabled+0x1a>
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <LL_RCC_LSE_IsReady>:
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d101      	bne.n	8004de0 <LL_RCC_LSE_IsReady+0x18>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e000      	b.n	8004de2 <LL_RCC_LSE_IsReady+0x1a>
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <LL_RCC_SetRFWKPClockSource>:
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <LL_RCC_SetSMPSClockSource>:
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	f023 0203 	bic.w	r2, r3, #3
 8004e2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <LL_RCC_SetSMPSPrescaler>:
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <LL_RCC_SetUSARTClockSource>:
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e78:	f023 0203 	bic.w	r2, r3, #3
 8004e7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <LL_RCC_SetLPUARTClockSource>:
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ea8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <LL_RCC_SetI2CClockSource>:
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ecc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	091b      	lsrs	r3, r3, #4
 8004ed4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004ed8:	43db      	mvns	r3, r3
 8004eda:	401a      	ands	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	011b      	lsls	r3, r3, #4
 8004ee0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004ee4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <LL_RCC_SetLPTIMClockSource>:
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f06:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	0c1b      	lsrs	r3, r3, #16
 8004f0e:	041b      	lsls	r3, r3, #16
 8004f10:	43db      	mvns	r3, r3
 8004f12:	401a      	ands	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	041b      	lsls	r3, r3, #16
 8004f18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <LL_RCC_SetSAIClockSource>:
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f4e:	bf00      	nop
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <LL_RCC_SetRNGClockSource>:
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004f6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <LL_RCC_SetCLK48ClockSource>:
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <LL_RCC_SetUSBClockSource>:
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b082      	sub	sp, #8
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7ff ffe3 	bl	8004f86 <LL_RCC_SetCLK48ClockSource>
}
 8004fc0:	bf00      	nop
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <LL_RCC_SetADCClockSource>:
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <LL_RCC_SetRTCClockSource>:
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005004:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005008:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <LL_RCC_GetRTCClockSource>:
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005030:	4618      	mov	r0, r3
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <LL_RCC_ForceBackupDomainReset>:
{
 800503a:	b480      	push	{r7}
 800503c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800503e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005046:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800504a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800504e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005052:	bf00      	nop
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <LL_RCC_ReleaseBackupDomainReset>:
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005068:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800506c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005074:	bf00      	nop
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <LL_RCC_PLLSAI1_Enable>:
{
 800507e:	b480      	push	{r7}
 8005080:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800508c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005090:	6013      	str	r3, [r2, #0]
}
 8005092:	bf00      	nop
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <LL_RCC_PLLSAI1_Disable>:
{
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80050a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050ae:	6013      	str	r3, [r2, #0]
}
 80050b0:	bf00      	nop
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <LL_RCC_PLLSAI1_IsReady>:
{
 80050ba:	b480      	push	{r7}
 80050bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80050be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050cc:	d101      	bne.n	80050d2 <LL_RCC_PLLSAI1_IsReady+0x18>
 80050ce:	2301      	movs	r3, #1
 80050d0:	e000      	b.n	80050d4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b088      	sub	sp, #32
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80050e6:	2300      	movs	r3, #0
 80050e8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80050ea:	2300      	movs	r3, #0
 80050ec:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d034      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005102:	d021      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005104:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005108:	d81b      	bhi.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800510a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800510e:	d01d      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005110:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005114:	d815      	bhi.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00b      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800511a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800511e:	d110      	bne.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800512a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800512e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005130:	e00d      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3304      	adds	r3, #4
 8005136:	4618      	mov	r0, r3
 8005138:	f000 f947 	bl	80053ca <RCCEx_PLLSAI1_ConfigNP>
 800513c:	4603      	mov	r3, r0
 800513e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005140:	e005      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	77fb      	strb	r3, [r7, #31]
        break;
 8005146:	e002      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005148:	bf00      	nop
 800514a:	e000      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800514c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800514e:	7ffb      	ldrb	r3, [r7, #31]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d105      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005158:	4618      	mov	r0, r3
 800515a:	f7ff fee8 	bl	8004f2e <LL_RCC_SetSAIClockSource>
 800515e:	e001      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005160:	7ffb      	ldrb	r3, [r7, #31]
 8005162:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800516c:	2b00      	cmp	r3, #0
 800516e:	d046      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005170:	f7ff ff56 	bl	8005020 <LL_RCC_GetRTCClockSource>
 8005174:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	429a      	cmp	r2, r3
 800517e:	d03c      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005180:	f7fe fc4e 	bl	8003a20 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d105      	bne.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	4618      	mov	r0, r3
 8005190:	f7ff ff30 	bl	8004ff4 <LL_RCC_SetRTCClockSource>
 8005194:	e02e      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800519a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80051a0:	f7ff ff4b 	bl	800503a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80051a4:	f7ff ff5a 	bl	800505c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	4313      	orrs	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80051b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80051c0:	f7ff fdf0 	bl	8004da4 <LL_RCC_LSE_IsEnabled>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d114      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051ca:	f7fd fbb5 	bl	8002938 <HAL_GetTick>
 80051ce:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80051d0:	e00b      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051d2:	f7fd fbb1 	bl	8002938 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d902      	bls.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	77fb      	strb	r3, [r7, #31]
              break;
 80051e8:	e004      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80051ea:	f7ff fded 	bl	8004dc8 <LL_RCC_LSE_IsReady>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d1ee      	bne.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80051f4:	7ffb      	ldrb	r3, [r7, #31]
 80051f6:	77bb      	strb	r3, [r7, #30]
 80051f8:	e001      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051fa:	7ffb      	ldrb	r3, [r7, #31]
 80051fc:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d004      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	4618      	mov	r0, r3
 8005210:	f7ff fe2a 	bl	8004e68 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d004      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff fe35 	bl	8004e94 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0310 	and.w	r3, r3, #16
 8005232:	2b00      	cmp	r3, #0
 8005234:	d004      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523a:	4618      	mov	r0, r3
 800523c:	f7ff fe5d 	bl	8004efa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0320 	and.w	r3, r3, #32
 8005248:	2b00      	cmp	r3, #0
 800524a:	d004      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	4618      	mov	r0, r3
 8005252:	f7ff fe52 	bl	8004efa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0304 	and.w	r3, r3, #4
 800525e:	2b00      	cmp	r3, #0
 8005260:	d004      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	4618      	mov	r0, r3
 8005268:	f7ff fe2a 	bl	8004ec0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0308 	and.w	r3, r3, #8
 8005274:	2b00      	cmp	r3, #0
 8005276:	d004      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	4618      	mov	r0, r3
 800527e:	f7ff fe1f 	bl	8004ec0 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528a:	2b00      	cmp	r3, #0
 800528c:	d022      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005292:	4618      	mov	r0, r3
 8005294:	f7ff fe8d 	bl	8004fb2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052a0:	d107      	bne.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80052a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052b0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052ba:	d10b      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	3304      	adds	r3, #4
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 f8dd 	bl	8005480 <RCCEx_PLLSAI1_ConfigNQ>
 80052c6:	4603      	mov	r3, r0
 80052c8:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80052ca:	7ffb      	ldrb	r3, [r7, #31]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 80052d0:	7ffb      	ldrb	r3, [r7, #31]
 80052d2:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d02b      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e8:	d008      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052f2:	d003      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d105      	bne.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005300:	4618      	mov	r0, r3
 8005302:	f7ff fe2a 	bl	8004f5a <LL_RCC_SetRNGClockSource>
 8005306:	e00a      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	2000      	movs	r0, #0
 8005314:	f7ff fe21 	bl	8004f5a <LL_RCC_SetRNGClockSource>
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f7ff fe34 	bl	8004f86 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005322:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005326:	d107      	bne.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005336:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005340:	2b00      	cmp	r3, #0
 8005342:	d022      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005348:	4618      	mov	r0, r3
 800534a:	f7ff fe3d 	bl	8004fc8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005352:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005356:	d107      	bne.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005366:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005370:	d10b      	bne.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	3304      	adds	r3, #4
 8005376:	4618      	mov	r0, r3
 8005378:	f000 f8dd 	bl	8005536 <RCCEx_PLLSAI1_ConfigNR>
 800537c:	4603      	mov	r3, r0
 800537e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005380:	7ffb      	ldrb	r3, [r7, #31]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8005386:	7ffb      	ldrb	r3, [r7, #31]
 8005388:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d004      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539a:	4618      	mov	r0, r3
 800539c:	f7ff fd26 	bl	8004dec <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d009      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7ff fd45 	bl	8004e40 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7ff fd2c 	bl	8004e18 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80053c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3720      	adds	r7, #32
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b084      	sub	sp, #16
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80053d6:	f7ff fe61 	bl	800509c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80053da:	f7fd faad 	bl	8002938 <HAL_GetTick>
 80053de:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80053e0:	e009      	b.n	80053f6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053e2:	f7fd faa9 	bl	8002938 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d902      	bls.n	80053f6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	73fb      	strb	r3, [r7, #15]
      break;
 80053f4:	e004      	b.n	8005400 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80053f6:	f7ff fe60 	bl	80050ba <LL_RCC_PLLSAI1_IsReady>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1f0      	bne.n	80053e2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005400:	7bfb      	ldrb	r3, [r7, #15]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d137      	bne.n	8005476 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	021b      	lsls	r3, r3, #8
 8005416:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800541a:	4313      	orrs	r3, r2
 800541c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800541e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005430:	4313      	orrs	r3, r2
 8005432:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005434:	f7ff fe23 	bl	800507e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005438:	f7fd fa7e 	bl	8002938 <HAL_GetTick>
 800543c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800543e:	e009      	b.n	8005454 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005440:	f7fd fa7a 	bl	8002938 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d902      	bls.n	8005454 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	73fb      	strb	r3, [r7, #15]
        break;
 8005452:	e004      	b.n	800545e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005454:	f7ff fe31 	bl	80050ba <LL_RCC_PLLSAI1_IsReady>
 8005458:	4603      	mov	r3, r0
 800545a:	2b01      	cmp	r3, #1
 800545c:	d1f0      	bne.n	8005440 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800545e:	7bfb      	ldrb	r3, [r7, #15]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d108      	bne.n	8005476 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005468:	691a      	ldr	r2, [r3, #16]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005472:	4313      	orrs	r3, r2
 8005474:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005476:	7bfb      	ldrb	r3, [r7, #15]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800548c:	f7ff fe06 	bl	800509c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005490:	f7fd fa52 	bl	8002938 <HAL_GetTick>
 8005494:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005496:	e009      	b.n	80054ac <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005498:	f7fd fa4e 	bl	8002938 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d902      	bls.n	80054ac <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	73fb      	strb	r3, [r7, #15]
      break;
 80054aa:	e004      	b.n	80054b6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80054ac:	f7ff fe05 	bl	80050ba <LL_RCC_PLLSAI1_IsReady>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1f0      	bne.n	8005498 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80054b6:	7bfb      	ldrb	r3, [r7, #15]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d137      	bne.n	800552c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80054bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	021b      	lsls	r3, r3, #8
 80054cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054d0:	4313      	orrs	r3, r2
 80054d2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80054d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054e6:	4313      	orrs	r3, r2
 80054e8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80054ea:	f7ff fdc8 	bl	800507e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ee:	f7fd fa23 	bl	8002938 <HAL_GetTick>
 80054f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80054f4:	e009      	b.n	800550a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054f6:	f7fd fa1f 	bl	8002938 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	2b02      	cmp	r3, #2
 8005502:	d902      	bls.n	800550a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	73fb      	strb	r3, [r7, #15]
        break;
 8005508:	e004      	b.n	8005514 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800550a:	f7ff fdd6 	bl	80050ba <LL_RCC_PLLSAI1_IsReady>
 800550e:	4603      	mov	r3, r0
 8005510:	2b01      	cmp	r3, #1
 8005512:	d1f0      	bne.n	80054f6 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005514:	7bfb      	ldrb	r3, [r7, #15]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d108      	bne.n	800552c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800551a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800551e:	691a      	ldr	r2, [r3, #16]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005528:	4313      	orrs	r3, r2
 800552a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800552c:	7bfb      	ldrb	r3, [r7, #15]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b084      	sub	sp, #16
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005542:	f7ff fdab 	bl	800509c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005546:	f7fd f9f7 	bl	8002938 <HAL_GetTick>
 800554a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800554c:	e009      	b.n	8005562 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800554e:	f7fd f9f3 	bl	8002938 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d902      	bls.n	8005562 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	73fb      	strb	r3, [r7, #15]
      break;
 8005560:	e004      	b.n	800556c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005562:	f7ff fdaa 	bl	80050ba <LL_RCC_PLLSAI1_IsReady>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1f0      	bne.n	800554e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800556c:	7bfb      	ldrb	r3, [r7, #15]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d137      	bne.n	80055e2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	021b      	lsls	r3, r3, #8
 8005582:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005586:	4313      	orrs	r3, r2
 8005588:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800558a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800559c:	4313      	orrs	r3, r2
 800559e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80055a0:	f7ff fd6d 	bl	800507e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055a4:	f7fd f9c8 	bl	8002938 <HAL_GetTick>
 80055a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80055aa:	e009      	b.n	80055c0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055ac:	f7fd f9c4 	bl	8002938 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d902      	bls.n	80055c0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	73fb      	strb	r3, [r7, #15]
        break;
 80055be:	e004      	b.n	80055ca <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80055c0:	f7ff fd7b 	bl	80050ba <LL_RCC_PLLSAI1_IsReady>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d1f0      	bne.n	80055ac <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80055ca:	7bfb      	ldrb	r3, [r7, #15]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d108      	bne.n	80055e2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80055d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055d4:	691a      	ldr	r2, [r3, #16]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055de:	4313      	orrs	r3, r2
 80055e0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80055e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e090      	b.n	8005720 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d106      	bne.n	8005618 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7fc ffa6 	bl	8002564 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	22ca      	movs	r2, #202	; 0xca
 8005626:	625a      	str	r2, [r3, #36]	; 0x24
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2253      	movs	r2, #83	; 0x53
 800562e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f89f 	bl	8005774 <RTC_EnterInitMode>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d009      	beq.n	8005650 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	22ff      	movs	r2, #255	; 0xff
 8005642:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2204      	movs	r2, #4
 8005648:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e067      	b.n	8005720 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6812      	ldr	r2, [r2, #0]
 800565a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800565e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005662:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6899      	ldr	r1, [r3, #8]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	431a      	orrs	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	431a      	orrs	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	68d2      	ldr	r2, [r2, #12]
 800568a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6919      	ldr	r1, [r3, #16]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	041a      	lsls	r2, r3, #16
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056ae:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 0203 	bic.w	r2, r2, #3
 80056be:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	69da      	ldr	r2, [r3, #28]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	431a      	orrs	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 0320 	and.w	r3, r3, #32
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d113      	bne.n	800570e <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f81e 	bl	8005728 <HAL_RTC_WaitForSynchro>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00d      	beq.n	800570e <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	22ff      	movs	r2, #255	; 0xff
 80056f8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2204      	movs	r2, #4
 80056fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e008      	b.n	8005720 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	22ff      	movs	r2, #255	; 0xff
 8005714:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800571e:	2300      	movs	r3, #0
  }
}
 8005720:	4618      	mov	r0, r3
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800573e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005740:	f7fd f8fa 	bl	8002938 <HAL_GetTick>
 8005744:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005746:	e009      	b.n	800575c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005748:	f7fd f8f6 	bl	8002938 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005756:	d901      	bls.n	800575c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e007      	b.n	800576c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b00      	cmp	r3, #0
 8005768:	d0ee      	beq.n	8005748 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005786:	2b00      	cmp	r3, #0
 8005788:	d119      	bne.n	80057be <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f04f 32ff 	mov.w	r2, #4294967295
 8005792:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005794:	f7fd f8d0 	bl	8002938 <HAL_GetTick>
 8005798:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800579a:	e009      	b.n	80057b0 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800579c:	f7fd f8cc 	bl	8002938 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057aa:	d901      	bls.n	80057b0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e007      	b.n	80057c0 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0ee      	beq.n	800579c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d101      	bne.n	80057e2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80057de:	2302      	movs	r3, #2
 80057e0:	e0a8      	b.n	8005934 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2202      	movs	r2, #2
 80057ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	22ca      	movs	r2, #202	; 0xca
 80057f8:	625a      	str	r2, [r3, #36]	; 0x24
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2253      	movs	r2, #83	; 0x53
 8005800:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800580c:	2b00      	cmp	r3, #0
 800580e:	d020      	beq.n	8005852 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8005810:	f7fd f892 	bl	8002938 <HAL_GetTick>
 8005814:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005816:	e015      	b.n	8005844 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005818:	f7fd f88e 	bl	8002938 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005826:	d90d      	bls.n	8005844 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	22ff      	movs	r2, #255	; 0xff
 800582e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2203      	movs	r2, #3
 8005834:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e077      	b.n	8005934 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f003 0304 	and.w	r3, r3, #4
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1e2      	bne.n	8005818 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	689a      	ldr	r2, [r3, #8]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005860:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	b2da      	uxtb	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005872:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005874:	f7fd f860 	bl	8002938 <HAL_GetTick>
 8005878:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800587a:	e015      	b.n	80058a8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800587c:	f7fd f85c 	bl	8002938 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800588a:	d90d      	bls.n	80058a8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	22ff      	movs	r2, #255	; 0xff
 8005892:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2203      	movs	r2, #3
 8005898:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e045      	b.n	8005934 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f003 0304 	and.w	r3, r3, #4
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d0e2      	beq.n	800587c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0207 	bic.w	r2, r2, #7
 80058cc:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6899      	ldr	r1, [r3, #8]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	430a      	orrs	r2, r1
 80058dc:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80058de:	4b17      	ldr	r3, [pc, #92]	; (800593c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80058e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058e4:	4a15      	ldr	r2, [pc, #84]	; (800593c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80058e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058ea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80058ee:	4b13      	ldr	r3, [pc, #76]	; (800593c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a12      	ldr	r2, [pc, #72]	; (800593c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80058f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058f8:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005908:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005918:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	22ff      	movs	r2, #255	; 0xff
 8005920:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3718      	adds	r7, #24
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	58000800 	.word	0x58000800

08005940 <LL_RCC_GetUSARTClockSource>:
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800594c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4013      	ands	r3, r2
}
 8005954:	4618      	mov	r0, r3
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <LL_RCC_GetLPUARTClockSource>:
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800596c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4013      	ands	r3, r2
}
 8005974:	4618      	mov	r0, r3
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e042      	b.n	8005a18 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005998:	2b00      	cmp	r3, #0
 800599a:	d106      	bne.n	80059aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f7fc fe11 	bl	80025cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2224      	movs	r2, #36	; 0x24
 80059ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 0201 	bic.w	r2, r2, #1
 80059c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f8c2 	bl	8005b4c <UART_SetConfig>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d101      	bne.n	80059d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e022      	b.n	8005a18 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fade 	bl	8005f9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f042 0201 	orr.w	r2, r2, #1
 8005a0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 fb65 	bl	80060e0 <UART_CheckIdleState>
 8005a16:	4603      	mov	r3, r0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b08a      	sub	sp, #40	; 0x28
 8005a24:	af02      	add	r7, sp, #8
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	603b      	str	r3, [r7, #0]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a36:	2b20      	cmp	r3, #32
 8005a38:	f040 8083 	bne.w	8005b42 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d002      	beq.n	8005a48 <HAL_UART_Transmit+0x28>
 8005a42:	88fb      	ldrh	r3, [r7, #6]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e07b      	b.n	8005b44 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d101      	bne.n	8005a5a <HAL_UART_Transmit+0x3a>
 8005a56:	2302      	movs	r3, #2
 8005a58:	e074      	b.n	8005b44 <HAL_UART_Transmit+0x124>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2221      	movs	r2, #33	; 0x21
 8005a6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a72:	f7fc ff61 	bl	8002938 <HAL_GetTick>
 8005a76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	88fa      	ldrh	r2, [r7, #6]
 8005a7c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	88fa      	ldrh	r2, [r7, #6]
 8005a84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a90:	d108      	bne.n	8005aa4 <HAL_UART_Transmit+0x84>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d104      	bne.n	8005aa4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	61bb      	str	r3, [r7, #24]
 8005aa2:	e003      	b.n	8005aac <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005ab4:	e02c      	b.n	8005b10 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2200      	movs	r2, #0
 8005abe:	2180      	movs	r1, #128	; 0x80
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 fb58 	bl	8006176 <UART_WaitOnFlagUntilTimeout>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e039      	b.n	8005b44 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10b      	bne.n	8005aee <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	461a      	mov	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ae4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	3302      	adds	r3, #2
 8005aea:	61bb      	str	r3, [r7, #24]
 8005aec:	e007      	b.n	8005afe <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	781a      	ldrb	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	3301      	adds	r3, #1
 8005afc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	3b01      	subs	r3, #1
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1cc      	bne.n	8005ab6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	2200      	movs	r2, #0
 8005b24:	2140      	movs	r1, #64	; 0x40
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f000 fb25 	bl	8006176 <UART_WaitOnFlagUntilTimeout>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d001      	beq.n	8005b36 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e006      	b.n	8005b44 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e000      	b.n	8005b44 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005b42:	2302      	movs	r3, #2
  }
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3720      	adds	r7, #32
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b50:	b08c      	sub	sp, #48	; 0x30
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	431a      	orrs	r2, r3
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	69db      	ldr	r3, [r3, #28]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	4baf      	ldr	r3, [pc, #700]	; (8005e38 <UART_SetConfig+0x2ec>)
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	6812      	ldr	r2, [r2, #0]
 8005b82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b84:	430b      	orrs	r3, r1
 8005b86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	68da      	ldr	r2, [r3, #12]
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4aa4      	ldr	r2, [pc, #656]	; (8005e3c <UART_SetConfig+0x2f0>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d004      	beq.n	8005bb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005bc2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	6812      	ldr	r2, [r2, #0]
 8005bca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bcc:	430b      	orrs	r3, r1
 8005bce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd6:	f023 010f 	bic.w	r1, r3, #15
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a95      	ldr	r2, [pc, #596]	; (8005e40 <UART_SetConfig+0x2f4>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d125      	bne.n	8005c3c <UART_SetConfig+0xf0>
 8005bf0:	2003      	movs	r0, #3
 8005bf2:	f7ff fea5 	bl	8005940 <LL_RCC_GetUSARTClockSource>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d81b      	bhi.n	8005c34 <UART_SetConfig+0xe8>
 8005bfc:	a201      	add	r2, pc, #4	; (adr r2, 8005c04 <UART_SetConfig+0xb8>)
 8005bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c02:	bf00      	nop
 8005c04:	08005c15 	.word	0x08005c15
 8005c08:	08005c25 	.word	0x08005c25
 8005c0c:	08005c1d 	.word	0x08005c1d
 8005c10:	08005c2d 	.word	0x08005c2d
 8005c14:	2301      	movs	r3, #1
 8005c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c1a:	e042      	b.n	8005ca2 <UART_SetConfig+0x156>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c22:	e03e      	b.n	8005ca2 <UART_SetConfig+0x156>
 8005c24:	2304      	movs	r3, #4
 8005c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c2a:	e03a      	b.n	8005ca2 <UART_SetConfig+0x156>
 8005c2c:	2308      	movs	r3, #8
 8005c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c32:	e036      	b.n	8005ca2 <UART_SetConfig+0x156>
 8005c34:	2310      	movs	r3, #16
 8005c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c3a:	e032      	b.n	8005ca2 <UART_SetConfig+0x156>
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a7e      	ldr	r2, [pc, #504]	; (8005e3c <UART_SetConfig+0x2f0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d12a      	bne.n	8005c9c <UART_SetConfig+0x150>
 8005c46:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005c4a:	f7ff fe89 	bl	8005960 <LL_RCC_GetLPUARTClockSource>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c54:	d01a      	beq.n	8005c8c <UART_SetConfig+0x140>
 8005c56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c5a:	d81b      	bhi.n	8005c94 <UART_SetConfig+0x148>
 8005c5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c60:	d00c      	beq.n	8005c7c <UART_SetConfig+0x130>
 8005c62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c66:	d815      	bhi.n	8005c94 <UART_SetConfig+0x148>
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <UART_SetConfig+0x128>
 8005c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c70:	d008      	beq.n	8005c84 <UART_SetConfig+0x138>
 8005c72:	e00f      	b.n	8005c94 <UART_SetConfig+0x148>
 8005c74:	2300      	movs	r3, #0
 8005c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c7a:	e012      	b.n	8005ca2 <UART_SetConfig+0x156>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c82:	e00e      	b.n	8005ca2 <UART_SetConfig+0x156>
 8005c84:	2304      	movs	r3, #4
 8005c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c8a:	e00a      	b.n	8005ca2 <UART_SetConfig+0x156>
 8005c8c:	2308      	movs	r3, #8
 8005c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c92:	e006      	b.n	8005ca2 <UART_SetConfig+0x156>
 8005c94:	2310      	movs	r3, #16
 8005c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c9a:	e002      	b.n	8005ca2 <UART_SetConfig+0x156>
 8005c9c:	2310      	movs	r3, #16
 8005c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a65      	ldr	r2, [pc, #404]	; (8005e3c <UART_SetConfig+0x2f0>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	f040 8097 	bne.w	8005ddc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005cae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005cb2:	2b08      	cmp	r3, #8
 8005cb4:	d823      	bhi.n	8005cfe <UART_SetConfig+0x1b2>
 8005cb6:	a201      	add	r2, pc, #4	; (adr r2, 8005cbc <UART_SetConfig+0x170>)
 8005cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbc:	08005ce1 	.word	0x08005ce1
 8005cc0:	08005cff 	.word	0x08005cff
 8005cc4:	08005ce9 	.word	0x08005ce9
 8005cc8:	08005cff 	.word	0x08005cff
 8005ccc:	08005cef 	.word	0x08005cef
 8005cd0:	08005cff 	.word	0x08005cff
 8005cd4:	08005cff 	.word	0x08005cff
 8005cd8:	08005cff 	.word	0x08005cff
 8005cdc:	08005cf7 	.word	0x08005cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ce0:	f7fe ff80 	bl	8004be4 <HAL_RCC_GetPCLK1Freq>
 8005ce4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ce6:	e010      	b.n	8005d0a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ce8:	4b56      	ldr	r3, [pc, #344]	; (8005e44 <UART_SetConfig+0x2f8>)
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005cec:	e00d      	b.n	8005d0a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cee:	f7fe fef9 	bl	8004ae4 <HAL_RCC_GetSysClockFreq>
 8005cf2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cf4:	e009      	b.n	8005d0a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005cfc:	e005      	b.n	8005d0a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f000 812b 	beq.w	8005f68 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	4a4c      	ldr	r2, [pc, #304]	; (8005e48 <UART_SetConfig+0x2fc>)
 8005d18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d24:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	4413      	add	r3, r2
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d305      	bcc.n	8005d42 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d903      	bls.n	8005d4a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005d48:	e10e      	b.n	8005f68 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	60bb      	str	r3, [r7, #8]
 8005d50:	60fa      	str	r2, [r7, #12]
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	4a3c      	ldr	r2, [pc, #240]	; (8005e48 <UART_SetConfig+0x2fc>)
 8005d58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	2200      	movs	r2, #0
 8005d60:	603b      	str	r3, [r7, #0]
 8005d62:	607a      	str	r2, [r7, #4]
 8005d64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d6c:	f7fa fa60 	bl	8000230 <__aeabi_uldivmod>
 8005d70:	4602      	mov	r2, r0
 8005d72:	460b      	mov	r3, r1
 8005d74:	4610      	mov	r0, r2
 8005d76:	4619      	mov	r1, r3
 8005d78:	f04f 0200 	mov.w	r2, #0
 8005d7c:	f04f 0300 	mov.w	r3, #0
 8005d80:	020b      	lsls	r3, r1, #8
 8005d82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d86:	0202      	lsls	r2, r0, #8
 8005d88:	6979      	ldr	r1, [r7, #20]
 8005d8a:	6849      	ldr	r1, [r1, #4]
 8005d8c:	0849      	lsrs	r1, r1, #1
 8005d8e:	2000      	movs	r0, #0
 8005d90:	460c      	mov	r4, r1
 8005d92:	4605      	mov	r5, r0
 8005d94:	eb12 0804 	adds.w	r8, r2, r4
 8005d98:	eb43 0905 	adc.w	r9, r3, r5
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	469a      	mov	sl, r3
 8005da4:	4693      	mov	fp, r2
 8005da6:	4652      	mov	r2, sl
 8005da8:	465b      	mov	r3, fp
 8005daa:	4640      	mov	r0, r8
 8005dac:	4649      	mov	r1, r9
 8005dae:	f7fa fa3f 	bl	8000230 <__aeabi_uldivmod>
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	4613      	mov	r3, r2
 8005db8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dc0:	d308      	bcc.n	8005dd4 <UART_SetConfig+0x288>
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dc8:	d204      	bcs.n	8005dd4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6a3a      	ldr	r2, [r7, #32]
 8005dd0:	60da      	str	r2, [r3, #12]
 8005dd2:	e0c9      	b.n	8005f68 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005dda:	e0c5      	b.n	8005f68 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005de4:	d16e      	bne.n	8005ec4 <UART_SetConfig+0x378>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005de6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005dea:	3b01      	subs	r3, #1
 8005dec:	2b07      	cmp	r3, #7
 8005dee:	d82d      	bhi.n	8005e4c <UART_SetConfig+0x300>
 8005df0:	a201      	add	r2, pc, #4	; (adr r2, 8005df8 <UART_SetConfig+0x2ac>)
 8005df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df6:	bf00      	nop
 8005df8:	08005e19 	.word	0x08005e19
 8005dfc:	08005e21 	.word	0x08005e21
 8005e00:	08005e4d 	.word	0x08005e4d
 8005e04:	08005e27 	.word	0x08005e27
 8005e08:	08005e4d 	.word	0x08005e4d
 8005e0c:	08005e4d 	.word	0x08005e4d
 8005e10:	08005e4d 	.word	0x08005e4d
 8005e14:	08005e2f 	.word	0x08005e2f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e18:	f7fe fefa 	bl	8004c10 <HAL_RCC_GetPCLK2Freq>
 8005e1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e1e:	e01b      	b.n	8005e58 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e20:	4b08      	ldr	r3, [pc, #32]	; (8005e44 <UART_SetConfig+0x2f8>)
 8005e22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e24:	e018      	b.n	8005e58 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e26:	f7fe fe5d 	bl	8004ae4 <HAL_RCC_GetSysClockFreq>
 8005e2a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e2c:	e014      	b.n	8005e58 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e34:	e010      	b.n	8005e58 <UART_SetConfig+0x30c>
 8005e36:	bf00      	nop
 8005e38:	cfff69f3 	.word	0xcfff69f3
 8005e3c:	40008000 	.word	0x40008000
 8005e40:	40013800 	.word	0x40013800
 8005e44:	00f42400 	.word	0x00f42400
 8005e48:	0800ae5c 	.word	0x0800ae5c
      default:
        pclk = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005e56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 8084 	beq.w	8005f68 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	4a4b      	ldr	r2, [pc, #300]	; (8005f94 <UART_SetConfig+0x448>)
 8005e66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e72:	005a      	lsls	r2, r3, #1
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	085b      	lsrs	r3, r3, #1
 8005e7a:	441a      	add	r2, r3
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	2b0f      	cmp	r3, #15
 8005e8c:	d916      	bls.n	8005ebc <UART_SetConfig+0x370>
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e94:	d212      	bcs.n	8005ebc <UART_SetConfig+0x370>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	f023 030f 	bic.w	r3, r3, #15
 8005e9e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	085b      	lsrs	r3, r3, #1
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	8bfb      	ldrh	r3, [r7, #30]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	8bfa      	ldrh	r2, [r7, #30]
 8005eb8:	60da      	str	r2, [r3, #12]
 8005eba:	e055      	b.n	8005f68 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005ec2:	e051      	b.n	8005f68 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ec4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	2b07      	cmp	r3, #7
 8005ecc:	d821      	bhi.n	8005f12 <UART_SetConfig+0x3c6>
 8005ece:	a201      	add	r2, pc, #4	; (adr r2, 8005ed4 <UART_SetConfig+0x388>)
 8005ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed4:	08005ef5 	.word	0x08005ef5
 8005ed8:	08005efd 	.word	0x08005efd
 8005edc:	08005f13 	.word	0x08005f13
 8005ee0:	08005f03 	.word	0x08005f03
 8005ee4:	08005f13 	.word	0x08005f13
 8005ee8:	08005f13 	.word	0x08005f13
 8005eec:	08005f13 	.word	0x08005f13
 8005ef0:	08005f0b 	.word	0x08005f0b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ef4:	f7fe fe8c 	bl	8004c10 <HAL_RCC_GetPCLK2Freq>
 8005ef8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005efa:	e010      	b.n	8005f1e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005efc:	4b26      	ldr	r3, [pc, #152]	; (8005f98 <UART_SetConfig+0x44c>)
 8005efe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f00:	e00d      	b.n	8005f1e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f02:	f7fe fdef 	bl	8004ae4 <HAL_RCC_GetSysClockFreq>
 8005f06:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f08:	e009      	b.n	8005f1e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f10:	e005      	b.n	8005f1e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005f1c:	bf00      	nop
    }

    if (pclk != 0U)
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d021      	beq.n	8005f68 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	4a1a      	ldr	r2, [pc, #104]	; (8005f94 <UART_SetConfig+0x448>)
 8005f2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	085b      	lsrs	r3, r3, #1
 8005f3c:	441a      	add	r2, r3
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	2b0f      	cmp	r3, #15
 8005f4e:	d908      	bls.n	8005f62 <UART_SetConfig+0x416>
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f56:	d204      	bcs.n	8005f62 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = usartdiv;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6a3a      	ldr	r2, [r7, #32]
 8005f5e:	60da      	str	r2, [r3, #12]
 8005f60:	e002      	b.n	8005f68 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	2200      	movs	r2, #0
 8005f82:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005f84:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3730      	adds	r7, #48	; 0x30
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f92:	bf00      	nop
 8005f94:	0800ae5c 	.word	0x0800ae5c
 8005f98:	00f42400 	.word	0x00f42400

08005f9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00a      	beq.n	8005fc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00a      	beq.n	800600a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600e:	f003 0308 	and.w	r3, r3, #8
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006030:	f003 0310 	and.w	r3, r3, #16
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00a      	beq.n	800604e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006052:	f003 0320 	and.w	r3, r3, #32
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	430a      	orrs	r2, r1
 800606e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006078:	2b00      	cmp	r3, #0
 800607a:	d01a      	beq.n	80060b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006096:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800609a:	d10a      	bne.n	80060b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	430a      	orrs	r2, r1
 80060b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00a      	beq.n	80060d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	430a      	orrs	r2, r1
 80060d2:	605a      	str	r2, [r3, #4]
  }
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af02      	add	r7, sp, #8
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060f0:	f7fc fc22 	bl	8002938 <HAL_GetTick>
 80060f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0308 	and.w	r3, r3, #8
 8006100:	2b08      	cmp	r3, #8
 8006102:	d10e      	bne.n	8006122 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006104:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f82f 	bl	8006176 <UART_WaitOnFlagUntilTimeout>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e025      	b.n	800616e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	2b04      	cmp	r3, #4
 800612e:	d10e      	bne.n	800614e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006130:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f819 	bl	8006176 <UART_WaitOnFlagUntilTimeout>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e00f      	b.n	800616e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2220      	movs	r2, #32
 8006152:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2220      	movs	r2, #32
 800615a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b09c      	sub	sp, #112	; 0x70
 800617a:	af00      	add	r7, sp, #0
 800617c:	60f8      	str	r0, [r7, #12]
 800617e:	60b9      	str	r1, [r7, #8]
 8006180:	603b      	str	r3, [r7, #0]
 8006182:	4613      	mov	r3, r2
 8006184:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006186:	e0a9      	b.n	80062dc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006188:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800618a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800618e:	f000 80a5 	beq.w	80062dc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006192:	f7fc fbd1 	bl	8002938 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800619e:	429a      	cmp	r2, r3
 80061a0:	d302      	bcc.n	80061a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80061a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d140      	bne.n	800622a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061b0:	e853 3f00 	ldrex	r3, [r3]
 80061b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80061b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061bc:	667b      	str	r3, [r7, #100]	; 0x64
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061c8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80061cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061ce:	e841 2300 	strex	r3, r2, [r1]
 80061d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80061d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1e6      	bne.n	80061a8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3308      	adds	r3, #8
 80061e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e4:	e853 3f00 	ldrex	r3, [r3]
 80061e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ec:	f023 0301 	bic.w	r3, r3, #1
 80061f0:	663b      	str	r3, [r7, #96]	; 0x60
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	3308      	adds	r3, #8
 80061f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80061fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80061fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006200:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006202:	e841 2300 	strex	r3, r2, [r1]
 8006206:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1e5      	bne.n	80061da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2220      	movs	r2, #32
 8006212:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2220      	movs	r2, #32
 800621a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e069      	b.n	80062fe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	2b00      	cmp	r3, #0
 8006236:	d051      	beq.n	80062dc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006246:	d149      	bne.n	80062dc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006250:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625a:	e853 3f00 	ldrex	r3, [r3]
 800625e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006266:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	461a      	mov	r2, r3
 800626e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006270:	637b      	str	r3, [r7, #52]	; 0x34
 8006272:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006278:	e841 2300 	strex	r3, r2, [r1]
 800627c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800627e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1e6      	bne.n	8006252 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3308      	adds	r3, #8
 800628a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	e853 3f00 	ldrex	r3, [r3]
 8006292:	613b      	str	r3, [r7, #16]
   return(result);
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	f023 0301 	bic.w	r3, r3, #1
 800629a:	66bb      	str	r3, [r7, #104]	; 0x68
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3308      	adds	r3, #8
 80062a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80062a4:	623a      	str	r2, [r7, #32]
 80062a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a8:	69f9      	ldr	r1, [r7, #28]
 80062aa:	6a3a      	ldr	r2, [r7, #32]
 80062ac:	e841 2300 	strex	r3, r2, [r1]
 80062b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1e5      	bne.n	8006284 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2220      	movs	r2, #32
 80062bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2220      	movs	r2, #32
 80062cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e010      	b.n	80062fe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	69da      	ldr	r2, [r3, #28]
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	4013      	ands	r3, r2
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	bf0c      	ite	eq
 80062ec:	2301      	moveq	r3, #1
 80062ee:	2300      	movne	r3, #0
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	461a      	mov	r2, r3
 80062f4:	79fb      	ldrb	r3, [r7, #7]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	f43f af46 	beq.w	8006188 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3770      	adds	r7, #112	; 0x70
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006306:	b480      	push	{r7}
 8006308:	b085      	sub	sp, #20
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <HAL_UARTEx_DisableFifoMode+0x16>
 8006318:	2302      	movs	r3, #2
 800631a:	e027      	b.n	800636c <HAL_UARTEx_DisableFifoMode+0x66>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2224      	movs	r2, #36	; 0x24
 8006328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 0201 	bic.w	r2, r2, #1
 8006342:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800634a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2220      	movs	r2, #32
 800635e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006388:	2b01      	cmp	r3, #1
 800638a:	d101      	bne.n	8006390 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800638c:	2302      	movs	r3, #2
 800638e:	e02d      	b.n	80063ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2224      	movs	r2, #36	; 0x24
 800639c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 0201 	bic.w	r2, r2, #1
 80063b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f84f 	bl	8006470 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2220      	movs	r2, #32
 80063de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006404:	2b01      	cmp	r3, #1
 8006406:	d101      	bne.n	800640c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006408:	2302      	movs	r3, #2
 800640a:	e02d      	b.n	8006468 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2224      	movs	r2, #36	; 0x24
 8006418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f022 0201 	bic.w	r2, r2, #1
 8006432:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f811 	bl	8006470 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2220      	movs	r2, #32
 800645a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800647c:	2b00      	cmp	r3, #0
 800647e:	d108      	bne.n	8006492 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006490:	e031      	b.n	80064f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006492:	2308      	movs	r3, #8
 8006494:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006496:	2308      	movs	r3, #8
 8006498:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	0e5b      	lsrs	r3, r3, #25
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	f003 0307 	and.w	r3, r3, #7
 80064a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	0f5b      	lsrs	r3, r3, #29
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	f003 0307 	and.w	r3, r3, #7
 80064b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064ba:	7bbb      	ldrb	r3, [r7, #14]
 80064bc:	7b3a      	ldrb	r2, [r7, #12]
 80064be:	4911      	ldr	r1, [pc, #68]	; (8006504 <UARTEx_SetNbDataToProcess+0x94>)
 80064c0:	5c8a      	ldrb	r2, [r1, r2]
 80064c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80064c6:	7b3a      	ldrb	r2, [r7, #12]
 80064c8:	490f      	ldr	r1, [pc, #60]	; (8006508 <UARTEx_SetNbDataToProcess+0x98>)
 80064ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064d8:	7bfb      	ldrb	r3, [r7, #15]
 80064da:	7b7a      	ldrb	r2, [r7, #13]
 80064dc:	4909      	ldr	r1, [pc, #36]	; (8006504 <UARTEx_SetNbDataToProcess+0x94>)
 80064de:	5c8a      	ldrb	r2, [r1, r2]
 80064e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80064e4:	7b7a      	ldrb	r2, [r7, #13]
 80064e6:	4908      	ldr	r1, [pc, #32]	; (8006508 <UARTEx_SetNbDataToProcess+0x98>)
 80064e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80064f6:	bf00      	nop
 80064f8:	3714      	adds	r7, #20
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	0800ae74 	.word	0x0800ae74
 8006508:	0800ae7c 	.word	0x0800ae7c

0800650c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b088      	sub	sp, #32
 8006510:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006512:	2300      	movs	r3, #0
 8006514:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006516:	f107 0308 	add.w	r3, r7, #8
 800651a:	2218      	movs	r2, #24
 800651c:	2100      	movs	r1, #0
 800651e:	4618      	mov	r0, r3
 8006520:	f001 f8d8 	bl	80076d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006524:	233f      	movs	r3, #63	; 0x3f
 8006526:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8006528:	2381      	movs	r3, #129	; 0x81
 800652a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800652c:	1dfb      	adds	r3, r7, #7
 800652e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006530:	2301      	movs	r3, #1
 8006532:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006534:	f107 0308 	add.w	r3, r7, #8
 8006538:	2100      	movs	r1, #0
 800653a:	4618      	mov	r0, r3
 800653c:	f001 fb54 	bl	8007be8 <hci_send_req>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	da01      	bge.n	800654a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006546:	23ff      	movs	r3, #255	; 0xff
 8006548:	e000      	b.n	800654c <aci_gap_set_non_discoverable+0x40>
  return status;
 800654a:	79fb      	ldrb	r3, [r7, #7]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3720      	adds	r7, #32
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8006554:	b5b0      	push	{r4, r5, r7, lr}
 8006556:	b0ce      	sub	sp, #312	; 0x138
 8006558:	af00      	add	r7, sp, #0
 800655a:	4605      	mov	r5, r0
 800655c:	460c      	mov	r4, r1
 800655e:	4610      	mov	r0, r2
 8006560:	4619      	mov	r1, r3
 8006562:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006566:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800656a:	462a      	mov	r2, r5
 800656c:	701a      	strb	r2, [r3, #0]
 800656e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006572:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006576:	4622      	mov	r2, r4
 8006578:	801a      	strh	r2, [r3, #0]
 800657a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800657e:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8006582:	4602      	mov	r2, r0
 8006584:	801a      	strh	r2, [r3, #0]
 8006586:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800658a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800658e:	460a      	mov	r2, r1
 8006590:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8006592:	f107 0310 	add.w	r3, r7, #16
 8006596:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800659a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800659e:	3308      	adds	r3, #8
 80065a0:	f107 0210 	add.w	r2, r7, #16
 80065a4:	4413      	add	r3, r2
 80065a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80065aa:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80065ae:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80065b2:	4413      	add	r3, r2
 80065b4:	3309      	adds	r3, #9
 80065b6:	f107 0210 	add.w	r2, r7, #16
 80065ba:	4413      	add	r3, r2
 80065bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80065c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065c4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80065c8:	2200      	movs	r2, #0
 80065ca:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80065cc:	2300      	movs	r3, #0
 80065ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 80065d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80065d6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80065da:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80065de:	7812      	ldrb	r2, [r2, #0]
 80065e0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80065e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80065e6:	3301      	adds	r3, #1
 80065e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80065ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80065f0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80065f4:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80065f8:	8812      	ldrh	r2, [r2, #0]
 80065fa:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80065fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006602:	3302      	adds	r3, #2
 8006604:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8006608:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800660c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006610:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8006614:	8812      	ldrh	r2, [r2, #0]
 8006616:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800661a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800661e:	3302      	adds	r3, #2
 8006620:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8006624:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006628:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800662c:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006630:	7812      	ldrb	r2, [r2, #0]
 8006632:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006634:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006638:	3301      	adds	r3, #1
 800663a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800663e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006642:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006646:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006648:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800664c:	3301      	adds	r3, #1
 800664e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8006652:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006656:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800665a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800665c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006660:	3301      	adds	r3, #1
 8006662:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8006666:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800666a:	3308      	adds	r3, #8
 800666c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006670:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8006674:	4618      	mov	r0, r3
 8006676:	f001 f81d 	bl	80076b4 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800667a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800667e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006682:	4413      	add	r3, r2
 8006684:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8006688:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800668c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006690:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006692:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006696:	3301      	adds	r3, #1
 8006698:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800669c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80066a0:	3301      	adds	r3, #1
 80066a2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80066a6:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80066aa:	4618      	mov	r0, r3
 80066ac:	f001 f802 	bl	80076b4 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80066b0:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80066b4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80066b8:	4413      	add	r3, r2
 80066ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 80066be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066c2:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80066c6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80066c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80066cc:	3302      	adds	r3, #2
 80066ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 80066d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066d6:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80066da:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80066dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80066e0:	3302      	adds	r3, #2
 80066e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80066e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80066ea:	2218      	movs	r2, #24
 80066ec:	2100      	movs	r1, #0
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 fff0 	bl	80076d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80066f4:	233f      	movs	r3, #63	; 0x3f
 80066f6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 80066fa:	2383      	movs	r3, #131	; 0x83
 80066fc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006700:	f107 0310 	add.w	r3, r7, #16
 8006704:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006708:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800670c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006710:	f107 030f 	add.w	r3, r7, #15
 8006714:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006718:	2301      	movs	r3, #1
 800671a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800671e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006722:	2100      	movs	r1, #0
 8006724:	4618      	mov	r0, r3
 8006726:	f001 fa5f 	bl	8007be8 <hci_send_req>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	da01      	bge.n	8006734 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8006730:	23ff      	movs	r3, #255	; 0xff
 8006732:	e004      	b.n	800673e <aci_gap_set_discoverable+0x1ea>
  return status;
 8006734:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006738:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800673c:	781b      	ldrb	r3, [r3, #0]
}
 800673e:	4618      	mov	r0, r3
 8006740:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006744:	46bd      	mov	sp, r7
 8006746:	bdb0      	pop	{r4, r5, r7, pc}

08006748 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b0cc      	sub	sp, #304	; 0x130
 800674c:	af00      	add	r7, sp, #0
 800674e:	4602      	mov	r2, r0
 8006750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006754:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006758:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800675a:	f107 0310 	add.w	r3, r7, #16
 800675e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006766:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800676a:	2200      	movs	r2, #0
 800676c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800676e:	2300      	movs	r3, #0
 8006770:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8006774:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006778:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800677c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006780:	7812      	ldrb	r2, [r2, #0]
 8006782:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006784:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006788:	3301      	adds	r3, #1
 800678a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800678e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006792:	2218      	movs	r2, #24
 8006794:	2100      	movs	r1, #0
 8006796:	4618      	mov	r0, r3
 8006798:	f000 ff9c 	bl	80076d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800679c:	233f      	movs	r3, #63	; 0x3f
 800679e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80067a2:	2385      	movs	r3, #133	; 0x85
 80067a4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80067a8:	f107 0310 	add.w	r3, r7, #16
 80067ac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80067b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80067b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80067b8:	f107 030f 	add.w	r3, r7, #15
 80067bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80067c0:	2301      	movs	r3, #1
 80067c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80067c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067ca:	2100      	movs	r1, #0
 80067cc:	4618      	mov	r0, r3
 80067ce:	f001 fa0b 	bl	8007be8 <hci_send_req>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	da01      	bge.n	80067dc <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80067d8:	23ff      	movs	r3, #255	; 0xff
 80067da:	e004      	b.n	80067e6 <aci_gap_set_io_capability+0x9e>
  return status;
 80067dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80067e4:	781b      	ldrb	r3, [r3, #0]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80067f0:	b5b0      	push	{r4, r5, r7, lr}
 80067f2:	b0cc      	sub	sp, #304	; 0x130
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	4605      	mov	r5, r0
 80067f8:	460c      	mov	r4, r1
 80067fa:	4610      	mov	r0, r2
 80067fc:	4619      	mov	r1, r3
 80067fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006802:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006806:	462a      	mov	r2, r5
 8006808:	701a      	strb	r2, [r3, #0]
 800680a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800680e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006812:	4622      	mov	r2, r4
 8006814:	701a      	strb	r2, [r3, #0]
 8006816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800681a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800681e:	4602      	mov	r2, r0
 8006820:	701a      	strb	r2, [r3, #0]
 8006822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006826:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800682a:	460a      	mov	r2, r1
 800682c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800682e:	f107 0310 	add.w	r3, r7, #16
 8006832:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800683a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800683e:	2200      	movs	r2, #0
 8006840:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006842:	2300      	movs	r3, #0
 8006844:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8006848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800684c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006850:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006854:	7812      	ldrb	r2, [r2, #0]
 8006856:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006858:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800685c:	3301      	adds	r3, #1
 800685e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8006862:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006866:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800686a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800686e:	7812      	ldrb	r2, [r2, #0]
 8006870:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006872:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006876:	3301      	adds	r3, #1
 8006878:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800687c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006880:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006884:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006888:	7812      	ldrb	r2, [r2, #0]
 800688a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800688c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006890:	3301      	adds	r3, #1
 8006892:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8006896:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800689a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800689e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80068a2:	7812      	ldrb	r2, [r2, #0]
 80068a4:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80068a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068aa:	3301      	adds	r3, #1
 80068ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80068b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068b4:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80068b8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80068ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068be:	3301      	adds	r3, #1
 80068c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80068c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068c8:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80068cc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80068ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068d2:	3301      	adds	r3, #1
 80068d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80068d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068dc:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80068e0:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80068e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068e6:	3301      	adds	r3, #1
 80068e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80068ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068f0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80068f4:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80068f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068fc:	3304      	adds	r3, #4
 80068fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8006902:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006906:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800690a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800690c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006910:	3301      	adds	r3, #1
 8006912:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006916:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800691a:	2218      	movs	r2, #24
 800691c:	2100      	movs	r1, #0
 800691e:	4618      	mov	r0, r3
 8006920:	f000 fed8 	bl	80076d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006924:	233f      	movs	r3, #63	; 0x3f
 8006926:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800692a:	2386      	movs	r3, #134	; 0x86
 800692c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006930:	f107 0310 	add.w	r3, r7, #16
 8006934:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006938:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800693c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006940:	f107 030f 	add.w	r3, r7, #15
 8006944:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006948:	2301      	movs	r3, #1
 800694a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800694e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006952:	2100      	movs	r1, #0
 8006954:	4618      	mov	r0, r3
 8006956:	f001 f947 	bl	8007be8 <hci_send_req>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	da01      	bge.n	8006964 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8006960:	23ff      	movs	r3, #255	; 0xff
 8006962:	e004      	b.n	800696e <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8006964:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006968:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800696c:	781b      	ldrb	r3, [r3, #0]
}
 800696e:	4618      	mov	r0, r3
 8006970:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006974:	46bd      	mov	sp, r7
 8006976:	bdb0      	pop	{r4, r5, r7, pc}

08006978 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b0cc      	sub	sp, #304	; 0x130
 800697c:	af00      	add	r7, sp, #0
 800697e:	4602      	mov	r2, r0
 8006980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006984:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006988:	6019      	str	r1, [r3, #0]
 800698a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800698e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006992:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8006994:	f107 0310 	add.w	r3, r7, #16
 8006998:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800699c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069a0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80069a4:	2200      	movs	r2, #0
 80069a6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80069a8:	2300      	movs	r3, #0
 80069aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80069ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80069b6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80069ba:	8812      	ldrh	r2, [r2, #0]
 80069bc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80069be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069c2:	3302      	adds	r3, #2
 80069c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 80069c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80069d0:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80069d4:	6812      	ldr	r2, [r2, #0]
 80069d6:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80069da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069de:	3304      	adds	r3, #4
 80069e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80069e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80069e8:	2218      	movs	r2, #24
 80069ea:	2100      	movs	r1, #0
 80069ec:	4618      	mov	r0, r3
 80069ee:	f000 fe71 	bl	80076d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80069f2:	233f      	movs	r3, #63	; 0x3f
 80069f4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 80069f8:	2388      	movs	r3, #136	; 0x88
 80069fa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80069fe:	f107 0310 	add.w	r3, r7, #16
 8006a02:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006a06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a0a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006a0e:	f107 030f 	add.w	r3, r7, #15
 8006a12:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006a16:	2301      	movs	r3, #1
 8006a18:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006a1c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a20:	2100      	movs	r1, #0
 8006a22:	4618      	mov	r0, r3
 8006a24:	f001 f8e0 	bl	8007be8 <hci_send_req>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	da01      	bge.n	8006a32 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8006a2e:	23ff      	movs	r3, #255	; 0xff
 8006a30:	e004      	b.n	8006a3c <aci_gap_pass_key_resp+0xc4>
  return status;
 8006a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a36:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006a3a:	781b      	ldrb	r3, [r3, #0]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8006a46:	b590      	push	{r4, r7, lr}
 8006a48:	b0cd      	sub	sp, #308	; 0x134
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	4604      	mov	r4, r0
 8006a4e:	4608      	mov	r0, r1
 8006a50:	4611      	mov	r1, r2
 8006a52:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a56:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8006a5a:	6013      	str	r3, [r2, #0]
 8006a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a60:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006a64:	4622      	mov	r2, r4
 8006a66:	701a      	strb	r2, [r3, #0]
 8006a68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a6c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006a70:	4602      	mov	r2, r0
 8006a72:	701a      	strb	r2, [r3, #0]
 8006a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a78:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8006a7c:	460a      	mov	r2, r1
 8006a7e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8006a80:	f107 0310 	add.w	r3, r7, #16
 8006a84:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006a88:	f107 0308 	add.w	r3, r7, #8
 8006a8c:	2207      	movs	r2, #7
 8006a8e:	2100      	movs	r1, #0
 8006a90:	4618      	mov	r0, r3
 8006a92:	f000 fe1f 	bl	80076d4 <Osal_MemSet>
  int index_input = 0;
 8006a96:	2300      	movs	r3, #0
 8006a98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8006a9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aa0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006aa4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006aa8:	7812      	ldrb	r2, [r2, #0]
 8006aaa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006aac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8006ab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006abe:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006ac2:	7812      	ldrb	r2, [r2, #0]
 8006ac4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006ac6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006aca:	3301      	adds	r3, #1
 8006acc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8006ad0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ad4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ad8:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006adc:	7812      	ldrb	r2, [r2, #0]
 8006ade:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006ae0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006aea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006aee:	2218      	movs	r2, #24
 8006af0:	2100      	movs	r1, #0
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 fdee 	bl	80076d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006af8:	233f      	movs	r3, #63	; 0x3f
 8006afa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8006afe:	238a      	movs	r3, #138	; 0x8a
 8006b00:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006b04:	f107 0310 	add.w	r3, r7, #16
 8006b08:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006b0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b10:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8006b14:	f107 0308 	add.w	r3, r7, #8
 8006b18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8006b1c:	2307      	movs	r3, #7
 8006b1e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006b22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b26:	2100      	movs	r1, #0
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f001 f85d 	bl	8007be8 <hci_send_req>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	da01      	bge.n	8006b38 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8006b34:	23ff      	movs	r3, #255	; 0xff
 8006b36:	e02e      	b.n	8006b96 <aci_gap_init+0x150>
  if ( resp.Status )
 8006b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b3c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d005      	beq.n	8006b52 <aci_gap_init+0x10c>
    return resp.Status;
 8006b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b4a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	e021      	b.n	8006b96 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8006b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b56:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006b5a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8006b6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b70:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006b74:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006b7e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8006b80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b84:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006b88:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006b92:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd90      	pop	{r4, r7, pc}

08006ba0 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b0cc      	sub	sp, #304	; 0x130
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bb0:	6019      	str	r1, [r3, #0]
 8006bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006bba:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8006bbc:	f107 0310 	add.w	r3, r7, #16
 8006bc0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006bcc:	2200      	movs	r2, #0
 8006bce:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8006bd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bda:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006bde:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006be2:	7812      	ldrb	r2, [r2, #0]
 8006be4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006be6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bea:	3301      	adds	r3, #1
 8006bec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8006bf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bf4:	1c58      	adds	r0, r3, #1
 8006bf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bfa:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006bfe:	781a      	ldrb	r2, [r3, #0]
 8006c00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c08:	6819      	ldr	r1, [r3, #0]
 8006c0a:	f000 fd53 	bl	80076b4 <Osal_MemCpy>
  index_input += AdvDataLen;
 8006c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c12:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006c22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c26:	2218      	movs	r2, #24
 8006c28:	2100      	movs	r1, #0
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f000 fd52 	bl	80076d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006c30:	233f      	movs	r3, #63	; 0x3f
 8006c32:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8006c36:	238e      	movs	r3, #142	; 0x8e
 8006c38:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006c3c:	f107 0310 	add.w	r3, r7, #16
 8006c40:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006c44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006c4c:	f107 030f 	add.w	r3, r7, #15
 8006c50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006c54:	2301      	movs	r3, #1
 8006c56:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006c5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c5e:	2100      	movs	r1, #0
 8006c60:	4618      	mov	r0, r3
 8006c62:	f000 ffc1 	bl	8007be8 <hci_send_req>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	da01      	bge.n	8006c70 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8006c6c:	23ff      	movs	r3, #255	; 0xff
 8006c6e:	e004      	b.n	8006c7a <aci_gap_update_adv_data+0xda>
  return status;
 8006c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c74:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006c78:	781b      	ldrb	r3, [r3, #0]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b088      	sub	sp, #32
 8006c88:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006c8e:	f107 0308 	add.w	r3, r7, #8
 8006c92:	2218      	movs	r2, #24
 8006c94:	2100      	movs	r1, #0
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 fd1c 	bl	80076d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006c9c:	233f      	movs	r3, #63	; 0x3f
 8006c9e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8006ca0:	2392      	movs	r3, #146	; 0x92
 8006ca2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006ca4:	1dfb      	adds	r3, r7, #7
 8006ca6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006cac:	f107 0308 	add.w	r3, r7, #8
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 ff98 	bl	8007be8 <hci_send_req>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	da01      	bge.n	8006cc2 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006cbe:	23ff      	movs	r3, #255	; 0xff
 8006cc0:	e000      	b.n	8006cc4 <aci_gap_configure_whitelist+0x40>
  return status;
 8006cc2:	79fb      	ldrb	r3, [r7, #7]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3720      	adds	r7, #32
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b0cc      	sub	sp, #304	; 0x130
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006cdc:	801a      	strh	r2, [r3, #0]
 8006cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ce2:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8006ce6:	460a      	mov	r2, r1
 8006ce8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8006cea:	f107 0310 	add.w	r3, r7, #16
 8006cee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006cf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006d04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d08:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d0c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006d10:	8812      	ldrh	r2, [r2, #0]
 8006d12:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006d14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d18:	3302      	adds	r3, #2
 8006d1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8006d1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d22:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d26:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006d2a:	7812      	ldrb	r2, [r2, #0]
 8006d2c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006d2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d32:	3301      	adds	r3, #1
 8006d34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006d38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d3c:	2218      	movs	r2, #24
 8006d3e:	2100      	movs	r1, #0
 8006d40:	4618      	mov	r0, r3
 8006d42:	f000 fcc7 	bl	80076d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006d46:	233f      	movs	r3, #63	; 0x3f
 8006d48:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8006d4c:	23a5      	movs	r3, #165	; 0xa5
 8006d4e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006d52:	f107 0310 	add.w	r3, r7, #16
 8006d56:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006d5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006d62:	f107 030f 	add.w	r3, r7, #15
 8006d66:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006d70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d74:	2100      	movs	r1, #0
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 ff36 	bl	8007be8 <hci_send_req>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	da01      	bge.n	8006d86 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8006d82:	23ff      	movs	r3, #255	; 0xff
 8006d84:	e004      	b.n	8006d90 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8006d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d8a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006d8e:	781b      	ldrb	r3, [r3, #0]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b088      	sub	sp, #32
 8006d9e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006da0:	2300      	movs	r3, #0
 8006da2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006da4:	f107 0308 	add.w	r3, r7, #8
 8006da8:	2218      	movs	r2, #24
 8006daa:	2100      	movs	r1, #0
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 fc91 	bl	80076d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006db2:	233f      	movs	r3, #63	; 0x3f
 8006db4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8006db6:	f240 1301 	movw	r3, #257	; 0x101
 8006dba:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006dbc:	1dfb      	adds	r3, r7, #7
 8006dbe:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006dc4:	f107 0308 	add.w	r3, r7, #8
 8006dc8:	2100      	movs	r1, #0
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 ff0c 	bl	8007be8 <hci_send_req>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	da01      	bge.n	8006dda <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8006dd6:	23ff      	movs	r3, #255	; 0xff
 8006dd8:	e000      	b.n	8006ddc <aci_gatt_init+0x42>
  return status;
 8006dda:	79fb      	ldrb	r3, [r7, #7]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3720      	adds	r7, #32
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8006de4:	b590      	push	{r4, r7, lr}
 8006de6:	b0cf      	sub	sp, #316	; 0x13c
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	4604      	mov	r4, r0
 8006dec:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8006df0:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8006df4:	6001      	str	r1, [r0, #0]
 8006df6:	4610      	mov	r0, r2
 8006df8:	4619      	mov	r1, r3
 8006dfa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006dfe:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006e02:	4622      	mov	r2, r4
 8006e04:	701a      	strb	r2, [r3, #0]
 8006e06:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006e0a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006e0e:	4602      	mov	r2, r0
 8006e10:	701a      	strb	r2, [r3, #0]
 8006e12:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006e16:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006e1a:	460a      	mov	r2, r1
 8006e1c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8006e1e:	f107 0310 	add.w	r3, r7, #16
 8006e22:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8006e26:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006e2a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d00a      	beq.n	8006e4a <aci_gatt_add_service+0x66>
 8006e34:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006e38:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d101      	bne.n	8006e46 <aci_gatt_add_service+0x62>
 8006e42:	2311      	movs	r3, #17
 8006e44:	e002      	b.n	8006e4c <aci_gatt_add_service+0x68>
 8006e46:	2301      	movs	r3, #1
 8006e48:	e000      	b.n	8006e4c <aci_gatt_add_service+0x68>
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	f107 0210 	add.w	r2, r7, #16
 8006e50:	4413      	add	r3, r2
 8006e52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006e56:	f107 030c 	add.w	r3, r7, #12
 8006e5a:	2203      	movs	r2, #3
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 fc38 	bl	80076d4 <Osal_MemSet>
  int index_input = 0;
 8006e64:	2300      	movs	r3, #0
 8006e66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8006e6a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006e6e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006e72:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8006e76:	7812      	ldrb	r2, [r2, #0]
 8006e78:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006e7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e7e:	3301      	adds	r3, #1
 8006e80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8006e84:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006e88:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d002      	beq.n	8006e98 <aci_gatt_add_service+0xb4>
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d004      	beq.n	8006ea0 <aci_gatt_add_service+0xbc>
 8006e96:	e007      	b.n	8006ea8 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8006e98:	2302      	movs	r3, #2
 8006e9a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006e9e:	e005      	b.n	8006eac <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8006ea0:	2310      	movs	r3, #16
 8006ea2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006ea6:	e001      	b.n	8006eac <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8006ea8:	2397      	movs	r3, #151	; 0x97
 8006eaa:	e06c      	b.n	8006f86 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8006eac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006eb0:	1c58      	adds	r0, r3, #1
 8006eb2:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8006eb6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006eba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006ebe:	6819      	ldr	r1, [r3, #0]
 8006ec0:	f000 fbf8 	bl	80076b4 <Osal_MemCpy>
    index_input += size;
 8006ec4:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8006ec8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006ecc:	4413      	add	r3, r2
 8006ece:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8006ed2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ed6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006eda:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006ede:	7812      	ldrb	r2, [r2, #0]
 8006ee0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006ee2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8006eec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ef0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006ef4:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8006ef8:	7812      	ldrb	r2, [r2, #0]
 8006efa:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8006efc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f00:	3301      	adds	r3, #1
 8006f02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006f06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f0a:	2218      	movs	r2, #24
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f000 fbe0 	bl	80076d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006f14:	233f      	movs	r3, #63	; 0x3f
 8006f16:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8006f1a:	f44f 7381 	mov.w	r3, #258	; 0x102
 8006f1e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006f22:	f107 0310 	add.w	r3, r7, #16
 8006f26:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006f2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8006f32:	f107 030c 	add.w	r3, r7, #12
 8006f36:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006f40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f44:	2100      	movs	r1, #0
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 fe4e 	bl	8007be8 <hci_send_req>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	da01      	bge.n	8006f56 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8006f52:	23ff      	movs	r3, #255	; 0xff
 8006f54:	e017      	b.n	8006f86 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8006f56:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006f5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d005      	beq.n	8006f70 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8006f64:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006f68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	e00a      	b.n	8006f86 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8006f70:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006f74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f78:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8006f82:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd90      	pop	{r4, r7, pc}

08006f90 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8006f90:	b590      	push	{r4, r7, lr}
 8006f92:	b0d1      	sub	sp, #324	; 0x144
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	4604      	mov	r4, r0
 8006f98:	4608      	mov	r0, r1
 8006f9a:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8006f9e:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8006fa2:	600a      	str	r2, [r1, #0]
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006faa:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006fae:	4622      	mov	r2, r4
 8006fb0:	801a      	strh	r2, [r3, #0]
 8006fb2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006fb6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006fba:	4602      	mov	r2, r0
 8006fbc:	701a      	strb	r2, [r3, #0]
 8006fbe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006fc2:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8006fc6:	460a      	mov	r2, r1
 8006fc8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8006fca:	f107 0318 	add.w	r3, r7, #24
 8006fce:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8006fd2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006fd6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d00a      	beq.n	8006ff6 <aci_gatt_add_char+0x66>
 8006fe0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006fe4:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d101      	bne.n	8006ff2 <aci_gatt_add_char+0x62>
 8006fee:	2313      	movs	r3, #19
 8006ff0:	e002      	b.n	8006ff8 <aci_gatt_add_char+0x68>
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e000      	b.n	8006ff8 <aci_gatt_add_char+0x68>
 8006ff6:	2305      	movs	r3, #5
 8006ff8:	f107 0218 	add.w	r2, r7, #24
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007002:	f107 0314 	add.w	r3, r7, #20
 8007006:	2203      	movs	r2, #3
 8007008:	2100      	movs	r1, #0
 800700a:	4618      	mov	r0, r3
 800700c:	f000 fb62 	bl	80076d4 <Osal_MemSet>
  int index_input = 0;
 8007010:	2300      	movs	r3, #0
 8007012:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8007016:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800701a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800701e:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8007022:	8812      	ldrh	r2, [r2, #0]
 8007024:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007026:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800702a:	3302      	adds	r3, #2
 800702c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8007030:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007034:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007038:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800703c:	7812      	ldrb	r2, [r2, #0]
 800703e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007040:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007044:	3301      	adds	r3, #1
 8007046:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800704a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800704e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d002      	beq.n	800705e <aci_gatt_add_char+0xce>
 8007058:	2b02      	cmp	r3, #2
 800705a:	d004      	beq.n	8007066 <aci_gatt_add_char+0xd6>
 800705c:	e007      	b.n	800706e <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800705e:	2302      	movs	r3, #2
 8007060:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007064:	e005      	b.n	8007072 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8007066:	2310      	movs	r3, #16
 8007068:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800706c:	e001      	b.n	8007072 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800706e:	2397      	movs	r3, #151	; 0x97
 8007070:	e091      	b.n	8007196 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8007072:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007076:	1cd8      	adds	r0, r3, #3
 8007078:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800707c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007080:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007084:	6819      	ldr	r1, [r3, #0]
 8007086:	f000 fb15 	bl	80076b4 <Osal_MemCpy>
    index_input += size;
 800708a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800708e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007092:	4413      	add	r3, r2
 8007094:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8007098:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800709c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80070a0:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 80070a4:	8812      	ldrh	r2, [r2, #0]
 80070a6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80070a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80070ac:	3302      	adds	r3, #2
 80070ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80070b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80070b6:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80070ba:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80070bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80070c0:	3301      	adds	r3, #1
 80070c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80070c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80070ca:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80070ce:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80070d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80070d4:	3301      	adds	r3, #1
 80070d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80070da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80070de:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80070e2:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80070e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80070e8:	3301      	adds	r3, #1
 80070ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80070ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80070f2:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80070f6:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80070f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80070fc:	3301      	adds	r3, #1
 80070fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8007102:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007106:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800710a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800710c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007110:	3301      	adds	r3, #1
 8007112:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007116:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800711a:	2218      	movs	r2, #24
 800711c:	2100      	movs	r1, #0
 800711e:	4618      	mov	r0, r3
 8007120:	f000 fad8 	bl	80076d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007124:	233f      	movs	r3, #63	; 0x3f
 8007126:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800712a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800712e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8007132:	f107 0318 	add.w	r3, r7, #24
 8007136:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800713a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800713e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8007142:	f107 0314 	add.w	r3, r7, #20
 8007146:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800714a:	2303      	movs	r3, #3
 800714c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007150:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007154:	2100      	movs	r1, #0
 8007156:	4618      	mov	r0, r3
 8007158:	f000 fd46 	bl	8007be8 <hci_send_req>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	da01      	bge.n	8007166 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8007162:	23ff      	movs	r3, #255	; 0xff
 8007164:	e017      	b.n	8007196 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8007166:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800716a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d005      	beq.n	8007180 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8007174:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007178:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	e00a      	b.n	8007196 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8007180:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007184:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007188:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800718c:	b29a      	uxth	r2, r3
 800718e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8007192:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800719c:	46bd      	mov	sp, r7
 800719e:	bd90      	pop	{r4, r7, pc}

080071a0 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80071a0:	b5b0      	push	{r4, r5, r7, lr}
 80071a2:	b0cc      	sub	sp, #304	; 0x130
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	4605      	mov	r5, r0
 80071a8:	460c      	mov	r4, r1
 80071aa:	4610      	mov	r0, r2
 80071ac:	4619      	mov	r1, r3
 80071ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80071b6:	462a      	mov	r2, r5
 80071b8:	801a      	strh	r2, [r3, #0]
 80071ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071c2:	4622      	mov	r2, r4
 80071c4:	801a      	strh	r2, [r3, #0]
 80071c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ca:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80071ce:	4602      	mov	r2, r0
 80071d0:	701a      	strb	r2, [r3, #0]
 80071d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80071da:	460a      	mov	r2, r1
 80071dc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80071de:	f107 0310 	add.w	r3, r7, #16
 80071e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80071e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ea:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80071ee:	2200      	movs	r2, #0
 80071f0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80071f2:	2300      	movs	r3, #0
 80071f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80071f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007200:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007204:	8812      	ldrh	r2, [r2, #0]
 8007206:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007208:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800720c:	3302      	adds	r3, #2
 800720e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8007212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007216:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800721a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800721e:	8812      	ldrh	r2, [r2, #0]
 8007220:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007222:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007226:	3302      	adds	r3, #2
 8007228:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800722c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007230:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007234:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8007238:	7812      	ldrb	r2, [r2, #0]
 800723a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800723c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007240:	3301      	adds	r3, #1
 8007242:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8007246:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800724a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800724e:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8007252:	7812      	ldrb	r2, [r2, #0]
 8007254:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007256:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800725a:	3301      	adds	r3, #1
 800725c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8007260:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007264:	1d98      	adds	r0, r3, #6
 8007266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800726a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	461a      	mov	r2, r3
 8007272:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007276:	f000 fa1d 	bl	80076b4 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800727a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800727e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007288:	4413      	add	r3, r2
 800728a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800728e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007292:	2218      	movs	r2, #24
 8007294:	2100      	movs	r1, #0
 8007296:	4618      	mov	r0, r3
 8007298:	f000 fa1c 	bl	80076d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800729c:	233f      	movs	r3, #63	; 0x3f
 800729e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80072a2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80072a6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80072aa:	f107 0310 	add.w	r3, r7, #16
 80072ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80072b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80072ba:	f107 030f 	add.w	r3, r7, #15
 80072be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80072c2:	2301      	movs	r3, #1
 80072c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80072c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80072cc:	2100      	movs	r1, #0
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 fc8a 	bl	8007be8 <hci_send_req>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	da01      	bge.n	80072de <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80072da:	23ff      	movs	r3, #255	; 0xff
 80072dc:	e004      	b.n	80072e8 <aci_gatt_update_char_value+0x148>
  return status;
 80072de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80072e6:	781b      	ldrb	r3, [r3, #0]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bdb0      	pop	{r4, r5, r7, pc}

080072f2 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b0cc      	sub	sp, #304	; 0x130
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007300:	601a      	str	r2, [r3, #0]
 8007302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007306:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800730a:	4602      	mov	r2, r0
 800730c:	701a      	strb	r2, [r3, #0]
 800730e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007312:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007316:	460a      	mov	r2, r1
 8007318:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800731a:	f107 0310 	add.w	r3, r7, #16
 800731e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007326:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800732a:	2200      	movs	r2, #0
 800732c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800732e:	2300      	movs	r3, #0
 8007330:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8007334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007338:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800733c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007340:	7812      	ldrb	r2, [r2, #0]
 8007342:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007344:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007348:	3301      	adds	r3, #1
 800734a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800734e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007352:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007356:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800735a:	7812      	ldrb	r2, [r2, #0]
 800735c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800735e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007362:	3301      	adds	r3, #1
 8007364:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8007368:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800736c:	1c98      	adds	r0, r3, #2
 800736e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007372:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007376:	781a      	ldrb	r2, [r3, #0]
 8007378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800737c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007380:	6819      	ldr	r1, [r3, #0]
 8007382:	f000 f997 	bl	80076b4 <Osal_MemCpy>
  index_input += Length;
 8007386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800738a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007394:	4413      	add	r3, r2
 8007396:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800739a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800739e:	2218      	movs	r2, #24
 80073a0:	2100      	movs	r1, #0
 80073a2:	4618      	mov	r0, r3
 80073a4:	f000 f996 	bl	80076d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80073a8:	233f      	movs	r3, #63	; 0x3f
 80073aa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80073ae:	230c      	movs	r3, #12
 80073b0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80073b4:	f107 0310 	add.w	r3, r7, #16
 80073b8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80073bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80073c4:	f107 030f 	add.w	r3, r7, #15
 80073c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80073cc:	2301      	movs	r3, #1
 80073ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80073d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073d6:	2100      	movs	r1, #0
 80073d8:	4618      	mov	r0, r3
 80073da:	f000 fc05 	bl	8007be8 <hci_send_req>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	da01      	bge.n	80073e8 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80073e4:	23ff      	movs	r3, #255	; 0xff
 80073e6:	e004      	b.n	80073f2 <aci_hal_write_config_data+0x100>
  return status;
 80073e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ec:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80073f0:	781b      	ldrb	r3, [r3, #0]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b0cc      	sub	sp, #304	; 0x130
 8007400:	af00      	add	r7, sp, #0
 8007402:	4602      	mov	r2, r0
 8007404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007408:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800740c:	701a      	strb	r2, [r3, #0]
 800740e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007412:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007416:	460a      	mov	r2, r1
 8007418:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800741a:	f107 0310 	add.w	r3, r7, #16
 800741e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007426:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800742a:	2200      	movs	r2, #0
 800742c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800742e:	2300      	movs	r3, #0
 8007430:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8007434:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007438:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800743c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007440:	7812      	ldrb	r2, [r2, #0]
 8007442:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007444:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007448:	3301      	adds	r3, #1
 800744a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800744e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007452:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007456:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800745a:	7812      	ldrb	r2, [r2, #0]
 800745c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800745e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007462:	3301      	adds	r3, #1
 8007464:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007468:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800746c:	2218      	movs	r2, #24
 800746e:	2100      	movs	r1, #0
 8007470:	4618      	mov	r0, r3
 8007472:	f000 f92f 	bl	80076d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007476:	233f      	movs	r3, #63	; 0x3f
 8007478:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800747c:	230f      	movs	r3, #15
 800747e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007482:	f107 0310 	add.w	r3, r7, #16
 8007486:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800748a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800748e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007492:	f107 030f 	add.w	r3, r7, #15
 8007496:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800749a:	2301      	movs	r3, #1
 800749c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80074a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074a4:	2100      	movs	r1, #0
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 fb9e 	bl	8007be8 <hci_send_req>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	da01      	bge.n	80074b6 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80074b2:	23ff      	movs	r3, #255	; 0xff
 80074b4:	e004      	b.n	80074c0 <aci_hal_set_tx_power_level+0xc4>
  return status;
 80074b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ba:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80074be:	781b      	ldrb	r3, [r3, #0]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b0cc      	sub	sp, #304	; 0x130
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	4602      	mov	r2, r0
 80074d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80074da:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80074dc:	f107 0310 	add.w	r3, r7, #16
 80074e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80074e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80074ec:	2200      	movs	r2, #0
 80074ee:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80074f0:	2300      	movs	r3, #0
 80074f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80074f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80074fe:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007502:	8812      	ldrh	r2, [r2, #0]
 8007504:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007506:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800750a:	3302      	adds	r3, #2
 800750c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007510:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007514:	2218      	movs	r2, #24
 8007516:	2100      	movs	r1, #0
 8007518:	4618      	mov	r0, r3
 800751a:	f000 f8db 	bl	80076d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800751e:	233f      	movs	r3, #63	; 0x3f
 8007520:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8007524:	2318      	movs	r3, #24
 8007526:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800752a:	f107 0310 	add.w	r3, r7, #16
 800752e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007532:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007536:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800753a:	f107 030f 	add.w	r3, r7, #15
 800753e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007542:	2301      	movs	r3, #1
 8007544:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007548:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800754c:	2100      	movs	r1, #0
 800754e:	4618      	mov	r0, r3
 8007550:	f000 fb4a 	bl	8007be8 <hci_send_req>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	da01      	bge.n	800755e <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800755a:	23ff      	movs	r3, #255	; 0xff
 800755c:	e004      	b.n	8007568 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800755e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007562:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007566:	781b      	ldrb	r3, [r3, #0]
}
 8007568:	4618      	mov	r0, r3
 800756a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b088      	sub	sp, #32
 8007576:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007578:	2300      	movs	r3, #0
 800757a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800757c:	f107 0308 	add.w	r3, r7, #8
 8007580:	2218      	movs	r2, #24
 8007582:	2100      	movs	r1, #0
 8007584:	4618      	mov	r0, r3
 8007586:	f000 f8a5 	bl	80076d4 <Osal_MemSet>
  rq.ogf = 0x03;
 800758a:	2303      	movs	r3, #3
 800758c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800758e:	2303      	movs	r3, #3
 8007590:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007592:	1dfb      	adds	r3, r7, #7
 8007594:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007596:	2301      	movs	r3, #1
 8007598:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800759a:	f107 0308 	add.w	r3, r7, #8
 800759e:	2100      	movs	r1, #0
 80075a0:	4618      	mov	r0, r3
 80075a2:	f000 fb21 	bl	8007be8 <hci_send_req>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	da01      	bge.n	80075b0 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80075ac:	23ff      	movs	r3, #255	; 0xff
 80075ae:	e000      	b.n	80075b2 <hci_reset+0x40>
  return status;
 80075b0:	79fb      	ldrb	r3, [r7, #7]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3720      	adds	r7, #32
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80075ba:	b590      	push	{r4, r7, lr}
 80075bc:	b0cd      	sub	sp, #308	; 0x134
 80075be:	af00      	add	r7, sp, #0
 80075c0:	4604      	mov	r4, r0
 80075c2:	4608      	mov	r0, r1
 80075c4:	4611      	mov	r1, r2
 80075c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ca:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80075ce:	4622      	mov	r2, r4
 80075d0:	701a      	strb	r2, [r3, #0]
 80075d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075d6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80075da:	4602      	mov	r2, r0
 80075dc:	701a      	strb	r2, [r3, #0]
 80075de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e2:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80075e6:	460a      	mov	r2, r1
 80075e8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80075ea:	f107 0310 	add.w	r3, r7, #16
 80075ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80075f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80075fa:	2200      	movs	r2, #0
 80075fc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80075fe:	2300      	movs	r3, #0
 8007600:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8007604:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007608:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800760c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007610:	7812      	ldrb	r2, [r2, #0]
 8007612:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007614:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007618:	3301      	adds	r3, #1
 800761a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800761e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007622:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007626:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800762a:	7812      	ldrb	r2, [r2, #0]
 800762c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800762e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007632:	3301      	adds	r3, #1
 8007634:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8007638:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800763c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007640:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007644:	7812      	ldrb	r2, [r2, #0]
 8007646:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007648:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800764c:	3301      	adds	r3, #1
 800764e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007652:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007656:	2218      	movs	r2, #24
 8007658:	2100      	movs	r1, #0
 800765a:	4618      	mov	r0, r3
 800765c:	f000 f83a 	bl	80076d4 <Osal_MemSet>
  rq.ogf = 0x08;
 8007660:	2308      	movs	r3, #8
 8007662:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8007666:	2331      	movs	r3, #49	; 0x31
 8007668:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800766c:	f107 0310 	add.w	r3, r7, #16
 8007670:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007674:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007678:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800767c:	f107 030f 	add.w	r3, r7, #15
 8007680:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007684:	2301      	movs	r3, #1
 8007686:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800768a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800768e:	2100      	movs	r1, #0
 8007690:	4618      	mov	r0, r3
 8007692:	f000 faa9 	bl	8007be8 <hci_send_req>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	da01      	bge.n	80076a0 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800769c:	23ff      	movs	r3, #255	; 0xff
 800769e:	e004      	b.n	80076aa <hci_le_set_default_phy+0xf0>
  return status;
 80076a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076a4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80076a8:	781b      	ldrb	r3, [r3, #0]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd90      	pop	{r4, r7, pc}

080076b4 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	68b9      	ldr	r1, [r7, #8]
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f002 f9a9 	bl	8009a1c <memcpy>
 80076ca:	4603      	mov	r3, r0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	68b9      	ldr	r1, [r7, #8]
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f002 f9c1 	bl	8009a6c <memset>
 80076ea:	4603      	mov	r3, r0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80076f4:	b480      	push	{r7}
 80076f6:	af00      	add	r7, sp, #0
  return;
 80076f8:	bf00      	nop
}
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8007702:	b480      	push	{r7}
 8007704:	af00      	add	r7, sp, #0
  return;
 8007706:	bf00      	nop
}
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8007710:	b480      	push	{r7}
 8007712:	af00      	add	r7, sp, #0
  return;
 8007714:	bf00      	nop
}
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr

0800771e <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800771e:	b480      	push	{r7}
 8007720:	af00      	add	r7, sp, #0
  return;
 8007722:	bf00      	nop
}
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800772c:	b480      	push	{r7}
 800772e:	af00      	add	r7, sp, #0
  return;
 8007730:	bf00      	nop
}
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800773a:	b480      	push	{r7}
 800773c:	af00      	add	r7, sp, #0
  return;
 800773e:	bf00      	nop
}
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8007748:	b480      	push	{r7}
 800774a:	af00      	add	r7, sp, #0
  return;
 800774c:	bf00      	nop
}
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8007756:	b480      	push	{r7}
 8007758:	af00      	add	r7, sp, #0
  return;
 800775a:	bf00      	nop
}
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8007764:	b480      	push	{r7}
 8007766:	af00      	add	r7, sp, #0
  return;
 8007768:	bf00      	nop
}
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8007772:	b480      	push	{r7}
 8007774:	af00      	add	r7, sp, #0
  return;
 8007776:	bf00      	nop
}
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8007780:	b480      	push	{r7}
 8007782:	af00      	add	r7, sp, #0
  return;
 8007784:	bf00      	nop
}
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800778e:	b480      	push	{r7}
 8007790:	af00      	add	r7, sp, #0
  return;
 8007792:	bf00      	nop
}
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800779c:	b480      	push	{r7}
 800779e:	af00      	add	r7, sp, #0
  return;
 80077a0:	bf00      	nop
}
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 80077aa:	b480      	push	{r7}
 80077ac:	af00      	add	r7, sp, #0
  return;
 80077ae:	bf00      	nop
}
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80077b8:	b480      	push	{r7}
 80077ba:	af00      	add	r7, sp, #0
  return;
 80077bc:	bf00      	nop
}
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80077c6:	b480      	push	{r7}
 80077c8:	af00      	add	r7, sp, #0
  return;
 80077ca:	bf00      	nop
}
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80077d4:	b480      	push	{r7}
 80077d6:	af00      	add	r7, sp, #0
  return;
 80077d8:	bf00      	nop
}
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
	...

080077e4 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80077e8:	4b04      	ldr	r3, [pc, #16]	; (80077fc <SVCCTL_Init+0x18>)
 80077ea:	2200      	movs	r2, #0
 80077ec:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80077ee:	4b04      	ldr	r3, [pc, #16]	; (8007800 <SVCCTL_Init+0x1c>)
 80077f0:	2200      	movs	r2, #0
 80077f2:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80077f4:	f000 f806 	bl	8007804 <SVCCTL_SvcInit>

  return;
 80077f8:	bf00      	nop
}
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	20000128 	.word	0x20000128
 8007800:	20000148 	.word	0x20000148

08007804 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	af00      	add	r7, sp, #0
  BAS_Init();
 8007808:	f7ff ff74 	bl	80076f4 <BAS_Init>

  BLS_Init();
 800780c:	f7ff ff79 	bl	8007702 <BLS_Init>

  CRS_STM_Init();
 8007810:	f7ff ff7e 	bl	8007710 <CRS_STM_Init>

  DIS_Init();
 8007814:	f7ff ff83 	bl	800771e <DIS_Init>

  EDS_STM_Init();
 8007818:	f7ff ff88 	bl	800772c <EDS_STM_Init>

  HIDS_Init();
 800781c:	f7ff ff8d 	bl	800773a <HIDS_Init>

  HRS_Init();
 8007820:	f7ff ff92 	bl	8007748 <HRS_Init>

  HTS_Init();
 8007824:	f7ff ff97 	bl	8007756 <HTS_Init>

  IAS_Init();
 8007828:	f7ff ff9c 	bl	8007764 <IAS_Init>

  LLS_Init();
 800782c:	f7ff ffa1 	bl	8007772 <LLS_Init>

  TPS_Init();
 8007830:	f7ff ffa6 	bl	8007780 <TPS_Init>

  MOTENV_STM_Init();
 8007834:	f7ff ffab 	bl	800778e <MOTENV_STM_Init>

  P2PS_STM_Init();
 8007838:	f7ff ffb0 	bl	800779c <P2PS_STM_Init>

  ZDD_STM_Init();
 800783c:	f7ff ffb5 	bl	80077aa <ZDD_STM_Init>

  OTAS_STM_Init();
 8007840:	f7ff ffba 	bl	80077b8 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8007844:	f7ff ffc6 	bl	80077d4 <BVOPUS_STM_Init>

  MESH_Init();
 8007848:	f7ff ffbd 	bl	80077c6 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800784c:	f001 fb2a 	bl	8008ea4 <SVCCTL_InitCustomSvc>
  
  return;
 8007850:	bf00      	nop
}
 8007852:	bd80      	pop	{r7, pc}

08007854 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800785c:	4b09      	ldr	r3, [pc, #36]	; (8007884 <SVCCTL_RegisterSvcHandler+0x30>)
 800785e:	7f1b      	ldrb	r3, [r3, #28]
 8007860:	4619      	mov	r1, r3
 8007862:	4a08      	ldr	r2, [pc, #32]	; (8007884 <SVCCTL_RegisterSvcHandler+0x30>)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800786a:	4b06      	ldr	r3, [pc, #24]	; (8007884 <SVCCTL_RegisterSvcHandler+0x30>)
 800786c:	7f1b      	ldrb	r3, [r3, #28]
 800786e:	3301      	adds	r3, #1
 8007870:	b2da      	uxtb	r2, r3
 8007872:	4b04      	ldr	r3, [pc, #16]	; (8007884 <SVCCTL_RegisterSvcHandler+0x30>)
 8007874:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8007876:	bf00      	nop
}
 8007878:	370c      	adds	r7, #12
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	20000128 	.word	0x20000128

08007888 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	3301      	adds	r3, #1
 8007894:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8007896:	2300      	movs	r3, #0
 8007898:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	2bff      	cmp	r3, #255	; 0xff
 80078a0:	d125      	bne.n	80078ee <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	3302      	adds	r3, #2
 80078a6:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	881b      	ldrh	r3, [r3, #0]
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80078b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078b6:	d118      	bne.n	80078ea <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80078b8:	2300      	movs	r3, #0
 80078ba:	757b      	strb	r3, [r7, #21]
 80078bc:	e00d      	b.n	80078da <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80078be:	7d7b      	ldrb	r3, [r7, #21]
 80078c0:	4a1a      	ldr	r2, [pc, #104]	; (800792c <SVCCTL_UserEvtRx+0xa4>)
 80078c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	4798      	blx	r3
 80078ca:	4603      	mov	r3, r0
 80078cc:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80078ce:	7dfb      	ldrb	r3, [r7, #23]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d108      	bne.n	80078e6 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80078d4:	7d7b      	ldrb	r3, [r7, #21]
 80078d6:	3301      	adds	r3, #1
 80078d8:	757b      	strb	r3, [r7, #21]
 80078da:	4b14      	ldr	r3, [pc, #80]	; (800792c <SVCCTL_UserEvtRx+0xa4>)
 80078dc:	7f1b      	ldrb	r3, [r3, #28]
 80078de:	7d7a      	ldrb	r2, [r7, #21]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d3ec      	bcc.n	80078be <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80078e4:	e002      	b.n	80078ec <SVCCTL_UserEvtRx+0x64>
              break;
 80078e6:	bf00      	nop
          break;
 80078e8:	e000      	b.n	80078ec <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80078ea:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80078ec:	e000      	b.n	80078f0 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80078ee:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 80078f0:	7dfb      	ldrb	r3, [r7, #23]
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d00f      	beq.n	8007916 <SVCCTL_UserEvtRx+0x8e>
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	dc10      	bgt.n	800791c <SVCCTL_UserEvtRx+0x94>
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d002      	beq.n	8007904 <SVCCTL_UserEvtRx+0x7c>
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d006      	beq.n	8007910 <SVCCTL_UserEvtRx+0x88>
 8007902:	e00b      	b.n	800791c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 ff79 	bl	80087fc <SVCCTL_App_Notification>
 800790a:	4603      	mov	r3, r0
 800790c:	75bb      	strb	r3, [r7, #22]
      break;
 800790e:	e008      	b.n	8007922 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007910:	2301      	movs	r3, #1
 8007912:	75bb      	strb	r3, [r7, #22]
      break;
 8007914:	e005      	b.n	8007922 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8007916:	2300      	movs	r3, #0
 8007918:	75bb      	strb	r3, [r7, #22]
      break;
 800791a:	e002      	b.n	8007922 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800791c:	2301      	movs	r3, #1
 800791e:	75bb      	strb	r3, [r7, #22]
      break;
 8007920:	bf00      	nop
  }

  return (return_status);
 8007922:	7dbb      	ldrb	r3, [r7, #22]
}
 8007924:	4618      	mov	r0, r3
 8007926:	3718      	adds	r7, #24
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	20000128 	.word	0x20000128

08007930 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b088      	sub	sp, #32
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007938:	f107 030c 	add.w	r3, r7, #12
 800793c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	2125      	movs	r1, #37	; 0x25
 8007948:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800794c:	f000 fae2 	bl	8007f14 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	330b      	adds	r3, #11
 8007954:	78db      	ldrb	r3, [r3, #3]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3720      	adds	r7, #32
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b088      	sub	sp, #32
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007966:	f107 030c 	add.w	r3, r7, #12
 800796a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	210f      	movs	r1, #15
 8007976:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800797a:	f000 facb 	bl	8007f14 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	330b      	adds	r3, #11
 8007982:	78db      	ldrb	r3, [r3, #3]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3720      	adds	r7, #32
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b088      	sub	sp, #32
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007994:	f107 030c 	add.w	r3, r7, #12
 8007998:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	210e      	movs	r1, #14
 80079a0:	f64f 4075 	movw	r0, #64629	; 0xfc75
 80079a4:	f000 fab6 	bl	8007f14 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	330b      	adds	r3, #11
 80079ac:	78db      	ldrb	r3, [r3, #3]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3720      	adds	r7, #32
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
	...

080079b8 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80079b8:	b480      	push	{r7}
 80079ba:	b08b      	sub	sp, #44	; 0x2c
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80079c0:	2300      	movs	r3, #0
 80079c2:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80079c4:	2300      	movs	r3, #0
 80079c6:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80079c8:	2300      	movs	r3, #0
 80079ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80079cc:	2300      	movs	r3, #0
 80079ce:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80079d0:	2300      	movs	r3, #0
 80079d2:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80079d4:	2300      	movs	r3, #0
 80079d6:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80079d8:	2300      	movs	r3, #0
 80079da:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80079dc:	2300      	movs	r3, #0
 80079de:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80079e0:	4b4a      	ldr	r3, [pc, #296]	; (8007b0c <SHCI_GetWirelessFwInfo+0x154>)
 80079e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80079e8:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80079f2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a44      	ldr	r2, [pc, #272]	; (8007b10 <SHCI_GetWirelessFwInfo+0x158>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d10f      	bne.n	8007a24 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	695b      	ldr	r3, [r3, #20]
 8007a08:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	69db      	ldr	r3, [r3, #28]
 8007a14:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	617b      	str	r3, [r7, #20]
 8007a22:	e01a      	b.n	8007a5a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007a2c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007a30:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	695b      	ldr	r3, [r3, #20]
 8007a40:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	699b      	ldr	r3, [r3, #24]
 8007a48:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5c:	0e1b      	lsrs	r3, r3, #24
 8007a5e:	b2da      	uxtb	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	0c1b      	lsrs	r3, r3, #16
 8007a68:	b2da      	uxtb	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a70:	0a1b      	lsrs	r3, r3, #8
 8007a72:	b2da      	uxtb	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8007a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7a:	091b      	lsrs	r3, r3, #4
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	f003 030f 	and.w	r3, r3, #15
 8007a82:	b2da      	uxtb	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	f003 030f 	and.w	r3, r3, #15
 8007a90:	b2da      	uxtb	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007a96:	6a3b      	ldr	r3, [r7, #32]
 8007a98:	0e1b      	lsrs	r3, r3, #24
 8007a9a:	b2da      	uxtb	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007aa0:	6a3b      	ldr	r3, [r7, #32]
 8007aa2:	0c1b      	lsrs	r3, r3, #16
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8007aaa:	6a3b      	ldr	r3, [r7, #32]
 8007aac:	0a1b      	lsrs	r3, r3, #8
 8007aae:	b2da      	uxtb	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007ab4:	6a3b      	ldr	r3, [r7, #32]
 8007ab6:	b2da      	uxtb	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	b2da      	uxtb	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	0e1b      	lsrs	r3, r3, #24
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	0c1b      	lsrs	r3, r3, #16
 8007ad2:	b2da      	uxtb	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	0a1b      	lsrs	r3, r3, #8
 8007adc:	b2da      	uxtb	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	0e1b      	lsrs	r3, r3, #24
 8007ae6:	b2da      	uxtb	r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	0c1b      	lsrs	r3, r3, #16
 8007af0:	b2da      	uxtb	r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	b2da      	uxtb	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	372c      	adds	r7, #44	; 0x2c
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	58004000 	.word	0x58004000
 8007b10:	a94656b9 	.word	0xa94656b9

08007b14 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	4a08      	ldr	r2, [pc, #32]	; (8007b44 <hci_init+0x30>)
 8007b24:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8007b26:	4a08      	ldr	r2, [pc, #32]	; (8007b48 <hci_init+0x34>)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8007b2c:	4806      	ldr	r0, [pc, #24]	; (8007b48 <hci_init+0x34>)
 8007b2e:	f000 f973 	bl	8007e18 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 f8d4 	bl	8007ce4 <TlInit>

  return;
 8007b3c:	bf00      	nop
}
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	2000079c 	.word	0x2000079c
 8007b48:	20000774 	.word	0x20000774

08007b4c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007b52:	4822      	ldr	r0, [pc, #136]	; (8007bdc <hci_user_evt_proc+0x90>)
 8007b54:	f000 fd28 	bl	80085a8 <LST_is_empty>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d12b      	bne.n	8007bb6 <hci_user_evt_proc+0x6a>
 8007b5e:	4b20      	ldr	r3, [pc, #128]	; (8007be0 <hci_user_evt_proc+0x94>)
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d027      	beq.n	8007bb6 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007b66:	f107 030c 	add.w	r3, r7, #12
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	481b      	ldr	r0, [pc, #108]	; (8007bdc <hci_user_evt_proc+0x90>)
 8007b6e:	f000 fdaa 	bl	80086c6 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8007b72:	4b1c      	ldr	r3, [pc, #112]	; (8007be4 <hci_user_evt_proc+0x98>)
 8007b74:	69db      	ldr	r3, [r3, #28]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00c      	beq.n	8007b94 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007b82:	4b18      	ldr	r3, [pc, #96]	; (8007be4 <hci_user_evt_proc+0x98>)
 8007b84:	69db      	ldr	r3, [r3, #28]
 8007b86:	1d3a      	adds	r2, r7, #4
 8007b88:	4610      	mov	r0, r2
 8007b8a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8007b8c:	793a      	ldrb	r2, [r7, #4]
 8007b8e:	4b14      	ldr	r3, [pc, #80]	; (8007be0 <hci_user_evt_proc+0x94>)
 8007b90:	701a      	strb	r2, [r3, #0]
 8007b92:	e002      	b.n	8007b9a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007b94:	4b12      	ldr	r3, [pc, #72]	; (8007be0 <hci_user_evt_proc+0x94>)
 8007b96:	2201      	movs	r2, #1
 8007b98:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8007b9a:	4b11      	ldr	r3, [pc, #68]	; (8007be0 <hci_user_evt_proc+0x94>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d004      	beq.n	8007bac <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f000 fc03 	bl	80083b0 <TL_MM_EvtDone>
 8007baa:	e004      	b.n	8007bb6 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	4619      	mov	r1, r3
 8007bb0:	480a      	ldr	r0, [pc, #40]	; (8007bdc <hci_user_evt_proc+0x90>)
 8007bb2:	f000 fd1b 	bl	80085ec <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007bb6:	4809      	ldr	r0, [pc, #36]	; (8007bdc <hci_user_evt_proc+0x90>)
 8007bb8:	f000 fcf6 	bl	80085a8 <LST_is_empty>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d107      	bne.n	8007bd2 <hci_user_evt_proc+0x86>
 8007bc2:	4b07      	ldr	r3, [pc, #28]	; (8007be0 <hci_user_evt_proc+0x94>)
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d003      	beq.n	8007bd2 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8007bca:	4804      	ldr	r0, [pc, #16]	; (8007bdc <hci_user_evt_proc+0x90>)
 8007bcc:	f001 f814 	bl	8008bf8 <hci_notify_asynch_evt>
  }


  return;
 8007bd0:	bf00      	nop
 8007bd2:	bf00      	nop
}
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	20000150 	.word	0x20000150
 8007be0:	2000015c 	.word	0x2000015c
 8007be4:	20000774 	.word	0x20000774

08007be8 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b088      	sub	sp, #32
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8007bf4:	2000      	movs	r0, #0
 8007bf6:	f000 f8cb 	bl	8007d90 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	885b      	ldrh	r3, [r3, #2]
 8007c02:	b21b      	sxth	r3, r3
 8007c04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c08:	b21a      	sxth	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	881b      	ldrh	r3, [r3, #0]
 8007c0e:	029b      	lsls	r3, r3, #10
 8007c10:	b21b      	sxth	r3, r3
 8007c12:	4313      	orrs	r3, r2
 8007c14:	b21b      	sxth	r3, r3
 8007c16:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	b2d9      	uxtb	r1, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	689a      	ldr	r2, [r3, #8]
 8007c22:	8bbb      	ldrh	r3, [r7, #28]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f000 f88d 	bl	8007d44 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8007c2a:	e04e      	b.n	8007cca <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8007c2c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007c30:	f000 fff9 	bl	8008c26 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007c34:	e043      	b.n	8007cbe <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8007c36:	f107 030c 	add.w	r3, r7, #12
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	4828      	ldr	r0, [pc, #160]	; (8007ce0 <hci_send_req+0xf8>)
 8007c3e:	f000 fd42 	bl	80086c6 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	7a5b      	ldrb	r3, [r3, #9]
 8007c46:	2b0f      	cmp	r3, #15
 8007c48:	d114      	bne.n	8007c74 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	330b      	adds	r3, #11
 8007c4e:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	885b      	ldrh	r3, [r3, #2]
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	8bba      	ldrh	r2, [r7, #28]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d104      	bne.n	8007c66 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	7812      	ldrb	r2, [r2, #0]
 8007c64:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	785b      	ldrb	r3, [r3, #1]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d027      	beq.n	8007cbe <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	77fb      	strb	r3, [r7, #31]
 8007c72:	e024      	b.n	8007cbe <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	330b      	adds	r3, #11
 8007c78:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	8bba      	ldrh	r2, [r7, #28]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d114      	bne.n	8007cb2 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	7a9b      	ldrb	r3, [r3, #10]
 8007c8c:	3b03      	subs	r3, #3
 8007c8e:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	695a      	ldr	r2, [r3, #20]
 8007c94:	7dfb      	ldrb	r3, [r7, #23]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	bfa8      	it	ge
 8007c9a:	461a      	movge	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6918      	ldr	r0, [r3, #16]
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	1cd9      	adds	r1, r3, #3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	461a      	mov	r2, r3
 8007cae:	f001 feb5 	bl	8009a1c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d001      	beq.n	8007cbe <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007cbe:	4808      	ldr	r0, [pc, #32]	; (8007ce0 <hci_send_req+0xf8>)
 8007cc0:	f000 fc72 	bl	80085a8 <LST_is_empty>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d0b5      	beq.n	8007c36 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8007cca:	7ffb      	ldrb	r3, [r7, #31]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d0ad      	beq.n	8007c2c <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8007cd0:	2001      	movs	r0, #1
 8007cd2:	f000 f85d 	bl	8007d90 <NotifyCmdStatus>

  return 0;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3720      	adds	r7, #32
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	20000794 	.word	0x20000794

08007ce4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8007cec:	480f      	ldr	r0, [pc, #60]	; (8007d2c <TlInit+0x48>)
 8007cee:	f000 fc4b 	bl	8008588 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8007cf2:	4a0f      	ldr	r2, [pc, #60]	; (8007d30 <TlInit+0x4c>)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8007cf8:	480e      	ldr	r0, [pc, #56]	; (8007d34 <TlInit+0x50>)
 8007cfa:	f000 fc45 	bl	8008588 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007cfe:	4b0e      	ldr	r3, [pc, #56]	; (8007d38 <TlInit+0x54>)
 8007d00:	2201      	movs	r2, #1
 8007d02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8007d04:	4b0d      	ldr	r3, [pc, #52]	; (8007d3c <TlInit+0x58>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00a      	beq.n	8007d22 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8007d10:	4b0b      	ldr	r3, [pc, #44]	; (8007d40 <TlInit+0x5c>)
 8007d12:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8007d14:	4b09      	ldr	r3, [pc, #36]	; (8007d3c <TlInit+0x58>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f107 0208 	add.w	r2, r7, #8
 8007d1c:	4610      	mov	r0, r2
 8007d1e:	4798      	blx	r3
  }

  return;
 8007d20:	bf00      	nop
 8007d22:	bf00      	nop
}
 8007d24:	3718      	adds	r7, #24
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	20000794 	.word	0x20000794
 8007d30:	20000158 	.word	0x20000158
 8007d34:	20000150 	.word	0x20000150
 8007d38:	2000015c 	.word	0x2000015c
 8007d3c:	20000774 	.word	0x20000774
 8007d40:	08007dd1 	.word	0x08007dd1

08007d44 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	603a      	str	r2, [r7, #0]
 8007d4e:	80fb      	strh	r3, [r7, #6]
 8007d50:	460b      	mov	r3, r1
 8007d52:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8007d54:	4b0c      	ldr	r3, [pc, #48]	; (8007d88 <SendCmd+0x44>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	88fa      	ldrh	r2, [r7, #6]
 8007d5a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8007d5e:	4b0a      	ldr	r3, [pc, #40]	; (8007d88 <SendCmd+0x44>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	797a      	ldrb	r2, [r7, #5]
 8007d64:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8007d66:	4b08      	ldr	r3, [pc, #32]	; (8007d88 <SendCmd+0x44>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	330c      	adds	r3, #12
 8007d6c:	797a      	ldrb	r2, [r7, #5]
 8007d6e:	6839      	ldr	r1, [r7, #0]
 8007d70:	4618      	mov	r0, r3
 8007d72:	f001 fe53 	bl	8009a1c <memcpy>

  hciContext.io.Send(0,0);
 8007d76:	4b05      	ldr	r3, [pc, #20]	; (8007d8c <SendCmd+0x48>)
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	2100      	movs	r1, #0
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	4798      	blx	r3

  return;
 8007d80:	bf00      	nop
}
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	20000158 	.word	0x20000158
 8007d8c:	20000774 	.word	0x20000774

08007d90 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	4603      	mov	r3, r0
 8007d98:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8007d9a:	79fb      	ldrb	r3, [r7, #7]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d108      	bne.n	8007db2 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8007da0:	4b0a      	ldr	r3, [pc, #40]	; (8007dcc <NotifyCmdStatus+0x3c>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00d      	beq.n	8007dc4 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8007da8:	4b08      	ldr	r3, [pc, #32]	; (8007dcc <NotifyCmdStatus+0x3c>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2000      	movs	r0, #0
 8007dae:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8007db0:	e008      	b.n	8007dc4 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8007db2:	4b06      	ldr	r3, [pc, #24]	; (8007dcc <NotifyCmdStatus+0x3c>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d004      	beq.n	8007dc4 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8007dba:	4b04      	ldr	r3, [pc, #16]	; (8007dcc <NotifyCmdStatus+0x3c>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2001      	movs	r0, #1
 8007dc0:	4798      	blx	r3
  return;
 8007dc2:	bf00      	nop
 8007dc4:	bf00      	nop
}
 8007dc6:	3708      	adds	r7, #8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	2000079c 	.word	0x2000079c

08007dd0 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	7a5b      	ldrb	r3, [r3, #9]
 8007ddc:	2b0f      	cmp	r3, #15
 8007dde:	d003      	beq.n	8007de8 <TlEvtReceived+0x18>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	7a5b      	ldrb	r3, [r3, #9]
 8007de4:	2b0e      	cmp	r3, #14
 8007de6:	d107      	bne.n	8007df8 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8007de8:	6879      	ldr	r1, [r7, #4]
 8007dea:	4809      	ldr	r0, [pc, #36]	; (8007e10 <TlEvtReceived+0x40>)
 8007dec:	f000 fc24 	bl	8008638 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8007df0:	2000      	movs	r0, #0
 8007df2:	f000 ff0d 	bl	8008c10 <hci_cmd_resp_release>
 8007df6:	e006      	b.n	8007e06 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8007df8:	6879      	ldr	r1, [r7, #4]
 8007dfa:	4806      	ldr	r0, [pc, #24]	; (8007e14 <TlEvtReceived+0x44>)
 8007dfc:	f000 fc1c 	bl	8008638 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007e00:	4804      	ldr	r0, [pc, #16]	; (8007e14 <TlEvtReceived+0x44>)
 8007e02:	f000 fef9 	bl	8008bf8 <hci_notify_asynch_evt>
  }

  return;
 8007e06:	bf00      	nop
}
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	20000794 	.word	0x20000794
 8007e14:	20000150 	.word	0x20000150

08007e18 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a05      	ldr	r2, [pc, #20]	; (8007e38 <hci_register_io_bus+0x20>)
 8007e24:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a04      	ldr	r2, [pc, #16]	; (8007e3c <hci_register_io_bus+0x24>)
 8007e2a:	611a      	str	r2, [r3, #16]

  return;
 8007e2c:	bf00      	nop
}
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr
 8007e38:	08008129 	.word	0x08008129
 8007e3c:	08008191 	.word	0x08008191

08007e40 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	4a08      	ldr	r2, [pc, #32]	; (8007e70 <shci_init+0x30>)
 8007e50:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8007e52:	4a08      	ldr	r2, [pc, #32]	; (8007e74 <shci_init+0x34>)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8007e58:	4806      	ldr	r0, [pc, #24]	; (8007e74 <shci_init+0x34>)
 8007e5a:	f000 f911 	bl	8008080 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 f894 	bl	8007f90 <TlInit>

  return;
 8007e68:	bf00      	nop
}
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	200007c0 	.word	0x200007c0
 8007e74:	200007a0 	.word	0x200007a0

08007e78 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007e7e:	4822      	ldr	r0, [pc, #136]	; (8007f08 <shci_user_evt_proc+0x90>)
 8007e80:	f000 fb92 	bl	80085a8 <LST_is_empty>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d12b      	bne.n	8007ee2 <shci_user_evt_proc+0x6a>
 8007e8a:	4b20      	ldr	r3, [pc, #128]	; (8007f0c <shci_user_evt_proc+0x94>)
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d027      	beq.n	8007ee2 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007e92:	f107 030c 	add.w	r3, r7, #12
 8007e96:	4619      	mov	r1, r3
 8007e98:	481b      	ldr	r0, [pc, #108]	; (8007f08 <shci_user_evt_proc+0x90>)
 8007e9a:	f000 fc14 	bl	80086c6 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8007e9e:	4b1c      	ldr	r3, [pc, #112]	; (8007f10 <shci_user_evt_proc+0x98>)
 8007ea0:	69db      	ldr	r3, [r3, #28]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00c      	beq.n	8007ec0 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007eae:	4b18      	ldr	r3, [pc, #96]	; (8007f10 <shci_user_evt_proc+0x98>)
 8007eb0:	69db      	ldr	r3, [r3, #28]
 8007eb2:	1d3a      	adds	r2, r7, #4
 8007eb4:	4610      	mov	r0, r2
 8007eb6:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8007eb8:	793a      	ldrb	r2, [r7, #4]
 8007eba:	4b14      	ldr	r3, [pc, #80]	; (8007f0c <shci_user_evt_proc+0x94>)
 8007ebc:	701a      	strb	r2, [r3, #0]
 8007ebe:	e002      	b.n	8007ec6 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007ec0:	4b12      	ldr	r3, [pc, #72]	; (8007f0c <shci_user_evt_proc+0x94>)
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8007ec6:	4b11      	ldr	r3, [pc, #68]	; (8007f0c <shci_user_evt_proc+0x94>)
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d004      	beq.n	8007ed8 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f000 fa6d 	bl	80083b0 <TL_MM_EvtDone>
 8007ed6:	e004      	b.n	8007ee2 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	4619      	mov	r1, r3
 8007edc:	480a      	ldr	r0, [pc, #40]	; (8007f08 <shci_user_evt_proc+0x90>)
 8007ede:	f000 fb85 	bl	80085ec <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007ee2:	4809      	ldr	r0, [pc, #36]	; (8007f08 <shci_user_evt_proc+0x90>)
 8007ee4:	f000 fb60 	bl	80085a8 <LST_is_empty>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d107      	bne.n	8007efe <shci_user_evt_proc+0x86>
 8007eee:	4b07      	ldr	r3, [pc, #28]	; (8007f0c <shci_user_evt_proc+0x94>)
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d003      	beq.n	8007efe <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8007ef6:	4804      	ldr	r0, [pc, #16]	; (8007f08 <shci_user_evt_proc+0x90>)
 8007ef8:	f7f8 ff18 	bl	8000d2c <shci_notify_asynch_evt>
  }


  return;
 8007efc:	bf00      	nop
 8007efe:	bf00      	nop
}
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	20000168 	.word	0x20000168
 8007f0c:	20000178 	.word	0x20000178
 8007f10:	200007a0 	.word	0x200007a0

08007f14 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60ba      	str	r2, [r7, #8]
 8007f1c:	607b      	str	r3, [r7, #4]
 8007f1e:	4603      	mov	r3, r0
 8007f20:	81fb      	strh	r3, [r7, #14]
 8007f22:	460b      	mov	r3, r1
 8007f24:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8007f26:	2000      	movs	r0, #0
 8007f28:	f000 f864 	bl	8007ff4 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8007f2c:	4b16      	ldr	r3, [pc, #88]	; (8007f88 <shci_send+0x74>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	89fa      	ldrh	r2, [r7, #14]
 8007f32:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8007f36:	4b14      	ldr	r3, [pc, #80]	; (8007f88 <shci_send+0x74>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	7b7a      	ldrb	r2, [r7, #13]
 8007f3c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8007f3e:	4b12      	ldr	r3, [pc, #72]	; (8007f88 <shci_send+0x74>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	330c      	adds	r3, #12
 8007f44:	7b7a      	ldrb	r2, [r7, #13]
 8007f46:	68b9      	ldr	r1, [r7, #8]
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f001 fd67 	bl	8009a1c <memcpy>

  shciContext.io.Send(0,0);
 8007f4e:	4b0f      	ldr	r3, [pc, #60]	; (8007f8c <shci_send+0x78>)
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	2100      	movs	r1, #0
 8007f54:	2000      	movs	r0, #0
 8007f56:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8007f58:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007f5c:	f7f8 fefd 	bl	8000d5a <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f103 0008 	add.w	r0, r3, #8
 8007f66:	4b08      	ldr	r3, [pc, #32]	; (8007f88 <shci_send+0x74>)
 8007f68:	6819      	ldr	r1, [r3, #0]
 8007f6a:	4b07      	ldr	r3, [pc, #28]	; (8007f88 <shci_send+0x74>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	789b      	ldrb	r3, [r3, #2]
 8007f70:	3303      	adds	r3, #3
 8007f72:	461a      	mov	r2, r3
 8007f74:	f001 fd52 	bl	8009a1c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007f78:	2001      	movs	r0, #1
 8007f7a:	f000 f83b 	bl	8007ff4 <Cmd_SetStatus>

  return;
 8007f7e:	bf00      	nop
}
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	20000174 	.word	0x20000174
 8007f8c:	200007a0 	.word	0x200007a0

08007f90 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8007f98:	4a10      	ldr	r2, [pc, #64]	; (8007fdc <TlInit+0x4c>)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8007f9e:	4810      	ldr	r0, [pc, #64]	; (8007fe0 <TlInit+0x50>)
 8007fa0:	f000 faf2 	bl	8008588 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007fa4:	2001      	movs	r0, #1
 8007fa6:	f000 f825 	bl	8007ff4 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007faa:	4b0e      	ldr	r3, [pc, #56]	; (8007fe4 <TlInit+0x54>)
 8007fac:	2201      	movs	r2, #1
 8007fae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8007fb0:	4b0d      	ldr	r3, [pc, #52]	; (8007fe8 <TlInit+0x58>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00c      	beq.n	8007fd2 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8007fbc:	4b0b      	ldr	r3, [pc, #44]	; (8007fec <TlInit+0x5c>)
 8007fbe:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8007fc0:	4b0b      	ldr	r3, [pc, #44]	; (8007ff0 <TlInit+0x60>)
 8007fc2:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8007fc4:	4b08      	ldr	r3, [pc, #32]	; (8007fe8 <TlInit+0x58>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f107 020c 	add.w	r2, r7, #12
 8007fcc:	4610      	mov	r0, r2
 8007fce:	4798      	blx	r3
  }

  return;
 8007fd0:	bf00      	nop
 8007fd2:	bf00      	nop
}
 8007fd4:	3718      	adds	r7, #24
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	20000174 	.word	0x20000174
 8007fe0:	20000168 	.word	0x20000168
 8007fe4:	20000178 	.word	0x20000178
 8007fe8:	200007a0 	.word	0x200007a0
 8007fec:	08008045 	.word	0x08008045
 8007ff0:	0800805d 	.word	0x0800805d

08007ff4 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8007ffe:	79fb      	ldrb	r3, [r7, #7]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d10b      	bne.n	800801c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8008004:	4b0d      	ldr	r3, [pc, #52]	; (800803c <Cmd_SetStatus+0x48>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d003      	beq.n	8008014 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800800c:	4b0b      	ldr	r3, [pc, #44]	; (800803c <Cmd_SetStatus+0x48>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2000      	movs	r0, #0
 8008012:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8008014:	4b0a      	ldr	r3, [pc, #40]	; (8008040 <Cmd_SetStatus+0x4c>)
 8008016:	2200      	movs	r2, #0
 8008018:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800801a:	e00b      	b.n	8008034 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800801c:	4b08      	ldr	r3, [pc, #32]	; (8008040 <Cmd_SetStatus+0x4c>)
 800801e:	2201      	movs	r2, #1
 8008020:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8008022:	4b06      	ldr	r3, [pc, #24]	; (800803c <Cmd_SetStatus+0x48>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d004      	beq.n	8008034 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800802a:	4b04      	ldr	r3, [pc, #16]	; (800803c <Cmd_SetStatus+0x48>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2001      	movs	r0, #1
 8008030:	4798      	blx	r3
  return;
 8008032:	bf00      	nop
 8008034:	bf00      	nop
}
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	200007c0 	.word	0x200007c0
 8008040:	20000170 	.word	0x20000170

08008044 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800804c:	2000      	movs	r0, #0
 800804e:	f7f8 fe79 	bl	8000d44 <shci_cmd_resp_release>

  return;
 8008052:	bf00      	nop
}
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
	...

0800805c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8008064:	6879      	ldr	r1, [r7, #4]
 8008066:	4805      	ldr	r0, [pc, #20]	; (800807c <TlUserEvtReceived+0x20>)
 8008068:	f000 fae6 	bl	8008638 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800806c:	4803      	ldr	r0, [pc, #12]	; (800807c <TlUserEvtReceived+0x20>)
 800806e:	f7f8 fe5d 	bl	8000d2c <shci_notify_asynch_evt>

  return;
 8008072:	bf00      	nop
}
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	20000168 	.word	0x20000168

08008080 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a05      	ldr	r2, [pc, #20]	; (80080a0 <shci_register_io_bus+0x20>)
 800808c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a04      	ldr	r2, [pc, #16]	; (80080a4 <shci_register_io_bus+0x24>)
 8008092:	611a      	str	r2, [r3, #16]

  return;
 8008094:	bf00      	nop
}
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr
 80080a0:	0800823d 	.word	0x0800823d
 80080a4:	08008291 	.word	0x08008291

080080a8 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80080ac:	f001 f94a 	bl	8009344 <HW_IPCC_Enable>

  return;
 80080b0:	bf00      	nop
}
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <TL_Init>:


void TL_Init( void )
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80080b8:	4b10      	ldr	r3, [pc, #64]	; (80080fc <TL_Init+0x48>)
 80080ba:	4a11      	ldr	r2, [pc, #68]	; (8008100 <TL_Init+0x4c>)
 80080bc:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80080be:	4b0f      	ldr	r3, [pc, #60]	; (80080fc <TL_Init+0x48>)
 80080c0:	4a10      	ldr	r2, [pc, #64]	; (8008104 <TL_Init+0x50>)
 80080c2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80080c4:	4b0d      	ldr	r3, [pc, #52]	; (80080fc <TL_Init+0x48>)
 80080c6:	4a10      	ldr	r2, [pc, #64]	; (8008108 <TL_Init+0x54>)
 80080c8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80080ca:	4b0c      	ldr	r3, [pc, #48]	; (80080fc <TL_Init+0x48>)
 80080cc:	4a0f      	ldr	r2, [pc, #60]	; (800810c <TL_Init+0x58>)
 80080ce:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80080d0:	4b0a      	ldr	r3, [pc, #40]	; (80080fc <TL_Init+0x48>)
 80080d2:	4a0f      	ldr	r2, [pc, #60]	; (8008110 <TL_Init+0x5c>)
 80080d4:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80080d6:	4b09      	ldr	r3, [pc, #36]	; (80080fc <TL_Init+0x48>)
 80080d8:	4a0e      	ldr	r2, [pc, #56]	; (8008114 <TL_Init+0x60>)
 80080da:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80080dc:	4b07      	ldr	r3, [pc, #28]	; (80080fc <TL_Init+0x48>)
 80080de:	4a0e      	ldr	r2, [pc, #56]	; (8008118 <TL_Init+0x64>)
 80080e0:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80080e2:	4b06      	ldr	r3, [pc, #24]	; (80080fc <TL_Init+0x48>)
 80080e4:	4a0d      	ldr	r2, [pc, #52]	; (800811c <TL_Init+0x68>)
 80080e6:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80080e8:	4b04      	ldr	r3, [pc, #16]	; (80080fc <TL_Init+0x48>)
 80080ea:	4a0d      	ldr	r2, [pc, #52]	; (8008120 <TL_Init+0x6c>)
 80080ec:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80080ee:	4b03      	ldr	r3, [pc, #12]	; (80080fc <TL_Init+0x48>)
 80080f0:	4a0c      	ldr	r2, [pc, #48]	; (8008124 <TL_Init+0x70>)
 80080f2:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80080f4:	f001 f93a 	bl	800936c <HW_IPCC_Init>

  return;
 80080f8:	bf00      	nop
}
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	20030000 	.word	0x20030000
 8008100:	20030028 	.word	0x20030028
 8008104:	20030048 	.word	0x20030048
 8008108:	20030058 	.word	0x20030058
 800810c:	20030064 	.word	0x20030064
 8008110:	2003006c 	.word	0x2003006c
 8008114:	20030074 	.word	0x20030074
 8008118:	2003007c 	.word	0x2003007c
 800811c:	20030098 	.word	0x20030098
 8008120:	2003009c 	.word	0x2003009c
 8008124:	200300a8 	.word	0x200300a8

08008128 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8008134:	4811      	ldr	r0, [pc, #68]	; (800817c <TL_BLE_Init+0x54>)
 8008136:	f000 fa27 	bl	8008588 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800813a:	4b11      	ldr	r3, [pc, #68]	; (8008180 <TL_BLE_Init+0x58>)
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	689a      	ldr	r2, [r3, #8]
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	68da      	ldr	r2, [r3, #12]
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	4a0c      	ldr	r2, [pc, #48]	; (8008184 <TL_BLE_Init+0x5c>)
 8008154:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	4a08      	ldr	r2, [pc, #32]	; (800817c <TL_BLE_Init+0x54>)
 800815a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800815c:	f001 f91c 	bl	8009398 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a08      	ldr	r2, [pc, #32]	; (8008188 <TL_BLE_Init+0x60>)
 8008166:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	4a07      	ldr	r2, [pc, #28]	; (800818c <TL_BLE_Init+0x64>)
 800816e:	6013      	str	r3, [r2, #0]

  return 0;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3710      	adds	r7, #16
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	200300c4 	.word	0x200300c4
 8008180:	20030000 	.word	0x20030000
 8008184:	20030a48 	.word	0x20030a48
 8008188:	200007cc 	.word	0x200007cc
 800818c:	200007d0 	.word	0x200007d0

08008190 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	460b      	mov	r3, r1
 800819a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800819c:	4b09      	ldr	r3, [pc, #36]	; (80081c4 <TL_BLE_SendCmd+0x34>)
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2201      	movs	r2, #1
 80081a4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80081a6:	4b07      	ldr	r3, [pc, #28]	; (80081c4 <TL_BLE_SendCmd+0x34>)
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4619      	mov	r1, r3
 80081ae:	2001      	movs	r0, #1
 80081b0:	f000 f96c 	bl	800848c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80081b4:	f001 f8fa 	bl	80093ac <HW_IPCC_BLE_SendCmd>

  return 0;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	20030000 	.word	0x20030000

080081c8 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80081ce:	e01c      	b.n	800820a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80081d0:	1d3b      	adds	r3, r7, #4
 80081d2:	4619      	mov	r1, r3
 80081d4:	4812      	ldr	r0, [pc, #72]	; (8008220 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80081d6:	f000 fa76 	bl	80086c6 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	7a5b      	ldrb	r3, [r3, #9]
 80081de:	2b0f      	cmp	r3, #15
 80081e0:	d003      	beq.n	80081ea <HW_IPCC_BLE_RxEvtNot+0x22>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	7a5b      	ldrb	r3, [r3, #9]
 80081e6:	2b0e      	cmp	r3, #14
 80081e8:	d105      	bne.n	80081f6 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4619      	mov	r1, r3
 80081ee:	2002      	movs	r0, #2
 80081f0:	f000 f94c 	bl	800848c <OutputDbgTrace>
 80081f4:	e004      	b.n	8008200 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4619      	mov	r1, r3
 80081fa:	2003      	movs	r0, #3
 80081fc:	f000 f946 	bl	800848c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8008200:	4b08      	ldr	r3, [pc, #32]	; (8008224 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	4610      	mov	r0, r2
 8008208:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800820a:	4805      	ldr	r0, [pc, #20]	; (8008220 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800820c:	f000 f9cc 	bl	80085a8 <LST_is_empty>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d0dc      	beq.n	80081d0 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8008216:	bf00      	nop
}
 8008218:	3708      	adds	r7, #8
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	200300c4 	.word	0x200300c4
 8008224:	200007cc 	.word	0x200007cc

08008228 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800822c:	4b02      	ldr	r3, [pc, #8]	; (8008238 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4798      	blx	r3

  return;
 8008232:	bf00      	nop
}
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	200007d0 	.word	0x200007d0

0800823c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008248:	480d      	ldr	r0, [pc, #52]	; (8008280 <TL_SYS_Init+0x44>)
 800824a:	f000 f99d 	bl	8008588 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800824e:	4b0d      	ldr	r3, [pc, #52]	; (8008284 <TL_SYS_Init+0x48>)
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	689a      	ldr	r2, [r3, #8]
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	4a08      	ldr	r2, [pc, #32]	; (8008280 <TL_SYS_Init+0x44>)
 8008260:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8008262:	f001 f8c5 	bl	80093f0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a07      	ldr	r2, [pc, #28]	; (8008288 <TL_SYS_Init+0x4c>)
 800826c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	4a06      	ldr	r2, [pc, #24]	; (800828c <TL_SYS_Init+0x50>)
 8008274:	6013      	str	r3, [r2, #0]

  return 0;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	200300cc 	.word	0x200300cc
 8008284:	20030000 	.word	0x20030000
 8008288:	200007d4 	.word	0x200007d4
 800828c:	200007d8 	.word	0x200007d8

08008290 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	460b      	mov	r3, r1
 800829a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800829c:	4b09      	ldr	r3, [pc, #36]	; (80082c4 <TL_SYS_SendCmd+0x34>)
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2210      	movs	r2, #16
 80082a4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80082a6:	4b07      	ldr	r3, [pc, #28]	; (80082c4 <TL_SYS_SendCmd+0x34>)
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4619      	mov	r1, r3
 80082ae:	2004      	movs	r0, #4
 80082b0:	f000 f8ec 	bl	800848c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80082b4:	f001 f8a6 	bl	8009404 <HW_IPCC_SYS_SendCmd>

  return 0;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	20030000 	.word	0x20030000

080082c8 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80082cc:	4b07      	ldr	r3, [pc, #28]	; (80082ec <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4619      	mov	r1, r3
 80082d4:	2005      	movs	r0, #5
 80082d6:	f000 f8d9 	bl	800848c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80082da:	4b05      	ldr	r3, [pc, #20]	; (80082f0 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a03      	ldr	r2, [pc, #12]	; (80082ec <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80082e0:	68d2      	ldr	r2, [r2, #12]
 80082e2:	6812      	ldr	r2, [r2, #0]
 80082e4:	4610      	mov	r0, r2
 80082e6:	4798      	blx	r3

  return;
 80082e8:	bf00      	nop
}
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	20030000 	.word	0x20030000
 80082f0:	200007d4 	.word	0x200007d4

080082f4 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80082fa:	e00e      	b.n	800831a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80082fc:	1d3b      	adds	r3, r7, #4
 80082fe:	4619      	mov	r1, r3
 8008300:	480b      	ldr	r0, [pc, #44]	; (8008330 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008302:	f000 f9e0 	bl	80086c6 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4619      	mov	r1, r3
 800830a:	2006      	movs	r0, #6
 800830c:	f000 f8be 	bl	800848c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008310:	4b08      	ldr	r3, [pc, #32]	; (8008334 <HW_IPCC_SYS_EvtNot+0x40>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	4610      	mov	r0, r2
 8008318:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800831a:	4805      	ldr	r0, [pc, #20]	; (8008330 <HW_IPCC_SYS_EvtNot+0x3c>)
 800831c:	f000 f944 	bl	80085a8 <LST_is_empty>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d0ea      	beq.n	80082fc <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8008326:	bf00      	nop
}
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	200300cc 	.word	0x200300cc
 8008334:	200007d8 	.word	0x200007d8

08008338 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008340:	4817      	ldr	r0, [pc, #92]	; (80083a0 <TL_MM_Init+0x68>)
 8008342:	f000 f921 	bl	8008588 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8008346:	4817      	ldr	r0, [pc, #92]	; (80083a4 <TL_MM_Init+0x6c>)
 8008348:	f000 f91e 	bl	8008588 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800834c:	4b16      	ldr	r3, [pc, #88]	; (80083a8 <TL_MM_Init+0x70>)
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	4a16      	ldr	r2, [pc, #88]	; (80083ac <TL_MM_Init+0x74>)
 8008352:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8008354:	4b15      	ldr	r3, [pc, #84]	; (80083ac <TL_MM_Init+0x74>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	6892      	ldr	r2, [r2, #8]
 800835c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800835e:	4b13      	ldr	r3, [pc, #76]	; (80083ac <TL_MM_Init+0x74>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	68d2      	ldr	r2, [r2, #12]
 8008366:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8008368:	4b10      	ldr	r3, [pc, #64]	; (80083ac <TL_MM_Init+0x74>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a0c      	ldr	r2, [pc, #48]	; (80083a0 <TL_MM_Init+0x68>)
 800836e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008370:	4b0e      	ldr	r3, [pc, #56]	; (80083ac <TL_MM_Init+0x74>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	6812      	ldr	r2, [r2, #0]
 8008378:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800837a:	4b0c      	ldr	r3, [pc, #48]	; (80083ac <TL_MM_Init+0x74>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	6852      	ldr	r2, [r2, #4]
 8008382:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8008384:	4b09      	ldr	r3, [pc, #36]	; (80083ac <TL_MM_Init+0x74>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	6912      	ldr	r2, [r2, #16]
 800838c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800838e:	4b07      	ldr	r3, [pc, #28]	; (80083ac <TL_MM_Init+0x74>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	6952      	ldr	r2, [r2, #20]
 8008396:	619a      	str	r2, [r3, #24]

  return;
 8008398:	bf00      	nop
}
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	200300b4 	.word	0x200300b4
 80083a4:	200007c4 	.word	0x200007c4
 80083a8:	20030000 	.word	0x20030000
 80083ac:	200007dc 	.word	0x200007dc

080083b0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80083b8:	6879      	ldr	r1, [r7, #4]
 80083ba:	4807      	ldr	r0, [pc, #28]	; (80083d8 <TL_MM_EvtDone+0x28>)
 80083bc:	f000 f93c 	bl	8008638 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80083c0:	6879      	ldr	r1, [r7, #4]
 80083c2:	2000      	movs	r0, #0
 80083c4:	f000 f862 	bl	800848c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80083c8:	4804      	ldr	r0, [pc, #16]	; (80083dc <TL_MM_EvtDone+0x2c>)
 80083ca:	f001 f841 	bl	8009450 <HW_IPCC_MM_SendFreeBuf>

  return;
 80083ce:	bf00      	nop
}
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	200007c4 	.word	0x200007c4
 80083dc:	080083e1 	.word	0x080083e1

080083e0 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80083e6:	e00c      	b.n	8008402 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80083e8:	1d3b      	adds	r3, r7, #4
 80083ea:	4619      	mov	r1, r3
 80083ec:	480a      	ldr	r0, [pc, #40]	; (8008418 <SendFreeBuf+0x38>)
 80083ee:	f000 f96a 	bl	80086c6 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80083f2:	4b0a      	ldr	r3, [pc, #40]	; (800841c <SendFreeBuf+0x3c>)
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	4611      	mov	r1, r2
 80083fc:	4618      	mov	r0, r3
 80083fe:	f000 f91b 	bl	8008638 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008402:	4805      	ldr	r0, [pc, #20]	; (8008418 <SendFreeBuf+0x38>)
 8008404:	f000 f8d0 	bl	80085a8 <LST_is_empty>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d0ec      	beq.n	80083e8 <SendFreeBuf+0x8>
  }

  return;
 800840e:	bf00      	nop
}
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	200007c4 	.word	0x200007c4
 800841c:	20030000 	.word	0x20030000

08008420 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8008424:	4805      	ldr	r0, [pc, #20]	; (800843c <TL_TRACES_Init+0x1c>)
 8008426:	f000 f8af 	bl	8008588 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800842a:	4b05      	ldr	r3, [pc, #20]	; (8008440 <TL_TRACES_Init+0x20>)
 800842c:	695b      	ldr	r3, [r3, #20]
 800842e:	4a03      	ldr	r2, [pc, #12]	; (800843c <TL_TRACES_Init+0x1c>)
 8008430:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8008432:	f001 f843 	bl	80094bc <HW_IPCC_TRACES_Init>

  return;
 8008436:	bf00      	nop
}
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	200300bc 	.word	0x200300bc
 8008440:	20030000 	.word	0x20030000

08008444 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800844a:	e008      	b.n	800845e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800844c:	1d3b      	adds	r3, r7, #4
 800844e:	4619      	mov	r1, r3
 8008450:	4808      	ldr	r0, [pc, #32]	; (8008474 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008452:	f000 f938 	bl	80086c6 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4618      	mov	r0, r3
 800845a:	f000 f80d 	bl	8008478 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800845e:	4805      	ldr	r0, [pc, #20]	; (8008474 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008460:	f000 f8a2 	bl	80085a8 <LST_is_empty>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d0f0      	beq.n	800844c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800846a:	bf00      	nop
}
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	200300bc 	.word	0x200300bc

08008478 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8008480:	bf00      	nop
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	4603      	mov	r3, r0
 8008494:	6039      	str	r1, [r7, #0]
 8008496:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8008498:	79fb      	ldrb	r3, [r7, #7]
 800849a:	2b06      	cmp	r3, #6
 800849c:	d845      	bhi.n	800852a <OutputDbgTrace+0x9e>
 800849e:	a201      	add	r2, pc, #4	; (adr r2, 80084a4 <OutputDbgTrace+0x18>)
 80084a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a4:	080084c1 	.word	0x080084c1
 80084a8:	080084e5 	.word	0x080084e5
 80084ac:	080084eb 	.word	0x080084eb
 80084b0:	080084ff 	.word	0x080084ff
 80084b4:	0800850b 	.word	0x0800850b
 80084b8:	08008511 	.word	0x08008511
 80084bc:	0800851f 	.word	0x0800851f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	7a5b      	ldrb	r3, [r3, #9]
 80084c8:	2bff      	cmp	r3, #255	; 0xff
 80084ca:	d005      	beq.n	80084d8 <OutputDbgTrace+0x4c>
 80084cc:	2bff      	cmp	r3, #255	; 0xff
 80084ce:	dc05      	bgt.n	80084dc <OutputDbgTrace+0x50>
 80084d0:	2b0e      	cmp	r3, #14
 80084d2:	d005      	beq.n	80084e0 <OutputDbgTrace+0x54>
 80084d4:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80084d6:	e001      	b.n	80084dc <OutputDbgTrace+0x50>
          break;
 80084d8:	bf00      	nop
 80084da:	e027      	b.n	800852c <OutputDbgTrace+0xa0>
          break;
 80084dc:	bf00      	nop
 80084de:	e025      	b.n	800852c <OutputDbgTrace+0xa0>
          break;
 80084e0:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80084e2:	e023      	b.n	800852c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80084e8:	e020      	b.n	800852c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	7a5b      	ldrb	r3, [r3, #9]
 80084f2:	2b0e      	cmp	r3, #14
 80084f4:	d001      	beq.n	80084fa <OutputDbgTrace+0x6e>
 80084f6:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80084f8:	e000      	b.n	80084fc <OutputDbgTrace+0x70>
          break;
 80084fa:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80084fc:	e016      	b.n	800852c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	7a5b      	ldrb	r3, [r3, #9]
 8008506:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008508:	e010      	b.n	800852c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800850e:	e00d      	b.n	800852c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	7a5b      	ldrb	r3, [r3, #9]
 8008518:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800851a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800851c:	e006      	b.n	800852c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	7a5b      	ldrb	r3, [r3, #9]
 8008526:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008528:	e000      	b.n	800852c <OutputDbgTrace+0xa0>

    default:
      break;
 800852a:	bf00      	nop
  }

  return;
 800852c:	bf00      	nop
}
 800852e:	3714      	adds	r7, #20
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	4603      	mov	r3, r0
 8008540:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8008542:	4b0f      	ldr	r3, [pc, #60]	; (8008580 <OTP_Read+0x48>)
 8008544:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008546:	e002      	b.n	800854e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	3b08      	subs	r3, #8
 800854c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	3307      	adds	r3, #7
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	79fa      	ldrb	r2, [r7, #7]
 8008556:	429a      	cmp	r2, r3
 8008558:	d003      	beq.n	8008562 <OTP_Read+0x2a>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	4a09      	ldr	r2, [pc, #36]	; (8008584 <OTP_Read+0x4c>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d1f2      	bne.n	8008548 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	3307      	adds	r3, #7
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	79fa      	ldrb	r2, [r7, #7]
 800856a:	429a      	cmp	r2, r3
 800856c:	d001      	beq.n	8008572 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800856e:	2300      	movs	r3, #0
 8008570:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8008572:	68fb      	ldr	r3, [r7, #12]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr
 8008580:	1fff73f8 	.word	0x1fff73f8
 8008584:	1fff7000 	.word	0x1fff7000

08008588 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	605a      	str	r2, [r3, #4]
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b087      	sub	sp, #28
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085b0:	f3ef 8310 	mrs	r3, PRIMASK
 80085b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80085b6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80085b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80085ba:	b672      	cpsid	i
}
 80085bc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d102      	bne.n	80085ce <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80085c8:	2301      	movs	r3, #1
 80085ca:	75fb      	strb	r3, [r7, #23]
 80085cc:	e001      	b.n	80085d2 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80085ce:	2300      	movs	r3, #0
 80085d0:	75fb      	strb	r3, [r7, #23]
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	f383 8810 	msr	PRIMASK, r3
}
 80085dc:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80085de:	7dfb      	ldrb	r3, [r7, #23]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	371c      	adds	r7, #28
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b087      	sub	sp, #28
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085f6:	f3ef 8310 	mrs	r3, PRIMASK
 80085fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80085fc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80085fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008600:	b672      	cpsid	i
}
 8008602:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	683a      	ldr	r2, [r7, #0]
 8008616:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	683a      	ldr	r2, [r7, #0]
 800861e:	605a      	str	r2, [r3, #4]
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	f383 8810 	msr	PRIMASK, r3
}
 800862a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800862c:	bf00      	nop
 800862e:	371c      	adds	r7, #28
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8008638:	b480      	push	{r7}
 800863a:	b087      	sub	sp, #28
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008642:	f3ef 8310 	mrs	r3, PRIMASK
 8008646:	60fb      	str	r3, [r7, #12]
  return(result);
 8008648:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800864a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800864c:	b672      	cpsid	i
}
 800864e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	685a      	ldr	r2, [r3, #4]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	683a      	ldr	r2, [r7, #0]
 8008662:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	683a      	ldr	r2, [r7, #0]
 800866a:	601a      	str	r2, [r3, #0]
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	f383 8810 	msr	PRIMASK, r3
}
 8008676:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008678:	bf00      	nop
 800867a:	371c      	adds	r7, #28
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8008684:	b480      	push	{r7}
 8008686:	b087      	sub	sp, #28
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800868c:	f3ef 8310 	mrs	r3, PRIMASK
 8008690:	60fb      	str	r3, [r7, #12]
  return(result);
 8008692:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008694:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008696:	b672      	cpsid	i
}
 8008698:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	6812      	ldr	r2, [r2, #0]
 80086a2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	6852      	ldr	r2, [r2, #4]
 80086ac:	605a      	str	r2, [r3, #4]
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	f383 8810 	msr	PRIMASK, r3
}
 80086b8:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80086ba:	bf00      	nop
 80086bc:	371c      	adds	r7, #28
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b086      	sub	sp, #24
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086d0:	f3ef 8310 	mrs	r3, PRIMASK
 80086d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80086d6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80086d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80086da:	b672      	cpsid	i
}
 80086dc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7ff ffca 	bl	8008684 <LST_remove_node>
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	f383 8810 	msr	PRIMASK, r3
}
 80086fa:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80086fc:	bf00      	nop
 80086fe:	3718      	adds	r7, #24
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8008704:	b480      	push	{r7}
 8008706:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8008708:	4b03      	ldr	r3, [pc, #12]	; (8008718 <LL_FLASH_GetUDN+0x14>)
 800870a:	681b      	ldr	r3, [r3, #0]
}
 800870c:	4618      	mov	r0, r3
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	1fff7580 	.word	0x1fff7580

0800871c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800871c:	b480      	push	{r7}
 800871e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8008720:	4b03      	ldr	r3, [pc, #12]	; (8008730 <LL_FLASH_GetDeviceID+0x14>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	b2db      	uxtb	r3, r3
}
 8008726:	4618      	mov	r0, r3
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr
 8008730:	1fff7584 	.word	0x1fff7584

08008734 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8008734:	b480      	push	{r7}
 8008736:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8008738:	4b03      	ldr	r3, [pc, #12]	; (8008748 <LL_FLASH_GetSTCompanyID+0x14>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	0a1b      	lsrs	r3, r3, #8
}
 800873e:	4618      	mov	r0, r3
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr
 8008748:	1fff7584 	.word	0x1fff7584

0800874c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800874c:	b5b0      	push	{r4, r5, r7, lr}
 800874e:	b08e      	sub	sp, #56	; 0x38
 8008750:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

	UTIL_SEQ_RegTask(1 << CFG_TASK_MY_TASK, UTIL_SEQ_RFU, myTask);
 8008752:	4a25      	ldr	r2, [pc, #148]	; (80087e8 <APP_BLE_Init+0x9c>)
 8008754:	2100      	movs	r1, #0
 8008756:	2004      	movs	r0, #4
 8008758:	f000 fff2 	bl	8009740 <UTIL_SEQ_RegTask>
	UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 800875c:	2100      	movs	r1, #0
 800875e:	2004      	movs	r0, #4
 8008760:	f001 f810 	bl	8009784 <UTIL_SEQ_SetTask>

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8008764:	4b21      	ldr	r3, [pc, #132]	; (80087ec <APP_BLE_Init+0xa0>)
 8008766:	1d3c      	adds	r4, r7, #4
 8008768:	461d      	mov	r5, r3
 800876a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800876c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800876e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008772:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008774:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008776:	682b      	ldr	r3, [r5, #0]
 8008778:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800877a:	f000 f8ff 	bl	800897c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800877e:	2101      	movs	r1, #1
 8008780:	2002      	movs	r0, #2
 8008782:	f000 fec3 	bl	800950c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8008786:	4a1a      	ldr	r2, [pc, #104]	; (80087f0 <APP_BLE_Init+0xa4>)
 8008788:	2100      	movs	r1, #0
 800878a:	2002      	movs	r0, #2
 800878c:	f000 ffd8 	bl	8009740 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 8008790:	1d3b      	adds	r3, r7, #4
 8008792:	4618      	mov	r0, r3
 8008794:	f7ff f8cc 	bl	8007930 <SHCI_C2_BLE_Init>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <APP_BLE_Init+0x56>
  {
    Error_Handler();
 800879e:	f7f9 fba3 	bl	8001ee8 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80087a2:	f000 f901 	bl	80089a8 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80087a6:	f7ff f81d 	bl	80077e4 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80087aa:	4b12      	ldr	r3, [pc, #72]	; (80087f4 <APP_BLE_Init+0xa8>)
 80087ac:	2200      	movs	r2, #0
 80087ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80087b2:	4b10      	ldr	r3, [pc, #64]	; (80087f4 <APP_BLE_Init+0xa8>)
 80087b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087b8:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80087ba:	4a0f      	ldr	r2, [pc, #60]	; (80087f8 <APP_BLE_Init+0xac>)
 80087bc:	2100      	movs	r1, #0
 80087be:	2001      	movs	r0, #1
 80087c0:	f000 ffbe 	bl	8009740 <UTIL_SEQ_RegTask>
  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 80087c4:	2006      	movs	r0, #6
 80087c6:	f7fe fe80 	bl	80074ca <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 80087ca:	f000 facf 	bl	8008d6c <Custom_APP_Init>
/* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80087ce:	4b09      	ldr	r3, [pc, #36]	; (80087f4 <APP_BLE_Init+0xa8>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80087d4:	4b07      	ldr	r3, [pc, #28]	; (80087f4 <APP_BLE_Init+0xa8>)
 80087d6:	2200      	movs	r2, #0
 80087d8:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 80087da:	2001      	movs	r0, #1
 80087dc:	f000 f97e 	bl	8008adc <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 80087e0:	bf00      	nop
}
 80087e2:	3738      	adds	r7, #56	; 0x38
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bdb0      	pop	{r4, r5, r7, pc}
 80087e8:	08008cad 	.word	0x08008cad
 80087ec:	0800a37c 	.word	0x0800a37c
 80087f0:	08007b4d 	.word	0x08007b4d
 80087f4:	2000017c 	.word	0x2000017c
 80087f8:	08008bc5 	.word	0x08008bc5

080087fc <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b08a      	sub	sp, #40	; 0x28
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	3301      	adds	r3, #1
 8008808:	627b      	str	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 800880a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	2bff      	cmp	r3, #255	; 0xff
 8008810:	d053      	beq.n	80088ba <SVCCTL_App_Notification+0xbe>
 8008812:	2bff      	cmp	r3, #255	; 0xff
 8008814:	f300 80a3 	bgt.w	800895e <SVCCTL_App_Notification+0x162>
 8008818:	2b05      	cmp	r3, #5
 800881a:	d002      	beq.n	8008822 <SVCCTL_App_Notification+0x26>
 800881c:	2b3e      	cmp	r3, #62	; 0x3e
 800881e:	d020      	beq.n	8008862 <SVCCTL_App_Notification+0x66>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8008820:	e09d      	b.n	800895e <SVCCTL_App_Notification+0x162>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8008822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008824:	3302      	adds	r3, #2
 8008826:	60bb      	str	r3, [r7, #8]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800882e:	b29a      	uxth	r2, r3
 8008830:	4b4f      	ldr	r3, [pc, #316]	; (8008970 <SVCCTL_App_Notification+0x174>)
 8008832:	8adb      	ldrh	r3, [r3, #22]
 8008834:	429a      	cmp	r2, r3
 8008836:	d106      	bne.n	8008846 <SVCCTL_App_Notification+0x4a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8008838:	4b4d      	ldr	r3, [pc, #308]	; (8008970 <SVCCTL_App_Notification+0x174>)
 800883a:	2200      	movs	r2, #0
 800883c:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800883e:	4b4c      	ldr	r3, [pc, #304]	; (8008970 <SVCCTL_App_Notification+0x174>)
 8008840:	2200      	movs	r2, #0
 8008842:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8008846:	2001      	movs	r0, #1
 8008848:	f000 f948 	bl	8008adc <Adv_Request>
      handleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800884c:	4b49      	ldr	r3, [pc, #292]	; (8008974 <SVCCTL_App_Notification+0x178>)
 800884e:	2201      	movs	r2, #1
 8008850:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008852:	4b47      	ldr	r3, [pc, #284]	; (8008970 <SVCCTL_App_Notification+0x174>)
 8008854:	8ada      	ldrh	r2, [r3, #22]
 8008856:	4b47      	ldr	r3, [pc, #284]	; (8008974 <SVCCTL_App_Notification+0x178>)
 8008858:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&handleNotification);
 800885a:	4846      	ldr	r0, [pc, #280]	; (8008974 <SVCCTL_App_Notification+0x178>)
 800885c:	f000 fa72 	bl	8008d44 <Custom_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8008860:	e080      	b.n	8008964 <SVCCTL_App_Notification+0x168>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8008862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008864:	3302      	adds	r3, #2
 8008866:	613b      	str	r3, [r7, #16]
      switch (meta_evt->subevent)
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d001      	beq.n	8008874 <SVCCTL_App_Notification+0x78>
 8008870:	2b03      	cmp	r3, #3
          break;
 8008872:	e021      	b.n	80088b8 <SVCCTL_App_Notification+0xbc>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	3301      	adds	r3, #1
 8008878:	60fb      	str	r3, [r7, #12]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800887a:	4b3d      	ldr	r3, [pc, #244]	; (8008970 <SVCCTL_App_Notification+0x174>)
 800887c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008880:	2b04      	cmp	r3, #4
 8008882:	d104      	bne.n	800888e <SVCCTL_App_Notification+0x92>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8008884:	4b3a      	ldr	r3, [pc, #232]	; (8008970 <SVCCTL_App_Notification+0x174>)
 8008886:	2206      	movs	r2, #6
 8008888:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800888c:	e003      	b.n	8008896 <SVCCTL_App_Notification+0x9a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800888e:	4b38      	ldr	r3, [pc, #224]	; (8008970 <SVCCTL_App_Notification+0x174>)
 8008890:	2205      	movs	r2, #5
 8008892:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800889c:	b29a      	uxth	r2, r3
 800889e:	4b34      	ldr	r3, [pc, #208]	; (8008970 <SVCCTL_App_Notification+0x174>)
 80088a0:	82da      	strh	r2, [r3, #22]
          handleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 80088a2:	4b34      	ldr	r3, [pc, #208]	; (8008974 <SVCCTL_App_Notification+0x178>)
 80088a4:	2200      	movs	r2, #0
 80088a6:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80088a8:	4b31      	ldr	r3, [pc, #196]	; (8008970 <SVCCTL_App_Notification+0x174>)
 80088aa:	8ada      	ldrh	r2, [r3, #22]
 80088ac:	4b31      	ldr	r3, [pc, #196]	; (8008974 <SVCCTL_App_Notification+0x178>)
 80088ae:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&handleNotification);
 80088b0:	4830      	ldr	r0, [pc, #192]	; (8008974 <SVCCTL_App_Notification+0x178>)
 80088b2:	f000 fa47 	bl	8008d44 <Custom_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80088b6:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 80088b8:	e054      	b.n	8008964 <SVCCTL_App_Notification+0x168>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80088ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088bc:	3302      	adds	r3, #2
 80088be:	623b      	str	r3, [r7, #32]
      switch (blecore_evt->ecode)
 80088c0:	6a3b      	ldr	r3, [r7, #32]
 80088c2:	881b      	ldrh	r3, [r3, #0]
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088ca:	d042      	beq.n	8008952 <SVCCTL_App_Notification+0x156>
 80088cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088d0:	dc47      	bgt.n	8008962 <SVCCTL_App_Notification+0x166>
 80088d2:	2b04      	cmp	r3, #4
 80088d4:	d03f      	beq.n	8008956 <SVCCTL_App_Notification+0x15a>
 80088d6:	2b04      	cmp	r3, #4
 80088d8:	db43      	blt.n	8008962 <SVCCTL_App_Notification+0x166>
 80088da:	f240 420a 	movw	r2, #1034	; 0x40a
 80088de:	4293      	cmp	r3, r2
 80088e0:	dc3f      	bgt.n	8008962 <SVCCTL_App_Notification+0x166>
 80088e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088e6:	dd3c      	ble.n	8008962 <SVCCTL_App_Notification+0x166>
 80088e8:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 80088ec:	2b09      	cmp	r3, #9
 80088ee:	d838      	bhi.n	8008962 <SVCCTL_App_Notification+0x166>
 80088f0:	a201      	add	r2, pc, #4	; (adr r2, 80088f8 <SVCCTL_App_Notification+0xfc>)
 80088f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f6:	bf00      	nop
 80088f8:	0800894b 	.word	0x0800894b
 80088fc:	08008921 	.word	0x08008921
 8008900:	08008963 	.word	0x08008963
 8008904:	08008963 	.word	0x08008963
 8008908:	08008963 	.word	0x08008963
 800890c:	08008963 	.word	0x08008963
 8008910:	0800895b 	.word	0x0800895b
 8008914:	08008963 	.word	0x08008963
 8008918:	0800892f 	.word	0x0800892f
 800891c:	0800895b 	.word	0x0800895b
            aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8008920:	4b13      	ldr	r3, [pc, #76]	; (8008970 <SVCCTL_App_Notification+0x174>)
 8008922:	8adb      	ldrh	r3, [r3, #22]
 8008924:	4914      	ldr	r1, [pc, #80]	; (8008978 <SVCCTL_App_Notification+0x17c>)
 8008926:	4618      	mov	r0, r3
 8008928:	f7fe f826 	bl	8006978 <aci_gap_pass_key_resp>
        break;
 800892c:	e016      	b.n	800895c <SVCCTL_App_Notification+0x160>
            evt_numeric_value = (aci_gap_numeric_comparison_value_event_rp0 *)blecore_evt->data;
 800892e:	6a3b      	ldr	r3, [r7, #32]
 8008930:	3302      	adds	r3, #2
 8008932:	61fb      	str	r3, [r7, #28]
            numeric_value = evt_numeric_value->Numeric_Value;
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800893a:	61bb      	str	r3, [r7, #24]
            aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800893c:	4b0c      	ldr	r3, [pc, #48]	; (8008970 <SVCCTL_App_Notification+0x174>)
 800893e:	8adb      	ldrh	r3, [r3, #22]
 8008940:	2101      	movs	r1, #1
 8008942:	4618      	mov	r0, r3
 8008944:	f7fe f9c2 	bl	8006ccc <aci_gap_numeric_comparison_value_confirm_yesno>
        break;
 8008948:	e008      	b.n	800895c <SVCCTL_App_Notification+0x160>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 800894a:	6a3b      	ldr	r3, [r7, #32]
 800894c:	3302      	adds	r3, #2
 800894e:	617b      	str	r3, [r7, #20]
        break;
 8008950:	e004      	b.n	800895c <SVCCTL_App_Notification+0x160>
      break;
 8008952:	bf00      	nop
 8008954:	e005      	b.n	8008962 <SVCCTL_App_Notification+0x166>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8008956:	bf00      	nop
 8008958:	e003      	b.n	8008962 <SVCCTL_App_Notification+0x166>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800895a:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800895c:	e001      	b.n	8008962 <SVCCTL_App_Notification+0x166>
      break;
 800895e:	bf00      	nop
 8008960:	e000      	b.n	8008964 <SVCCTL_App_Notification+0x168>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008962:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8008964:	2301      	movs	r3, #1
}
 8008966:	4618      	mov	r0, r3
 8008968:	3728      	adds	r7, #40	; 0x28
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	2000017c 	.word	0x2000017c
 8008974:	200007e8 	.word	0x200007e8
 8008978:	0001b207 	.word	0x0001b207

0800897c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8008982:	4b06      	ldr	r3, [pc, #24]	; (800899c <Ble_Tl_Init+0x20>)
 8008984:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8008986:	4b06      	ldr	r3, [pc, #24]	; (80089a0 <Ble_Tl_Init+0x24>)
 8008988:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800898a:	463b      	mov	r3, r7
 800898c:	4619      	mov	r1, r3
 800898e:	4805      	ldr	r0, [pc, #20]	; (80089a4 <Ble_Tl_Init+0x28>)
 8008990:	f7ff f8c0 	bl	8007b14 <hci_init>

  return;
 8008994:	bf00      	nop
}
 8008996:	3708      	adds	r7, #8
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	200300d4 	.word	0x200300d4
 80089a0:	08008c75 	.word	0x08008c75
 80089a4:	08008c3d 	.word	0x08008c3d

080089a8 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 80089a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089aa:	b08d      	sub	sp, #52	; 0x34
 80089ac:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 80089ae:	2300      	movs	r3, #0
 80089b0:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 80089b2:	f7fe fdde 	bl	8007572 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 80089b6:	f000 f8c1 	bl	8008b3c <BleGetBdAddress>
 80089ba:	6178      	str	r0, [r7, #20]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80089bc:	697a      	ldr	r2, [r7, #20]
 80089be:	2106      	movs	r1, #6
 80089c0:	2000      	movs	r0, #0
 80089c2:	f7fe fc96 	bl	80072f2 <aci_hal_write_config_data>
#endif

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 80089c6:	4a40      	ldr	r2, [pc, #256]	; (8008ac8 <Ble_Hci_Gap_Gatt_Init+0x120>)
 80089c8:	2110      	movs	r1, #16
 80089ca:	2018      	movs	r0, #24
 80089cc:	f7fe fc91 	bl	80072f2 <aci_hal_write_config_data>

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 80089d0:	4a3e      	ldr	r2, [pc, #248]	; (8008acc <Ble_Hci_Gap_Gatt_Init+0x124>)
 80089d2:	2110      	movs	r1, #16
 80089d4:	2008      	movs	r0, #8
 80089d6:	f7fe fc8c 	bl	80072f2 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80089da:	2118      	movs	r1, #24
 80089dc:	2001      	movs	r0, #1
 80089de:	f7fe fd0d 	bl	80073fc <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 80089e2:	f7fe f9da 	bl	8006d9a <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 80089e6:	2300      	movs	r3, #0
 80089e8:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80089ea:	7cfb      	ldrb	r3, [r7, #19]
 80089ec:	f043 0301 	orr.w	r3, r3, #1
 80089f0:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 80089f2:	7cfb      	ldrb	r3, [r7, #19]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d01d      	beq.n	8008a34 <Ble_Hci_Gap_Gatt_Init+0x8c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 80089f8:	4b35      	ldr	r3, [pc, #212]	; (8008ad0 <Ble_Hci_Gap_Gatt_Init+0x128>)
 80089fa:	60fb      	str	r3, [r7, #12]
    aci_gap_init(role,
 80089fc:	f107 020a 	add.w	r2, r7, #10
 8008a00:	7cf8      	ldrb	r0, [r7, #19]
 8008a02:	1dbb      	adds	r3, r7, #6
 8008a04:	9301      	str	r3, [sp, #4]
 8008a06:	f107 0308 	add.w	r3, r7, #8
 8008a0a:	9300      	str	r3, [sp, #0]
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	2208      	movs	r2, #8
 8008a10:	2100      	movs	r1, #0
 8008a12:	f7fe f818 	bl	8006a46 <aci_gap_init>
                 CFG_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle,
                 &gap_dev_name_char_handle,
                 &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8008a16:	897c      	ldrh	r4, [r7, #10]
 8008a18:	893d      	ldrh	r5, [r7, #8]
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f7f7 fbb0 	bl	8000180 <strlen>
 8008a20:	4603      	mov	r3, r0
 8008a22:	b2da      	uxtb	r2, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	4613      	mov	r3, r2
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f7fe fbb6 	bl	80071a0 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8008a34:	8978      	ldrh	r0, [r7, #10]
 8008a36:	88f9      	ldrh	r1, [r7, #6]
 8008a38:	1d3b      	adds	r3, r7, #4
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	2302      	movs	r3, #2
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f7fe fbae 	bl	80071a0 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8008a44:	2202      	movs	r2, #2
 8008a46:	2102      	movs	r1, #2
 8008a48:	2000      	movs	r0, #0
 8008a4a:	f7fe fdb6 	bl	80075ba <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8008a4e:	4b21      	ldr	r3, [pc, #132]	; (8008ad4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008a50:	2201      	movs	r2, #1
 8008a52:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8008a54:	4b1f      	ldr	r3, [pc, #124]	; (8008ad4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7fd fe75 	bl	8006748 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8008a5e:	4b1d      	ldr	r3, [pc, #116]	; (8008ad4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008a60:	2201      	movs	r2, #1
 8008a62:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8008a64:	4b1b      	ldr	r3, [pc, #108]	; (8008ad4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008a66:	2208      	movs	r2, #8
 8008a68:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8008a6a:	4b1a      	ldr	r3, [pc, #104]	; (8008ad4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008a6c:	2210      	movs	r2, #16
 8008a6e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8008a70:	4b18      	ldr	r3, [pc, #96]	; (8008ad4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008a72:	2200      	movs	r2, #0
 8008a74:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8008a76:	4b17      	ldr	r3, [pc, #92]	; (8008ad4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008a78:	4a17      	ldr	r2, [pc, #92]	; (8008ad8 <Ble_Hci_Gap_Gatt_Init+0x130>)
 8008a7a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8008a7c:	4b15      	ldr	r3, [pc, #84]	; (8008ad4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008a7e:	2200      	movs	r2, #0
 8008a80:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8008a82:	4b14      	ldr	r3, [pc, #80]	; (8008ad4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008a84:	789c      	ldrb	r4, [r3, #2]
 8008a86:	4b13      	ldr	r3, [pc, #76]	; (8008ad4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008a88:	785d      	ldrb	r5, [r3, #1]
 8008a8a:	4b12      	ldr	r3, [pc, #72]	; (8008ad4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008a8c:	791b      	ldrb	r3, [r3, #4]
 8008a8e:	4a11      	ldr	r2, [pc, #68]	; (8008ad4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008a90:	7952      	ldrb	r2, [r2, #5]
 8008a92:	4910      	ldr	r1, [pc, #64]	; (8008ad4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008a94:	78c9      	ldrb	r1, [r1, #3]
 8008a96:	480f      	ldr	r0, [pc, #60]	; (8008ad4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008a98:	6880      	ldr	r0, [r0, #8]
 8008a9a:	2600      	movs	r6, #0
 8008a9c:	9604      	str	r6, [sp, #16]
 8008a9e:	9003      	str	r0, [sp, #12]
 8008aa0:	9102      	str	r1, [sp, #8]
 8008aa2:	9201      	str	r2, [sp, #4]
 8008aa4:	9300      	str	r3, [sp, #0]
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	4629      	mov	r1, r5
 8008aac:	4620      	mov	r0, r4
 8008aae:	f7fd fe9f 	bl	80067f0 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8008ab2:	4b08      	ldr	r3, [pc, #32]	; (8008ad4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008ab4:	789b      	ldrb	r3, [r3, #2]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d001      	beq.n	8008abe <Ble_Hci_Gap_Gatt_Init+0x116>
   {
     aci_gap_configure_whitelist();
 8008aba:	f7fe f8e3 	bl	8006c84 <aci_gap_configure_whitelist>
   }
}
 8008abe:	bf00      	nop
 8008ac0:	371c      	adds	r7, #28
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	0800ae8c 	.word	0x0800ae8c
 8008acc:	0800ae9c 	.word	0x0800ae9c
 8008ad0:	0800a3b0 	.word	0x0800a3b0
 8008ad4:	2000017c 	.word	0x2000017c
 8008ad8:	0001b207 	.word	0x0001b207

08008adc <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b08c      	sub	sp, #48	; 0x30
 8008ae0:	af08      	add	r7, sp, #32
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008ae6:	2392      	movs	r3, #146	; 0x92
 8008ae8:	73fb      	strb	r3, [r7, #15]

    BleApplicationContext.Device_Connection_Status = New_Status;
 8008aea:	4a12      	ldr	r2, [pc, #72]	; (8008b34 <Adv_Request+0x58>)
 8008aec:	79fb      	ldrb	r3, [r7, #7]
 8008aee:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8008af2:	2300      	movs	r3, #0
 8008af4:	9306      	str	r3, [sp, #24]
 8008af6:	2300      	movs	r3, #0
 8008af8:	9305      	str	r3, [sp, #20]
 8008afa:	2300      	movs	r3, #0
 8008afc:	9304      	str	r3, [sp, #16]
 8008afe:	2300      	movs	r3, #0
 8008b00:	9303      	str	r3, [sp, #12]
 8008b02:	2300      	movs	r3, #0
 8008b04:	9302      	str	r3, [sp, #8]
 8008b06:	2300      	movs	r3, #0
 8008b08:	9301      	str	r3, [sp, #4]
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	2300      	movs	r3, #0
 8008b10:	22a0      	movs	r2, #160	; 0xa0
 8008b12:	2180      	movs	r1, #128	; 0x80
 8008b14:	2000      	movs	r0, #0
 8008b16:	f7fd fd1d 	bl	8006554 <aci_gap_set_discoverable>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	73fb      	strb	r3, [r7, #15]
        0,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(ad_data), (uint8_t*) ad_data);
 8008b1e:	4906      	ldr	r1, [pc, #24]	; (8008b38 <Adv_Request+0x5c>)
 8008b20:	2008      	movs	r0, #8
 8008b22:	f7fe f83d 	bl	8006ba0 <aci_gap_update_adv_data>
 8008b26:	4603      	mov	r3, r0
 8008b28:	73fb      	strb	r3, [r7, #15]
    else
    {
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
    }

  return;
 8008b2a:	bf00      	nop
}
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	2000017c 	.word	0x2000017c
 8008b38:	20000018 	.word	0x20000018

08008b3c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b086      	sub	sp, #24
 8008b40:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8008b42:	f7ff fddf 	bl	8008704 <LL_FLASH_GetUDN>
 8008b46:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b4e:	d023      	beq.n	8008b98 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8008b50:	f7ff fdf0 	bl	8008734 <LL_FLASH_GetSTCompanyID>
 8008b54:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8008b56:	f7ff fde1 	bl	800871c <LL_FLASH_GetDeviceID>
 8008b5a:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	4b16      	ldr	r3, [pc, #88]	; (8008bbc <BleGetBdAddress+0x80>)
 8008b62:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	0a1b      	lsrs	r3, r3, #8
 8008b68:	b2da      	uxtb	r2, r3
 8008b6a:	4b14      	ldr	r3, [pc, #80]	; (8008bbc <BleGetBdAddress+0x80>)
 8008b6c:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	4b12      	ldr	r3, [pc, #72]	; (8008bbc <BleGetBdAddress+0x80>)
 8008b74:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	b2da      	uxtb	r2, r3
 8008b7a:	4b10      	ldr	r3, [pc, #64]	; (8008bbc <BleGetBdAddress+0x80>)
 8008b7c:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	0a1b      	lsrs	r3, r3, #8
 8008b82:	b2da      	uxtb	r2, r3
 8008b84:	4b0d      	ldr	r3, [pc, #52]	; (8008bbc <BleGetBdAddress+0x80>)
 8008b86:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	0c1b      	lsrs	r3, r3, #16
 8008b8c:	b2da      	uxtb	r2, r3
 8008b8e:	4b0b      	ldr	r3, [pc, #44]	; (8008bbc <BleGetBdAddress+0x80>)
 8008b90:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8008b92:	4b0a      	ldr	r3, [pc, #40]	; (8008bbc <BleGetBdAddress+0x80>)
 8008b94:	617b      	str	r3, [r7, #20]
 8008b96:	e00b      	b.n	8008bb0 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8008b98:	2000      	movs	r0, #0
 8008b9a:	f7ff fccd 	bl	8008538 <OTP_Read>
 8008b9e:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d002      	beq.n	8008bac <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	617b      	str	r3, [r7, #20]
 8008baa:	e001      	b.n	8008bb0 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8008bac:	4b04      	ldr	r3, [pc, #16]	; (8008bc0 <BleGetBdAddress+0x84>)
 8008bae:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 8008bb0:	697b      	ldr	r3, [r7, #20]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3718      	adds	r7, #24
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	200007e0 	.word	0x200007e0
 8008bc0:	0800ae84 	.word	0x0800ae84

08008bc4 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8008bca:	4b0a      	ldr	r3, [pc, #40]	; (8008bf4 <Adv_Cancel+0x30>)
 8008bcc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008bd0:	2b05      	cmp	r3, #5
 8008bd2:	d00a      	beq.n	8008bea <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 8008bd8:	f7fd fc98 	bl	800650c <aci_gap_set_non_discoverable>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008be0:	4b04      	ldr	r3, [pc, #16]	; (8008bf4 <Adv_Cancel+0x30>)
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 8008be8:	bf00      	nop
 8008bea:	bf00      	nop
}
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	2000017c 	.word	0x2000017c

08008bf8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8008c00:	2100      	movs	r1, #0
 8008c02:	2002      	movs	r0, #2
 8008c04:	f000 fdbe 	bl	8009784 <UTIL_SEQ_SetTask>
  return;
 8008c08:	bf00      	nop
}
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008c18:	2001      	movs	r0, #1
 8008c1a:	f000 fe1f 	bl	800985c <UTIL_SEQ_SetEvt>
  return;
 8008c1e:	bf00      	nop
}
 8008c20:	3708      	adds	r7, #8
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b082      	sub	sp, #8
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008c2e:	2001      	movs	r0, #1
 8008c30:	f000 fe34 	bl	800989c <UTIL_SEQ_WaitEvt>
  return;
 8008c34:	bf00      	nop
}
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	3308      	adds	r3, #8
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7fe fe1a 	bl	8007888 <SVCCTL_UserEvtRx>
 8008c54:	4603      	mov	r3, r0
 8008c56:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8008c58:	7afb      	ldrb	r3, [r7, #11]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d003      	beq.n	8008c66 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2201      	movs	r2, #1
 8008c62:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8008c64:	e003      	b.n	8008c6e <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	701a      	strb	r2, [r3, #0]
  return;
 8008c6c:	bf00      	nop
}
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8008c7e:	79fb      	ldrb	r3, [r7, #7]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d002      	beq.n	8008c8a <BLE_StatusNot+0x16>
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d006      	beq.n	8008c96 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8008c88:	e00b      	b.n	8008ca2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008c8a:	2307      	movs	r3, #7
 8008c8c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	f000 fda4 	bl	80097dc <UTIL_SEQ_PauseTask>
      break;
 8008c94:	e005      	b.n	8008ca2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008c96:	2307      	movs	r3, #7
 8008c98:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f000 fdbe 	bl	800981c <UTIL_SEQ_ResumeTask>
      break;
 8008ca0:	bf00      	nop
  }
  return;
 8008ca2:	bf00      	nop
}
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
	...

08008cac <myTask>:
static void Custom_Mycharnotify_Update_Char(void);
static void Custom_Mycharnotify_Send_Notification(void);

/* USER CODE BEGIN PFP */
	void myTask(void)
	{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	af00      	add	r7, sp, #0

		sprintf(NOTIFY_MSG, "Button Pressed!\r\n");
 8008cb0:	4912      	ldr	r1, [pc, #72]	; (8008cfc <myTask+0x50>)
 8008cb2:	4813      	ldr	r0, [pc, #76]	; (8008d00 <myTask+0x54>)
 8008cb4:	f000 fee2 	bl	8009a7c <siprintf>

		//Read the Button State
		if(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8008cb8:	2110      	movs	r1, #16
 8008cba:	4812      	ldr	r0, [pc, #72]	; (8008d04 <myTask+0x58>)
 8008cbc:	f7fa f96a 	bl	8002f94 <HAL_GPIO_ReadPin>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d114      	bne.n	8008cf0 <myTask+0x44>
		{

			UART_Transmit((uint8_t*)NOTIFY_MSG, strlen(NOTIFY_MSG));
 8008cc6:	480e      	ldr	r0, [pc, #56]	; (8008d00 <myTask+0x54>)
 8008cc8:	f7f7 fa5a 	bl	8000180 <strlen>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	480b      	ldr	r0, [pc, #44]	; (8008d00 <myTask+0x54>)
 8008cd4:	f7f9 f8c2 	bl	8001e5c <UART_Transmit>

			OLED_Transmit_Line2((uint8_t*)NOTIFY_MSG);
 8008cd8:	4809      	ldr	r0, [pc, #36]	; (8008d00 <myTask+0x54>)
 8008cda:	f7f9 f8e9 	bl	8001eb0 <OLED_Transmit_Line2>

			UpdateCharData[0] ^= 0x1;
 8008cde:	4b0a      	ldr	r3, [pc, #40]	; (8008d08 <myTask+0x5c>)
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	f083 0301 	eor.w	r3, r3, #1
 8008ce6:	b2da      	uxtb	r2, r3
 8008ce8:	4b07      	ldr	r3, [pc, #28]	; (8008d08 <myTask+0x5c>)
 8008cea:	701a      	strb	r2, [r3, #0]
			Custom_Mycharnotify_Update_Char();		//Depends on Characteristic long name from CubeMX
 8008cec:	f000 f846 	bl	8008d7c <Custom_Mycharnotify_Update_Char>
		}
		UTIL_SEQ_SetTask(1 << CFG_TASK_MY_TASK, CFG_SCH_PRIO_0);
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	2004      	movs	r0, #4
 8008cf4:	f000 fd46 	bl	8009784 <UTIL_SEQ_SetTask>
	}
 8008cf8:	bf00      	nop
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	0800a3bc 	.word	0x0800a3bc
 8008d00:	200007ec 	.word	0x200007ec
 8008d04:	48000800 	.word	0x48000800
 8008d08:	20000810 	.word	0x20000810

08008d0c <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch(pNotification->Custom_Evt_Opcode)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	2b02      	cmp	r3, #2
 8008d1a:	d006      	beq.n	8008d2a <Custom_STM_App_Notification+0x1e>
 8008d1c:	2b02      	cmp	r3, #2
 8008d1e:	dc06      	bgt.n	8008d2e <Custom_STM_App_Notification+0x22>
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d006      	beq.n	8008d32 <Custom_STM_App_Notification+0x26>
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d006      	beq.n	8008d36 <Custom_STM_App_Notification+0x2a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8008d28:	e001      	b.n	8008d2e <Custom_STM_App_Notification+0x22>
      break;
 8008d2a:	bf00      	nop
 8008d2c:	e004      	b.n	8008d38 <Custom_STM_App_Notification+0x2c>
      break;
 8008d2e:	bf00      	nop
 8008d30:	e002      	b.n	8008d38 <Custom_STM_App_Notification+0x2c>
      break;
 8008d32:	bf00      	nop
 8008d34:	e000      	b.n	8008d38 <Custom_STM_App_Notification+0x2c>
      break;
 8008d36:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8008d38:	bf00      	nop
}
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch(pNotification->Custom_Evt_Opcode)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d002      	beq.n	8008d5a <Custom_APP_Notification+0x16>
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d002      	beq.n	8008d5e <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8008d58:	e002      	b.n	8008d60 <Custom_APP_Notification+0x1c>
      break;
 8008d5a:	bf00      	nop
 8008d5c:	e000      	b.n	8008d60 <Custom_APP_Notification+0x1c>
      break;
 8008d5e:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8008d60:	bf00      	nop
}
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8008d70:	bf00      	nop
}
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
	...

08008d7c <Custom_Mycharnotify_Update_Char>:
 *
 *************************************************************/

  /* LED_SVC */
void Custom_Mycharnotify_Update_Char(void) /* Property Read */
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	af00      	add	r7, sp, #0
  Custom_STM_App_Update_Char(CUSTOM_STM_MYCHARNOTIFY, (uint8_t *)UpdateCharData);
 8008d80:	4902      	ldr	r1, [pc, #8]	; (8008d8c <Custom_Mycharnotify_Update_Char+0x10>)
 8008d82:	2001      	movs	r0, #1
 8008d84:	f000 f930 	bl	8008fe8 <Custom_STM_App_Update_Char>
  /* USER CODE BEGIN Mycharnotify_UC*/

  /* USER CODE END Mycharnotify_UC*/
  return;
 8008d88:	bf00      	nop
}
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	20000810 	.word	0x20000810

08008d90 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b08c      	sub	sp, #48	; 0x30
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	3301      	adds	r3, #1
 8008da2:	62bb      	str	r3, [r7, #40]	; 0x28

  switch(event_pckt->evt)
 8008da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	2bff      	cmp	r3, #255	; 0xff
 8008daa:	d16c      	bne.n	8008e86 <Custom_STM_Event_Handler+0xf6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8008dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dae:	3302      	adds	r3, #2
 8008db0:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blecore_evt->ecode)
 8008db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db4:	881b      	ldrh	r3, [r3, #0]
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	f640 4214 	movw	r2, #3092	; 0xc14
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d05c      	beq.n	8008e7a <Custom_STM_Event_Handler+0xea>
 8008dc0:	f640 4214 	movw	r2, #3092	; 0xc14
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	dc5a      	bgt.n	8008e7e <Custom_STM_Event_Handler+0xee>
 8008dc8:	f640 4201 	movw	r2, #3073	; 0xc01
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d003      	beq.n	8008dd8 <Custom_STM_Event_Handler+0x48>
 8008dd0:	f640 4213 	movw	r2, #3091	; 0xc13
 8008dd4:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8008dd6:	e055      	b.n	8008e84 <Custom_STM_Event_Handler+0xf4>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dda:	3302      	adds	r3, #2
 8008ddc:	623b      	str	r3, [r7, #32]
          if(attribute_modified->Attr_Handle == (CustomContext.CustomMycharnotifyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8008dde:	6a3b      	ldr	r3, [r7, #32]
 8008de0:	885b      	ldrh	r3, [r3, #2]
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	461a      	mov	r2, r3
 8008de6:	4b2b      	ldr	r3, [pc, #172]	; (8008e94 <Custom_STM_Event_Handler+0x104>)
 8008de8:	889b      	ldrh	r3, [r3, #4]
 8008dea:	3302      	adds	r3, #2
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d119      	bne.n	8008e24 <Custom_STM_Event_Handler+0x94>
            return_value = SVCCTL_EvtAckFlowEnable;
 8008df0:	2301      	movs	r3, #1
 8008df2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch(attribute_modified->Attr_Data[0])
 8008df6:	6a3b      	ldr	r3, [r7, #32]
 8008df8:	7a1b      	ldrb	r3, [r3, #8]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d002      	beq.n	8008e04 <Custom_STM_Event_Handler+0x74>
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d008      	beq.n	8008e14 <Custom_STM_Event_Handler+0x84>
              break;
 8008e02:	e039      	b.n	8008e78 <Custom_STM_Event_Handler+0xe8>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_DISABLED_EVT;
 8008e04:	2302      	movs	r3, #2
 8008e06:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8008e08:	f107 030c 	add.w	r3, r7, #12
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7ff ff7d 	bl	8008d0c <Custom_STM_App_Notification>
                break;
 8008e12:	e031      	b.n	8008e78 <Custom_STM_Event_Handler+0xe8>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MYCHARNOTIFY_NOTIFY_ENABLED_EVT;
 8008e14:	2301      	movs	r3, #1
 8008e16:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8008e18:	f107 030c 	add.w	r3, r7, #12
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7ff ff75 	bl	8008d0c <Custom_STM_App_Notification>
                break;
 8008e22:	e029      	b.n	8008e78 <Custom_STM_Event_Handler+0xe8>
          else if(attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8008e24:	6a3b      	ldr	r3, [r7, #32]
 8008e26:	885b      	ldrh	r3, [r3, #2]
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	4b19      	ldr	r3, [pc, #100]	; (8008e94 <Custom_STM_Event_Handler+0x104>)
 8008e2e:	885b      	ldrh	r3, [r3, #2]
 8008e30:	3301      	adds	r3, #1
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d125      	bne.n	8008e82 <Custom_STM_Event_Handler+0xf2>
            return_value = SVCCTL_EvtAckFlowEnable;
 8008e36:	2301      	movs	r3, #1
 8008e38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            uint8_t x = attribute_modified->Attr_Data[0];
 8008e3c:	6a3b      	ldr	r3, [r7, #32]
 8008e3e:	7a1b      	ldrb	r3, [r3, #8]
 8008e40:	77fb      	strb	r3, [r7, #31]
            sprintf(BLE_MSG, "Write Value: %x\r\n", x);
 8008e42:	7ffb      	ldrb	r3, [r7, #31]
 8008e44:	461a      	mov	r2, r3
 8008e46:	4914      	ldr	r1, [pc, #80]	; (8008e98 <Custom_STM_Event_Handler+0x108>)
 8008e48:	4814      	ldr	r0, [pc, #80]	; (8008e9c <Custom_STM_Event_Handler+0x10c>)
 8008e4a:	f000 fe17 	bl	8009a7c <siprintf>
            UART_Transmit((uint8_t*)BLE_MSG, strlen(BLE_MSG));
 8008e4e:	4813      	ldr	r0, [pc, #76]	; (8008e9c <Custom_STM_Event_Handler+0x10c>)
 8008e50:	f7f7 f996 	bl	8000180 <strlen>
 8008e54:	4603      	mov	r3, r0
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	4619      	mov	r1, r3
 8008e5a:	4810      	ldr	r0, [pc, #64]	; (8008e9c <Custom_STM_Event_Handler+0x10c>)
 8008e5c:	f7f8 fffe 	bl	8001e5c <UART_Transmit>
            OLED_Transmit_Line3((uint8_t*)BLE_MSG);
 8008e60:	480e      	ldr	r0, [pc, #56]	; (8008e9c <Custom_STM_Event_Handler+0x10c>)
 8008e62:	f7f9 f833 	bl	8001ecc <OLED_Transmit_Line3>
			if (attribute_modified->Attr_Data[0] == 0x22)
 8008e66:	6a3b      	ldr	r3, [r7, #32]
 8008e68:	7a1b      	ldrb	r3, [r3, #8]
 8008e6a:	2b22      	cmp	r3, #34	; 0x22
 8008e6c:	d109      	bne.n	8008e82 <Custom_STM_Event_Handler+0xf2>
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8008e6e:	2101      	movs	r1, #1
 8008e70:	480b      	ldr	r0, [pc, #44]	; (8008ea0 <Custom_STM_Event_Handler+0x110>)
 8008e72:	f7fa f8bf 	bl	8002ff4 <HAL_GPIO_TogglePin>
          break;
 8008e76:	e004      	b.n	8008e82 <Custom_STM_Event_Handler+0xf2>
 8008e78:	e003      	b.n	8008e82 <Custom_STM_Event_Handler+0xf2>
          break;
 8008e7a:	bf00      	nop
 8008e7c:	e004      	b.n	8008e88 <Custom_STM_Event_Handler+0xf8>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8008e7e:	bf00      	nop
 8008e80:	e002      	b.n	8008e88 <Custom_STM_Event_Handler+0xf8>
          break;
 8008e82:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008e84:	e000      	b.n	8008e88 <Custom_STM_Event_Handler+0xf8>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8008e86:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8008e88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}/* end Custom_STM_Event_Handler */
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3730      	adds	r7, #48	; 0x30
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	20000160 	.word	0x20000160
 8008e98:	0800a3d0 	.word	0x0800a3d0
 8008e9c:	20000908 	.word	0x20000908
 8008ea0:	48000400 	.word	0x48000400

08008ea4 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b08a      	sub	sp, #40	; 0x28
 8008ea8:	af06      	add	r7, sp, #24
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8008eaa:	484b      	ldr	r0, [pc, #300]	; (8008fd8 <SVCCTL_InitCustomSvc+0x134>)
 8008eac:	f7fe fcd2 	bl	8007854 <SVCCTL_RegisterSvcHandler>
   *                                2 for myCharNotify +
   *                                1 for myCharNotify configuration descriptor +
   *                              = 6
   */

  COPY_LED_SVC_UUID(uuid.Char_UUID_128);
 8008eb0:	238f      	movs	r3, #143	; 0x8f
 8008eb2:	703b      	strb	r3, [r7, #0]
 8008eb4:	23e5      	movs	r3, #229	; 0xe5
 8008eb6:	707b      	strb	r3, [r7, #1]
 8008eb8:	23b3      	movs	r3, #179	; 0xb3
 8008eba:	70bb      	strb	r3, [r7, #2]
 8008ebc:	23d5      	movs	r3, #213	; 0xd5
 8008ebe:	70fb      	strb	r3, [r7, #3]
 8008ec0:	232e      	movs	r3, #46	; 0x2e
 8008ec2:	713b      	strb	r3, [r7, #4]
 8008ec4:	237f      	movs	r3, #127	; 0x7f
 8008ec6:	717b      	strb	r3, [r7, #5]
 8008ec8:	234a      	movs	r3, #74	; 0x4a
 8008eca:	71bb      	strb	r3, [r7, #6]
 8008ecc:	2398      	movs	r3, #152	; 0x98
 8008ece:	71fb      	strb	r3, [r7, #7]
 8008ed0:	232a      	movs	r3, #42	; 0x2a
 8008ed2:	723b      	strb	r3, [r7, #8]
 8008ed4:	2348      	movs	r3, #72	; 0x48
 8008ed6:	727b      	strb	r3, [r7, #9]
 8008ed8:	237a      	movs	r3, #122	; 0x7a
 8008eda:	72bb      	strb	r3, [r7, #10]
 8008edc:	23cc      	movs	r3, #204	; 0xcc
 8008ede:	72fb      	strb	r3, [r7, #11]
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	733b      	strb	r3, [r7, #12]
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	737b      	strb	r3, [r7, #13]
 8008ee8:	2300      	movs	r3, #0
 8008eea:	73bb      	strb	r3, [r7, #14]
 8008eec:	2300      	movs	r3, #0
 8008eee:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_service(UUID_TYPE_128,
 8008ef0:	4639      	mov	r1, r7
 8008ef2:	4b3a      	ldr	r3, [pc, #232]	; (8008fdc <SVCCTL_InitCustomSvc+0x138>)
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	2306      	movs	r3, #6
 8008ef8:	2201      	movs	r2, #1
 8008efa:	2002      	movs	r0, #2
 8008efc:	f7fd ff72 	bl	8006de4 <aci_gatt_add_service>
                       &(CustomContext.CustomLed_SvcHdle));

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 8008f00:	2319      	movs	r3, #25
 8008f02:	703b      	strb	r3, [r7, #0]
 8008f04:	23ed      	movs	r3, #237	; 0xed
 8008f06:	707b      	strb	r3, [r7, #1]
 8008f08:	2382      	movs	r3, #130	; 0x82
 8008f0a:	70bb      	strb	r3, [r7, #2]
 8008f0c:	23ae      	movs	r3, #174	; 0xae
 8008f0e:	70fb      	strb	r3, [r7, #3]
 8008f10:	23ed      	movs	r3, #237	; 0xed
 8008f12:	713b      	strb	r3, [r7, #4]
 8008f14:	2321      	movs	r3, #33	; 0x21
 8008f16:	717b      	strb	r3, [r7, #5]
 8008f18:	234c      	movs	r3, #76	; 0x4c
 8008f1a:	71bb      	strb	r3, [r7, #6]
 8008f1c:	239d      	movs	r3, #157	; 0x9d
 8008f1e:	71fb      	strb	r3, [r7, #7]
 8008f20:	2341      	movs	r3, #65	; 0x41
 8008f22:	723b      	strb	r3, [r7, #8]
 8008f24:	2345      	movs	r3, #69	; 0x45
 8008f26:	727b      	strb	r3, [r7, #9]
 8008f28:	2322      	movs	r3, #34	; 0x22
 8008f2a:	72bb      	strb	r3, [r7, #10]
 8008f2c:	238e      	movs	r3, #142	; 0x8e
 8008f2e:	72fb      	strb	r3, [r7, #11]
 8008f30:	2300      	movs	r3, #0
 8008f32:	733b      	strb	r3, [r7, #12]
 8008f34:	2300      	movs	r3, #0
 8008f36:	737b      	strb	r3, [r7, #13]
 8008f38:	2300      	movs	r3, #0
 8008f3a:	73bb      	strb	r3, [r7, #14]
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomLed_SvcHdle,
 8008f40:	4b26      	ldr	r3, [pc, #152]	; (8008fdc <SVCCTL_InitCustomSvc+0x138>)
 8008f42:	8818      	ldrh	r0, [r3, #0]
 8008f44:	2301      	movs	r3, #1
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	463a      	mov	r2, r7
 8008f4a:	4925      	ldr	r1, [pc, #148]	; (8008fe0 <SVCCTL_InitCustomSvc+0x13c>)
 8008f4c:	9105      	str	r1, [sp, #20]
 8008f4e:	2100      	movs	r1, #0
 8008f50:	9104      	str	r1, [sp, #16]
 8008f52:	2110      	movs	r1, #16
 8008f54:	9103      	str	r1, [sp, #12]
 8008f56:	2101      	movs	r1, #1
 8008f58:	9102      	str	r1, [sp, #8]
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	9101      	str	r1, [sp, #4]
 8008f5e:	2108      	movs	r1, #8
 8008f60:	9100      	str	r1, [sp, #0]
 8008f62:	2102      	movs	r1, #2
 8008f64:	f7fe f814 	bl	8006f90 <aci_gatt_add_char>
                    CHAR_VALUE_LEN_CONSTANT,
                    &(CustomContext.CustomMycharwriteHdle));
  /**
   *  myCharNotify
   */
  COPY_MYCHARNOTIFY_UUID(uuid.Char_UUID_128);
 8008f68:	2319      	movs	r3, #25
 8008f6a:	703b      	strb	r3, [r7, #0]
 8008f6c:	23ed      	movs	r3, #237	; 0xed
 8008f6e:	707b      	strb	r3, [r7, #1]
 8008f70:	2382      	movs	r3, #130	; 0x82
 8008f72:	70bb      	strb	r3, [r7, #2]
 8008f74:	23ae      	movs	r3, #174	; 0xae
 8008f76:	70fb      	strb	r3, [r7, #3]
 8008f78:	23ed      	movs	r3, #237	; 0xed
 8008f7a:	713b      	strb	r3, [r7, #4]
 8008f7c:	2321      	movs	r3, #33	; 0x21
 8008f7e:	717b      	strb	r3, [r7, #5]
 8008f80:	234c      	movs	r3, #76	; 0x4c
 8008f82:	71bb      	strb	r3, [r7, #6]
 8008f84:	239d      	movs	r3, #157	; 0x9d
 8008f86:	71fb      	strb	r3, [r7, #7]
 8008f88:	2341      	movs	r3, #65	; 0x41
 8008f8a:	723b      	strb	r3, [r7, #8]
 8008f8c:	2345      	movs	r3, #69	; 0x45
 8008f8e:	727b      	strb	r3, [r7, #9]
 8008f90:	2322      	movs	r3, #34	; 0x22
 8008f92:	72bb      	strb	r3, [r7, #10]
 8008f94:	238e      	movs	r3, #142	; 0x8e
 8008f96:	72fb      	strb	r3, [r7, #11]
 8008f98:	2301      	movs	r3, #1
 8008f9a:	733b      	strb	r3, [r7, #12]
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	737b      	strb	r3, [r7, #13]
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	73bb      	strb	r3, [r7, #14]
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomLed_SvcHdle,
 8008fa8:	4b0c      	ldr	r3, [pc, #48]	; (8008fdc <SVCCTL_InitCustomSvc+0x138>)
 8008faa:	8818      	ldrh	r0, [r3, #0]
 8008fac:	2301      	movs	r3, #1
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	463a      	mov	r2, r7
 8008fb2:	490c      	ldr	r1, [pc, #48]	; (8008fe4 <SVCCTL_InitCustomSvc+0x140>)
 8008fb4:	9105      	str	r1, [sp, #20]
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	9104      	str	r1, [sp, #16]
 8008fba:	2110      	movs	r1, #16
 8008fbc:	9103      	str	r1, [sp, #12]
 8008fbe:	2107      	movs	r1, #7
 8008fc0:	9102      	str	r1, [sp, #8]
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	9101      	str	r1, [sp, #4]
 8008fc6:	2110      	movs	r1, #16
 8008fc8:	9100      	str	r1, [sp, #0]
 8008fca:	2102      	movs	r1, #2
 8008fcc:	f7fd ffe0 	bl	8006f90 <aci_gatt_add_char>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8008fd0:	bf00      	nop
}
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	08008d91 	.word	0x08008d91
 8008fdc:	20000160 	.word	0x20000160
 8008fe0:	20000162 	.word	0x20000162
 8008fe4:	20000164 	.word	0x20000164

08008fe8 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b086      	sub	sp, #24
 8008fec:	af02      	add	r7, sp, #8
 8008fee:	4603      	mov	r3, r0
 8008ff0:	6039      	str	r1, [r7, #0]
 8008ff2:	71fb      	strb	r3, [r7, #7]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8008ff4:	2392      	movs	r3, #146	; 0x92
 8008ff6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch(CharOpcode)
 8008ff8:	79fb      	ldrb	r3, [r7, #7]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d002      	beq.n	8009004 <Custom_STM_App_Update_Char+0x1c>
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d00e      	beq.n	8009020 <Custom_STM_App_Update_Char+0x38>

      /* USER CODE END CUSTOM_STM_Service_1_Char_2*/
      break;

    default:
      break;
 8009002:	e01b      	b.n	800903c <Custom_STM_App_Update_Char+0x54>
      result = aci_gatt_update_char_value(CustomContext.CustomLed_SvcHdle,
 8009004:	4b10      	ldr	r3, [pc, #64]	; (8009048 <Custom_STM_App_Update_Char+0x60>)
 8009006:	8818      	ldrh	r0, [r3, #0]
 8009008:	4b0f      	ldr	r3, [pc, #60]	; (8009048 <Custom_STM_App_Update_Char+0x60>)
 800900a:	8859      	ldrh	r1, [r3, #2]
 800900c:	2201      	movs	r2, #1
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	9300      	str	r3, [sp, #0]
 8009012:	4613      	mov	r3, r2
 8009014:	2200      	movs	r2, #0
 8009016:	f7fe f8c3 	bl	80071a0 <aci_gatt_update_char_value>
 800901a:	4603      	mov	r3, r0
 800901c:	73fb      	strb	r3, [r7, #15]
      break;
 800901e:	e00d      	b.n	800903c <Custom_STM_App_Update_Char+0x54>
      result = aci_gatt_update_char_value(CustomContext.CustomLed_SvcHdle,
 8009020:	4b09      	ldr	r3, [pc, #36]	; (8009048 <Custom_STM_App_Update_Char+0x60>)
 8009022:	8818      	ldrh	r0, [r3, #0]
 8009024:	4b08      	ldr	r3, [pc, #32]	; (8009048 <Custom_STM_App_Update_Char+0x60>)
 8009026:	8899      	ldrh	r1, [r3, #4]
 8009028:	2201      	movs	r2, #1
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	4613      	mov	r3, r2
 8009030:	2200      	movs	r2, #0
 8009032:	f7fe f8b5 	bl	80071a0 <aci_gatt_update_char_value>
 8009036:	4603      	mov	r3, r0
 8009038:	73fb      	strb	r3, [r7, #15]
      break;
 800903a:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return result;
 800903c:	7bfb      	ldrb	r3, [r7, #15]
}
 800903e:	4618      	mov	r0, r3
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	20000160 	.word	0x20000160

0800904c <LL_PWR_EnableBootC2>:
{
 800904c:	b480      	push	{r7}
 800904e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8009050:	4b05      	ldr	r3, [pc, #20]	; (8009068 <LL_PWR_EnableBootC2+0x1c>)
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	4a04      	ldr	r2, [pc, #16]	; (8009068 <LL_PWR_EnableBootC2+0x1c>)
 8009056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800905a:	60d3      	str	r3, [r2, #12]
}
 800905c:	bf00      	nop
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr
 8009066:	bf00      	nop
 8009068:	58000400 	.word	0x58000400

0800906c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8009074:	4b06      	ldr	r3, [pc, #24]	; (8009090 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009076:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800907a:	4905      	ldr	r1, [pc, #20]	; (8009090 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4313      	orrs	r3, r2
 8009080:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8009084:	bf00      	nop
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr
 8009090:	58000800 	.word	0x58000800

08009094 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800909c:	4b05      	ldr	r3, [pc, #20]	; (80090b4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800909e:	6a1a      	ldr	r2, [r3, #32]
 80090a0:	4904      	ldr	r1, [pc, #16]	; (80090b4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	620b      	str	r3, [r1, #32]
}
 80090a8:	bf00      	nop
 80090aa:	370c      	adds	r7, #12
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr
 80090b4:	58000800 	.word	0x58000800

080090b8 <LL_AHB3_GRP1_EnableClock>:
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80090c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80090d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4013      	ands	r3, r2
 80090da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80090dc:	68fb      	ldr	r3, [r7, #12]
}
 80090de:	bf00      	nop
 80090e0:	3714      	adds	r7, #20
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr

080090ea <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80090ea:	b480      	push	{r7}
 80090ec:	b085      	sub	sp, #20
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80090f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090f6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80090fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4313      	orrs	r3, r2
 8009102:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8009106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800910a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4013      	ands	r3, r2
 8009112:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009114:	68fb      	ldr	r3, [r7, #12]
}
 8009116:	bf00      	nop
 8009118:	3714      	adds	r7, #20
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr

08009122 <LL_C1_IPCC_EnableIT_TXF>:
{
 8009122:	b480      	push	{r7}
 8009124:	b083      	sub	sp, #12
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	601a      	str	r2, [r3, #0]
}
 8009136:	bf00      	nop
 8009138:	370c      	adds	r7, #12
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr

08009142 <LL_C1_IPCC_EnableIT_RXO>:
{
 8009142:	b480      	push	{r7}
 8009144:	b083      	sub	sp, #12
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f043 0201 	orr.w	r2, r3, #1
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	601a      	str	r2, [r3, #0]
}
 8009156:	bf00      	nop
 8009158:	370c      	adds	r7, #12
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr

08009162 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8009162:	b480      	push	{r7}
 8009164:	b083      	sub	sp, #12
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
 800916a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	685a      	ldr	r2, [r3, #4]
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	041b      	lsls	r3, r3, #16
 8009174:	43db      	mvns	r3, r3
 8009176:	401a      	ands	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	605a      	str	r2, [r3, #4]
}
 800917c:	bf00      	nop
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	685a      	ldr	r2, [r3, #4]
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	041b      	lsls	r3, r3, #16
 800919a:	431a      	orrs	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	605a      	str	r2, [r3, #4]
}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <LL_C1_IPCC_EnableReceiveChannel>:
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	685a      	ldr	r2, [r3, #4]
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	43db      	mvns	r3, r3
 80091be:	401a      	ands	r2, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	605a      	str	r2, [r3, #4]
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <LL_C1_IPCC_ClearFlag_CHx>:
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	683a      	ldr	r2, [r7, #0]
 80091de:	609a      	str	r2, [r3, #8]
}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <LL_C1_IPCC_SetFlag_CHx>:
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	041a      	lsls	r2, r3, #16
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	609a      	str	r2, [r3, #8]
}
 80091fe:	bf00      	nop
 8009200:	370c      	adds	r7, #12
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800920a:	b480      	push	{r7}
 800920c:	b083      	sub	sp, #12
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
 8009212:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	68da      	ldr	r2, [r3, #12]
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	4013      	ands	r3, r2
 800921c:	683a      	ldr	r2, [r7, #0]
 800921e:	429a      	cmp	r2, r3
 8009220:	d101      	bne.n	8009226 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8009222:	2301      	movs	r3, #1
 8009224:	e000      	b.n	8009228 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	69da      	ldr	r2, [r3, #28]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	4013      	ands	r3, r2
 8009246:	683a      	ldr	r2, [r7, #0]
 8009248:	429a      	cmp	r2, r3
 800924a:	d101      	bne.n	8009250 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800924c:	2301      	movs	r3, #1
 800924e:	e000      	b.n	8009252 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	370c      	adds	r7, #12
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
	...

08009260 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8009260:	b580      	push	{r7, lr}
 8009262:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8009264:	2102      	movs	r1, #2
 8009266:	4819      	ldr	r0, [pc, #100]	; (80092cc <HW_IPCC_Rx_Handler+0x6c>)
 8009268:	f7ff ffe4 	bl	8009234 <LL_C2_IPCC_IsActiveFlag_CHx>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d009      	beq.n	8009286 <HW_IPCC_Rx_Handler+0x26>
 8009272:	4b16      	ldr	r3, [pc, #88]	; (80092cc <HW_IPCC_Rx_Handler+0x6c>)
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	43db      	mvns	r3, r3
 8009278:	f003 0302 	and.w	r3, r3, #2
 800927c:	2b00      	cmp	r3, #0
 800927e:	d002      	beq.n	8009286 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8009280:	f000 f8da 	bl	8009438 <HW_IPCC_SYS_EvtHandler>
 8009284:	e01f      	b.n	80092c6 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8009286:	2101      	movs	r1, #1
 8009288:	4810      	ldr	r0, [pc, #64]	; (80092cc <HW_IPCC_Rx_Handler+0x6c>)
 800928a:	f7ff ffd3 	bl	8009234 <LL_C2_IPCC_IsActiveFlag_CHx>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d008      	beq.n	80092a6 <HW_IPCC_Rx_Handler+0x46>
 8009294:	4b0d      	ldr	r3, [pc, #52]	; (80092cc <HW_IPCC_Rx_Handler+0x6c>)
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	f003 0301 	and.w	r3, r3, #1
 800929c:	2b00      	cmp	r3, #0
 800929e:	d102      	bne.n	80092a6 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 80092a0:	f000 f88e 	bl	80093c0 <HW_IPCC_BLE_EvtHandler>
 80092a4:	e00f      	b.n	80092c6 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80092a6:	2108      	movs	r1, #8
 80092a8:	4808      	ldr	r0, [pc, #32]	; (80092cc <HW_IPCC_Rx_Handler+0x6c>)
 80092aa:	f7ff ffc3 	bl	8009234 <LL_C2_IPCC_IsActiveFlag_CHx>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d009      	beq.n	80092c8 <HW_IPCC_Rx_Handler+0x68>
 80092b4:	4b05      	ldr	r3, [pc, #20]	; (80092cc <HW_IPCC_Rx_Handler+0x6c>)
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	43db      	mvns	r3, r3
 80092ba:	f003 0308 	and.w	r3, r3, #8
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d002      	beq.n	80092c8 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80092c2:	f000 f905 	bl	80094d0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80092c6:	bf00      	nop
 80092c8:	bf00      	nop
}
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	58000c00 	.word	0x58000c00

080092d0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80092d4:	2102      	movs	r1, #2
 80092d6:	481a      	ldr	r0, [pc, #104]	; (8009340 <HW_IPCC_Tx_Handler+0x70>)
 80092d8:	f7ff ff97 	bl	800920a <LL_C1_IPCC_IsActiveFlag_CHx>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d109      	bne.n	80092f6 <HW_IPCC_Tx_Handler+0x26>
 80092e2:	4b17      	ldr	r3, [pc, #92]	; (8009340 <HW_IPCC_Tx_Handler+0x70>)
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	43db      	mvns	r3, r3
 80092e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d002      	beq.n	80092f6 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80092f0:	f000 f896 	bl	8009420 <HW_IPCC_SYS_CmdEvtHandler>
 80092f4:	e020      	b.n	8009338 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80092f6:	2108      	movs	r1, #8
 80092f8:	4811      	ldr	r0, [pc, #68]	; (8009340 <HW_IPCC_Tx_Handler+0x70>)
 80092fa:	f7ff ff86 	bl	800920a <LL_C1_IPCC_IsActiveFlag_CHx>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d109      	bne.n	8009318 <HW_IPCC_Tx_Handler+0x48>
 8009304:	4b0e      	ldr	r3, [pc, #56]	; (8009340 <HW_IPCC_Tx_Handler+0x70>)
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	43db      	mvns	r3, r3
 800930a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800930e:	2b00      	cmp	r3, #0
 8009310:	d002      	beq.n	8009318 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8009312:	f000 f8bf 	bl	8009494 <HW_IPCC_MM_FreeBufHandler>
 8009316:	e00f      	b.n	8009338 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8009318:	2120      	movs	r1, #32
 800931a:	4809      	ldr	r0, [pc, #36]	; (8009340 <HW_IPCC_Tx_Handler+0x70>)
 800931c:	f7ff ff75 	bl	800920a <LL_C1_IPCC_IsActiveFlag_CHx>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d109      	bne.n	800933a <HW_IPCC_Tx_Handler+0x6a>
 8009326:	4b06      	ldr	r3, [pc, #24]	; (8009340 <HW_IPCC_Tx_Handler+0x70>)
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	43db      	mvns	r3, r3
 800932c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009330:	2b00      	cmp	r3, #0
 8009332:	d002      	beq.n	800933a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8009334:	f000 f850 	bl	80093d8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8009338:	bf00      	nop
 800933a:	bf00      	nop
}
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	58000c00 	.word	0x58000c00

08009344 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8009344:	b580      	push	{r7, lr}
 8009346:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8009348:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800934c:	f7ff fecd 	bl	80090ea <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8009350:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009354:	f7ff fe8a 	bl	800906c <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8009358:	f44f 7000 	mov.w	r0, #512	; 0x200
 800935c:	f7ff fe9a 	bl	8009094 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8009360:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8009362:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8009364:	f7ff fe72 	bl	800904c <LL_PWR_EnableBootC2>

  return;
 8009368:	bf00      	nop
}
 800936a:	bd80      	pop	{r7, pc}

0800936c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800936c:	b580      	push	{r7, lr}
 800936e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8009370:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009374:	f7ff fea0 	bl	80090b8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8009378:	4806      	ldr	r0, [pc, #24]	; (8009394 <HW_IPCC_Init+0x28>)
 800937a:	f7ff fee2 	bl	8009142 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800937e:	4805      	ldr	r0, [pc, #20]	; (8009394 <HW_IPCC_Init+0x28>)
 8009380:	f7ff fecf 	bl	8009122 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8009384:	202c      	movs	r0, #44	; 0x2c
 8009386:	f7f9 fc50 	bl	8002c2a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800938a:	202d      	movs	r0, #45	; 0x2d
 800938c:	f7f9 fc4d 	bl	8002c2a <HAL_NVIC_EnableIRQ>

  return;
 8009390:	bf00      	nop
}
 8009392:	bd80      	pop	{r7, pc}
 8009394:	58000c00 	.word	0x58000c00

08009398 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8009398:	b580      	push	{r7, lr}
 800939a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800939c:	2101      	movs	r1, #1
 800939e:	4802      	ldr	r0, [pc, #8]	; (80093a8 <HW_IPCC_BLE_Init+0x10>)
 80093a0:	f7ff ff04 	bl	80091ac <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80093a4:	bf00      	nop
}
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	58000c00 	.word	0x58000c00

080093ac <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80093b0:	2101      	movs	r1, #1
 80093b2:	4802      	ldr	r0, [pc, #8]	; (80093bc <HW_IPCC_BLE_SendCmd+0x10>)
 80093b4:	f7ff ff1a 	bl	80091ec <LL_C1_IPCC_SetFlag_CHx>

  return;
 80093b8:	bf00      	nop
}
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	58000c00 	.word	0x58000c00

080093c0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80093c4:	f7fe ff00 	bl	80081c8 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80093c8:	2101      	movs	r1, #1
 80093ca:	4802      	ldr	r0, [pc, #8]	; (80093d4 <HW_IPCC_BLE_EvtHandler+0x14>)
 80093cc:	f7ff ff00 	bl	80091d0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80093d0:	bf00      	nop
}
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	58000c00 	.word	0x58000c00

080093d8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80093dc:	2120      	movs	r1, #32
 80093de:	4803      	ldr	r0, [pc, #12]	; (80093ec <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80093e0:	f7ff fed2 	bl	8009188 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80093e4:	f7fe ff20 	bl	8008228 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80093e8:	bf00      	nop
}
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	58000c00 	.word	0x58000c00

080093f0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80093f4:	2102      	movs	r1, #2
 80093f6:	4802      	ldr	r0, [pc, #8]	; (8009400 <HW_IPCC_SYS_Init+0x10>)
 80093f8:	f7ff fed8 	bl	80091ac <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80093fc:	bf00      	nop
}
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	58000c00 	.word	0x58000c00

08009404 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8009404:	b580      	push	{r7, lr}
 8009406:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009408:	2102      	movs	r1, #2
 800940a:	4804      	ldr	r0, [pc, #16]	; (800941c <HW_IPCC_SYS_SendCmd+0x18>)
 800940c:	f7ff feee 	bl	80091ec <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009410:	2102      	movs	r1, #2
 8009412:	4802      	ldr	r0, [pc, #8]	; (800941c <HW_IPCC_SYS_SendCmd+0x18>)
 8009414:	f7ff fea5 	bl	8009162 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8009418:	bf00      	nop
}
 800941a:	bd80      	pop	{r7, pc}
 800941c:	58000c00 	.word	0x58000c00

08009420 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009424:	2102      	movs	r1, #2
 8009426:	4803      	ldr	r0, [pc, #12]	; (8009434 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8009428:	f7ff feae 	bl	8009188 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800942c:	f7fe ff4c 	bl	80082c8 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8009430:	bf00      	nop
}
 8009432:	bd80      	pop	{r7, pc}
 8009434:	58000c00 	.word	0x58000c00

08009438 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800943c:	f7fe ff5a 	bl	80082f4 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009440:	2102      	movs	r1, #2
 8009442:	4802      	ldr	r0, [pc, #8]	; (800944c <HW_IPCC_SYS_EvtHandler+0x14>)
 8009444:	f7ff fec4 	bl	80091d0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009448:	bf00      	nop
}
 800944a:	bd80      	pop	{r7, pc}
 800944c:	58000c00 	.word	0x58000c00

08009450 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8009458:	2108      	movs	r1, #8
 800945a:	480c      	ldr	r0, [pc, #48]	; (800948c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800945c:	f7ff fed5 	bl	800920a <LL_C1_IPCC_IsActiveFlag_CHx>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d007      	beq.n	8009476 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8009466:	4a0a      	ldr	r2, [pc, #40]	; (8009490 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800946c:	2108      	movs	r1, #8
 800946e:	4807      	ldr	r0, [pc, #28]	; (800948c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009470:	f7ff fe77 	bl	8009162 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8009474:	e006      	b.n	8009484 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800947a:	2108      	movs	r1, #8
 800947c:	4803      	ldr	r0, [pc, #12]	; (800948c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800947e:	f7ff feb5 	bl	80091ec <LL_C1_IPCC_SetFlag_CHx>
  return;
 8009482:	bf00      	nop
}
 8009484:	3708      	adds	r7, #8
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	58000c00 	.word	0x58000c00
 8009490:	2000092c 	.word	0x2000092c

08009494 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8009494:	b580      	push	{r7, lr}
 8009496:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009498:	2108      	movs	r1, #8
 800949a:	4806      	ldr	r0, [pc, #24]	; (80094b4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800949c:	f7ff fe74 	bl	8009188 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80094a0:	4b05      	ldr	r3, [pc, #20]	; (80094b8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80094a6:	2108      	movs	r1, #8
 80094a8:	4802      	ldr	r0, [pc, #8]	; (80094b4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80094aa:	f7ff fe9f 	bl	80091ec <LL_C1_IPCC_SetFlag_CHx>

  return;
 80094ae:	bf00      	nop
}
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	58000c00 	.word	0x58000c00
 80094b8:	2000092c 	.word	0x2000092c

080094bc <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80094c0:	2108      	movs	r1, #8
 80094c2:	4802      	ldr	r0, [pc, #8]	; (80094cc <HW_IPCC_TRACES_Init+0x10>)
 80094c4:	f7ff fe72 	bl	80091ac <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80094c8:	bf00      	nop
}
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	58000c00 	.word	0x58000c00

080094d0 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80094d4:	f7fe ffb6 	bl	8008444 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80094d8:	2108      	movs	r1, #8
 80094da:	4802      	ldr	r0, [pc, #8]	; (80094e4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80094dc:	f7ff fe78 	bl	80091d0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80094e0:	bf00      	nop
}
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	58000c00 	.word	0x58000c00

080094e8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80094e8:	b480      	push	{r7}
 80094ea:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80094ec:	4b05      	ldr	r3, [pc, #20]	; (8009504 <UTIL_LPM_Init+0x1c>)
 80094ee:	2200      	movs	r2, #0
 80094f0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80094f2:	4b05      	ldr	r3, [pc, #20]	; (8009508 <UTIL_LPM_Init+0x20>)
 80094f4:	2200      	movs	r2, #0
 80094f6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80094f8:	bf00      	nop
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	20000930 	.word	0x20000930
 8009508:	20000934 	.word	0x20000934

0800950c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800950c:	b480      	push	{r7}
 800950e:	b087      	sub	sp, #28
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	460b      	mov	r3, r1
 8009516:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009518:	f3ef 8310 	mrs	r3, PRIMASK
 800951c:	613b      	str	r3, [r7, #16]
  return(result);
 800951e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8009520:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009522:	b672      	cpsid	i
}
 8009524:	bf00      	nop
  
  switch(state)
 8009526:	78fb      	ldrb	r3, [r7, #3]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d008      	beq.n	800953e <UTIL_LPM_SetOffMode+0x32>
 800952c:	2b01      	cmp	r3, #1
 800952e:	d10e      	bne.n	800954e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8009530:	4b0d      	ldr	r3, [pc, #52]	; (8009568 <UTIL_LPM_SetOffMode+0x5c>)
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4313      	orrs	r3, r2
 8009538:	4a0b      	ldr	r2, [pc, #44]	; (8009568 <UTIL_LPM_SetOffMode+0x5c>)
 800953a:	6013      	str	r3, [r2, #0]
      break;
 800953c:	e008      	b.n	8009550 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	43da      	mvns	r2, r3
 8009542:	4b09      	ldr	r3, [pc, #36]	; (8009568 <UTIL_LPM_SetOffMode+0x5c>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4013      	ands	r3, r2
 8009548:	4a07      	ldr	r2, [pc, #28]	; (8009568 <UTIL_LPM_SetOffMode+0x5c>)
 800954a:	6013      	str	r3, [r2, #0]
      break;
 800954c:	e000      	b.n	8009550 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800954e:	bf00      	nop
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f383 8810 	msr	PRIMASK, r3
}
 800955a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800955c:	bf00      	nop
 800955e:	371c      	adds	r7, #28
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr
 8009568:	20000934 	.word	0x20000934

0800956c <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b08c      	sub	sp, #48	; 0x30
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8009574:	4b6a      	ldr	r3, [pc, #424]	; (8009720 <UTIL_SEQ_Run+0x1b4>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	627b      	str	r3, [r7, #36]	; 0x24
  SuperMask &= Mask_bm;
 800957a:	4b69      	ldr	r3, [pc, #420]	; (8009720 <UTIL_SEQ_Run+0x1b4>)
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4013      	ands	r3, r2
 8009582:	4a67      	ldr	r2, [pc, #412]	; (8009720 <UTIL_SEQ_Run+0x1b4>)
 8009584:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8009586:	4b67      	ldr	r3, [pc, #412]	; (8009724 <UTIL_SEQ_Run+0x1b8>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800958c:	e086      	b.n	800969c <UTIL_SEQ_Run+0x130>
  {
    counter = 0U;
 800958e:	2300      	movs	r3, #0
 8009590:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8009592:	e002      	b.n	800959a <UTIL_SEQ_Run+0x2e>
    {
      counter++;
 8009594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009596:	3301      	adds	r3, #1
 8009598:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800959a:	4a63      	ldr	r2, [pc, #396]	; (8009728 <UTIL_SEQ_Run+0x1bc>)
 800959c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80095a2:	4b62      	ldr	r3, [pc, #392]	; (800972c <UTIL_SEQ_Run+0x1c0>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	401a      	ands	r2, r3
 80095a8:	4b5d      	ldr	r3, [pc, #372]	; (8009720 <UTIL_SEQ_Run+0x1b4>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4013      	ands	r3, r2
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d0f0      	beq.n	8009594 <UTIL_SEQ_Run+0x28>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 80095b2:	4a5d      	ldr	r2, [pc, #372]	; (8009728 <UTIL_SEQ_Run+0x1bc>)
 80095b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80095ba:	4b5c      	ldr	r3, [pc, #368]	; (800972c <UTIL_SEQ_Run+0x1c0>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	401a      	ands	r2, r3
 80095c0:	4b57      	ldr	r3, [pc, #348]	; (8009720 <UTIL_SEQ_Run+0x1b4>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4013      	ands	r3, r2
 80095c6:	623b      	str	r3, [r7, #32]
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80095c8:	4a57      	ldr	r2, [pc, #348]	; (8009728 <UTIL_SEQ_Run+0x1bc>)
 80095ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095cc:	00db      	lsls	r3, r3, #3
 80095ce:	4413      	add	r3, r2
 80095d0:	685a      	ldr	r2, [r3, #4]
 80095d2:	6a3b      	ldr	r3, [r7, #32]
 80095d4:	4013      	ands	r3, r2
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d106      	bne.n	80095e8 <UTIL_SEQ_Run+0x7c>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80095da:	4a53      	ldr	r2, [pc, #332]	; (8009728 <UTIL_SEQ_Run+0x1bc>)
 80095dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095de:	00db      	lsls	r3, r3, #3
 80095e0:	4413      	add	r3, r2
 80095e2:	f04f 32ff 	mov.w	r2, #4294967295
 80095e6:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80095e8:	4a4f      	ldr	r2, [pc, #316]	; (8009728 <UTIL_SEQ_Run+0x1bc>)
 80095ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ec:	00db      	lsls	r3, r3, #3
 80095ee:	4413      	add	r3, r2
 80095f0:	685a      	ldr	r2, [r3, #4]
 80095f2:	6a3b      	ldr	r3, [r7, #32]
 80095f4:	4013      	ands	r3, r2
 80095f6:	4618      	mov	r0, r3
 80095f8:	f000 f9ac 	bl	8009954 <SEQ_BitPosition>
 80095fc:	4603      	mov	r3, r0
 80095fe:	461a      	mov	r2, r3
 8009600:	4b4b      	ldr	r3, [pc, #300]	; (8009730 <UTIL_SEQ_Run+0x1c4>)
 8009602:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8009604:	4a48      	ldr	r2, [pc, #288]	; (8009728 <UTIL_SEQ_Run+0x1bc>)
 8009606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009608:	00db      	lsls	r3, r3, #3
 800960a:	4413      	add	r3, r2
 800960c:	685a      	ldr	r2, [r3, #4]
 800960e:	4b48      	ldr	r3, [pc, #288]	; (8009730 <UTIL_SEQ_Run+0x1c4>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2101      	movs	r1, #1
 8009614:	fa01 f303 	lsl.w	r3, r1, r3
 8009618:	43db      	mvns	r3, r3
 800961a:	401a      	ands	r2, r3
 800961c:	4942      	ldr	r1, [pc, #264]	; (8009728 <UTIL_SEQ_Run+0x1bc>)
 800961e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009620:	00db      	lsls	r3, r3, #3
 8009622:	440b      	add	r3, r1
 8009624:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009626:	f3ef 8310 	mrs	r3, PRIMASK
 800962a:	617b      	str	r3, [r7, #20]
  return(result);
 800962c:	697b      	ldr	r3, [r7, #20]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800962e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009630:	b672      	cpsid	i
}
 8009632:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8009634:	4b3e      	ldr	r3, [pc, #248]	; (8009730 <UTIL_SEQ_Run+0x1c4>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2201      	movs	r2, #1
 800963a:	fa02 f303 	lsl.w	r3, r2, r3
 800963e:	43da      	mvns	r2, r3
 8009640:	4b38      	ldr	r3, [pc, #224]	; (8009724 <UTIL_SEQ_Run+0x1b8>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4013      	ands	r3, r2
 8009646:	4a37      	ldr	r2, [pc, #220]	; (8009724 <UTIL_SEQ_Run+0x1b8>)
 8009648:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800964a:	2302      	movs	r3, #2
 800964c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800964e:	e013      	b.n	8009678 <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8009650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009652:	3b01      	subs	r3, #1
 8009654:	4a34      	ldr	r2, [pc, #208]	; (8009728 <UTIL_SEQ_Run+0x1bc>)
 8009656:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800965a:	4b35      	ldr	r3, [pc, #212]	; (8009730 <UTIL_SEQ_Run+0x1c4>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2201      	movs	r2, #1
 8009660:	fa02 f303 	lsl.w	r3, r2, r3
 8009664:	43da      	mvns	r2, r3
 8009666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009668:	3b01      	subs	r3, #1
 800966a:	400a      	ands	r2, r1
 800966c:	492e      	ldr	r1, [pc, #184]	; (8009728 <UTIL_SEQ_Run+0x1bc>)
 800966e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009674:	3b01      	subs	r3, #1
 8009676:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800967a:	2b00      	cmp	r3, #0
 800967c:	d1e8      	bne.n	8009650 <UTIL_SEQ_Run+0xe4>
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	f383 8810 	msr	PRIMASK, r3
}
 8009688:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800968a:	4b29      	ldr	r3, [pc, #164]	; (8009730 <UTIL_SEQ_Run+0x1c4>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a29      	ldr	r2, [pc, #164]	; (8009734 <UTIL_SEQ_Run+0x1c8>)
 8009690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009694:	4798      	blx	r3
    
    local_taskset = TaskSet;
 8009696:	4b23      	ldr	r3, [pc, #140]	; (8009724 <UTIL_SEQ_Run+0x1b8>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800969c:	4b23      	ldr	r3, [pc, #140]	; (800972c <UTIL_SEQ_Run+0x1c0>)
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a2:	401a      	ands	r2, r3
 80096a4:	4b1e      	ldr	r3, [pc, #120]	; (8009720 <UTIL_SEQ_Run+0x1b4>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4013      	ands	r3, r2
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d007      	beq.n	80096be <UTIL_SEQ_Run+0x152>
 80096ae:	4b22      	ldr	r3, [pc, #136]	; (8009738 <UTIL_SEQ_Run+0x1cc>)
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	4b22      	ldr	r3, [pc, #136]	; (800973c <UTIL_SEQ_Run+0x1d0>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4013      	ands	r3, r2
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	f43f af68 	beq.w	800958e <UTIL_SEQ_Run+0x22>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80096be:	4b1c      	ldr	r3, [pc, #112]	; (8009730 <UTIL_SEQ_Run+0x1c4>)
 80096c0:	f04f 32ff 	mov.w	r2, #4294967295
 80096c4:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80096c6:	f000 f937 	bl	8009938 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096ca:	f3ef 8310 	mrs	r3, PRIMASK
 80096ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80096d0:	68fb      	ldr	r3, [r7, #12]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80096d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 80096d4:	b672      	cpsid	i
}
 80096d6:	bf00      	nop
  local_taskset = TaskSet;
 80096d8:	4b12      	ldr	r3, [pc, #72]	; (8009724 <UTIL_SEQ_Run+0x1b8>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 80096de:	4b13      	ldr	r3, [pc, #76]	; (800972c <UTIL_SEQ_Run+0x1c0>)
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e4:	401a      	ands	r2, r3
 80096e6:	4b0e      	ldr	r3, [pc, #56]	; (8009720 <UTIL_SEQ_Run+0x1b4>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4013      	ands	r3, r2
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d108      	bne.n	8009702 <UTIL_SEQ_Run+0x196>
 80096f0:	4b11      	ldr	r3, [pc, #68]	; (8009738 <UTIL_SEQ_Run+0x1cc>)
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	4b11      	ldr	r3, [pc, #68]	; (800973c <UTIL_SEQ_Run+0x1d0>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4013      	ands	r3, r2
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d101      	bne.n	8009702 <UTIL_SEQ_Run+0x196>
  {
	UTIL_SEQ_Idle( );
 80096fe:	f7f7 fb01 	bl	8000d04 <UTIL_SEQ_Idle>
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	f383 8810 	msr	PRIMASK, r3
}
 800970c:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800970e:	f000 f91a 	bl	8009946 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8009712:	4a03      	ldr	r2, [pc, #12]	; (8009720 <UTIL_SEQ_Run+0x1b4>)
 8009714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009716:	6013      	str	r3, [r2, #0]

  return;
 8009718:	bf00      	nop
}
 800971a:	3730      	adds	r7, #48	; 0x30
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	20000024 	.word	0x20000024
 8009724:	20000938 	.word	0x20000938
 8009728:	200009c8 	.word	0x200009c8
 800972c:	20000020 	.word	0x20000020
 8009730:	20000944 	.word	0x20000944
 8009734:	20000948 	.word	0x20000948
 8009738:	2000093c 	.word	0x2000093c
 800973c:	20000940 	.word	0x20000940

08009740 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b088      	sub	sp, #32
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800974c:	f3ef 8310 	mrs	r3, PRIMASK
 8009750:	617b      	str	r3, [r7, #20]
  return(result);
 8009752:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8009754:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009756:	b672      	cpsid	i
}
 8009758:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f000 f8fa 	bl	8009954 <SEQ_BitPosition>
 8009760:	4603      	mov	r3, r0
 8009762:	4619      	mov	r1, r3
 8009764:	4a06      	ldr	r2, [pc, #24]	; (8009780 <UTIL_SEQ_RegTask+0x40>)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	f383 8810 	msr	PRIMASK, r3
}
 8009776:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8009778:	bf00      	nop
}
 800977a:	3720      	adds	r7, #32
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	20000948 	.word	0x20000948

08009784 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8009784:	b480      	push	{r7}
 8009786:	b087      	sub	sp, #28
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800978e:	f3ef 8310 	mrs	r3, PRIMASK
 8009792:	60fb      	str	r3, [r7, #12]
  return(result);
 8009794:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009796:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009798:	b672      	cpsid	i
}
 800979a:	bf00      	nop

  TaskSet |= TaskId_bm;
 800979c:	4b0d      	ldr	r3, [pc, #52]	; (80097d4 <UTIL_SEQ_SetTask+0x50>)
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	4a0b      	ldr	r2, [pc, #44]	; (80097d4 <UTIL_SEQ_SetTask+0x50>)
 80097a6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80097a8:	4a0b      	ldr	r2, [pc, #44]	; (80097d8 <UTIL_SEQ_SetTask+0x54>)
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	431a      	orrs	r2, r3
 80097b4:	4908      	ldr	r1, [pc, #32]	; (80097d8 <UTIL_SEQ_SetTask+0x54>)
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	f383 8810 	msr	PRIMASK, r3
}
 80097c6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80097c8:	bf00      	nop
}
 80097ca:	371c      	adds	r7, #28
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr
 80097d4:	20000938 	.word	0x20000938
 80097d8:	200009c8 	.word	0x200009c8

080097dc <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80097dc:	b480      	push	{r7}
 80097de:	b087      	sub	sp, #28
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097e4:	f3ef 8310 	mrs	r3, PRIMASK
 80097e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80097ea:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80097ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80097ee:	b672      	cpsid	i
}
 80097f0:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	43da      	mvns	r2, r3
 80097f6:	4b08      	ldr	r3, [pc, #32]	; (8009818 <UTIL_SEQ_PauseTask+0x3c>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4013      	ands	r3, r2
 80097fc:	4a06      	ldr	r2, [pc, #24]	; (8009818 <UTIL_SEQ_PauseTask+0x3c>)
 80097fe:	6013      	str	r3, [r2, #0]
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	f383 8810 	msr	PRIMASK, r3
}
 800980a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800980c:	bf00      	nop
}
 800980e:	371c      	adds	r7, #28
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr
 8009818:	20000020 	.word	0x20000020

0800981c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800981c:	b480      	push	{r7}
 800981e:	b087      	sub	sp, #28
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009824:	f3ef 8310 	mrs	r3, PRIMASK
 8009828:	60fb      	str	r3, [r7, #12]
  return(result);
 800982a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800982c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800982e:	b672      	cpsid	i
}
 8009830:	bf00      	nop

  TaskMask |= TaskId_bm;
 8009832:	4b09      	ldr	r3, [pc, #36]	; (8009858 <UTIL_SEQ_ResumeTask+0x3c>)
 8009834:	681a      	ldr	r2, [r3, #0]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4313      	orrs	r3, r2
 800983a:	4a07      	ldr	r2, [pc, #28]	; (8009858 <UTIL_SEQ_ResumeTask+0x3c>)
 800983c:	6013      	str	r3, [r2, #0]
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	f383 8810 	msr	PRIMASK, r3
}
 8009848:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800984a:	bf00      	nop
}
 800984c:	371c      	adds	r7, #28
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr
 8009856:	bf00      	nop
 8009858:	20000020 	.word	0x20000020

0800985c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800985c:	b480      	push	{r7}
 800985e:	b087      	sub	sp, #28
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009864:	f3ef 8310 	mrs	r3, PRIMASK
 8009868:	60fb      	str	r3, [r7, #12]
  return(result);
 800986a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800986c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800986e:	b672      	cpsid	i
}
 8009870:	bf00      	nop

  EvtSet |= EvtId_bm;
 8009872:	4b09      	ldr	r3, [pc, #36]	; (8009898 <UTIL_SEQ_SetEvt+0x3c>)
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4313      	orrs	r3, r2
 800987a:	4a07      	ldr	r2, [pc, #28]	; (8009898 <UTIL_SEQ_SetEvt+0x3c>)
 800987c:	6013      	str	r3, [r2, #0]
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	f383 8810 	msr	PRIMASK, r3
}
 8009888:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800988a:	bf00      	nop
}
 800988c:	371c      	adds	r7, #28
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr
 8009896:	bf00      	nop
 8009898:	2000093c 	.word	0x2000093c

0800989c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b088      	sub	sp, #32
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80098a4:	4b21      	ldr	r3, [pc, #132]	; (800992c <UTIL_SEQ_WaitEvt+0x90>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80098aa:	4b20      	ldr	r3, [pc, #128]	; (800992c <UTIL_SEQ_WaitEvt+0x90>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098b2:	d102      	bne.n	80098ba <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 80098b4:	2300      	movs	r3, #0
 80098b6:	61fb      	str	r3, [r7, #28]
 80098b8:	e005      	b.n	80098c6 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 80098ba:	4b1c      	ldr	r3, [pc, #112]	; (800992c <UTIL_SEQ_WaitEvt+0x90>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2201      	movs	r2, #1
 80098c0:	fa02 f303 	lsl.w	r3, r2, r3
 80098c4:	61fb      	str	r3, [r7, #28]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80098c6:	4b1a      	ldr	r3, [pc, #104]	; (8009930 <UTIL_SEQ_WaitEvt+0x94>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80098cc:	4a18      	ldr	r2, [pc, #96]	; (8009930 <UTIL_SEQ_WaitEvt+0x94>)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 80098d2:	e005      	b.n	80098e0 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 80098d4:	4b16      	ldr	r3, [pc, #88]	; (8009930 <UTIL_SEQ_WaitEvt+0x94>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4619      	mov	r1, r3
 80098da:	69f8      	ldr	r0, [r7, #28]
 80098dc:	f7f7 fa19 	bl	8000d12 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 80098e0:	4b14      	ldr	r3, [pc, #80]	; (8009934 <UTIL_SEQ_WaitEvt+0x98>)
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	4b12      	ldr	r3, [pc, #72]	; (8009930 <UTIL_SEQ_WaitEvt+0x94>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4013      	ands	r3, r2
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d0f2      	beq.n	80098d4 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80098ee:	4a0f      	ldr	r2, [pc, #60]	; (800992c <UTIL_SEQ_WaitEvt+0x90>)
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098f4:	f3ef 8310 	mrs	r3, PRIMASK
 80098f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80098fa:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80098fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80098fe:	b672      	cpsid	i
}
 8009900:	bf00      	nop

  EvtSet &= (~EvtWaited);
 8009902:	4b0b      	ldr	r3, [pc, #44]	; (8009930 <UTIL_SEQ_WaitEvt+0x94>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	43da      	mvns	r2, r3
 8009908:	4b0a      	ldr	r3, [pc, #40]	; (8009934 <UTIL_SEQ_WaitEvt+0x98>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4013      	ands	r3, r2
 800990e:	4a09      	ldr	r2, [pc, #36]	; (8009934 <UTIL_SEQ_WaitEvt+0x98>)
 8009910:	6013      	str	r3, [r2, #0]
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f383 8810 	msr	PRIMASK, r3
}
 800991c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800991e:	4a04      	ldr	r2, [pc, #16]	; (8009930 <UTIL_SEQ_WaitEvt+0x94>)
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	6013      	str	r3, [r2, #0]

  return;
 8009924:	bf00      	nop
}
 8009926:	3720      	adds	r7, #32
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}
 800992c:	20000944 	.word	0x20000944
 8009930:	20000940 	.word	0x20000940
 8009934:	2000093c 	.word	0x2000093c

08009938 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8009938:	b480      	push	{r7}
 800993a:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800993c:	bf00      	nop
}
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr

08009946 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8009946:	b480      	push	{r7}
 8009948:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800994a:	bf00      	nop
}
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8009954:	b480      	push	{r7}
 8009956:	b085      	sub	sp, #20
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800995c:	2300      	movs	r3, #0
 800995e:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	0c1b      	lsrs	r3, r3, #16
 8009964:	041b      	lsls	r3, r3, #16
 8009966:	2b00      	cmp	r3, #0
 8009968:	d104      	bne.n	8009974 <SEQ_BitPosition+0x20>
 800996a:	2310      	movs	r3, #16
 800996c:	73fb      	strb	r3, [r7, #15]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	041b      	lsls	r3, r3, #16
 8009972:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800997a:	2b00      	cmp	r3, #0
 800997c:	d105      	bne.n	800998a <SEQ_BitPosition+0x36>
 800997e:	7bfb      	ldrb	r3, [r7, #15]
 8009980:	3308      	adds	r3, #8
 8009982:	73fb      	strb	r3, [r7, #15]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	021b      	lsls	r3, r3, #8
 8009988:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009990:	2b00      	cmp	r3, #0
 8009992:	d105      	bne.n	80099a0 <SEQ_BitPosition+0x4c>
 8009994:	7bfb      	ldrb	r3, [r7, #15]
 8009996:	3304      	adds	r3, #4
 8009998:	73fb      	strb	r3, [r7, #15]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	011b      	lsls	r3, r3, #4
 800999e:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	0f1b      	lsrs	r3, r3, #28
 80099a4:	4a07      	ldr	r2, [pc, #28]	; (80099c4 <SEQ_BitPosition+0x70>)
 80099a6:	5cd2      	ldrb	r2, [r2, r3]
 80099a8:	7bfb      	ldrb	r3, [r7, #15]
 80099aa:	4413      	add	r3, r2
 80099ac:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80099ae:	7bfb      	ldrb	r3, [r7, #15]
 80099b0:	f1c3 031f 	rsb	r3, r3, #31
 80099b4:	b2db      	uxtb	r3, r3
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3714      	adds	r7, #20
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	0800aeac 	.word	0x0800aeac

080099c8 <__errno>:
 80099c8:	4b01      	ldr	r3, [pc, #4]	; (80099d0 <__errno+0x8>)
 80099ca:	6818      	ldr	r0, [r3, #0]
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop
 80099d0:	20000028 	.word	0x20000028

080099d4 <__libc_init_array>:
 80099d4:	b570      	push	{r4, r5, r6, lr}
 80099d6:	4d0d      	ldr	r5, [pc, #52]	; (8009a0c <__libc_init_array+0x38>)
 80099d8:	4c0d      	ldr	r4, [pc, #52]	; (8009a10 <__libc_init_array+0x3c>)
 80099da:	1b64      	subs	r4, r4, r5
 80099dc:	10a4      	asrs	r4, r4, #2
 80099de:	2600      	movs	r6, #0
 80099e0:	42a6      	cmp	r6, r4
 80099e2:	d109      	bne.n	80099f8 <__libc_init_array+0x24>
 80099e4:	4d0b      	ldr	r5, [pc, #44]	; (8009a14 <__libc_init_array+0x40>)
 80099e6:	4c0c      	ldr	r4, [pc, #48]	; (8009a18 <__libc_init_array+0x44>)
 80099e8:	f000 fc8e 	bl	800a308 <_init>
 80099ec:	1b64      	subs	r4, r4, r5
 80099ee:	10a4      	asrs	r4, r4, #2
 80099f0:	2600      	movs	r6, #0
 80099f2:	42a6      	cmp	r6, r4
 80099f4:	d105      	bne.n	8009a02 <__libc_init_array+0x2e>
 80099f6:	bd70      	pop	{r4, r5, r6, pc}
 80099f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80099fc:	4798      	blx	r3
 80099fe:	3601      	adds	r6, #1
 8009a00:	e7ee      	b.n	80099e0 <__libc_init_array+0xc>
 8009a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a06:	4798      	blx	r3
 8009a08:	3601      	adds	r6, #1
 8009a0a:	e7f2      	b.n	80099f2 <__libc_init_array+0x1e>
 8009a0c:	0800af58 	.word	0x0800af58
 8009a10:	0800af58 	.word	0x0800af58
 8009a14:	0800af58 	.word	0x0800af58
 8009a18:	0800af5c 	.word	0x0800af5c

08009a1c <memcpy>:
 8009a1c:	440a      	add	r2, r1
 8009a1e:	4291      	cmp	r1, r2
 8009a20:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a24:	d100      	bne.n	8009a28 <memcpy+0xc>
 8009a26:	4770      	bx	lr
 8009a28:	b510      	push	{r4, lr}
 8009a2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a32:	4291      	cmp	r1, r2
 8009a34:	d1f9      	bne.n	8009a2a <memcpy+0xe>
 8009a36:	bd10      	pop	{r4, pc}

08009a38 <memmove>:
 8009a38:	4288      	cmp	r0, r1
 8009a3a:	b510      	push	{r4, lr}
 8009a3c:	eb01 0402 	add.w	r4, r1, r2
 8009a40:	d902      	bls.n	8009a48 <memmove+0x10>
 8009a42:	4284      	cmp	r4, r0
 8009a44:	4623      	mov	r3, r4
 8009a46:	d807      	bhi.n	8009a58 <memmove+0x20>
 8009a48:	1e43      	subs	r3, r0, #1
 8009a4a:	42a1      	cmp	r1, r4
 8009a4c:	d008      	beq.n	8009a60 <memmove+0x28>
 8009a4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a56:	e7f8      	b.n	8009a4a <memmove+0x12>
 8009a58:	4402      	add	r2, r0
 8009a5a:	4601      	mov	r1, r0
 8009a5c:	428a      	cmp	r2, r1
 8009a5e:	d100      	bne.n	8009a62 <memmove+0x2a>
 8009a60:	bd10      	pop	{r4, pc}
 8009a62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a6a:	e7f7      	b.n	8009a5c <memmove+0x24>

08009a6c <memset>:
 8009a6c:	4402      	add	r2, r0
 8009a6e:	4603      	mov	r3, r0
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d100      	bne.n	8009a76 <memset+0xa>
 8009a74:	4770      	bx	lr
 8009a76:	f803 1b01 	strb.w	r1, [r3], #1
 8009a7a:	e7f9      	b.n	8009a70 <memset+0x4>

08009a7c <siprintf>:
 8009a7c:	b40e      	push	{r1, r2, r3}
 8009a7e:	b500      	push	{lr}
 8009a80:	b09c      	sub	sp, #112	; 0x70
 8009a82:	ab1d      	add	r3, sp, #116	; 0x74
 8009a84:	9002      	str	r0, [sp, #8]
 8009a86:	9006      	str	r0, [sp, #24]
 8009a88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a8c:	4809      	ldr	r0, [pc, #36]	; (8009ab4 <siprintf+0x38>)
 8009a8e:	9107      	str	r1, [sp, #28]
 8009a90:	9104      	str	r1, [sp, #16]
 8009a92:	4909      	ldr	r1, [pc, #36]	; (8009ab8 <siprintf+0x3c>)
 8009a94:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a98:	9105      	str	r1, [sp, #20]
 8009a9a:	6800      	ldr	r0, [r0, #0]
 8009a9c:	9301      	str	r3, [sp, #4]
 8009a9e:	a902      	add	r1, sp, #8
 8009aa0:	f000 f8fe 	bl	8009ca0 <_svfiprintf_r>
 8009aa4:	9b02      	ldr	r3, [sp, #8]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	701a      	strb	r2, [r3, #0]
 8009aaa:	b01c      	add	sp, #112	; 0x70
 8009aac:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ab0:	b003      	add	sp, #12
 8009ab2:	4770      	bx	lr
 8009ab4:	20000028 	.word	0x20000028
 8009ab8:	ffff0208 	.word	0xffff0208

08009abc <__retarget_lock_acquire_recursive>:
 8009abc:	4770      	bx	lr

08009abe <__retarget_lock_release_recursive>:
 8009abe:	4770      	bx	lr

08009ac0 <sbrk_aligned>:
 8009ac0:	b570      	push	{r4, r5, r6, lr}
 8009ac2:	4e0e      	ldr	r6, [pc, #56]	; (8009afc <sbrk_aligned+0x3c>)
 8009ac4:	460c      	mov	r4, r1
 8009ac6:	6831      	ldr	r1, [r6, #0]
 8009ac8:	4605      	mov	r5, r0
 8009aca:	b911      	cbnz	r1, 8009ad2 <sbrk_aligned+0x12>
 8009acc:	f000 fb7c 	bl	800a1c8 <_sbrk_r>
 8009ad0:	6030      	str	r0, [r6, #0]
 8009ad2:	4621      	mov	r1, r4
 8009ad4:	4628      	mov	r0, r5
 8009ad6:	f000 fb77 	bl	800a1c8 <_sbrk_r>
 8009ada:	1c43      	adds	r3, r0, #1
 8009adc:	d00a      	beq.n	8009af4 <sbrk_aligned+0x34>
 8009ade:	1cc4      	adds	r4, r0, #3
 8009ae0:	f024 0403 	bic.w	r4, r4, #3
 8009ae4:	42a0      	cmp	r0, r4
 8009ae6:	d007      	beq.n	8009af8 <sbrk_aligned+0x38>
 8009ae8:	1a21      	subs	r1, r4, r0
 8009aea:	4628      	mov	r0, r5
 8009aec:	f000 fb6c 	bl	800a1c8 <_sbrk_r>
 8009af0:	3001      	adds	r0, #1
 8009af2:	d101      	bne.n	8009af8 <sbrk_aligned+0x38>
 8009af4:	f04f 34ff 	mov.w	r4, #4294967295
 8009af8:	4620      	mov	r0, r4
 8009afa:	bd70      	pop	{r4, r5, r6, pc}
 8009afc:	200009e0 	.word	0x200009e0

08009b00 <_malloc_r>:
 8009b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b04:	1ccd      	adds	r5, r1, #3
 8009b06:	f025 0503 	bic.w	r5, r5, #3
 8009b0a:	3508      	adds	r5, #8
 8009b0c:	2d0c      	cmp	r5, #12
 8009b0e:	bf38      	it	cc
 8009b10:	250c      	movcc	r5, #12
 8009b12:	2d00      	cmp	r5, #0
 8009b14:	4607      	mov	r7, r0
 8009b16:	db01      	blt.n	8009b1c <_malloc_r+0x1c>
 8009b18:	42a9      	cmp	r1, r5
 8009b1a:	d905      	bls.n	8009b28 <_malloc_r+0x28>
 8009b1c:	230c      	movs	r3, #12
 8009b1e:	603b      	str	r3, [r7, #0]
 8009b20:	2600      	movs	r6, #0
 8009b22:	4630      	mov	r0, r6
 8009b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b28:	4e2e      	ldr	r6, [pc, #184]	; (8009be4 <_malloc_r+0xe4>)
 8009b2a:	f000 fb5d 	bl	800a1e8 <__malloc_lock>
 8009b2e:	6833      	ldr	r3, [r6, #0]
 8009b30:	461c      	mov	r4, r3
 8009b32:	bb34      	cbnz	r4, 8009b82 <_malloc_r+0x82>
 8009b34:	4629      	mov	r1, r5
 8009b36:	4638      	mov	r0, r7
 8009b38:	f7ff ffc2 	bl	8009ac0 <sbrk_aligned>
 8009b3c:	1c43      	adds	r3, r0, #1
 8009b3e:	4604      	mov	r4, r0
 8009b40:	d14d      	bne.n	8009bde <_malloc_r+0xde>
 8009b42:	6834      	ldr	r4, [r6, #0]
 8009b44:	4626      	mov	r6, r4
 8009b46:	2e00      	cmp	r6, #0
 8009b48:	d140      	bne.n	8009bcc <_malloc_r+0xcc>
 8009b4a:	6823      	ldr	r3, [r4, #0]
 8009b4c:	4631      	mov	r1, r6
 8009b4e:	4638      	mov	r0, r7
 8009b50:	eb04 0803 	add.w	r8, r4, r3
 8009b54:	f000 fb38 	bl	800a1c8 <_sbrk_r>
 8009b58:	4580      	cmp	r8, r0
 8009b5a:	d13a      	bne.n	8009bd2 <_malloc_r+0xd2>
 8009b5c:	6821      	ldr	r1, [r4, #0]
 8009b5e:	3503      	adds	r5, #3
 8009b60:	1a6d      	subs	r5, r5, r1
 8009b62:	f025 0503 	bic.w	r5, r5, #3
 8009b66:	3508      	adds	r5, #8
 8009b68:	2d0c      	cmp	r5, #12
 8009b6a:	bf38      	it	cc
 8009b6c:	250c      	movcc	r5, #12
 8009b6e:	4629      	mov	r1, r5
 8009b70:	4638      	mov	r0, r7
 8009b72:	f7ff ffa5 	bl	8009ac0 <sbrk_aligned>
 8009b76:	3001      	adds	r0, #1
 8009b78:	d02b      	beq.n	8009bd2 <_malloc_r+0xd2>
 8009b7a:	6823      	ldr	r3, [r4, #0]
 8009b7c:	442b      	add	r3, r5
 8009b7e:	6023      	str	r3, [r4, #0]
 8009b80:	e00e      	b.n	8009ba0 <_malloc_r+0xa0>
 8009b82:	6822      	ldr	r2, [r4, #0]
 8009b84:	1b52      	subs	r2, r2, r5
 8009b86:	d41e      	bmi.n	8009bc6 <_malloc_r+0xc6>
 8009b88:	2a0b      	cmp	r2, #11
 8009b8a:	d916      	bls.n	8009bba <_malloc_r+0xba>
 8009b8c:	1961      	adds	r1, r4, r5
 8009b8e:	42a3      	cmp	r3, r4
 8009b90:	6025      	str	r5, [r4, #0]
 8009b92:	bf18      	it	ne
 8009b94:	6059      	strne	r1, [r3, #4]
 8009b96:	6863      	ldr	r3, [r4, #4]
 8009b98:	bf08      	it	eq
 8009b9a:	6031      	streq	r1, [r6, #0]
 8009b9c:	5162      	str	r2, [r4, r5]
 8009b9e:	604b      	str	r3, [r1, #4]
 8009ba0:	4638      	mov	r0, r7
 8009ba2:	f104 060b 	add.w	r6, r4, #11
 8009ba6:	f000 fb25 	bl	800a1f4 <__malloc_unlock>
 8009baa:	f026 0607 	bic.w	r6, r6, #7
 8009bae:	1d23      	adds	r3, r4, #4
 8009bb0:	1af2      	subs	r2, r6, r3
 8009bb2:	d0b6      	beq.n	8009b22 <_malloc_r+0x22>
 8009bb4:	1b9b      	subs	r3, r3, r6
 8009bb6:	50a3      	str	r3, [r4, r2]
 8009bb8:	e7b3      	b.n	8009b22 <_malloc_r+0x22>
 8009bba:	6862      	ldr	r2, [r4, #4]
 8009bbc:	42a3      	cmp	r3, r4
 8009bbe:	bf0c      	ite	eq
 8009bc0:	6032      	streq	r2, [r6, #0]
 8009bc2:	605a      	strne	r2, [r3, #4]
 8009bc4:	e7ec      	b.n	8009ba0 <_malloc_r+0xa0>
 8009bc6:	4623      	mov	r3, r4
 8009bc8:	6864      	ldr	r4, [r4, #4]
 8009bca:	e7b2      	b.n	8009b32 <_malloc_r+0x32>
 8009bcc:	4634      	mov	r4, r6
 8009bce:	6876      	ldr	r6, [r6, #4]
 8009bd0:	e7b9      	b.n	8009b46 <_malloc_r+0x46>
 8009bd2:	230c      	movs	r3, #12
 8009bd4:	603b      	str	r3, [r7, #0]
 8009bd6:	4638      	mov	r0, r7
 8009bd8:	f000 fb0c 	bl	800a1f4 <__malloc_unlock>
 8009bdc:	e7a1      	b.n	8009b22 <_malloc_r+0x22>
 8009bde:	6025      	str	r5, [r4, #0]
 8009be0:	e7de      	b.n	8009ba0 <_malloc_r+0xa0>
 8009be2:	bf00      	nop
 8009be4:	200009dc 	.word	0x200009dc

08009be8 <__ssputs_r>:
 8009be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bec:	688e      	ldr	r6, [r1, #8]
 8009bee:	429e      	cmp	r6, r3
 8009bf0:	4682      	mov	sl, r0
 8009bf2:	460c      	mov	r4, r1
 8009bf4:	4690      	mov	r8, r2
 8009bf6:	461f      	mov	r7, r3
 8009bf8:	d838      	bhi.n	8009c6c <__ssputs_r+0x84>
 8009bfa:	898a      	ldrh	r2, [r1, #12]
 8009bfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c00:	d032      	beq.n	8009c68 <__ssputs_r+0x80>
 8009c02:	6825      	ldr	r5, [r4, #0]
 8009c04:	6909      	ldr	r1, [r1, #16]
 8009c06:	eba5 0901 	sub.w	r9, r5, r1
 8009c0a:	6965      	ldr	r5, [r4, #20]
 8009c0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c14:	3301      	adds	r3, #1
 8009c16:	444b      	add	r3, r9
 8009c18:	106d      	asrs	r5, r5, #1
 8009c1a:	429d      	cmp	r5, r3
 8009c1c:	bf38      	it	cc
 8009c1e:	461d      	movcc	r5, r3
 8009c20:	0553      	lsls	r3, r2, #21
 8009c22:	d531      	bpl.n	8009c88 <__ssputs_r+0xa0>
 8009c24:	4629      	mov	r1, r5
 8009c26:	f7ff ff6b 	bl	8009b00 <_malloc_r>
 8009c2a:	4606      	mov	r6, r0
 8009c2c:	b950      	cbnz	r0, 8009c44 <__ssputs_r+0x5c>
 8009c2e:	230c      	movs	r3, #12
 8009c30:	f8ca 3000 	str.w	r3, [sl]
 8009c34:	89a3      	ldrh	r3, [r4, #12]
 8009c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c3a:	81a3      	strh	r3, [r4, #12]
 8009c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c44:	6921      	ldr	r1, [r4, #16]
 8009c46:	464a      	mov	r2, r9
 8009c48:	f7ff fee8 	bl	8009a1c <memcpy>
 8009c4c:	89a3      	ldrh	r3, [r4, #12]
 8009c4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c56:	81a3      	strh	r3, [r4, #12]
 8009c58:	6126      	str	r6, [r4, #16]
 8009c5a:	6165      	str	r5, [r4, #20]
 8009c5c:	444e      	add	r6, r9
 8009c5e:	eba5 0509 	sub.w	r5, r5, r9
 8009c62:	6026      	str	r6, [r4, #0]
 8009c64:	60a5      	str	r5, [r4, #8]
 8009c66:	463e      	mov	r6, r7
 8009c68:	42be      	cmp	r6, r7
 8009c6a:	d900      	bls.n	8009c6e <__ssputs_r+0x86>
 8009c6c:	463e      	mov	r6, r7
 8009c6e:	6820      	ldr	r0, [r4, #0]
 8009c70:	4632      	mov	r2, r6
 8009c72:	4641      	mov	r1, r8
 8009c74:	f7ff fee0 	bl	8009a38 <memmove>
 8009c78:	68a3      	ldr	r3, [r4, #8]
 8009c7a:	1b9b      	subs	r3, r3, r6
 8009c7c:	60a3      	str	r3, [r4, #8]
 8009c7e:	6823      	ldr	r3, [r4, #0]
 8009c80:	4433      	add	r3, r6
 8009c82:	6023      	str	r3, [r4, #0]
 8009c84:	2000      	movs	r0, #0
 8009c86:	e7db      	b.n	8009c40 <__ssputs_r+0x58>
 8009c88:	462a      	mov	r2, r5
 8009c8a:	f000 fb05 	bl	800a298 <_realloc_r>
 8009c8e:	4606      	mov	r6, r0
 8009c90:	2800      	cmp	r0, #0
 8009c92:	d1e1      	bne.n	8009c58 <__ssputs_r+0x70>
 8009c94:	6921      	ldr	r1, [r4, #16]
 8009c96:	4650      	mov	r0, sl
 8009c98:	f000 fab2 	bl	800a200 <_free_r>
 8009c9c:	e7c7      	b.n	8009c2e <__ssputs_r+0x46>
	...

08009ca0 <_svfiprintf_r>:
 8009ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ca4:	4698      	mov	r8, r3
 8009ca6:	898b      	ldrh	r3, [r1, #12]
 8009ca8:	061b      	lsls	r3, r3, #24
 8009caa:	b09d      	sub	sp, #116	; 0x74
 8009cac:	4607      	mov	r7, r0
 8009cae:	460d      	mov	r5, r1
 8009cb0:	4614      	mov	r4, r2
 8009cb2:	d50e      	bpl.n	8009cd2 <_svfiprintf_r+0x32>
 8009cb4:	690b      	ldr	r3, [r1, #16]
 8009cb6:	b963      	cbnz	r3, 8009cd2 <_svfiprintf_r+0x32>
 8009cb8:	2140      	movs	r1, #64	; 0x40
 8009cba:	f7ff ff21 	bl	8009b00 <_malloc_r>
 8009cbe:	6028      	str	r0, [r5, #0]
 8009cc0:	6128      	str	r0, [r5, #16]
 8009cc2:	b920      	cbnz	r0, 8009cce <_svfiprintf_r+0x2e>
 8009cc4:	230c      	movs	r3, #12
 8009cc6:	603b      	str	r3, [r7, #0]
 8009cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ccc:	e0d1      	b.n	8009e72 <_svfiprintf_r+0x1d2>
 8009cce:	2340      	movs	r3, #64	; 0x40
 8009cd0:	616b      	str	r3, [r5, #20]
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8009cd6:	2320      	movs	r3, #32
 8009cd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ce0:	2330      	movs	r3, #48	; 0x30
 8009ce2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009e8c <_svfiprintf_r+0x1ec>
 8009ce6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cea:	f04f 0901 	mov.w	r9, #1
 8009cee:	4623      	mov	r3, r4
 8009cf0:	469a      	mov	sl, r3
 8009cf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cf6:	b10a      	cbz	r2, 8009cfc <_svfiprintf_r+0x5c>
 8009cf8:	2a25      	cmp	r2, #37	; 0x25
 8009cfa:	d1f9      	bne.n	8009cf0 <_svfiprintf_r+0x50>
 8009cfc:	ebba 0b04 	subs.w	fp, sl, r4
 8009d00:	d00b      	beq.n	8009d1a <_svfiprintf_r+0x7a>
 8009d02:	465b      	mov	r3, fp
 8009d04:	4622      	mov	r2, r4
 8009d06:	4629      	mov	r1, r5
 8009d08:	4638      	mov	r0, r7
 8009d0a:	f7ff ff6d 	bl	8009be8 <__ssputs_r>
 8009d0e:	3001      	adds	r0, #1
 8009d10:	f000 80aa 	beq.w	8009e68 <_svfiprintf_r+0x1c8>
 8009d14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d16:	445a      	add	r2, fp
 8009d18:	9209      	str	r2, [sp, #36]	; 0x24
 8009d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	f000 80a2 	beq.w	8009e68 <_svfiprintf_r+0x1c8>
 8009d24:	2300      	movs	r3, #0
 8009d26:	f04f 32ff 	mov.w	r2, #4294967295
 8009d2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d2e:	f10a 0a01 	add.w	sl, sl, #1
 8009d32:	9304      	str	r3, [sp, #16]
 8009d34:	9307      	str	r3, [sp, #28]
 8009d36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d3a:	931a      	str	r3, [sp, #104]	; 0x68
 8009d3c:	4654      	mov	r4, sl
 8009d3e:	2205      	movs	r2, #5
 8009d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d44:	4851      	ldr	r0, [pc, #324]	; (8009e8c <_svfiprintf_r+0x1ec>)
 8009d46:	f7f6 fa23 	bl	8000190 <memchr>
 8009d4a:	9a04      	ldr	r2, [sp, #16]
 8009d4c:	b9d8      	cbnz	r0, 8009d86 <_svfiprintf_r+0xe6>
 8009d4e:	06d0      	lsls	r0, r2, #27
 8009d50:	bf44      	itt	mi
 8009d52:	2320      	movmi	r3, #32
 8009d54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d58:	0711      	lsls	r1, r2, #28
 8009d5a:	bf44      	itt	mi
 8009d5c:	232b      	movmi	r3, #43	; 0x2b
 8009d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d62:	f89a 3000 	ldrb.w	r3, [sl]
 8009d66:	2b2a      	cmp	r3, #42	; 0x2a
 8009d68:	d015      	beq.n	8009d96 <_svfiprintf_r+0xf6>
 8009d6a:	9a07      	ldr	r2, [sp, #28]
 8009d6c:	4654      	mov	r4, sl
 8009d6e:	2000      	movs	r0, #0
 8009d70:	f04f 0c0a 	mov.w	ip, #10
 8009d74:	4621      	mov	r1, r4
 8009d76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d7a:	3b30      	subs	r3, #48	; 0x30
 8009d7c:	2b09      	cmp	r3, #9
 8009d7e:	d94e      	bls.n	8009e1e <_svfiprintf_r+0x17e>
 8009d80:	b1b0      	cbz	r0, 8009db0 <_svfiprintf_r+0x110>
 8009d82:	9207      	str	r2, [sp, #28]
 8009d84:	e014      	b.n	8009db0 <_svfiprintf_r+0x110>
 8009d86:	eba0 0308 	sub.w	r3, r0, r8
 8009d8a:	fa09 f303 	lsl.w	r3, r9, r3
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	9304      	str	r3, [sp, #16]
 8009d92:	46a2      	mov	sl, r4
 8009d94:	e7d2      	b.n	8009d3c <_svfiprintf_r+0x9c>
 8009d96:	9b03      	ldr	r3, [sp, #12]
 8009d98:	1d19      	adds	r1, r3, #4
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	9103      	str	r1, [sp, #12]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	bfbb      	ittet	lt
 8009da2:	425b      	neglt	r3, r3
 8009da4:	f042 0202 	orrlt.w	r2, r2, #2
 8009da8:	9307      	strge	r3, [sp, #28]
 8009daa:	9307      	strlt	r3, [sp, #28]
 8009dac:	bfb8      	it	lt
 8009dae:	9204      	strlt	r2, [sp, #16]
 8009db0:	7823      	ldrb	r3, [r4, #0]
 8009db2:	2b2e      	cmp	r3, #46	; 0x2e
 8009db4:	d10c      	bne.n	8009dd0 <_svfiprintf_r+0x130>
 8009db6:	7863      	ldrb	r3, [r4, #1]
 8009db8:	2b2a      	cmp	r3, #42	; 0x2a
 8009dba:	d135      	bne.n	8009e28 <_svfiprintf_r+0x188>
 8009dbc:	9b03      	ldr	r3, [sp, #12]
 8009dbe:	1d1a      	adds	r2, r3, #4
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	9203      	str	r2, [sp, #12]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	bfb8      	it	lt
 8009dc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dcc:	3402      	adds	r4, #2
 8009dce:	9305      	str	r3, [sp, #20]
 8009dd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009e9c <_svfiprintf_r+0x1fc>
 8009dd4:	7821      	ldrb	r1, [r4, #0]
 8009dd6:	2203      	movs	r2, #3
 8009dd8:	4650      	mov	r0, sl
 8009dda:	f7f6 f9d9 	bl	8000190 <memchr>
 8009dde:	b140      	cbz	r0, 8009df2 <_svfiprintf_r+0x152>
 8009de0:	2340      	movs	r3, #64	; 0x40
 8009de2:	eba0 000a 	sub.w	r0, r0, sl
 8009de6:	fa03 f000 	lsl.w	r0, r3, r0
 8009dea:	9b04      	ldr	r3, [sp, #16]
 8009dec:	4303      	orrs	r3, r0
 8009dee:	3401      	adds	r4, #1
 8009df0:	9304      	str	r3, [sp, #16]
 8009df2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009df6:	4826      	ldr	r0, [pc, #152]	; (8009e90 <_svfiprintf_r+0x1f0>)
 8009df8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dfc:	2206      	movs	r2, #6
 8009dfe:	f7f6 f9c7 	bl	8000190 <memchr>
 8009e02:	2800      	cmp	r0, #0
 8009e04:	d038      	beq.n	8009e78 <_svfiprintf_r+0x1d8>
 8009e06:	4b23      	ldr	r3, [pc, #140]	; (8009e94 <_svfiprintf_r+0x1f4>)
 8009e08:	bb1b      	cbnz	r3, 8009e52 <_svfiprintf_r+0x1b2>
 8009e0a:	9b03      	ldr	r3, [sp, #12]
 8009e0c:	3307      	adds	r3, #7
 8009e0e:	f023 0307 	bic.w	r3, r3, #7
 8009e12:	3308      	adds	r3, #8
 8009e14:	9303      	str	r3, [sp, #12]
 8009e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e18:	4433      	add	r3, r6
 8009e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e1c:	e767      	b.n	8009cee <_svfiprintf_r+0x4e>
 8009e1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e22:	460c      	mov	r4, r1
 8009e24:	2001      	movs	r0, #1
 8009e26:	e7a5      	b.n	8009d74 <_svfiprintf_r+0xd4>
 8009e28:	2300      	movs	r3, #0
 8009e2a:	3401      	adds	r4, #1
 8009e2c:	9305      	str	r3, [sp, #20]
 8009e2e:	4619      	mov	r1, r3
 8009e30:	f04f 0c0a 	mov.w	ip, #10
 8009e34:	4620      	mov	r0, r4
 8009e36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e3a:	3a30      	subs	r2, #48	; 0x30
 8009e3c:	2a09      	cmp	r2, #9
 8009e3e:	d903      	bls.n	8009e48 <_svfiprintf_r+0x1a8>
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d0c5      	beq.n	8009dd0 <_svfiprintf_r+0x130>
 8009e44:	9105      	str	r1, [sp, #20]
 8009e46:	e7c3      	b.n	8009dd0 <_svfiprintf_r+0x130>
 8009e48:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e4c:	4604      	mov	r4, r0
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e7f0      	b.n	8009e34 <_svfiprintf_r+0x194>
 8009e52:	ab03      	add	r3, sp, #12
 8009e54:	9300      	str	r3, [sp, #0]
 8009e56:	462a      	mov	r2, r5
 8009e58:	4b0f      	ldr	r3, [pc, #60]	; (8009e98 <_svfiprintf_r+0x1f8>)
 8009e5a:	a904      	add	r1, sp, #16
 8009e5c:	4638      	mov	r0, r7
 8009e5e:	f3af 8000 	nop.w
 8009e62:	1c42      	adds	r2, r0, #1
 8009e64:	4606      	mov	r6, r0
 8009e66:	d1d6      	bne.n	8009e16 <_svfiprintf_r+0x176>
 8009e68:	89ab      	ldrh	r3, [r5, #12]
 8009e6a:	065b      	lsls	r3, r3, #25
 8009e6c:	f53f af2c 	bmi.w	8009cc8 <_svfiprintf_r+0x28>
 8009e70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e72:	b01d      	add	sp, #116	; 0x74
 8009e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e78:	ab03      	add	r3, sp, #12
 8009e7a:	9300      	str	r3, [sp, #0]
 8009e7c:	462a      	mov	r2, r5
 8009e7e:	4b06      	ldr	r3, [pc, #24]	; (8009e98 <_svfiprintf_r+0x1f8>)
 8009e80:	a904      	add	r1, sp, #16
 8009e82:	4638      	mov	r0, r7
 8009e84:	f000 f87a 	bl	8009f7c <_printf_i>
 8009e88:	e7eb      	b.n	8009e62 <_svfiprintf_r+0x1c2>
 8009e8a:	bf00      	nop
 8009e8c:	0800af1c 	.word	0x0800af1c
 8009e90:	0800af26 	.word	0x0800af26
 8009e94:	00000000 	.word	0x00000000
 8009e98:	08009be9 	.word	0x08009be9
 8009e9c:	0800af22 	.word	0x0800af22

08009ea0 <_printf_common>:
 8009ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ea4:	4616      	mov	r6, r2
 8009ea6:	4699      	mov	r9, r3
 8009ea8:	688a      	ldr	r2, [r1, #8]
 8009eaa:	690b      	ldr	r3, [r1, #16]
 8009eac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	bfb8      	it	lt
 8009eb4:	4613      	movlt	r3, r2
 8009eb6:	6033      	str	r3, [r6, #0]
 8009eb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ebc:	4607      	mov	r7, r0
 8009ebe:	460c      	mov	r4, r1
 8009ec0:	b10a      	cbz	r2, 8009ec6 <_printf_common+0x26>
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	6033      	str	r3, [r6, #0]
 8009ec6:	6823      	ldr	r3, [r4, #0]
 8009ec8:	0699      	lsls	r1, r3, #26
 8009eca:	bf42      	ittt	mi
 8009ecc:	6833      	ldrmi	r3, [r6, #0]
 8009ece:	3302      	addmi	r3, #2
 8009ed0:	6033      	strmi	r3, [r6, #0]
 8009ed2:	6825      	ldr	r5, [r4, #0]
 8009ed4:	f015 0506 	ands.w	r5, r5, #6
 8009ed8:	d106      	bne.n	8009ee8 <_printf_common+0x48>
 8009eda:	f104 0a19 	add.w	sl, r4, #25
 8009ede:	68e3      	ldr	r3, [r4, #12]
 8009ee0:	6832      	ldr	r2, [r6, #0]
 8009ee2:	1a9b      	subs	r3, r3, r2
 8009ee4:	42ab      	cmp	r3, r5
 8009ee6:	dc26      	bgt.n	8009f36 <_printf_common+0x96>
 8009ee8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009eec:	1e13      	subs	r3, r2, #0
 8009eee:	6822      	ldr	r2, [r4, #0]
 8009ef0:	bf18      	it	ne
 8009ef2:	2301      	movne	r3, #1
 8009ef4:	0692      	lsls	r2, r2, #26
 8009ef6:	d42b      	bmi.n	8009f50 <_printf_common+0xb0>
 8009ef8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009efc:	4649      	mov	r1, r9
 8009efe:	4638      	mov	r0, r7
 8009f00:	47c0      	blx	r8
 8009f02:	3001      	adds	r0, #1
 8009f04:	d01e      	beq.n	8009f44 <_printf_common+0xa4>
 8009f06:	6823      	ldr	r3, [r4, #0]
 8009f08:	68e5      	ldr	r5, [r4, #12]
 8009f0a:	6832      	ldr	r2, [r6, #0]
 8009f0c:	f003 0306 	and.w	r3, r3, #6
 8009f10:	2b04      	cmp	r3, #4
 8009f12:	bf08      	it	eq
 8009f14:	1aad      	subeq	r5, r5, r2
 8009f16:	68a3      	ldr	r3, [r4, #8]
 8009f18:	6922      	ldr	r2, [r4, #16]
 8009f1a:	bf0c      	ite	eq
 8009f1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f20:	2500      	movne	r5, #0
 8009f22:	4293      	cmp	r3, r2
 8009f24:	bfc4      	itt	gt
 8009f26:	1a9b      	subgt	r3, r3, r2
 8009f28:	18ed      	addgt	r5, r5, r3
 8009f2a:	2600      	movs	r6, #0
 8009f2c:	341a      	adds	r4, #26
 8009f2e:	42b5      	cmp	r5, r6
 8009f30:	d11a      	bne.n	8009f68 <_printf_common+0xc8>
 8009f32:	2000      	movs	r0, #0
 8009f34:	e008      	b.n	8009f48 <_printf_common+0xa8>
 8009f36:	2301      	movs	r3, #1
 8009f38:	4652      	mov	r2, sl
 8009f3a:	4649      	mov	r1, r9
 8009f3c:	4638      	mov	r0, r7
 8009f3e:	47c0      	blx	r8
 8009f40:	3001      	adds	r0, #1
 8009f42:	d103      	bne.n	8009f4c <_printf_common+0xac>
 8009f44:	f04f 30ff 	mov.w	r0, #4294967295
 8009f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f4c:	3501      	adds	r5, #1
 8009f4e:	e7c6      	b.n	8009ede <_printf_common+0x3e>
 8009f50:	18e1      	adds	r1, r4, r3
 8009f52:	1c5a      	adds	r2, r3, #1
 8009f54:	2030      	movs	r0, #48	; 0x30
 8009f56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f5a:	4422      	add	r2, r4
 8009f5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f64:	3302      	adds	r3, #2
 8009f66:	e7c7      	b.n	8009ef8 <_printf_common+0x58>
 8009f68:	2301      	movs	r3, #1
 8009f6a:	4622      	mov	r2, r4
 8009f6c:	4649      	mov	r1, r9
 8009f6e:	4638      	mov	r0, r7
 8009f70:	47c0      	blx	r8
 8009f72:	3001      	adds	r0, #1
 8009f74:	d0e6      	beq.n	8009f44 <_printf_common+0xa4>
 8009f76:	3601      	adds	r6, #1
 8009f78:	e7d9      	b.n	8009f2e <_printf_common+0x8e>
	...

08009f7c <_printf_i>:
 8009f7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f80:	7e0f      	ldrb	r7, [r1, #24]
 8009f82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f84:	2f78      	cmp	r7, #120	; 0x78
 8009f86:	4691      	mov	r9, r2
 8009f88:	4680      	mov	r8, r0
 8009f8a:	460c      	mov	r4, r1
 8009f8c:	469a      	mov	sl, r3
 8009f8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f92:	d807      	bhi.n	8009fa4 <_printf_i+0x28>
 8009f94:	2f62      	cmp	r7, #98	; 0x62
 8009f96:	d80a      	bhi.n	8009fae <_printf_i+0x32>
 8009f98:	2f00      	cmp	r7, #0
 8009f9a:	f000 80d8 	beq.w	800a14e <_printf_i+0x1d2>
 8009f9e:	2f58      	cmp	r7, #88	; 0x58
 8009fa0:	f000 80a3 	beq.w	800a0ea <_printf_i+0x16e>
 8009fa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009fac:	e03a      	b.n	800a024 <_printf_i+0xa8>
 8009fae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009fb2:	2b15      	cmp	r3, #21
 8009fb4:	d8f6      	bhi.n	8009fa4 <_printf_i+0x28>
 8009fb6:	a101      	add	r1, pc, #4	; (adr r1, 8009fbc <_printf_i+0x40>)
 8009fb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fbc:	0800a015 	.word	0x0800a015
 8009fc0:	0800a029 	.word	0x0800a029
 8009fc4:	08009fa5 	.word	0x08009fa5
 8009fc8:	08009fa5 	.word	0x08009fa5
 8009fcc:	08009fa5 	.word	0x08009fa5
 8009fd0:	08009fa5 	.word	0x08009fa5
 8009fd4:	0800a029 	.word	0x0800a029
 8009fd8:	08009fa5 	.word	0x08009fa5
 8009fdc:	08009fa5 	.word	0x08009fa5
 8009fe0:	08009fa5 	.word	0x08009fa5
 8009fe4:	08009fa5 	.word	0x08009fa5
 8009fe8:	0800a135 	.word	0x0800a135
 8009fec:	0800a059 	.word	0x0800a059
 8009ff0:	0800a117 	.word	0x0800a117
 8009ff4:	08009fa5 	.word	0x08009fa5
 8009ff8:	08009fa5 	.word	0x08009fa5
 8009ffc:	0800a157 	.word	0x0800a157
 800a000:	08009fa5 	.word	0x08009fa5
 800a004:	0800a059 	.word	0x0800a059
 800a008:	08009fa5 	.word	0x08009fa5
 800a00c:	08009fa5 	.word	0x08009fa5
 800a010:	0800a11f 	.word	0x0800a11f
 800a014:	682b      	ldr	r3, [r5, #0]
 800a016:	1d1a      	adds	r2, r3, #4
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	602a      	str	r2, [r5, #0]
 800a01c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a020:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a024:	2301      	movs	r3, #1
 800a026:	e0a3      	b.n	800a170 <_printf_i+0x1f4>
 800a028:	6820      	ldr	r0, [r4, #0]
 800a02a:	6829      	ldr	r1, [r5, #0]
 800a02c:	0606      	lsls	r6, r0, #24
 800a02e:	f101 0304 	add.w	r3, r1, #4
 800a032:	d50a      	bpl.n	800a04a <_printf_i+0xce>
 800a034:	680e      	ldr	r6, [r1, #0]
 800a036:	602b      	str	r3, [r5, #0]
 800a038:	2e00      	cmp	r6, #0
 800a03a:	da03      	bge.n	800a044 <_printf_i+0xc8>
 800a03c:	232d      	movs	r3, #45	; 0x2d
 800a03e:	4276      	negs	r6, r6
 800a040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a044:	485e      	ldr	r0, [pc, #376]	; (800a1c0 <_printf_i+0x244>)
 800a046:	230a      	movs	r3, #10
 800a048:	e019      	b.n	800a07e <_printf_i+0x102>
 800a04a:	680e      	ldr	r6, [r1, #0]
 800a04c:	602b      	str	r3, [r5, #0]
 800a04e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a052:	bf18      	it	ne
 800a054:	b236      	sxthne	r6, r6
 800a056:	e7ef      	b.n	800a038 <_printf_i+0xbc>
 800a058:	682b      	ldr	r3, [r5, #0]
 800a05a:	6820      	ldr	r0, [r4, #0]
 800a05c:	1d19      	adds	r1, r3, #4
 800a05e:	6029      	str	r1, [r5, #0]
 800a060:	0601      	lsls	r1, r0, #24
 800a062:	d501      	bpl.n	800a068 <_printf_i+0xec>
 800a064:	681e      	ldr	r6, [r3, #0]
 800a066:	e002      	b.n	800a06e <_printf_i+0xf2>
 800a068:	0646      	lsls	r6, r0, #25
 800a06a:	d5fb      	bpl.n	800a064 <_printf_i+0xe8>
 800a06c:	881e      	ldrh	r6, [r3, #0]
 800a06e:	4854      	ldr	r0, [pc, #336]	; (800a1c0 <_printf_i+0x244>)
 800a070:	2f6f      	cmp	r7, #111	; 0x6f
 800a072:	bf0c      	ite	eq
 800a074:	2308      	moveq	r3, #8
 800a076:	230a      	movne	r3, #10
 800a078:	2100      	movs	r1, #0
 800a07a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a07e:	6865      	ldr	r5, [r4, #4]
 800a080:	60a5      	str	r5, [r4, #8]
 800a082:	2d00      	cmp	r5, #0
 800a084:	bfa2      	ittt	ge
 800a086:	6821      	ldrge	r1, [r4, #0]
 800a088:	f021 0104 	bicge.w	r1, r1, #4
 800a08c:	6021      	strge	r1, [r4, #0]
 800a08e:	b90e      	cbnz	r6, 800a094 <_printf_i+0x118>
 800a090:	2d00      	cmp	r5, #0
 800a092:	d04d      	beq.n	800a130 <_printf_i+0x1b4>
 800a094:	4615      	mov	r5, r2
 800a096:	fbb6 f1f3 	udiv	r1, r6, r3
 800a09a:	fb03 6711 	mls	r7, r3, r1, r6
 800a09e:	5dc7      	ldrb	r7, [r0, r7]
 800a0a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a0a4:	4637      	mov	r7, r6
 800a0a6:	42bb      	cmp	r3, r7
 800a0a8:	460e      	mov	r6, r1
 800a0aa:	d9f4      	bls.n	800a096 <_printf_i+0x11a>
 800a0ac:	2b08      	cmp	r3, #8
 800a0ae:	d10b      	bne.n	800a0c8 <_printf_i+0x14c>
 800a0b0:	6823      	ldr	r3, [r4, #0]
 800a0b2:	07de      	lsls	r6, r3, #31
 800a0b4:	d508      	bpl.n	800a0c8 <_printf_i+0x14c>
 800a0b6:	6923      	ldr	r3, [r4, #16]
 800a0b8:	6861      	ldr	r1, [r4, #4]
 800a0ba:	4299      	cmp	r1, r3
 800a0bc:	bfde      	ittt	le
 800a0be:	2330      	movle	r3, #48	; 0x30
 800a0c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a0c8:	1b52      	subs	r2, r2, r5
 800a0ca:	6122      	str	r2, [r4, #16]
 800a0cc:	f8cd a000 	str.w	sl, [sp]
 800a0d0:	464b      	mov	r3, r9
 800a0d2:	aa03      	add	r2, sp, #12
 800a0d4:	4621      	mov	r1, r4
 800a0d6:	4640      	mov	r0, r8
 800a0d8:	f7ff fee2 	bl	8009ea0 <_printf_common>
 800a0dc:	3001      	adds	r0, #1
 800a0de:	d14c      	bne.n	800a17a <_printf_i+0x1fe>
 800a0e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e4:	b004      	add	sp, #16
 800a0e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ea:	4835      	ldr	r0, [pc, #212]	; (800a1c0 <_printf_i+0x244>)
 800a0ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a0f0:	6829      	ldr	r1, [r5, #0]
 800a0f2:	6823      	ldr	r3, [r4, #0]
 800a0f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a0f8:	6029      	str	r1, [r5, #0]
 800a0fa:	061d      	lsls	r5, r3, #24
 800a0fc:	d514      	bpl.n	800a128 <_printf_i+0x1ac>
 800a0fe:	07df      	lsls	r7, r3, #31
 800a100:	bf44      	itt	mi
 800a102:	f043 0320 	orrmi.w	r3, r3, #32
 800a106:	6023      	strmi	r3, [r4, #0]
 800a108:	b91e      	cbnz	r6, 800a112 <_printf_i+0x196>
 800a10a:	6823      	ldr	r3, [r4, #0]
 800a10c:	f023 0320 	bic.w	r3, r3, #32
 800a110:	6023      	str	r3, [r4, #0]
 800a112:	2310      	movs	r3, #16
 800a114:	e7b0      	b.n	800a078 <_printf_i+0xfc>
 800a116:	6823      	ldr	r3, [r4, #0]
 800a118:	f043 0320 	orr.w	r3, r3, #32
 800a11c:	6023      	str	r3, [r4, #0]
 800a11e:	2378      	movs	r3, #120	; 0x78
 800a120:	4828      	ldr	r0, [pc, #160]	; (800a1c4 <_printf_i+0x248>)
 800a122:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a126:	e7e3      	b.n	800a0f0 <_printf_i+0x174>
 800a128:	0659      	lsls	r1, r3, #25
 800a12a:	bf48      	it	mi
 800a12c:	b2b6      	uxthmi	r6, r6
 800a12e:	e7e6      	b.n	800a0fe <_printf_i+0x182>
 800a130:	4615      	mov	r5, r2
 800a132:	e7bb      	b.n	800a0ac <_printf_i+0x130>
 800a134:	682b      	ldr	r3, [r5, #0]
 800a136:	6826      	ldr	r6, [r4, #0]
 800a138:	6961      	ldr	r1, [r4, #20]
 800a13a:	1d18      	adds	r0, r3, #4
 800a13c:	6028      	str	r0, [r5, #0]
 800a13e:	0635      	lsls	r5, r6, #24
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	d501      	bpl.n	800a148 <_printf_i+0x1cc>
 800a144:	6019      	str	r1, [r3, #0]
 800a146:	e002      	b.n	800a14e <_printf_i+0x1d2>
 800a148:	0670      	lsls	r0, r6, #25
 800a14a:	d5fb      	bpl.n	800a144 <_printf_i+0x1c8>
 800a14c:	8019      	strh	r1, [r3, #0]
 800a14e:	2300      	movs	r3, #0
 800a150:	6123      	str	r3, [r4, #16]
 800a152:	4615      	mov	r5, r2
 800a154:	e7ba      	b.n	800a0cc <_printf_i+0x150>
 800a156:	682b      	ldr	r3, [r5, #0]
 800a158:	1d1a      	adds	r2, r3, #4
 800a15a:	602a      	str	r2, [r5, #0]
 800a15c:	681d      	ldr	r5, [r3, #0]
 800a15e:	6862      	ldr	r2, [r4, #4]
 800a160:	2100      	movs	r1, #0
 800a162:	4628      	mov	r0, r5
 800a164:	f7f6 f814 	bl	8000190 <memchr>
 800a168:	b108      	cbz	r0, 800a16e <_printf_i+0x1f2>
 800a16a:	1b40      	subs	r0, r0, r5
 800a16c:	6060      	str	r0, [r4, #4]
 800a16e:	6863      	ldr	r3, [r4, #4]
 800a170:	6123      	str	r3, [r4, #16]
 800a172:	2300      	movs	r3, #0
 800a174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a178:	e7a8      	b.n	800a0cc <_printf_i+0x150>
 800a17a:	6923      	ldr	r3, [r4, #16]
 800a17c:	462a      	mov	r2, r5
 800a17e:	4649      	mov	r1, r9
 800a180:	4640      	mov	r0, r8
 800a182:	47d0      	blx	sl
 800a184:	3001      	adds	r0, #1
 800a186:	d0ab      	beq.n	800a0e0 <_printf_i+0x164>
 800a188:	6823      	ldr	r3, [r4, #0]
 800a18a:	079b      	lsls	r3, r3, #30
 800a18c:	d413      	bmi.n	800a1b6 <_printf_i+0x23a>
 800a18e:	68e0      	ldr	r0, [r4, #12]
 800a190:	9b03      	ldr	r3, [sp, #12]
 800a192:	4298      	cmp	r0, r3
 800a194:	bfb8      	it	lt
 800a196:	4618      	movlt	r0, r3
 800a198:	e7a4      	b.n	800a0e4 <_printf_i+0x168>
 800a19a:	2301      	movs	r3, #1
 800a19c:	4632      	mov	r2, r6
 800a19e:	4649      	mov	r1, r9
 800a1a0:	4640      	mov	r0, r8
 800a1a2:	47d0      	blx	sl
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	d09b      	beq.n	800a0e0 <_printf_i+0x164>
 800a1a8:	3501      	adds	r5, #1
 800a1aa:	68e3      	ldr	r3, [r4, #12]
 800a1ac:	9903      	ldr	r1, [sp, #12]
 800a1ae:	1a5b      	subs	r3, r3, r1
 800a1b0:	42ab      	cmp	r3, r5
 800a1b2:	dcf2      	bgt.n	800a19a <_printf_i+0x21e>
 800a1b4:	e7eb      	b.n	800a18e <_printf_i+0x212>
 800a1b6:	2500      	movs	r5, #0
 800a1b8:	f104 0619 	add.w	r6, r4, #25
 800a1bc:	e7f5      	b.n	800a1aa <_printf_i+0x22e>
 800a1be:	bf00      	nop
 800a1c0:	0800af2d 	.word	0x0800af2d
 800a1c4:	0800af3e 	.word	0x0800af3e

0800a1c8 <_sbrk_r>:
 800a1c8:	b538      	push	{r3, r4, r5, lr}
 800a1ca:	4d06      	ldr	r5, [pc, #24]	; (800a1e4 <_sbrk_r+0x1c>)
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	4604      	mov	r4, r0
 800a1d0:	4608      	mov	r0, r1
 800a1d2:	602b      	str	r3, [r5, #0]
 800a1d4:	f7f8 fa82 	bl	80026dc <_sbrk>
 800a1d8:	1c43      	adds	r3, r0, #1
 800a1da:	d102      	bne.n	800a1e2 <_sbrk_r+0x1a>
 800a1dc:	682b      	ldr	r3, [r5, #0]
 800a1de:	b103      	cbz	r3, 800a1e2 <_sbrk_r+0x1a>
 800a1e0:	6023      	str	r3, [r4, #0]
 800a1e2:	bd38      	pop	{r3, r4, r5, pc}
 800a1e4:	200009e4 	.word	0x200009e4

0800a1e8 <__malloc_lock>:
 800a1e8:	4801      	ldr	r0, [pc, #4]	; (800a1f0 <__malloc_lock+0x8>)
 800a1ea:	f7ff bc67 	b.w	8009abc <__retarget_lock_acquire_recursive>
 800a1ee:	bf00      	nop
 800a1f0:	200009d8 	.word	0x200009d8

0800a1f4 <__malloc_unlock>:
 800a1f4:	4801      	ldr	r0, [pc, #4]	; (800a1fc <__malloc_unlock+0x8>)
 800a1f6:	f7ff bc62 	b.w	8009abe <__retarget_lock_release_recursive>
 800a1fa:	bf00      	nop
 800a1fc:	200009d8 	.word	0x200009d8

0800a200 <_free_r>:
 800a200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a202:	2900      	cmp	r1, #0
 800a204:	d044      	beq.n	800a290 <_free_r+0x90>
 800a206:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a20a:	9001      	str	r0, [sp, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	f1a1 0404 	sub.w	r4, r1, #4
 800a212:	bfb8      	it	lt
 800a214:	18e4      	addlt	r4, r4, r3
 800a216:	f7ff ffe7 	bl	800a1e8 <__malloc_lock>
 800a21a:	4a1e      	ldr	r2, [pc, #120]	; (800a294 <_free_r+0x94>)
 800a21c:	9801      	ldr	r0, [sp, #4]
 800a21e:	6813      	ldr	r3, [r2, #0]
 800a220:	b933      	cbnz	r3, 800a230 <_free_r+0x30>
 800a222:	6063      	str	r3, [r4, #4]
 800a224:	6014      	str	r4, [r2, #0]
 800a226:	b003      	add	sp, #12
 800a228:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a22c:	f7ff bfe2 	b.w	800a1f4 <__malloc_unlock>
 800a230:	42a3      	cmp	r3, r4
 800a232:	d908      	bls.n	800a246 <_free_r+0x46>
 800a234:	6825      	ldr	r5, [r4, #0]
 800a236:	1961      	adds	r1, r4, r5
 800a238:	428b      	cmp	r3, r1
 800a23a:	bf01      	itttt	eq
 800a23c:	6819      	ldreq	r1, [r3, #0]
 800a23e:	685b      	ldreq	r3, [r3, #4]
 800a240:	1949      	addeq	r1, r1, r5
 800a242:	6021      	streq	r1, [r4, #0]
 800a244:	e7ed      	b.n	800a222 <_free_r+0x22>
 800a246:	461a      	mov	r2, r3
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	b10b      	cbz	r3, 800a250 <_free_r+0x50>
 800a24c:	42a3      	cmp	r3, r4
 800a24e:	d9fa      	bls.n	800a246 <_free_r+0x46>
 800a250:	6811      	ldr	r1, [r2, #0]
 800a252:	1855      	adds	r5, r2, r1
 800a254:	42a5      	cmp	r5, r4
 800a256:	d10b      	bne.n	800a270 <_free_r+0x70>
 800a258:	6824      	ldr	r4, [r4, #0]
 800a25a:	4421      	add	r1, r4
 800a25c:	1854      	adds	r4, r2, r1
 800a25e:	42a3      	cmp	r3, r4
 800a260:	6011      	str	r1, [r2, #0]
 800a262:	d1e0      	bne.n	800a226 <_free_r+0x26>
 800a264:	681c      	ldr	r4, [r3, #0]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	6053      	str	r3, [r2, #4]
 800a26a:	4421      	add	r1, r4
 800a26c:	6011      	str	r1, [r2, #0]
 800a26e:	e7da      	b.n	800a226 <_free_r+0x26>
 800a270:	d902      	bls.n	800a278 <_free_r+0x78>
 800a272:	230c      	movs	r3, #12
 800a274:	6003      	str	r3, [r0, #0]
 800a276:	e7d6      	b.n	800a226 <_free_r+0x26>
 800a278:	6825      	ldr	r5, [r4, #0]
 800a27a:	1961      	adds	r1, r4, r5
 800a27c:	428b      	cmp	r3, r1
 800a27e:	bf04      	itt	eq
 800a280:	6819      	ldreq	r1, [r3, #0]
 800a282:	685b      	ldreq	r3, [r3, #4]
 800a284:	6063      	str	r3, [r4, #4]
 800a286:	bf04      	itt	eq
 800a288:	1949      	addeq	r1, r1, r5
 800a28a:	6021      	streq	r1, [r4, #0]
 800a28c:	6054      	str	r4, [r2, #4]
 800a28e:	e7ca      	b.n	800a226 <_free_r+0x26>
 800a290:	b003      	add	sp, #12
 800a292:	bd30      	pop	{r4, r5, pc}
 800a294:	200009dc 	.word	0x200009dc

0800a298 <_realloc_r>:
 800a298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a29c:	4680      	mov	r8, r0
 800a29e:	4614      	mov	r4, r2
 800a2a0:	460e      	mov	r6, r1
 800a2a2:	b921      	cbnz	r1, 800a2ae <_realloc_r+0x16>
 800a2a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a8:	4611      	mov	r1, r2
 800a2aa:	f7ff bc29 	b.w	8009b00 <_malloc_r>
 800a2ae:	b92a      	cbnz	r2, 800a2bc <_realloc_r+0x24>
 800a2b0:	f7ff ffa6 	bl	800a200 <_free_r>
 800a2b4:	4625      	mov	r5, r4
 800a2b6:	4628      	mov	r0, r5
 800a2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2bc:	f000 f81b 	bl	800a2f6 <_malloc_usable_size_r>
 800a2c0:	4284      	cmp	r4, r0
 800a2c2:	4607      	mov	r7, r0
 800a2c4:	d802      	bhi.n	800a2cc <_realloc_r+0x34>
 800a2c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2ca:	d812      	bhi.n	800a2f2 <_realloc_r+0x5a>
 800a2cc:	4621      	mov	r1, r4
 800a2ce:	4640      	mov	r0, r8
 800a2d0:	f7ff fc16 	bl	8009b00 <_malloc_r>
 800a2d4:	4605      	mov	r5, r0
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	d0ed      	beq.n	800a2b6 <_realloc_r+0x1e>
 800a2da:	42bc      	cmp	r4, r7
 800a2dc:	4622      	mov	r2, r4
 800a2de:	4631      	mov	r1, r6
 800a2e0:	bf28      	it	cs
 800a2e2:	463a      	movcs	r2, r7
 800a2e4:	f7ff fb9a 	bl	8009a1c <memcpy>
 800a2e8:	4631      	mov	r1, r6
 800a2ea:	4640      	mov	r0, r8
 800a2ec:	f7ff ff88 	bl	800a200 <_free_r>
 800a2f0:	e7e1      	b.n	800a2b6 <_realloc_r+0x1e>
 800a2f2:	4635      	mov	r5, r6
 800a2f4:	e7df      	b.n	800a2b6 <_realloc_r+0x1e>

0800a2f6 <_malloc_usable_size_r>:
 800a2f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2fa:	1f18      	subs	r0, r3, #4
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	bfbc      	itt	lt
 800a300:	580b      	ldrlt	r3, [r1, r0]
 800a302:	18c0      	addlt	r0, r0, r3
 800a304:	4770      	bx	lr
	...

0800a308 <_init>:
 800a308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a30a:	bf00      	nop
 800a30c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a30e:	bc08      	pop	{r3}
 800a310:	469e      	mov	lr, r3
 800a312:	4770      	bx	lr

0800a314 <_fini>:
 800a314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a316:	bf00      	nop
 800a318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a31a:	bc08      	pop	{r3}
 800a31c:	469e      	mov	lr, r3
 800a31e:	4770      	bx	lr
